// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace msg {
PROTOBUF_CONSTEXPR BountySetting::BountySetting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.currencyid_)*/0
  , /*decltype(_impl_.currencymin_)*/0
  , /*decltype(_impl_.currencymax_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BountySettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BountySettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BountySettingDefaultTypeInternal() {}
  union {
    BountySetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BountySettingDefaultTypeInternal _BountySetting_default_instance_;
PROTOBUF_CONSTEXPR TeamOPSetting::TeamOPSetting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lockgroups_)*/{}
  , /*decltype(_impl_.pwd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channelusrid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.workshop_)*/nullptr
  , /*decltype(_impl_.bounty_)*/nullptr
  , /*decltype(_impl_.pvesetting_)*/nullptr
  , /*decltype(_impl_.pwdopen_)*/false
  , /*decltype(_impl_.visible_)*/false
  , /*decltype(_impl_.inviteauthority_)*/0
  , /*decltype(_impl_.teamtype_)*/0
  , /*decltype(_impl_.submode_)*/0u
  , /*decltype(_impl_.customgameid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TeamOPSettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamOPSettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamOPSettingDefaultTypeInternal() {}
  union {
    TeamOPSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamOPSettingDefaultTypeInternal _TeamOPSetting_default_instance_;
PROTOBUF_CONSTEXPR WorkshopSetting::WorkshopSetting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mapname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapid_)*/0
  , /*decltype(_impl_.submapid_)*/0
  , /*decltype(_impl_.joinaiswitch_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkshopSettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkshopSettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkshopSettingDefaultTypeInternal() {}
  union {
    WorkshopSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkshopSettingDefaultTypeInternal _WorkshopSetting_default_instance_;
PROTOBUF_CONSTEXPR TeamOPChangeGroup::TeamOPChangeGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.groupid_)*/0
  , /*decltype(_impl_.slot_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TeamOPChangeGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamOPChangeGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamOPChangeGroupDefaultTypeInternal() {}
  union {
    TeamOPChangeGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamOPChangeGroupDefaultTypeInternal _TeamOPChangeGroup_default_instance_;
PROTOBUF_CONSTEXPR TeamOPSelfChangeGroup::TeamOPSelfChangeGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groupid_)*/0
  , /*decltype(_impl_.slot_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TeamOPSelfChangeGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamOPSelfChangeGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamOPSelfChangeGroupDefaultTypeInternal() {}
  union {
    TeamOPSelfChangeGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamOPSelfChangeGroupDefaultTypeInternal _TeamOPSelfChangeGroup_default_instance_;
PROTOBUF_CONSTEXPR TeamOPAppointLeader::TeamOPAppointLeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TeamOPAppointLeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamOPAppointLeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamOPAppointLeaderDefaultTypeInternal() {}
  union {
    TeamOPAppointLeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamOPAppointLeaderDefaultTypeInternal _TeamOPAppointLeader_default_instance_;
PROTOBUF_CONSTEXPR TeamOPChangeName::TeamOPChangeName(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TeamOPChangeNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamOPChangeNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamOPChangeNameDefaultTypeInternal() {}
  union {
    TeamOPChangeName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamOPChangeNameDefaultTypeInternal _TeamOPChangeName_default_instance_;
PROTOBUF_CONSTEXPR TeamOPSwitchSlot::TeamOPSwitchSlot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playertwo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.groupone_)*/0
  , /*decltype(_impl_.grouptwo_)*/0
  , /*decltype(_impl_.slotone_)*/0
  , /*decltype(_impl_.slottwo_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TeamOPSwitchSlotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamOPSwitchSlotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamOPSwitchSlotDefaultTypeInternal() {}
  union {
    TeamOPSwitchSlot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamOPSwitchSlotDefaultTypeInternal _TeamOPSwitchSlot_default_instance_;
PROTOBUF_CONSTEXPR TeamBetOnBounty::TeamBetOnBounty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TeamBetOnBountyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamBetOnBountyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamBetOnBountyDefaultTypeInternal() {}
  union {
    TeamBetOnBounty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamBetOnBountyDefaultTypeInternal _TeamBetOnBounty_default_instance_;
PROTOBUF_CONSTEXPR TeamOP::TeamOP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.setting_)*/nullptr
  , /*decltype(_impl_.changegroup_)*/nullptr
  , /*decltype(_impl_.appointleader_)*/nullptr
  , /*decltype(_impl_.selfchangegroup_)*/nullptr
  , /*decltype(_impl_.changename_)*/nullptr
  , /*decltype(_impl_.switchslot_)*/nullptr
  , /*decltype(_impl_.betonbounty_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TeamOPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamOPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamOPDefaultTypeInternal() {}
  union {
    TeamOP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamOPDefaultTypeInternal _TeamOP_default_instance_;
PROTOBUF_CONSTEXPR TeamBaseInfo::TeamBaseInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channelusrid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.wssetting_)*/nullptr
  , /*decltype(_impl_.bounty_)*/nullptr
  , /*decltype(_impl_.teamid_)*/uint64_t{0u}
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_.competotpernum_)*/0
  , /*decltype(_impl_.competotpertotalnum_)*/0
  , /*decltype(_impl_.haspwd_)*/false
  , /*decltype(_impl_.submode_)*/0
  , /*decltype(_impl_.bountytotal_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TeamBaseInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamBaseInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamBaseInfoDefaultTypeInternal() {}
  union {
    TeamBaseInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamBaseInfoDefaultTypeInternal _TeamBaseInfo_default_instance_;
PROTOBUF_CONSTEXPR Award_AffixsEntry_DoNotUse::Award_AffixsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Award_AffixsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Award_AffixsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Award_AffixsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Award_AffixsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Award_AffixsEntry_DoNotUseDefaultTypeInternal _Award_AffixsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Award::Award(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.para_)*/{}
  , /*decltype(_impl_._para_cached_byte_size_)*/{0}
  , /*decltype(_impl_.affixs_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.instanceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.abrasion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.medal_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_.weight_)*/0u
  , /*decltype(_impl_.price_)*/0u
  , /*decltype(_impl_.survivetime_)*/int64_t{0}
  , /*decltype(_impl_.sourceidx_)*/0u
  , /*decltype(_impl_.identified_)*/false
  , /*decltype(_impl_.textureid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AwardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AwardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AwardDefaultTypeInternal() {}
  union {
    Award _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AwardDefaultTypeInternal _Award_default_instance_;
PROTOBUF_CONSTEXPR UpdatePlayerData_ChessSkinDataEntry_DoNotUse::UpdatePlayerData_ChessSkinDataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct UpdatePlayerData_ChessSkinDataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdatePlayerData_ChessSkinDataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdatePlayerData_ChessSkinDataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UpdatePlayerData_ChessSkinDataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdatePlayerData_ChessSkinDataEntry_DoNotUseDefaultTypeInternal _UpdatePlayerData_ChessSkinDataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR UpdatePlayerData_ShowItemsEntry_DoNotUse::UpdatePlayerData_ShowItemsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct UpdatePlayerData_ShowItemsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdatePlayerData_ShowItemsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdatePlayerData_ShowItemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UpdatePlayerData_ShowItemsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdatePlayerData_ShowItemsEntry_DoNotUseDefaultTypeInternal _UpdatePlayerData_ShowItemsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR UpdatePlayerData_SkinDataEntry_DoNotUse::UpdatePlayerData_SkinDataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct UpdatePlayerData_SkinDataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdatePlayerData_SkinDataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdatePlayerData_SkinDataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UpdatePlayerData_SkinDataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdatePlayerData_SkinDataEntry_DoNotUseDefaultTypeInternal _UpdatePlayerData_SkinDataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR UpdatePlayerData::UpdatePlayerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.passporttype_)*/{}
  , /*decltype(_impl_._passporttype_cached_byte_size_)*/{0}
  , /*decltype(_impl_.chessskindata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.showitems_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.skindata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chessplayer_)*/nullptr
  , /*decltype(_impl_.emotionlist_)*/nullptr
  , /*decltype(_impl_.pve_)*/nullptr
  , /*decltype(_impl_.cardgroupdata_)*/nullptr
  , /*decltype(_impl_.sceneid_)*/0u
  , /*decltype(_impl_.headpic_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdatePlayerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdatePlayerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdatePlayerDataDefaultTypeInternal() {}
  union {
    UpdatePlayerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdatePlayerDataDefaultTypeInternal _UpdatePlayerData_default_instance_;
PROTOBUF_CONSTEXPR SkipType::SkipType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tap_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SkipTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkipTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkipTypeDefaultTypeInternal() {}
  union {
    SkipType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkipTypeDefaultTypeInternal _SkipType_default_instance_;
PROTOBUF_CONSTEXPR BuffEffect::BuffEffect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BuffEffectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuffEffectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuffEffectDefaultTypeInternal() {}
  union {
    BuffEffect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuffEffectDefaultTypeInternal _BuffEffect_default_instance_;
PROTOBUF_CONSTEXPR Consume::Consume(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.para_)*/{}
  , /*decltype(_impl_._para_cached_byte_size_)*/{0}
  , /*decltype(_impl_.instanceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConsumeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConsumeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConsumeDefaultTypeInternal() {}
  union {
    Consume _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConsumeDefaultTypeInternal _Consume_default_instance_;
PROTOBUF_CONSTEXPR CSDTItem_AffixsEntry_DoNotUse::CSDTItem_AffixsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTItem_AffixsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTItem_AffixsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTItem_AffixsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTItem_AffixsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTItem_AffixsEntry_DoNotUseDefaultTypeInternal _CSDTItem_AffixsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTItem::CSDTItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.para_)*/{}
  , /*decltype(_impl_._para_cached_byte_size_)*/{0}
  , /*decltype(_impl_.affixs_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.instanceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.abrasion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.medal_)*/nullptr
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_.survivetime_)*/int64_t{0}
  , /*decltype(_impl_.createtime_)*/int64_t{0}
  , /*decltype(_impl_.gettime_)*/int64_t{0}
  , /*decltype(_impl_.identified_)*/false
  , /*decltype(_impl_.textureid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTItemDefaultTypeInternal() {}
  union {
    CSDTItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTItemDefaultTypeInternal _CSDTItem_default_instance_;
PROTOBUF_CONSTEXPR ItemAffix::ItemAffix(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.sourceitemid_)*/0u
  , /*decltype(_impl_.sourceitemtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemAffixDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemAffixDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemAffixDefaultTypeInternal() {}
  union {
    ItemAffix _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemAffixDefaultTypeInternal _ItemAffix_default_instance_;
PROTOBUF_CONSTEXPR CSDTItemMedal::CSDTItemMedal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.createtime_)*/int64_t{0}
  , /*decltype(_impl_.score_)*/int64_t{0}
  , /*decltype(_impl_.seasonid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTItemMedalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTItemMedalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTItemMedalDefaultTypeInternal() {}
  union {
    CSDTItemMedal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTItemMedalDefaultTypeInternal _CSDTItemMedal_default_instance_;
PROTOBUF_CONSTEXPR CSDTItemID::CSDTItemID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instanceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.abrasion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.ismedal_)*/false
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTItemIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTItemIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTItemIDDefaultTypeInternal() {}
  union {
    CSDTItemID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTItemIDDefaultTypeInternal _CSDTItemID_default_instance_;
PROTOBUF_CONSTEXPR CSDTBagPara::CSDTBagPara(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orderid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/0
  , /*decltype(_impl_.subsource_)*/0u
  , /*decltype(_impl_.addtime_)*/int64_t{0}
  , /*decltype(_impl_.triggerevent_)*/false
  , /*decltype(_impl_.newget_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTBagParaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTBagParaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTBagParaDefaultTypeInternal() {}
  union {
    CSDTBagPara _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTBagParaDefaultTypeInternal _CSDTBagPara_default_instance_;
PROTOBUF_CONSTEXPR CSDTBagItem::CSDTBagItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.para_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTBagItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTBagItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTBagItemDefaultTypeInternal() {}
  union {
    CSDTBagItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTBagItemDefaultTypeInternal _CSDTBagItem_default_instance_;
PROTOBUF_CONSTEXPR CSDTPlayerStatusInfo::CSDTPlayerStatusInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.apkversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serviceversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playerstatus_)*/0
  , /*decltype(_impl_.mapid_)*/0u
  , /*decltype(_impl_.platformtype_)*/0
  , /*decltype(_impl_.hallserverid_)*/0u
  , /*decltype(_impl_.observepvpid_)*/uint64_t{0u}
  , /*decltype(_impl_.friendinvisible_)*/0
  , /*decltype(_impl_.mapplaying_)*/0u
  , /*decltype(_impl_.changefriendinvisible_)*/false
  , /*decltype(_impl_.changepsonly_)*/false
  , /*decltype(_impl_.psonly_)*/false
  , /*decltype(_impl_.loginsource_)*/0
  , /*decltype(_impl_.observepvpmod_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPlayerStatusInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPlayerStatusInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPlayerStatusInfoDefaultTypeInternal() {}
  union {
    CSDTPlayerStatusInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPlayerStatusInfoDefaultTypeInternal _CSDTPlayerStatusInfo_default_instance_;
PROTOBUF_CONSTEXPR CSDTPvpWinData::CSDTPvpWinData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.wintype_)*/0
  , /*decltype(_impl_.resultcnt_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPvpWinDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPvpWinDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPvpWinDataDefaultTypeInternal() {}
  union {
    CSDTPvpWinData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPvpWinDataDefaultTypeInternal _CSDTPvpWinData_default_instance_;
PROTOBUF_CONSTEXPR CSDTChessPlrInfo_EquipsEntry_DoNotUse::CSDTChessPlrInfo_EquipsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTChessPlrInfo_EquipsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTChessPlrInfo_EquipsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTChessPlrInfo_EquipsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTChessPlrInfo_EquipsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTChessPlrInfo_EquipsEntry_DoNotUseDefaultTypeInternal _CSDTChessPlrInfo_EquipsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTChessPlrInfo::CSDTChessPlrInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.equips_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTChessPlrInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTChessPlrInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTChessPlrInfoDefaultTypeInternal() {}
  union {
    CSDTChessPlrInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTChessPlrInfoDefaultTypeInternal _CSDTChessPlrInfo_default_instance_;
PROTOBUF_CONSTEXPR CSDTPuzzle_ItemMapEntry_DoNotUse::CSDTPuzzle_ItemMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTPuzzle_ItemMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPuzzle_ItemMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPuzzle_ItemMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTPuzzle_ItemMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPuzzle_ItemMapEntry_DoNotUseDefaultTypeInternal _CSDTPuzzle_ItemMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTPuzzle::CSDTPuzzle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.openmap_)*/{}
  , /*decltype(_impl_._openmap_cached_byte_size_)*/{0}
  , /*decltype(_impl_.groupaward_)*/{}
  , /*decltype(_impl_._groupaward_cached_byte_size_)*/{0}
  , /*decltype(_impl_.itemmap_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.awardpool_)*/{}
  , /*decltype(_impl_._awardpool_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPuzzleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPuzzleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPuzzleDefaultTypeInternal() {}
  union {
    CSDTPuzzle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPuzzleDefaultTypeInternal _CSDTPuzzle_default_instance_;
PROTOBUF_CONSTEXPR ChessSkinSlotData_SlotsEntry_DoNotUse::ChessSkinSlotData_SlotsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ChessSkinSlotData_SlotsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChessSkinSlotData_SlotsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChessSkinSlotData_SlotsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ChessSkinSlotData_SlotsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChessSkinSlotData_SlotsEntry_DoNotUseDefaultTypeInternal _ChessSkinSlotData_SlotsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ChessSkinSlotData::ChessSkinSlotData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.slots_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChessSkinSlotDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChessSkinSlotDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChessSkinSlotDataDefaultTypeInternal() {}
  union {
    ChessSkinSlotData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChessSkinSlotDataDefaultTypeInternal _ChessSkinSlotData_default_instance_;
PROTOBUF_CONSTEXPR PvpPlayerData_ModeWinDatasEntry_DoNotUse::PvpPlayerData_ModeWinDatasEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PvpPlayerData_ModeWinDatasEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PvpPlayerData_ModeWinDatasEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PvpPlayerData_ModeWinDatasEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PvpPlayerData_ModeWinDatasEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PvpPlayerData_ModeWinDatasEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_ModeWinDatasEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PvpPlayerData_CurShowItemsEntry_DoNotUse::PvpPlayerData_CurShowItemsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PvpPlayerData_CurShowItemsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PvpPlayerData_CurShowItemsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PvpPlayerData_CurShowItemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PvpPlayerData_CurShowItemsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PvpPlayerData_CurShowItemsEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_CurShowItemsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PvpPlayerData_SettingsEntry_DoNotUse::PvpPlayerData_SettingsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PvpPlayerData_SettingsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PvpPlayerData_SettingsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PvpPlayerData_SettingsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PvpPlayerData_SettingsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PvpPlayerData_SettingsEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_SettingsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PvpPlayerData_SwitchItemsEntry_DoNotUse::PvpPlayerData_SwitchItemsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PvpPlayerData_SwitchItemsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PvpPlayerData_SwitchItemsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PvpPlayerData_SwitchItemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PvpPlayerData_SwitchItemsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PvpPlayerData_SwitchItemsEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_SwitchItemsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PvpPlayerData_PunishmentEntry_DoNotUse::PvpPlayerData_PunishmentEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PvpPlayerData_PunishmentEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PvpPlayerData_PunishmentEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PvpPlayerData_PunishmentEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PvpPlayerData_PunishmentEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PvpPlayerData_PunishmentEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_PunishmentEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PvpPlayerData_RegionDelaysEntry_DoNotUse::PvpPlayerData_RegionDelaysEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PvpPlayerData_RegionDelaysEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PvpPlayerData_RegionDelaysEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PvpPlayerData_RegionDelaysEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PvpPlayerData_RegionDelaysEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PvpPlayerData_RegionDelaysEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_RegionDelaysEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PvpPlayerData_TicketsEntry_DoNotUse::PvpPlayerData_TicketsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PvpPlayerData_TicketsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PvpPlayerData_TicketsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PvpPlayerData_TicketsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PvpPlayerData_TicketsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PvpPlayerData_TicketsEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_TicketsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PvpPlayerData_CurrencysEntry_DoNotUse::PvpPlayerData_CurrencysEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PvpPlayerData_CurrencysEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PvpPlayerData_CurrencysEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PvpPlayerData_CurrencysEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PvpPlayerData_CurrencysEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PvpPlayerData_CurrencysEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_CurrencysEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PvpPlayerData_ChessSkinDataEntry_DoNotUse::PvpPlayerData_ChessSkinDataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PvpPlayerData_ChessSkinDataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PvpPlayerData_ChessSkinDataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PvpPlayerData_ChessSkinDataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PvpPlayerData_ChessSkinDataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PvpPlayerData_ChessSkinDataEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_ChessSkinDataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PvpPlayerData_SkinDataEntry_DoNotUse::PvpPlayerData_SkinDataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PvpPlayerData_SkinDataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PvpPlayerData_SkinDataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PvpPlayerData_SkinDataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PvpPlayerData_SkinDataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PvpPlayerData_SkinDataEntry_DoNotUseDefaultTypeInternal _PvpPlayerData_SkinDataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PvpPlayerData::PvpPlayerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.modewindatas_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.curshowitems_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.settings_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.switchitems_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.punishment_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.regiondelays_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.passporttypeids_)*/{}
  , /*decltype(_impl_._passporttypeids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.tickets_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.currencys_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.psblockedusers_)*/{}
  , /*decltype(_impl_.chesslist_)*/{}
  , /*decltype(_impl_.skinsuitid_)*/{}
  , /*decltype(_impl_._skinsuitid_cached_byte_size_)*/{0}
  , /*decltype(_impl_.chessskindata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.skindata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.usrname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.apkversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pvpresourceversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.devicetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channelusrid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.teamvoiceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.picurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cupnamechina_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cupiconurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pvpservergroup_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.teamvoiceuserid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.packagename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sdkcountry_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guildname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channelid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mentorid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.emotionlist_)*/nullptr
  , /*decltype(_impl_.curchessplr_)*/nullptr
  , /*decltype(_impl_.addiction_)*/nullptr
  , /*decltype(_impl_.pvpdata_)*/nullptr
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.camp_)*/0u
  , /*decltype(_impl_.competitioncnt_)*/0u
  , /*decltype(_impl_.headpic_)*/0u
  , /*decltype(_impl_.teamplayernum_)*/0u
  , /*decltype(_impl_.mmr_)*/0u
  , /*decltype(_impl_.reqtime_)*/int64_t{0}
  , /*decltype(_impl_.lvl_)*/0u
  , /*decltype(_impl_.platformtype_)*/0
  , /*decltype(_impl_.teamid_)*/0u
  , /*decltype(_impl_.cup_)*/0u
  , /*decltype(_impl_.asyn_)*/0u
  , /*decltype(_impl_.chessplayerskin_)*/0u
  , /*decltype(_impl_.sceneskin_)*/0u
  , /*decltype(_impl_.damageeffect_)*/0u
  , /*decltype(_impl_.currankseason_)*/0u
  , /*decltype(_impl_.meleerule_)*/0u
  , /*decltype(_impl_.channeltype_)*/0
  , /*decltype(_impl_.assistantid_)*/0
  , /*decltype(_impl_.creditscore_)*/0u
  , /*decltype(_impl_.tmmr_)*/0u
  , /*decltype(_impl_.tcup_)*/0u
  , /*decltype(_impl_.teamvoicememid_)*/0u
  , /*decltype(_impl_.isrobot_)*/false
  , /*decltype(_impl_.ps4only_)*/false
  , /*decltype(_impl_.teambattlecount_)*/0u
  , /*decltype(_impl_.teambattlemvpcount_)*/0u
  , /*decltype(_impl_.recommendscore_)*/0u
  , /*decltype(_impl_.wxvviplevel_)*/0u
  , /*decltype(_impl_.teambattleavgrank_)*/0
  , /*decltype(_impl_.personalavgmvp_)*/0
  , /*decltype(_impl_.observeprivilege_)*/0
  , /*decltype(_impl_.slot_)*/0u
  , /*decltype(_impl_.teamgroup_)*/0
  , /*decltype(_impl_.ping_)*/0u
  , /*decltype(_impl_.province_)*/0u
  , /*decltype(_impl_.tournamentid_)*/uint64_t{0u}
  , /*decltype(_impl_.tournamclass_)*/uint64_t{0u}
  , /*decltype(_impl_.tournamclassround_)*/uint64_t{0u}
  , /*decltype(_impl_.tournamchessid_)*/uint64_t{0u}
  , /*decltype(_impl_.firstmatchsuccesswaittime_)*/0u
  , /*decltype(_impl_.restricttype_)*/0
  , /*decltype(_impl_.guildsign_)*/0
  , /*decltype(_impl_.ffmmr_)*/0u
  , /*decltype(_impl_.ffcup_)*/0u
  , /*decltype(_impl_.battletime_)*/0u
  , /*decltype(_impl_.pvpvoicememid_)*/0u
  , /*decltype(_impl_.campvoicememid_)*/0u
  , /*decltype(_impl_.chosecardgroup_)*/0u
  , /*decltype(_impl_.exchangestate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PvpPlayerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PvpPlayerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PvpPlayerDataDefaultTypeInternal() {}
  union {
    PvpPlayerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PvpPlayerDataDefaultTypeInternal _PvpPlayerData_default_instance_;
PROTOBUF_CONSTEXPR PvpData::PvpData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pve_)*/nullptr
  , /*decltype(_impl_.cardgroup_)*/nullptr
  , /*decltype(_impl_.towerdefense_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PvpDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PvpDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PvpDataDefaultTypeInternal() {}
  union {
    PvpData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PvpDataDefaultTypeInternal _PvpData_default_instance_;
PROTOBUF_CONSTEXPR TDCardGroup::TDCardGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDCardGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDCardGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDCardGroupDefaultTypeInternal() {}
  union {
    TDCardGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDCardGroupDefaultTypeInternal _TDCardGroup_default_instance_;
PROTOBUF_CONSTEXPR TDCardGroups::TDCardGroups(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chessboard_)*/nullptr
  , /*decltype(_impl_.chessplayer_)*/nullptr
  , /*decltype(_impl_.chessman_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDCardGroupsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDCardGroupsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDCardGroupsDefaultTypeInternal() {}
  union {
    TDCardGroups _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDCardGroupsDefaultTypeInternal _TDCardGroups_default_instance_;
PROTOBUF_CONSTEXPR TDItemGroup_ItemsEntry_DoNotUse::TDItemGroup_ItemsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TDItemGroup_ItemsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDItemGroup_ItemsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDItemGroup_ItemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TDItemGroup_ItemsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDItemGroup_ItemsEntry_DoNotUseDefaultTypeInternal _TDItemGroup_ItemsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TDItemGroup::TDItemGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.cardgroups_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDItemGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDItemGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDItemGroupDefaultTypeInternal() {}
  union {
    TDItemGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDItemGroupDefaultTypeInternal _TDItemGroup_default_instance_;
PROTOBUF_CONSTEXPR TowerDefenseData::TowerDefenseData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.itemgroup_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TowerDefenseDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TowerDefenseDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TowerDefenseDataDefaultTypeInternal() {}
  union {
    TowerDefenseData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TowerDefenseDataDefaultTypeInternal _TowerDefenseData_default_instance_;
PROTOBUF_CONSTEXPR KernelCardGroup::KernelCardGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chessids_)*/{}
  , /*decltype(_impl_._chessids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KernelCardGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KernelCardGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KernelCardGroupDefaultTypeInternal() {}
  union {
    KernelCardGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KernelCardGroupDefaultTypeInternal _KernelCardGroup_default_instance_;
PROTOBUF_CONSTEXPR KernelChessInfo::KernelChessInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.quantity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KernelChessInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KernelChessInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KernelChessInfoDefaultTypeInternal() {}
  union {
    KernelChessInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KernelChessInfoDefaultTypeInternal _KernelChessInfo_default_instance_;
PROTOBUF_CONSTEXPR ApplyWorkshopRule::ApplyWorkshopRule(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extdata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ApplyWorkshopRuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApplyWorkshopRuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApplyWorkshopRuleDefaultTypeInternal() {}
  union {
    ApplyWorkshopRule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApplyWorkshopRuleDefaultTypeInternal _ApplyWorkshopRule_default_instance_;
PROTOBUF_CONSTEXPR CSDTVisitedMap::CSDTVisitedMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.mapid_)*/0u
  , /*decltype(_impl_.submapid_)*/0u
  , /*decltype(_impl_.isplaying_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTVisitedMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTVisitedMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTVisitedMapDefaultTypeInternal() {}
  union {
    CSDTVisitedMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTVisitedMapDefaultTypeInternal _CSDTVisitedMap_default_instance_;
PROTOBUF_CONSTEXPR VisitedMaps_MapsEntry_DoNotUse::VisitedMaps_MapsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct VisitedMaps_MapsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisitedMaps_MapsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisitedMaps_MapsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    VisitedMaps_MapsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisitedMaps_MapsEntry_DoNotUseDefaultTypeInternal _VisitedMaps_MapsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR VisitedMaps::VisitedMaps(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.maps_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.playerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VisitedMapsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisitedMapsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisitedMapsDefaultTypeInternal() {}
  union {
    VisitedMaps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisitedMapsDefaultTypeInternal _VisitedMaps_default_instance_;
PROTOBUF_CONSTEXPR CSDTCurShowItem::CSDTCurShowItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instanceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTCurShowItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTCurShowItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTCurShowItemDefaultTypeInternal() {}
  union {
    CSDTCurShowItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTCurShowItemDefaultTypeInternal _CSDTCurShowItem_default_instance_;
PROTOBUF_CONSTEXPR CSDTPassportHistory::CSDTPassportHistory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.season_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPassportHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPassportHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPassportHistoryDefaultTypeInternal() {}
  union {
    CSDTPassportHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPassportHistoryDefaultTypeInternal _CSDTPassportHistory_default_instance_;
PROTOBUF_CONSTEXPR ExchangeRecord::ExchangeRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.init_)*/false
  , /*decltype(_impl_.balancecount_)*/0
  , /*decltype(_impl_.salecount_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExchangeRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExchangeRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExchangeRecordDefaultTypeInternal() {}
  union {
    ExchangeRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExchangeRecordDefaultTypeInternal _ExchangeRecord_default_instance_;
PROTOBUF_CONSTEXPR CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse::CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUseDefaultTypeInternal _CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse::CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUseDefaultTypeInternal _CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse::CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUseDefaultTypeInternal _CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse::CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUseDefaultTypeInternal _CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTPlayerBaseInfo::CSDTPlayerBaseInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pvphistory_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.switchplayerset_)*/{}
  , /*decltype(_impl_._switchplayerset_cached_byte_size_)*/{0}
  , /*decltype(_impl_.punishment_)*/{}
  , /*decltype(_impl_.passporttypeids_)*/{}
  , /*decltype(_impl_._passporttypeids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.mvpinfos_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.advancepassport_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.passportcardnum_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.passporthistory_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.usrname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channelusrid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nativecountry_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.oriregion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guildinfo_)*/nullptr
  , /*decltype(_impl_.medal_)*/nullptr
  , /*decltype(_impl_.pvpdata_)*/nullptr
  , /*decltype(_impl_.mentorshipinfo_)*/nullptr
  , /*decltype(_impl_.mentorinfo_)*/nullptr
  , /*decltype(_impl_.exchangerecord_)*/nullptr
  , /*decltype(_impl_.headpic_)*/0u
  , /*decltype(_impl_.chatbubble_)*/0u
  , /*decltype(_impl_.mmr_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.exp_)*/0u
  , /*decltype(_impl_.currankseason_)*/0u
  , /*decltype(_impl_.historypvpshowpermission_)*/0
  , /*decltype(_impl_.headpicframe_)*/0u
  , /*decltype(_impl_.headpicpendant_)*/0u
  , /*decltype(_impl_.scene_)*/0u
  , /*decltype(_impl_.channelviptype_)*/0
  , /*decltype(_impl_.launchtype_)*/0
  , /*decltype(_impl_.platformtype_)*/0
  , /*decltype(_impl_.tmmr_)*/0u
  , /*decltype(_impl_.passportlevel_)*/0u
  , /*decltype(_impl_.star_)*/0u
  , /*decltype(_impl_.lastlogintime_)*/int64_t{0}
  , /*decltype(_impl_.resetheadpictime_)*/int64_t{0}
  , /*decltype(_impl_.channeltype_)*/0
  , /*decltype(_impl_.period_)*/0u
  , /*decltype(_impl_.province_)*/0u
  , /*decltype(_impl_.mvpcount_)*/0u
  , /*decltype(_impl_.observepvpid_)*/uint64_t{0u}
  , /*decltype(_impl_.ps4only_)*/false
  , /*decltype(_impl_.restricttype_)*/0
  , /*decltype(_impl_.ffmmr_)*/0u
  , /*decltype(_impl_.exchangestate_)*/0
  , /*decltype(_impl_.totalduration_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPlayerBaseInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPlayerBaseInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPlayerBaseInfoDefaultTypeInternal() {}
  union {
    CSDTPlayerBaseInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPlayerBaseInfoDefaultTypeInternal _CSDTPlayerBaseInfo_default_instance_;
PROTOBUF_CONSTEXPR PlayerGuildInfo::PlayerGuildInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/0
  , /*decltype(_impl_.role_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerGuildInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerGuildInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerGuildInfoDefaultTypeInternal() {}
  union {
    PlayerGuildInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerGuildInfoDefaultTypeInternal _PlayerGuildInfo_default_instance_;
PROTOBUF_CONSTEXPR CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse::CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUseDefaultTypeInternal _CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTPlayerSimpleInfo::CSDTPlayerSimpleInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.passporttypeids_)*/{}
  , /*decltype(_impl_._passporttypeids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.historymaxstat_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.usrname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channelusrid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guildinfo_)*/nullptr
  , /*decltype(_impl_.headpic_)*/0u
  , /*decltype(_impl_.headpicframe_)*/0u
  , /*decltype(_impl_.headpicpendant_)*/0u
  , /*decltype(_impl_.chatbubble_)*/0u
  , /*decltype(_impl_.mmr_)*/0u
  , /*decltype(_impl_.tmmr_)*/0u
  , /*decltype(_impl_.cup_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.province_)*/0u
  , /*decltype(_impl_.platformtype_)*/0
  , /*decltype(_impl_.observepvpid_)*/uint64_t{0u}
  , /*decltype(_impl_.period_)*/0u
  , /*decltype(_impl_.ps4only_)*/false
  , /*decltype(_impl_.channeltype_)*/0
  , /*decltype(_impl_.restricttype_)*/0
  , /*decltype(_impl_.exchangestate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPlayerSimpleInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPlayerSimpleInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPlayerSimpleInfoDefaultTypeInternal() {}
  union {
    CSDTPlayerSimpleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPlayerSimpleInfoDefaultTypeInternal _CSDTPlayerSimpleInfo_default_instance_;
PROTOBUF_CONSTEXPR CSDTPlayerRankInfo::CSDTPlayerRankInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.usrname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.headpic_)*/0u
  , /*decltype(_impl_.headpicframe_)*/0u
  , /*decltype(_impl_.cup_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPlayerRankInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPlayerRankInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPlayerRankInfoDefaultTypeInternal() {}
  union {
    CSDTPlayerRankInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPlayerRankInfoDefaultTypeInternal _CSDTPlayerRankInfo_default_instance_;
PROTOBUF_CONSTEXPR CSDTPlayerTournamentInfo::CSDTPlayerTournamentInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.score_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPlayerTournamentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPlayerTournamentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPlayerTournamentInfoDefaultTypeInternal() {}
  union {
    CSDTPlayerTournamentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPlayerTournamentInfoDefaultTypeInternal _CSDTPlayerTournamentInfo_default_instance_;
PROTOBUF_CONSTEXPR CSDTPvpHistory::CSDTPvpHistory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dailyfirstwinaward_)*/{}
  , /*decltype(_impl_.pvpid_)*/uint64_t{0u}
  , /*decltype(_impl_.changemmr_)*/0
  , /*decltype(_impl_.dailyfirstwin_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPvpHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPvpHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPvpHistoryDefaultTypeInternal() {}
  union {
    CSDTPvpHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPvpHistoryDefaultTypeInternal _CSDTPvpHistory_default_instance_;
PROTOBUF_CONSTEXPR CSDTPlayerPvpInfo::CSDTPlayerPvpInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pvphistory_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPlayerPvpInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPlayerPvpInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPlayerPvpInfoDefaultTypeInternal() {}
  union {
    CSDTPlayerPvpInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPlayerPvpInfoDefaultTypeInternal _CSDTPlayerPvpInfo_default_instance_;
PROTOBUF_CONSTEXPR CSDTPlayerDetailInfo::CSDTPlayerDetailInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.baseinfo_)*/nullptr
  , /*decltype(_impl_.stat_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPlayerDetailInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPlayerDetailInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPlayerDetailInfoDefaultTypeInternal() {}
  union {
    CSDTPlayerDetailInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPlayerDetailInfoDefaultTypeInternal _CSDTPlayerDetailInfo_default_instance_;
PROTOBUF_CONSTEXPR CSDTPlayerItems::CSDTPlayerItems(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.medals_)*/{}
  , /*decltype(_impl_.cache_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPlayerItemsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPlayerItemsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPlayerItemsDefaultTypeInternal() {}
  union {
    CSDTPlayerItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPlayerItemsDefaultTypeInternal _CSDTPlayerItems_default_instance_;
PROTOBUF_CONSTEXPR CSDTRankSeasonData::CSDTRankSeasonData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.competitioncnt_)*/0u
  , /*decltype(_impl_.avgrank_)*/0u
  , /*decltype(_impl_.mvpcount_)*/0u
  , /*decltype(_impl_.mvpprobability_)*/0u
  , /*decltype(_impl_.top3count_)*/0u
  , /*decltype(_impl_.top3probability_)*/0u
  , /*decltype(_impl_.avground_)*/0u
  , /*decltype(_impl_.wintimes_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTRankSeasonDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRankSeasonDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRankSeasonDataDefaultTypeInternal() {}
  union {
    CSDTRankSeasonData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRankSeasonDataDefaultTypeInternal _CSDTRankSeasonData_default_instance_;
PROTOBUF_CONSTEXPR CSDTRankSeasonInfo_ModesEntry_DoNotUse::CSDTRankSeasonInfo_ModesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTRankSeasonInfo_ModesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRankSeasonInfo_ModesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRankSeasonInfo_ModesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTRankSeasonInfo_ModesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRankSeasonInfo_ModesEntry_DoNotUseDefaultTypeInternal _CSDTRankSeasonInfo_ModesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTRankSeasonInfo::CSDTRankSeasonInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.modes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.maxmmr_)*/0u
  , /*decltype(_impl_.maxtmmr_)*/0u
  , /*decltype(_impl_.maxffmmr_)*/0u
  , /*decltype(_impl_.maxqueenrank_)*/0
  , /*decltype(_impl_.maxtqueenrank_)*/0
  , /*decltype(_impl_.maxfqueenrank_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTRankSeasonInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRankSeasonInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRankSeasonInfoDefaultTypeInternal() {}
  union {
    CSDTRankSeasonInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRankSeasonInfoDefaultTypeInternal _CSDTRankSeasonInfo_default_instance_;
PROTOBUF_CONSTEXPR CSDTStat_SeasonInfoEntry_DoNotUse::CSDTStat_SeasonInfoEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTStat_SeasonInfoEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTStat_SeasonInfoEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTStat_SeasonInfoEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTStat_SeasonInfoEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTStat_SeasonInfoEntry_DoNotUseDefaultTypeInternal _CSDTStat_SeasonInfoEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTStat::CSDTStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.seasoninfo_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.unseasondata_)*/nullptr
  , /*decltype(_impl_.curchessplr_)*/nullptr
  , /*decltype(_impl_.mmr_)*/0u
  , /*decltype(_impl_.competitioncnt_)*/0u
  , /*decltype(_impl_.registertime_)*/int64_t{0}
  , /*decltype(_impl_.mvpcnt_)*/0u
  , /*decltype(_impl_.chessplayerskin_)*/0u
  , /*decltype(_impl_.followcount_)*/0u
  , /*decltype(_impl_.fanscount_)*/0u
  , /*decltype(_impl_.competitioncntdaily_)*/0u
  , /*decltype(_impl_.bindoldplayercount_)*/0u
  , /*decltype(_impl_.tmmr_)*/0u
  , /*decltype(_impl_.cup_)*/0u
  , /*decltype(_impl_.ffmmr_)*/0u
  , /*decltype(_impl_.maxqueenrank_)*/0
  , /*decltype(_impl_.maxtqueenrank_)*/0
  , /*decltype(_impl_.maxfqueenrank_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTStatDefaultTypeInternal() {}
  union {
    CSDTStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTStatDefaultTypeInternal _CSDTStat_default_instance_;
PROTOBUF_CONSTEXPR CSDTNumRankItem::CSDTNumRankItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.captain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.number_)*/0u
  , /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_.score_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTNumRankItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTNumRankItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTNumRankItemDefaultTypeInternal() {}
  union {
    CSDTNumRankItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTNumRankItemDefaultTypeInternal _CSDTNumRankItem_default_instance_;
PROTOBUF_CONSTEXPR CSDTWorldChat::CSDTWorldChat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.workshopmapname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channelid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.baseinfo_)*/nullptr
  , /*decltype(_impl_.wssetting_)*/nullptr
  , /*decltype(_impl_.medalinfo_)*/nullptr
  , /*decltype(_impl_.emotionid_)*/0u
  , /*decltype(_impl_.needlocalize_)*/false
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.worldchattype_)*/0
  , /*decltype(_impl_.sourcetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTWorldChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTWorldChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTWorldChatDefaultTypeInternal() {}
  union {
    CSDTWorldChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTWorldChatDefaultTypeInternal _CSDTWorldChat_default_instance_;
PROTOBUF_CONSTEXPR CSDTBuffAct::CSDTBuffAct(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groupid_)*/0u
  , /*decltype(_impl_.actid_)*/0u
  , /*decltype(_impl_.actstatus_)*/0
  , /*decltype(_impl_.showtime_)*/0u
  , /*decltype(_impl_.endshowtime_)*/0u
  , /*decltype(_impl_.starttime_)*/0u
  , /*decltype(_impl_.endtime_)*/0u
  , /*decltype(_impl_.buffstarttime_)*/0u
  , /*decltype(_impl_.buffendtime_)*/0u
  , /*decltype(_impl_.acttype_)*/0
  , /*decltype(_impl_.bufftype_)*/0
  , /*decltype(_impl_.buffstartlv_)*/0u
  , /*decltype(_impl_.buffendlv_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTBuffActDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTBuffActDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTBuffActDefaultTypeInternal() {}
  union {
    CSDTBuffAct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTBuffActDefaultTypeInternal _CSDTBuffAct_default_instance_;
PROTOBUF_CONSTEXPR CSDTMail_DictEntry_DoNotUse::CSDTMail_DictEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTMail_DictEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTMail_DictEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTMail_DictEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTMail_DictEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTMail_DictEntry_DoNotUseDefaultTypeInternal _CSDTMail_DictEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTMail::CSDTMail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.awards_)*/{}
  , /*decltype(_impl_.dict_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.webopendata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extdata_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.ts_)*/int64_t{0}
  , /*decltype(_impl_.isread_)*/false
  , /*decltype(_impl_.isgetaward_)*/false
  , /*decltype(_impl_.flag_)*/0u
  , /*decltype(_impl_.endtime_)*/int64_t{0}
  , /*decltype(_impl_.awardsource_)*/0
  , /*decltype(_impl_.webop_)*/0
  , /*decltype(_impl_.mustwaittime_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTMailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTMailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTMailDefaultTypeInternal() {}
  union {
    CSDTMail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTMailDefaultTypeInternal _CSDTMail_default_instance_;
PROTOBUF_CONSTEXPR CSDTNoticeInfo::CSDTNoticeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTNoticeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTNoticeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTNoticeInfoDefaultTypeInternal() {}
  union {
    CSDTNoticeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTNoticeInfoDefaultTypeInternal _CSDTNoticeInfo_default_instance_;
PROTOBUF_CONSTEXPR CSDTNotice::CSDTNotice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.countrylist_)*/{}
  , /*decltype(_impl_.webcontent_)*/{}
  , /*decltype(_impl_.downloadlist_)*/{}
  , /*decltype(_impl_.platformlist_)*/{}
  , /*decltype(_impl_._platformlist_cached_byte_size_)*/{0}
  , /*decltype(_impl_.apkversionlist_)*/{}
  , /*decltype(_impl_.excludedownload_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.picurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.skipurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.skipinterface_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.coverpicurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.subtitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pcskipurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.ts_)*/int64_t{0}
  , /*decltype(_impl_.labeltype_)*/0
  , /*decltype(_impl_.showtype_)*/0
  , /*decltype(_impl_.contenttype_)*/0
  , /*decltype(_impl_.flag_)*/0u
  , /*decltype(_impl_.endtime_)*/int64_t{0}
  , /*decltype(_impl_.noticetype_)*/0
  , /*decltype(_impl_.tap_)*/0
  , /*decltype(_impl_.skiptab_)*/0u
  , /*decltype(_impl_.picjumptype_)*/0
  , /*decltype(_impl_.magnetismtype_)*/0
  , /*decltype(_impl_.jumpgoodsid_)*/0u
  , /*decltype(_impl_.sort_)*/int64_t{0}
  , /*decltype(_impl_.starttime_)*/int64_t{0}
  , /*decltype(_impl_.needredpoint_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTNoticeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTNoticeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTNoticeDefaultTypeInternal() {}
  union {
    CSDTNotice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTNoticeDefaultTypeInternal _CSDTNotice_default_instance_;
PROTOBUF_CONSTEXPR CSDTAdsInfo::CSDTAdsInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTAdsInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTAdsInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTAdsInfoDefaultTypeInternal() {}
  union {
    CSDTAdsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTAdsInfoDefaultTypeInternal _CSDTAdsInfo_default_instance_;
PROTOBUF_CONSTEXPR CSDTAds::CSDTAds(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.countrylist_)*/{}
  , /*decltype(_impl_.whitelist_)*/{}
  , /*decltype(_impl_.downloadlist_)*/{}
  , /*decltype(_impl_.platformlist_)*/{}
  , /*decltype(_impl_._platformlist_cached_byte_size_)*/{0}
  , /*decltype(_impl_.excludedownload_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.starttime_)*/int64_t{0}
  , /*decltype(_impl_.showlimit_)*/0u
  , /*decltype(_impl_.showcount_)*/0u
  , /*decltype(_impl_.endtime_)*/int64_t{0}
  , /*decltype(_impl_.ispay_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTAdsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTAdsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTAdsDefaultTypeInternal() {}
  union {
    CSDTAds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTAdsDefaultTypeInternal _CSDTAds_default_instance_;
PROTOBUF_CONSTEXPR Contest::Contest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.equip_)*/{}
  , /*decltype(_impl_._equip_cached_byte_size_)*/{0}
  , /*decltype(_impl_.chessid_)*/0u
  , /*decltype(_impl_.x_)*/0u
  , /*decltype(_impl_.y_)*/0u
  , /*decltype(_impl_.chessmancardtag_)*/0u
  , /*decltype(_impl_.race1_)*/0u
  , /*decltype(_impl_.race2_)*/0u
  , /*decltype(_impl_.pro1_)*/0u
  , /*decltype(_impl_.skill1_)*/0u
  , /*decltype(_impl_.skill2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContestDefaultTypeInternal() {}
  union {
    Contest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContestDefaultTypeInternal _Contest_default_instance_;
PROTOBUF_CONSTEXPR Effect::Effect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.curlevel_)*/0u
  , /*decltype(_impl_.maxlevel_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EffectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EffectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EffectDefaultTypeInternal() {}
  union {
    Effect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EffectDefaultTypeInternal _Effect_default_instance_;
PROTOBUF_CONSTEXPR ChessDamageStat::ChessDamageStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chessid_)*/0u
  , /*decltype(_impl_.totaldamage_)*/0u
  , /*decltype(_impl_.totalsuffer_)*/0u
  , /*decltype(_impl_.physicaldamage_)*/0u
  , /*decltype(_impl_.magicaldamage_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChessDamageStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChessDamageStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChessDamageStatDefaultTypeInternal() {}
  union {
    ChessDamageStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChessDamageStatDefaultTypeInternal _ChessDamageStat_default_instance_;
PROTOBUF_CONSTEXPR SelectEquip::SelectEquip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roundid_)*/0u
  , /*decltype(_impl_.equipid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SelectEquipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectEquipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectEquipDefaultTypeInternal() {}
  union {
    SelectEquip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectEquipDefaultTypeInternal _SelectEquip_default_instance_;
PROTOBUF_CONSTEXPR Equip::Equip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_.quality_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EquipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EquipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EquipDefaultTypeInternal() {}
  union {
    Equip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EquipDefaultTypeInternal _Equip_default_instance_;
PROTOBUF_CONSTEXPR CSDTRoundItem_EnemyLeftChessEntry_DoNotUse::CSDTRoundItem_EnemyLeftChessEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTRoundItem_EnemyLeftChessEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRoundItem_EnemyLeftChessEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRoundItem_EnemyLeftChessEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTRoundItem_EnemyLeftChessEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRoundItem_EnemyLeftChessEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_EnemyLeftChessEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTRoundItem_SelfLeftChessEntry_DoNotUse::CSDTRoundItem_SelfLeftChessEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTRoundItem_SelfLeftChessEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRoundItem_SelfLeftChessEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRoundItem_SelfLeftChessEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTRoundItem_SelfLeftChessEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRoundItem_SelfLeftChessEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_SelfLeftChessEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTRoundItem_DropEquipEntry_DoNotUse::CSDTRoundItem_DropEquipEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTRoundItem_DropEquipEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRoundItem_DropEquipEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRoundItem_DropEquipEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTRoundItem_DropEquipEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRoundItem_DropEquipEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_DropEquipEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTRoundItem_SelfBattleChessEntry_DoNotUse::CSDTRoundItem_SelfBattleChessEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTRoundItem_SelfBattleChessEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRoundItem_SelfBattleChessEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRoundItem_SelfBattleChessEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTRoundItem_SelfBattleChessEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRoundItem_SelfBattleChessEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_SelfBattleChessEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTRoundItem_EnemyBattleChessEntry_DoNotUse::CSDTRoundItem_EnemyBattleChessEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTRoundItem_EnemyBattleChessEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRoundItem_EnemyBattleChessEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRoundItem_EnemyBattleChessEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTRoundItem_EnemyBattleChessEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRoundItem_EnemyBattleChessEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_EnemyBattleChessEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTRoundItem_BuyChessListEntry_DoNotUse::CSDTRoundItem_BuyChessListEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTRoundItem_BuyChessListEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRoundItem_BuyChessListEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRoundItem_BuyChessListEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTRoundItem_BuyChessListEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRoundItem_BuyChessListEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_BuyChessListEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTRoundItem_EquipComposeListEntry_DoNotUse::CSDTRoundItem_EquipComposeListEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTRoundItem_EquipComposeListEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRoundItem_EquipComposeListEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRoundItem_EquipComposeListEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTRoundItem_EquipComposeListEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRoundItem_EquipComposeListEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_EquipComposeListEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse::CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTRoundItem_UpgradeStarChessListEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRoundItem_UpgradeStarChessListEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRoundItem_UpgradeStarChessListEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRoundItem_UpgradeStarChessListEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTRoundItem_MoneySourceListEntry_DoNotUse::CSDTRoundItem_MoneySourceListEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTRoundItem_MoneySourceListEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRoundItem_MoneySourceListEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRoundItem_MoneySourceListEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTRoundItem_MoneySourceListEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRoundItem_MoneySourceListEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_MoneySourceListEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTRoundItem_MoneyPayListEntry_DoNotUse::CSDTRoundItem_MoneyPayListEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTRoundItem_MoneyPayListEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRoundItem_MoneyPayListEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRoundItem_MoneyPayListEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTRoundItem_MoneyPayListEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRoundItem_MoneyPayListEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_MoneyPayListEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTRoundItem_SellChessListEntry_DoNotUse::CSDTRoundItem_SellChessListEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTRoundItem_SellChessListEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRoundItem_SellChessListEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRoundItem_SellChessListEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTRoundItem_SellChessListEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRoundItem_SellChessListEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_SellChessListEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTRoundItem_EquipComposeStructListEntry_DoNotUse::CSDTRoundItem_EquipComposeStructListEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTRoundItem_EquipComposeStructListEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRoundItem_EquipComposeStructListEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRoundItem_EquipComposeStructListEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTRoundItem_EquipComposeStructListEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRoundItem_EquipComposeStructListEntry_DoNotUseDefaultTypeInternal _CSDTRoundItem_EquipComposeStructListEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTRoundItem::CSDTRoundItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enemyleftchess_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.selfleftchess_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.dropequip_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.selfcontest_)*/{}
  , /*decltype(_impl_.targetcontest_)*/{}
  , /*decltype(_impl_.selfbattlechess_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.enemybattlechess_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.roundstartcontest_)*/{}
  , /*decltype(_impl_.battlestartcontest_)*/{}
  , /*decltype(_impl_.chessshopfreshlist_)*/{}
  , /*decltype(_impl_._chessshopfreshlist_cached_byte_size_)*/{0}
  , /*decltype(_impl_.buychesslist_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.equipcomposelist_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.upgradestarchesslist_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.moneysourcelist_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.moneypaylist_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.sellchesslist_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.sharedchesslist_)*/{}
  , /*decltype(_impl_.giveequipchesslist_)*/{}
  , /*decltype(_impl_._giveequipchesslist_cached_byte_size_)*/{0}
  , /*decltype(_impl_.givechesslist_)*/{}
  , /*decltype(_impl_.raceeffectlist_)*/{}
  , /*decltype(_impl_.professioneffectlist_)*/{}
  , /*decltype(_impl_.chessdamagelist_)*/{}
  , /*decltype(_impl_.roundequipselections_)*/{}
  , /*decltype(_impl_._roundequipselections_cached_byte_size_)*/{0}
  , /*decltype(_impl_.selectequips_)*/{}
  , /*decltype(_impl_.equipcomposestructlist_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.targetplayerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targetopenid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.round_)*/0u
  , /*decltype(_impl_.oldhp_)*/0u
  , /*decltype(_impl_.hp_)*/0u
  , /*decltype(_impl_.oldrank_)*/0u
  , /*decltype(_impl_.rank_)*/0u
  , /*decltype(_impl_.wintype_)*/0
  , /*decltype(_impl_.time_)*/0u
  , /*decltype(_impl_.chessshopfreshcount_)*/0u
  , /*decltype(_impl_.roundstartmoney_)*/0u
  , /*decltype(_impl_.battlestartmoney_)*/0u
  , /*decltype(_impl_.battleendmoney_)*/0u
  , /*decltype(_impl_.readchesscount_)*/0u
  , /*decltype(_impl_.roundstartlvl_)*/0u
  , /*decltype(_impl_.roundstartexp_)*/0u
  , /*decltype(_impl_.battlestartlvl_)*/0u
  , /*decltype(_impl_.battlestartexp_)*/0u
  , /*decltype(_impl_.wincon_)*/0u
  , /*decltype(_impl_.ismonster_)*/false
  , /*decltype(_impl_.islastround_)*/false
  , /*decltype(_impl_.losecon_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTRoundItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRoundItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRoundItemDefaultTypeInternal() {}
  union {
    CSDTRoundItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRoundItemDefaultTypeInternal _CSDTRoundItem_default_instance_;
PROTOBUF_CONSTEXPR CSDTRound::CSDTRound(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTRoundDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRoundDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRoundDefaultTypeInternal() {}
  union {
    CSDTRound _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRoundDefaultTypeInternal _CSDTRound_default_instance_;
PROTOBUF_CONSTEXPR CSDTRoundEnd::CSDTRoundEnd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.rounitem_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTRoundEndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRoundEndDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRoundEndDefaultTypeInternal() {}
  union {
    CSDTRoundEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRoundEndDefaultTypeInternal _CSDTRoundEnd_default_instance_;
PROTOBUF_CONSTEXPR CSDTPvpStat_PlayerRoundEntry_DoNotUse::CSDTPvpStat_PlayerRoundEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTPvpStat_PlayerRoundEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPvpStat_PlayerRoundEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPvpStat_PlayerRoundEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTPvpStat_PlayerRoundEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPvpStat_PlayerRoundEntry_DoNotUseDefaultTypeInternal _CSDTPvpStat_PlayerRoundEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTPvpStat::CSDTPvpStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.winrolestat_)*/{}
  , /*decltype(_impl_.failrolestat_)*/{}
  , /*decltype(_impl_.drawrolestat_)*/{}
  , /*decltype(_impl_.mvpskills_)*/{}
  , /*decltype(_impl_._mvpskills_cached_byte_size_)*/{0}
  , /*decltype(_impl_.playerround_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.deathnum_)*/0u
  , /*decltype(_impl_.killnum_)*/0u
  , /*decltype(_impl_.waterdeathnum_)*/0u
  , /*decltype(_impl_.hurtgrounddeathnum_)*/0u
  , /*decltype(_impl_.mvproleid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPvpStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPvpStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPvpStatDefaultTypeInternal() {}
  union {
    CSDTPvpStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPvpStatDefaultTypeInternal _CSDTPvpStat_default_instance_;
PROTOBUF_CONSTEXPR CSDTPvpCampResult::CSDTPvpCampResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.camp_)*/{}
  , /*decltype(_impl_.rank_)*/0u
  , /*decltype(_impl_.camp1score_)*/0u
  , /*decltype(_impl_.camp2score_)*/0u
  , /*decltype(_impl_.currencyid_)*/0
  , /*decltype(_impl_.currencycnt_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPvpCampResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPvpCampResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPvpCampResultDefaultTypeInternal() {}
  union {
    CSDTPvpCampResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPvpCampResultDefaultTypeInternal _CSDTPvpCampResult_default_instance_;
PROTOBUF_CONSTEXPR CSDTCampData::CSDTCampData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerstat_)*/{}
  , /*decltype(_impl_.camp_)*/0u
  , /*decltype(_impl_.rank_)*/0u
  , /*decltype(_impl_.wintype_)*/0
  , /*decltype(_impl_.surrender_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTCampDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTCampDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTCampDataDefaultTypeInternal() {}
  union {
    CSDTCampData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTCampDataDefaultTypeInternal _CSDTCampData_default_instance_;
PROTOBUF_CONSTEXPR CSDTRoleStat::CSDTRoleStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.talents_)*/{}
  , /*decltype(_impl_._talents_cached_byte_size_)*/{0}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.usetime_)*/0u
  , /*decltype(_impl_.killcnt_)*/0u
  , /*decltype(_impl_.assistkillcnt_)*/0u
  , /*decltype(_impl_.deathcnt_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTRoleStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRoleStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRoleStatDefaultTypeInternal() {}
  union {
    CSDTRoleStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRoleStatDefaultTypeInternal _CSDTRoleStat_default_instance_;
PROTOBUF_CONSTEXPR CSDTPvpMvp::CSDTPvpMvp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hurtmax_)*/0u
  , /*decltype(_impl_.bearhurtmax_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPvpMvpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPvpMvpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPvpMvpDefaultTypeInternal() {}
  union {
    CSDTPvpMvp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPvpMvpDefaultTypeInternal _CSDTPvpMvp_default_instance_;
PROTOBUF_CONSTEXPR CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse::CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUseDefaultTypeInternal _CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse::CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTPvpPlayerStat_ChessRaceEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPvpPlayerStat_ChessRaceEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPvpPlayerStat_ChessRaceEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPvpPlayerStat_ChessRaceEntry_DoNotUseDefaultTypeInternal _CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTPvpPlayerStat_ChessProEntry_DoNotUse::CSDTPvpPlayerStat_ChessProEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTPvpPlayerStat_ChessProEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPvpPlayerStat_ChessProEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPvpPlayerStat_ChessProEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTPvpPlayerStat_ChessProEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPvpPlayerStat_ChessProEntry_DoNotUseDefaultTypeInternal _CSDTPvpPlayerStat_ChessProEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse::CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUseDefaultTypeInternal _CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTPvpPlayerStat_PveItemsEntry_DoNotUse::CSDTPvpPlayerStat_PveItemsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTPvpPlayerStat_PveItemsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPvpPlayerStat_PveItemsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPvpPlayerStat_PveItemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTPvpPlayerStat_PveItemsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPvpPlayerStat_PveItemsEntry_DoNotUseDefaultTypeInternal _CSDTPvpPlayerStat_PveItemsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTPvpPlayerStat::CSDTPvpPlayerStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chesslist_)*/{}
  , /*decltype(_impl_._chesslist_cached_byte_size_)*/{0}
  , /*decltype(_impl_.curshowitems_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.chessrace_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.chesspro_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.sharechesslist_)*/{}
  , /*decltype(_impl_._sharechesslist_cached_byte_size_)*/{0}
  , /*decltype(_impl_.fetters_)*/{}
  , /*decltype(_impl_.showchesslist_)*/{}
  , /*decltype(_impl_.unlockedchess_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.passporttypeids_)*/{}
  , /*decltype(_impl_._passporttypeids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.chosecardgroup_)*/{}
  , /*decltype(_impl_._chosecardgroup_cached_byte_size_)*/{0}
  , /*decltype(_impl_.pveitems_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.allchosecardgroup_)*/{}
  , /*decltype(_impl_._allchosecardgroup_cached_byte_size_)*/{0}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.usrname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channelusrid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pvpmvp_)*/nullptr
  , /*decltype(_impl_.headpic_)*/0u
  , /*decltype(_impl_.mmr_)*/0u
  , /*decltype(_impl_.chessplayer_)*/0u
  , /*decltype(_impl_.round_)*/0u
  , /*decltype(_impl_.winround_)*/0u
  , /*decltype(_impl_.failround_)*/0u
  , /*decltype(_impl_.drawround_)*/0u
  , /*decltype(_impl_.killnum_)*/0u
  , /*decltype(_impl_.isrobot_)*/false
  , /*decltype(_impl_.ishook_)*/false
  , /*decltype(_impl_.isdeath_)*/false
  , /*decltype(_impl_.leaveinadvance_)*/false
  , /*decltype(_impl_.deathnum_)*/0u
  , /*decltype(_impl_.survivetime_)*/0u
  , /*decltype(_impl_.hp_)*/0u
  , /*decltype(_impl_.chessplayerlvl_)*/0u
  , /*decltype(_impl_.asyn_)*/0u
  , /*decltype(_impl_.teamid_)*/0u
  , /*decltype(_impl_.teamplayernum_)*/0u
  , /*decltype(_impl_.money_)*/0u
  , /*decltype(_impl_.totalvalue_)*/0u
  , /*decltype(_impl_.afktime_)*/0u
  , /*decltype(_impl_.province_)*/0u
  , /*decltype(_impl_.group_)*/0
  , /*decltype(_impl_.playerindex_)*/0u
  , /*decltype(_impl_.currencyid_)*/0
  , /*decltype(_impl_.surpluscurrency_)*/0
  , /*decltype(_impl_.income_)*/0
  , /*decltype(_impl_.channeltype_)*/0
  , /*decltype(_impl_.restricttype_)*/0
  , /*decltype(_impl_.playerrank_)*/0u
  , /*decltype(_impl_.moneycost_)*/0
  , /*decltype(_impl_.moneyincome_)*/0
  , /*decltype(_impl_.score_)*/0u
  , /*decltype(_impl_.exchangestate_)*/0
  , /*decltype(_impl_.taskid_)*/0
  , /*decltype(_impl_.istaskcomplete_)*/false
  , /*decltype(_impl_.curtaskprogress_)*/0
  , /*decltype(_impl_.maxtaskprogress_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPvpPlayerStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPvpPlayerStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPvpPlayerStatDefaultTypeInternal() {}
  union {
    CSDTPvpPlayerStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPvpPlayerStatDefaultTypeInternal _CSDTPvpPlayerStat_default_instance_;
PROTOBUF_CONSTEXPR KernelItem::KernelItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KernelItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KernelItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KernelItemDefaultTypeInternal() {}
  union {
    KernelItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KernelItemDefaultTypeInternal _KernelItem_default_instance_;
PROTOBUF_CONSTEXPR CSDTFetters::CSDTFetters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resid_)*/0u
  , /*decltype(_impl_.effectnum_)*/0u
  , /*decltype(_impl_.maxeffectnum_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTFettersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTFettersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTFettersDefaultTypeInternal() {}
  union {
    CSDTFetters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTFettersDefaultTypeInternal _CSDTFetters_default_instance_;
PROTOBUF_CONSTEXPR CSDTPlayerFinish::CSDTPlayerFinish(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.campresult_)*/nullptr
  , /*decltype(_impl_.stat_)*/nullptr
  , /*decltype(_impl_.playerindex_)*/0u
  , /*decltype(_impl_.deathindex_)*/0u
  , /*decltype(_impl_.frameindex_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPlayerFinishDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPlayerFinishDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPlayerFinishDefaultTypeInternal() {}
  union {
    CSDTPlayerFinish _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPlayerFinishDefaultTypeInternal _CSDTPlayerFinish_default_instance_;
PROTOBUF_CONSTEXPR CSDTMarqueeItem::CSDTMarqueeItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.starttime_)*/int64_t{0}
  , /*decltype(_impl_.endtime_)*/int64_t{0}
  , /*decltype(_impl_.frequency_)*/0u
  , /*decltype(_impl_.flag_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTMarqueeItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTMarqueeItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTMarqueeItemDefaultTypeInternal() {}
  union {
    CSDTMarqueeItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTMarqueeItemDefaultTypeInternal _CSDTMarqueeItem_default_instance_;
PROTOBUF_CONSTEXPR CSDTMarquee::CSDTMarquee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTMarqueeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTMarqueeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTMarqueeDefaultTypeInternal() {}
  union {
    CSDTMarquee _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTMarqueeDefaultTypeInternal _CSDTMarquee_default_instance_;
PROTOBUF_CONSTEXPR Cond::Cond(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.para_)*/{}
  , /*decltype(_impl_._para_cached_byte_size_)*/{0}
  , /*decltype(_impl_.mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CondDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CondDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CondDefaultTypeInternal() {}
  union {
    Cond _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CondDefaultTypeInternal _Cond_default_instance_;
PROTOBUF_CONSTEXPR CSDTChessPlayerEquip::CSDTChessPlayerEquip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instanceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTChessPlayerEquipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTChessPlayerEquipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTChessPlayerEquipDefaultTypeInternal() {}
  union {
    CSDTChessPlayerEquip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTChessPlayerEquipDefaultTypeInternal _CSDTChessPlayerEquip_default_instance_;
PROTOBUF_CONSTEXPR CSDTChessPlayer_EquipsEntry_DoNotUse::CSDTChessPlayer_EquipsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTChessPlayer_EquipsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTChessPlayer_EquipsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTChessPlayer_EquipsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTChessPlayer_EquipsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTChessPlayer_EquipsEntry_DoNotUseDefaultTypeInternal _CSDTChessPlayer_EquipsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTChessPlayer_EquipEntry_DoNotUse::CSDTChessPlayer_EquipEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTChessPlayer_EquipEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTChessPlayer_EquipEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTChessPlayer_EquipEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTChessPlayer_EquipEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTChessPlayer_EquipEntry_DoNotUseDefaultTypeInternal _CSDTChessPlayer_EquipEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTChessPlayer::CSDTChessPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.equips_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.equip_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.instanceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.skin_)*/0u
  , /*decltype(_impl_.action_)*/0u
  , /*decltype(_impl_.picture_)*/0u
  , /*decltype(_impl_.voice_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTChessPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTChessPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTChessPlayerDefaultTypeInternal() {}
  union {
    CSDTChessPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTChessPlayerDefaultTypeInternal _CSDTChessPlayer_default_instance_;
PROTOBUF_CONSTEXPR CSDTTelBook::CSDTTelBook(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mmr_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTTelBookDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTTelBookDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTTelBookDefaultTypeInternal() {}
  union {
    CSDTTelBook _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTTelBookDefaultTypeInternal _CSDTTelBook_default_instance_;
PROTOBUF_CONSTEXPR LanguageData::LanguageData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.languages_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LanguageDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LanguageDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LanguageDataDefaultTypeInternal() {}
  union {
    LanguageData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LanguageDataDefaultTypeInternal _LanguageData_default_instance_;
PROTOBUF_CONSTEXPR GMLanguageData_LanguagesEntry_DoNotUse::GMLanguageData_LanguagesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GMLanguageData_LanguagesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GMLanguageData_LanguagesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GMLanguageData_LanguagesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GMLanguageData_LanguagesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GMLanguageData_LanguagesEntry_DoNotUseDefaultTypeInternal _GMLanguageData_LanguagesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GMLanguageData::GMLanguageData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.languages_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GMLanguageDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GMLanguageDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GMLanguageDataDefaultTypeInternal() {}
  union {
    GMLanguageData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GMLanguageDataDefaultTypeInternal _GMLanguageData_default_instance_;
PROTOBUF_CONSTEXPR CommonKVString::CommonKVString(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommonKVStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommonKVStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommonKVStringDefaultTypeInternal() {}
  union {
    CommonKVString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommonKVStringDefaultTypeInternal _CommonKVString_default_instance_;
PROTOBUF_CONSTEXPR CDNLanguageData::CDNLanguageData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.languages_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CDNLanguageDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDNLanguageDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDNLanguageDataDefaultTypeInternal() {}
  union {
    CDNLanguageData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDNLanguageDataDefaultTypeInternal _CDNLanguageData_default_instance_;
PROTOBUF_CONSTEXPR CSDTSeason::CSDTSeason(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.currankseason_)*/0u
  , /*decltype(_impl_.seasonawarded_)*/false
  , /*decltype(_impl_.seasontaskprogress_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTSeasonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTSeasonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTSeasonDefaultTypeInternal() {}
  union {
    CSDTSeason _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTSeasonDefaultTypeInternal _CSDTSeason_default_instance_;
PROTOBUF_CONSTEXPR CSDTActivity_GroupsEntry_DoNotUse::CSDTActivity_GroupsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTActivity_GroupsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActivity_GroupsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActivity_GroupsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTActivity_GroupsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActivity_GroupsEntry_DoNotUseDefaultTypeInternal _CSDTActivity_GroupsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTActivity::CSDTActivity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groups_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.questionnaires_)*/{}
  , /*decltype(_impl_._questionnaires_cached_byte_size_)*/{0}
  , /*decltype(_impl_.useexcelconf_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTActivityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActivityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActivityDefaultTypeInternal() {}
  union {
    CSDTActivity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActivityDefaultTypeInternal _CSDTActivity_default_instance_;
PROTOBUF_CONSTEXPR CSDTActivityGroup_ActivitiesEntry_DoNotUse::CSDTActivityGroup_ActivitiesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTActivityGroup_ActivitiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActivityGroup_ActivitiesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActivityGroup_ActivitiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTActivityGroup_ActivitiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActivityGroup_ActivitiesEntry_DoNotUseDefaultTypeInternal _CSDTActivityGroup_ActivitiesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTActivityGroup::CSDTActivityGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.activities_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.md5sum_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.record_)*/nullptr
  , /*decltype(_impl_.begintime_)*/int64_t{0}
  , /*decltype(_impl_.logindays_)*/0u
  , /*decltype(_impl_.chestlevel_)*/0
  , /*decltype(_impl_.endtime_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTActivityGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActivityGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActivityGroupDefaultTypeInternal() {}
  union {
    CSDTActivityGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActivityGroupDefaultTypeInternal _CSDTActivityGroup_default_instance_;
PROTOBUF_CONSTEXPR CSDTActivityDetail::CSDTActivityDetail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.md5sum_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.progress_)*/0u
  , /*decltype(_impl_.getaward_)*/false
  , /*decltype(_impl_.unlock_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTActivityDetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActivityDetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActivityDetailDefaultTypeInternal() {}
  union {
    CSDTActivityDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActivityDetailDefaultTypeInternal _CSDTActivityDetail_default_instance_;
PROTOBUF_CONSTEXPR CSDTActivityRecord_ProcessEntry_DoNotUse::CSDTActivityRecord_ProcessEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTActivityRecord_ProcessEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActivityRecord_ProcessEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActivityRecord_ProcessEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTActivityRecord_ProcessEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActivityRecord_ProcessEntry_DoNotUseDefaultTypeInternal _CSDTActivityRecord_ProcessEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTActivityRecord_RewardEntry_DoNotUse::CSDTActivityRecord_RewardEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTActivityRecord_RewardEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActivityRecord_RewardEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActivityRecord_RewardEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTActivityRecord_RewardEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActivityRecord_RewardEntry_DoNotUseDefaultTypeInternal _CSDTActivityRecord_RewardEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTActivityRecord::CSDTActivityRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.process_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.reward_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.params_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTActivityRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActivityRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActivityRecordDefaultTypeInternal() {}
  union {
    CSDTActivityRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActivityRecordDefaultTypeInternal _CSDTActivityRecord_default_instance_;
PROTOBUF_CONSTEXPR CSDTRecruitData_IsRecruitedEntry_DoNotUse::CSDTRecruitData_IsRecruitedEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTRecruitData_IsRecruitedEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRecruitData_IsRecruitedEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRecruitData_IsRecruitedEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTRecruitData_IsRecruitedEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRecruitData_IsRecruitedEntry_DoNotUseDefaultTypeInternal _CSDTRecruitData_IsRecruitedEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTRecruitData::CSDTRecruitData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.isrecruited_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTRecruitDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRecruitDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRecruitDataDefaultTypeInternal() {}
  union {
    CSDTRecruitData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRecruitDataDefaultTypeInternal _CSDTRecruitData_default_instance_;
PROTOBUF_CONSTEXPR CSDTRecruitPlayer::CSDTRecruitPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.battlecount_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTRecruitPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRecruitPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRecruitPlayerDefaultTypeInternal() {}
  union {
    CSDTRecruitPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRecruitPlayerDefaultTypeInternal _CSDTRecruitPlayer_default_instance_;
PROTOBUF_CONSTEXPR CSDTActivityRecruit_PlayersEntry_DoNotUse::CSDTActivityRecruit_PlayersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTActivityRecruit_PlayersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActivityRecruit_PlayersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActivityRecruit_PlayersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTActivityRecruit_PlayersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActivityRecruit_PlayersEntry_DoNotUseDefaultTypeInternal _CSDTActivityRecruit_PlayersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTActivityRecruit::CSDTActivityRecruit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTActivityRecruitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActivityRecruitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActivityRecruitDefaultTypeInternal() {}
  union {
    CSDTActivityRecruit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActivityRecruitDefaultTypeInternal _CSDTActivityRecruit_default_instance_;
PROTOBUF_CONSTEXPR CSDTActGroupBuy_ProcessEntry_DoNotUse::CSDTActGroupBuy_ProcessEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTActGroupBuy_ProcessEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActGroupBuy_ProcessEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActGroupBuy_ProcessEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTActGroupBuy_ProcessEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActGroupBuy_ProcessEntry_DoNotUseDefaultTypeInternal _CSDTActGroupBuy_ProcessEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTActGroupBuy_RewardEntry_DoNotUse::CSDTActGroupBuy_RewardEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTActGroupBuy_RewardEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActGroupBuy_RewardEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActGroupBuy_RewardEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTActGroupBuy_RewardEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActGroupBuy_RewardEntry_DoNotUseDefaultTypeInternal _CSDTActGroupBuy_RewardEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTActGroupBuy::CSDTActGroupBuy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.process_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.reward_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTActGroupBuyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActGroupBuyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActGroupBuyDefaultTypeInternal() {}
  union {
    CSDTActGroupBuy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActGroupBuyDefaultTypeInternal _CSDTActGroupBuy_default_instance_;
PROTOBUF_CONSTEXPR CSDTActGroupBuyRwd_RewardsEntry_DoNotUse::CSDTActGroupBuyRwd_RewardsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTActGroupBuyRwd_RewardsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActGroupBuyRwd_RewardsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActGroupBuyRwd_RewardsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTActGroupBuyRwd_RewardsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActGroupBuyRwd_RewardsEntry_DoNotUseDefaultTypeInternal _CSDTActGroupBuyRwd_RewardsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTActGroupBuyRwd::CSDTActGroupBuyRwd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rewards_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTActGroupBuyRwdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActGroupBuyRwdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActGroupBuyRwdDefaultTypeInternal() {}
  union {
    CSDTActGroupBuyRwd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActGroupBuyRwdDefaultTypeInternal _CSDTActGroupBuyRwd_default_instance_;
PROTOBUF_CONSTEXPR CSDTActRecruitData_PlayersEntry_DoNotUse::CSDTActRecruitData_PlayersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTActRecruitData_PlayersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActRecruitData_PlayersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActRecruitData_PlayersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTActRecruitData_PlayersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActRecruitData_PlayersEntry_DoNotUseDefaultTypeInternal _CSDTActRecruitData_PlayersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTActRecruitData::CSDTActRecruitData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.inviter_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTActRecruitDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActRecruitDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActRecruitDataDefaultTypeInternal() {}
  union {
    CSDTActRecruitData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActRecruitDataDefaultTypeInternal _CSDTActRecruitData_default_instance_;
PROTOBUF_CONSTEXPR CSDTActLuckMallData::CSDTActLuckMallData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mallgoods_)*/{}
  , /*decltype(_impl_._mallgoods_cached_byte_size_)*/{0}
  , /*decltype(_impl_.tabid_)*/0
  , /*decltype(_impl_.discount_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTActLuckMallDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActLuckMallDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActLuckMallDataDefaultTypeInternal() {}
  union {
    CSDTActLuckMallData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActLuckMallDataDefaultTypeInternal _CSDTActLuckMallData_default_instance_;
PROTOBUF_CONSTEXPR CSDTMelee::CSDTMelee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.progress_)*/0u
  , /*decltype(_impl_.getaward_)*/false
  , /*decltype(_impl_.meleebegintime_)*/int64_t{0}
  , /*decltype(_impl_.meleeendtime_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTMeleeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTMeleeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTMeleeDefaultTypeInternal() {}
  union {
    CSDTMelee _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTMeleeDefaultTypeInternal _CSDTMelee_default_instance_;
PROTOBUF_CONSTEXPR CSDTTeamSlotPlayer::CSDTTeamSlotPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.usrname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isai_)*/false
  , /*decltype(_impl_.slot_)*/0u
  , /*decltype(_impl_.group_)*/0
  , /*decltype(_impl_.headpic_)*/0u
  , /*decltype(_impl_.province_)*/0u
  , /*decltype(_impl_.headpicframe_)*/0u
  , /*decltype(_impl_.lvl_)*/0u
  , /*decltype(_impl_.cup_)*/0u
  , /*decltype(_impl_.platformtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTTeamSlotPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTTeamSlotPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTTeamSlotPlayerDefaultTypeInternal() {}
  union {
    CSDTTeamSlotPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTTeamSlotPlayerDefaultTypeInternal _CSDTTeamSlotPlayer_default_instance_;
PROTOBUF_CONSTEXPR CSDTTeamVoicePlayer::CSDTTeamVoicePlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.voiceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.voiceuserid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.voicememid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTTeamVoicePlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTTeamVoicePlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTTeamVoicePlayerDefaultTypeInternal() {}
  union {
    CSDTTeamVoicePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTTeamVoicePlayerDefaultTypeInternal _CSDTTeamVoicePlayer_default_instance_;
PROTOBUF_CONSTEXPR ActivityGroupData::ActivityGroupData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buffeffects_)*/{}
  , /*decltype(_impl_.modes_)*/{}
  , /*decltype(_impl_._modes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.channels_)*/{}
  , /*decltype(_impl_.tabname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tabicon_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.beginshowtime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.begintime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.endtime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.endshowtime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.showparam_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.picname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.effectweekday_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.takeeffectdate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.takeeffecttime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.takeeffectrank_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.takeeffectmode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.zone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.takeeffectlevel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.platformclose_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_.privatedata_)*/0u
  , /*decltype(_impl_.activityid_)*/0u
  , /*decltype(_impl_.repeattype_)*/0u
  , /*decltype(_impl_.open_)*/false
  , /*decltype(_impl_.picopen_)*/false
  , /*decltype(_impl_.pagetype_)*/0u
  , /*decltype(_impl_.subscripttype_)*/0u
  , /*decltype(_impl_.orderid_)*/0u
  , /*decltype(_impl_.picinterval_)*/0u
  , /*decltype(_impl_.picswitchopen_)*/0u
  , /*decltype(_impl_.effecttimetype_)*/0
  , /*decltype(_impl_.teamstate_)*/0
  , /*decltype(_impl_.uistylephone_)*/0u
  , /*decltype(_impl_.uistylepc_)*/0u
  , /*decltype(_impl_.leastmach_)*/int64_t{0}
  , /*decltype(_impl_.makeup_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActivityGroupDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityGroupDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityGroupDataDefaultTypeInternal() {}
  union {
    ActivityGroupData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityGroupDataDefaultTypeInternal _ActivityGroupData_default_instance_;
PROTOBUF_CONSTEXPR ActivityData::ActivityData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.awards_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.skipinterface_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.showgiftpic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cond_)*/nullptr
  , /*decltype(_impl_.groupid_)*/0u
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.unit_)*/0u
  , /*decltype(_impl_.condgroup_)*/0u
  , /*decltype(_impl_.precondgroup_)*/0u
  , /*decltype(_impl_.skiptab_)*/0u
  , /*decltype(_impl_.day_)*/0u
  , /*decltype(_impl_.showquality_)*/0u
  , /*decltype(_impl_.resettype_)*/0
  , /*decltype(_impl_.isrecruiter_)*/false
  , /*decltype(_impl_.progressinherit_)*/0u
  , /*decltype(_impl_.showorder_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActivityDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityDataDefaultTypeInternal() {}
  union {
    ActivityData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityDataDefaultTypeInternal _ActivityData_default_instance_;
PROTOBUF_CONSTEXPR ActivityAttrData::ActivityAttrData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.abtesttype_)*/0
  , /*decltype(_impl_.abtestvalue_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActivityAttrDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityAttrDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityAttrDataDefaultTypeInternal() {}
  union {
    ActivityAttrData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityAttrDataDefaultTypeInternal _ActivityAttrData_default_instance_;
PROTOBUF_CONSTEXPR GMLanguageInfo::GMLanguageInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.languagetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.translate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GMLanguageInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GMLanguageInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GMLanguageInfoDefaultTypeInternal() {}
  union {
    GMLanguageInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GMLanguageInfoDefaultTypeInternal _GMLanguageInfo_default_instance_;
PROTOBUF_CONSTEXPR PlayLimit::PlayLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.age_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayLimitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayLimitDefaultTypeInternal() {}
  union {
    PlayLimit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayLimitDefaultTypeInternal _PlayLimit_default_instance_;
PROTOBUF_CONSTEXPR ChannelFunctionData::ChannelFunctionData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playlimits_)*/{}
  , /*decltype(_impl_.channelid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.forbiddenlogo_)*/false
  , /*decltype(_impl_.agejudge_)*/false
  , /*decltype(_impl_.informationinput_)*/false
  , /*decltype(_impl_.gamerestrict_)*/false
  , /*decltype(_impl_.forbiddenage_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChannelFunctionDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelFunctionDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelFunctionDataDefaultTypeInternal() {}
  union {
    ChannelFunctionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelFunctionDataDefaultTypeInternal _ChannelFunctionData_default_instance_;
PROTOBUF_CONSTEXPR PvpHistoryData::PvpHistoryData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.campresult_)*/nullptr
  , /*decltype(_impl_.teachresult_)*/nullptr
  , /*decltype(_impl_.extdata_)*/nullptr
  , /*decltype(_impl_.playerextdata_)*/nullptr
  , /*decltype(_impl_.battleext_)*/nullptr
  , /*decltype(_impl_.pvpid_)*/uint64_t{0u}
  , /*decltype(_impl_.createtime_)*/int64_t{0}
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_.meleerule_)*/0u
  , /*decltype(_impl_.tournamentid_)*/uint64_t{0u}
  , /*decltype(_impl_.gameid_)*/uint64_t{0u}
  , /*decltype(_impl_.customsubmode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PvpHistoryDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PvpHistoryDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PvpHistoryDataDefaultTypeInternal() {}
  union {
    PvpHistoryData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PvpHistoryDataDefaultTypeInternal _PvpHistoryData_default_instance_;
PROTOBUF_CONSTEXPR CSDTGuide::CSDTGuide(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guidename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0u
  , /*decltype(_impl_.guideid_)*/0u
  , /*decltype(_impl_.sequence_)*/0u
  , /*decltype(_impl_.lastseq_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTGuideDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTGuideDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTGuideDefaultTypeInternal() {}
  union {
    CSDTGuide _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTGuideDefaultTypeInternal _CSDTGuide_default_instance_;
PROTOBUF_CONSTEXPR CSDTChat::CSDTChat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.senderid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channelusrid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.emotionid_)*/0u
  , /*decltype(_impl_.channeltype_)*/0
  , /*decltype(_impl_.ps4only_)*/false
  , /*decltype(_impl_.sourcetype_)*/0
  , /*decltype(_impl_.restricttype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTChatDefaultTypeInternal() {}
  union {
    CSDTChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTChatDefaultTypeInternal _CSDTChat_default_instance_;
PROTOBUF_CONSTEXPR CSDTGoods::CSDTGoods(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_.uid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTGoodsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTGoodsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTGoodsDefaultTypeInternal() {}
  union {
    CSDTGoods _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTGoodsDefaultTypeInternal _CSDTGoods_default_instance_;
PROTOBUF_CONSTEXPR CSDTGoodsInfo::CSDTGoodsInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.goodsinfo_)*/{}
  , /*decltype(_impl_.refreshtime_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTGoodsInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTGoodsInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTGoodsInfoDefaultTypeInternal() {}
  union {
    CSDTGoodsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTGoodsInfoDefaultTypeInternal _CSDTGoodsInfo_default_instance_;
PROTOBUF_CONSTEXPR MallTabData::MallTabData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.sort_)*/0u
  , /*decltype(_impl_.skips_interface_pc_)*/0u
  , /*decltype(_impl_.itemtypepage_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MallTabDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MallTabDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MallTabDataDefaultTypeInternal() {}
  union {
    MallTabData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MallTabDataDefaultTypeInternal _MallTabData_default_instance_;
PROTOBUF_CONSTEXPR Skip::Skip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.interface_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tab_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SkipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkipDefaultTypeInternal() {}
  union {
    Skip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkipDefaultTypeInternal _Skip_default_instance_;
PROTOBUF_CONSTEXPR MallGoodsData::MallGoodsData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contents_)*/{}
  , /*decltype(_impl_.consumes_)*/{}
  , /*decltype(_impl_.downloadlist_)*/{}
  , /*decltype(_impl_.platformlist_)*/{}
  , /*decltype(_impl_._platformlist_cached_byte_size_)*/{0}
  , /*decltype(_impl_.consumes2nd_)*/{}
  , /*decltype(_impl_.excludedownload_)*/{}
  , /*decltype(_impl_.countrylist_)*/{}
  , /*decltype(_impl_.gifts_)*/{}
  , /*decltype(_impl_.consumeinc_)*/{}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.videourl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.consumesurlweb_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.consumesurlapp_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.sellcountlimit_)*/0u
  , /*decltype(_impl_.onsalebegintime_)*/int64_t{0}
  , /*decltype(_impl_.onsaleendtime_)*/int64_t{0}
  , /*decltype(_impl_.sellcountresetinterval_)*/0u
  , /*decltype(_impl_.flag_)*/0
  , /*decltype(_impl_.recommend_)*/0u
  , /*decltype(_impl_.sort_)*/0u
  , /*decltype(_impl_.malltabid_)*/0u
  , /*decltype(_impl_.groupid_)*/0u
  , /*decltype(_impl_.showbegintime_)*/int64_t{0}
  , /*decltype(_impl_.showendtime_)*/int64_t{0}
  , /*decltype(_impl_.bulkbuying_)*/false
  , /*decltype(_impl_.groupshowfirst_)*/false
  , /*decltype(_impl_.showresource_)*/false
  , /*decltype(_impl_.repeatedbuy_)*/false
  , /*decltype(_impl_.chargeprivatepara_)*/0u
  , /*decltype(_impl_.sellcountstarttime_)*/int64_t{0}
  , /*decltype(_impl_.skips_interface_pc_)*/0
  , /*decltype(_impl_.moneyoffcount_)*/0u
  , /*decltype(_impl_.moneyoff_)*/0u
  , /*decltype(_impl_.recommend2nd_)*/0u
  , /*decltype(_impl_.recommend3rd_)*/0u
  , /*decltype(_impl_.zone_)*/0u
  , /*decltype(_impl_.onsale2ndbegintime_)*/int64_t{0}
  , /*decltype(_impl_.onsale2ndendtime_)*/int64_t{0}
  , /*decltype(_impl_.moneyoff2ndcount_)*/0u
  , /*decltype(_impl_.moneyoff2nd_)*/0u
  , /*decltype(_impl_.recommendbegintime_)*/int64_t{0}
  , /*decltype(_impl_.recommendendtime_)*/int64_t{0}
  , /*decltype(_impl_.recommend2ndbegintime_)*/int64_t{0}
  , /*decltype(_impl_.recommend2ndendtime_)*/int64_t{0}
  , /*decltype(_impl_.disablededuction_)*/false
  , /*decltype(_impl_.consumesurl_)*/false
  , /*decltype(_impl_.consumeincrefresh_)*/0
  , /*decltype(_impl_.recommend3rdbegintime_)*/int64_t{0}
  , /*decltype(_impl_.recommend3rdendtime_)*/int64_t{0}
  , /*decltype(_impl_.series_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MallGoodsDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MallGoodsDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MallGoodsDataDefaultTypeInternal() {}
  union {
    MallGoodsData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MallGoodsDataDefaultTypeInternal _MallGoodsData_default_instance_;
PROTOBUF_CONSTEXPR ConsumeIncrease::ConsumeIncrease(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConsumeIncreaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConsumeIncreaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConsumeIncreaseDefaultTypeInternal() {}
  union {
    ConsumeIncrease _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConsumeIncreaseDefaultTypeInternal _ConsumeIncrease_default_instance_;
PROTOBUF_CONSTEXPR CSDTMallGoodsData::CSDTMallGoodsData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mallgoods_)*/nullptr
  , /*decltype(_impl_.lastresettime_)*/int64_t{0}
  , /*decltype(_impl_.buycount_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTMallGoodsDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTMallGoodsDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTMallGoodsDataDefaultTypeInternal() {}
  union {
    CSDTMallGoodsData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTMallGoodsDataDefaultTypeInternal _CSDTMallGoodsData_default_instance_;
PROTOBUF_CONSTEXPR CSDTMallGoods::CSDTMallGoods(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mallgoods_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTMallGoodsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTMallGoodsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTMallGoodsDefaultTypeInternal() {}
  union {
    CSDTMallGoods _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTMallGoodsDefaultTypeInternal _CSDTMallGoods_default_instance_;
PROTOBUF_CONSTEXPR CSDTMallBuyCountData::CSDTMallBuyCountData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.buycount_)*/0u
  , /*decltype(_impl_.lastresettime_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTMallBuyCountDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTMallBuyCountDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTMallBuyCountDataDefaultTypeInternal() {}
  union {
    CSDTMallBuyCountData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTMallBuyCountDataDefaultTypeInternal _CSDTMallBuyCountData_default_instance_;
PROTOBUF_CONSTEXPR CSDTMallBuyCount::CSDTMallBuyCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mallgoods_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTMallBuyCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTMallBuyCountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTMallBuyCountDefaultTypeInternal() {}
  union {
    CSDTMallBuyCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTMallBuyCountDefaultTypeInternal _CSDTMallBuyCount_default_instance_;
PROTOBUF_CONSTEXPR MallNoticeData::MallNoticeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.picname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.skipname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.showbegintime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.showendtime_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.sortid_)*/0u
  , /*decltype(_impl_.skiptype_)*/0
  , /*decltype(_impl_.skiptap_)*/0u
  , /*decltype(_impl_.mallgoodsid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MallNoticeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MallNoticeDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MallNoticeDataDefaultTypeInternal() {}
  union {
    MallNoticeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MallNoticeDataDefaultTypeInternal _MallNoticeData_default_instance_;
PROTOBUF_CONSTEXPR CSDTCommonRandList::CSDTCommonRandList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_._list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTCommonRandListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTCommonRandListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTCommonRandListDefaultTypeInternal() {}
  union {
    CSDTCommonRandList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTCommonRandListDefaultTypeInternal _CSDTCommonRandList_default_instance_;
PROTOBUF_CONSTEXPR Sign::Sign(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.day_)*/0u
  , /*decltype(_impl_.awardday_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignDefaultTypeInternal() {}
  union {
    Sign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignDefaultTypeInternal _Sign_default_instance_;
PROTOBUF_CONSTEXPR CSDTSignData::CSDTSignData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signlist_)*/{}
  , /*decltype(_impl_.shareaward_)*/{}
  , /*decltype(_impl_._shareaward_cached_byte_size_)*/{0}
  , /*decltype(_impl_.fit_)*/{}
  , /*decltype(_impl_._fit_cached_byte_size_)*/{0}
  , /*decltype(_impl_.avoid_)*/{}
  , /*decltype(_impl_._avoid_cached_byte_size_)*/{0}
  , /*decltype(_impl_.todayawardday_)*/0u
  , /*decltype(_impl_.sharecount_)*/0u
  , /*decltype(_impl_.luckychess_)*/0u
  , /*decltype(_impl_.fortuneproverb_)*/0u
  , /*decltype(_impl_.fitavoid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTSignDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTSignDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTSignDataDefaultTypeInternal() {}
  union {
    CSDTSignData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTSignDataDefaultTypeInternal _CSDTSignData_default_instance_;
PROTOBUF_CONSTEXPR MatchTeamData::MatchTeamData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_.endtime_)*/int64_t{0}
  , /*decltype(_impl_.startteamid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MatchTeamDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchTeamDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchTeamDataDefaultTypeInternal() {}
  union {
    MatchTeamData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchTeamDataDefaultTypeInternal _MatchTeamData_default_instance_;
PROTOBUF_CONSTEXPR CSDTRecommendPlayer::CSDTRecommendPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cup_)*/0u
  , /*decltype(_impl_.headpic_)*/0u
  , /*decltype(_impl_.scene_)*/0u
  , /*decltype(_impl_.chessplayer_)*/0u
  , /*decltype(_impl_.recommendscore_)*/0u
  , /*decltype(_impl_.headpicframe_)*/0u
  , /*decltype(_impl_.observeprivilege_)*/0
  , /*decltype(_impl_.platformtype_)*/0
  , /*decltype(_impl_.ps4only_)*/false
  , /*decltype(_impl_.restricttype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTRecommendPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRecommendPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRecommendPlayerDefaultTypeInternal() {}
  union {
    CSDTRecommendPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRecommendPlayerDefaultTypeInternal _CSDTRecommendPlayer_default_instance_;
PROTOBUF_CONSTEXPR CSDTThirdPvpInfo::CSDTThirdPvpInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bigpic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.smallpic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recommendicon_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.preshowpic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.pvpstarttime_)*/int64_t{0}
  , /*decltype(_impl_.pvpendtime_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTThirdPvpInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTThirdPvpInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTThirdPvpInfoDefaultTypeInternal() {}
  union {
    CSDTThirdPvpInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTThirdPvpInfoDefaultTypeInternal _CSDTThirdPvpInfo_default_instance_;
PROTOBUF_CONSTEXPR CSDTRecommendPvpInfo::CSDTRecommendPvpInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerinfo_)*/nullptr
  , /*decltype(_impl_.tournament_)*/nullptr
  , /*decltype(_impl_.authoritydata_)*/nullptr
  , /*decltype(_impl_.pvpid_)*/uint64_t{0u}
  , /*decltype(_impl_.starttime_)*/int64_t{0}
  , /*decltype(_impl_.observecount_)*/0u
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_.thirdpvpid_)*/uint64_t{0u}
  , /*decltype(_impl_.submode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTRecommendPvpInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRecommendPvpInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRecommendPvpInfoDefaultTypeInternal() {}
  union {
    CSDTRecommendPvpInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRecommendPvpInfoDefaultTypeInternal _CSDTRecommendPvpInfo_default_instance_;
PROTOBUF_CONSTEXPR WxVVipData::WxVVipData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.weeklytawardt_)*/int64_t{0}
  , /*decltype(_impl_.dailyvawardt_)*/int64_t{0}
  , /*decltype(_impl_.dailyawardt_)*/int64_t{0}
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WxVVipDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WxVVipDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WxVVipDataDefaultTypeInternal() {}
  union {
    WxVVipData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WxVVipDataDefaultTypeInternal _WxVVipData_default_instance_;
PROTOBUF_CONSTEXPR CSDTWxRedPktItem::CSDTWxRedPktItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.redpktidx_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.redpktid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTWxRedPktItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTWxRedPktItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTWxRedPktItemDefaultTypeInternal() {}
  union {
    CSDTWxRedPktItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTWxRedPktItemDefaultTypeInternal _CSDTWxRedPktItem_default_instance_;
PROTOBUF_CONSTEXPR CSDTWxRedPktProfile::CSDTWxRedPktProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.selfrank_)*/0u
  , /*decltype(_impl_.selflike_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTWxRedPktProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTWxRedPktProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTWxRedPktProfileDefaultTypeInternal() {}
  union {
    CSDTWxRedPktProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTWxRedPktProfileDefaultTypeInternal _CSDTWxRedPktProfile_default_instance_;
PROTOBUF_CONSTEXPR CSDTWxVVipRankItem::CSDTWxVVipRankItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vlvl_)*/0u
  , /*decltype(_impl_.likes_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTWxVVipRankItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTWxVVipRankItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTWxVVipRankItemDefaultTypeInternal() {}
  union {
    CSDTWxVVipRankItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTWxVVipRankItemDefaultTypeInternal _CSDTWxVVipRankItem_default_instance_;
PROTOBUF_CONSTEXPR CSDTSlotInfo::CSDTSlotInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.slot_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTSlotInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTSlotInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTSlotInfoDefaultTypeInternal() {}
  union {
    CSDTSlotInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTSlotInfoDefaultTypeInternal _CSDTSlotInfo_default_instance_;
PROTOBUF_CONSTEXPR CSDTRedPktData::CSDTRedPktData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.award_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTRedPktDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRedPktDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRedPktDataDefaultTypeInternal() {}
  union {
    CSDTRedPktData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRedPktDataDefaultTypeInternal _CSDTRedPktData_default_instance_;
PROTOBUF_CONSTEXPR CSDTRedPktInfo::CSDTRedPktInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rank_)*/{}
  , /*decltype(_impl_.rankver_)*/int64_t{0}
  , /*decltype(_impl_.redpktid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTRedPktInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTRedPktInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTRedPktInfoDefaultTypeInternal() {}
  union {
    CSDTRedPktInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTRedPktInfoDefaultTypeInternal _CSDTRedPktInfo_default_instance_;
PROTOBUF_CONSTEXPR SwitchItem::SwitchItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.switchtype_)*/0
  , /*decltype(_impl_.forbid_)*/false
  , /*decltype(_impl_.endtime_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwitchItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwitchItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwitchItemDefaultTypeInternal() {}
  union {
    SwitchItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwitchItemDefaultTypeInternal _SwitchItem_default_instance_;
PROTOBUF_CONSTEXPR CreditCfgItem::CreditCfgItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.actid_)*/0
  , /*decltype(_impl_.thresholdhi_)*/0
  , /*decltype(_impl_.thresholdlo_)*/0
  , /*decltype(_impl_.limitlv_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreditCfgItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreditCfgItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreditCfgItemDefaultTypeInternal() {}
  union {
    CreditCfgItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreditCfgItemDefaultTypeInternal _CreditCfgItem_default_instance_;
PROTOBUF_CONSTEXPR CSDTPunishment::CSDTPunishment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.types_)*/{}
  , /*decltype(_impl_._types_cached_byte_size_)*/{0}
  , /*decltype(_impl_.triggers_)*/{}
  , /*decltype(_impl_._triggers_cached_byte_size_)*/{0}
  , /*decltype(_impl_.executedeadline_)*/int64_t{0}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPunishmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPunishmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPunishmentDefaultTypeInternal() {}
  union {
    CSDTPunishment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPunishmentDefaultTypeInternal _CSDTPunishment_default_instance_;
PROTOBUF_CONSTEXPR CSDTPlayer::CSDTPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPlayerDefaultTypeInternal() {}
  union {
    CSDTPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPlayerDefaultTypeInternal _CSDTPlayer_default_instance_;
PROTOBUF_CONSTEXPR CSDTBriefPunishment::CSDTBriefPunishment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{}
  , /*decltype(_impl_.punishmentdeadline_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTBriefPunishmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTBriefPunishmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTBriefPunishmentDefaultTypeInternal() {}
  union {
    CSDTBriefPunishment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTBriefPunishmentDefaultTypeInternal _CSDTBriefPunishment_default_instance_;
PROTOBUF_CONSTEXPR PlayerConfirmInfo::PlayerConfirmInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.headpic_)*/0u
  , /*decltype(_impl_.headpicframe_)*/0u
  , /*decltype(_impl_.isrobot_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerConfirmInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerConfirmInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerConfirmInfoDefaultTypeInternal() {}
  union {
    PlayerConfirmInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerConfirmInfoDefaultTypeInternal _PlayerConfirmInfo_default_instance_;
PROTOBUF_CONSTEXPR AnswerData::AnswerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contents_)*/{}
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnswerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnswerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnswerDataDefaultTypeInternal() {}
  union {
    AnswerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnswerDataDefaultTypeInternal _AnswerData_default_instance_;
PROTOBUF_CONSTEXPR VideoInfo::VideoInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.picurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contenturl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.languagekey_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoInfoDefaultTypeInternal() {}
  union {
    VideoInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoInfoDefaultTypeInternal _VideoInfo_default_instance_;
PROTOBUF_CONSTEXPR CSDTAddictionInfo::CSDTAddictionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.authaddictiontoken_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.isauthaddiction_)*/false
  , /*decltype(_impl_.isverified_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTAddictionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTAddictionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTAddictionInfoDefaultTypeInternal() {}
  union {
    CSDTAddictionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTAddictionInfoDefaultTypeInternal _CSDTAddictionInfo_default_instance_;
PROTOBUF_CONSTEXPR KrAddictionInfo::KrAddictionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logintime_)*/int64_t{0}
  , /*decltype(_impl_.startlimittime_)*/int64_t{0}
  , /*decltype(_impl_.endlimittime_)*/int64_t{0}
  , /*decltype(_impl_.countdown1_)*/int64_t{0}
  , /*decltype(_impl_.countdown2_)*/int64_t{0}
  , /*decltype(_impl_.durantion_)*/int64_t{0}
  , /*decltype(_impl_.ischeckaddic_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KrAddictionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KrAddictionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KrAddictionInfoDefaultTypeInternal() {}
  union {
    KrAddictionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KrAddictionInfoDefaultTypeInternal _KrAddictionInfo_default_instance_;
PROTOBUF_CONSTEXPR MultiPlayer::MultiPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.headpic_)*/0u
  , /*decltype(_impl_.headpicframe_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.mmr_)*/0u
  , /*decltype(_impl_.diamond_)*/0u
  , /*decltype(_impl_.money_)*/0u
  , /*decltype(_impl_.passportlevel_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiPlayerDefaultTypeInternal() {}
  union {
    MultiPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiPlayerDefaultTypeInternal _MultiPlayer_default_instance_;
PROTOBUF_CONSTEXPR CSDTBannerInfo::CSDTBannerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTBannerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTBannerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTBannerInfoDefaultTypeInternal() {}
  union {
    CSDTBannerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTBannerInfoDefaultTypeInternal _CSDTBannerInfo_default_instance_;
PROTOBUF_CONSTEXPR CSDTBanner::CSDTBanner(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.countrylist_)*/{}
  , /*decltype(_impl_.zoneid_)*/{}
  , /*decltype(_impl_._zoneid_cached_byte_size_)*/{0}
  , /*decltype(_impl_.downloadlist_)*/{}
  , /*decltype(_impl_.platformlist_)*/{}
  , /*decltype(_impl_._platformlist_cached_byte_size_)*/{0}
  , /*decltype(_impl_.hallmodelist_)*/{}
  , /*decltype(_impl_._hallmodelist_cached_byte_size_)*/{0}
  , /*decltype(_impl_.excludedownload_)*/{}
  , /*decltype(_impl_.picurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.skipname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pcskipurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.bannertype_)*/0
  , /*decltype(_impl_.skiptype_)*/0
  , /*decltype(_impl_.skiptap_)*/0u
  , /*decltype(_impl_.mallgoodsid_)*/0u
  , /*decltype(_impl_.showbegintime_)*/int64_t{0}
  , /*decltype(_impl_.showendtime_)*/int64_t{0}
  , /*decltype(_impl_.sort_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTBannerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTBannerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTBannerDefaultTypeInternal() {}
  union {
    CSDTBanner _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTBannerDefaultTypeInternal _CSDTBanner_default_instance_;
PROTOBUF_CONSTEXPR CSDTTournament_RankInfoEntry_DoNotUse::CSDTTournament_RankInfoEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTTournament_RankInfoEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTTournament_RankInfoEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTTournament_RankInfoEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTTournament_RankInfoEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTTournament_RankInfoEntry_DoNotUseDefaultTypeInternal _CSDTTournament_RankInfoEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTTournament_PointsEntry_DoNotUse::CSDTTournament_PointsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTTournament_PointsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTTournament_PointsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTTournament_PointsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTTournament_PointsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTTournament_PointsEntry_DoNotUseDefaultTypeInternal _CSDTTournament_PointsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTTournament_RoundPointsEntry_DoNotUse::CSDTTournament_RoundPointsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTTournament_RoundPointsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTTournament_RoundPointsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTTournament_RoundPointsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTTournament_RoundPointsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTTournament_RoundPointsEntry_DoNotUseDefaultTypeInternal _CSDTTournament_RoundPointsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTTournament::CSDTTournament(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.classes_)*/{}
  , /*decltype(_impl_.rankinfo_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.pointawardget_)*/{}
  , /*decltype(_impl_._pointawardget_cached_byte_size_)*/{0}
  , /*decltype(_impl_.points_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.roundpoints_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.enrollcount_)*/0u
  , /*decltype(_impl_.joincount_)*/0u
  , /*decltype(_impl_.round_)*/uint64_t{0u}
  , /*decltype(_impl_.lastgameid_)*/uint64_t{0u}
  , /*decltype(_impl_.enrollclass_)*/uint64_t{0u}
  , /*decltype(_impl_.enroll_)*/false
  , /*decltype(_impl_.out_)*/false
  , /*decltype(_impl_.battle_)*/false
  , /*decltype(_impl_.challengeagain_)*/false
  , /*decltype(_impl_.groupidx_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTTournamentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTTournamentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTTournamentDefaultTypeInternal() {}
  union {
    CSDTTournament _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTTournamentDefaultTypeInternal _CSDTTournament_default_instance_;
PROTOBUF_CONSTEXPR CSDTActDaySign_SignDayEntry_DoNotUse::CSDTActDaySign_SignDayEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTActDaySign_SignDayEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActDaySign_SignDayEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActDaySign_SignDayEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTActDaySign_SignDayEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActDaySign_SignDayEntry_DoNotUseDefaultTypeInternal _CSDTActDaySign_SignDayEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTActDaySign::CSDTActDaySign(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signday_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.loop_)*/0u
  , /*decltype(_impl_.day_)*/0u
  , /*decltype(_impl_.resigntimes_)*/0u
  , /*decltype(_impl_.cansign_)*/false
  , /*decltype(_impl_.cangetspecialaward_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTActDaySignDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActDaySignDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActDaySignDefaultTypeInternal() {}
  union {
    CSDTActDaySign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActDaySignDefaultTypeInternal _CSDTActDaySign_default_instance_;
PROTOBUF_CONSTEXPR CSDTActDaySignDetail::CSDTActDaySignDetail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTActDaySignDetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTActDaySignDetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTActDaySignDetailDefaultTypeInternal() {}
  union {
    CSDTActDaySignDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTActDaySignDetailDefaultTypeInternal _CSDTActDaySignDetail_default_instance_;
PROTOBUF_CONSTEXPR CSDTGDCommonBin::CSDTGDCommonBin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.md5sum_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.datas_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.conftyp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTGDCommonBinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTGDCommonBinDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTGDCommonBinDefaultTypeInternal() {}
  union {
    CSDTGDCommonBin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTGDCommonBinDefaultTypeInternal _CSDTGDCommonBin_default_instance_;
PROTOBUF_CONSTEXPR CSDTTournamentClass_GroupsEntry_DoNotUse::CSDTTournamentClass_GroupsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTTournamentClass_GroupsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTTournamentClass_GroupsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTTournamentClass_GroupsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTTournamentClass_GroupsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTTournamentClass_GroupsEntry_DoNotUseDefaultTypeInternal _CSDTTournamentClass_GroupsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTTournamentClass::CSDTTournamentClass(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groups_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.classid_)*/uint64_t{0u}
  , /*decltype(_impl_.maxplayercount_)*/0
  , /*decltype(_impl_.cancel_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTTournamentClassDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTTournamentClassDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTTournamentClassDefaultTypeInternal() {}
  union {
    CSDTTournamentClass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTTournamentClassDefaultTypeInternal _CSDTTournamentClass_default_instance_;
PROTOBUF_CONSTEXPR CSDTBattleGroup_PlayersEntry_DoNotUse::CSDTBattleGroup_PlayersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTBattleGroup_PlayersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTBattleGroup_PlayersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTBattleGroup_PlayersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTBattleGroup_PlayersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTBattleGroup_PlayersEntry_DoNotUseDefaultTypeInternal _CSDTBattleGroup_PlayersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTBattleGroup_GameIDsEntry_DoNotUse::CSDTBattleGroup_GameIDsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTBattleGroup_GameIDsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTBattleGroup_GameIDsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTBattleGroup_GameIDsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTBattleGroup_GameIDsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTBattleGroup_GameIDsEntry_DoNotUseDefaultTypeInternal _CSDTBattleGroup_GameIDsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTBattleGroup::CSDTBattleGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.gameids_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.lastpvpendtime_)*/int64_t{0}
  , /*decltype(_impl_.gameid_)*/uint64_t{0u}
  , /*decltype(_impl_.roundid_)*/uint64_t{0u}
  , /*decltype(_impl_.isfighting_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTBattleGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTBattleGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTBattleGroupDefaultTypeInternal() {}
  union {
    CSDTBattleGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTBattleGroupDefaultTypeInternal _CSDTBattleGroup_default_instance_;
PROTOBUF_CONSTEXPR CSDTEnrollEnd::CSDTEnrollEnd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cancelclasses_)*/{}
  , /*decltype(_impl_._cancelclasses_cached_byte_size_)*/{0}
  , /*decltype(_impl_.classgroups_)*/{}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTEnrollEndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTEnrollEndDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTEnrollEndDefaultTypeInternal() {}
  union {
    CSDTEnrollEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTEnrollEndDefaultTypeInternal _CSDTEnrollEnd_default_instance_;
PROTOBUF_CONSTEXPR CSDTNewTournament_ClassesEntry_DoNotUse::CSDTNewTournament_ClassesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTNewTournament_ClassesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTNewTournament_ClassesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTNewTournament_ClassesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTNewTournament_ClassesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTNewTournament_ClassesEntry_DoNotUseDefaultTypeInternal _CSDTNewTournament_ClassesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTNewTournament::CSDTNewTournament(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.classes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTNewTournamentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTNewTournamentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTNewTournamentDefaultTypeInternal() {}
  union {
    CSDTNewTournament _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTNewTournamentDefaultTypeInternal _CSDTNewTournament_default_instance_;
PROTOBUF_CONSTEXPR TournamentDesc::TournamentDesc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tournamentid_)*/uint64_t{0u}
  , /*decltype(_impl_.tnclass_)*/uint64_t{0u}
  , /*decltype(_impl_.tnclassround_)*/uint64_t{0u}
  , /*decltype(_impl_.groupindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TournamentDescDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TournamentDescDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TournamentDescDefaultTypeInternal() {}
  union {
    TournamentDesc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TournamentDescDefaultTypeInternal _TournamentDesc_default_instance_;
PROTOBUF_CONSTEXPR TournamentRoom::TournamentRoom(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.readyids_)*/{}
  , /*decltype(_impl_.playerdatas_)*/{}
  , /*decltype(_impl_.gamestarttime_)*/uint64_t{0u}
  , /*decltype(_impl_.selfslot_)*/0u
  , /*decltype(_impl_.maxplayercount_)*/0
  , /*decltype(_impl_.tournamentid_)*/uint64_t{0u}
  , /*decltype(_impl_.classid_)*/uint64_t{0u}
  , /*decltype(_impl_.roundid_)*/uint64_t{0u}
  , /*decltype(_impl_.groupindex_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TournamentRoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TournamentRoomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TournamentRoomDefaultTypeInternal() {}
  union {
    TournamentRoom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TournamentRoomDefaultTypeInternal _TournamentRoom_default_instance_;
PROTOBUF_CONSTEXPR PlayerTournament_DataEntry_DoNotUse::PlayerTournament_DataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PlayerTournament_DataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerTournament_DataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerTournament_DataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PlayerTournament_DataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerTournament_DataEntry_DoNotUseDefaultTypeInternal _PlayerTournament_DataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PlayerTournament_PointsEntry_DoNotUse::PlayerTournament_PointsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PlayerTournament_PointsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerTournament_PointsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerTournament_PointsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PlayerTournament_PointsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerTournament_PointsEntry_DoNotUseDefaultTypeInternal _PlayerTournament_PointsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PlayerTournament_EnrollCountEntry_DoNotUse::PlayerTournament_EnrollCountEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PlayerTournament_EnrollCountEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerTournament_EnrollCountEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerTournament_EnrollCountEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PlayerTournament_EnrollCountEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerTournament_EnrollCountEntry_DoNotUseDefaultTypeInternal _PlayerTournament_EnrollCountEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PlayerTournament::PlayerTournament(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.points_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.enrollcount_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerTournamentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerTournamentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerTournamentDefaultTypeInternal() {}
  union {
    PlayerTournament _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerTournamentDefaultTypeInternal _PlayerTournament_default_instance_;
PROTOBUF_CONSTEXPR PlayerTournamentData_GetRewardEntry_DoNotUse::PlayerTournamentData_GetRewardEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PlayerTournamentData_GetRewardEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerTournamentData_GetRewardEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerTournamentData_GetRewardEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PlayerTournamentData_GetRewardEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerTournamentData_GetRewardEntry_DoNotUseDefaultTypeInternal _PlayerTournamentData_GetRewardEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PlayerTournamentData_PointsEntry_DoNotUse::PlayerTournamentData_PointsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PlayerTournamentData_PointsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerTournamentData_PointsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerTournamentData_PointsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PlayerTournamentData_PointsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerTournamentData_PointsEntry_DoNotUseDefaultTypeInternal _PlayerTournamentData_PointsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PlayerTournamentData_DataEntry_DoNotUse::PlayerTournamentData_DataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PlayerTournamentData_DataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerTournamentData_DataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerTournamentData_DataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PlayerTournamentData_DataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerTournamentData_DataEntry_DoNotUseDefaultTypeInternal _PlayerTournamentData_DataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PlayerTournamentData::PlayerTournamentData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.getreward_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.points_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.data_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.classid_)*/uint64_t{0u}
  , /*decltype(_impl_.curround_)*/uint64_t{0u}
  , /*decltype(_impl_.gameid_)*/uint64_t{0u}
  , /*decltype(_impl_.signuptime_)*/int64_t{0}
  , /*decltype(_impl_.pvpid_)*/uint64_t{0u}
  , /*decltype(_impl_.pvpendtime_)*/int64_t{0}
  , /*decltype(_impl_.out_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerTournamentDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerTournamentDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerTournamentDataDefaultTypeInternal() {}
  union {
    PlayerTournamentData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerTournamentDataDefaultTypeInternal _PlayerTournamentData_default_instance_;
PROTOBUF_CONSTEXPR RoundData_PointsEntry_DoNotUse::RoundData_PointsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct RoundData_PointsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoundData_PointsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoundData_PointsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RoundData_PointsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoundData_PointsEntry_DoNotUseDefaultTypeInternal _RoundData_PointsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR RoundData::RoundData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.round_)*/uint64_t{0u}
  , /*decltype(_impl_.rank_)*/0u
  , /*decltype(_impl_.fighttimes_)*/0u
  , /*decltype(_impl_.totalrank_)*/0u
  , /*decltype(_impl_.topcnt_)*/0u
  , /*decltype(_impl_.secondcnt_)*/0u
  , /*decltype(_impl_.thirdcnt_)*/0u
  , /*decltype(_impl_.wintimes_)*/0u
  , /*decltype(_impl_.lostblood_)*/0u
  , /*decltype(_impl_.damage_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoundDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoundDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoundDataDefaultTypeInternal() {}
  union {
    RoundData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoundDataDefaultTypeInternal _RoundData_default_instance_;
PROTOBUF_CONSTEXPR GuildBaseInfo::GuildBaseInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_._tags_cached_byte_size_)*/{0}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notice_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recruitnotice_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.owner_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ownername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channelusrid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/0
  , /*decltype(_impl_.requirepermit_)*/false
  , /*decltype(_impl_.requirecup_)*/0
  , /*decltype(_impl_.membercount_)*/0
  , /*decltype(_impl_.province_)*/0u
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.exp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GuildBaseInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuildBaseInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuildBaseInfoDefaultTypeInternal() {}
  union {
    GuildBaseInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuildBaseInfoDefaultTypeInternal _GuildBaseInfo_default_instance_;
PROTOBUF_CONSTEXPR GuildAttr::GuildAttr(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_._tags_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notice_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.recruitnotice_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.owner_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ownername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/0
  , /*decltype(_impl_.requirepermit_)*/0
  , /*decltype(_impl_.requirecup_)*/0
  , /*decltype(_impl_.province_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GuildAttrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuildAttrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuildAttrDefaultTypeInternal() {}
  union {
    GuildAttr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuildAttrDefaultTypeInternal _GuildAttr_default_instance_;
PROTOBUF_CONSTEXPR GuildApplicant::GuildApplicant(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channelusrid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ts_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GuildApplicantDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuildApplicantDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuildApplicantDefaultTypeInternal() {}
  union {
    GuildApplicant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuildApplicantDefaultTypeInternal _GuildApplicant_default_instance_;
PROTOBUF_CONSTEXPR GuildMember::GuildMember(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.role_)*/0
  , /*decltype(_impl_.activescore_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GuildMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuildMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuildMemberDefaultTypeInternal() {}
  union {
    GuildMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuildMemberDefaultTypeInternal _GuildMember_default_instance_;
PROTOBUF_CONSTEXPR GuildExtraInfo::GuildExtraInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.logs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GuildExtraInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuildExtraInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuildExtraInfoDefaultTypeInternal() {}
  union {
    GuildExtraInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuildExtraInfoDefaultTypeInternal _GuildExtraInfo_default_instance_;
PROTOBUF_CONSTEXPR GuildChatInfo::GuildChatInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.emotion_)*/0u
  , /*decltype(_impl_.needlocalize_)*/false
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.sourcetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GuildChatInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuildChatInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuildChatInfoDefaultTypeInternal() {}
  union {
    GuildChatInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuildChatInfoDefaultTypeInternal _GuildChatInfo_default_instance_;
PROTOBUF_CONSTEXPR GuildLog_ParaEntry_DoNotUse::GuildLog_ParaEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GuildLog_ParaEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuildLog_ParaEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuildLog_ParaEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GuildLog_ParaEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuildLog_ParaEntry_DoNotUseDefaultTypeInternal _GuildLog_ParaEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GuildLog::GuildLog(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.para_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ts_)*/int64_t{0}
  , /*decltype(_impl_.ps4only_)*/false
  , /*decltype(_impl_.ps_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GuildLogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuildLogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuildLogDefaultTypeInternal() {}
  union {
    GuildLog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuildLogDefaultTypeInternal _GuildLog_default_instance_;
PROTOBUF_CONSTEXPR GuildApplyInfo::GuildApplyInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.ts_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GuildApplyInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuildApplyInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuildApplyInfoDefaultTypeInternal() {}
  union {
    GuildApplyInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuildApplyInfoDefaultTypeInternal _GuildApplyInfo_default_instance_;
PROTOBUF_CONSTEXPR GuildPlayerRole::GuildPlayerRole(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.role_)*/0
  , /*decltype(_impl_.active_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GuildPlayerRoleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GuildPlayerRoleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GuildPlayerRoleDefaultTypeInternal() {}
  union {
    GuildPlayerRole _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GuildPlayerRoleDefaultTypeInternal _GuildPlayerRole_default_instance_;
PROTOBUF_CONSTEXPR ChestRecord::ChestRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.awards_)*/{}
  , /*decltype(_impl_._awards_cached_byte_size_)*/{0}
  , /*decltype(_impl_.round_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChestRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChestRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChestRecordDefaultTypeInternal() {}
  union {
    ChestRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChestRecordDefaultTypeInternal _ChestRecord_default_instance_;
PROTOBUF_CONSTEXPR TeamDesc::TeamDesc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groupdesc_)*/nullptr
  , /*decltype(_impl_.teamid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TeamDescDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeamDescDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeamDescDefaultTypeInternal() {}
  union {
    TeamDesc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeamDescDefaultTypeInternal _TeamDesc_default_instance_;
PROTOBUF_CONSTEXPR CSDTTaskItem::CSDTTaskItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.progress_)*/0u
  , /*decltype(_impl_.getaward_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTTaskItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTTaskItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTTaskItemDefaultTypeInternal() {}
  union {
    CSDTTaskItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTTaskItemDefaultTypeInternal _CSDTTaskItem_default_instance_;
PROTOBUF_CONSTEXPR OssPlayerData::OssPlayerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.invitecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OssPlayerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OssPlayerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OssPlayerDataDefaultTypeInternal() {}
  union {
    OssPlayerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OssPlayerDataDefaultTypeInternal _OssPlayerData_default_instance_;
PROTOBUF_CONSTEXPR BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse::BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct BattleExtData_PlayersBetCurrencyNumEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BattleExtData_PlayersBetCurrencyNumEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BattleExtData_PlayersBetCurrencyNumEntry_DoNotUseDefaultTypeInternal() {}
  union {
    BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BattleExtData_PlayersBetCurrencyNumEntry_DoNotUseDefaultTypeInternal _BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR BattleExtData::BattleExtData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rankrewardlist_)*/{}
  , /*decltype(_impl_._rankrewardlist_cached_byte_size_)*/{0}
  , /*decltype(_impl_.playersbetcurrencynum_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.chesslist_)*/{}
  , /*decltype(_impl_.authorid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mapkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ticketid_)*/0
  , /*decltype(_impl_.ticketnum_)*/0
  , /*decltype(_impl_.mapid_)*/0u
  , /*decltype(_impl_.submapid_)*/0u
  , /*decltype(_impl_.currencynum_)*/0
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.bountybasecurrencynum_)*/0
  , /*decltype(_impl_.syspercent_)*/0
  , /*decltype(_impl_.sysdrawauthorpercent_)*/0
  , /*decltype(_impl_.authorpercent_)*/0
  , /*decltype(_impl_.customcardflag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BattleExtDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BattleExtDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BattleExtDataDefaultTypeInternal() {}
  union {
    BattleExtData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BattleExtDataDefaultTypeInternal _BattleExtData_default_instance_;
PROTOBUF_CONSTEXPR PvpExtData::PvpExtData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pvedebuff_)*/{}
  , /*decltype(_impl_._pvedebuff_cached_byte_size_)*/{0}
  , /*decltype(_impl_.mapkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.captain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bigwinner_)*/nullptr
  , /*decltype(_impl_.submode_)*/0u
  , /*decltype(_impl_.pvpchestviplevel_)*/0u
  , /*decltype(_impl_.iscardgroup_)*/false
  , /*decltype(_impl_.tdstage_)*/0
  , /*decltype(_impl_.pvechallengemode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PvpExtDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PvpExtDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PvpExtDataDefaultTypeInternal() {}
  union {
    PvpExtData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PvpExtDataDefaultTypeInternal _PvpExtData_default_instance_;
PROTOBUF_CONSTEXPR PlayerExtMap_AssistantMapEntry_DoNotUse::PlayerExtMap_AssistantMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PlayerExtMap_AssistantMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerExtMap_AssistantMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerExtMap_AssistantMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PlayerExtMap_AssistantMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerExtMap_AssistantMapEntry_DoNotUseDefaultTypeInternal _PlayerExtMap_AssistantMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PlayerExtMap_BattleTimeMapEntry_DoNotUse::PlayerExtMap_BattleTimeMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PlayerExtMap_BattleTimeMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerExtMap_BattleTimeMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerExtMap_BattleTimeMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PlayerExtMap_BattleTimeMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerExtMap_BattleTimeMapEntry_DoNotUseDefaultTypeInternal _PlayerExtMap_BattleTimeMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PlayerExtMap_PveBuffEntry_DoNotUse::PlayerExtMap_PveBuffEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PlayerExtMap_PveBuffEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerExtMap_PveBuffEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerExtMap_PveBuffEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PlayerExtMap_PveBuffEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerExtMap_PveBuffEntry_DoNotUseDefaultTypeInternal _PlayerExtMap_PveBuffEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PlayerExtMap_MsRelationEntry_DoNotUse::PlayerExtMap_MsRelationEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PlayerExtMap_MsRelationEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerExtMap_MsRelationEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerExtMap_MsRelationEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PlayerExtMap_MsRelationEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerExtMap_MsRelationEntry_DoNotUseDefaultTypeInternal _PlayerExtMap_MsRelationEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PlayerExtMap_PvpPlayerGroupEntry_DoNotUse::PlayerExtMap_PvpPlayerGroupEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PlayerExtMap_PvpPlayerGroupEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerExtMap_PvpPlayerGroupEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerExtMap_PvpPlayerGroupEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PlayerExtMap_PvpPlayerGroupEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerExtMap_PvpPlayerGroupEntry_DoNotUseDefaultTypeInternal _PlayerExtMap_PvpPlayerGroupEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PlayerExtMap::PlayerExtMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.assistantmap_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.battletimemap_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.pvebuff_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.msrelation_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.pvpplayergroup_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerExtMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerExtMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerExtMapDefaultTypeInternal() {}
  union {
    PlayerExtMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerExtMapDefaultTypeInternal _PlayerExtMap_default_instance_;
PROTOBUF_CONSTEXPR Buffs::Buffs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._data_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BuffsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuffsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuffsDefaultTypeInternal() {}
  union {
    Buffs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuffsDefaultTypeInternal _Buffs_default_instance_;
PROTOBUF_CONSTEXPR ActivityGroup::ActivityGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.activities_)*/{}
  , /*decltype(_impl_.group_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActivityGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActivityGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActivityGroupDefaultTypeInternal() {}
  union {
    ActivityGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActivityGroupDefaultTypeInternal _ActivityGroup_default_instance_;
PROTOBUF_CONSTEXPR ScoredMap::ScoredMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mapid_)*/0u
  , /*decltype(_impl_.islike_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScoredMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScoredMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScoredMapDefaultTypeInternal() {}
  union {
    ScoredMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScoredMapDefaultTypeInternal _ScoredMap_default_instance_;
PROTOBUF_CONSTEXPR TransferEvent::TransferEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payee_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.redhsetfield_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.etype_)*/0
  , /*decltype(_impl_.tokenid_)*/0
  , /*decltype(_impl_.tokencount_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransferEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransferEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransferEventDefaultTypeInternal() {}
  union {
    TransferEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransferEventDefaultTypeInternal _TransferEvent_default_instance_;
PROTOBUF_CONSTEXPR TransferOP::TransferOP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payeeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tokenid_)*/0u
  , /*decltype(_impl_.change_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransferOPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransferOPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransferOPDefaultTypeInternal() {}
  union {
    TransferOP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransferOPDefaultTypeInternal _TransferOP_default_instance_;
PROTOBUF_CONSTEXPR CSDTBetData_BetFromPlayersEntry_DoNotUse::CSDTBetData_BetFromPlayersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSDTBetData_BetFromPlayersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTBetData_BetFromPlayersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTBetData_BetFromPlayersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSDTBetData_BetFromPlayersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTBetData_BetFromPlayersEntry_DoNotUseDefaultTypeInternal _CSDTBetData_BetFromPlayersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSDTBetData::CSDTBetData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.betfromplayers_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.authorid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.betfromauthor_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTBetDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTBetDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTBetDataDefaultTypeInternal() {}
  union {
    CSDTBetData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTBetDataDefaultTypeInternal _CSDTBetData_default_instance_;
PROTOBUF_CONSTEXPR MailExtData::MailExtData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MailExtDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MailExtDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MailExtDataDefaultTypeInternal() {}
  union {
    MailExtData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MailExtDataDefaultTypeInternal _MailExtData_default_instance_;
PROTOBUF_CONSTEXPR ExtItem::ExtItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.para_)*/{}
  , /*decltype(_impl_._para_cached_byte_size_)*/{0}
  , /*decltype(_impl_.instanceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_.weight_)*/0
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_.sourceidx_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtItemDefaultTypeInternal() {}
  union {
    ExtItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtItemDefaultTypeInternal _ExtItem_default_instance_;
PROTOBUF_CONSTEXPR CSDTTasks::CSDTTasks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trophy_)*/{}
  , /*decltype(_impl_.achieve_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTTasksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTTasksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTTasksDefaultTypeInternal() {}
  union {
    CSDTTasks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTTasksDefaultTypeInternal _CSDTTasks_default_instance_;
PROTOBUF_CONSTEXPR PvpTeachResult::PvpTeachResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.passid_)*/0u
  , /*decltype(_impl_.win_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PvpTeachResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PvpTeachResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PvpTeachResultDefaultTypeInternal() {}
  union {
    PvpTeachResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PvpTeachResultDefaultTypeInternal _PvpTeachResult_default_instance_;
PROTOBUF_CONSTEXPR PvpBigWinnerData::PvpBigWinnerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rankrewardlist_)*/{}
  , /*decltype(_impl_._rankrewardlist_cached_byte_size_)*/{0}
  , /*decltype(_impl_.configname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.mapid_)*/0u
  , /*decltype(_impl_.syspercent_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PvpBigWinnerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PvpBigWinnerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PvpBigWinnerDataDefaultTypeInternal() {}
  union {
    PvpBigWinnerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PvpBigWinnerDataDefaultTypeInternal _PvpBigWinnerData_default_instance_;
PROTOBUF_CONSTEXPR PveExData_TalentEntry_DoNotUse::PveExData_TalentEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PveExData_TalentEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PveExData_TalentEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PveExData_TalentEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PveExData_TalentEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PveExData_TalentEntry_DoNotUseDefaultTypeInternal _PveExData_TalentEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PveExData::PveExData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.talent_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PveExDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PveExDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PveExDataDefaultTypeInternal() {}
  union {
    PveExData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PveExDataDefaultTypeInternal _PveExData_default_instance_;
PROTOBUF_CONSTEXPR ChampionInfo::ChampionInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.zone_)*/0u
  , /*decltype(_impl_.period_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChampionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChampionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChampionInfoDefaultTypeInternal() {}
  union {
    ChampionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChampionInfoDefaultTypeInternal _ChampionInfo_default_instance_;
PROTOBUF_CONSTEXPR TopRank::TopRank(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rank_)*/{}
  , /*decltype(_impl_.zone_)*/0u
  , /*decltype(_impl_.period_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TopRankDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopRankDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TopRankDefaultTypeInternal() {}
  union {
    TopRank _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopRankDefaultTypeInternal _TopRank_default_instance_;
PROTOBUF_CONSTEXPR ChampionInfoList::ChampionInfoList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChampionInfoListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChampionInfoListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChampionInfoListDefaultTypeInternal() {}
  union {
    ChampionInfoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChampionInfoListDefaultTypeInternal _ChampionInfoList_default_instance_;
PROTOBUF_CONSTEXPR TournamentHistory_ChampionHistoryEntry_DoNotUse::TournamentHistory_ChampionHistoryEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TournamentHistory_ChampionHistoryEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TournamentHistory_ChampionHistoryEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TournamentHistory_ChampionHistoryEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TournamentHistory_ChampionHistoryEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TournamentHistory_ChampionHistoryEntry_DoNotUseDefaultTypeInternal _TournamentHistory_ChampionHistoryEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TournamentHistory_TopRankHistoryEntry_DoNotUse::TournamentHistory_TopRankHistoryEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TournamentHistory_TopRankHistoryEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TournamentHistory_TopRankHistoryEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TournamentHistory_TopRankHistoryEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TournamentHistory_TopRankHistoryEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TournamentHistory_TopRankHistoryEntry_DoNotUseDefaultTypeInternal _TournamentHistory_TopRankHistoryEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TournamentHistory::TournamentHistory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.championhistory_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.toprankhistory_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TournamentHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TournamentHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TournamentHistoryDefaultTypeInternal() {}
  union {
    TournamentHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TournamentHistoryDefaultTypeInternal _TournamentHistory_default_instance_;
PROTOBUF_CONSTEXPR CSReqLogin_AuthSDKCodeEntry_DoNotUse::CSReqLogin_AuthSDKCodeEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSReqLogin_AuthSDKCodeEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqLogin_AuthSDKCodeEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqLogin_AuthSDKCodeEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSReqLogin_AuthSDKCodeEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqLogin_AuthSDKCodeEntry_DoNotUseDefaultTypeInternal _CSReqLogin_AuthSDKCodeEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSReqLogin::CSReqLogin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.authsdkcode_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.psblockedusers_)*/{}
  , /*decltype(_impl_.deviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.osversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.devicetype_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lysdkdeviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channelid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.packageid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.apkversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resolution_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sessionid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channeluserid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pvpresourceversion_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.activecode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.picurl_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fengkongdeviceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gamelanguage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.advertisingid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.platformtype_)*/0
  , /*decltype(_impl_.nettype_)*/0
  , /*decltype(_impl_.logintype_)*/0
  , /*decltype(_impl_.channeltype_)*/0
  , /*decltype(_impl_.paychannel_)*/0
  , /*decltype(_impl_.launchtype_)*/0
  , /*decltype(_impl_.gamelibversion_)*/int64_t{0}
  , /*decltype(_impl_.loginsource_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSReqLoginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSReqLoginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSReqLoginDefaultTypeInternal() {}
  union {
    CSReqLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSReqLoginDefaultTypeInternal _CSReqLogin_default_instance_;
PROTOBUF_CONSTEXPR Loc::Loc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0u
  , /*decltype(_impl_.y_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocDefaultTypeInternal() {}
  union {
    Loc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocDefaultTypeInternal _Loc_default_instance_;
PROTOBUF_CONSTEXPR Authority::Authority(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mark_)*/false
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AuthorityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthorityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthorityDefaultTypeInternal() {}
  union {
    Authority _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthorityDefaultTypeInternal _Authority_default_instance_;
PROTOBUF_CONSTEXPR GetNumRank::GetNumRank(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targetplayer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tournamentid_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.selfrank_)*/false
  , /*decltype(_impl_.classid_)*/uint64_t{0u}
  , /*decltype(_impl_.roundid_)*/uint64_t{0u}
  , /*decltype(_impl_.groupindex_)*/0u
  , /*decltype(_impl_.channeltype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetNumRankDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetNumRankDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetNumRankDefaultTypeInternal() {}
  union {
    GetNumRank _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetNumRankDefaultTypeInternal _GetNumRank_default_instance_;
PROTOBUF_CONSTEXPR CSDTPassportCard::CSDTPassportCard(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.typeidlist_)*/{}
  , /*decltype(_impl_._typeidlist_cached_byte_size_)*/{0}
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPassportCardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPassportCardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPassportCardDefaultTypeInternal() {}
  union {
    CSDTPassportCard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPassportCardDefaultTypeInternal _CSDTPassportCard_default_instance_;
PROTOBUF_CONSTEXPR PveDataInfo_DataEntry_DoNotUse::PveDataInfo_DataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PveDataInfo_DataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PveDataInfo_DataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PveDataInfo_DataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PveDataInfo_DataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PveDataInfo_DataEntry_DoNotUseDefaultTypeInternal _PveDataInfo_DataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PveDataInfo::PveDataInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PveDataInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PveDataInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PveDataInfoDefaultTypeInternal() {}
  union {
    PveDataInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PveDataInfoDefaultTypeInternal _PveDataInfo_default_instance_;
PROTOBUF_CONSTEXPR Pve_ChessIdsEntry_DoNotUse::Pve_ChessIdsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Pve_ChessIdsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Pve_ChessIdsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Pve_ChessIdsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Pve_ChessIdsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Pve_ChessIdsEntry_DoNotUseDefaultTypeInternal _Pve_ChessIdsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Pve_SkillsEntry_DoNotUse::Pve_SkillsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Pve_SkillsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Pve_SkillsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Pve_SkillsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Pve_SkillsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Pve_SkillsEntry_DoNotUseDefaultTypeInternal _Pve_SkillsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Pve_BuffEntry_DoNotUse::Pve_BuffEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Pve_BuffEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Pve_BuffEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Pve_BuffEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Pve_BuffEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Pve_BuffEntry_DoNotUseDefaultTypeInternal _Pve_BuffEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Pve::Pve(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chessids_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.skills_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.buff_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.teamname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.score_)*/0u
  , /*decltype(_impl_.rankscore_)*/0u
  , /*decltype(_impl_.unlock_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PveDefaultTypeInternal() {}
  union {
    Pve _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PveDefaultTypeInternal _Pve_default_instance_;
PROTOBUF_CONSTEXPR PveBuff::PveBuff(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.etime_)*/int64_t{0}
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PveBuffDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PveBuffDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PveBuffDefaultTypeInternal() {}
  union {
    PveBuff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PveBuffDefaultTypeInternal _PveBuff_default_instance_;
PROTOBUF_CONSTEXPR CardGroupData::CardGroupData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chessids_)*/{}
  , /*decltype(_impl_.removechessids_)*/{}
  , /*decltype(_impl_._removechessids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.autoaddcardtimes_)*/0u
  , /*decltype(_impl_.isautoaddcardkernel_)*/false
  , /*decltype(_impl_.flag_)*/false
  , /*decltype(_impl_.kernelflag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CardGroupDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CardGroupDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CardGroupDataDefaultTypeInternal() {}
  union {
    CardGroupData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CardGroupDataDefaultTypeInternal _CardGroupData_default_instance_;
PROTOBUF_CONSTEXPR CardGroupChess::CardGroupChess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ctime_)*/int64_t{0}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CardGroupChessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CardGroupChessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CardGroupChessDefaultTypeInternal() {}
  union {
    CardGroupChess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CardGroupChessDefaultTypeInternal _CardGroupChess_default_instance_;
PROTOBUF_CONSTEXPR ChessIds::ChessIds(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChessIdsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChessIdsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChessIdsDefaultTypeInternal() {}
  union {
    ChessIds _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChessIdsDefaultTypeInternal _ChessIds_default_instance_;
PROTOBUF_CONSTEXPR PveConsume::PveConsume(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PveConsumeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PveConsumeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PveConsumeDefaultTypeInternal() {}
  union {
    PveConsume _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PveConsumeDefaultTypeInternal _PveConsume_default_instance_;
PROTOBUF_CONSTEXPR PveSetting::PveSetting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.debuffids_)*/{}
  , /*decltype(_impl_._debuffids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PveSettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PveSettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PveSettingDefaultTypeInternal() {}
  union {
    PveSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PveSettingDefaultTypeInternal _PveSetting_default_instance_;
PROTOBUF_CONSTEXPR PlayerTeamInfo::PlayerTeamInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mapkey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerTeamInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerTeamInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerTeamInfoDefaultTypeInternal() {}
  union {
    PlayerTeamInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerTeamInfoDefaultTypeInternal _PlayerTeamInfo_default_instance_;
PROTOBUF_CONSTEXPR PveRankRedisInfo::PveRankRedisInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.caption_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.teamname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PveRankRedisInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PveRankRedisInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PveRankRedisInfoDefaultTypeInternal() {}
  union {
    PveRankRedisInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PveRankRedisInfoDefaultTypeInternal _PveRankRedisInfo_default_instance_;
PROTOBUF_CONSTEXPR CSDTPlayerPvpData::CSDTPlayerPvpData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pve_)*/nullptr
  , /*decltype(_impl_.cardgroup_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTPlayerPvpDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTPlayerPvpDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTPlayerPvpDataDefaultTypeInternal() {}
  union {
    CSDTPlayerPvpData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTPlayerPvpDataDefaultTypeInternal _CSDTPlayerPvpData_default_instance_;
PROTOBUF_CONSTEXPR GmBan::GmBan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.starttime_)*/int64_t{0}
  , /*decltype(_impl_.endtime_)*/int64_t{0}
  , /*decltype(_impl_.ftype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GmBanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GmBanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GmBanDefaultTypeInternal() {}
  union {
    GmBan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GmBanDefaultTypeInternal _GmBan_default_instance_;
PROTOBUF_CONSTEXPR MentorInviteMsg::MentorInviteMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.completetask_)*/{}
  , /*decltype(_impl_._completetask_cached_byte_size_)*/{0}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ctime_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MentorInviteMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MentorInviteMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MentorInviteMsgDefaultTypeInternal() {}
  union {
    MentorInviteMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MentorInviteMsgDefaultTypeInternal _MentorInviteMsg_default_instance_;
PROTOBUF_CONSTEXPR MentorInfo_TasksEntry_DoNotUse::MentorInfo_TasksEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct MentorInfo_TasksEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MentorInfo_TasksEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MentorInfo_TasksEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MentorInfo_TasksEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MentorInfo_TasksEntry_DoNotUseDefaultTypeInternal _MentorInfo_TasksEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR MentorInfo::MentorInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pupils_)*/{}
  , /*decltype(_impl_.punishtime_)*/{}
  , /*decltype(_impl_._punishtime_cached_byte_size_)*/{0}
  , /*decltype(_impl_.tasks_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.invitetimes_)*/0u
  , /*decltype(_impl_.graduatenum_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MentorInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MentorInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MentorInfoDefaultTypeInternal() {}
  union {
    MentorInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MentorInfoDefaultTypeInternal _MentorInfo_default_instance_;
PROTOBUF_CONSTEXPR Pupil_TasksEntry_DoNotUse::Pupil_TasksEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Pupil_TasksEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Pupil_TasksEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Pupil_TasksEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Pupil_TasksEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Pupil_TasksEntry_DoNotUseDefaultTypeInternal _Pupil_TasksEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Pupil::Pupil(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tasks_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.graduatetime_)*/int64_t{0}
  , /*decltype(_impl_.applygraduatetime_)*/int64_t{0}
  , /*decltype(_impl_.intimacy_)*/int64_t{0}
  , /*decltype(_impl_.stat_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PupilDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PupilDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PupilDefaultTypeInternal() {}
  union {
    Pupil _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PupilDefaultTypeInternal _Pupil_default_instance_;
PROTOBUF_CONSTEXPR TDUnUse::TDUnUse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id1_)*/nullptr
  , /*decltype(_impl_.id2_)*/nullptr
  , /*decltype(_impl_.id3_)*/nullptr
  , /*decltype(_impl_.itemgroup1_)*/nullptr
  , /*decltype(_impl_.itemgroup2_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDUnUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDUnUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDUnUseDefaultTypeInternal() {}
  union {
    TDUnUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDUnUseDefaultTypeInternal _TDUnUse_default_instance_;
PROTOBUF_CONSTEXPR TDItemId::TDItemId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDItemIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDItemIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDItemIdDefaultTypeInternal() {}
  union {
    TDItemId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDItemIdDefaultTypeInternal _TDItemId_default_instance_;
PROTOBUF_CONSTEXPR TDItem_EquipmentsEntry_DoNotUse::TDItem_EquipmentsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TDItem_EquipmentsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDItem_EquipmentsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDItem_EquipmentsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TDItem_EquipmentsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDItem_EquipmentsEntry_DoNotUseDefaultTypeInternal _TDItem_EquipmentsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TDItem::TDItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.equipments_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.talentlevel_)*/0
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TDItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDItemDefaultTypeInternal() {}
  union {
    TDItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDItemDefaultTypeInternal _TDItem_default_instance_;
PROTOBUF_CONSTEXPR AddRecommendData::AddRecommendData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mmr_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddRecommendDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddRecommendDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddRecommendDataDefaultTypeInternal() {}
  union {
    AddRecommendData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddRecommendDataDefaultTypeInternal _AddRecommendData_default_instance_;
PROTOBUF_CONSTEXPR PlayerMentorShipInfo_TasksEntry_DoNotUse::PlayerMentorShipInfo_TasksEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct PlayerMentorShipInfo_TasksEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerMentorShipInfo_TasksEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerMentorShipInfo_TasksEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PlayerMentorShipInfo_TasksEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerMentorShipInfo_TasksEntry_DoNotUseDefaultTypeInternal _PlayerMentorShipInfo_TasksEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PlayerMentorShipInfo::PlayerMentorShipInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tasks_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.mentorid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ismentor_)*/false
  , /*decltype(_impl_.inviteswitch_)*/false
  , /*decltype(_impl_.isgraduate_)*/false
  , /*decltype(_impl_.tag_)*/0u
  , /*decltype(_impl_.punishtime_)*/int64_t{0}
  , /*decltype(_impl_.invitetimes_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerMentorShipInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerMentorShipInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerMentorShipInfoDefaultTypeInternal() {}
  union {
    PlayerMentorShipInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerMentorShipInfoDefaultTypeInternal _PlayerMentorShipInfo_default_instance_;
PROTOBUF_CONSTEXPR CSDTMentorRecommendPlayer::CSDTMentorRecommendPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTMentorRecommendPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTMentorRecommendPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTMentorRecommendPlayerDefaultTypeInternal() {}
  union {
    CSDTMentorRecommendPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTMentorRecommendPlayerDefaultTypeInternal _CSDTMentorRecommendPlayer_default_instance_;
PROTOBUF_CONSTEXPR PFDTTaskDetail::PFDTTaskDetail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.para_)*/{}
  , /*decltype(_impl_._para_cached_byte_size_)*/{0}
  , /*decltype(_impl_.mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.condtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PFDTTaskDetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PFDTTaskDetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PFDTTaskDetailDefaultTypeInternal() {}
  union {
    PFDTTaskDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PFDTTaskDetailDefaultTypeInternal _PFDTTaskDetail_default_instance_;
PROTOBUF_CONSTEXPR CSDTMentorInfo::CSDTMentorInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSDTMentorInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSDTMentorInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSDTMentorInfoDefaultTypeInternal() {}
  union {
    CSDTMentorInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSDTMentorInfoDefaultTypeInternal _CSDTMentorInfo_default_instance_;
PROTOBUF_CONSTEXPR OBPassThroughData::OBPassThroughData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pvpplayerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.obplayerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.round_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OBPassThroughDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OBPassThroughDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OBPassThroughDataDefaultTypeInternal() {}
  union {
    OBPassThroughData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OBPassThroughDataDefaultTypeInternal _OBPassThroughData_default_instance_;
PROTOBUF_CONSTEXPR HistoryMaxCupMmr::HistoryMaxCupMmr(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_.mmr_)*/0u
  , /*decltype(_impl_.period_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HistoryMaxCupMmrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistoryMaxCupMmrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistoryMaxCupMmrDefaultTypeInternal() {}
  union {
    HistoryMaxCupMmr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistoryMaxCupMmrDefaultTypeInternal _HistoryMaxCupMmr_default_instance_;
PROTOBUF_CONSTEXPR CSNtfPvpChat_ShowItemsEntry_DoNotUse::CSNtfPvpChat_ShowItemsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CSNtfPvpChat_ShowItemsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfPvpChat_ShowItemsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfPvpChat_ShowItemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CSNtfPvpChat_ShowItemsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfPvpChat_ShowItemsEntry_DoNotUseDefaultTypeInternal _CSNtfPvpChat_ShowItemsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CSNtfPvpChat::CSNtfPvpChat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.showitems_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.passporttypeids_)*/{}
  , /*decltype(_impl_._passporttypeids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channelusrid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guildname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.emotion_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.chattype_)*/0
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.quickchat_)*/0
  , /*decltype(_impl_.headpic_)*/0u
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.province_)*/0u
  , /*decltype(_impl_.platform_)*/0
  , /*decltype(_impl_.iswatcher_)*/false
  , /*decltype(_impl_.ps4only_)*/false
  , /*decltype(_impl_.channeltype_)*/0
  , /*decltype(_impl_.restricttype_)*/0
  , /*decltype(_impl_.guildsign_)*/0
  , /*decltype(_impl_.sourcetype_)*/0
  , /*decltype(_impl_.exchangestate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSNtfPvpChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSNtfPvpChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSNtfPvpChatDefaultTypeInternal() {}
  union {
    CSNtfPvpChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSNtfPvpChatDefaultTypeInternal _CSNtfPvpChat_default_instance_;
PROTOBUF_CONSTEXPR PlayerObServerInfo::PlayerObServerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.obplayerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pvpid_)*/uint64_t{0u}
  , /*decltype(_impl_.obsvrid_)*/0u
  , /*decltype(_impl_.pvpsvrid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerObServerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerObServerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerObServerInfoDefaultTypeInternal() {}
  union {
    PlayerObServerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerObServerInfoDefaultTypeInternal _PlayerObServerInfo_default_instance_;
}  // namespace msg
static ::_pb::Metadata file_level_metadata_common_2eproto[322];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_common_2eproto[108];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const uint32_t TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::BountySetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::BountySetting, _impl_.currencyid_),
  PROTOBUF_FIELD_OFFSET(::msg::BountySetting, _impl_.currencymin_),
  PROTOBUF_FIELD_OFFSET(::msg::BountySetting, _impl_.currencymax_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSetting, _impl_.pwd_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSetting, _impl_.pwdopen_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSetting, _impl_.visible_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSetting, _impl_.inviteauthority_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSetting, _impl_.teamtype_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSetting, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSetting, _impl_.submode_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSetting, _impl_.lockgroups_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSetting, _impl_.customgameid_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSetting, _impl_.workshop_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSetting, _impl_.bounty_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSetting, _impl_.channelusrid_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSetting, _impl_.pvesetting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::WorkshopSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::WorkshopSetting, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::msg::WorkshopSetting, _impl_.submapid_),
  PROTOBUF_FIELD_OFFSET(::msg::WorkshopSetting, _impl_.mapname_),
  PROTOBUF_FIELD_OFFSET(::msg::WorkshopSetting, _impl_.joinaiswitch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPChangeGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPChangeGroup, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPChangeGroup, _impl_.groupid_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPChangeGroup, _impl_.slot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSelfChangeGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSelfChangeGroup, _impl_.groupid_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSelfChangeGroup, _impl_.slot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPAppointLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPAppointLeader, _impl_.pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPChangeName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPChangeName, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSwitchSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSwitchSlot, _impl_.groupone_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSwitchSlot, _impl_.grouptwo_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSwitchSlot, _impl_.playerone_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSwitchSlot, _impl_.playertwo_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSwitchSlot, _impl_.slotone_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOPSwitchSlot, _impl_.slottwo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TeamBetOnBounty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TeamBetOnBounty, _impl_.num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TeamOP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TeamOP, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOP, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOP, _impl_.setting_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOP, _impl_.changegroup_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOP, _impl_.appointleader_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOP, _impl_.selfchangegroup_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOP, _impl_.changename_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOP, _impl_.switchslot_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamOP, _impl_.betonbounty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TeamBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TeamBaseInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamBaseInfo, _impl_.teamid_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamBaseInfo, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamBaseInfo, _impl_.competotpernum_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamBaseInfo, _impl_.competotpertotalnum_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamBaseInfo, _impl_.haspwd_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamBaseInfo, _impl_.submode_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamBaseInfo, _impl_.wssetting_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamBaseInfo, _impl_.bounty_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamBaseInfo, _impl_.bountytotal_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamBaseInfo, _impl_.channelusrid_),
  PROTOBUF_FIELD_OFFSET(::msg::Award_AffixsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::Award_AffixsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Award_AffixsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::Award_AffixsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Award, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Award, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::Award, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::msg::Award, _impl_.para_),
  PROTOBUF_FIELD_OFFSET(::msg::Award, _impl_.instanceid_),
  PROTOBUF_FIELD_OFFSET(::msg::Award, _impl_.weight_),
  PROTOBUF_FIELD_OFFSET(::msg::Award, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::msg::Award, _impl_.sourceidx_),
  PROTOBUF_FIELD_OFFSET(::msg::Award, _impl_.survivetime_),
  PROTOBUF_FIELD_OFFSET(::msg::Award, _impl_.medal_),
  PROTOBUF_FIELD_OFFSET(::msg::Award, _impl_.number_),
  PROTOBUF_FIELD_OFFSET(::msg::Award, _impl_.abrasion_),
  PROTOBUF_FIELD_OFFSET(::msg::Award, _impl_.affixs_),
  PROTOBUF_FIELD_OFFSET(::msg::Award, _impl_.identified_),
  PROTOBUF_FIELD_OFFSET(::msg::Award, _impl_.textureid_),
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData_ChessSkinDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData_ChessSkinDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData_ChessSkinDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData_ChessSkinDataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData_ShowItemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData_ShowItemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData_ShowItemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData_ShowItemsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData_SkinDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData_SkinDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData_SkinDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData_SkinDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData, _impl_.passporttype_),
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData, _impl_.chessplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData, _impl_.sceneid_),
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData, _impl_.chessskindata_),
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData, _impl_.headpic_),
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData, _impl_.showitems_),
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData, _impl_.emotionlist_),
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData, _impl_.pve_),
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData, _impl_.skindata_),
  PROTOBUF_FIELD_OFFSET(::msg::UpdatePlayerData, _impl_.cardgroupdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::SkipType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::SkipType, _impl_.skip_),
  PROTOBUF_FIELD_OFFSET(::msg::SkipType, _impl_.tap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::BuffEffect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::BuffEffect, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::BuffEffect, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Consume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Consume, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::Consume, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::msg::Consume, _impl_.para_),
  PROTOBUF_FIELD_OFFSET(::msg::Consume, _impl_.instanceid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItem_AffixsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItem_AffixsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItem_AffixsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItem_AffixsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItem, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItem, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItem, _impl_.instanceid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItem, _impl_.para_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItem, _impl_.survivetime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItem, _impl_.medal_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItem, _impl_.createtime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItem, _impl_.gettime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItem, _impl_.number_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItem, _impl_.abrasion_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItem, _impl_.affixs_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItem, _impl_.identified_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItem, _impl_.textureid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ItemAffix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ItemAffix, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::ItemAffix, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::msg::ItemAffix, _impl_.sourceitemid_),
  PROTOBUF_FIELD_OFFSET(::msg::ItemAffix, _impl_.sourceitemtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItemMedal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItemMedal, _impl_.createtime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItemMedal, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItemMedal, _impl_.number_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItemMedal, _impl_.seasonid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItemID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItemID, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItemID, _impl_.instanceid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItemID, _impl_.ismedal_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItemID, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTItemID, _impl_.abrasion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBagPara, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBagPara, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBagPara, _impl_.subsource_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBagPara, _impl_.triggerevent_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBagPara, _impl_.newget_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBagPara, _impl_.orderid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBagPara, _impl_.addtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBagItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBagItem, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBagItem, _impl_.para_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerStatusInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerStatusInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerStatusInfo, _impl_.playerstatus_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerStatusInfo, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerStatusInfo, _impl_.apkversion_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerStatusInfo, _impl_.platformtype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerStatusInfo, _impl_.hallserverid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerStatusInfo, _impl_.friendinvisible_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerStatusInfo, _impl_.observepvpid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerStatusInfo, _impl_.observepvpmod_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerStatusInfo, _impl_.changefriendinvisible_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerStatusInfo, _impl_.mapplaying_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerStatusInfo, _impl_.changepsonly_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerStatusInfo, _impl_.psonly_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerStatusInfo, _impl_.serviceversion_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerStatusInfo, _impl_.loginsource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpWinData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpWinData, _impl_.wintype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpWinData, _impl_.resultcnt_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlrInfo_EquipsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlrInfo_EquipsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlrInfo_EquipsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlrInfo_EquipsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlrInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlrInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlrInfo, _impl_.equips_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPuzzle_ItemMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPuzzle_ItemMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPuzzle_ItemMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPuzzle_ItemMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPuzzle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPuzzle, _impl_.openmap_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPuzzle, _impl_.groupaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPuzzle, _impl_.itemmap_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPuzzle, _impl_.awardpool_),
  PROTOBUF_FIELD_OFFSET(::msg::ChessSkinSlotData_SlotsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::ChessSkinSlotData_SlotsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ChessSkinSlotData_SlotsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::ChessSkinSlotData_SlotsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ChessSkinSlotData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ChessSkinSlotData, _impl_.slots_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_ModeWinDatasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_ModeWinDatasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_ModeWinDatasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_ModeWinDatasEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_CurShowItemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_CurShowItemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_CurShowItemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_CurShowItemsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_SettingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_SettingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_SettingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_SettingsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_SwitchItemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_SwitchItemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_SwitchItemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_SwitchItemsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_PunishmentEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_PunishmentEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_PunishmentEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_PunishmentEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_RegionDelaysEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_RegionDelaysEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_RegionDelaysEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_RegionDelaysEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_TicketsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_TicketsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_TicketsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_TicketsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_CurrencysEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_CurrencysEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_CurrencysEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_CurrencysEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_ChessSkinDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_ChessSkinDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_ChessSkinDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_ChessSkinDataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_SkinDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_SkinDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_SkinDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData_SkinDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.usrname_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.camp_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.isrobot_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.competitioncnt_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.headpic_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.teamplayernum_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.mmr_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.lvl_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.reqtime_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.platformtype_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.teamid_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.cup_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.apkversion_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.pvpresourceversion_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.asyn_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.chessplayerskin_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.sceneskin_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.devicetype_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.damageeffect_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.modewindatas_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.currankseason_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.meleerule_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.curshowitems_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.emotionlist_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.channelusrid_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.channeltype_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.settings_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.assistantid_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.creditscore_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.tmmr_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.tcup_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.teamvoiceid_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.teamvoicememid_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.picurl_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.teambattlecount_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.teambattlemvpcount_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.recommendscore_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.wxvviplevel_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.teambattleavgrank_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.cupnamechina_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.cupiconurl_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.personalavgmvp_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.switchitems_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.observeprivilege_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.punishment_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.curchessplr_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.teamgroup_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.pvpservergroup_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.ping_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.province_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.teamvoiceuserid_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.regiondelays_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.addiction_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.firstmatchsuccesswaittime_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.packagename_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.tournamentid_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.tournamclass_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.tournamclassround_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.tournamchessid_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.passporttypeids_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.tickets_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.sdkcountry_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.ps4only_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.restricttype_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.currencys_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.guildname_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.guildsign_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.psblockedusers_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.chesslist_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.channelid_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.skinsuitid_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.ffmmr_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.ffcup_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.battletime_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.chessskindata_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.skindata_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.pvpdata_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.pvpvoicememid_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.campvoicememid_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.chosecardgroup_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.mentorid_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpPlayerData, _impl_.exchangestate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PvpData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PvpData, _impl_.pve_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpData, _impl_.cardgroup_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpData, _impl_.towerdefense_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroup, _impl_.ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroups, _impl_.chessboard_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroups, _impl_.chessplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::TDCardGroups, _impl_.chessman_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItemGroup_ItemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItemGroup_ItemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDItemGroup_ItemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItemGroup_ItemsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDItemGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDItemGroup, _impl_.cardgroups_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItemGroup, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TowerDefenseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TowerDefenseData, _impl_.itemgroup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::KernelCardGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::KernelCardGroup, _impl_.chessids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::KernelChessInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::KernelChessInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::KernelChessInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::msg::KernelChessInfo, _impl_.quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ApplyWorkshopRule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ApplyWorkshopRule, _impl_.extdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTVisitedMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTVisitedMap, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTVisitedMap, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTVisitedMap, _impl_.submapid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTVisitedMap, _impl_.isplaying_),
  PROTOBUF_FIELD_OFFSET(::msg::VisitedMaps_MapsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::VisitedMaps_MapsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::VisitedMaps_MapsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::VisitedMaps_MapsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::VisitedMaps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::VisitedMaps, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::msg::VisitedMaps, _impl_.maps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTCurShowItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTCurShowItem, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTCurShowItem, _impl_.instanceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPassportHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPassportHistory, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPassportHistory, _impl_.season_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPassportHistory, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ExchangeRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ExchangeRecord, _impl_.init_),
  PROTOBUF_FIELD_OFFSET(::msg::ExchangeRecord, _impl_.balancecount_),
  PROTOBUF_FIELD_OFFSET(::msg::ExchangeRecord, _impl_.salecount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.usrname_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.headpic_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.chatbubble_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.mmr_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.exp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.currankseason_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.historypvpshowpermission_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.pvphistory_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.headpicframe_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.headpicpendant_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.scene_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.channelusrid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.switchplayerset_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.channelviptype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.launchtype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.platformtype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.tmmr_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.passportlevel_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.star_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.lastlogintime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.nativecountry_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.channeltype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.resetheadpictime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.punishment_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.period_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.province_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.mvpcount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.passporttypeids_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.mvpinfos_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.observepvpid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.ps4only_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.restricttype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.guildinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.medal_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.oriregion_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.ffmmr_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.advancepassport_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.passportcardnum_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.pvpdata_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.mentorshipinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.totalduration_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.mentorinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.exchangestate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.passporthistory_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerBaseInfo, _impl_.exchangerecord_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerGuildInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerGuildInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerGuildInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerGuildInfo, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerGuildInfo, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.usrname_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.headpic_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.headpicframe_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.headpicpendant_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.chatbubble_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.mmr_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.tmmr_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.cup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.province_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.platformtype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.period_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.passporttypeids_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.observepvpid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.ps4only_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.channeltype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.channelusrid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.guildinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.restricttype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.exchangestate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerSimpleInfo, _impl_.historymaxstat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerRankInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerRankInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerRankInfo, _impl_.usrname_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerRankInfo, _impl_.headpic_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerRankInfo, _impl_.headpicframe_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerRankInfo, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerRankInfo, _impl_.cup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerTournamentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerTournamentInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerTournamentInfo, _impl_.score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpHistory, _impl_.pvpid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpHistory, _impl_.changemmr_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpHistory, _impl_.dailyfirstwin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpHistory, _impl_.dailyfirstwinaward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerPvpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerPvpInfo, _impl_.pvphistory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerDetailInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerDetailInfo, _impl_.baseinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerDetailInfo, _impl_.stat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerDetailInfo, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerItems, _impl_.cache_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerItems, _impl_.medals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonData, _impl_.competitioncnt_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonData, _impl_.avgrank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonData, _impl_.mvpcount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonData, _impl_.mvpprobability_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonData, _impl_.top3count_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonData, _impl_.top3probability_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonData, _impl_.avground_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonData, _impl_.wintimes_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonInfo_ModesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonInfo_ModesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonInfo_ModesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonInfo_ModesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonInfo, _impl_.maxmmr_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonInfo, _impl_.modes_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonInfo, _impl_.maxtmmr_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonInfo, _impl_.maxffmmr_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonInfo, _impl_.maxqueenrank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonInfo, _impl_.maxtqueenrank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRankSeasonInfo, _impl_.maxfqueenrank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat_SeasonInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat_SeasonInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat_SeasonInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat_SeasonInfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat, _impl_.mmr_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat, _impl_.competitioncnt_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat, _impl_.mvpcnt_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat, _impl_.registertime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat, _impl_.chessplayerskin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat, _impl_.followcount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat, _impl_.fanscount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat, _impl_.seasoninfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat, _impl_.unseasondata_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat, _impl_.competitioncntdaily_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat, _impl_.bindoldplayercount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat, _impl_.tmmr_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat, _impl_.curchessplr_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat, _impl_.cup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat, _impl_.ffmmr_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat, _impl_.maxqueenrank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat, _impl_.maxtqueenrank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTStat, _impl_.maxfqueenrank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNumRankItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNumRankItem, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNumRankItem, _impl_.number_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNumRankItem, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNumRankItem, _impl_.captain_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNumRankItem, _impl_.score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWorldChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWorldChat, _impl_.baseinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWorldChat, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWorldChat, _impl_.emotionid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWorldChat, _impl_.needlocalize_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWorldChat, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWorldChat, _impl_.worldchattype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWorldChat, _impl_.workshopmapname_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWorldChat, _impl_.wssetting_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWorldChat, _impl_.sourcetype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWorldChat, _impl_.channelid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWorldChat, _impl_.medalinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBuffAct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBuffAct, _impl_.groupid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBuffAct, _impl_.actid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBuffAct, _impl_.actstatus_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBuffAct, _impl_.showtime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBuffAct, _impl_.endshowtime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBuffAct, _impl_.starttime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBuffAct, _impl_.endtime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBuffAct, _impl_.buffstarttime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBuffAct, _impl_.buffendtime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBuffAct, _impl_.acttype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBuffAct, _impl_.bufftype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBuffAct, _impl_.buffstartlv_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBuffAct, _impl_.buffendlv_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail_DictEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail_DictEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail_DictEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail_DictEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail, _impl_.awards_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail, _impl_.ts_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail, _impl_.isread_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail, _impl_.isgetaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail, _impl_.awardsource_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail, _impl_.dict_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail, _impl_.extdata_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail, _impl_.endtime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail, _impl_.webop_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail, _impl_.webopendata_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMail, _impl_.mustwaittime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNoticeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNoticeInfo, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.labeltype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.ts_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.showtype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.contenttype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.picurl_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.skipurl_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.endtime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.noticetype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.countrylist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.tap_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.skipinterface_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.skiptab_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.picjumptype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.webcontent_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.downloadlist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.platformlist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.magnetismtype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.coverpicurl_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.subtitle_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.jumpgoodsid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.apkversionlist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.pcskipurl_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.sort_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.needredpoint_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.excludedownload_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNotice, _impl_.starttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAdsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAdsInfo, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAds, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAds, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAds, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAds, _impl_.showlimit_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAds, _impl_.starttime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAds, _impl_.endtime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAds, _impl_.showcount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAds, _impl_.ispay_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAds, _impl_.countrylist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAds, _impl_.whitelist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAds, _impl_.downloadlist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAds, _impl_.platformlist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAds, _impl_.excludedownload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Contest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Contest, _impl_.chessid_),
  PROTOBUF_FIELD_OFFSET(::msg::Contest, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::msg::Contest, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::msg::Contest, _impl_.equip_),
  PROTOBUF_FIELD_OFFSET(::msg::Contest, _impl_.chessmancardtag_),
  PROTOBUF_FIELD_OFFSET(::msg::Contest, _impl_.race1_),
  PROTOBUF_FIELD_OFFSET(::msg::Contest, _impl_.race2_),
  PROTOBUF_FIELD_OFFSET(::msg::Contest, _impl_.pro1_),
  PROTOBUF_FIELD_OFFSET(::msg::Contest, _impl_.skill1_),
  PROTOBUF_FIELD_OFFSET(::msg::Contest, _impl_.skill2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Effect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Effect, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::Effect, _impl_.curlevel_),
  PROTOBUF_FIELD_OFFSET(::msg::Effect, _impl_.maxlevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ChessDamageStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ChessDamageStat, _impl_.chessid_),
  PROTOBUF_FIELD_OFFSET(::msg::ChessDamageStat, _impl_.totaldamage_),
  PROTOBUF_FIELD_OFFSET(::msg::ChessDamageStat, _impl_.totalsuffer_),
  PROTOBUF_FIELD_OFFSET(::msg::ChessDamageStat, _impl_.physicaldamage_),
  PROTOBUF_FIELD_OFFSET(::msg::ChessDamageStat, _impl_.magicaldamage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::SelectEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::SelectEquip, _impl_.roundid_),
  PROTOBUF_FIELD_OFFSET(::msg::SelectEquip, _impl_.equipid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Equip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Equip, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::Equip, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::msg::Equip, _impl_.quality_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_EnemyLeftChessEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_EnemyLeftChessEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_EnemyLeftChessEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_EnemyLeftChessEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_SelfLeftChessEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_SelfLeftChessEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_SelfLeftChessEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_SelfLeftChessEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_DropEquipEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_DropEquipEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_DropEquipEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_DropEquipEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_SelfBattleChessEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_SelfBattleChessEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_SelfBattleChessEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_SelfBattleChessEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_EnemyBattleChessEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_EnemyBattleChessEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_EnemyBattleChessEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_EnemyBattleChessEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_BuyChessListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_BuyChessListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_BuyChessListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_BuyChessListEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_EquipComposeListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_EquipComposeListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_EquipComposeListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_EquipComposeListEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_MoneySourceListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_MoneySourceListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_MoneySourceListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_MoneySourceListEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_MoneyPayListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_MoneyPayListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_MoneyPayListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_MoneyPayListEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_SellChessListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_SellChessListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_SellChessListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_SellChessListEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_EquipComposeStructListEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_EquipComposeStructListEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_EquipComposeStructListEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem_EquipComposeStructListEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.round_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.oldhp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.oldrank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.targetplayerid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.wintype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.enemyleftchess_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.selfleftchess_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.dropequip_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.selfcontest_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.targetcontest_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.selfbattlechess_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.enemybattlechess_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.roundstartcontest_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.battlestartcontest_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.chessshopfreshcount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.chessshopfreshlist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.buychesslist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.equipcomposelist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.upgradestarchesslist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.roundstartmoney_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.battlestartmoney_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.battleendmoney_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.moneysourcelist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.moneypaylist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.readchesscount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.roundstartlvl_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.roundstartexp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.battlestartlvl_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.battlestartexp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.sellchesslist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.ismonster_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.wincon_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.losecon_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.islastround_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.sharedchesslist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.giveequipchesslist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.givechesslist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.raceeffectlist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.professioneffectlist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.chessdamagelist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.roundequipselections_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.selectequips_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.targetopenid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundItem, _impl_.equipcomposestructlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRound, _impl_.list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundEnd, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoundEnd, _impl_.rounitem_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpStat_PlayerRoundEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpStat_PlayerRoundEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpStat_PlayerRoundEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpStat_PlayerRoundEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpStat, _impl_.deathnum_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpStat, _impl_.killnum_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpStat, _impl_.waterdeathnum_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpStat, _impl_.hurtgrounddeathnum_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpStat, _impl_.winrolestat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpStat, _impl_.failrolestat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpStat, _impl_.drawrolestat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpStat, _impl_.mvproleid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpStat, _impl_.mvpskills_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpStat, _impl_.playerround_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpCampResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpCampResult, _impl_.camp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpCampResult, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpCampResult, _impl_.camp1score_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpCampResult, _impl_.camp2score_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpCampResult, _impl_.currencyid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpCampResult, _impl_.currencycnt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTCampData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTCampData, _impl_.camp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTCampData, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTCampData, _impl_.wintype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTCampData, _impl_.playerstat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTCampData, _impl_.surrender_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoleStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoleStat, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoleStat, _impl_.usetime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoleStat, _impl_.killcnt_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoleStat, _impl_.assistkillcnt_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoleStat, _impl_.deathcnt_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRoleStat, _impl_.talents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpMvp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpMvp, _impl_.hurtmax_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpMvp, _impl_.bearhurtmax_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_ChessProEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_ChessProEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_ChessProEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_ChessProEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_PveItemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_PveItemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_PveItemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat_PveItemsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.isrobot_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.ishook_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.usrname_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.headpic_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.mmr_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.chessplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.chesslist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.round_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.winround_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.failround_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.drawround_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.killnum_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.deathnum_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.survivetime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.chessplayerlvl_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.asyn_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.isdeath_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.teamid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.teamplayernum_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.money_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.curshowitems_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.chessrace_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.chesspro_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.totalvalue_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.sharechesslist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.fetters_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.showchesslist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.pvpmvp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.leaveinadvance_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.afktime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.province_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.unlockedchess_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.passporttypeids_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.playerindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.currencyid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.surpluscurrency_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.income_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.channeltype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.channelusrid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.restricttype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.playerrank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.moneycost_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.moneyincome_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.chosecardgroup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.pveitems_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.allchosecardgroup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.exchangestate_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.taskid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.istaskcomplete_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.curtaskprogress_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPvpPlayerStat, _impl_.maxtaskprogress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::KernelItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::KernelItem, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::KernelItem, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTFetters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTFetters, _impl_.resid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTFetters, _impl_.effectnum_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTFetters, _impl_.maxeffectnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerFinish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerFinish, _impl_.playerindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerFinish, _impl_.deathindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerFinish, _impl_.frameindex_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerFinish, _impl_.campresult_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerFinish, _impl_.stat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMarqueeItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMarqueeItem, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMarqueeItem, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMarqueeItem, _impl_.starttime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMarqueeItem, _impl_.endtime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMarqueeItem, _impl_.frequency_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMarqueeItem, _impl_.flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMarquee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMarquee, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Cond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Cond, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::Cond, _impl_.para_),
  PROTOBUF_FIELD_OFFSET(::msg::Cond, _impl_.mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayerEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayerEquip, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayerEquip, _impl_.instanceid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayer_EquipsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayer_EquipsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayer_EquipsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayer_EquipsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayer_EquipEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayer_EquipEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayer_EquipEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayer_EquipEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayer, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayer, _impl_.skin_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayer, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayer, _impl_.picture_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayer, _impl_.voice_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayer, _impl_.equips_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayer, _impl_.equip_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChessPlayer, _impl_.instanceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTelBook, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTelBook, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTelBook, _impl_.tel_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTelBook, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTelBook, _impl_.mmr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::LanguageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::LanguageData, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::msg::LanguageData, _impl_.languages_),
  PROTOBUF_FIELD_OFFSET(::msg::GMLanguageData_LanguagesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::GMLanguageData_LanguagesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::GMLanguageData_LanguagesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::GMLanguageData_LanguagesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GMLanguageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::GMLanguageData, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::msg::GMLanguageData, _impl_.languages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CommonKVString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CommonKVString, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::msg::CommonKVString, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CDNLanguageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CDNLanguageData, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::msg::CDNLanguageData, _impl_.languages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTSeason, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTSeason, _impl_.currankseason_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTSeason, _impl_.seasonawarded_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTSeason, _impl_.seasontaskprogress_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivity_GroupsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivity_GroupsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivity_GroupsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivity_GroupsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivity, _impl_.groups_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivity, _impl_.questionnaires_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivity, _impl_.useexcelconf_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityGroup_ActivitiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityGroup_ActivitiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityGroup_ActivitiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityGroup_ActivitiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityGroup, _impl_.activities_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityGroup, _impl_.md5sum_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityGroup, _impl_.begintime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityGroup, _impl_.record_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityGroup, _impl_.logindays_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityGroup, _impl_.chestlevel_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityGroup, _impl_.endtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityDetail, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityDetail, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityDetail, _impl_.getaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityDetail, _impl_.md5sum_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityDetail, _impl_.unlock_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityRecord_ProcessEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityRecord_ProcessEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityRecord_ProcessEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityRecord_ProcessEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityRecord_RewardEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityRecord_RewardEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityRecord_RewardEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityRecord_RewardEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityRecord, _impl_.process_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityRecord, _impl_.reward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityRecord, _impl_.params_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecruitData_IsRecruitedEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecruitData_IsRecruitedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecruitData_IsRecruitedEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecruitData_IsRecruitedEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecruitData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecruitData, _impl_.isrecruited_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecruitPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecruitPlayer, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecruitPlayer, _impl_.battlecount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityRecruit_PlayersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityRecruit_PlayersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityRecruit_PlayersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityRecruit_PlayersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityRecruit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActivityRecruit, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActGroupBuy_ProcessEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActGroupBuy_ProcessEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActGroupBuy_ProcessEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActGroupBuy_ProcessEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActGroupBuy_RewardEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActGroupBuy_RewardEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActGroupBuy_RewardEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActGroupBuy_RewardEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActGroupBuy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActGroupBuy, _impl_.process_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActGroupBuy, _impl_.reward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActGroupBuyRwd_RewardsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActGroupBuyRwd_RewardsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActGroupBuyRwd_RewardsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActGroupBuyRwd_RewardsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActGroupBuyRwd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActGroupBuyRwd, _impl_.rewards_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActRecruitData_PlayersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActRecruitData_PlayersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActRecruitData_PlayersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActRecruitData_PlayersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActRecruitData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActRecruitData, _impl_.inviter_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActRecruitData, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActLuckMallData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActLuckMallData, _impl_.mallgoods_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActLuckMallData, _impl_.tabid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActLuckMallData, _impl_.discount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMelee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMelee, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMelee, _impl_.getaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMelee, _impl_.meleebegintime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMelee, _impl_.meleeendtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTeamSlotPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTeamSlotPlayer, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTeamSlotPlayer, _impl_.isai_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTeamSlotPlayer, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTeamSlotPlayer, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTeamSlotPlayer, _impl_.usrname_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTeamSlotPlayer, _impl_.headpic_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTeamSlotPlayer, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTeamSlotPlayer, _impl_.province_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTeamSlotPlayer, _impl_.headpicframe_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTeamSlotPlayer, _impl_.lvl_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTeamSlotPlayer, _impl_.cup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTeamSlotPlayer, _impl_.platformtype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTeamSlotPlayer, _impl_.country_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTeamVoicePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTeamVoicePlayer, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTeamVoicePlayer, _impl_.voiceid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTeamVoicePlayer, _impl_.voicememid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTeamVoicePlayer, _impl_.voiceuserid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.tabname_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.tabicon_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.beginshowtime_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.begintime_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.endtime_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.endshowtime_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.privatedata_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.open_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.activityid_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.repeattype_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.showparam_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.buffeffects_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.modes_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.pagetype_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.picname_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.picopen_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.subscripttype_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.orderid_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.picinterval_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.picswitchopen_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.effecttimetype_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.effectweekday_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.takeeffectdate_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.takeeffecttime_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.takeeffectrank_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.takeeffectmode_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.teamstate_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.uistylephone_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.uistylepc_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.zone_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.channels_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.takeeffectlevel_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.makeup_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.leastmach_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroupData, _impl_.platformclose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ActivityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ActivityData, _impl_.groupid_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityData, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityData, _impl_.unit_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityData, _impl_.cond_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityData, _impl_.awards_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityData, _impl_.condgroup_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityData, _impl_.precondgroup_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityData, _impl_.skipinterface_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityData, _impl_.skiptab_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityData, _impl_.day_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityData, _impl_.desc_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityData, _impl_.showquality_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityData, _impl_.showgiftpic_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityData, _impl_.resettype_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityData, _impl_.isrecruiter_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityData, _impl_.progressinherit_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityData, _impl_.showorder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ActivityAttrData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ActivityAttrData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityAttrData, _impl_.abtesttype_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityAttrData, _impl_.abtestvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GMLanguageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::GMLanguageInfo, _impl_.languagetype_),
  PROTOBUF_FIELD_OFFSET(::msg::GMLanguageInfo, _impl_.translate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PlayLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayLimit, _impl_.age_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayLimit, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ChannelFunctionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ChannelFunctionData, _impl_.channelid_),
  PROTOBUF_FIELD_OFFSET(::msg::ChannelFunctionData, _impl_.forbiddenlogo_),
  PROTOBUF_FIELD_OFFSET(::msg::ChannelFunctionData, _impl_.agejudge_),
  PROTOBUF_FIELD_OFFSET(::msg::ChannelFunctionData, _impl_.informationinput_),
  PROTOBUF_FIELD_OFFSET(::msg::ChannelFunctionData, _impl_.gamerestrict_),
  PROTOBUF_FIELD_OFFSET(::msg::ChannelFunctionData, _impl_.forbiddenage_),
  PROTOBUF_FIELD_OFFSET(::msg::ChannelFunctionData, _impl_.playlimits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PvpHistoryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PvpHistoryData, _impl_.pvpid_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpHistoryData, _impl_.createtime_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpHistoryData, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpHistoryData, _impl_.campresult_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpHistoryData, _impl_.meleerule_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpHistoryData, _impl_.customsubmode_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpHistoryData, _impl_.tournamentid_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpHistoryData, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpHistoryData, _impl_.teachresult_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpHistoryData, _impl_.extdata_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpHistoryData, _impl_.playerextdata_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpHistoryData, _impl_.battleext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTGuide, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTGuide, _impl_.guidename_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTGuide, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTGuide, _impl_.guideid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTGuide, _impl_.sequence_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTGuide, _impl_.lastseq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChat, _impl_.emotionid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChat, _impl_.senderid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChat, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChat, _impl_.channeltype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChat, _impl_.channelusrid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChat, _impl_.ps4only_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChat, _impl_.sourcetype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTChat, _impl_.restricttype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTGoods, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTGoods, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTGoods, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTGoods, _impl_.uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTGoodsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTGoodsInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTGoodsInfo, _impl_.goodsinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTGoodsInfo, _impl_.refreshtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::MallTabData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::MallTabData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::MallTabData, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::msg::MallTabData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::MallTabData, _impl_.sort_),
  PROTOBUF_FIELD_OFFSET(::msg::MallTabData, _impl_.skips_interface_pc_),
  PROTOBUF_FIELD_OFFSET(::msg::MallTabData, _impl_.itemtypepage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Skip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Skip, _impl_.interface_),
  PROTOBUF_FIELD_OFFSET(::msg::Skip, _impl_.tab_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.contents_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.consumes_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.onsalebegintime_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.onsaleendtime_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.sellcountlimit_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.sellcountresetinterval_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.bulkbuying_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.recommend_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.sort_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.malltabid_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.showbegintime_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.showendtime_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.groupid_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.groupshowfirst_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.showresource_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.chargeprivatepara_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.sellcountstarttime_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.skips_interface_pc_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.moneyoffcount_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.moneyoff_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.recommend2nd_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.recommend3rd_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.zone_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.repeatedbuy_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.downloadlist_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.platformlist_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.consumes2nd_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.onsale2ndbegintime_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.onsale2ndendtime_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.moneyoff2ndcount_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.moneyoff2nd_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.excludedownload_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.countrylist_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.disablededuction_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.videourl_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.gifts_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.recommendbegintime_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.recommendendtime_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.recommend2ndbegintime_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.recommend2ndendtime_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.recommend3rdbegintime_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.recommend3rdendtime_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.consumeinc_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.consumeincrefresh_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.consumesurl_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.consumesurlweb_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.consumesurlapp_),
  PROTOBUF_FIELD_OFFSET(::msg::MallGoodsData, _impl_.series_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ConsumeIncrease, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ConsumeIncrease, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMallGoodsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMallGoodsData, _impl_.mallgoods_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMallGoodsData, _impl_.buycount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMallGoodsData, _impl_.lastresettime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMallGoods, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMallGoods, _impl_.mallgoods_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMallBuyCountData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMallBuyCountData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMallBuyCountData, _impl_.buycount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMallBuyCountData, _impl_.lastresettime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMallBuyCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMallBuyCount, _impl_.mallgoods_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::MallNoticeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::MallNoticeData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::MallNoticeData, _impl_.picname_),
  PROTOBUF_FIELD_OFFSET(::msg::MallNoticeData, _impl_.sortid_),
  PROTOBUF_FIELD_OFFSET(::msg::MallNoticeData, _impl_.skiptype_),
  PROTOBUF_FIELD_OFFSET(::msg::MallNoticeData, _impl_.skipname_),
  PROTOBUF_FIELD_OFFSET(::msg::MallNoticeData, _impl_.skiptap_),
  PROTOBUF_FIELD_OFFSET(::msg::MallNoticeData, _impl_.mallgoodsid_),
  PROTOBUF_FIELD_OFFSET(::msg::MallNoticeData, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::msg::MallNoticeData, _impl_.showbegintime_),
  PROTOBUF_FIELD_OFFSET(::msg::MallNoticeData, _impl_.showendtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTCommonRandList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTCommonRandList, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTCommonRandList, _impl_.list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Sign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Sign, _impl_.day_),
  PROTOBUF_FIELD_OFFSET(::msg::Sign, _impl_.awardday_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTSignData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTSignData, _impl_.signlist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTSignData, _impl_.todayawardday_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTSignData, _impl_.sharecount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTSignData, _impl_.shareaward_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTSignData, _impl_.fit_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTSignData, _impl_.avoid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTSignData, _impl_.luckychess_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTSignData, _impl_.fortuneproverb_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTSignData, _impl_.fitavoid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::MatchTeamData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::MatchTeamData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::MatchTeamData, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::msg::MatchTeamData, _impl_.startteamid_),
  PROTOBUF_FIELD_OFFSET(::msg::MatchTeamData, _impl_.endtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPlayer, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPlayer, _impl_.cup_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPlayer, _impl_.headpic_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPlayer, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPlayer, _impl_.scene_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPlayer, _impl_.chessplayer_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPlayer, _impl_.recommendscore_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPlayer, _impl_.headpicframe_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPlayer, _impl_.observeprivilege_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPlayer, _impl_.platformtype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPlayer, _impl_.ps4only_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPlayer, _impl_.restricttype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTThirdPvpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTThirdPvpInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTThirdPvpInfo, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTThirdPvpInfo, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTThirdPvpInfo, _impl_.bigpic_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTThirdPvpInfo, _impl_.smallpic_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTThirdPvpInfo, _impl_.recommendicon_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTThirdPvpInfo, _impl_.pvpstarttime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTThirdPvpInfo, _impl_.pvpendtime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTThirdPvpInfo, _impl_.preshowpic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPvpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPvpInfo, _impl_.playerinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPvpInfo, _impl_.pvpid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPvpInfo, _impl_.observecount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPvpInfo, _impl_.starttime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPvpInfo, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPvpInfo, _impl_.tournament_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPvpInfo, _impl_.thirdpvpid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPvpInfo, _impl_.submode_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRecommendPvpInfo, _impl_.authoritydata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::WxVVipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::WxVVipData, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::msg::WxVVipData, _impl_.weeklytawardt_),
  PROTOBUF_FIELD_OFFSET(::msg::WxVVipData, _impl_.dailyvawardt_),
  PROTOBUF_FIELD_OFFSET(::msg::WxVVipData, _impl_.dailyawardt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWxRedPktItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWxRedPktItem, _impl_.redpktidx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWxRedPktItem, _impl_.redpktid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWxRedPktProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWxRedPktProfile, _impl_.selfrank_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWxRedPktProfile, _impl_.selflike_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWxVVipRankItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWxVVipRankItem, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWxVVipRankItem, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWxVVipRankItem, _impl_.vlvl_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTWxVVipRankItem, _impl_.likes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTSlotInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTSlotInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTSlotInfo, _impl_.slot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRedPktData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRedPktData, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRedPktData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRedPktData, _impl_.award_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRedPktInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRedPktInfo, _impl_.redpktid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRedPktInfo, _impl_.rankver_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTRedPktInfo, _impl_.rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::SwitchItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::SwitchItem, _impl_.switchtype_),
  PROTOBUF_FIELD_OFFSET(::msg::SwitchItem, _impl_.forbid_),
  PROTOBUF_FIELD_OFFSET(::msg::SwitchItem, _impl_.endtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CreditCfgItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CreditCfgItem, _impl_.actid_),
  PROTOBUF_FIELD_OFFSET(::msg::CreditCfgItem, _impl_.thresholdhi_),
  PROTOBUF_FIELD_OFFSET(::msg::CreditCfgItem, _impl_.thresholdlo_),
  PROTOBUF_FIELD_OFFSET(::msg::CreditCfgItem, _impl_.limitlv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPunishment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPunishment, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPunishment, _impl_.types_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPunishment, _impl_.executedeadline_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPunishment, _impl_.triggers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayer, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayer, _impl_.username_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBriefPunishment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBriefPunishment, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBriefPunishment, _impl_.punishmentdeadline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerConfirmInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerConfirmInfo, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerConfirmInfo, _impl_.headpic_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerConfirmInfo, _impl_.headpicframe_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerConfirmInfo, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerConfirmInfo, _impl_.isrobot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::AnswerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::AnswerData, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::msg::AnswerData, _impl_.contents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::VideoInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::VideoInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::VideoInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::VideoInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::VideoInfo, _impl_.picurl_),
  PROTOBUF_FIELD_OFFSET(::msg::VideoInfo, _impl_.contenturl_),
  PROTOBUF_FIELD_OFFSET(::msg::VideoInfo, _impl_.languagekey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAddictionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAddictionInfo, _impl_.isauthaddiction_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAddictionInfo, _impl_.authaddictiontoken_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTAddictionInfo, _impl_.isverified_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::KrAddictionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::KrAddictionInfo, _impl_.logintime_),
  PROTOBUF_FIELD_OFFSET(::msg::KrAddictionInfo, _impl_.ischeckaddic_),
  PROTOBUF_FIELD_OFFSET(::msg::KrAddictionInfo, _impl_.startlimittime_),
  PROTOBUF_FIELD_OFFSET(::msg::KrAddictionInfo, _impl_.endlimittime_),
  PROTOBUF_FIELD_OFFSET(::msg::KrAddictionInfo, _impl_.countdown1_),
  PROTOBUF_FIELD_OFFSET(::msg::KrAddictionInfo, _impl_.countdown2_),
  PROTOBUF_FIELD_OFFSET(::msg::KrAddictionInfo, _impl_.durantion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::MultiPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::MultiPlayer, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::MultiPlayer, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::MultiPlayer, _impl_.headpic_),
  PROTOBUF_FIELD_OFFSET(::msg::MultiPlayer, _impl_.headpicframe_),
  PROTOBUF_FIELD_OFFSET(::msg::MultiPlayer, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::msg::MultiPlayer, _impl_.mmr_),
  PROTOBUF_FIELD_OFFSET(::msg::MultiPlayer, _impl_.diamond_),
  PROTOBUF_FIELD_OFFSET(::msg::MultiPlayer, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::msg::MultiPlayer, _impl_.money_),
  PROTOBUF_FIELD_OFFSET(::msg::MultiPlayer, _impl_.passportlevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBannerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBannerInfo, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBanner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBanner, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBanner, _impl_.picurl_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBanner, _impl_.bannertype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBanner, _impl_.skiptype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBanner, _impl_.skipname_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBanner, _impl_.skiptap_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBanner, _impl_.mallgoodsid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBanner, _impl_.countrylist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBanner, _impl_.showbegintime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBanner, _impl_.showendtime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBanner, _impl_.zoneid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBanner, _impl_.downloadlist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBanner, _impl_.platformlist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBanner, _impl_.pcskipurl_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBanner, _impl_.hallmodelist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBanner, _impl_.sort_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBanner, _impl_.excludedownload_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament_RankInfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament_RankInfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament_RankInfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament_RankInfoEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament_PointsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament_PointsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament_PointsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament_PointsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament_RoundPointsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament_RoundPointsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament_RoundPointsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament_RoundPointsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament, _impl_.enrollcount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament, _impl_.enroll_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament, _impl_.out_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament, _impl_.joincount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament, _impl_.classes_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament, _impl_.round_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament, _impl_.lastgameid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament, _impl_.enrollclass_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament, _impl_.groupidx_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament, _impl_.rankinfo_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament, _impl_.pointawardget_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament, _impl_.battle_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament, _impl_.challengeagain_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament, _impl_.roundpoints_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournament, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActDaySign_SignDayEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActDaySign_SignDayEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActDaySign_SignDayEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActDaySign_SignDayEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActDaySign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActDaySign, _impl_.signday_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActDaySign, _impl_.loop_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActDaySign, _impl_.day_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActDaySign, _impl_.resigntimes_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActDaySign, _impl_.cansign_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActDaySign, _impl_.cangetspecialaward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActDaySignDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActDaySignDetail, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTActDaySignDetail, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTGDCommonBin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTGDCommonBin, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTGDCommonBin, _impl_.md5sum_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTGDCommonBin, _impl_.conftyp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTGDCommonBin, _impl_.datas_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournamentClass_GroupsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournamentClass_GroupsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournamentClass_GroupsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournamentClass_GroupsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournamentClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournamentClass, _impl_.classid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournamentClass, _impl_.groups_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournamentClass, _impl_.maxplayercount_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTournamentClass, _impl_.cancel_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBattleGroup_PlayersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBattleGroup_PlayersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBattleGroup_PlayersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBattleGroup_PlayersEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBattleGroup_GameIDsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBattleGroup_GameIDsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBattleGroup_GameIDsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBattleGroup_GameIDsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBattleGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBattleGroup, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBattleGroup, _impl_.lastpvpendtime_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBattleGroup, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBattleGroup, _impl_.isfighting_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBattleGroup, _impl_.roundid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBattleGroup, _impl_.gameids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTEnrollEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTEnrollEnd, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTEnrollEnd, _impl_.cancelclasses_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTEnrollEnd, _impl_.classgroups_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNewTournament_ClassesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNewTournament_ClassesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNewTournament_ClassesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNewTournament_ClassesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNewTournament, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNewTournament, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTNewTournament, _impl_.classes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TournamentDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TournamentDesc, _impl_.tournamentid_),
  PROTOBUF_FIELD_OFFSET(::msg::TournamentDesc, _impl_.tnclass_),
  PROTOBUF_FIELD_OFFSET(::msg::TournamentDesc, _impl_.groupindex_),
  PROTOBUF_FIELD_OFFSET(::msg::TournamentDesc, _impl_.tnclassround_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TournamentRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TournamentRoom, _impl_.gamestarttime_),
  PROTOBUF_FIELD_OFFSET(::msg::TournamentRoom, _impl_.readyids_),
  PROTOBUF_FIELD_OFFSET(::msg::TournamentRoom, _impl_.selfslot_),
  PROTOBUF_FIELD_OFFSET(::msg::TournamentRoom, _impl_.playerdatas_),
  PROTOBUF_FIELD_OFFSET(::msg::TournamentRoom, _impl_.maxplayercount_),
  PROTOBUF_FIELD_OFFSET(::msg::TournamentRoom, _impl_.tournamentid_),
  PROTOBUF_FIELD_OFFSET(::msg::TournamentRoom, _impl_.classid_),
  PROTOBUF_FIELD_OFFSET(::msg::TournamentRoom, _impl_.roundid_),
  PROTOBUF_FIELD_OFFSET(::msg::TournamentRoom, _impl_.groupindex_),
  PROTOBUF_FIELD_OFFSET(::msg::TournamentRoom, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournament_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournament_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournament_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournament_DataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournament_PointsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournament_PointsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournament_PointsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournament_PointsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournament_EnrollCountEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournament_EnrollCountEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournament_EnrollCountEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournament_EnrollCountEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournament, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournament, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournament, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournament, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournament, _impl_.enrollcount_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData_GetRewardEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData_GetRewardEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData_GetRewardEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData_GetRewardEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData_PointsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData_PointsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData_PointsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData_PointsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData, _impl_.classid_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData, _impl_.getreward_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData, _impl_.curround_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData, _impl_.gameid_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData, _impl_.out_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData, _impl_.signuptime_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData, _impl_.pvpid_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTournamentData, _impl_.pvpendtime_),
  PROTOBUF_FIELD_OFFSET(::msg::RoundData_PointsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::RoundData_PointsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::RoundData_PointsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::RoundData_PointsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::RoundData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::RoundData, _impl_.round_),
  PROTOBUF_FIELD_OFFSET(::msg::RoundData, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::msg::RoundData, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::msg::RoundData, _impl_.fighttimes_),
  PROTOBUF_FIELD_OFFSET(::msg::RoundData, _impl_.totalrank_),
  PROTOBUF_FIELD_OFFSET(::msg::RoundData, _impl_.topcnt_),
  PROTOBUF_FIELD_OFFSET(::msg::RoundData, _impl_.secondcnt_),
  PROTOBUF_FIELD_OFFSET(::msg::RoundData, _impl_.thirdcnt_),
  PROTOBUF_FIELD_OFFSET(::msg::RoundData, _impl_.wintimes_),
  PROTOBUF_FIELD_OFFSET(::msg::RoundData, _impl_.lostblood_),
  PROTOBUF_FIELD_OFFSET(::msg::RoundData, _impl_.damage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GuildBaseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::GuildBaseInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildBaseInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildBaseInfo, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildBaseInfo, _impl_.notice_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildBaseInfo, _impl_.recruitnotice_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildBaseInfo, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildBaseInfo, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildBaseInfo, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildBaseInfo, _impl_.requirepermit_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildBaseInfo, _impl_.requirecup_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildBaseInfo, _impl_.membercount_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildBaseInfo, _impl_.province_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildBaseInfo, _impl_.owner_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildBaseInfo, _impl_.ownername_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildBaseInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildBaseInfo, _impl_.exp_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildBaseInfo, _impl_.channelusrid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GuildAttr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::GuildAttr, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildAttr, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildAttr, _impl_.notice_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildAttr, _impl_.recruitnotice_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildAttr, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildAttr, _impl_.owner_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildAttr, _impl_.ownername_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildAttr, _impl_.requirepermit_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildAttr, _impl_.requirecup_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildAttr, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildAttr, _impl_.province_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildAttr, _impl_.language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GuildApplicant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::GuildApplicant, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildApplicant, _impl_.ts_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildApplicant, _impl_.channelusrid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GuildMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::GuildMember, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildMember, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildMember, _impl_.activescore_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GuildExtraInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::GuildExtraInfo, _impl_.members_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildExtraInfo, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildExtraInfo, _impl_.logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GuildChatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::GuildChatInfo, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildChatInfo, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildChatInfo, _impl_.emotion_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildChatInfo, _impl_.needlocalize_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildChatInfo, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildChatInfo, _impl_.sourcetype_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildLog_ParaEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildLog_ParaEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::GuildLog_ParaEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildLog_ParaEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GuildLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::GuildLog, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildLog, _impl_.para_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildLog, _impl_.ps4only_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildLog, _impl_.ps_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildLog, _impl_.ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GuildApplyInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::GuildApplyInfo, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildApplyInfo, _impl_.ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GuildPlayerRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::GuildPlayerRole, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildPlayerRole, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::msg::GuildPlayerRole, _impl_.active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ChestRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ChestRecord, _impl_.awards_),
  PROTOBUF_FIELD_OFFSET(::msg::ChestRecord, _impl_.round_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TeamDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TeamDesc, _impl_.teamid_),
  PROTOBUF_FIELD_OFFSET(::msg::TeamDesc, _impl_.groupdesc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTaskItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTaskItem, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTaskItem, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTaskItem, _impl_.getaward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::OssPlayerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::OssPlayerData, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::msg::OssPlayerData, _impl_.invitecode_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData, _impl_.ticketid_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData, _impl_.ticketnum_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData, _impl_.rankrewardlist_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData, _impl_.submapid_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData, _impl_.currencynum_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData, _impl_.bountybasecurrencynum_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData, _impl_.playersbetcurrencynum_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData, _impl_.authorid_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData, _impl_.syspercent_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData, _impl_.sysdrawauthorpercent_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData, _impl_.authorpercent_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData, _impl_.chesslist_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData, _impl_.customcardflag_),
  PROTOBUF_FIELD_OFFSET(::msg::BattleExtData, _impl_.mapkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PvpExtData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PvpExtData, _impl_.bigwinner_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpExtData, _impl_.submode_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpExtData, _impl_.pvpchestviplevel_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpExtData, _impl_.pvedebuff_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpExtData, _impl_.mapkey_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpExtData, _impl_.captain_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpExtData, _impl_.iscardgroup_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpExtData, _impl_.tdstage_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpExtData, _impl_.pvechallengemode_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_AssistantMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_AssistantMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_AssistantMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_AssistantMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_BattleTimeMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_BattleTimeMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_BattleTimeMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_BattleTimeMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_PveBuffEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_PveBuffEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_PveBuffEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_PveBuffEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_MsRelationEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_MsRelationEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_MsRelationEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_MsRelationEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_PvpPlayerGroupEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_PvpPlayerGroupEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_PvpPlayerGroupEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap_PvpPlayerGroupEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap, _impl_.assistantmap_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap, _impl_.battletimemap_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap, _impl_.pvebuff_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap, _impl_.msrelation_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerExtMap, _impl_.pvpplayergroup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Buffs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Buffs, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroup, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::msg::ActivityGroup, _impl_.activities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ScoredMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ScoredMap, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::msg::ScoredMap, _impl_.islike_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TransferEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TransferEvent, _impl_.etype_),
  PROTOBUF_FIELD_OFFSET(::msg::TransferEvent, _impl_.tokenid_),
  PROTOBUF_FIELD_OFFSET(::msg::TransferEvent, _impl_.tokencount_),
  PROTOBUF_FIELD_OFFSET(::msg::TransferEvent, _impl_.payee_),
  PROTOBUF_FIELD_OFFSET(::msg::TransferEvent, _impl_.redhsetfield_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TransferOP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TransferOP, _impl_.payeeid_),
  PROTOBUF_FIELD_OFFSET(::msg::TransferOP, _impl_.tokenid_),
  PROTOBUF_FIELD_OFFSET(::msg::TransferOP, _impl_.change_),
  PROTOBUF_FIELD_OFFSET(::msg::TransferOP, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBetData_BetFromPlayersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBetData_BetFromPlayersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBetData_BetFromPlayersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBetData_BetFromPlayersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBetData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBetData, _impl_.betfromauthor_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBetData, _impl_.authorid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTBetData, _impl_.betfromplayers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::MailExtData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::MailExtData, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ExtItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ExtItem, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::ExtItem, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::msg::ExtItem, _impl_.para_),
  PROTOBUF_FIELD_OFFSET(::msg::ExtItem, _impl_.instanceid_),
  PROTOBUF_FIELD_OFFSET(::msg::ExtItem, _impl_.weight_),
  PROTOBUF_FIELD_OFFSET(::msg::ExtItem, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::msg::ExtItem, _impl_.sourceidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTasks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTasks, _impl_.trophy_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTTasks, _impl_.achieve_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PvpTeachResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PvpTeachResult, _impl_.passid_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpTeachResult, _impl_.win_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PvpBigWinnerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PvpBigWinnerData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpBigWinnerData, _impl_.mapid_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpBigWinnerData, _impl_.syspercent_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpBigWinnerData, _impl_.rankrewardlist_),
  PROTOBUF_FIELD_OFFSET(::msg::PvpBigWinnerData, _impl_.configname_),
  PROTOBUF_FIELD_OFFSET(::msg::PveExData_TalentEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PveExData_TalentEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PveExData_TalentEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PveExData_TalentEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PveExData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PveExData, _impl_.talent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ChampionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ChampionInfo, _impl_.zone_),
  PROTOBUF_FIELD_OFFSET(::msg::ChampionInfo, _impl_.period_),
  PROTOBUF_FIELD_OFFSET(::msg::ChampionInfo, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TopRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TopRank, _impl_.zone_),
  PROTOBUF_FIELD_OFFSET(::msg::TopRank, _impl_.period_),
  PROTOBUF_FIELD_OFFSET(::msg::TopRank, _impl_.rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ChampionInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ChampionInfoList, _impl_.list_),
  PROTOBUF_FIELD_OFFSET(::msg::TournamentHistory_ChampionHistoryEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::TournamentHistory_ChampionHistoryEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TournamentHistory_ChampionHistoryEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::TournamentHistory_ChampionHistoryEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::TournamentHistory_TopRankHistoryEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::TournamentHistory_TopRankHistoryEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TournamentHistory_TopRankHistoryEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::TournamentHistory_TopRankHistoryEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TournamentHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TournamentHistory, _impl_.championhistory_),
  PROTOBUF_FIELD_OFFSET(::msg::TournamentHistory, _impl_.toprankhistory_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin_AuthSDKCodeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin_AuthSDKCodeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin_AuthSDKCodeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin_AuthSDKCodeEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.deviceid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.platformtype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.osversion_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.devicetype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.nettype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.logintype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.lysdkdeviceid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.channelid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.packageid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.apkversion_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.resolution_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.channeltype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.authsdkcode_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.sessionid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.channeluserid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.pvpresourceversion_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.paychannel_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.activecode_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.launchtype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.picurl_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.fengkongdeviceid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.gamelanguage_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.gamelibversion_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.advertisingid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.psblockedusers_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::msg::CSReqLogin, _impl_.loginsource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Loc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Loc, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::msg::Loc, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Authority, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Authority, _impl_.mark_),
  PROTOBUF_FIELD_OFFSET(::msg::Authority, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GetNumRank, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::GetNumRank, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::GetNumRank, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::msg::GetNumRank, _impl_.tournamentid_),
  PROTOBUF_FIELD_OFFSET(::msg::GetNumRank, _impl_.classid_),
  PROTOBUF_FIELD_OFFSET(::msg::GetNumRank, _impl_.roundid_),
  PROTOBUF_FIELD_OFFSET(::msg::GetNumRank, _impl_.selfrank_),
  PROTOBUF_FIELD_OFFSET(::msg::GetNumRank, _impl_.groupindex_),
  PROTOBUF_FIELD_OFFSET(::msg::GetNumRank, _impl_.channeltype_),
  PROTOBUF_FIELD_OFFSET(::msg::GetNumRank, _impl_.targetplayer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPassportCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPassportCard, _impl_.typeidlist_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPassportCard, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::msg::PveDataInfo_DataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PveDataInfo_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PveDataInfo_DataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PveDataInfo_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PveDataInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PveDataInfo, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::msg::Pve_ChessIdsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::Pve_ChessIdsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Pve_ChessIdsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::Pve_ChessIdsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::Pve_SkillsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::Pve_SkillsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Pve_SkillsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::Pve_SkillsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::msg::Pve_BuffEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::Pve_BuffEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Pve_BuffEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::Pve_BuffEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Pve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Pve, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::msg::Pve, _impl_.chessids_),
  PROTOBUF_FIELD_OFFSET(::msg::Pve, _impl_.skills_),
  PROTOBUF_FIELD_OFFSET(::msg::Pve, _impl_.buff_),
  PROTOBUF_FIELD_OFFSET(::msg::Pve, _impl_.rankscore_),
  PROTOBUF_FIELD_OFFSET(::msg::Pve, _impl_.teamname_),
  PROTOBUF_FIELD_OFFSET(::msg::Pve, _impl_.unlock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PveBuff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PveBuff, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::msg::PveBuff, _impl_.etime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CardGroupData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CardGroupData, _impl_.chessids_),
  PROTOBUF_FIELD_OFFSET(::msg::CardGroupData, _impl_.autoaddcardtimes_),
  PROTOBUF_FIELD_OFFSET(::msg::CardGroupData, _impl_.isautoaddcardkernel_),
  PROTOBUF_FIELD_OFFSET(::msg::CardGroupData, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::msg::CardGroupData, _impl_.removechessids_),
  PROTOBUF_FIELD_OFFSET(::msg::CardGroupData, _impl_.kernelflag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CardGroupChess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CardGroupChess, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CardGroupChess, _impl_.ctime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::ChessIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::ChessIds, _impl_.ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PveConsume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PveConsume, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::PveConsume, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::PveConsume, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PveSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PveSetting, _impl_.debuffids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerTeamInfo, _impl_.mapkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PveRankRedisInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PveRankRedisInfo, _impl_.caption_),
  PROTOBUF_FIELD_OFFSET(::msg::PveRankRedisInfo, _impl_.teamname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerPvpData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerPvpData, _impl_.pve_),
  PROTOBUF_FIELD_OFFSET(::msg::CSDTPlayerPvpData, _impl_.cardgroup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::GmBan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::GmBan, _impl_.ftype_),
  PROTOBUF_FIELD_OFFSET(::msg::GmBan, _impl_.starttime_),
  PROTOBUF_FIELD_OFFSET(::msg::GmBan, _impl_.endtime_),
  PROTOBUF_FIELD_OFFSET(::msg::GmBan, _impl_.reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::MentorInviteMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::MentorInviteMsg, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::MentorInviteMsg, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::MentorInviteMsg, _impl_.ctime_),
  PROTOBUF_FIELD_OFFSET(::msg::MentorInviteMsg, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::msg::MentorInviteMsg, _impl_.completetask_),
  PROTOBUF_FIELD_OFFSET(::msg::MentorInfo_TasksEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::MentorInfo_TasksEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::MentorInfo_TasksEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::MentorInfo_TasksEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::MentorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::MentorInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::msg::MentorInfo, _impl_.pupils_),
  PROTOBUF_FIELD_OFFSET(::msg::MentorInfo, _impl_.invitetimes_),
  PROTOBUF_FIELD_OFFSET(::msg::MentorInfo, _impl_.punishtime_),
  PROTOBUF_FIELD_OFFSET(::msg::MentorInfo, _impl_.tasks_),
  PROTOBUF_FIELD_OFFSET(::msg::MentorInfo, _impl_.graduatenum_),
  PROTOBUF_FIELD_OFFSET(::msg::Pupil_TasksEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::Pupil_TasksEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Pupil_TasksEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::Pupil_TasksEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::Pupil, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::Pupil, _impl_.tasks_),
  PROTOBUF_FIELD_OFFSET(::msg::Pupil, _impl_.graduatetime_),
  PROTOBUF_FIELD_OFFSET(::msg::Pupil, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::Pupil, _impl_.stat_),
  PROTOBUF_FIELD_OFFSET(::msg::Pupil, _impl_.applygraduatetime_),
  PROTOBUF_FIELD_OFFSET(::msg::Pupil, _impl_.intimacy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDUnUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDUnUse, _impl_.id1_),
  PROTOBUF_FIELD_OFFSET(::msg::TDUnUse, _impl_.id2_),
  PROTOBUF_FIELD_OFFSET(::msg::TDUnUse, _impl_.id3_),
  PROTOBUF_FIELD_OFFSET(::msg::TDUnUse, _impl_.itemgroup1_),
  PROTOBUF_FIELD_OFFSET(::msg::TDUnUse, _impl_.itemgroup2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDItemId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDItemId, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItemId, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItem_EquipmentsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItem_EquipmentsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDItem_EquipmentsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItem_EquipmentsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::TDItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::TDItem, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItem, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItem, _impl_.talentlevel_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItem, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::msg::TDItem, _impl_.equipments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::AddRecommendData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::AddRecommendData, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::msg::AddRecommendData, _impl_.mmr_),
  PROTOBUF_FIELD_OFFSET(::msg::AddRecommendData, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerMentorShipInfo_TasksEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerMentorShipInfo_TasksEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerMentorShipInfo_TasksEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerMentorShipInfo_TasksEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerMentorShipInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerMentorShipInfo, _impl_.ismentor_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerMentorShipInfo, _impl_.mentorid_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerMentorShipInfo, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerMentorShipInfo, _impl_.inviteswitch_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerMentorShipInfo, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerMentorShipInfo, _impl_.punishtime_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerMentorShipInfo, _impl_.isgraduate_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerMentorShipInfo, _impl_.tasks_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerMentorShipInfo, _impl_.invitetimes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMentorRecommendPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMentorRecommendPlayer, _impl_.playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PFDTTaskDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PFDTTaskDetail, _impl_.condtype_),
  PROTOBUF_FIELD_OFFSET(::msg::PFDTTaskDetail, _impl_.para_),
  PROTOBUF_FIELD_OFFSET(::msg::PFDTTaskDetail, _impl_.mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMentorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSDTMentorInfo, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::OBPassThroughData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::OBPassThroughData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::msg::OBPassThroughData, _impl_.round_),
  PROTOBUF_FIELD_OFFSET(::msg::OBPassThroughData, _impl_.pvpplayerid_),
  PROTOBUF_FIELD_OFFSET(::msg::OBPassThroughData, _impl_.obplayerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::HistoryMaxCupMmr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::HistoryMaxCupMmr, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::msg::HistoryMaxCupMmr, _impl_.mmr_),
  PROTOBUF_FIELD_OFFSET(::msg::HistoryMaxCupMmr, _impl_.period_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat_ShowItemsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat_ShowItemsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat_ShowItemsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat_ShowItemsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.emotion_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.chattype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.quickchat_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.headpic_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.showitems_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.iswatcher_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.province_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.platform_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.passporttypeids_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.channeltype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.channelusrid_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.ps4only_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.restricttype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.guildname_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.guildsign_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.sourcetype_),
  PROTOBUF_FIELD_OFFSET(::msg::CSNtfPvpChat, _impl_.exchangestate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerObServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::msg::PlayerObServerInfo, _impl_.pvpid_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerObServerInfo, _impl_.obsvrid_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerObServerInfo, _impl_.obplayerid_),
  PROTOBUF_FIELD_OFFSET(::msg::PlayerObServerInfo, _impl_.pvpsvrid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::msg::BountySetting)},
  { 9, -1, -1, sizeof(::msg::TeamOPSetting)},
  { 28, -1, -1, sizeof(::msg::WorkshopSetting)},
  { 38, -1, -1, sizeof(::msg::TeamOPChangeGroup)},
  { 47, -1, -1, sizeof(::msg::TeamOPSelfChangeGroup)},
  { 55, -1, -1, sizeof(::msg::TeamOPAppointLeader)},
  { 62, -1, -1, sizeof(::msg::TeamOPChangeName)},
  { 69, -1, -1, sizeof(::msg::TeamOPSwitchSlot)},
  { 81, -1, -1, sizeof(::msg::TeamBetOnBounty)},
  { 88, -1, -1, sizeof(::msg::TeamOP)},
  { 103, -1, -1, sizeof(::msg::TeamBaseInfo)},
  { 120, 128, -1, sizeof(::msg::Award_AffixsEntry_DoNotUse)},
  { 130, -1, -1, sizeof(::msg::Award)},
  { 150, 158, -1, sizeof(::msg::UpdatePlayerData_ChessSkinDataEntry_DoNotUse)},
  { 160, 168, -1, sizeof(::msg::UpdatePlayerData_ShowItemsEntry_DoNotUse)},
  { 170, 178, -1, sizeof(::msg::UpdatePlayerData_SkinDataEntry_DoNotUse)},
  { 180, -1, -1, sizeof(::msg::UpdatePlayerData)},
  { 197, -1, -1, sizeof(::msg::SkipType)},
  { 205, -1, -1, sizeof(::msg::BuffEffect)},
  { 213, -1, -1, sizeof(::msg::Consume)},
  { 223, 231, -1, sizeof(::msg::CSDTItem_AffixsEntry_DoNotUse)},
  { 233, -1, -1, sizeof(::msg::CSDTItem)},
  { 252, -1, -1, sizeof(::msg::ItemAffix)},
  { 262, -1, -1, sizeof(::msg::CSDTItemMedal)},
  { 272, -1, -1, sizeof(::msg::CSDTItemID)},
  { 283, -1, -1, sizeof(::msg::CSDTBagPara)},
  { 295, -1, -1, sizeof(::msg::CSDTBagItem)},
  { 303, -1, -1, sizeof(::msg::CSDTPlayerStatusInfo)},
  { 324, -1, -1, sizeof(::msg::CSDTPvpWinData)},
  { 332, 340, -1, sizeof(::msg::CSDTChessPlrInfo_EquipsEntry_DoNotUse)},
  { 342, -1, -1, sizeof(::msg::CSDTChessPlrInfo)},
  { 350, 358, -1, sizeof(::msg::CSDTPuzzle_ItemMapEntry_DoNotUse)},
  { 360, -1, -1, sizeof(::msg::CSDTPuzzle)},
  { 370, 378, -1, sizeof(::msg::ChessSkinSlotData_SlotsEntry_DoNotUse)},
  { 380, -1, -1, sizeof(::msg::ChessSkinSlotData)},
  { 387, 395, -1, sizeof(::msg::PvpPlayerData_ModeWinDatasEntry_DoNotUse)},
  { 397, 405, -1, sizeof(::msg::PvpPlayerData_CurShowItemsEntry_DoNotUse)},
  { 407, 415, -1, sizeof(::msg::PvpPlayerData_SettingsEntry_DoNotUse)},
  { 417, 425, -1, sizeof(::msg::PvpPlayerData_SwitchItemsEntry_DoNotUse)},
  { 427, 435, -1, sizeof(::msg::PvpPlayerData_PunishmentEntry_DoNotUse)},
  { 437, 445, -1, sizeof(::msg::PvpPlayerData_RegionDelaysEntry_DoNotUse)},
  { 447, 455, -1, sizeof(::msg::PvpPlayerData_TicketsEntry_DoNotUse)},
  { 457, 465, -1, sizeof(::msg::PvpPlayerData_CurrencysEntry_DoNotUse)},
  { 467, 475, -1, sizeof(::msg::PvpPlayerData_ChessSkinDataEntry_DoNotUse)},
  { 477, 485, -1, sizeof(::msg::PvpPlayerData_SkinDataEntry_DoNotUse)},
  { 487, -1, -1, sizeof(::msg::PvpPlayerData)},
  { 581, -1, -1, sizeof(::msg::PvpData)},
  { 590, -1, -1, sizeof(::msg::TDCardGroup)},
  { 597, -1, -1, sizeof(::msg::TDCardGroups)},
  { 606, 614, -1, sizeof(::msg::TDItemGroup_ItemsEntry_DoNotUse)},
  { 616, -1, -1, sizeof(::msg::TDItemGroup)},
  { 624, -1, -1, sizeof(::msg::TowerDefenseData)},
  { 631, -1, -1, sizeof(::msg::KernelCardGroup)},
  { 638, -1, -1, sizeof(::msg::KernelChessInfo)},
  { 647, -1, -1, sizeof(::msg::ApplyWorkshopRule)},
  { 654, -1, -1, sizeof(::msg::CSDTVisitedMap)},
  { 664, 672, -1, sizeof(::msg::VisitedMaps_MapsEntry_DoNotUse)},
  { 674, -1, -1, sizeof(::msg::VisitedMaps)},
  { 682, -1, -1, sizeof(::msg::CSDTCurShowItem)},
  { 690, -1, -1, sizeof(::msg::CSDTPassportHistory)},
  { 699, -1, -1, sizeof(::msg::ExchangeRecord)},
  { 708, 716, -1, sizeof(::msg::CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse)},
  { 718, 726, -1, sizeof(::msg::CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse)},
  { 728, 736, -1, sizeof(::msg::CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse)},
  { 738, 746, -1, sizeof(::msg::CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse)},
  { 748, -1, -1, sizeof(::msg::CSDTPlayerBaseInfo)},
  { 802, -1, -1, sizeof(::msg::PlayerGuildInfo)},
  { 812, 820, -1, sizeof(::msg::CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse)},
  { 822, -1, -1, sizeof(::msg::CSDTPlayerSimpleInfo)},
  { 851, -1, -1, sizeof(::msg::CSDTPlayerRankInfo)},
  { 863, -1, -1, sizeof(::msg::CSDTPlayerTournamentInfo)},
  { 871, -1, -1, sizeof(::msg::CSDTPvpHistory)},
  { 881, -1, -1, sizeof(::msg::CSDTPlayerPvpInfo)},
  { 888, -1, -1, sizeof(::msg::CSDTPlayerDetailInfo)},
  { 897, -1, -1, sizeof(::msg::CSDTPlayerItems)},
  { 905, -1, -1, sizeof(::msg::CSDTRankSeasonData)},
  { 919, 927, -1, sizeof(::msg::CSDTRankSeasonInfo_ModesEntry_DoNotUse)},
  { 929, -1, -1, sizeof(::msg::CSDTRankSeasonInfo)},
  { 943, 951, -1, sizeof(::msg::CSDTStat_SeasonInfoEntry_DoNotUse)},
  { 953, -1, -1, sizeof(::msg::CSDTStat)},
  { 977, -1, -1, sizeof(::msg::CSDTNumRankItem)},
  { 988, -1, -1, sizeof(::msg::CSDTWorldChat)},
  { 1005, -1, -1, sizeof(::msg::CSDTBuffAct)},
  { 1024, 1032, -1, sizeof(::msg::CSDTMail_DictEntry_DoNotUse)},
  { 1034, -1, -1, sizeof(::msg::CSDTMail)},
  { 1055, -1, -1, sizeof(::msg::CSDTNoticeInfo)},
  { 1062, -1, -1, sizeof(::msg::CSDTNotice)},
  { 1099, -1, -1, sizeof(::msg::CSDTAdsInfo)},
  { 1106, -1, -1, sizeof(::msg::CSDTAds)},
  { 1125, -1, -1, sizeof(::msg::Contest)},
  { 1141, -1, -1, sizeof(::msg::Effect)},
  { 1150, -1, -1, sizeof(::msg::ChessDamageStat)},
  { 1161, -1, -1, sizeof(::msg::SelectEquip)},
  { 1169, -1, -1, sizeof(::msg::Equip)},
  { 1178, 1186, -1, sizeof(::msg::CSDTRoundItem_EnemyLeftChessEntry_DoNotUse)},
  { 1188, 1196, -1, sizeof(::msg::CSDTRoundItem_SelfLeftChessEntry_DoNotUse)},
  { 1198, 1206, -1, sizeof(::msg::CSDTRoundItem_DropEquipEntry_DoNotUse)},
  { 1208, 1216, -1, sizeof(::msg::CSDTRoundItem_SelfBattleChessEntry_DoNotUse)},
  { 1218, 1226, -1, sizeof(::msg::CSDTRoundItem_EnemyBattleChessEntry_DoNotUse)},
  { 1228, 1236, -1, sizeof(::msg::CSDTRoundItem_BuyChessListEntry_DoNotUse)},
  { 1238, 1246, -1, sizeof(::msg::CSDTRoundItem_EquipComposeListEntry_DoNotUse)},
  { 1248, 1256, -1, sizeof(::msg::CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse)},
  { 1258, 1266, -1, sizeof(::msg::CSDTRoundItem_MoneySourceListEntry_DoNotUse)},
  { 1268, 1276, -1, sizeof(::msg::CSDTRoundItem_MoneyPayListEntry_DoNotUse)},
  { 1278, 1286, -1, sizeof(::msg::CSDTRoundItem_SellChessListEntry_DoNotUse)},
  { 1288, 1296, -1, sizeof(::msg::CSDTRoundItem_EquipComposeStructListEntry_DoNotUse)},
  { 1298, -1, -1, sizeof(::msg::CSDTRoundItem)},
  { 1351, -1, -1, sizeof(::msg::CSDTRound)},
  { 1358, -1, -1, sizeof(::msg::CSDTRoundEnd)},
  { 1366, 1374, -1, sizeof(::msg::CSDTPvpStat_PlayerRoundEntry_DoNotUse)},
  { 1376, -1, -1, sizeof(::msg::CSDTPvpStat)},
  { 1392, -1, -1, sizeof(::msg::CSDTPvpCampResult)},
  { 1404, -1, -1, sizeof(::msg::CSDTCampData)},
  { 1415, -1, -1, sizeof(::msg::CSDTRoleStat)},
  { 1427, -1, -1, sizeof(::msg::CSDTPvpMvp)},
  { 1435, 1443, -1, sizeof(::msg::CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse)},
  { 1445, 1453, -1, sizeof(::msg::CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse)},
  { 1455, 1463, -1, sizeof(::msg::CSDTPvpPlayerStat_ChessProEntry_DoNotUse)},
  { 1465, 1473, -1, sizeof(::msg::CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse)},
  { 1475, 1483, -1, sizeof(::msg::CSDTPvpPlayerStat_PveItemsEntry_DoNotUse)},
  { 1485, -1, -1, sizeof(::msg::CSDTPvpPlayerStat)},
  { 1547, -1, -1, sizeof(::msg::KernelItem)},
  { 1555, -1, -1, sizeof(::msg::CSDTFetters)},
  { 1564, -1, -1, sizeof(::msg::CSDTPlayerFinish)},
  { 1575, -1, -1, sizeof(::msg::CSDTMarqueeItem)},
  { 1587, -1, -1, sizeof(::msg::CSDTMarquee)},
  { 1594, -1, -1, sizeof(::msg::Cond)},
  { 1603, -1, -1, sizeof(::msg::CSDTChessPlayerEquip)},
  { 1611, 1619, -1, sizeof(::msg::CSDTChessPlayer_EquipsEntry_DoNotUse)},
  { 1621, 1629, -1, sizeof(::msg::CSDTChessPlayer_EquipEntry_DoNotUse)},
  { 1631, -1, -1, sizeof(::msg::CSDTChessPlayer)},
  { 1645, -1, -1, sizeof(::msg::CSDTTelBook)},
  { 1655, -1, -1, sizeof(::msg::LanguageData)},
  { 1663, 1671, -1, sizeof(::msg::GMLanguageData_LanguagesEntry_DoNotUse)},
  { 1673, -1, -1, sizeof(::msg::GMLanguageData)},
  { 1681, -1, -1, sizeof(::msg::CommonKVString)},
  { 1689, -1, -1, sizeof(::msg::CDNLanguageData)},
  { 1697, -1, -1, sizeof(::msg::CSDTSeason)},
  { 1706, 1714, -1, sizeof(::msg::CSDTActivity_GroupsEntry_DoNotUse)},
  { 1716, -1, -1, sizeof(::msg::CSDTActivity)},
  { 1725, 1733, -1, sizeof(::msg::CSDTActivityGroup_ActivitiesEntry_DoNotUse)},
  { 1735, -1, -1, sizeof(::msg::CSDTActivityGroup)},
  { 1748, -1, -1, sizeof(::msg::CSDTActivityDetail)},
  { 1759, 1767, -1, sizeof(::msg::CSDTActivityRecord_ProcessEntry_DoNotUse)},
  { 1769, 1777, -1, sizeof(::msg::CSDTActivityRecord_RewardEntry_DoNotUse)},
  { 1779, -1, -1, sizeof(::msg::CSDTActivityRecord)},
  { 1788, 1796, -1, sizeof(::msg::CSDTRecruitData_IsRecruitedEntry_DoNotUse)},
  { 1798, -1, -1, sizeof(::msg::CSDTRecruitData)},
  { 1805, -1, -1, sizeof(::msg::CSDTRecruitPlayer)},
  { 1813, 1821, -1, sizeof(::msg::CSDTActivityRecruit_PlayersEntry_DoNotUse)},
  { 1823, -1, -1, sizeof(::msg::CSDTActivityRecruit)},
  { 1830, 1838, -1, sizeof(::msg::CSDTActGroupBuy_ProcessEntry_DoNotUse)},
  { 1840, 1848, -1, sizeof(::msg::CSDTActGroupBuy_RewardEntry_DoNotUse)},
  { 1850, -1, -1, sizeof(::msg::CSDTActGroupBuy)},
  { 1858, 1866, -1, sizeof(::msg::CSDTActGroupBuyRwd_RewardsEntry_DoNotUse)},
  { 1868, -1, -1, sizeof(::msg::CSDTActGroupBuyRwd)},
  { 1875, 1883, -1, sizeof(::msg::CSDTActRecruitData_PlayersEntry_DoNotUse)},
  { 1885, -1, -1, sizeof(::msg::CSDTActRecruitData)},
  { 1893, -1, -1, sizeof(::msg::CSDTActLuckMallData)},
  { 1902, -1, -1, sizeof(::msg::CSDTMelee)},
  { 1912, -1, -1, sizeof(::msg::CSDTTeamSlotPlayer)},
  { 1931, -1, -1, sizeof(::msg::CSDTTeamVoicePlayer)},
  { 1941, -1, -1, sizeof(::msg::ActivityGroupData)},
  { 1985, -1, -1, sizeof(::msg::ActivityData)},
  { 2009, -1, -1, sizeof(::msg::ActivityAttrData)},
  { 2018, -1, -1, sizeof(::msg::GMLanguageInfo)},
  { 2026, -1, -1, sizeof(::msg::PlayLimit)},
  { 2034, -1, -1, sizeof(::msg::ChannelFunctionData)},
  { 2047, -1, -1, sizeof(::msg::PvpHistoryData)},
  { 2065, -1, -1, sizeof(::msg::CSDTGuide)},
  { 2076, -1, -1, sizeof(::msg::CSDTChat)},
  { 2090, -1, -1, sizeof(::msg::CSDTGoods)},
  { 2099, -1, -1, sizeof(::msg::CSDTGoodsInfo)},
  { 2108, -1, -1, sizeof(::msg::MallTabData)},
  { 2120, -1, -1, sizeof(::msg::Skip)},
  { 2128, -1, -1, sizeof(::msg::MallGoodsData)},
  { 2185, -1, -1, sizeof(::msg::ConsumeIncrease)},
  { 2192, -1, -1, sizeof(::msg::CSDTMallGoodsData)},
  { 2201, -1, -1, sizeof(::msg::CSDTMallGoods)},
  { 2208, -1, -1, sizeof(::msg::CSDTMallBuyCountData)},
  { 2217, -1, -1, sizeof(::msg::CSDTMallBuyCount)},
  { 2224, -1, -1, sizeof(::msg::MallNoticeData)},
  { 2240, -1, -1, sizeof(::msg::CSDTCommonRandList)},
  { 2248, -1, -1, sizeof(::msg::Sign)},
  { 2256, -1, -1, sizeof(::msg::CSDTSignData)},
  { 2271, -1, -1, sizeof(::msg::MatchTeamData)},
  { 2281, -1, -1, sizeof(::msg::CSDTRecommendPlayer)},
  { 2299, -1, -1, sizeof(::msg::CSDTThirdPvpInfo)},
  { 2314, -1, -1, sizeof(::msg::CSDTRecommendPvpInfo)},
  { 2329, -1, -1, sizeof(::msg::WxVVipData)},
  { 2339, -1, -1, sizeof(::msg::CSDTWxRedPktItem)},
  { 2347, -1, -1, sizeof(::msg::CSDTWxRedPktProfile)},
  { 2355, -1, -1, sizeof(::msg::CSDTWxVVipRankItem)},
  { 2365, -1, -1, sizeof(::msg::CSDTSlotInfo)},
  { 2373, -1, -1, sizeof(::msg::CSDTRedPktData)},
  { 2382, -1, -1, sizeof(::msg::CSDTRedPktInfo)},
  { 2391, -1, -1, sizeof(::msg::SwitchItem)},
  { 2400, -1, -1, sizeof(::msg::CreditCfgItem)},
  { 2410, -1, -1, sizeof(::msg::CSDTPunishment)},
  { 2420, -1, -1, sizeof(::msg::CSDTPlayer)},
  { 2428, -1, -1, sizeof(::msg::CSDTBriefPunishment)},
  { 2436, -1, -1, sizeof(::msg::PlayerConfirmInfo)},
  { 2447, -1, -1, sizeof(::msg::AnswerData)},
  { 2455, -1, -1, sizeof(::msg::VideoInfo)},
  { 2467, -1, -1, sizeof(::msg::CSDTAddictionInfo)},
  { 2476, -1, -1, sizeof(::msg::KrAddictionInfo)},
  { 2489, -1, -1, sizeof(::msg::MultiPlayer)},
  { 2505, -1, -1, sizeof(::msg::CSDTBannerInfo)},
  { 2512, -1, -1, sizeof(::msg::CSDTBanner)},
  { 2535, 2543, -1, sizeof(::msg::CSDTTournament_RankInfoEntry_DoNotUse)},
  { 2545, 2553, -1, sizeof(::msg::CSDTTournament_PointsEntry_DoNotUse)},
  { 2555, 2563, -1, sizeof(::msg::CSDTTournament_RoundPointsEntry_DoNotUse)},
  { 2565, -1, -1, sizeof(::msg::CSDTTournament)},
  { 2588, 2596, -1, sizeof(::msg::CSDTActDaySign_SignDayEntry_DoNotUse)},
  { 2598, -1, -1, sizeof(::msg::CSDTActDaySign)},
  { 2610, -1, -1, sizeof(::msg::CSDTActDaySignDetail)},
  { 2618, -1, -1, sizeof(::msg::CSDTGDCommonBin)},
  { 2628, 2636, -1, sizeof(::msg::CSDTTournamentClass_GroupsEntry_DoNotUse)},
  { 2638, -1, -1, sizeof(::msg::CSDTTournamentClass)},
  { 2648, 2656, -1, sizeof(::msg::CSDTBattleGroup_PlayersEntry_DoNotUse)},
  { 2658, 2666, -1, sizeof(::msg::CSDTBattleGroup_GameIDsEntry_DoNotUse)},
  { 2668, -1, -1, sizeof(::msg::CSDTBattleGroup)},
  { 2680, -1, -1, sizeof(::msg::CSDTEnrollEnd)},
  { 2689, 2697, -1, sizeof(::msg::CSDTNewTournament_ClassesEntry_DoNotUse)},
  { 2699, -1, -1, sizeof(::msg::CSDTNewTournament)},
  { 2707, -1, -1, sizeof(::msg::TournamentDesc)},
  { 2717, -1, -1, sizeof(::msg::TournamentRoom)},
  { 2733, 2741, -1, sizeof(::msg::PlayerTournament_DataEntry_DoNotUse)},
  { 2743, 2751, -1, sizeof(::msg::PlayerTournament_PointsEntry_DoNotUse)},
  { 2753, 2761, -1, sizeof(::msg::PlayerTournament_EnrollCountEntry_DoNotUse)},
  { 2763, -1, -1, sizeof(::msg::PlayerTournament)},
  { 2773, 2781, -1, sizeof(::msg::PlayerTournamentData_GetRewardEntry_DoNotUse)},
  { 2783, 2791, -1, sizeof(::msg::PlayerTournamentData_PointsEntry_DoNotUse)},
  { 2793, 2801, -1, sizeof(::msg::PlayerTournamentData_DataEntry_DoNotUse)},
  { 2803, -1, -1, sizeof(::msg::PlayerTournamentData)},
  { 2820, 2828, -1, sizeof(::msg::RoundData_PointsEntry_DoNotUse)},
  { 2830, -1, -1, sizeof(::msg::RoundData)},
  { 2847, -1, -1, sizeof(::msg::GuildBaseInfo)},
  { 2870, -1, -1, sizeof(::msg::GuildAttr)},
  { 2888, -1, -1, sizeof(::msg::GuildApplicant)},
  { 2897, -1, -1, sizeof(::msg::GuildMember)},
  { 2906, -1, -1, sizeof(::msg::GuildExtraInfo)},
  { 2915, -1, -1, sizeof(::msg::GuildChatInfo)},
  { 2927, 2935, -1, sizeof(::msg::GuildLog_ParaEntry_DoNotUse)},
  { 2937, -1, -1, sizeof(::msg::GuildLog)},
  { 2948, -1, -1, sizeof(::msg::GuildApplyInfo)},
  { 2956, -1, -1, sizeof(::msg::GuildPlayerRole)},
  { 2965, -1, -1, sizeof(::msg::ChestRecord)},
  { 2973, -1, -1, sizeof(::msg::TeamDesc)},
  { 2981, -1, -1, sizeof(::msg::CSDTTaskItem)},
  { 2990, -1, -1, sizeof(::msg::OssPlayerData)},
  { 2998, 3006, -1, sizeof(::msg::BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse)},
  { 3008, -1, -1, sizeof(::msg::BattleExtData)},
  { 3030, -1, -1, sizeof(::msg::PvpExtData)},
  { 3045, 3053, -1, sizeof(::msg::PlayerExtMap_AssistantMapEntry_DoNotUse)},
  { 3055, 3063, -1, sizeof(::msg::PlayerExtMap_BattleTimeMapEntry_DoNotUse)},
  { 3065, 3073, -1, sizeof(::msg::PlayerExtMap_PveBuffEntry_DoNotUse)},
  { 3075, 3083, -1, sizeof(::msg::PlayerExtMap_MsRelationEntry_DoNotUse)},
  { 3085, 3093, -1, sizeof(::msg::PlayerExtMap_PvpPlayerGroupEntry_DoNotUse)},
  { 3095, -1, -1, sizeof(::msg::PlayerExtMap)},
  { 3106, -1, -1, sizeof(::msg::Buffs)},
  { 3113, -1, -1, sizeof(::msg::ActivityGroup)},
  { 3121, -1, -1, sizeof(::msg::ScoredMap)},
  { 3129, -1, -1, sizeof(::msg::TransferEvent)},
  { 3140, -1, -1, sizeof(::msg::TransferOP)},
  { 3150, 3158, -1, sizeof(::msg::CSDTBetData_BetFromPlayersEntry_DoNotUse)},
  { 3160, -1, -1, sizeof(::msg::CSDTBetData)},
  { 3169, -1, -1, sizeof(::msg::MailExtData)},
  { 3176, -1, -1, sizeof(::msg::ExtItem)},
  { 3189, -1, -1, sizeof(::msg::CSDTTasks)},
  { 3197, -1, -1, sizeof(::msg::PvpTeachResult)},
  { 3205, -1, -1, sizeof(::msg::PvpBigWinnerData)},
  { 3216, 3224, -1, sizeof(::msg::PveExData_TalentEntry_DoNotUse)},
  { 3226, -1, -1, sizeof(::msg::PveExData)},
  { 3233, -1, -1, sizeof(::msg::ChampionInfo)},
  { 3242, -1, -1, sizeof(::msg::TopRank)},
  { 3251, -1, -1, sizeof(::msg::ChampionInfoList)},
  { 3258, 3266, -1, sizeof(::msg::TournamentHistory_ChampionHistoryEntry_DoNotUse)},
  { 3268, 3276, -1, sizeof(::msg::TournamentHistory_TopRankHistoryEntry_DoNotUse)},
  { 3278, -1, -1, sizeof(::msg::TournamentHistory)},
  { 3286, 3294, -1, sizeof(::msg::CSReqLogin_AuthSDKCodeEntry_DoNotUse)},
  { 3296, -1, -1, sizeof(::msg::CSReqLogin)},
  { 3333, -1, -1, sizeof(::msg::Loc)},
  { 3341, -1, -1, sizeof(::msg::Authority)},
  { 3349, -1, -1, sizeof(::msg::GetNumRank)},
  { 3364, -1, -1, sizeof(::msg::CSDTPassportCard)},
  { 3372, 3380, -1, sizeof(::msg::PveDataInfo_DataEntry_DoNotUse)},
  { 3382, -1, -1, sizeof(::msg::PveDataInfo)},
  { 3389, 3397, -1, sizeof(::msg::Pve_ChessIdsEntry_DoNotUse)},
  { 3399, 3407, -1, sizeof(::msg::Pve_SkillsEntry_DoNotUse)},
  { 3409, 3417, -1, sizeof(::msg::Pve_BuffEntry_DoNotUse)},
  { 3419, -1, -1, sizeof(::msg::Pve)},
  { 3432, -1, -1, sizeof(::msg::PveBuff)},
  { 3440, -1, -1, sizeof(::msg::CardGroupData)},
  { 3452, -1, -1, sizeof(::msg::CardGroupChess)},
  { 3460, -1, -1, sizeof(::msg::ChessIds)},
  { 3467, -1, -1, sizeof(::msg::PveConsume)},
  { 3476, -1, -1, sizeof(::msg::PveSetting)},
  { 3483, -1, -1, sizeof(::msg::PlayerTeamInfo)},
  { 3490, -1, -1, sizeof(::msg::PveRankRedisInfo)},
  { 3498, -1, -1, sizeof(::msg::CSDTPlayerPvpData)},
  { 3506, -1, -1, sizeof(::msg::GmBan)},
  { 3516, -1, -1, sizeof(::msg::MentorInviteMsg)},
  { 3527, 3535, -1, sizeof(::msg::MentorInfo_TasksEntry_DoNotUse)},
  { 3537, -1, -1, sizeof(::msg::MentorInfo)},
  { 3549, 3557, -1, sizeof(::msg::Pupil_TasksEntry_DoNotUse)},
  { 3559, -1, -1, sizeof(::msg::Pupil)},
  { 3571, -1, -1, sizeof(::msg::TDUnUse)},
  { 3582, -1, -1, sizeof(::msg::TDItemId)},
  { 3590, 3598, -1, sizeof(::msg::TDItem_EquipmentsEntry_DoNotUse)},
  { 3600, -1, -1, sizeof(::msg::TDItem)},
  { 3611, -1, -1, sizeof(::msg::AddRecommendData)},
  { 3620, 3628, -1, sizeof(::msg::PlayerMentorShipInfo_TasksEntry_DoNotUse)},
  { 3630, -1, -1, sizeof(::msg::PlayerMentorShipInfo)},
  { 3645, -1, -1, sizeof(::msg::CSDTMentorRecommendPlayer)},
  { 3652, -1, -1, sizeof(::msg::PFDTTaskDetail)},
  { 3661, -1, -1, sizeof(::msg::CSDTMentorInfo)},
  { 3668, -1, -1, sizeof(::msg::OBPassThroughData)},
  { 3678, -1, -1, sizeof(::msg::HistoryMaxCupMmr)},
  { 3687, 3695, -1, sizeof(::msg::CSNtfPvpChat_ShowItemsEntry_DoNotUse)},
  { 3697, -1, -1, sizeof(::msg::CSNtfPvpChat)},
  { 3727, -1, -1, sizeof(::msg::PlayerObServerInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::msg::_BountySetting_default_instance_._instance,
  &::msg::_TeamOPSetting_default_instance_._instance,
  &::msg::_WorkshopSetting_default_instance_._instance,
  &::msg::_TeamOPChangeGroup_default_instance_._instance,
  &::msg::_TeamOPSelfChangeGroup_default_instance_._instance,
  &::msg::_TeamOPAppointLeader_default_instance_._instance,
  &::msg::_TeamOPChangeName_default_instance_._instance,
  &::msg::_TeamOPSwitchSlot_default_instance_._instance,
  &::msg::_TeamBetOnBounty_default_instance_._instance,
  &::msg::_TeamOP_default_instance_._instance,
  &::msg::_TeamBaseInfo_default_instance_._instance,
  &::msg::_Award_AffixsEntry_DoNotUse_default_instance_._instance,
  &::msg::_Award_default_instance_._instance,
  &::msg::_UpdatePlayerData_ChessSkinDataEntry_DoNotUse_default_instance_._instance,
  &::msg::_UpdatePlayerData_ShowItemsEntry_DoNotUse_default_instance_._instance,
  &::msg::_UpdatePlayerData_SkinDataEntry_DoNotUse_default_instance_._instance,
  &::msg::_UpdatePlayerData_default_instance_._instance,
  &::msg::_SkipType_default_instance_._instance,
  &::msg::_BuffEffect_default_instance_._instance,
  &::msg::_Consume_default_instance_._instance,
  &::msg::_CSDTItem_AffixsEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTItem_default_instance_._instance,
  &::msg::_ItemAffix_default_instance_._instance,
  &::msg::_CSDTItemMedal_default_instance_._instance,
  &::msg::_CSDTItemID_default_instance_._instance,
  &::msg::_CSDTBagPara_default_instance_._instance,
  &::msg::_CSDTBagItem_default_instance_._instance,
  &::msg::_CSDTPlayerStatusInfo_default_instance_._instance,
  &::msg::_CSDTPvpWinData_default_instance_._instance,
  &::msg::_CSDTChessPlrInfo_EquipsEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTChessPlrInfo_default_instance_._instance,
  &::msg::_CSDTPuzzle_ItemMapEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTPuzzle_default_instance_._instance,
  &::msg::_ChessSkinSlotData_SlotsEntry_DoNotUse_default_instance_._instance,
  &::msg::_ChessSkinSlotData_default_instance_._instance,
  &::msg::_PvpPlayerData_ModeWinDatasEntry_DoNotUse_default_instance_._instance,
  &::msg::_PvpPlayerData_CurShowItemsEntry_DoNotUse_default_instance_._instance,
  &::msg::_PvpPlayerData_SettingsEntry_DoNotUse_default_instance_._instance,
  &::msg::_PvpPlayerData_SwitchItemsEntry_DoNotUse_default_instance_._instance,
  &::msg::_PvpPlayerData_PunishmentEntry_DoNotUse_default_instance_._instance,
  &::msg::_PvpPlayerData_RegionDelaysEntry_DoNotUse_default_instance_._instance,
  &::msg::_PvpPlayerData_TicketsEntry_DoNotUse_default_instance_._instance,
  &::msg::_PvpPlayerData_CurrencysEntry_DoNotUse_default_instance_._instance,
  &::msg::_PvpPlayerData_ChessSkinDataEntry_DoNotUse_default_instance_._instance,
  &::msg::_PvpPlayerData_SkinDataEntry_DoNotUse_default_instance_._instance,
  &::msg::_PvpPlayerData_default_instance_._instance,
  &::msg::_PvpData_default_instance_._instance,
  &::msg::_TDCardGroup_default_instance_._instance,
  &::msg::_TDCardGroups_default_instance_._instance,
  &::msg::_TDItemGroup_ItemsEntry_DoNotUse_default_instance_._instance,
  &::msg::_TDItemGroup_default_instance_._instance,
  &::msg::_TowerDefenseData_default_instance_._instance,
  &::msg::_KernelCardGroup_default_instance_._instance,
  &::msg::_KernelChessInfo_default_instance_._instance,
  &::msg::_ApplyWorkshopRule_default_instance_._instance,
  &::msg::_CSDTVisitedMap_default_instance_._instance,
  &::msg::_VisitedMaps_MapsEntry_DoNotUse_default_instance_._instance,
  &::msg::_VisitedMaps_default_instance_._instance,
  &::msg::_CSDTCurShowItem_default_instance_._instance,
  &::msg::_CSDTPassportHistory_default_instance_._instance,
  &::msg::_ExchangeRecord_default_instance_._instance,
  &::msg::_CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTPlayerBaseInfo_default_instance_._instance,
  &::msg::_PlayerGuildInfo_default_instance_._instance,
  &::msg::_CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTPlayerSimpleInfo_default_instance_._instance,
  &::msg::_CSDTPlayerRankInfo_default_instance_._instance,
  &::msg::_CSDTPlayerTournamentInfo_default_instance_._instance,
  &::msg::_CSDTPvpHistory_default_instance_._instance,
  &::msg::_CSDTPlayerPvpInfo_default_instance_._instance,
  &::msg::_CSDTPlayerDetailInfo_default_instance_._instance,
  &::msg::_CSDTPlayerItems_default_instance_._instance,
  &::msg::_CSDTRankSeasonData_default_instance_._instance,
  &::msg::_CSDTRankSeasonInfo_ModesEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTRankSeasonInfo_default_instance_._instance,
  &::msg::_CSDTStat_SeasonInfoEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTStat_default_instance_._instance,
  &::msg::_CSDTNumRankItem_default_instance_._instance,
  &::msg::_CSDTWorldChat_default_instance_._instance,
  &::msg::_CSDTBuffAct_default_instance_._instance,
  &::msg::_CSDTMail_DictEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTMail_default_instance_._instance,
  &::msg::_CSDTNoticeInfo_default_instance_._instance,
  &::msg::_CSDTNotice_default_instance_._instance,
  &::msg::_CSDTAdsInfo_default_instance_._instance,
  &::msg::_CSDTAds_default_instance_._instance,
  &::msg::_Contest_default_instance_._instance,
  &::msg::_Effect_default_instance_._instance,
  &::msg::_ChessDamageStat_default_instance_._instance,
  &::msg::_SelectEquip_default_instance_._instance,
  &::msg::_Equip_default_instance_._instance,
  &::msg::_CSDTRoundItem_EnemyLeftChessEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTRoundItem_SelfLeftChessEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTRoundItem_DropEquipEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTRoundItem_SelfBattleChessEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTRoundItem_EnemyBattleChessEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTRoundItem_BuyChessListEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTRoundItem_EquipComposeListEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTRoundItem_MoneySourceListEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTRoundItem_MoneyPayListEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTRoundItem_SellChessListEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTRoundItem_EquipComposeStructListEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTRoundItem_default_instance_._instance,
  &::msg::_CSDTRound_default_instance_._instance,
  &::msg::_CSDTRoundEnd_default_instance_._instance,
  &::msg::_CSDTPvpStat_PlayerRoundEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTPvpStat_default_instance_._instance,
  &::msg::_CSDTPvpCampResult_default_instance_._instance,
  &::msg::_CSDTCampData_default_instance_._instance,
  &::msg::_CSDTRoleStat_default_instance_._instance,
  &::msg::_CSDTPvpMvp_default_instance_._instance,
  &::msg::_CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTPvpPlayerStat_ChessProEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTPvpPlayerStat_PveItemsEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTPvpPlayerStat_default_instance_._instance,
  &::msg::_KernelItem_default_instance_._instance,
  &::msg::_CSDTFetters_default_instance_._instance,
  &::msg::_CSDTPlayerFinish_default_instance_._instance,
  &::msg::_CSDTMarqueeItem_default_instance_._instance,
  &::msg::_CSDTMarquee_default_instance_._instance,
  &::msg::_Cond_default_instance_._instance,
  &::msg::_CSDTChessPlayerEquip_default_instance_._instance,
  &::msg::_CSDTChessPlayer_EquipsEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTChessPlayer_EquipEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTChessPlayer_default_instance_._instance,
  &::msg::_CSDTTelBook_default_instance_._instance,
  &::msg::_LanguageData_default_instance_._instance,
  &::msg::_GMLanguageData_LanguagesEntry_DoNotUse_default_instance_._instance,
  &::msg::_GMLanguageData_default_instance_._instance,
  &::msg::_CommonKVString_default_instance_._instance,
  &::msg::_CDNLanguageData_default_instance_._instance,
  &::msg::_CSDTSeason_default_instance_._instance,
  &::msg::_CSDTActivity_GroupsEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTActivity_default_instance_._instance,
  &::msg::_CSDTActivityGroup_ActivitiesEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTActivityGroup_default_instance_._instance,
  &::msg::_CSDTActivityDetail_default_instance_._instance,
  &::msg::_CSDTActivityRecord_ProcessEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTActivityRecord_RewardEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTActivityRecord_default_instance_._instance,
  &::msg::_CSDTRecruitData_IsRecruitedEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTRecruitData_default_instance_._instance,
  &::msg::_CSDTRecruitPlayer_default_instance_._instance,
  &::msg::_CSDTActivityRecruit_PlayersEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTActivityRecruit_default_instance_._instance,
  &::msg::_CSDTActGroupBuy_ProcessEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTActGroupBuy_RewardEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTActGroupBuy_default_instance_._instance,
  &::msg::_CSDTActGroupBuyRwd_RewardsEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTActGroupBuyRwd_default_instance_._instance,
  &::msg::_CSDTActRecruitData_PlayersEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTActRecruitData_default_instance_._instance,
  &::msg::_CSDTActLuckMallData_default_instance_._instance,
  &::msg::_CSDTMelee_default_instance_._instance,
  &::msg::_CSDTTeamSlotPlayer_default_instance_._instance,
  &::msg::_CSDTTeamVoicePlayer_default_instance_._instance,
  &::msg::_ActivityGroupData_default_instance_._instance,
  &::msg::_ActivityData_default_instance_._instance,
  &::msg::_ActivityAttrData_default_instance_._instance,
  &::msg::_GMLanguageInfo_default_instance_._instance,
  &::msg::_PlayLimit_default_instance_._instance,
  &::msg::_ChannelFunctionData_default_instance_._instance,
  &::msg::_PvpHistoryData_default_instance_._instance,
  &::msg::_CSDTGuide_default_instance_._instance,
  &::msg::_CSDTChat_default_instance_._instance,
  &::msg::_CSDTGoods_default_instance_._instance,
  &::msg::_CSDTGoodsInfo_default_instance_._instance,
  &::msg::_MallTabData_default_instance_._instance,
  &::msg::_Skip_default_instance_._instance,
  &::msg::_MallGoodsData_default_instance_._instance,
  &::msg::_ConsumeIncrease_default_instance_._instance,
  &::msg::_CSDTMallGoodsData_default_instance_._instance,
  &::msg::_CSDTMallGoods_default_instance_._instance,
  &::msg::_CSDTMallBuyCountData_default_instance_._instance,
  &::msg::_CSDTMallBuyCount_default_instance_._instance,
  &::msg::_MallNoticeData_default_instance_._instance,
  &::msg::_CSDTCommonRandList_default_instance_._instance,
  &::msg::_Sign_default_instance_._instance,
  &::msg::_CSDTSignData_default_instance_._instance,
  &::msg::_MatchTeamData_default_instance_._instance,
  &::msg::_CSDTRecommendPlayer_default_instance_._instance,
  &::msg::_CSDTThirdPvpInfo_default_instance_._instance,
  &::msg::_CSDTRecommendPvpInfo_default_instance_._instance,
  &::msg::_WxVVipData_default_instance_._instance,
  &::msg::_CSDTWxRedPktItem_default_instance_._instance,
  &::msg::_CSDTWxRedPktProfile_default_instance_._instance,
  &::msg::_CSDTWxVVipRankItem_default_instance_._instance,
  &::msg::_CSDTSlotInfo_default_instance_._instance,
  &::msg::_CSDTRedPktData_default_instance_._instance,
  &::msg::_CSDTRedPktInfo_default_instance_._instance,
  &::msg::_SwitchItem_default_instance_._instance,
  &::msg::_CreditCfgItem_default_instance_._instance,
  &::msg::_CSDTPunishment_default_instance_._instance,
  &::msg::_CSDTPlayer_default_instance_._instance,
  &::msg::_CSDTBriefPunishment_default_instance_._instance,
  &::msg::_PlayerConfirmInfo_default_instance_._instance,
  &::msg::_AnswerData_default_instance_._instance,
  &::msg::_VideoInfo_default_instance_._instance,
  &::msg::_CSDTAddictionInfo_default_instance_._instance,
  &::msg::_KrAddictionInfo_default_instance_._instance,
  &::msg::_MultiPlayer_default_instance_._instance,
  &::msg::_CSDTBannerInfo_default_instance_._instance,
  &::msg::_CSDTBanner_default_instance_._instance,
  &::msg::_CSDTTournament_RankInfoEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTTournament_PointsEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTTournament_RoundPointsEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTTournament_default_instance_._instance,
  &::msg::_CSDTActDaySign_SignDayEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTActDaySign_default_instance_._instance,
  &::msg::_CSDTActDaySignDetail_default_instance_._instance,
  &::msg::_CSDTGDCommonBin_default_instance_._instance,
  &::msg::_CSDTTournamentClass_GroupsEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTTournamentClass_default_instance_._instance,
  &::msg::_CSDTBattleGroup_PlayersEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTBattleGroup_GameIDsEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTBattleGroup_default_instance_._instance,
  &::msg::_CSDTEnrollEnd_default_instance_._instance,
  &::msg::_CSDTNewTournament_ClassesEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTNewTournament_default_instance_._instance,
  &::msg::_TournamentDesc_default_instance_._instance,
  &::msg::_TournamentRoom_default_instance_._instance,
  &::msg::_PlayerTournament_DataEntry_DoNotUse_default_instance_._instance,
  &::msg::_PlayerTournament_PointsEntry_DoNotUse_default_instance_._instance,
  &::msg::_PlayerTournament_EnrollCountEntry_DoNotUse_default_instance_._instance,
  &::msg::_PlayerTournament_default_instance_._instance,
  &::msg::_PlayerTournamentData_GetRewardEntry_DoNotUse_default_instance_._instance,
  &::msg::_PlayerTournamentData_PointsEntry_DoNotUse_default_instance_._instance,
  &::msg::_PlayerTournamentData_DataEntry_DoNotUse_default_instance_._instance,
  &::msg::_PlayerTournamentData_default_instance_._instance,
  &::msg::_RoundData_PointsEntry_DoNotUse_default_instance_._instance,
  &::msg::_RoundData_default_instance_._instance,
  &::msg::_GuildBaseInfo_default_instance_._instance,
  &::msg::_GuildAttr_default_instance_._instance,
  &::msg::_GuildApplicant_default_instance_._instance,
  &::msg::_GuildMember_default_instance_._instance,
  &::msg::_GuildExtraInfo_default_instance_._instance,
  &::msg::_GuildChatInfo_default_instance_._instance,
  &::msg::_GuildLog_ParaEntry_DoNotUse_default_instance_._instance,
  &::msg::_GuildLog_default_instance_._instance,
  &::msg::_GuildApplyInfo_default_instance_._instance,
  &::msg::_GuildPlayerRole_default_instance_._instance,
  &::msg::_ChestRecord_default_instance_._instance,
  &::msg::_TeamDesc_default_instance_._instance,
  &::msg::_CSDTTaskItem_default_instance_._instance,
  &::msg::_OssPlayerData_default_instance_._instance,
  &::msg::_BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse_default_instance_._instance,
  &::msg::_BattleExtData_default_instance_._instance,
  &::msg::_PvpExtData_default_instance_._instance,
  &::msg::_PlayerExtMap_AssistantMapEntry_DoNotUse_default_instance_._instance,
  &::msg::_PlayerExtMap_BattleTimeMapEntry_DoNotUse_default_instance_._instance,
  &::msg::_PlayerExtMap_PveBuffEntry_DoNotUse_default_instance_._instance,
  &::msg::_PlayerExtMap_MsRelationEntry_DoNotUse_default_instance_._instance,
  &::msg::_PlayerExtMap_PvpPlayerGroupEntry_DoNotUse_default_instance_._instance,
  &::msg::_PlayerExtMap_default_instance_._instance,
  &::msg::_Buffs_default_instance_._instance,
  &::msg::_ActivityGroup_default_instance_._instance,
  &::msg::_ScoredMap_default_instance_._instance,
  &::msg::_TransferEvent_default_instance_._instance,
  &::msg::_TransferOP_default_instance_._instance,
  &::msg::_CSDTBetData_BetFromPlayersEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSDTBetData_default_instance_._instance,
  &::msg::_MailExtData_default_instance_._instance,
  &::msg::_ExtItem_default_instance_._instance,
  &::msg::_CSDTTasks_default_instance_._instance,
  &::msg::_PvpTeachResult_default_instance_._instance,
  &::msg::_PvpBigWinnerData_default_instance_._instance,
  &::msg::_PveExData_TalentEntry_DoNotUse_default_instance_._instance,
  &::msg::_PveExData_default_instance_._instance,
  &::msg::_ChampionInfo_default_instance_._instance,
  &::msg::_TopRank_default_instance_._instance,
  &::msg::_ChampionInfoList_default_instance_._instance,
  &::msg::_TournamentHistory_ChampionHistoryEntry_DoNotUse_default_instance_._instance,
  &::msg::_TournamentHistory_TopRankHistoryEntry_DoNotUse_default_instance_._instance,
  &::msg::_TournamentHistory_default_instance_._instance,
  &::msg::_CSReqLogin_AuthSDKCodeEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSReqLogin_default_instance_._instance,
  &::msg::_Loc_default_instance_._instance,
  &::msg::_Authority_default_instance_._instance,
  &::msg::_GetNumRank_default_instance_._instance,
  &::msg::_CSDTPassportCard_default_instance_._instance,
  &::msg::_PveDataInfo_DataEntry_DoNotUse_default_instance_._instance,
  &::msg::_PveDataInfo_default_instance_._instance,
  &::msg::_Pve_ChessIdsEntry_DoNotUse_default_instance_._instance,
  &::msg::_Pve_SkillsEntry_DoNotUse_default_instance_._instance,
  &::msg::_Pve_BuffEntry_DoNotUse_default_instance_._instance,
  &::msg::_Pve_default_instance_._instance,
  &::msg::_PveBuff_default_instance_._instance,
  &::msg::_CardGroupData_default_instance_._instance,
  &::msg::_CardGroupChess_default_instance_._instance,
  &::msg::_ChessIds_default_instance_._instance,
  &::msg::_PveConsume_default_instance_._instance,
  &::msg::_PveSetting_default_instance_._instance,
  &::msg::_PlayerTeamInfo_default_instance_._instance,
  &::msg::_PveRankRedisInfo_default_instance_._instance,
  &::msg::_CSDTPlayerPvpData_default_instance_._instance,
  &::msg::_GmBan_default_instance_._instance,
  &::msg::_MentorInviteMsg_default_instance_._instance,
  &::msg::_MentorInfo_TasksEntry_DoNotUse_default_instance_._instance,
  &::msg::_MentorInfo_default_instance_._instance,
  &::msg::_Pupil_TasksEntry_DoNotUse_default_instance_._instance,
  &::msg::_Pupil_default_instance_._instance,
  &::msg::_TDUnUse_default_instance_._instance,
  &::msg::_TDItemId_default_instance_._instance,
  &::msg::_TDItem_EquipmentsEntry_DoNotUse_default_instance_._instance,
  &::msg::_TDItem_default_instance_._instance,
  &::msg::_AddRecommendData_default_instance_._instance,
  &::msg::_PlayerMentorShipInfo_TasksEntry_DoNotUse_default_instance_._instance,
  &::msg::_PlayerMentorShipInfo_default_instance_._instance,
  &::msg::_CSDTMentorRecommendPlayer_default_instance_._instance,
  &::msg::_PFDTTaskDetail_default_instance_._instance,
  &::msg::_CSDTMentorInfo_default_instance_._instance,
  &::msg::_OBPassThroughData_default_instance_._instance,
  &::msg::_HistoryMaxCupMmr_default_instance_._instance,
  &::msg::_CSNtfPvpChat_ShowItemsEntry_DoNotUse_default_instance_._instance,
  &::msg::_CSNtfPvpChat_default_instance_._instance,
  &::msg::_PlayerObServerInfo_default_instance_._instance,
};

const char descriptor_table_protodef_common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  { '\n', '\014', 'c', 'o', 'm', 'm', 'o', 'n', '.', 'p', 'r', 'o', 't', 'o', '\022', '\003', 'm', 's', 'g', '\"', 'M', '\n', '\r', 'B', 'o', 
  'u', 'n', 't', 'y', 'S', 'e', 't', 't', 'i', 'n', 'g', '\022', '\022', '\n', '\n', 'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 'I', 'd', 
  '\030', '\001', ' ', '\001', '(', '\005', '\022', '\023', '\n', '\013', 'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 'M', 'i', 'n', '\030', '\002', ' ', '\001', 
  '(', '\005', '\022', '\023', '\n', '\013', 'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 'M', 'a', 'x', '\030', '\003', ' ', '\001', '(', '\005', '\"', '\310', 
  '\002', '\n', '\r', 'T', 'e', 'a', 'm', 'O', 'P', 'S', 'e', 't', 't', 'i', 'n', 'g', '\022', '\013', '\n', '\003', 'p', 'w', 'd', '\030', '\001', 
  ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'p', 'w', 'd', 'O', 'p', 'e', 'n', '\030', '\002', ' ', '\001', '(', '\010', '\022', '\017', '\n', '\007', 
  'v', 'i', 's', 'i', 'b', 'l', 'e', '\030', '\003', ' ', '\001', '(', '\010', '\022', '\027', '\n', '\017', 'i', 'n', 'v', 'i', 't', 'e', 'A', 'u', 
  't', 'h', 'o', 'r', 'i', 't', 'y', '\030', '\004', ' ', '\001', '(', '\005', '\022', '\037', '\n', '\010', 't', 'e', 'a', 'm', 'T', 'y', 'p', 'e', 
  '\030', '\005', ' ', '\001', '(', '\016', '2', '\r', '.', 'm', 's', 'g', '.', 'T', 'E', 'A', 'M', 'T', 'Y', 'P', 'E', '\022', '\014', '\n', '\004', 
  'n', 'a', 'm', 'e', '\030', '\006', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 's', 'u', 'b', 'M', 'o', 'd', 'e', '\030', '\007', ' ', '\001', 
  '(', '\r', '\022', '\022', '\n', '\n', 'l', 'o', 'c', 'k', 'G', 'r', 'o', 'u', 'p', 's', '\030', '\010', ' ', '\003', '(', '\010', '\022', '\024', '\n', 
  '\014', 'c', 'u', 's', 't', 'o', 'm', 'G', 'a', 'm', 'e', 'I', 'd', '\030', '\t', ' ', '\001', '(', '\005', '\022', '&', '\n', '\010', 'W', 'o', 
  'r', 'k', 's', 'h', 'o', 'p', '\030', '\n', ' ', '\001', '(', '\013', '2', '\024', '.', 'm', 's', 'g', '.', 'W', 'o', 'r', 'k', 's', 'h', 
  'o', 'p', 'S', 'e', 't', 't', 'i', 'n', 'g', '\022', '\"', '\n', '\006', 'B', 'o', 'u', 'n', 't', 'y', '\030', '\013', ' ', '\001', '(', '\013', 
  '2', '\022', '.', 'm', 's', 'g', '.', 'B', 'o', 'u', 'n', 't', 'y', 'S', 'e', 't', 't', 'i', 'n', 'g', '\022', '\024', '\n', '\014', 'c', 
  'h', 'a', 'n', 'n', 'e', 'l', 'U', 's', 'r', 'I', 'd', '\030', '\014', ' ', '\001', '(', '\t', '\022', '#', '\n', '\n', 'P', 'v', 'e', 'S', 
  'e', 't', 't', 'i', 'n', 'g', '\030', '\r', ' ', '\001', '(', '\013', '2', '\017', '.', 'm', 's', 'g', '.', 'P', 'v', 'e', 'S', 'e', 't', 
  't', 'i', 'n', 'g', '\"', 'Y', '\n', '\017', 'W', 'o', 'r', 'k', 's', 'h', 'o', 'p', 'S', 'e', 't', 't', 'i', 'n', 'g', '\022', '\r', 
  '\n', '\005', 'M', 'a', 'p', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\005', '\022', '\020', '\n', '\010', 'S', 'u', 'b', 'M', 'a', 'p', 'I', 'd', 
  '\030', '\002', ' ', '\001', '(', '\005', '\022', '\017', '\n', '\007', 'M', 'a', 'p', 'N', 'a', 'm', 'e', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\024', 
  '\n', '\014', 'j', 'o', 'i', 'n', 'A', 'I', 'S', 'w', 'i', 't', 'c', 'h', '\030', '\004', ' ', '\001', '(', '\010', '\"', '?', '\n', '\021', 'T', 
  'e', 'a', 'm', 'O', 'P', 'C', 'h', 'a', 'n', 'g', 'e', 'G', 'r', 'o', 'u', 'p', '\022', '\013', '\n', '\003', 'p', 'i', 'd', '\030', '\001', 
  ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'g', 'r', 'o', 'u', 'p', 'I', 'd', '\030', '\002', ' ', '\001', '(', '\005', '\022', '\014', '\n', '\004', 
  's', 'l', 'o', 't', '\030', '\003', ' ', '\001', '(', '\005', '\"', '6', '\n', '\025', 'T', 'e', 'a', 'm', 'O', 'P', 'S', 'e', 'l', 'f', 'C', 
  'h', 'a', 'n', 'g', 'e', 'G', 'r', 'o', 'u', 'p', '\022', '\017', '\n', '\007', 'g', 'r', 'o', 'u', 'p', 'I', 'd', '\030', '\001', ' ', '\001', 
  '(', '\005', '\022', '\014', '\n', '\004', 's', 'l', 'o', 't', '\030', '\002', ' ', '\001', '(', '\005', '\"', '\"', '\n', '\023', 'T', 'e', 'a', 'm', 'O', 
  'P', 'A', 'p', 'p', 'o', 'i', 'n', 't', 'L', 'e', 'a', 'd', 'e', 'r', '\022', '\013', '\n', '\003', 'p', 'i', 'd', '\030', '\001', ' ', '\001', 
  '(', '\t', '\"', ' ', '\n', '\020', 'T', 'e', 'a', 'm', 'O', 'P', 'C', 'h', 'a', 'n', 'g', 'e', 'N', 'a', 'm', 'e', '\022', '\014', '\n', 
  '\004', 'n', 'a', 'm', 'e', '\030', '\001', ' ', '\001', '(', '\t', '\"', '~', '\n', '\020', 'T', 'e', 'a', 'm', 'O', 'P', 'S', 'w', 'i', 't', 
  'c', 'h', 'S', 'l', 'o', 't', '\022', '\020', '\n', '\010', 'g', 'r', 'o', 'u', 'p', 'O', 'n', 'e', '\030', '\001', ' ', '\001', '(', '\005', '\022', 
  '\020', '\n', '\010', 'g', 'r', 'o', 'u', 'p', 'T', 'w', 'o', '\030', '\002', ' ', '\001', '(', '\005', '\022', '\021', '\n', '\t', 'p', 'l', 'a', 'y', 
  'e', 'r', 'O', 'n', 'e', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\021', '\n', '\t', 'p', 'l', 'a', 'y', 'e', 'r', 'T', 'w', 'o', '\030', 
  '\004', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 's', 'l', 'o', 't', 'O', 'n', 'e', '\030', '\005', ' ', '\001', '(', '\005', '\022', '\017', '\n', 
  '\007', 's', 'l', 'o', 't', 'T', 'w', 'o', '\030', '\006', ' ', '\001', '(', '\005', '\"', '\036', '\n', '\017', 'T', 'e', 'a', 'm', 'B', 'e', 't', 
  'O', 'n', 'B', 'o', 'u', 'n', 't', 'y', '\022', '\013', '\n', '\003', 'N', 'u', 'm', '\030', '\001', ' ', '\001', '(', '\005', '\"', '\351', '\002', '\n', 
  '\006', 'T', 'e', 'a', 'm', 'O', 'P', '\022', '\013', '\n', '\003', 'P', 'I', 'D', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\031', '\n', '\004', 't', 
  'y', 'p', 'e', '\030', '\002', ' ', '\001', '(', '\016', '2', '\013', '.', 'm', 's', 'g', '.', 'T', 'E', 'A', 'M', 'O', 'P', '\022', '#', '\n', 
  '\007', 's', 'e', 't', 't', 'i', 'n', 'g', '\030', '\003', ' ', '\001', '(', '\013', '2', '\022', '.', 'm', 's', 'g', '.', 'T', 'e', 'a', 'm', 
  'O', 'P', 'S', 'e', 't', 't', 'i', 'n', 'g', '\022', '+', '\n', '\013', 'c', 'h', 'a', 'n', 'g', 'e', 'G', 'r', 'o', 'u', 'p', '\030', 
  '\004', ' ', '\001', '(', '\013', '2', '\026', '.', 'm', 's', 'g', '.', 'T', 'e', 'a', 'm', 'O', 'P', 'C', 'h', 'a', 'n', 'g', 'e', 'G', 
  'r', 'o', 'u', 'p', '\022', '/', '\n', '\r', 'a', 'p', 'p', 'o', 'i', 'n', 't', 'L', 'e', 'a', 'd', 'e', 'r', '\030', '\005', ' ', '\001', 
  '(', '\013', '2', '\030', '.', 'm', 's', 'g', '.', 'T', 'e', 'a', 'm', 'O', 'P', 'A', 'p', 'p', 'o', 'i', 'n', 't', 'L', 'e', 'a', 
  'd', 'e', 'r', '\022', '3', '\n', '\017', 's', 'e', 'l', 'f', 'C', 'h', 'a', 'n', 'g', 'e', 'G', 'r', 'o', 'u', 'p', '\030', '\006', ' ', 
  '\001', '(', '\013', '2', '\032', '.', 'm', 's', 'g', '.', 'T', 'e', 'a', 'm', 'O', 'P', 'S', 'e', 'l', 'f', 'C', 'h', 'a', 'n', 'g', 
  'e', 'G', 'r', 'o', 'u', 'p', '\022', ')', '\n', '\n', 'c', 'h', 'a', 'n', 'g', 'e', 'N', 'a', 'm', 'e', '\030', '\007', ' ', '\001', '(', 
  '\013', '2', '\025', '.', 'm', 's', 'g', '.', 'T', 'e', 'a', 'm', 'O', 'P', 'C', 'h', 'a', 'n', 'g', 'e', 'N', 'a', 'm', 'e', '\022', 
  ')', '\n', '\n', 's', 'w', 'i', 't', 'c', 'h', 'S', 'l', 'o', 't', '\030', '\010', ' ', '\001', '(', '\013', '2', '\025', '.', 'm', 's', 'g', 
  '.', 'T', 'e', 'a', 'm', 'O', 'P', 'S', 'w', 'i', 't', 'c', 'h', 'S', 'l', 'o', 't', '\022', ')', '\n', '\013', 'b', 'e', 't', 'O', 
  'n', 'B', 'o', 'u', 'n', 't', 'y', '\030', '\t', ' ', '\001', '(', '\013', '2', '\024', '.', 'm', 's', 'g', '.', 'T', 'e', 'a', 'm', 'B', 
  'e', 't', 'O', 'n', 'B', 'o', 'u', 'n', 't', 'y', '\"', '\226', '\002', '\n', '\014', 'T', 'e', 'a', 'm', 'B', 'a', 's', 'e', 'I', 'n', 
  'f', 'o', '\022', '\014', '\n', '\004', 'N', 'a', 'm', 'e', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\016', '\n', '\006', 'T', 'e', 'a', 'm', 'I', 
  'd', '\030', '\002', ' ', '\001', '(', '\004', '\022', '\032', '\n', '\004', 'M', 'o', 'd', 'e', '\030', '\003', ' ', '\001', '(', '\016', '2', '\014', '.', 'm', 
  's', 'g', '.', 'P', 'V', 'P', 'M', 'O', 'D', 'E', '\022', '\026', '\n', '\016', 'C', 'o', 'm', 'p', 'e', 't', 'o', 't', 'p', 'e', 'r', 
  'N', 'u', 'm', '\030', '\004', ' ', '\001', '(', '\005', '\022', '\033', '\n', '\023', 'C', 'o', 'm', 'p', 'e', 't', 'o', 't', 'p', 'e', 'r', 'T', 
  'o', 't', 'a', 'l', 'N', 'u', 'm', '\030', '\005', ' ', '\001', '(', '\005', '\022', '\016', '\n', '\006', 'H', 'a', 's', 'P', 'w', 'd', '\030', '\006', 
  ' ', '\001', '(', '\010', '\022', '\017', '\n', '\007', 'S', 'u', 'b', 'M', 'o', 'd', 'e', '\030', '\007', ' ', '\001', '(', '\005', '\022', '\'', '\n', '\t', 
  'W', 'S', 'S', 'e', 't', 't', 'i', 'n', 'g', '\030', '\010', ' ', '\001', '(', '\013', '2', '\024', '.', 'm', 's', 'g', '.', 'W', 'o', 'r', 
  'k', 's', 'h', 'o', 'p', 'S', 'e', 't', 't', 'i', 'n', 'g', '\022', '\"', '\n', '\006', 'B', 'o', 'u', 'n', 't', 'y', '\030', '\t', ' ', 
  '\001', '(', '\013', '2', '\022', '.', 'm', 's', 'g', '.', 'B', 'o', 'u', 'n', 't', 'y', 'S', 'e', 't', 't', 'i', 'n', 'g', '\022', '\023', 
  '\n', '\013', 'B', 'o', 'u', 'n', 't', 'y', 'T', 'o', 't', 'a', 'l', '\030', '\n', ' ', '\001', '(', '\005', '\022', '\024', '\n', '\014', 'c', 'h', 
  'a', 'n', 'n', 'e', 'l', 'U', 's', 'r', 'I', 'd', '\030', '\013', ' ', '\001', '(', '\t', '\"', '\336', '\002', '\n', '\005', 'A', 'w', 'a', 'r', 
  'd', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'C', 'o', 'u', 'n', 't', '\030', '\002', ' ', 
  '\001', '(', '\r', '\022', '\014', '\n', '\004', 'P', 'a', 'r', 'a', '\030', '\003', ' ', '\003', '(', '\003', '\022', '\022', '\n', '\n', 'I', 'n', 's', 't', 
  'a', 'n', 'c', 'e', 'I', 'd', '\030', '\004', ' ', '\001', '(', '\t', '\022', '\016', '\n', '\006', 'W', 'e', 'i', 'g', 'h', 't', '\030', '\005', ' ', 
  '\001', '(', '\r', '\022', '\r', '\n', '\005', 'P', 'r', 'i', 'c', 'e', '\030', '\006', ' ', '\001', '(', '\r', '\022', '\021', '\n', '\t', 'S', 'o', 'u', 
  'r', 'c', 'e', 'I', 'd', 'x', '\030', '\007', ' ', '\001', '(', '\r', '\022', '\023', '\n', '\013', 'S', 'u', 'r', 'v', 'i', 'v', 'e', 'T', 'i', 
  'm', 'e', '\030', '\010', ' ', '\001', '(', '\003', '\022', '!', '\n', '\005', 'M', 'e', 'd', 'a', 'l', '\030', '\t', ' ', '\001', '(', '\013', '2', '\022', 
  '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'I', 't', 'e', 'm', 'M', 'e', 'd', 'a', 'l', '\022', '\016', '\n', '\006', 'N', 'u', 'm', 
  'b', 'e', 'r', '\030', '\n', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'A', 'b', 'r', 'a', 's', 'i', 'o', 'n', '\030', '\013', ' ', '\001', 
  '(', '\t', '\022', '&', '\n', '\006', 'A', 'f', 'f', 'i', 'x', 's', '\030', '\014', ' ', '\003', '(', '\013', '2', '\026', '.', 'm', 's', 'g', '.', 
  'A', 'w', 'a', 'r', 'd', '.', 'A', 'f', 'f', 'i', 'x', 's', 'E', 'n', 't', 'r', 'y', '\022', '\022', '\n', '\n', 'I', 'd', 'e', 'n', 
  't', 'i', 'f', 'i', 'e', 'd', '\030', '\r', ' ', '\001', '(', '\010', '\022', '\021', '\n', '\t', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'I', 'd', 
  '\030', '\016', ' ', '\001', '(', '\r', '\032', '=', '\n', '\013', 'A', 'f', 'f', 'i', 'x', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 
  'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\035', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', 
  '\016', '.', 'm', 's', 'g', '.', 'I', 't', 'e', 'm', 'A', 'f', 'f', 'i', 'x', ':', '\002', '8', '\001', '\"', '\357', '\004', '\n', '\020', 'U', 
  'p', 'd', 'a', 't', 'e', 'P', 'l', 'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', '\022', '\020', '\n', '\010', 'U', 's', 'e', 'r', 'N', 'a', 
  'm', 'e', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\024', '\n', '\014', 'P', 'a', 's', 's', 'p', 'o', 'r', 't', 'T', 'y', 'p', 'e', '\030', 
  '\002', ' ', '\003', '(', '\r', '\022', '*', '\n', '\013', 'C', 'h', 'e', 's', 's', 'P', 'l', 'a', 'y', 'e', 'r', '\030', '\004', ' ', '\001', '(', 
  '\013', '2', '\025', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'C', 'h', 'e', 's', 's', 'P', 'l', 'r', 'I', 'n', 'f', 'o', '\022', 
  '\017', '\n', '\007', 'S', 'c', 'e', 'n', 'e', 'I', 'd', '\030', '\005', ' ', '\001', '(', '\r', '\022', '?', '\n', '\r', 'C', 'h', 'e', 's', 's', 
  'S', 'k', 'i', 'n', 'D', 'a', 't', 'a', '\030', '\006', ' ', '\003', '(', '\013', '2', '(', '.', 'm', 's', 'g', '.', 'U', 'p', 'd', 'a', 
  't', 'e', 'P', 'l', 'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', '.', 'C', 'h', 'e', 's', 's', 'S', 'k', 'i', 'n', 'D', 'a', 't', 
  'a', 'E', 'n', 't', 'r', 'y', '\022', '\017', '\n', '\007', 'H', 'e', 'a', 'd', 'P', 'i', 'c', '\030', '\007', ' ', '\001', '(', '\r', '\022', '7', 
  '\n', '\t', 'S', 'h', 'o', 'w', 'I', 't', 'e', 'm', 's', '\030', '\010', ' ', '\003', '(', '\013', '2', '$', '.', 'm', 's', 'g', '.', 'U', 
  'p', 'd', 'a', 't', 'e', 'P', 'l', 'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', '.', 'S', 'h', 'o', 'w', 'I', 't', 'e', 'm', 's', 
  'E', 'n', 't', 'r', 'y', '\022', ',', '\n', '\013', 'E', 'm', 'o', 't', 'i', 'o', 'n', 'L', 'i', 's', 't', '\030', '\t', ' ', '\001', '(', 
  '\013', '2', '\027', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'C', 'o', 'm', 'm', 'o', 'n', 'R', 'a', 'n', 'd', 'L', 'i', 's', 
  't', '\022', '\033', '\n', '\003', 'P', 'v', 'e', '\030', '\n', ' ', '\001', '(', '\013', '2', '\016', '.', 'm', 's', 'g', '.', 'P', 'v', 'e', 'E', 
  'x', 'D', 'a', 't', 'a', '\022', '5', '\n', '\010', 'S', 'k', 'i', 'n', 'D', 'a', 't', 'a', '\030', '\013', ' ', '\003', '(', '\013', '2', '#', 
  '.', 'm', 's', 'g', '.', 'U', 'p', 'd', 'a', 't', 'e', 'P', 'l', 'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', '.', 'S', 'k', 'i', 
  'n', 'D', 'a', 't', 'a', 'E', 'n', 't', 'r', 'y', '\022', ')', '\n', '\r', 'C', 'a', 'r', 'd', 'G', 'r', 'o', 'u', 'p', 'D', 'a', 
  't', 'a', '\030', '\014', ' ', '\001', '(', '\013', '2', '\022', '.', 'm', 's', 'g', '.', 'C', 'a', 'r', 'd', 'G', 'r', 'o', 'u', 'p', 'D', 
  'a', 't', 'a', '\032', 'L', '\n', '\022', 'C', 'h', 'e', 's', 's', 'S', 'k', 'i', 'n', 'D', 'a', 't', 'a', 'E', 'n', 't', 'r', 'y', 
  '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '%', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', 
  '\001', '(', '\013', '2', '\026', '.', 'm', 's', 'g', '.', 'C', 'h', 'e', 's', 's', 'S', 'k', 'i', 'n', 'S', 'l', 'o', 't', 'D', 'a', 
  't', 'a', ':', '\002', '8', '\001', '\032', '0', '\n', '\016', 'S', 'h', 'o', 'w', 'I', 't', 'e', 'm', 's', 'E', 'n', 't', 'r', 'y', '\022', 
  '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', 
  '(', '\r', ':', '\002', '8', '\001', '\032', '>', '\n', '\r', 'S', 'k', 'i', 'n', 'D', 'a', 't', 'a', 'E', 'n', 't', 'r', 'y', '\022', '\013', 
  '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\034', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', 
  '\013', '2', '\r', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'I', 't', 'e', 'm', ':', '\002', '8', '\001', '\"', '%', '\n', '\010', 'S', 
  'k', 'i', 'p', 'T', 'y', 'p', 'e', '\022', '\014', '\n', '\004', 'S', 'k', 'i', 'p', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\013', '\n', '\003', 
  'T', 'a', 'p', '\030', '\002', ' ', '\001', '(', '\t', '\"', ')', '\n', '\n', 'B', 'u', 'f', 'f', 'E', 'f', 'f', 'e', 'c', 't', '\022', '\014', 
  '\n', '\004', 'T', 'y', 'p', 'e', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'V', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', 
  '(', '\r', '\"', 'F', '\n', '\007', 'C', 'o', 'n', 's', 'u', 'm', 'e', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', 
  '\022', '\r', '\n', '\005', 'C', 'o', 'u', 'n', 't', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\014', '\n', '\004', 'P', 'a', 'r', 'a', '\030', '\003', 
  ' ', '\003', '(', '\003', '\022', '\022', '\n', '\n', 'I', 'n', 's', 't', 'a', 'n', 'c', 'e', 'I', 'd', '\030', '\004', ' ', '\001', '(', '\t', '\"', 
  '\327', '\002', '\n', '\010', 'C', 'S', 'D', 'T', 'I', 't', 'e', 'm', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', 
  '\r', '\n', '\005', 'C', 'o', 'u', 'n', 't', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\022', '\n', '\n', 'I', 'n', 's', 't', 'a', 'n', 'c', 
  'e', 'I', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'P', 'a', 'r', 'a', '\030', '\004', ' ', '\003', '(', '\003', '\022', '\023', 
  '\n', '\013', 'S', 'u', 'r', 'v', 'i', 'v', 'e', 'T', 'i', 'm', 'e', '\030', '\005', ' ', '\001', '(', '\003', '\022', '!', '\n', '\005', 'M', 'e', 
  'd', 'a', 'l', '\030', '\006', ' ', '\001', '(', '\013', '2', '\022', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'I', 't', 'e', 'm', 'M', 
  'e', 'd', 'a', 'l', '\022', '\022', '\n', '\n', 'C', 'r', 'e', 'a', 't', 'e', 'T', 'i', 'm', 'e', '\030', '\007', ' ', '\001', '(', '\003', '\022', 
  '\017', '\n', '\007', 'G', 'e', 't', 'T', 'i', 'm', 'e', '\030', '\010', ' ', '\001', '(', '\003', '\022', '\016', '\n', '\006', 'N', 'u', 'm', 'b', 'e', 
  'r', '\030', '\t', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'A', 'b', 'r', 'a', 's', 'i', 'o', 'n', '\030', '\n', ' ', '\001', '(', '\t', 
  '\022', ')', '\n', '\006', 'A', 'f', 'f', 'i', 'x', 's', '\030', '\013', ' ', '\003', '(', '\013', '2', '\031', '.', 'm', 's', 'g', '.', 'C', 'S', 
  'D', 'T', 'I', 't', 'e', 'm', '.', 'A', 'f', 'f', 'i', 'x', 's', 'E', 'n', 't', 'r', 'y', '\022', '\022', '\n', '\n', 'I', 'd', 'e', 
  'n', 't', 'i', 'f', 'i', 'e', 'd', '\030', '\014', ' ', '\001', '(', '\010', '\022', '\021', '\n', '\t', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'I', 
  'd', '\030', '\r', ' ', '\001', '(', '\r', '\032', '=', '\n', '\013', 'A', 'f', 'f', 'i', 'x', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', 
  '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\035', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', 
  '2', '\016', '.', 'm', 's', 'g', '.', 'I', 't', 'e', 'm', 'A', 'f', 'f', 'i', 'x', ':', '\002', '8', '\001', '\"', 'c', '\n', '\t', 'I', 
  't', 'e', 'm', 'A', 'f', 'f', 'i', 'x', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'V', 
  'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\002', '\022', '\024', '\n', '\014', 'S', 'o', 'u', 'r', 'c', 'e', 'I', 't', 'e', 'm', 'I', 
  'd', '\030', '\003', ' ', '\001', '(', '\r', '\022', '%', '\n', '\016', 'S', 'o', 'u', 'r', 'c', 'e', 'I', 't', 'e', 'm', 'T', 'y', 'p', 'e', 
  '\030', '\004', ' ', '\001', '(', '\016', '2', '\r', '.', 'm', 's', 'g', '.', 'I', 'T', 'E', 'M', 'T', 'Y', 'P', 'E', '\"', 'T', '\n', '\r', 
  'C', 'S', 'D', 'T', 'I', 't', 'e', 'm', 'M', 'e', 'd', 'a', 'l', '\022', '\022', '\n', '\n', 'C', 'r', 'e', 'a', 't', 'e', 'T', 'i', 
  'm', 'e', '\030', '\001', ' ', '\001', '(', '\003', '\022', '\r', '\n', '\005', 'S', 'c', 'o', 'r', 'e', '\030', '\002', ' ', '\001', '(', '\003', '\022', '\016', 
  '\n', '\006', 'N', 'u', 'm', 'b', 'e', 'r', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'S', 'e', 'a', 's', 'o', 'n', 'I', 
  'd', '\030', '\004', ' ', '\001', '(', '\003', '\"', '^', '\n', '\n', 'C', 'S', 'D', 'T', 'I', 't', 'e', 'm', 'I', 'D', '\022', '\n', '\n', '\002', 
  'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\022', '\n', '\n', 'I', 'n', 's', 't', 'a', 'n', 'c', 'e', 'I', 'd', '\030', '\002', ' ', 
  '\001', '(', '\t', '\022', '\017', '\n', '\007', 'I', 's', 'M', 'e', 'd', 'a', 'l', '\030', '\003', ' ', '\001', '(', '\010', '\022', '\r', '\n', '\005', 'C', 
  'o', 'u', 'n', 't', '\030', '\004', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'A', 'b', 'r', 'a', 's', 'i', 'o', 'n', '\030', '\005', ' ', 
  '\001', '(', '\t', '\"', '\205', '\001', '\n', '\013', 'C', 'S', 'D', 'T', 'B', 'a', 'g', 'P', 'a', 'r', 'a', '\022', '\033', '\n', '\006', 'S', 'o', 
  'u', 'r', 'c', 'e', '\030', '\001', ' ', '\001', '(', '\016', '2', '\013', '.', 'm', 's', 'g', '.', 'S', 'O', 'U', 'R', 'C', 'E', '\022', '\021', 
  '\n', '\t', 'S', 'u', 'b', 'S', 'o', 'u', 'r', 'c', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\024', '\n', '\014', 'T', 'r', 'i', 'g', 
  'g', 'e', 'r', 'E', 'v', 'e', 'n', 't', '\030', '\003', ' ', '\001', '(', '\010', '\022', '\016', '\n', '\006', 'N', 'e', 'w', 'G', 'e', 't', '\030', 
  '\004', ' ', '\001', '(', '\010', '\022', '\017', '\n', '\007', 'O', 'r', 'd', 'e', 'r', 'I', 'd', '\030', '\005', ' ', '\001', '(', '\t', '\022', '\017', '\n', 
  '\007', 'A', 'd', 'd', 'T', 'i', 'm', 'e', '\030', '\006', ' ', '\001', '(', '\003', '\"', 'J', '\n', '\013', 'C', 'S', 'D', 'T', 'B', 'a', 'g', 
  'I', 't', 'e', 'm', '\022', '\033', '\n', '\004', 'I', 't', 'e', 'm', '\030', '\001', ' ', '\001', '(', '\013', '2', '\r', '.', 'm', 's', 'g', '.', 
  'C', 'S', 'D', 'T', 'I', 't', 'e', 'm', '\022', '\036', '\n', '\004', 'P', 'a', 'r', 'a', '\030', '\002', ' ', '\001', '(', '\013', '2', '\020', '.', 
  'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'B', 'a', 'g', 'P', 'a', 'r', 'a', '\"', '\257', '\003', '\n', '\024', 'C', 'S', 'D', 'T', 'P', 
  'l', 'a', 'y', 'e', 'r', 'S', 't', 'a', 't', 'u', 's', 'I', 'n', 'f', 'o', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', 
  '(', '\t', '\022', '\'', '\n', '\014', 'P', 'l', 'a', 'y', 'e', 'r', 'S', 't', 'a', 't', 'u', 's', '\030', '\002', ' ', '\001', '(', '\016', '2', 
  '\021', '.', 'm', 's', 'g', '.', 'P', 'L', 'A', 'Y', 'E', 'R', 'S', 'T', 'A', 'T', 'U', 'S', '\022', '\r', '\n', '\005', 'M', 'a', 'p', 
  'I', 'd', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\022', '\n', '\n', 'A', 'p', 'k', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\030', '\004', ' ', 
  '\001', '(', '\t', '\022', '\'', '\n', '\014', 'P', 'l', 'a', 't', 'F', 'o', 'r', 'm', 'T', 'y', 'p', 'e', '\030', '\005', ' ', '\001', '(', '\016', 
  '2', '\021', '.', 'm', 's', 'g', '.', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', 'T', 'Y', 'P', 'E', '\022', '\024', '\n', '\014', 'H', 'a', 
  'l', 'l', 'S', 'e', 'r', 'v', 'e', 'r', 'I', 'd', '\030', '\006', ' ', '\001', '(', '\r', '\022', '-', '\n', '\017', 'F', 'r', 'i', 'e', 'n', 
  'd', 'I', 'n', 'v', 'i', 's', 'i', 'b', 'l', 'e', '\030', '\007', ' ', '\001', '(', '\016', '2', '\024', '.', 'm', 's', 'g', '.', 'F', 'R', 
  'I', 'E', 'N', 'D', 'I', 'N', 'V', 'I', 'S', 'I', 'B', 'L', 'E', '\022', '\024', '\n', '\014', 'O', 'b', 's', 'e', 'r', 'v', 'e', 'P', 
  'v', 'p', 'I', 'd', '\030', '\010', ' ', '\001', '(', '\004', '\022', '#', '\n', '\r', 'O', 'b', 's', 'e', 'r', 'v', 'e', 'P', 'v', 'p', 'M', 
  'o', 'd', '\030', '\024', ' ', '\001', '(', '\016', '2', '\014', '.', 'm', 's', 'g', '.', 'P', 'V', 'P', 'M', 'O', 'D', 'E', '\022', '\035', '\n', 
  '\025', 'C', 'h', 'a', 'n', 'g', 'e', 'F', 'r', 'i', 'e', 'n', 'd', 'I', 'n', 'v', 'i', 's', 'i', 'b', 'l', 'e', '\030', '\t', ' ', 
  '\001', '(', '\010', '\022', '\022', '\n', '\n', 'M', 'a', 'p', 'P', 'l', 'a', 'y', 'i', 'n', 'g', '\030', '\n', ' ', '\001', '(', '\r', '\022', '\024', 
  '\n', '\014', 'C', 'h', 'a', 'n', 'g', 'e', 'P', 's', 'O', 'n', 'l', 'y', '\030', '\013', ' ', '\001', '(', '\010', '\022', '\016', '\n', '\006', 'P', 
  's', 'O', 'n', 'l', 'y', '\030', '\014', ' ', '\001', '(', '\010', '\022', '\026', '\n', '\016', 'S', 'e', 'r', 'v', 'i', 'c', 'e', 'V', 'e', 'r', 
  's', 'i', 'o', 'n', '\030', '\r', ' ', '\001', '(', '\t', '\022', '%', '\n', '\013', 'L', 'o', 'g', 'i', 'n', 'S', 'o', 'u', 'r', 'c', 'e', 
  '\030', '\016', ' ', '\001', '(', '\016', '2', '\020', '.', 'm', 's', 'g', '.', 'L', 'O', 'G', 'I', 'N', 'S', 'O', 'U', 'R', 'C', 'E', '\"', 
  'B', '\n', '\016', 'C', 'S', 'D', 'T', 'P', 'v', 'p', 'W', 'i', 'n', 'D', 'a', 't', 'a', '\022', '\035', '\n', '\007', 'W', 'i', 'n', 'T', 
  'y', 'p', 'e', '\030', '\001', ' ', '\001', '(', '\016', '2', '\014', '.', 'm', 's', 'g', '.', 'W', 'I', 'N', 'T', 'Y', 'P', 'E', '\022', '\021', 
  '\n', '\t', 'R', 'e', 's', 'u', 'l', 't', 'C', 'n', 't', '\030', '\002', ' ', '\001', '(', '\r', '\"', '\200', '\001', '\n', '\020', 'C', 'S', 'D', 
  'T', 'C', 'h', 'e', 's', 's', 'P', 'l', 'r', 'I', 'n', 'f', 'o', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', 
  '\022', '1', '\n', '\006', 'E', 'q', 'u', 'i', 'p', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '!', '.', 'm', 's', 'g', '.', 'C', 'S', 
  'D', 'T', 'C', 'h', 'e', 's', 's', 'P', 'l', 'r', 'I', 'n', 'f', 'o', '.', 'E', 'q', 'u', 'i', 'p', 's', 'E', 'n', 't', 'r', 
  'y', '\032', '-', '\n', '\013', 'E', 'q', 'u', 'i', 'p', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', 
  ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\"', '\243', 
  '\001', '\n', '\n', 'C', 'S', 'D', 'T', 'P', 'u', 'z', 'z', 'l', 'e', '\022', '\017', '\n', '\007', 'O', 'p', 'e', 'n', 'M', 'a', 'p', '\030', 
  '\001', ' ', '\003', '(', '\r', '\022', '\022', '\n', '\n', 'G', 'r', 'o', 'u', 'p', 'A', 'w', 'a', 'r', 'd', '\030', '\002', ' ', '\003', '(', '\r', 
  '\022', '-', '\n', '\007', 'I', 't', 'e', 'm', 'M', 'a', 'p', '\030', '\003', ' ', '\003', '(', '\013', '2', '\034', '.', 'm', 's', 'g', '.', 'C', 
  'S', 'D', 'T', 'P', 'u', 'z', 'z', 'l', 'e', '.', 'I', 't', 'e', 'm', 'M', 'a', 'p', 'E', 'n', 't', 'r', 'y', '\022', '\021', '\n', 
  '\t', 'A', 'w', 'a', 'r', 'd', 'P', 'o', 'o', 'l', '\030', '\004', ' ', '\003', '(', '\r', '\032', '.', '\n', '\014', 'I', 't', 'e', 'm', 'M', 
  'a', 'p', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 
  'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\005', ':', '\002', '8', '\001', '\"', '\202', '\001', '\n', '\021', 'C', 'h', 'e', 's', 's', 'S', 
  'k', 'i', 'n', 'S', 'l', 'o', 't', 'D', 'a', 't', 'a', '\022', '0', '\n', '\005', 'S', 'l', 'o', 't', 's', '\030', '\001', ' ', '\003', '(', 
  '\013', '2', '!', '.', 'm', 's', 'g', '.', 'C', 'h', 'e', 's', 's', 'S', 'k', 'i', 'n', 'S', 'l', 'o', 't', 'D', 'a', 't', 'a', 
  '.', 'S', 'l', 'o', 't', 's', 'E', 'n', 't', 'r', 'y', '\032', ';', '\n', '\n', 'S', 'l', 'o', 't', 's', 'E', 'n', 't', 'r', 'y', 
  '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\034', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', 
  '\001', '(', '\013', '2', '\r', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'I', 't', 'e', 'm', ':', '\002', '8', '\001', '\"', '\226', '\027', 
  '\n', '\r', 'P', 'v', 'p', 'P', 'l', 'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', 
  '(', '\t', '\022', '\017', '\n', '\007', 'U', 's', 'r', 'N', 'a', 'm', 'e', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'I', 'n', 
  'd', 'e', 'x', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\014', '\n', '\004', 'C', 'a', 'm', 'p', '\030', '\004', ' ', '\001', '(', '\r', '\022', '\017', 
  '\n', '\007', 'I', 's', 'R', 'o', 'b', 'o', 't', '\030', '\005', ' ', '\001', '(', '\010', '\022', '\026', '\n', '\016', 'C', 'o', 'm', 'p', 'e', 't', 
  'i', 't', 'i', 'o', 'n', 'C', 'n', 't', '\030', '\006', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'H', 'e', 'a', 'd', 'P', 'i', 'c', 
  '\030', '\007', ' ', '\001', '(', '\r', '\022', '\025', '\n', '\r', 'T', 'e', 'a', 'm', 'P', 'l', 'a', 'y', 'e', 'r', 'N', 'u', 'm', '\030', '\010', 
  ' ', '\001', '(', '\r', '\022', '\013', '\n', '\003', 'M', 'M', 'R', '\030', '\t', ' ', '\001', '(', '\r', '\022', '\013', '\n', '\003', 'L', 'v', 'l', '\030', 
  '\n', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'R', 'e', 'q', 'T', 'i', 'm', 'e', '\030', '\013', ' ', '\001', '(', '\003', '\022', '\'', '\n', 
  '\014', 'P', 'l', 'a', 't', 'f', 'o', 'r', 'm', 'T', 'y', 'p', 'e', '\030', '\014', ' ', '\001', '(', '\016', '2', '\021', '.', 'm', 's', 'g', 
  '.', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', 'T', 'Y', 'P', 'E', '\022', '\016', '\n', '\006', 'T', 'e', 'a', 'm', 'I', 'd', '\030', '\r', 
  ' ', '\001', '(', '\r', '\022', '\013', '\n', '\003', 'C', 'u', 'p', '\030', '\016', ' ', '\001', '(', '\r', '\022', '\022', '\n', '\n', 'A', 'p', 'k', 'V', 
  'e', 'r', 's', 'i', 'o', 'n', '\030', '\017', ' ', '\001', '(', '\t', '\022', '\032', '\n', '\022', 'P', 'v', 'p', 'R', 'e', 's', 'o', 'u', 'r', 
  'c', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\030', '\020', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'A', 's', 'y', 'n', '\030', '\021', 
  ' ', '\001', '(', '\r', '\022', '\027', '\n', '\017', 'C', 'h', 'e', 's', 's', 'P', 'l', 'a', 'y', 'e', 'r', 'S', 'k', 'i', 'n', '\030', '\022', 
  ' ', '\001', '(', '\r', '\022', '\021', '\n', '\t', 'S', 'c', 'e', 'n', 'e', 'S', 'k', 'i', 'n', '\030', '\023', ' ', '\001', '(', '\r', '\022', '\022', 
  '\n', '\n', 'D', 'e', 'v', 'i', 'c', 'e', 'T', 'y', 'p', 'e', '\030', '\024', ' ', '\001', '(', '\t', '\022', '\024', '\n', '\014', 'D', 'a', 'm', 
  'a', 'g', 'e', 'E', 'f', 'f', 'e', 'c', 't', '\030', '\025', ' ', '\001', '(', '\r', '\022', ':', '\n', '\014', 'M', 'o', 'd', 'e', 'W', 'i', 
  'n', 'D', 'a', 't', 'a', 's', '\030', '\026', ' ', '\003', '(', '\013', '2', '$', '.', 'm', 's', 'g', '.', 'P', 'v', 'p', 'P', 'l', 'a', 
  'y', 'e', 'r', 'D', 'a', 't', 'a', '.', 'M', 'o', 'd', 'e', 'W', 'i', 'n', 'D', 'a', 't', 'a', 's', 'E', 'n', 't', 'r', 'y', 
  '\022', '\025', '\n', '\r', 'C', 'u', 'r', 'R', 'a', 'n', 'k', 'S', 'e', 'a', 's', 'o', 'n', '\030', '\030', ' ', '\001', '(', '\r', '\022', '\021', 
  '\n', '\t', 'M', 'e', 'l', 'e', 'e', 'R', 'u', 'l', 'e', '\030', '\031', ' ', '\001', '(', '\r', '\022', ':', '\n', '\014', 'C', 'u', 'r', 'S', 
  'h', 'o', 'w', 'I', 't', 'e', 'm', 's', '\030', '\032', ' ', '\003', '(', '\013', '2', '$', '.', 'm', 's', 'g', '.', 'P', 'v', 'p', 'P', 
  'l', 'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', '.', 'C', 'u', 'r', 'S', 'h', 'o', 'w', 'I', 't', 'e', 'm', 's', 'E', 'n', 't', 
  'r', 'y', '\022', ',', '\n', '\013', 'E', 'm', 'o', 't', 'i', 'o', 'n', 'L', 'i', 's', 't', '\030', '\034', ' ', '\001', '(', '\013', '2', '\027', 
  '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'C', 'o', 'm', 'm', 'o', 'n', 'R', 'a', 'n', 'd', 'L', 'i', 's', 't', '\022', '\024', 
  '\n', '\014', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'U', 's', 'r', 'I', 'd', '\030', '\036', ' ', '\001', '(', '\t', '\022', '$', '\n', '\013', 'C', 
  'h', 'a', 'n', 'n', 'e', 'l', 'T', 'y', 'p', 'e', '\030', '\037', ' ', '\001', '(', '\016', '2', '\017', '.', 'm', 's', 'g', '.', 'C', 'H', 
  'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '\022', '2', '\n', '\010', 'S', 'e', 't', 't', 'i', 'n', 'g', 's', '\030', ' ', ' ', '\003', '(', 
  '\013', '2', ' ', '.', 'm', 's', 'g', '.', 'P', 'v', 'p', 'P', 'l', 'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', '.', 'S', 'e', 't', 
  't', 'i', 'n', 'g', 's', 'E', 'n', 't', 'r', 'y', '\022', '\023', '\n', '\013', 'A', 's', 's', 'i', 's', 't', 'a', 'n', 't', 'I', 'd', 
  '\030', '!', ' ', '\001', '(', '\005', '\022', '\023', '\n', '\013', 'C', 'r', 'e', 'd', 'i', 't', 'S', 'c', 'o', 'r', 'e', '\030', '\"', ' ', '\001', 
  '(', '\r', '\022', '\014', '\n', '\004', 'T', 'M', 'M', 'R', '\030', '#', ' ', '\001', '(', '\r', '\022', '\014', '\n', '\004', 'T', 'C', 'u', 'p', '\030', 
  '$', ' ', '\001', '(', '\r', '\022', '\023', '\n', '\013', 'T', 'e', 'a', 'm', 'V', 'o', 'i', 'c', 'e', 'I', 'd', '\030', '%', ' ', '\001', '(', 
  '\t', '\022', '\026', '\n', '\016', 'T', 'e', 'a', 'm', 'V', 'o', 'i', 'c', 'e', 'M', 'e', 'm', 'I', 'd', '\030', '&', ' ', '\001', '(', '\r', 
  '\022', '\016', '\n', '\006', 'P', 'i', 'c', 'U', 'r', 'l', '\030', '\'', ' ', '\001', '(', '\t', '\022', '\027', '\n', '\017', 'T', 'e', 'a', 'm', 'B', 
  'a', 't', 't', 'l', 'e', 'C', 'o', 'u', 'n', 't', '\030', '(', ' ', '\001', '(', '\r', '\022', '\032', '\n', '\022', 'T', 'e', 'a', 'm', 'B', 
  'a', 't', 't', 'l', 'e', 'M', 'v', 'p', 'C', 'o', 'u', 'n', 't', '\030', ')', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 'R', 'e', 
  'c', 'o', 'm', 'm', 'e', 'n', 'd', 'S', 'c', 'o', 'r', 'e', '\030', '*', ' ', '\001', '(', '\r', '\022', '\023', '\n', '\013', 'W', 'x', 'V', 
  'V', 'i', 'p', 'L', 'e', 'v', 'e', 'l', '\030', '+', ' ', '\001', '(', '\r', '\022', '\031', '\n', '\021', 'T', 'e', 'a', 'm', 'B', 'a', 't', 
  't', 'l', 'e', 'A', 'v', 'g', 'R', 'a', 'n', 'k', '\030', ',', ' ', '\001', '(', '\005', '\022', '\024', '\n', '\014', 'C', 'u', 'p', 'N', 'a', 
  'm', 'e', 'C', 'h', 'i', 'n', 'a', '\030', '-', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 
  '\030', '.', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'C', 'o', 'u', 'n', 't', 'r', 'y', '\030', '/', ' ', '\001', '(', '\t', '\022', '\022', 
  '\n', '\n', 'C', 'u', 'p', 'I', 'c', 'o', 'n', 'U', 'r', 'l', '\030', '0', ' ', '\001', '(', '\t', '\022', '\026', '\n', '\016', 'P', 'e', 'r', 
  's', 'o', 'n', 'a', 'l', 'A', 'v', 'g', 'M', 'v', 'p', '\030', '1', ' ', '\001', '(', '\005', '\022', '8', '\n', '\013', 'S', 'w', 'i', 't', 
  'c', 'h', 'I', 't', 'e', 'm', 's', '\030', '2', ' ', '\003', '(', '\013', '2', '#', '.', 'm', 's', 'g', '.', 'P', 'v', 'p', 'P', 'l', 
  'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', '.', 'S', 'w', 'i', 't', 'c', 'h', 'I', 't', 'e', 'm', 's', 'E', 'n', 't', 'r', 'y', 
  '\022', '/', '\n', '\020', 'O', 'b', 's', 'e', 'r', 'v', 'e', 'P', 'r', 'i', 'v', 'i', 'l', 'e', 'g', 'e', '\030', '3', ' ', '\001', '(', 
  '\016', '2', '\025', '.', 'm', 's', 'g', '.', 'O', 'B', 'S', 'E', 'R', 'V', 'E', 'P', 'R', 'I', 'V', 'I', 'L', 'E', 'G', 'E', '\022', 
  '6', '\n', '\n', 'P', 'u', 'n', 'i', 's', 'h', 'm', 'e', 'n', 't', '\030', '4', ' ', '\003', '(', '\013', '2', '\"', '.', 'm', 's', 'g', 
  '.', 'P', 'v', 'p', 'P', 'l', 'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', '.', 'P', 'u', 'n', 'i', 's', 'h', 'm', 'e', 'n', 't', 
  'E', 'n', 't', 'r', 'y', '\022', '\014', '\n', '\004', 'S', 'l', 'o', 't', '\030', '5', ' ', '\001', '(', '\r', '\022', '*', '\n', '\013', 'C', 'u', 
  'r', 'C', 'h', 'e', 's', 's', 'P', 'l', 'r', '\030', '7', ' ', '\001', '(', '\013', '2', '\025', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 
  'T', 'C', 'h', 'e', 's', 's', 'P', 'l', 'r', 'I', 'n', 'f', 'o', '\022', '!', '\n', '\t', 'T', 'e', 'a', 'm', 'G', 'r', 'o', 'u', 
  'p', '\030', '8', ' ', '\001', '(', '\016', '2', '\016', '.', 'm', 's', 'g', '.', 'T', 'E', 'A', 'M', 'G', 'R', 'O', 'U', 'P', '\022', '\026', 
  '\n', '\016', 'P', 'v', 'p', 'S', 'e', 'r', 'v', 'e', 'r', 'G', 'r', 'o', 'u', 'p', '\030', '9', ' ', '\001', '(', '\t', '\022', '\014', '\n', 
  '\004', 'P', 'i', 'n', 'g', '\030', ':', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'P', 'r', 'o', 'v', 'i', 'n', 'c', 'e', '\030', ';', 
  ' ', '\001', '(', '\r', '\022', '\027', '\n', '\017', 'T', 'e', 'a', 'm', 'V', 'o', 'i', 'c', 'e', 'U', 's', 'e', 'r', 'I', 'd', '\030', '<', 
  ' ', '\001', '(', '\t', '\022', ':', '\n', '\014', 'R', 'e', 'g', 'i', 'o', 'n', 'D', 'e', 'l', 'a', 'y', 's', '\030', '=', ' ', '\003', '(', 
  '\013', '2', '$', '.', 'm', 's', 'g', '.', 'P', 'v', 'p', 'P', 'l', 'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', '.', 'R', 'e', 'g', 
  'i', 'o', 'n', 'D', 'e', 'l', 'a', 'y', 's', 'E', 'n', 't', 'r', 'y', '\022', '\'', '\n', '\t', 'A', 'd', 'd', 'i', 'c', 't', 'i', 
  'o', 'n', '\030', '>', ' ', '\001', '(', '\013', '2', '\024', '.', 'm', 's', 'g', '.', 'K', 'r', 'A', 'd', 'd', 'i', 'c', 't', 'i', 'o', 
  'n', 'I', 'n', 'f', 'o', '\022', '\016', '\n', '\006', 'R', 'e', 'g', 'i', 'o', 'n', '\030', '?', ' ', '\001', '(', '\t', '\022', '!', '\n', '\031', 
  'F', 'i', 'r', 's', 't', 'M', 'a', 't', 'c', 'h', 'S', 'u', 'c', 'c', 'e', 's', 's', 'W', 'a', 'i', 't', 'T', 'i', 'm', 'e', 
  '\030', '@', ' ', '\001', '(', '\r', '\022', '\023', '\n', '\013', 'P', 'a', 'c', 'k', 'a', 'g', 'e', 'N', 'a', 'm', 'e', '\030', 'A', ' ', '\001', 
  '(', '\t', '\022', '\024', '\n', '\014', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', 'I', 'D', '\030', 'B', ' ', '\001', '(', '\004', '\022', 
  '\024', '\n', '\014', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'C', 'l', 'a', 's', 's', '\030', 'C', ' ', '\001', '(', '\004', '\022', '\031', '\n', '\021', 
  'T', 'o', 'u', 'r', 'n', 'a', 'm', 'C', 'l', 'a', 's', 's', 'R', 'o', 'u', 'n', 'd', '\030', 'D', ' ', '\001', '(', '\004', '\022', '\026', 
  '\n', '\016', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'C', 'h', 'e', 's', 's', 'I', 'D', '\030', 'E', ' ', '\001', '(', '\004', '\022', '\027', '\n', 
  '\017', 'P', 'a', 's', 's', 'p', 'o', 'r', 't', 'T', 'y', 'p', 'e', 'I', 'd', 's', '\030', 'F', ' ', '\003', '(', '\r', '\022', '0', '\n', 
  '\007', 'T', 'i', 'c', 'k', 'e', 't', 's', '\030', 'G', ' ', '\003', '(', '\013', '2', '\037', '.', 'm', 's', 'g', '.', 'P', 'v', 'p', 'P', 
  'l', 'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', '.', 'T', 'i', 'c', 'k', 'e', 't', 's', 'E', 'n', 't', 'r', 'y', '\022', '\022', '\n', 
  '\n', 'S', 'd', 'k', 'C', 'o', 'u', 'n', 't', 'r', 'y', '\030', 'H', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'P', 's', '4', 'O', 
  'n', 'l', 'y', '\030', 'I', ' ', '\001', '(', '\010', '\022', '+', '\n', '\014', 'R', 'e', 's', 't', 'r', 'i', 'c', 't', 'T', 'y', 'p', 'e', 
  '\030', 'J', ' ', '\001', '(', '\016', '2', '\025', '.', 'm', 's', 'g', '.', 'U', 's', 'e', 'r', 'R', 'e', 's', 't', 'r', 'i', 'c', 't', 
  'T', 'y', 'p', 'e', '\022', '4', '\n', '\t', 'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 's', '\030', 'K', ' ', '\003', '(', '\013', '2', '!', 
  '.', 'm', 's', 'g', '.', 'P', 'v', 'p', 'P', 'l', 'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', '.', 'C', 'u', 'r', 'r', 'e', 'n', 
  'c', 'y', 's', 'E', 'n', 't', 'r', 'y', '\022', '\021', '\n', '\t', 'G', 'u', 'i', 'l', 'd', 'N', 'a', 'm', 'e', '\030', 'L', ' ', '\001', 
  '(', '\t', '\022', '\021', '\n', '\t', 'G', 'u', 'i', 'l', 'd', 'S', 'i', 'g', 'n', '\030', 'M', ' ', '\001', '(', '\005', '\022', '\026', '\n', '\016', 
  'P', 'S', 'B', 'l', 'o', 'c', 'k', 'e', 'd', 'U', 's', 'e', 'r', 's', '\030', 'N', ' ', '\003', '(', '\t', '\022', '\'', '\n', '\t', 'C', 
  'h', 'e', 's', 's', 'L', 'i', 's', 't', '\030', 'O', ' ', '\003', '(', '\013', '2', '\024', '.', 'm', 's', 'g', '.', 'K', 'e', 'r', 'n', 
  'e', 'l', 'C', 'h', 'e', 's', 's', 'I', 'n', 'f', 'o', '\022', '\021', '\n', '\t', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'I', 'D', '\030', 
  'P', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 'S', 'k', 'i', 'n', 'S', 'u', 'i', 't', 'I', 'D', '\030', 'Q', ' ', '\003', '(', '\r', 
  '\022', '\r', '\n', '\005', 'F', 'F', 'M', 'M', 'R', '\030', 'R', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'F', 'F', 'C', 'u', 'p', '\030', 
  'S', ' ', '\001', '(', '\r', '\022', '\022', '\n', '\n', 'B', 'a', 't', 't', 'l', 'e', 'T', 'i', 'm', 'e', '\030', 'T', ' ', '\001', '(', '\r', 
  '\022', '<', '\n', '\r', 'C', 'h', 'e', 's', 's', 'S', 'k', 'i', 'n', 'D', 'a', 't', 'a', '\030', 'U', ' ', '\003', '(', '\013', '2', '%', 
  '.', 'm', 's', 'g', '.', 'P', 'v', 'p', 'P', 'l', 'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', '.', 'C', 'h', 'e', 's', 's', 'S', 
  'k', 'i', 'n', 'D', 'a', 't', 'a', 'E', 'n', 't', 'r', 'y', '\022', '2', '\n', '\010', 'S', 'k', 'i', 'n', 'D', 'a', 't', 'a', '\030', 
  'V', ' ', '\003', '(', '\013', '2', ' ', '.', 'm', 's', 'g', '.', 'P', 'v', 'p', 'P', 'l', 'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', 
  '.', 'S', 'k', 'i', 'n', 'D', 'a', 't', 'a', 'E', 'n', 't', 'r', 'y', '\022', '\035', '\n', '\007', 'P', 'v', 'p', 'D', 'a', 't', 'a', 
  '\030', 'W', ' ', '\001', '(', '\013', '2', '\014', '.', 'm', 's', 'g', '.', 'P', 'v', 'p', 'D', 'a', 't', 'a', '\022', '\025', '\n', '\r', 'P', 
  'v', 'p', 'V', 'o', 'i', 'c', 'e', 'M', 'e', 'm', 'I', 'd', '\030', 'X', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 'C', 'a', 'm', 
  'p', 'V', 'o', 'i', 'c', 'e', 'M', 'e', 'm', 'I', 'd', '\030', 'Y', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 'C', 'h', 'o', 's', 
  'e', 'C', 'a', 'r', 'd', 'G', 'r', 'o', 'u', 'p', '\030', 'Z', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'M', 'e', 'n', 't', 'o', 
  'r', 'I', 'd', '\030', '[', ' ', '\001', '(', '\t', '\022', ')', '\n', '\r', 'E', 'x', 'c', 'h', 'a', 'n', 'g', 'e', 'S', 't', 'a', 't', 
  'e', '\030', '\\', ' ', '\001', '(', '\016', '2', '\022', '.', 'm', 's', 'g', '.', 'E', 'X', 'C', 'H', 'A', 'N', 'G', 'E', 'S', 'T', 'A', 
  'T', 'E', '\032', 'H', '\n', '\021', 'M', 'o', 'd', 'e', 'W', 'i', 'n', 'D', 'a', 't', 'a', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', 
  '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\"', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', 
  '\013', '2', '\023', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'P', 'v', 'p', 'W', 'i', 'n', 'D', 'a', 't', 'a', ':', '\002', '8', 
  '\001', '\032', '3', '\n', '\021', 'C', 'u', 'r', 'S', 'h', 'o', 'w', 'I', 't', 'e', 'm', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', 
  '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', 
  ':', '\002', '8', '\001', '\032', '/', '\n', '\r', 'S', 'e', 't', 't', 'i', 'n', 'g', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 
  'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', 
  '\002', '8', '\001', '\032', 'C', '\n', '\020', 'S', 'w', 'i', 't', 'c', 'h', 'I', 't', 'e', 'm', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', 
  '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\036', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', 
  '\013', '2', '\017', '.', 'm', 's', 'g', '.', 'S', 'w', 'i', 't', 'c', 'h', 'I', 't', 'e', 'm', ':', '\002', '8', '\001', '\032', '1', '\n', 
  '\017', 'P', 'u', 'n', 'i', 's', 'h', 'm', 'e', 'n', 't', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', 
  ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\003', ':', '\002', '8', '\001', '\032', '3', 
  '\n', '\021', 'R', 'e', 'g', 'i', 'o', 'n', 'D', 'e', 'l', 'a', 'y', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 
  'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', '8', 
  '\001', '\032', '.', '\n', '\014', 'T', 'i', 'c', 'k', 'e', 't', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', 
  '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\032', 
  '0', '\n', '\016', 'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', 
  '\001', ' ', '\001', '(', '\005', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\005', ':', '\002', '8', '\001', '\032', 
  'L', '\n', '\022', 'C', 'h', 'e', 's', 's', 'S', 'k', 'i', 'n', 'D', 'a', 't', 'a', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 
  'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '%', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', 
  '\026', '.', 'm', 's', 'g', '.', 'C', 'h', 'e', 's', 's', 'S', 'k', 'i', 'n', 'S', 'l', 'o', 't', 'D', 'a', 't', 'a', ':', '\002', 
  '8', '\001', '\032', '>', '\n', '\r', 'S', 'k', 'i', 'n', 'D', 'a', 't', 'a', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 
  'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\034', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\r', '.', 
  'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'I', 't', 'e', 'm', ':', '\002', '8', '\001', '\"', '|', '\n', '\007', 'P', 'v', 'p', 'D', 'a', 
  't', 'a', '\022', '\035', '\n', '\003', 'P', 'v', 'e', '\030', '\001', ' ', '\001', '(', '\013', '2', '\020', '.', 'm', 's', 'g', '.', 'P', 'v', 'e', 
  'D', 'a', 't', 'a', 'I', 'n', 'f', 'o', '\022', '%', '\n', '\t', 'C', 'a', 'r', 'd', 'G', 'r', 'o', 'u', 'p', '\030', '\002', ' ', '\001', 
  '(', '\013', '2', '\022', '.', 'm', 's', 'g', '.', 'C', 'a', 'r', 'd', 'G', 'r', 'o', 'u', 'p', 'D', 'a', 't', 'a', '\022', '+', '\n', 
  '\014', 'T', 'o', 'w', 'e', 'r', 'D', 'e', 'f', 'e', 'n', 's', 'e', '\030', '\003', ' ', '\001', '(', '\013', '2', '\025', '.', 'm', 's', 'g', 
  '.', 'T', 'o', 'w', 'e', 'r', 'D', 'e', 'f', 'e', 'n', 's', 'e', 'D', 'a', 't', 'a', '\"', '\032', '\n', '\013', 'T', 'D', 'C', 'a', 
  'r', 'd', 'G', 'r', 'o', 'u', 'p', '\022', '\013', '\n', '\003', 'I', 'd', 's', '\030', '\001', ' ', '\003', '(', '\005', '\"', '\177', '\n', '\014', 'T', 
  'D', 'C', 'a', 'r', 'd', 'G', 'r', 'o', 'u', 'p', 's', '\022', '$', '\n', '\n', 'C', 'h', 'e', 's', 's', 'B', 'o', 'a', 'r', 'd', 
  '\030', '\001', ' ', '\001', '(', '\013', '2', '\020', '.', 'm', 's', 'g', '.', 'T', 'D', 'C', 'a', 'r', 'd', 'G', 'r', 'o', 'u', 'p', '\022', 
  '%', '\n', '\013', 'C', 'h', 'e', 's', 's', 'P', 'l', 'a', 'y', 'e', 'r', '\030', '\002', ' ', '\001', '(', '\013', '2', '\020', '.', 'm', 's', 
  'g', '.', 'T', 'D', 'C', 'a', 'r', 'd', 'G', 'r', 'o', 'u', 'p', '\022', '\"', '\n', '\010', 'C', 'h', 'e', 's', 's', 'M', 'a', 'n', 
  '\030', '\003', ' ', '\001', '(', '\013', '2', '\020', '.', 'm', 's', 'g', '.', 'T', 'D', 'C', 'a', 'r', 'd', 'G', 'r', 'o', 'u', 'p', '\"', 
  '\233', '\001', '\n', '\013', 'T', 'D', 'I', 't', 'e', 'm', 'G', 'r', 'o', 'u', 'p', '\022', '%', '\n', '\n', 'C', 'a', 'r', 'd', 'G', 'r', 
  'o', 'u', 'p', 's', '\030', '\001', ' ', '\001', '(', '\013', '2', '\021', '.', 'm', 's', 'g', '.', 'T', 'D', 'C', 'a', 'r', 'd', 'G', 'r', 
  'o', 'u', 'p', 's', '\022', '*', '\n', '\005', 'I', 't', 'e', 'm', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\033', '.', 'm', 's', 'g', 
  '.', 'T', 'D', 'I', 't', 'e', 'm', 'G', 'r', 'o', 'u', 'p', '.', 'I', 't', 'e', 'm', 's', 'E', 'n', 't', 'r', 'y', '\032', '9', 
  '\n', '\n', 'I', 't', 'e', 'm', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\005', 
  '\022', '\032', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\013', '.', 'm', 's', 'g', '.', 'T', 'D', 'I', 
  't', 'e', 'm', ':', '\002', '8', '\001', '\"', '7', '\n', '\020', 'T', 'o', 'w', 'e', 'r', 'D', 'e', 'f', 'e', 'n', 's', 'e', 'D', 'a', 
  't', 'a', '\022', '#', '\n', '\t', 'I', 't', 'e', 'm', 'G', 'r', 'o', 'u', 'p', '\030', '\001', ' ', '\001', '(', '\013', '2', '\020', '.', 'm', 
  's', 'g', '.', 'T', 'D', 'I', 't', 'e', 'm', 'G', 'r', 'o', 'u', 'p', '\"', '#', '\n', '\017', 'K', 'e', 'r', 'n', 'e', 'l', 'C', 
  'a', 'r', 'd', 'G', 'r', 'o', 'u', 'p', '\022', '\020', '\n', '\010', 'C', 'h', 'e', 's', 's', 'I', 'd', 's', '\030', '\001', ' ', '\003', '(', 
  '\r', '\"', '>', '\n', '\017', 'K', 'e', 'r', 'n', 'e', 'l', 'C', 'h', 'e', 's', 's', 'I', 'n', 'f', 'o', '\022', '\n', '\n', '\002', 'I', 
  'd', '\030', '\001', ' ', '\001', '(', '\005', '\022', '\r', '\n', '\005', 'L', 'e', 'v', 'e', 'l', '\030', '\002', ' ', '\001', '(', '\005', '\022', '\020', '\n', 
  '\010', 'Q', 'u', 'a', 'n', 't', 'i', 't', 'y', '\030', '\003', ' ', '\001', '(', '\005', '\"', '8', '\n', '\021', 'A', 'p', 'p', 'l', 'y', 'W', 
  'o', 'r', 'k', 's', 'h', 'o', 'p', 'R', 'u', 'l', 'e', '\022', '#', '\n', '\007', 'E', 'x', 't', 'D', 'a', 't', 'a', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\022', '.', 'm', 's', 'g', '.', 'B', 'a', 't', 't', 'l', 'e', 'E', 'x', 't', 'D', 'a', 't', 'a', '\"', 'W', 
  '\n', '\016', 'C', 'S', 'D', 'T', 'V', 'i', 's', 'i', 't', 'e', 'd', 'M', 'a', 'p', '\022', '\021', '\n', '\t', 'T', 'i', 'm', 'e', 'S', 
  't', 'a', 'm', 'p', '\030', '\001', ' ', '\001', '(', '\003', '\022', '\r', '\n', '\005', 'M', 'a', 'p', 'I', 'D', '\030', '\002', ' ', '\001', '(', '\r', 
  '\022', '\020', '\n', '\010', 'S', 'u', 'b', 'M', 'a', 'p', 'I', 'D', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\021', '\n', '\t', 'I', 's', 'P', 
  'l', 'a', 'y', 'i', 'n', 'g', '\030', '\004', ' ', '\001', '(', '\010', '\"', '\213', '\001', '\n', '\013', 'V', 'i', 's', 'i', 't', 'e', 'd', 'M', 
  'a', 'p', 's', '\022', '\020', '\n', '\010', 'P', 'l', 'a', 'y', 'e', 'r', 'I', 'D', '\030', '\001', ' ', '\001', '(', '\t', '\022', '(', '\n', '\004', 
  'M', 'a', 'p', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\032', '.', 'm', 's', 'g', '.', 'V', 'i', 's', 'i', 't', 'e', 'd', 'M', 
  'a', 'p', 's', '.', 'M', 'a', 'p', 's', 'E', 'n', 't', 'r', 'y', '\032', '@', '\n', '\t', 'M', 'a', 'p', 's', 'E', 'n', 't', 'r', 
  'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\"', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', 
  ' ', '\001', '(', '\013', '2', '\023', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'V', 'i', 's', 'i', 't', 'e', 'd', 'M', 'a', 'p', 
  ':', '\002', '8', '\001', '\"', '1', '\n', '\017', 'C', 'S', 'D', 'T', 'C', 'u', 'r', 'S', 'h', 'o', 'w', 'I', 't', 'e', 'm', '\022', '\n', 
  '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\022', '\n', '\n', 'I', 'n', 's', 't', 'a', 'n', 'c', 'e', 'I', 'd', '\030', 
  '\002', ' ', '\001', '(', '\t', '\"', 'U', '\n', '\023', 'C', 'S', 'D', 'T', 'P', 'a', 's', 's', 'p', 'o', 'r', 't', 'H', 'i', 's', 't', 
  'o', 'r', 'y', '\022', '\037', '\n', '\004', 'T', 'y', 'p', 'e', '\030', '\001', ' ', '\001', '(', '\016', '2', '\021', '.', 'm', 's', 'g', '.', 'P', 
  'A', 'S', 'S', 'P', 'O', 'R', 'T', 'T', 'Y', 'P', 'E', '\022', '\016', '\n', '\006', 'S', 'e', 'a', 's', 'o', 'n', '\030', '\002', ' ', '\001', 
  '(', '\r', '\022', '\r', '\n', '\005', 'L', 'e', 'v', 'e', 'l', '\030', '\003', ' ', '\001', '(', '\r', '\"', 'G', '\n', '\016', 'E', 'x', 'c', 'h', 
  'a', 'n', 'g', 'e', 'R', 'e', 'c', 'o', 'r', 'd', '\022', '\014', '\n', '\004', 'I', 'n', 'i', 't', '\030', '\001', ' ', '\001', '(', '\010', '\022', 
  '\024', '\n', '\014', 'B', 'a', 'l', 'a', 'n', 'c', 'e', 'C', 'o', 'u', 'n', 't', '\030', '\002', ' ', '\001', '(', '\005', '\022', '\021', '\n', '\t', 
  'S', 'a', 'l', 'e', 'C', 'o', 'u', 'n', 't', '\030', '\003', ' ', '\001', '(', '\005', '\"', '\312', '\r', '\n', '\022', 'C', 'S', 'D', 'T', 'P', 
  'l', 'a', 'y', 'e', 'r', 'B', 'a', 's', 'e', 'I', 'n', 'f', 'o', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\t', 
  '\022', '\017', '\n', '\007', 'U', 's', 'r', 'N', 'a', 'm', 'e', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'H', 'e', 'a', 'd', 
  'P', 'i', 'c', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\022', '\n', '\n', 'C', 'h', 'a', 't', 'B', 'u', 'b', 'b', 'l', 'e', '\030', '\004', 
  ' ', '\001', '(', '\r', '\022', '\013', '\n', '\003', 'M', 'M', 'R', '\030', '\005', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'L', 'e', 'v', 'e', 
  'l', '\030', '\006', ' ', '\001', '(', '\r', '\022', '\013', '\n', '\003', 'E', 'x', 'p', '\030', '\007', ' ', '\001', '(', '\r', '\022', '\025', '\n', '\r', 'C', 
  'u', 'r', 'R', 'a', 'n', 'k', 'S', 'e', 'a', 's', 'o', 'n', '\030', '\010', ' ', '\001', '(', '\r', '\022', '?', '\n', '\030', 'H', 'i', 's', 
  't', 'o', 'r', 'y', 'P', 'v', 'p', 'S', 'h', 'o', 'w', 'P', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', '\030', '\t', ' ', '\001', 
  '(', '\016', '2', '\035', '.', 'm', 's', 'g', '.', 'H', 'I', 'S', 'T', 'O', 'R', 'Y', 'P', 'V', 'P', 'S', 'H', 'O', 'W', 'P', 'E', 
  'R', 'M', 'I', 'S', 'S', 'I', 'O', 'N', '\022', ';', '\n', '\n', 'P', 'v', 'p', 'H', 'i', 's', 't', 'o', 'r', 'y', '\030', '\n', ' ', 
  '\003', '(', '\013', '2', '\'', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'P', 'l', 'a', 'y', 'e', 'r', 'B', 'a', 's', 'e', 'I', 
  'n', 'f', 'o', '.', 'P', 'v', 'p', 'H', 'i', 's', 't', 'o', 'r', 'y', 'E', 'n', 't', 'r', 'y', '\022', '\024', '\n', '\014', 'H', 'e', 
  'a', 'd', 'P', 'i', 'c', 'F', 'r', 'a', 'm', 'e', '\030', '\013', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 'H', 'e', 'a', 'd', 'P', 
  'i', 'c', 'P', 'e', 'n', 'd', 'a', 'n', 't', '\030', '\014', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'S', 'c', 'e', 'n', 'e', '\030', 
  '\r', ' ', '\001', '(', '\r', '\022', '\024', '\n', '\014', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'U', 's', 'r', 'I', 'd', '\030', '\016', ' ', '\001', 
  '(', '\t', '\022', '(', '\n', '\017', 'S', 'w', 'i', 't', 'c', 'h', 'P', 'l', 'a', 'y', 'e', 'r', 'S', 'e', 't', '\030', '\017', ' ', '\003', 
  '(', '\016', '2', '\017', '.', 'm', 's', 'g', '.', 'S', 'W', 'I', 'T', 'C', 'H', 'T', 'Y', 'P', 'E', '\022', '+', '\n', '\016', 'C', 'h', 
  'a', 'n', 'n', 'e', 'l', 'V', 'i', 'p', 'T', 'y', 'p', 'e', '\030', '\020', ' ', '\001', '(', '\016', '2', '\023', '.', 'm', 's', 'g', '.', 
  'C', 'H', 'A', 'N', 'N', 'E', 'L', 'V', 'I', 'P', 'T', 'Y', 'P', 'E', '\022', '#', '\n', '\n', 'L', 'a', 'u', 'n', 'c', 'h', 'T', 
  'y', 'p', 'e', '\030', '\021', ' ', '\001', '(', '\016', '2', '\017', '.', 'm', 's', 'g', '.', 'L', 'A', 'U', 'N', 'C', 'H', 'T', 'Y', 'P', 
  'E', '\022', '\'', '\n', '\014', 'P', 'l', 'a', 't', 'F', 'o', 'r', 'm', 'T', 'y', 'p', 'e', '\030', '\022', ' ', '\001', '(', '\016', '2', '\021', 
  '.', 'm', 's', 'g', '.', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', 'T', 'Y', 'P', 'E', '\022', '\014', '\n', '\004', 'T', 'M', 'M', 'R', 
  '\030', '\023', ' ', '\001', '(', '\r', '\022', '\025', '\n', '\r', 'P', 'a', 's', 's', 'p', 'o', 'r', 't', 'L', 'e', 'v', 'e', 'l', '\030', '\024', 
  ' ', '\001', '(', '\r', '\022', '\014', '\n', '\004', 'S', 't', 'a', 'r', '\030', '\025', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'C', 'o', 'u', 
  'n', 't', 'r', 'y', '\030', '\026', ' ', '\001', '(', '\t', '\022', '\025', '\n', '\r', 'L', 'a', 's', 't', 'L', 'o', 'g', 'i', 'n', 'T', 'i', 
  'm', 'e', '\030', '\027', ' ', '\001', '(', '\003', '\022', '\025', '\n', '\r', 'N', 'a', 't', 'i', 'v', 'e', 'C', 'o', 'u', 'n', 't', 'r', 'y', 
  '\030', '\030', ' ', '\001', '(', '\t', '\022', '$', '\n', '\013', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'T', 'y', 'p', 'e', '\030', '\031', ' ', '\001', 
  '(', '\016', '2', '\017', '.', 'm', 's', 'g', '.', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '\022', '\030', '\n', '\020', 'R', 'e', 
  's', 'e', 't', 'H', 'e', 'a', 'd', 'P', 'i', 'c', 'T', 'i', 'm', 'e', '\030', '\032', ' ', '\001', '(', '\003', '\022', '\'', '\n', '\n', 'P', 
  'u', 'n', 'i', 's', 'h', 'm', 'e', 'n', 't', '\030', '\033', ' ', '\003', '(', '\013', '2', '\023', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 
  'T', 'P', 'u', 'n', 'i', 's', 'h', 'm', 'e', 'n', 't', '\022', '\016', '\n', '\006', 'P', 'e', 'r', 'i', 'o', 'd', '\030', '\034', ' ', '\001', 
  '(', '\r', '\022', '\020', '\n', '\010', 'P', 'r', 'o', 'v', 'i', 'n', 'c', 'e', '\030', '\035', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'M', 
  'v', 'p', 'C', 'o', 'u', 'n', 't', '\030', '\036', ' ', '\001', '(', '\r', '\022', '\027', '\n', '\017', 'P', 'a', 's', 's', 'p', 'o', 'r', 't', 
  'T', 'y', 'p', 'e', 'I', 'd', 's', '\030', '\037', ' ', '\003', '(', '\r', '\022', '7', '\n', '\010', 'M', 'v', 'p', 'I', 'n', 'f', 'o', 's', 
  '\030', ' ', ' ', '\003', '(', '\013', '2', '%', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'P', 'l', 'a', 'y', 'e', 'r', 'B', 'a', 
  's', 'e', 'I', 'n', 'f', 'o', '.', 'M', 'v', 'p', 'I', 'n', 'f', 'o', 's', 'E', 'n', 't', 'r', 'y', '\022', '\024', '\n', '\014', 'O', 
  'b', 's', 'e', 'r', 'v', 'e', 'P', 'v', 'p', 'I', 'd', '\030', '!', ' ', '\001', '(', '\004', '\022', '\017', '\n', '\007', 'P', 's', '4', 'O', 
  'n', 'l', 'y', '\030', '\"', ' ', '\001', '(', '\010', '\022', '+', '\n', '\014', 'R', 'e', 's', 't', 'r', 'i', 'c', 't', 'T', 'y', 'p', 'e', 
  '\030', '#', ' ', '\001', '(', '\016', '2', '\025', '.', 'm', 's', 'g', '.', 'U', 's', 'e', 'r', 'R', 'e', 's', 't', 'r', 'i', 'c', 't', 
  'T', 'y', 'p', 'e', '\022', '\'', '\n', '\t', 'G', 'u', 'i', 'l', 'd', 'I', 'n', 'f', 'o', '\030', '$', ' ', '\001', '(', '\013', '2', '\024', 
  '.', 'm', 's', 'g', '.', 'P', 'l', 'a', 'y', 'e', 'r', 'G', 'u', 'i', 'l', 'd', 'I', 'n', 'f', 'o', '\022', '\034', '\n', '\005', 'm', 
  'e', 'd', 'a', 'l', '\030', '%', ' ', '\001', '(', '\013', '2', '\r', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'I', 't', 'e', 'm', 
  '\022', '\021', '\n', '\t', 'O', 'r', 'i', 'R', 'e', 'g', 'i', 'o', 'n', '\030', '&', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'F', 'F', 
  'M', 'M', 'R', '\030', '\'', ' ', '\001', '(', '\r', '\022', 'E', '\n', '\017', 'A', 'd', 'v', 'a', 'n', 'c', 'e', 'P', 'a', 's', 's', 'p', 
  'o', 'r', 't', '\030', '+', ' ', '\003', '(', '\013', '2', ',', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'P', 'l', 'a', 'y', 'e', 
  'r', 'B', 'a', 's', 'e', 'I', 'n', 'f', 'o', '.', 'A', 'd', 'v', 'a', 'n', 'c', 'e', 'P', 'a', 's', 's', 'p', 'o', 'r', 't', 
  'E', 'n', 't', 'r', 'y', '\022', 'E', '\n', '\017', 'P', 'a', 's', 's', 'p', 'o', 'r', 't', 'C', 'a', 'r', 'd', 'N', 'u', 'm', '\030', 
  ',', ' ', '\003', '(', '\013', '2', ',', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'P', 'l', 'a', 'y', 'e', 'r', 'B', 'a', 's', 
  'e', 'I', 'n', 'f', 'o', '.', 'P', 'a', 's', 's', 'p', 'o', 'r', 't', 'C', 'a', 'r', 'd', 'N', 'u', 'm', 'E', 'n', 't', 'r', 
  'y', '\022', '\'', '\n', '\007', 'P', 'v', 'p', 'D', 'a', 't', 'a', '\030', '-', ' ', '\001', '(', '\013', '2', '\026', '.', 'm', 's', 'g', '.', 
  'C', 'S', 'D', 'T', 'P', 'l', 'a', 'y', 'e', 'r', 'P', 'v', 'p', 'D', 'a', 't', 'a', '\022', '1', '\n', '\016', 'M', 'e', 'n', 't', 
  'o', 'r', 'S', 'h', 'i', 'p', 'I', 'n', 'f', 'o', '\030', '.', ' ', '\001', '(', '\013', '2', '\031', '.', 'm', 's', 'g', '.', 'P', 'l', 
  'a', 'y', 'e', 'r', 'M', 'e', 'n', 't', 'o', 'r', 'S', 'h', 'i', 'p', 'I', 'n', 'f', 'o', '\022', '\025', '\n', '\r', 'T', 'o', 't', 
  'a', 'l', 'D', 'u', 'r', 'a', 't', 'i', 'o', 'n', '\030', '/', ' ', '\001', '(', '\003', '\022', '\'', '\n', '\n', 'M', 'e', 'n', 't', 'o', 
  'r', 'I', 'n', 'f', 'o', '\030', '0', ' ', '\001', '(', '\013', '2', '\023', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'M', 'e', 'n', 
  't', 'o', 'r', 'I', 'n', 'f', 'o', '\022', ')', '\n', '\r', 'E', 'x', 'c', 'h', 'a', 'n', 'g', 'e', 'S', 't', 'a', 't', 'e', '\030', 
  '1', ' ', '\001', '(', '\016', '2', '\022', '.', 'm', 's', 'g', '.', 'E', 'X', 'C', 'H', 'A', 'N', 'G', 'E', 'S', 'T', 'A', 'T', 'E', 
  '\022', '1', '\n', '\017', 'P', 'a', 's', 's', 'p', 'o', 'r', 't', 'H', 'i', 's', 't', 'o', 'r', 'y', '\030', '2', ' ', '\003', '(', '\013', 
  '2', '\030', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'P', 'a', 's', 's', 'p', 'o', 'r', 't', 'H', 'i', 's', 't', 'o', 'r', 
  'y', '\022', '+', '\n', '\016', 'E', 'x', 'c', 'h', 'a', 'n', 'g', 'e', 'R', 'e', 'c', 'o', 'r', 'd', '\030', '3', ' ', '\001', '(', '\013', 
  '2', '\023', '.', 'm', 's', 'g', '.', 'E', 'x', 'c', 'h', 'a', 'n', 'g', 'e', 'R', 'e', 'c', 'o', 'r', 'd', '\032', '1', '\n', '\017', 
  'P', 'v', 'p', 'H', 'i', 's', 't', 'o', 'r', 'y', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', 
  '\001', '(', '\004', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\t', ':', '\002', '8', '\001', '\032', '/', '\n', 
  '\r', 'M', 'v', 'p', 'I', 'n', 'f', 'o', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', 
  '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\032', 'M', '\n', '\024', 
  'A', 'd', 'v', 'a', 'n', 'c', 'e', 'P', 'a', 's', 's', 'p', 'o', 'r', 't', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 
  'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '$', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\025', 
  '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'P', 'a', 's', 's', 'p', 'o', 'r', 't', 'C', 'a', 'r', 'd', ':', '\002', '8', '\001', 
  '\032', '6', '\n', '\024', 'P', 'a', 's', 's', 'p', 'o', 'r', 't', 'C', 'a', 'r', 'd', 'N', 'u', 'm', 'E', 'n', 't', 'r', 'y', '\022', 
  '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', 
  '(', '\r', ':', '\002', '8', '\001', '\"', '[', '\n', '\017', 'P', 'l', 'a', 'y', 'e', 'r', 'G', 'u', 'i', 'l', 'd', 'I', 'n', 'f', 'o', 
  '\022', '\n', '\n', '\002', 'I', 'D', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'N', 'a', 'm', 'e', '\030', '\002', ' ', '\001', '(', 
  '\t', '\022', '\014', '\n', '\004', 'S', 'i', 'g', 'n', '\030', '\003', ' ', '\001', '(', '\005', '\022', ' ', '\n', '\004', 'R', 'o', 'l', 'e', '\030', '\004', 
  ' ', '\001', '(', '\016', '2', '\022', '.', 'm', 's', 'g', '.', 'G', 'U', 'I', 'L', 'D', 'R', 'O', 'L', 'E', 'T', 'Y', 'P', 'E', '\"', 
  '\253', '\005', '\n', '\024', 'C', 'S', 'D', 'T', 'P', 'l', 'a', 'y', 'e', 'r', 'S', 'i', 'm', 'p', 'l', 'e', 'I', 'n', 'f', 'o', '\022', 
  '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'U', 's', 'r', 'N', 'a', 'm', 'e', '\030', '\002', ' ', 
  '\001', '(', '\t', '\022', '\017', '\n', '\007', 'H', 'e', 'a', 'd', 'P', 'i', 'c', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\024', '\n', '\014', 'H', 
  'e', 'a', 'd', 'P', 'i', 'c', 'F', 'r', 'a', 'm', 'e', '\030', '\004', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 'H', 'e', 'a', 'd', 
  'P', 'i', 'c', 'P', 'e', 'n', 'd', 'a', 'n', 't', '\030', '\005', ' ', '\001', '(', '\r', '\022', '\022', '\n', '\n', 'C', 'h', 'a', 't', 'B', 
  'u', 'b', 'b', 'l', 'e', '\030', '\006', ' ', '\001', '(', '\r', '\022', '\013', '\n', '\003', 'M', 'M', 'R', '\030', '\007', ' ', '\001', '(', '\r', '\022', 
  '\014', '\n', '\004', 'T', 'M', 'M', 'R', '\030', '\010', ' ', '\001', '(', '\r', '\022', '\013', '\n', '\003', 'C', 'u', 'p', '\030', '\t', ' ', '\001', '(', 
  '\r', '\022', '\r', '\n', '\005', 'L', 'e', 'v', 'e', 'l', '\030', '\n', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'C', 'o', 'u', 'n', 't', 
  'r', 'y', '\030', '\013', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'P', 'r', 'o', 'v', 'i', 'n', 'c', 'e', '\030', '\014', ' ', '\001', '(', 
  '\r', '\022', '\'', '\n', '\014', 'P', 'l', 'a', 't', 'F', 'o', 'r', 'm', 'T', 'y', 'p', 'e', '\030', '\r', ' ', '\001', '(', '\016', '2', '\021', 
  '.', 'm', 's', 'g', '.', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', 'T', 'Y', 'P', 'E', '\022', '\016', '\n', '\006', 'P', 'e', 'r', 'i', 
  'o', 'd', '\030', '\016', ' ', '\001', '(', '\r', '\022', '\027', '\n', '\017', 'P', 'a', 's', 's', 'p', 'o', 'r', 't', 'T', 'y', 'p', 'e', 'I', 
  'd', 's', '\030', '\017', ' ', '\003', '(', '\r', '\022', '\024', '\n', '\014', 'O', 'b', 's', 'e', 'r', 'v', 'e', 'P', 'v', 'p', 'I', 'd', '\030', 
  '\020', ' ', '\001', '(', '\004', '\022', '\017', '\n', '\007', 'P', 'S', '4', 'O', 'n', 'l', 'y', '\030', '\023', ' ', '\001', '(', '\010', '\022', '$', '\n', 
  '\013', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'T', 'y', 'p', 'e', '\030', '\024', ' ', '\001', '(', '\016', '2', '\017', '.', 'm', 's', 'g', '.', 
  'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '\022', '\024', '\n', '\014', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'U', 's', 'r', 'I', 
  'd', '\030', '\025', ' ', '\001', '(', '\t', '\022', '\'', '\n', '\t', 'G', 'u', 'i', 'l', 'd', 'I', 'n', 'f', 'o', '\030', '\026', ' ', '\001', '(', 
  '\013', '2', '\024', '.', 'm', 's', 'g', '.', 'P', 'l', 'a', 'y', 'e', 'r', 'G', 'u', 'i', 'l', 'd', 'I', 'n', 'f', 'o', '\022', '+', 
  '\n', '\014', 'R', 'e', 's', 't', 'r', 'i', 'c', 't', 'T', 'y', 'p', 'e', '\030', '\027', ' ', '\001', '(', '\016', '2', '\025', '.', 'm', 's', 
  'g', '.', 'U', 's', 'e', 'r', 'R', 'e', 's', 't', 'r', 'i', 'c', 't', 'T', 'y', 'p', 'e', '\022', ')', '\n', '\r', 'E', 'x', 'c', 
  'h', 'a', 'n', 'g', 'e', 'S', 't', 'a', 't', 'e', '\030', '\030', ' ', '\001', '(', '\016', '2', '\022', '.', 'm', 's', 'g', '.', 'E', 'X', 
  'C', 'H', 'A', 'N', 'G', 'E', 'S', 'T', 'A', 'T', 'E', '\022', 'E', '\n', '\016', 'H', 'i', 's', 'T', 'o', 'r', 'y', 'M', 'a', 'x', 
  'S', 't', 'a', 't', '\030', '\031', ' ', '\003', '(', '\013', '2', '-', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'P', 'l', 'a', 'y', 
  'e', 'r', 'S', 'i', 'm', 'p', 'l', 'e', 'I', 'n', 'f', 'o', '.', 'H', 'i', 's', 'T', 'o', 'r', 'y', 'M', 'a', 'x', 'S', 't', 
  'a', 't', 'E', 'n', 't', 'r', 'y', '\032', 'L', '\n', '\023', 'H', 'i', 's', 'T', 'o', 'r', 'y', 'M', 'a', 'x', 'S', 't', 'a', 't', 
  'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\005', '\022', '$', '\n', '\005', 'v', 'a', 'l', 
  'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\025', '.', 'm', 's', 'g', '.', 'H', 'i', 's', 't', 'o', 'r', 'y', 'M', 'a', 'x', 
  'C', 'u', 'p', 'M', 'm', 'r', ':', '\002', '8', '\001', '\"', 'v', '\n', '\022', 'C', 'S', 'D', 'T', 'P', 'l', 'a', 'y', 'e', 'r', 'R', 
  'a', 'n', 'k', 'I', 'n', 'f', 'o', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'U', 's', 
  'r', 'N', 'a', 'm', 'e', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'H', 'e', 'a', 'd', 'P', 'i', 'c', '\030', '\003', ' ', 
  '\001', '(', '\r', '\022', '\024', '\n', '\014', 'H', 'e', 'a', 'd', 'P', 'i', 'c', 'F', 'r', 'a', 'm', 'e', '\030', '\004', ' ', '\001', '(', '\r', 
  '\022', '\017', '\n', '\007', 'C', 'o', 'u', 'n', 't', 'r', 'y', '\030', '\005', ' ', '\001', '(', '\t', '\022', '\013', '\n', '\003', 'C', 'u', 'p', '\030', 
  '\006', ' ', '\001', '(', '\r', '\"', '5', '\n', '\030', 'C', 'S', 'D', 'T', 'P', 'l', 'a', 'y', 'e', 'r', 'T', 'o', 'u', 'r', 'n', 'a', 
  'm', 'e', 'n', 't', 'I', 'n', 'f', 'o', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'S', 
  'c', 'o', 'r', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\"', 'q', '\n', '\016', 'C', 'S', 'D', 'T', 'P', 'v', 'p', 'H', 'i', 's', 't', 
  'o', 'r', 'y', '\022', '\r', '\n', '\005', 'P', 'v', 'p', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\004', '\022', '\021', '\n', '\t', 'C', 'h', 'a', 
  'n', 'g', 'e', 'M', 'm', 'r', '\030', '\002', ' ', '\001', '(', '\005', '\022', '\025', '\n', '\r', 'D', 'a', 'i', 'l', 'y', 'F', 'i', 'r', 's', 
  't', 'W', 'i', 'n', '\030', '\003', ' ', '\001', '(', '\010', '\022', '&', '\n', '\022', 'D', 'a', 'i', 'l', 'y', 'F', 'i', 'r', 's', 't', 'W', 
  'i', 'n', 'A', 'w', 'a', 'r', 'd', '\030', '\004', ' ', '\003', '(', '\013', '2', '\n', '.', 'm', 's', 'g', '.', 'A', 'w', 'a', 'r', 'd', 
  '\"', '<', '\n', '\021', 'C', 'S', 'D', 'T', 'P', 'l', 'a', 'y', 'e', 'r', 'P', 'v', 'p', 'I', 'n', 'f', 'o', '\022', '\'', '\n', '\n', 
  'P', 'v', 'p', 'H', 'i', 's', 't', 'o', 'r', 'y', '\030', '\001', ' ', '\003', '(', '\013', '2', '\023', '.', 'm', 's', 'g', '.', 'C', 'S', 
  'D', 'T', 'P', 'v', 'p', 'H', 'i', 's', 't', 'o', 'r', 'y', '\"', '|', '\n', '\024', 'C', 'S', 'D', 'T', 'P', 'l', 'a', 'y', 'e', 
  'r', 'D', 'e', 't', 'a', 'i', 'l', 'I', 'n', 'f', 'o', '\022', ')', '\n', '\010', 'B', 'a', 's', 'e', 'I', 'n', 'f', 'o', '\030', '\001', 
  ' ', '\001', '(', '\013', '2', '\027', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'P', 'l', 'a', 'y', 'e', 'r', 'B', 'a', 's', 'e', 
  'I', 'n', 'f', 'o', '\022', '\033', '\n', '\004', 'S', 't', 'a', 't', '\030', '\002', ' ', '\001', '(', '\013', '2', '\r', '.', 'm', 's', 'g', '.', 
  'C', 'S', 'D', 'T', 'S', 't', 'a', 't', '\022', '\034', '\n', '\005', 'I', 't', 'e', 'm', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\r', 
  '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'I', 't', 'e', 'm', '\"', '?', '\n', '\017', 'C', 'S', 'D', 'T', 'P', 'l', 'a', 'y', 
  'e', 'r', 'I', 't', 'e', 'm', 's', '\022', '\r', '\n', '\005', 'C', 'a', 'c', 'h', 'e', '\030', '\001', ' ', '\001', '(', '\010', '\022', '\035', '\n', 
  '\006', 'M', 'e', 'd', 'a', 'l', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\r', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'I', 
  't', 'e', 'm', '\"', '\267', '\001', '\n', '\022', 'C', 'S', 'D', 'T', 'R', 'a', 'n', 'k', 'S', 'e', 'a', 's', 'o', 'n', 'D', 'a', 't', 
  'a', '\022', '\026', '\n', '\016', 'C', 'o', 'm', 'p', 'e', 't', 'i', 't', 'i', 'o', 'n', 'C', 'n', 't', '\030', '\001', ' ', '\001', '(', '\r', 
  '\022', '\017', '\n', '\007', 'A', 'v', 'g', 'R', 'a', 'n', 'k', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'M', 'v', 'p', 'C', 
  'o', 'u', 'n', 't', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 'M', 'v', 'p', 'P', 'r', 'o', 'b', 'a', 'b', 'i', 'l', 
  'i', 't', 'y', '\030', '\004', ' ', '\001', '(', '\r', '\022', '\021', '\n', '\t', 'T', 'o', 'p', '3', 'C', 'o', 'u', 'n', 't', '\030', '\005', ' ', 
  '\001', '(', '\r', '\022', '\027', '\n', '\017', 'T', 'o', 'p', '3', 'P', 'r', 'o', 'b', 'a', 'b', 'i', 'l', 'i', 't', 'y', '\030', '\006', ' ', 
  '\001', '(', '\r', '\022', '\020', '\n', '\010', 'A', 'v', 'g', 'R', 'o', 'u', 'n', 'd', '\030', '\007', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 
  'W', 'i', 'n', 'T', 'i', 'm', 'e', 's', '\030', '\010', ' ', '\001', '(', '\r', '\"', '\221', '\002', '\n', '\022', 'C', 'S', 'D', 'T', 'R', 'a', 
  'n', 'k', 'S', 'e', 'a', 's', 'o', 'n', 'I', 'n', 'f', 'o', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', 
  '\016', '\n', '\006', 'M', 'a', 'x', 'M', 'M', 'R', '\030', '\002', ' ', '\001', '(', '\r', '\022', '1', '\n', '\005', 'M', 'o', 'd', 'e', 's', '\030', 
  '\003', ' ', '\003', '(', '\013', '2', '\"', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'R', 'a', 'n', 'k', 'S', 'e', 'a', 's', 'o', 
  'n', 'I', 'n', 'f', 'o', '.', 'M', 'o', 'd', 'e', 's', 'E', 'n', 't', 'r', 'y', '\022', '\017', '\n', '\007', 'M', 'a', 'x', 'T', 'M', 
  'M', 'R', '\030', '\004', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'M', 'a', 'x', 'F', 'F', 'M', 'M', 'R', '\030', '\005', ' ', '\001', '(', 
  '\r', '\022', '\024', '\n', '\014', 'M', 'a', 'x', 'Q', 'u', 'e', 'e', 'n', 'R', 'a', 'n', 'k', '\030', '\006', ' ', '\001', '(', '\005', '\022', '\025', 
  '\n', '\r', 'M', 'a', 'x', 'T', 'Q', 'u', 'e', 'e', 'n', 'R', 'a', 'n', 'k', '\030', '\007', ' ', '\001', '(', '\005', '\022', '\025', '\n', '\r', 
  'M', 'a', 'x', 'F', 'Q', 'u', 'e', 'e', 'n', 'R', 'a', 'n', 'k', '\030', '\010', ' ', '\001', '(', '\005', '\032', 'E', '\n', '\n', 'M', 'o', 
  'd', 'e', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '&', '\n', '\005', 
  'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\027', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'R', 'a', 'n', 
  'k', 'S', 'e', 'a', 's', 'o', 'n', 'D', 'a', 't', 'a', ':', '\002', '8', '\001', '\"', '\226', '\004', '\n', '\010', 'C', 'S', 'D', 'T', 'S', 
  't', 'a', 't', '\022', '\013', '\n', '\003', 'M', 'M', 'R', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 'C', 'o', 'm', 'p', 'e', 
  't', 'i', 't', 'i', 'o', 'n', 'C', 'n', 't', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\016', '\n', '\006', 'M', 'v', 'p', 'C', 'n', 't', 
  '\030', '\003', ' ', '\001', '(', '\r', '\022', '\024', '\n', '\014', 'R', 'e', 'g', 'i', 's', 't', 'e', 'r', 'T', 'i', 'm', 'e', '\030', '\004', ' ', 
  '\001', '(', '\003', '\022', '\027', '\n', '\017', 'C', 'h', 'e', 's', 's', 'P', 'l', 'a', 'y', 'e', 'r', 'S', 'k', 'i', 'n', '\030', '\005', ' ', 
  '\001', '(', '\r', '\022', '\023', '\n', '\013', 'F', 'o', 'l', 'l', 'o', 'w', 'C', 'o', 'u', 'n', 't', '\030', '\006', ' ', '\001', '(', '\r', '\022', 
  '\021', '\n', '\t', 'F', 'a', 'n', 's', 'C', 'o', 'u', 'n', 't', '\030', '\007', ' ', '\001', '(', '\r', '\022', '1', '\n', '\n', 'S', 'e', 'a', 
  's', 'o', 'n', 'I', 'n', 'f', 'o', '\030', '\010', ' ', '\003', '(', '\013', '2', '\035', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'S', 
  't', 'a', 't', '.', 'S', 'e', 'a', 's', 'o', 'n', 'I', 'n', 'f', 'o', 'E', 'n', 't', 'r', 'y', '\022', '-', '\n', '\014', 'U', 'n', 
  'S', 'e', 'a', 's', 'o', 'n', 'D', 'a', 't', 'a', '\030', '\t', ' ', '\001', '(', '\013', '2', '\027', '.', 'm', 's', 'g', '.', 'C', 'S', 
  'D', 'T', 'R', 'a', 'n', 'k', 'S', 'e', 'a', 's', 'o', 'n', 'D', 'a', 't', 'a', '\022', '\033', '\n', '\023', 'C', 'o', 'm', 'p', 'e', 
  't', 'i', 't', 'i', 'o', 'n', 'C', 'n', 't', 'D', 'a', 'i', 'l', 'y', '\030', '\n', ' ', '\001', '(', '\r', '\022', '\032', '\n', '\022', 'B', 
  'i', 'n', 'd', 'O', 'l', 'd', 'P', 'l', 'a', 'y', 'e', 'r', 'C', 'o', 'u', 'n', 't', '\030', '\013', ' ', '\001', '(', '\r', '\022', '\014', 
  '\n', '\004', 'T', 'M', 'M', 'R', '\030', '\014', ' ', '\001', '(', '\r', '\022', ')', '\n', '\013', 'C', 'u', 'r', 'C', 'h', 'e', 's', 's', 'P', 
  'l', 'r', '\030', '\r', ' ', '\001', '(', '\013', '2', '\024', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'C', 'h', 'e', 's', 's', 'P', 
  'l', 'a', 'y', 'e', 'r', '\022', '\013', '\n', '\003', 'C', 'u', 'p', '\030', '\016', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'F', 'F', 'M', 
  'M', 'R', '\030', '\017', ' ', '\001', '(', '\r', '\022', '\024', '\n', '\014', 'M', 'a', 'x', 'Q', 'u', 'e', 'e', 'n', 'R', 'a', 'n', 'k', '\030', 
  '\020', ' ', '\001', '(', '\005', '\022', '\025', '\n', '\r', 'M', 'a', 'x', 'T', 'Q', 'u', 'e', 'e', 'n', 'R', 'a', 'n', 'k', '\030', '\021', ' ', 
  '\001', '(', '\005', '\022', '\025', '\n', '\r', 'M', 'a', 'x', 'F', 'Q', 'u', 'e', 'e', 'n', 'R', 'a', 'n', 'k', '\030', '\022', ' ', '\001', '(', 
  '\005', '\032', 'J', '\n', '\017', 'S', 'e', 'a', 's', 'o', 'n', 'I', 'n', 'f', 'o', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 
  'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '&', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\027', 
  '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'R', 'a', 'n', 'k', 'S', 'e', 'a', 's', 'o', 'n', 'I', 'n', 'f', 'o', ':', '\002', 
  '8', '\001', '\"', '[', '\n', '\017', 'C', 'S', 'D', 'T', 'N', 'u', 'm', 'R', 'a', 'n', 'k', 'I', 't', 'e', 'm', '\022', '\n', '\n', '\002', 
  'I', 'd', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\016', '\n', '\006', 'N', 'u', 'm', 'b', 'e', 'r', '\030', '\004', ' ', '\001', '(', '\r', '\022', 
  '\014', '\n', '\004', 'R', 'a', 'n', 'k', '\030', '\005', ' ', '\001', '(', '\005', '\022', '\017', '\n', '\007', 'C', 'a', 'p', 't', 'a', 'i', 'n', '\030', 
  '\006', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'S', 'c', 'o', 'r', 'e', '\030', '\007', ' ', '\001', '(', '\003', '\"', '\324', '\002', '\n', '\r', 
  'C', 'S', 'D', 'T', 'W', 'o', 'r', 'l', 'd', 'C', 'h', 'a', 't', '\022', '+', '\n', '\010', 'B', 'a', 's', 'e', 'I', 'n', 'f', 'o', 
  '\030', '\001', ' ', '\001', '(', '\013', '2', '\031', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'P', 'l', 'a', 'y', 'e', 'r', 'S', 'i', 
  'm', 'p', 'l', 'e', 'I', 'n', 'f', 'o', '\022', '\017', '\n', '\007', 'C', 'o', 'n', 't', 'e', 'n', 't', '\030', '\002', ' ', '\001', '(', '\t', 
  '\022', '\021', '\n', '\t', 'E', 'm', 'o', 't', 'i', 'o', 'n', 'I', 'd', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\024', '\n', '\014', 'N', 'e', 
  'e', 'd', 'L', 'o', 'c', 'a', 'l', 'i', 'z', 'e', '\030', '\004', ' ', '\001', '(', '\010', '\022', '\021', '\n', '\t', 'T', 'i', 'm', 'e', 's', 
  't', 'a', 'm', 'p', '\030', '\005', ' ', '\001', '(', '\003', '\022', '$', '\n', '\r', 'W', 'o', 'r', 'l', 'd', 'C', 'h', 'a', 't', 'T', 'y', 
  'p', 'e', '\030', '\006', ' ', '\001', '(', '\016', '2', '\r', '.', 'm', 's', 'g', '.', 'W', 'O', 'R', 'D', 'C', 'H', 'A', 'T', '\022', '\027', 
  '\n', '\017', 'W', 'o', 'r', 'k', 's', 'h', 'o', 'p', 'M', 'a', 'p', 'N', 'a', 'm', 'e', '\030', '\007', ' ', '\001', '(', '\t', '\022', '\'', 
  '\n', '\t', 'W', 'S', 'S', 'e', 't', 't', 'i', 'n', 'g', '\030', '\010', ' ', '\001', '(', '\013', '2', '\024', '.', 'm', 's', 'g', '.', 'W', 
  'o', 'r', 'k', 's', 'h', 'o', 'p', 'S', 'e', 't', 't', 'i', 'n', 'g', '\022', '\'', '\n', '\n', 'S', 'o', 'u', 'r', 'c', 'e', 'T', 
  'y', 'p', 'e', '\030', '\t', ' ', '\001', '(', '\016', '2', '\023', '.', 'm', 's', 'g', '.', 'C', 'H', 'A', 'T', 'S', 'O', 'U', 'R', 'C', 
  'E', 'T', 'Y', 'P', 'E', '\022', '\021', '\n', '\t', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'I', 'D', '\030', '\n', ' ', '\001', '(', '\t', '\022', 
  '%', '\n', '\t', 'M', 'e', 'd', 'a', 'l', 'I', 'n', 'f', 'o', '\030', '\013', ' ', '\001', '(', '\013', '2', '\022', '.', 'm', 's', 'g', '.', 
  'C', 'S', 'D', 'T', 'I', 't', 'e', 'm', 'M', 'e', 'd', 'a', 'l', '\"', '\276', '\002', '\n', '\013', 'C', 'S', 'D', 'T', 'B', 'u', 'f', 
  'f', 'A', 'c', 't', '\022', '\017', '\n', '\007', 'G', 'r', 'o', 'u', 'p', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 
  'A', 'c', 't', 'I', 'd', '\030', '\002', ' ', '\001', '(', '\r', '\022', '%', '\n', '\t', 'A', 'c', 't', 'S', 't', 'a', 't', 'u', 's', '\030', 
  '\003', ' ', '\001', '(', '\016', '2', '\022', '.', 'm', 's', 'g', '.', 'B', 'U', 'F', 'F', 'A', 'C', 'T', 'S', 'T', 'A', 'T', 'U', 'S', 
  '\022', '\020', '\n', '\010', 'S', 'h', 'o', 'w', 'T', 'i', 'm', 'e', '\030', '\004', ' ', '\001', '(', '\r', '\022', '\023', '\n', '\013', 'E', 'n', 'd', 
  'S', 'h', 'o', 'w', 'T', 'i', 'm', 'e', '\030', '\005', ' ', '\001', '(', '\r', '\022', '\021', '\n', '\t', 'S', 't', 'a', 'r', 't', 'T', 'i', 
  'm', 'e', '\030', '\006', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'E', 'n', 'd', 'T', 'i', 'm', 'e', '\030', '\007', ' ', '\001', '(', '\r', 
  '\022', '\025', '\n', '\r', 'B', 'u', 'f', 'f', 'S', 't', 'a', 'r', 't', 'T', 'i', 'm', 'e', '\030', '\010', ' ', '\001', '(', '\r', '\022', '\023', 
  '\n', '\013', 'B', 'u', 'f', 'f', 'E', 'n', 'd', 'T', 'i', 'm', 'e', '\030', '\t', ' ', '\001', '(', '\r', '\022', '\"', '\n', '\007', 'A', 'c', 
  't', 'T', 'y', 'p', 'e', '\030', '\n', ' ', '\001', '(', '\016', '2', '\021', '.', 'm', 's', 'g', '.', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 
  'Y', 'T', 'Y', 'P', 'E', '\022', '%', '\n', '\010', 'B', 'u', 'f', 'f', 'T', 'y', 'p', 'e', '\030', '\013', ' ', '\001', '(', '\016', '2', '\023', 
  '.', 'm', 's', 'g', '.', 'B', 'u', 'f', 'f', 'E', 'f', 'f', 'e', 'c', 't', 'T', 'y', 'p', 'e', '\022', '\023', '\n', '\013', 'B', 'u', 
  'f', 'f', 'S', 't', 'a', 'r', 't', 'L', 'v', '\030', '\014', ' ', '\001', '(', '\r', '\022', '\021', '\n', '\t', 'B', 'u', 'f', 'f', 'E', 'n', 
  'd', 'L', 'v', '\030', '\r', ' ', '\001', '(', '\r', '\"', '\200', '\003', '\n', '\010', 'C', 'S', 'D', 'T', 'M', 'a', 'i', 'l', '\022', '\n', '\n', 
  '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\004', '\022', '\r', '\n', '\005', 'T', 'i', 't', 'l', 'e', '\030', '\002', ' ', '\001', '(', '\t', '\022', 
  '\017', '\n', '\007', 'C', 'o', 'n', 't', 'e', 'n', 't', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\032', '\n', '\006', 'A', 'w', 'a', 'r', 'd', 
  's', '\030', '\004', ' ', '\003', '(', '\013', '2', '\n', '.', 'm', 's', 'g', '.', 'A', 'w', 'a', 'r', 'd', '\022', '\n', '\n', '\002', 'T', 's', 
  '\030', '\005', ' ', '\001', '(', '\003', '\022', '\016', '\n', '\006', 'I', 's', 'R', 'e', 'a', 'd', '\030', '\006', ' ', '\001', '(', '\010', '\022', '\022', '\n', 
  '\n', 'I', 's', 'G', 'e', 't', 'A', 'w', 'a', 'r', 'd', '\030', '\007', ' ', '\001', '(', '\010', '\022', '\014', '\n', '\004', 'F', 'l', 'a', 'g', 
  '\030', '\010', ' ', '\001', '(', '\r', '\022', ' ', '\n', '\013', 'A', 'w', 'a', 'r', 'd', 'S', 'o', 'u', 'r', 'c', 'e', '\030', '\t', ' ', '\001', 
  '(', '\016', '2', '\013', '.', 'm', 's', 'g', '.', 'S', 'O', 'U', 'R', 'C', 'E', '\022', '%', '\n', '\004', 'D', 'i', 'c', 't', '\030', '\n', 
  ' ', '\003', '(', '\013', '2', '\027', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'M', 'a', 'i', 'l', '.', 'D', 'i', 'c', 't', 'E', 
  'n', 't', 'r', 'y', '\022', '!', '\n', '\007', 'E', 'x', 't', 'D', 'a', 't', 'a', '\030', '\013', ' ', '\001', '(', '\013', '2', '\020', '.', 'm', 
  's', 'g', '.', 'M', 'a', 'i', 'l', 'E', 'x', 't', 'D', 'a', 't', 'a', '\022', '\017', '\n', '\007', 'E', 'n', 'd', 'T', 'i', 'm', 'e', 
  '\030', '\014', ' ', '\001', '(', '\003', '\022', '\031', '\n', '\005', 'W', 'e', 'b', 'O', 'p', '\030', '\036', ' ', '\001', '(', '\016', '2', '\n', '.', 'm', 
  's', 'g', '.', 'W', 'E', 'B', 'O', 'P', '\022', '\023', '\n', '\013', 'W', 'e', 'b', 'O', 'p', 'e', 'n', 'D', 'a', 't', 'a', '\030', '\037', 
  ' ', '\001', '(', '\t', '\022', '\024', '\n', '\014', 'M', 'u', 's', 't', 'W', 'a', 'i', 't', 'T', 'i', 'm', 'e', '\030', ' ', ' ', '\001', '(', 
  '\003', '\032', '+', '\n', '\t', 'D', 'i', 'c', 't', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', 
  '(', '\t', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\t', ':', '\002', '8', '\001', '\"', '/', '\n', '\016', 
  'C', 'S', 'D', 'T', 'N', 'o', 't', 'i', 'c', 'e', 'I', 'n', 'f', 'o', '\022', '\035', '\n', '\004', 'D', 'a', 't', 'a', '\030', '\001', ' ', 
  '\003', '(', '\013', '2', '\017', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'N', 'o', 't', 'i', 'c', 'e', '\"', '\200', '\006', '\n', '\n', 
  'C', 'S', 'D', 'T', 'N', 'o', 't', 'i', 'c', 'e', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\003', '\022', '\r', '\n', 
  '\005', 'T', 'i', 't', 'l', 'e', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'C', 'o', 'n', 't', 'e', 'n', 't', '\030', '\003', 
  ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'L', 'a', 'b', 'e', 'l', '\030', '\004', ' ', '\001', '(', '\t', '\022', '!', '\n', '\t', 'L', 'a', 
  'b', 'e', 'l', 'T', 'y', 'p', 'e', '\030', '\005', ' ', '\001', '(', '\016', '2', '\016', '.', 'm', 's', 'g', '.', 'L', 'A', 'B', 'E', 'L', 
  'T', 'Y', 'P', 'E', '\022', '\n', '\n', '\002', 'T', 's', '\030', '\006', ' ', '\001', '(', '\003', '\022', '%', '\n', '\010', 'S', 'h', 'o', 'w', 'T', 
  'y', 'p', 'e', '\030', '\007', ' ', '\001', '(', '\016', '2', '\023', '.', 'm', 's', 'g', '.', 'N', 'O', 'T', 'I', 'C', 'E', 'S', 'H', 'O', 
  'W', 'T', 'Y', 'P', 'E', '\022', '+', '\n', '\013', 'C', 'o', 'n', 't', 'e', 'n', 't', 'T', 'y', 'p', 'e', '\030', '\010', ' ', '\001', '(', 
  '\016', '2', '\026', '.', 'm', 's', 'g', '.', 'N', 'O', 'T', 'I', 'C', 'E', 'C', 'O', 'N', 'T', 'E', 'N', 'T', 'T', 'Y', 'P', 'E', 
  '\022', '\016', '\n', '\006', 'P', 'i', 'c', 'U', 'r', 'l', '\030', '\t', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'S', 'k', 'i', 'p', 'U', 
  'r', 'l', '\030', '\n', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'F', 'l', 'a', 'g', '\030', '\013', ' ', '\001', '(', '\r', '\022', '\017', '\n', 
  '\007', 'E', 'n', 'd', 'T', 'i', 'm', 'e', '\030', '\014', ' ', '\001', '(', '\003', '\022', '#', '\n', '\n', 'N', 'o', 't', 'i', 'c', 'e', 'T', 
  'y', 'p', 'e', '\030', '\r', ' ', '\001', '(', '\016', '2', '\017', '.', 'm', 's', 'g', '.', 'N', 'O', 'T', 'I', 'C', 'E', 'T', 'Y', 'P', 
  'E', '\022', '\023', '\n', '\013', 'C', 'o', 'u', 'n', 't', 'r', 'y', 'L', 'i', 's', 't', '\030', '\016', ' ', '\003', '(', '\t', '\022', '\033', '\n', 
  '\003', 'T', 'a', 'p', '\030', '\017', ' ', '\001', '(', '\016', '2', '\016', '.', 'm', 's', 'g', '.', 'N', 'O', 'T', 'I', 'C', 'E', 'T', 'A', 
  'P', '\022', '\025', '\n', '\r', 'S', 'k', 'i', 'p', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', '\030', '\020', ' ', '\001', '(', '\t', '\022', 
  '\017', '\n', '\007', 'S', 'k', 'i', 'p', 'T', 'a', 'b', '\030', '\021', ' ', '\001', '(', '\r', '\022', '+', '\n', '\013', 'P', 'i', 'c', 'J', 'u', 
  'm', 'p', 'T', 'y', 'p', 'e', '\030', '\022', ' ', '\001', '(', '\016', '2', '\026', '.', 'm', 's', 'g', '.', 'P', 'I', 'C', 'N', 'O', 'T', 
  'I', 'C', 'E', 'J', 'U', 'M', 'P', 'T', 'Y', 'P', 'E', '\022', '\'', '\n', '\n', 'W', 'e', 'b', 'C', 'o', 'n', 't', 'e', 'n', 't', 
  '\030', '\023', ' ', '\003', '(', '\013', '2', '\023', '.', 'm', 's', 'g', '.', 'G', 'M', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'I', 'n', 
  'f', 'o', '\022', '\024', '\n', '\014', 'D', 'o', 'w', 'n', 'l', 'o', 'a', 'd', 'L', 'i', 's', 't', '\030', '\024', ' ', '\003', '(', '\t', '\022', 
  '\'', '\n', '\014', 'P', 'l', 'a', 't', 'f', 'o', 'r', 'm', 'L', 'i', 's', 't', '\030', '\025', ' ', '\003', '(', '\016', '2', '\021', '.', 'm', 
  's', 'g', '.', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', 'T', 'Y', 'P', 'E', '\022', ')', '\n', '\r', 'M', 'a', 'g', 'n', 'e', 't', 
  'i', 's', 'm', 'T', 'y', 'p', 'e', '\030', '\026', ' ', '\001', '(', '\016', '2', '\022', '.', 'm', 's', 'g', '.', 'M', 'A', 'G', 'N', 'E', 
  'T', 'I', 'S', 'M', 'T', 'Y', 'P', 'E', '\022', '\023', '\n', '\013', 'C', 'o', 'v', 'e', 'r', 'P', 'i', 'c', 'U', 'r', 'l', '\030', '\027', 
  ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'S', 'u', 'b', 't', 'i', 't', 'l', 'e', '\030', '\030', ' ', '\001', '(', '\t', '\022', '\023', '\n', 
  '\013', 'J', 'u', 'm', 'p', 'G', 'o', 'o', 'd', 's', 'I', 'd', '\030', '\031', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 'A', 'p', 'k', 
  'V', 'e', 'r', 's', 'i', 'o', 'n', 'L', 'i', 's', 't', '\030', '\032', ' ', '\003', '(', '\t', '\022', '\021', '\n', '\t', 'P', 'C', 'S', 'k', 
  'i', 'p', 'U', 'r', 'l', '\030', '\033', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'S', 'o', 'r', 't', '\030', '\034', ' ', '\001', '(', '\003', 
  '\022', '\024', '\n', '\014', 'N', 'e', 'e', 'd', 'R', 'e', 'd', 'P', 'o', 'i', 'n', 't', '\030', '\035', ' ', '\001', '(', '\010', '\022', '\027', '\n', 
  '\017', 'E', 'x', 'c', 'l', 'u', 'd', 'e', 'D', 'o', 'w', 'n', 'l', 'o', 'a', 'd', '\030', '\036', ' ', '\003', '(', '\t', '\022', '\021', '\n', 
  '\t', 'S', 't', 'a', 'r', 't', 'T', 'i', 'm', 'e', '\030', '\037', ' ', '\001', '(', '\003', '\"', ')', '\n', '\013', 'C', 'S', 'D', 'T', 'A', 
  'd', 's', 'I', 'n', 'f', 'o', '\022', '\032', '\n', '\004', 'D', 'a', 't', 'a', '\030', '\001', ' ', '\003', '(', '\013', '2', '\014', '.', 'm', 's', 
  'g', '.', 'C', 'S', 'D', 'T', 'A', 'd', 's', '\"', '\234', '\002', '\n', '\007', 'C', 'S', 'D', 'T', 'A', 'd', 's', '\022', '\n', '\n', '\002', 
  'I', 'd', '\030', '\001', ' ', '\001', '(', '\003', '\022', '\r', '\n', '\005', 'T', 'i', 't', 'l', 'e', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\014', 
  '\n', '\004', 'N', 'a', 'm', 'e', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\021', '\n', '\t', 'S', 'h', 'o', 'w', 'L', 'i', 'm', 'i', 't', 
  '\030', '\004', ' ', '\001', '(', '\r', '\022', '\021', '\n', '\t', 'S', 't', 'a', 'r', 't', 'T', 'i', 'm', 'e', '\030', '\005', ' ', '\001', '(', '\003', 
  '\022', '\017', '\n', '\007', 'E', 'n', 'd', 'T', 'i', 'm', 'e', '\030', '\006', ' ', '\001', '(', '\003', '\022', '\021', '\n', '\t', 'S', 'h', 'o', 'w', 
  'C', 'o', 'u', 'n', 't', '\030', '\007', ' ', '\001', '(', '\r', '\022', '\036', '\n', '\005', 'I', 's', 'P', 'a', 'y', '\030', '\010', ' ', '\001', '(', 
  '\016', '2', '\017', '.', 'm', 's', 'g', '.', 'A', 'D', 'S', 'P', 'A', 'Y', 'T', 'Y', 'P', 'E', '\022', '\023', '\n', '\013', 'C', 'o', 'u', 
  'n', 't', 'r', 'y', 'L', 'i', 's', 't', '\030', '\t', ' ', '\003', '(', '\t', '\022', '\021', '\n', '\t', 'W', 'h', 'i', 't', 'e', 'L', 'i', 
  's', 't', '\030', '\n', ' ', '\003', '(', '\t', '\022', '\024', '\n', '\014', 'D', 'o', 'w', 'n', 'l', 'o', 'a', 'd', 'L', 'i', 's', 't', '\030', 
  '\013', ' ', '\003', '(', '\t', '\022', '\'', '\n', '\014', 'P', 'l', 'a', 't', 'f', 'o', 'r', 'm', 'L', 'i', 's', 't', '\030', '\014', ' ', '\003', 
  '(', '\016', '2', '\021', '.', 'm', 's', 'g', '.', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', 'T', 'Y', 'P', 'E', '\022', '\027', '\n', '\017', 
  'E', 'x', 'c', 'l', 'u', 'd', 'e', 'D', 'o', 'w', 'n', 'l', 'o', 'a', 'd', '\030', '\r', ' ', '\003', '(', '\t', '\"', '\244', '\001', '\n', 
  '\007', 'C', 'o', 'n', 't', 'e', 's', 't', '\022', '\017', '\n', '\007', 'C', 'h', 'e', 's', 's', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', 
  '\022', '\t', '\n', '\001', 'X', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\t', '\n', '\001', 'Y', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\r', '\n', 
  '\005', 'E', 'q', 'u', 'i', 'p', '\030', '\004', ' ', '\003', '(', '\r', '\022', '\027', '\n', '\017', 'C', 'h', 'e', 's', 's', 'm', 'a', 'n', 'C', 
  'a', 'r', 'd', 'T', 'a', 'g', '\030', '\005', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'R', 'a', 'c', 'e', '1', '\030', '\006', ' ', '\001', 
  '(', '\r', '\022', '\r', '\n', '\005', 'R', 'a', 'c', 'e', '2', '\030', '\007', ' ', '\001', '(', '\r', '\022', '\014', '\n', '\004', 'P', 'r', 'o', '1', 
  '\030', '\010', ' ', '\001', '(', '\r', '\022', '\016', '\n', '\006', 'S', 'k', 'i', 'l', 'l', '1', '\030', '\t', ' ', '\001', '(', '\r', '\022', '\016', '\n', 
  '\006', 'S', 'k', 'i', 'l', 'l', '2', '\030', '\n', ' ', '\001', '(', '\r', '\"', ':', '\n', '\006', 'E', 'f', 'f', 'e', 'c', 't', '\022', '\014', 
  '\n', '\004', 'T', 'y', 'p', 'e', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'C', 'u', 'r', 'L', 'e', 'v', 'e', 'l', '\030', 
  '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'M', 'a', 'x', 'L', 'e', 'v', 'e', 'l', '\030', '\003', ' ', '\001', '(', '\r', '\"', '{', 
  '\n', '\017', 'C', 'h', 'e', 's', 's', 'D', 'a', 'm', 'a', 'g', 'e', 'S', 't', 'a', 't', '\022', '\017', '\n', '\007', 'C', 'h', 'e', 's', 
  's', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\023', '\n', '\013', 'T', 'o', 't', 'a', 'l', 'D', 'a', 'm', 'a', 'g', 'e', '\030', 
  '\002', ' ', '\001', '(', '\r', '\022', '\023', '\n', '\013', 'T', 'o', 't', 'a', 'l', 'S', 'u', 'f', 'f', 'e', 'r', '\030', '\003', ' ', '\001', '(', 
  '\r', '\022', '\026', '\n', '\016', 'P', 'h', 'y', 's', 'i', 'c', 'a', 'l', 'D', 'a', 'm', 'a', 'g', 'e', '\030', '\004', ' ', '\001', '(', '\r', 
  '\022', '\025', '\n', '\r', 'M', 'a', 'g', 'i', 'c', 'a', 'l', 'D', 'a', 'm', 'a', 'g', 'e', '\030', '\005', ' ', '\001', '(', '\r', '\"', '/', 
  '\n', '\013', 'S', 'e', 'l', 'e', 'c', 't', 'E', 'q', 'u', 'i', 'p', '\022', '\017', '\n', '\007', 'R', 'o', 'u', 'n', 'd', 'I', 'd', '\030', 
  '\001', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'E', 'q', 'u', 'i', 'p', 'I', 'd', '\030', '\002', ' ', '\001', '(', '\r', '\"', '3', '\n', 
  '\005', 'E', 'q', 'u', 'i', 'p', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'C', 'o', 'u', 
  'n', 't', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'Q', 'u', 'a', 'l', 'i', 't', 'y', '\030', '\003', ' ', '\001', '(', '\r', 
  '\"', '\371', '\022', '\n', '\r', 'C', 'S', 'D', 'T', 'R', 'o', 'u', 'n', 'd', 'I', 't', 'e', 'm', '\022', '\r', '\n', '\005', 'R', 'o', 'u', 
  'n', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'O', 'l', 'd', 'H', 'p', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\n', 
  '\n', '\002', 'H', 'p', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'O', 'l', 'd', 'R', 'a', 'n', 'k', '\030', '\004', ' ', '\001', 
  '(', '\r', '\022', '\014', '\n', '\004', 'R', 'a', 'n', 'k', '\030', '\005', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 'T', 'a', 'r', 'g', 'e', 
  't', 'P', 'l', 'a', 'y', 'e', 'r', 'I', 'd', '\030', '\006', ' ', '\001', '(', '\t', '\022', '\035', '\n', '\007', 'W', 'i', 'n', 'T', 'y', 'p', 
  'e', '\030', '\007', ' ', '\001', '(', '\016', '2', '\014', '.', 'm', 's', 'g', '.', 'W', 'I', 'N', 'T', 'Y', 'P', 'E', '\022', '>', '\n', '\016', 
  'E', 'n', 'e', 'm', 'y', 'L', 'e', 'f', 't', 'C', 'h', 'e', 's', 's', '\030', '\010', ' ', '\003', '(', '\013', '2', '&', '.', 'm', 's', 
  'g', '.', 'C', 'S', 'D', 'T', 'R', 'o', 'u', 'n', 'd', 'I', 't', 'e', 'm', '.', 'E', 'n', 'e', 'm', 'y', 'L', 'e', 'f', 't', 
  'C', 'h', 'e', 's', 's', 'E', 'n', 't', 'r', 'y', '\022', '<', '\n', '\r', 'S', 'e', 'l', 'f', 'L', 'e', 'f', 't', 'C', 'h', 'e', 
  's', 's', '\030', '\t', ' ', '\003', '(', '\013', '2', '%', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'R', 'o', 'u', 'n', 'd', 'I', 
  't', 'e', 'm', '.', 'S', 'e', 'l', 'f', 'L', 'e', 'f', 't', 'C', 'h', 'e', 's', 's', 'E', 'n', 't', 'r', 'y', '\022', '\014', '\n', 
  '\004', 'T', 'i', 'm', 'e', '\030', '\n', ' ', '\001', '(', '\r', '\022', '4', '\n', '\t', 'D', 'r', 'o', 'p', 'E', 'q', 'u', 'i', 'p', '\030', 
  '\013', ' ', '\003', '(', '\013', '2', '!', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'R', 'o', 'u', 'n', 'd', 'I', 't', 'e', 'm', 
  '.', 'D', 'r', 'o', 'p', 'E', 'q', 'u', 'i', 'p', 'E', 'n', 't', 'r', 'y', '\022', '!', '\n', '\013', 'S', 'e', 'l', 'f', 'C', 'o', 
  'n', 't', 'e', 's', 't', '\030', '\014', ' ', '\003', '(', '\013', '2', '\014', '.', 'm', 's', 'g', '.', 'C', 'o', 'n', 't', 'e', 's', 't', 
  '\022', '#', '\n', '\r', 'T', 'a', 'r', 'g', 'e', 't', 'C', 'o', 'n', 't', 'e', 's', 't', '\030', '\r', ' ', '\003', '(', '\013', '2', '\014', 
  '.', 'm', 's', 'g', '.', 'C', 'o', 'n', 't', 'e', 's', 't', '\022', '@', '\n', '\017', 'S', 'e', 'l', 'f', 'B', 'a', 't', 't', 'l', 
  'e', 'C', 'h', 'e', 's', 's', '\030', '\016', ' ', '\003', '(', '\013', '2', '\'', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'R', 'o', 
  'u', 'n', 'd', 'I', 't', 'e', 'm', '.', 'S', 'e', 'l', 'f', 'B', 'a', 't', 't', 'l', 'e', 'C', 'h', 'e', 's', 's', 'E', 'n', 
  't', 'r', 'y', '\022', 'B', '\n', '\020', 'E', 'n', 'e', 'm', 'y', 'B', 'a', 't', 't', 'l', 'e', 'C', 'h', 'e', 's', 's', '\030', '\017', 
  ' ', '\003', '(', '\013', '2', '(', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'R', 'o', 'u', 'n', 'd', 'I', 't', 'e', 'm', '.', 
  'E', 'n', 'e', 'm', 'y', 'B', 'a', 't', 't', 'l', 'e', 'C', 'h', 'e', 's', 's', 'E', 'n', 't', 'r', 'y', '\022', '\'', '\n', '\021', 
  'R', 'o', 'u', 'n', 'd', 'S', 't', 'a', 'r', 't', 'C', 'o', 'n', 't', 'e', 's', 't', '\030', '\020', ' ', '\003', '(', '\013', '2', '\014', 
  '.', 'm', 's', 'g', '.', 'C', 'o', 'n', 't', 'e', 's', 't', '\022', '(', '\n', '\022', 'B', 'a', 't', 't', 'l', 'e', 'S', 't', 'a', 
  'r', 't', 'C', 'o', 'n', 't', 'e', 's', 't', '\030', '\021', ' ', '\003', '(', '\013', '2', '\014', '.', 'm', 's', 'g', '.', 'C', 'o', 'n', 
  't', 'e', 's', 't', '\022', '\033', '\n', '\023', 'C', 'h', 'e', 's', 's', 'S', 'h', 'o', 'p', 'F', 'r', 'e', 's', 'h', 'C', 'o', 'u', 
  'n', 't', '\030', '\022', ' ', '\001', '(', '\r', '\022', '\032', '\n', '\022', 'C', 'h', 'e', 's', 's', 'S', 'h', 'o', 'p', 'F', 'r', 'e', 's', 
  'h', 'L', 'i', 's', 't', '\030', '\023', ' ', '\003', '(', '\r', '\022', ':', '\n', '\014', 'B', 'u', 'y', 'C', 'h', 'e', 's', 's', 'L', 'i', 
  's', 't', '\030', '\024', ' ', '\003', '(', '\013', '2', '$', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'R', 'o', 'u', 'n', 'd', 'I', 
  't', 'e', 'm', '.', 'B', 'u', 'y', 'C', 'h', 'e', 's', 's', 'L', 'i', 's', 't', 'E', 'n', 't', 'r', 'y', '\022', 'B', '\n', '\020', 
  'E', 'q', 'u', 'i', 'p', 'C', 'o', 'm', 'p', 'o', 's', 'e', 'L', 'i', 's', 't', '\030', '\025', ' ', '\003', '(', '\013', '2', '(', '.', 
  'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'R', 'o', 'u', 'n', 'd', 'I', 't', 'e', 'm', '.', 'E', 'q', 'u', 'i', 'p', 'C', 'o', 
  'm', 'p', 'o', 's', 'e', 'L', 'i', 's', 't', 'E', 'n', 't', 'r', 'y', '\022', 'J', '\n', '\024', 'U', 'p', 'g', 'r', 'a', 'd', 'e', 
  'S', 't', 'a', 'r', 'C', 'h', 'e', 's', 's', 'L', 'i', 's', 't', '\030', '\026', ' ', '\003', '(', '\013', '2', ',', '.', 'm', 's', 'g', 
  '.', 'C', 'S', 'D', 'T', 'R', 'o', 'u', 'n', 'd', 'I', 't', 'e', 'm', '.', 'U', 'p', 'g', 'r', 'a', 'd', 'e', 'S', 't', 'a', 
  'r', 'C', 'h', 'e', 's', 's', 'L', 'i', 's', 't', 'E', 'n', 't', 'r', 'y', '\022', '\027', '\n', '\017', 'R', 'o', 'u', 'n', 'd', 'S', 
  't', 'a', 'r', 't', 'M', 'o', 'n', 'e', 'y', '\030', '\027', ' ', '\001', '(', '\r', '\022', '\030', '\n', '\020', 'B', 'a', 't', 't', 'l', 'e', 
  'S', 't', 'a', 'r', 't', 'M', 'o', 'n', 'e', 'y', '\030', '\030', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 'B', 'a', 't', 't', 'l', 
  'e', 'E', 'n', 'd', 'M', 'o', 'n', 'e', 'y', '\030', '\031', ' ', '\001', '(', '\r', '\022', '@', '\n', '\017', 'M', 'o', 'n', 'e', 'y', 'S', 
  'o', 'u', 'r', 'c', 'e', 'L', 'i', 's', 't', '\030', '\032', ' ', '\003', '(', '\013', '2', '\'', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 
  'T', 'R', 'o', 'u', 'n', 'd', 'I', 't', 'e', 'm', '.', 'M', 'o', 'n', 'e', 'y', 'S', 'o', 'u', 'r', 'c', 'e', 'L', 'i', 's', 
  't', 'E', 'n', 't', 'r', 'y', '\022', ':', '\n', '\014', 'M', 'o', 'n', 'e', 'y', 'P', 'a', 'y', 'L', 'i', 's', 't', '\030', '\033', ' ', 
  '\003', '(', '\013', '2', '$', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'R', 'o', 'u', 'n', 'd', 'I', 't', 'e', 'm', '.', 'M', 
  'o', 'n', 'e', 'y', 'P', 'a', 'y', 'L', 'i', 's', 't', 'E', 'n', 't', 'r', 'y', '\022', '\026', '\n', '\016', 'R', 'e', 'a', 'd', 'C', 
  'h', 'e', 's', 's', 'C', 'o', 'u', 'n', 't', '\030', '\034', ' ', '\001', '(', '\r', '\022', '\025', '\n', '\r', 'R', 'o', 'u', 'n', 'd', 'S', 
  't', 'a', 'r', 't', 'L', 'v', 'l', '\030', '\035', ' ', '\001', '(', '\r', '\022', '\025', '\n', '\r', 'R', 'o', 'u', 'n', 'd', 'S', 't', 'a', 
  'r', 't', 'E', 'x', 'p', '\030', '\036', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 'B', 'a', 't', 't', 'l', 'e', 'S', 't', 'a', 'r', 
  't', 'L', 'v', 'l', '\030', '\037', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 'B', 'a', 't', 't', 'l', 'e', 'S', 't', 'a', 'r', 't', 
  'E', 'x', 'p', '\030', ' ', ' ', '\001', '(', '\r', '\022', '<', '\n', '\r', 'S', 'e', 'l', 'l', 'C', 'h', 'e', 's', 's', 'L', 'i', 's', 
  't', '\030', '!', ' ', '\003', '(', '\013', '2', '%', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'R', 'o', 'u', 'n', 'd', 'I', 't', 
  'e', 'm', '.', 'S', 'e', 'l', 'l', 'C', 'h', 'e', 's', 's', 'L', 'i', 's', 't', 'E', 'n', 't', 'r', 'y', '\022', '\021', '\n', '\t', 
  'I', 's', 'M', 'o', 'n', 's', 't', 'e', 'r', '\030', '\"', ' ', '\001', '(', '\010', '\022', '\016', '\n', '\006', 'W', 'i', 'n', 'C', 'o', 'n', 
  '\030', '#', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'L', 'o', 's', 'e', 'C', 'o', 'n', '\030', '$', ' ', '\001', '(', '\r', '\022', '\023', 
  '\n', '\013', 'I', 's', 'L', 'a', 's', 't', 'R', 'o', 'u', 'n', 'd', '\030', '%', ' ', '\001', '(', '\010', '\022', '%', '\n', '\017', 'S', 'h', 
  'a', 'r', 'e', 'd', 'C', 'h', 'e', 's', 's', 'L', 'i', 's', 't', '\030', '&', ' ', '\003', '(', '\013', '2', '\014', '.', 'm', 's', 'g', 
  '.', 'C', 'o', 'n', 't', 'e', 's', 't', '\022', '\032', '\n', '\022', 'G', 'i', 'v', 'e', 'E', 'q', 'u', 'i', 'p', 'C', 'h', 'e', 's', 
  's', 'L', 'i', 's', 't', '\030', '\'', ' ', '\003', '(', '\r', '\022', '#', '\n', '\r', 'G', 'i', 'v', 'e', 'C', 'h', 'e', 's', 's', 'L', 
  'i', 's', 't', '\030', '(', ' ', '\003', '(', '\013', '2', '\014', '.', 'm', 's', 'g', '.', 'C', 'o', 'n', 't', 'e', 's', 't', '\022', '#', 
  '\n', '\016', 'R', 'a', 'c', 'e', 'E', 'f', 'f', 'e', 'c', 't', 'L', 'i', 's', 't', '\030', ')', ' ', '\003', '(', '\013', '2', '\013', '.', 
  'm', 's', 'g', '.', 'E', 'f', 'f', 'e', 'c', 't', '\022', ')', '\n', '\024', 'P', 'r', 'o', 'f', 'e', 's', 's', 'i', 'o', 'n', 'E', 
  'f', 'f', 'e', 'c', 't', 'L', 'i', 's', 't', '\030', '*', ' ', '\003', '(', '\013', '2', '\013', '.', 'm', 's', 'g', '.', 'E', 'f', 'f', 
  'e', 'c', 't', '\022', '-', '\n', '\017', 'C', 'h', 'e', 's', 's', 'D', 'a', 'm', 'a', 'g', 'e', 'L', 'i', 's', 't', '\030', '+', ' ', 
  '\003', '(', '\013', '2', '\024', '.', 'm', 's', 'g', '.', 'C', 'h', 'e', 's', 's', 'D', 'a', 'm', 'a', 'g', 'e', 'S', 't', 'a', 't', 
  '\022', '\034', '\n', '\024', 'R', 'o', 'u', 'n', 'd', 'E', 'q', 'u', 'i', 'p', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 's', '\030', 
  ',', ' ', '\003', '(', '\r', '\022', '&', '\n', '\014', 'S', 'e', 'l', 'e', 'c', 't', 'E', 'q', 'u', 'i', 'p', 's', '\030', '-', ' ', '\003', 
  '(', '\013', '2', '\020', '.', 'm', 's', 'g', '.', 'S', 'e', 'l', 'e', 'c', 't', 'E', 'q', 'u', 'i', 'p', '\022', '\024', '\n', '\014', 'T', 
  'a', 'r', 'g', 'e', 't', 'O', 'p', 'e', 'n', 'I', 'd', '\030', '.', ' ', '\001', '(', '\t', '\022', 'N', '\n', '\026', 'E', 'q', 'u', 'i', 
  'p', 'C', 'o', 'm', 'p', 'o', 's', 'e', 'S', 't', 'r', 'u', 'c', 't', 'L', 'i', 's', 't', '\030', '/', ' ', '\003', '(', '\013', '2', 
  '.', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'R', 'o', 'u', 'n', 'd', 'I', 't', 'e', 'm', '.', 'E', 'q', 'u', 'i', 'p', 
  'C', 'o', 'm', 'p', 'o', 's', 'e', 'S', 't', 'r', 'u', 'c', 't', 'L', 'i', 's', 't', 'E', 'n', 't', 'r', 'y', '\032', '5', '\n', 
  '\023', 'E', 'n', 'e', 'm', 'y', 'L', 'e', 'f', 't', 'C', 'h', 'e', 's', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 
  'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', 
  '8', '\001', '\032', '4', '\n', '\022', 'S', 'e', 'l', 'f', 'L', 'e', 'f', 't', 'C', 'h', 'e', 's', 's', 'E', 'n', 't', 'r', 'y', '\022', 
  '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', 
  '(', '\r', ':', '\002', '8', '\001', '\032', '0', '\n', '\016', 'D', 'r', 'o', 'p', 'E', 'q', 'u', 'i', 'p', 'E', 'n', 't', 'r', 'y', '\022', 
  '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', 
  '(', '\r', ':', '\002', '8', '\001', '\032', '6', '\n', '\024', 'S', 'e', 'l', 'f', 'B', 'a', 't', 't', 'l', 'e', 'C', 'h', 'e', 's', 's', 
  'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 
  'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\032', '7', '\n', '\025', 'E', 'n', 'e', 'm', 'y', 'B', 'a', 't', 't', 
  'l', 'e', 'C', 'h', 'e', 's', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', 
  '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\032', '3', '\n', '\021', 'B', 'u', 
  'y', 'C', 'h', 'e', 's', 's', 'L', 'i', 's', 't', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', 
  '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\032', '7', '\n', 
  '\025', 'E', 'q', 'u', 'i', 'p', 'C', 'o', 'm', 'p', 'o', 's', 'e', 'L', 'i', 's', 't', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', 
  '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', 
  ':', '\002', '8', '\001', '\032', ';', '\n', '\031', 'U', 'p', 'g', 'r', 'a', 'd', 'e', 'S', 't', 'a', 'r', 'C', 'h', 'e', 's', 's', 'L', 
  'i', 's', 't', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 
  'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\032', '6', '\n', '\024', 'M', 'o', 'n', 'e', 'y', 'S', 
  'o', 'u', 'r', 'c', 'e', 'L', 'i', 's', 't', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', 
  '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\032', '3', '\n', '\021', 
  'M', 'o', 'n', 'e', 'y', 'P', 'a', 'y', 'L', 'i', 's', 't', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', 
  '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\032', 
  '4', '\n', '\022', 'S', 'e', 'l', 'l', 'C', 'h', 'e', 's', 's', 'L', 'i', 's', 't', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 
  'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', 
  '\002', '8', '\001', '\032', 'I', '\n', '\033', 'E', 'q', 'u', 'i', 'p', 'C', 'o', 'm', 'p', 'o', 's', 'e', 'S', 't', 'r', 'u', 'c', 't', 
  'L', 'i', 's', 't', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\031', '\n', 
  '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\n', '.', 'm', 's', 'g', '.', 'E', 'q', 'u', 'i', 'p', ':', 
  '\002', '8', '\001', '\"', '-', '\n', '\t', 'C', 'S', 'D', 'T', 'R', 'o', 'u', 'n', 'd', '\022', ' ', '\n', '\004', 'L', 'i', 's', 't', '\030', 
  '\001', ' ', '\003', '(', '\013', '2', '\022', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'R', 'o', 'u', 'n', 'd', 'I', 't', 'e', 'm', 
  '\"', '@', '\n', '\014', 'C', 'S', 'D', 'T', 'R', 'o', 'u', 'n', 'd', 'E', 'n', 'd', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', 
  '\001', '(', '\t', '\022', '$', '\n', '\010', 'R', 'o', 'u', 'n', 'I', 't', 'e', 'm', '\030', '\002', ' ', '\001', '(', '\013', '2', '\022', '.', 'm', 
  's', 'g', '.', 'C', 'S', 'D', 'T', 'R', 'o', 'u', 'n', 'd', 'I', 't', 'e', 'm', '\"', '\377', '\002', '\n', '\013', 'C', 'S', 'D', 'T', 
  'P', 'v', 'p', 'S', 't', 'a', 't', '\022', '\020', '\n', '\010', 'D', 'e', 'a', 't', 'h', 'N', 'u', 'm', '\030', '\001', ' ', '\001', '(', '\r', 
  '\022', '\017', '\n', '\007', 'K', 'i', 'l', 'l', 'N', 'u', 'm', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\025', '\n', '\r', 'W', 'a', 't', 'e', 
  'r', 'D', 'e', 'a', 't', 'h', 'N', 'u', 'm', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\032', '\n', '\022', 'H', 'u', 'r', 't', 'G', 'r', 
  'o', 'u', 'n', 'd', 'D', 'e', 'a', 't', 'h', 'N', 'u', 'm', '\030', '\004', ' ', '\001', '(', '\r', '\022', '&', '\n', '\013', 'W', 'i', 'n', 
  'R', 'o', 'l', 'e', 'S', 't', 'a', 't', '\030', '\005', ' ', '\003', '(', '\013', '2', '\021', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 
  'R', 'o', 'l', 'e', 'S', 't', 'a', 't', '\022', '\'', '\n', '\014', 'F', 'a', 'i', 'l', 'R', 'o', 'l', 'e', 'S', 't', 'a', 't', '\030', 
  '\006', ' ', '\003', '(', '\013', '2', '\021', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'R', 'o', 'l', 'e', 'S', 't', 'a', 't', '\022', 
  '\'', '\n', '\014', 'D', 'r', 'a', 'w', 'R', 'o', 'l', 'e', 'S', 't', 'a', 't', '\030', '\007', ' ', '\003', '(', '\013', '2', '\021', '.', 'm', 
  's', 'g', '.', 'C', 'S', 'D', 'T', 'R', 'o', 'l', 'e', 'S', 't', 'a', 't', '\022', '\021', '\n', '\t', 'M', 'v', 'p', 'R', 'o', 'l', 
  'e', 'I', 'd', '\030', '\010', ' ', '\001', '(', '\r', '\022', '\021', '\n', '\t', 'M', 'v', 'p', 'S', 'k', 'i', 'l', 'l', 's', '\030', '\t', ' ', 
  '\003', '(', '\r', '\022', '6', '\n', '\013', 'P', 'l', 'a', 'y', 'e', 'r', 'R', 'o', 'u', 'n', 'd', '\030', '\n', ' ', '\003', '(', '\013', '2', 
  '!', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'P', 'v', 'p', 'S', 't', 'a', 't', '.', 'P', 'l', 'a', 'y', 'e', 'r', 'R', 
  'o', 'u', 'n', 'd', 'E', 'n', 't', 'r', 'y', '\032', 'B', '\n', '\020', 'P', 'l', 'a', 'y', 'e', 'r', 'R', 'o', 'u', 'n', 'd', 'E', 
  'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\035', '\n', '\005', 'v', 'a', 'l', 'u', 
  'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\016', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'R', 'o', 'u', 'n', 'd', ':', '\002', 
  '8', '\001', '\"', '\223', '\001', '\n', '\021', 'C', 'S', 'D', 'T', 'P', 'v', 'p', 'C', 'a', 'm', 'p', 'R', 'e', 's', 'u', 'l', 't', '\022', 
  '\037', '\n', '\004', 'C', 'a', 'm', 'p', '\030', '\001', ' ', '\003', '(', '\013', '2', '\021', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'C', 
  'a', 'm', 'p', 'D', 'a', 't', 'a', '\022', '\014', '\n', '\004', 'R', 'a', 'n', 'k', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\022', '\n', '\n', 
  'C', 'a', 'm', 'p', '1', 'S', 'c', 'o', 'r', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\022', '\n', '\n', 'C', 'a', 'm', 'p', '2', 
  'S', 'c', 'o', 'r', 'e', '\030', '\004', ' ', '\001', '(', '\r', '\022', '\022', '\n', '\n', 'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 'I', 'D', 
  '\030', '\005', ' ', '\001', '(', '\005', '\022', '\023', '\n', '\013', 'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 'C', 'n', 't', '\030', '\006', ' ', '\001', 
  '(', '\005', '\"', '\210', '\001', '\n', '\014', 'C', 'S', 'D', 'T', 'C', 'a', 'm', 'p', 'D', 'a', 't', 'a', '\022', '\014', '\n', '\004', 'C', 'a', 
  'm', 'p', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\014', '\n', '\004', 'R', 'a', 'n', 'k', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\035', '\n', 
  '\007', 'W', 'i', 'n', 'T', 'y', 'p', 'e', '\030', '\003', ' ', '\001', '(', '\016', '2', '\014', '.', 'm', 's', 'g', '.', 'W', 'I', 'N', 'T', 
  'Y', 'P', 'E', '\022', '*', '\n', '\n', 'P', 'l', 'a', 'y', 'e', 'r', 'S', 't', 'a', 't', '\030', '\004', ' ', '\003', '(', '\013', '2', '\026', 
  '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'P', 'v', 'p', 'P', 'l', 'a', 'y', 'e', 'r', 'S', 't', 'a', 't', '\022', '\021', '\n', 
  '\t', 'S', 'u', 'r', 'r', 'e', 'n', 'd', 'e', 'r', '\030', '\005', ' ', '\001', '(', '\010', '\"', 'v', '\n', '\014', 'C', 'S', 'D', 'T', 'R', 
  'o', 'l', 'e', 'S', 't', 'a', 't', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'U', 's', 
  'e', 'T', 'i', 'm', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'K', 'i', 'l', 'l', 'C', 'n', 't', '\030', '\003', ' ', 
  '\001', '(', '\r', '\022', '\025', '\n', '\r', 'A', 's', 's', 'i', 's', 't', 'K', 'i', 'l', 'l', 'C', 'n', 't', '\030', '\004', ' ', '\001', '(', 
  '\r', '\022', '\020', '\n', '\010', 'D', 'e', 'a', 't', 'h', 'C', 'n', 't', '\030', '\005', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'T', 'a', 
  'l', 'e', 'n', 't', 's', '\030', '\006', ' ', '\003', '(', '\r', '\"', '2', '\n', '\n', 'C', 'S', 'D', 'T', 'P', 'v', 'p', 'M', 'v', 'p', 
  '\022', '\017', '\n', '\007', 'H', 'u', 'r', 't', 'M', 'a', 'x', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\023', '\n', '\013', 'B', 'e', 'a', 'r', 
  'H', 'u', 'r', 't', 'M', 'a', 'x', '\030', '\002', ' ', '\001', '(', '\r', '\"', '\242', '\r', '\n', '\021', 'C', 'S', 'D', 'T', 'P', 'v', 'p', 
  'P', 'l', 'a', 'y', 'e', 'r', 'S', 't', 'a', 't', '\022', '\017', '\n', '\007', 'I', 's', 'R', 'o', 'b', 'o', 't', '\030', '\001', ' ', '\001', 
  '(', '\010', '\022', '\016', '\n', '\006', 'I', 's', 'H', 'o', 'o', 'k', '\030', '\002', ' ', '\001', '(', '\010', '\022', '\n', '\n', '\002', 'I', 'd', '\030', 
  '\003', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'U', 's', 'r', 'N', 'a', 'm', 'e', '\030', '\004', ' ', '\001', '(', '\t', '\022', '\017', '\n', 
  '\007', 'H', 'e', 'a', 'd', 'P', 'i', 'c', '\030', '\005', ' ', '\001', '(', '\r', '\022', '\013', '\n', '\003', 'M', 'M', 'R', '\030', '\006', ' ', '\001', 
  '(', '\r', '\022', '\023', '\n', '\013', 'C', 'h', 'e', 's', 's', 'P', 'l', 'a', 'y', 'e', 'r', '\030', '\007', ' ', '\001', '(', '\r', '\022', '\021', 
  '\n', '\t', 'C', 'h', 'e', 's', 's', 'L', 'i', 's', 't', '\030', '\010', ' ', '\003', '(', '\r', '\022', '\r', '\n', '\005', 'R', 'o', 'u', 'n', 
  'd', '\030', '\t', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'W', 'i', 'n', 'R', 'o', 'u', 'n', 'd', '\030', '\n', ' ', '\001', '(', '\r', 
  '\022', '\021', '\n', '\t', 'F', 'a', 'i', 'l', 'R', 'o', 'u', 'n', 'd', '\030', '\013', ' ', '\001', '(', '\r', '\022', '\021', '\n', '\t', 'D', 'r', 
  'a', 'w', 'R', 'o', 'u', 'n', 'd', '\030', '\014', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'K', 'i', 'l', 'l', 'N', 'u', 'm', '\030', 
  '\r', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'D', 'e', 'a', 't', 'h', 'N', 'u', 'm', '\030', '\016', ' ', '\001', '(', '\r', '\022', '\023', 
  '\n', '\013', 'S', 'u', 'r', 'v', 'i', 'v', 'e', 'T', 'i', 'm', 'e', '\030', '\017', ' ', '\001', '(', '\r', '\022', '\n', '\n', '\002', 'H', 'p', 
  '\030', '\020', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 'C', 'h', 'e', 's', 's', 'P', 'l', 'a', 'y', 'e', 'r', 'L', 'v', 'l', '\030', 
  '\021', ' ', '\001', '(', '\r', '\022', '\014', '\n', '\004', 'A', 's', 'y', 'n', '\030', '\022', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'I', 's', 
  'D', 'e', 'a', 't', 'h', '\030', '\023', ' ', '\001', '(', '\010', '\022', '\016', '\n', '\006', 'T', 'e', 'a', 'm', 'I', 'd', '\030', '\024', ' ', '\001', 
  '(', '\r', '\022', '\025', '\n', '\r', 'T', 'e', 'a', 'm', 'P', 'l', 'a', 'y', 'e', 'r', 'N', 'u', 'm', '\030', '\025', ' ', '\001', '(', '\r', 
  '\022', '\r', '\n', '\005', 'M', 'o', 'n', 'e', 'y', '\030', '\026', ' ', '\001', '(', '\r', '\022', '>', '\n', '\014', 'C', 'u', 'r', 'S', 'h', 'o', 
  'w', 'I', 't', 'e', 'm', 's', '\030', '\027', ' ', '\003', '(', '\013', '2', '(', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'P', 'v', 
  'p', 'P', 'l', 'a', 'y', 'e', 'r', 'S', 't', 'a', 't', '.', 'C', 'u', 'r', 'S', 'h', 'o', 'w', 'I', 't', 'e', 'm', 's', 'E', 
  'n', 't', 'r', 'y', '\022', '8', '\n', '\t', 'C', 'h', 'e', 's', 's', 'R', 'a', 'c', 'e', '\030', '\030', ' ', '\003', '(', '\013', '2', '%', 
  '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'P', 'v', 'p', 'P', 'l', 'a', 'y', 'e', 'r', 'S', 't', 'a', 't', '.', 'C', 'h', 
  'e', 's', 's', 'R', 'a', 'c', 'e', 'E', 'n', 't', 'r', 'y', '\022', '6', '\n', '\010', 'C', 'h', 'e', 's', 's', 'P', 'r', 'o', '\030', 
  '\031', ' ', '\003', '(', '\013', '2', '$', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'P', 'v', 'p', 'P', 'l', 'a', 'y', 'e', 'r', 
  'S', 't', 'a', 't', '.', 'C', 'h', 'e', 's', 's', 'P', 'r', 'o', 'E', 'n', 't', 'r', 'y', '\022', '\022', '\n', '\n', 'T', 'o', 't', 
  'a', 'l', 'V', 'a', 'l', 'u', 'e', '\030', '\032', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 'S', 'h', 'a', 'r', 'e', 'C', 'h', 'e', 
  's', 's', 'L', 'i', 's', 't', '\030', '\033', ' ', '\003', '(', '\r', '\022', '!', '\n', '\007', 'F', 'e', 't', 't', 'e', 'r', 's', '\030', '\034', 
  ' ', '\003', '(', '\013', '2', '\020', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'F', 'e', 't', 't', 'e', 'r', 's', '\022', '#', '\n', 
  '\r', 'S', 'h', 'o', 'w', 'C', 'h', 'e', 's', 's', 'L', 'i', 's', 't', '\030', '\035', ' ', '\003', '(', '\013', '2', '\014', '.', 'm', 's', 
  'g', '.', 'C', 'o', 'n', 't', 'e', 's', 't', '\022', '\037', '\n', '\006', 'P', 'v', 'p', 'M', 'v', 'p', '\030', '\036', ' ', '\001', '(', '\013', 
  '2', '\017', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'P', 'v', 'p', 'M', 'v', 'p', '\022', '\017', '\n', '\007', 'C', 'o', 'u', 'n', 
  't', 'r', 'y', '\030', '\037', ' ', '\001', '(', '\t', '\022', '\026', '\n', '\016', 'L', 'e', 'a', 'v', 'e', 'I', 'n', 'A', 'd', 'v', 'a', 'n', 
  'c', 'e', '\030', ' ', ' ', '\001', '(', '\010', '\022', '\017', '\n', '\007', 'A', 'F', 'K', 'T', 'i', 'm', 'e', '\030', '!', ' ', '\001', '(', '\r', 
  '\022', '\020', '\n', '\010', 'P', 'r', 'o', 'v', 'i', 'n', 'c', 'e', '\030', '\"', ' ', '\001', '(', '\r', '\022', '\035', '\n', '\005', 'G', 'r', 'o', 
  'u', 'p', '\030', '#', ' ', '\001', '(', '\016', '2', '\016', '.', 'm', 's', 'g', '.', 'T', 'E', 'A', 'M', 'G', 'R', 'O', 'U', 'P', '\022', 
  '@', '\n', '\r', 'U', 'n', 'l', 'o', 'c', 'k', 'e', 'd', 'C', 'h', 'e', 's', 's', '\030', '$', ' ', '\003', '(', '\013', '2', ')', '.', 
  'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'P', 'v', 'p', 'P', 'l', 'a', 'y', 'e', 'r', 'S', 't', 'a', 't', '.', 'U', 'n', 'l', 
  'o', 'c', 'k', 'e', 'd', 'C', 'h', 'e', 's', 's', 'E', 'n', 't', 'r', 'y', '\022', '\027', '\n', '\017', 'P', 'a', 's', 's', 'p', 'o', 
  'r', 't', 'T', 'y', 'p', 'e', 'I', 'd', 's', '\030', '%', ' ', '\003', '(', '\r', '\022', '\023', '\n', '\013', 'P', 'l', 'a', 'y', 'e', 'r', 
  'I', 'n', 'd', 'e', 'x', '\030', '&', ' ', '\001', '(', '\r', '\022', '\022', '\n', '\n', 'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 'I', 'D', 
  '\030', '\'', ' ', '\001', '(', '\005', '\022', '\027', '\n', '\017', 'S', 'u', 'r', 'p', 'l', 'u', 's', 'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 
  '\030', '(', ' ', '\001', '(', '\005', '\022', '\016', '\n', '\006', 'I', 'n', 'c', 'o', 'm', 'e', '\030', ')', ' ', '\001', '(', '\005', '\022', '$', '\n', 
  '\013', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'T', 'y', 'p', 'e', '\030', '*', ' ', '\001', '(', '\016', '2', '\017', '.', 'm', 's', 'g', '.', 
  'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '\022', '\024', '\n', '\014', 'c', 'h', 'a', 'n', 'n', 'e', 'l', 'U', 's', 'r', 'I', 
  'd', '\030', '+', ' ', '\001', '(', '\t', '\022', '+', '\n', '\014', 'R', 'e', 's', 't', 'r', 'i', 'c', 't', 'T', 'y', 'p', 'e', '\030', ',', 
  ' ', '\001', '(', '\016', '2', '\025', '.', 'm', 's', 'g', '.', 'U', 's', 'e', 'r', 'R', 'e', 's', 't', 'r', 'i', 'c', 't', 'T', 'y', 
  'p', 'e', '\022', '\022', '\n', '\n', 'P', 'l', 'a', 'y', 'e', 'r', 'R', 'a', 'n', 'k', '\030', '-', ' ', '\001', '(', '\r', '\022', '\021', '\n', 
  '\t', 'M', 'o', 'n', 'e', 'y', 'C', 'o', 's', 't', '\030', '.', ' ', '\001', '(', '\005', '\022', '\023', '\n', '\013', 'M', 'o', 'n', 'e', 'y', 
  'I', 'n', 'c', 'o', 'm', 'e', '\030', '/', ' ', '\001', '(', '\005', '\022', '\r', '\n', '\005', 'S', 'c', 'o', 'r', 'e', '\030', '0', ' ', '\001', 
  '(', '\r', '\022', '\026', '\n', '\016', 'C', 'h', 'o', 's', 'e', 'C', 'a', 'r', 'd', 'G', 'r', 'o', 'u', 'p', '\030', '1', ' ', '\003', '(', 
  '\r', '\022', '6', '\n', '\010', 'P', 'v', 'e', 'I', 't', 'e', 'm', 's', '\030', '2', ' ', '\003', '(', '\013', '2', '$', '.', 'm', 's', 'g', 
  '.', 'C', 'S', 'D', 'T', 'P', 'v', 'p', 'P', 'l', 'a', 'y', 'e', 'r', 'S', 't', 'a', 't', '.', 'P', 'v', 'e', 'I', 't', 'e', 
  'm', 's', 'E', 'n', 't', 'r', 'y', '\022', '\031', '\n', '\021', 'A', 'l', 'l', 'C', 'h', 'o', 's', 'e', 'C', 'a', 'r', 'd', 'G', 'r', 
  'o', 'u', 'p', '\030', '3', ' ', '\003', '(', '\r', '\022', ')', '\n', '\r', 'E', 'x', 'c', 'h', 'a', 'n', 'g', 'e', 'S', 't', 'a', 't', 
  'e', '\030', '4', ' ', '\001', '(', '\016', '2', '\022', '.', 'm', 's', 'g', '.', 'E', 'X', 'C', 'H', 'A', 'N', 'G', 'E', 'S', 'T', 'A', 
  'T', 'E', '\022', '\016', '\n', '\006', 'T', 'a', 's', 'k', 'I', 'd', '\030', '5', ' ', '\001', '(', '\005', '\022', '\026', '\n', '\016', 'I', 's', 'T', 
  'a', 's', 'k', 'C', 'o', 'm', 'p', 'l', 'e', 't', 'e', '\030', '6', ' ', '\001', '(', '\010', '\022', '\027', '\n', '\017', 'C', 'u', 'r', 'T', 
  'a', 's', 'k', 'P', 'r', 'o', 'g', 'r', 'e', 's', 's', '\030', '7', ' ', '\001', '(', '\005', '\022', '\027', '\n', '\017', 'M', 'a', 'x', 'T', 
  'a', 's', 'k', 'P', 'r', 'o', 'g', 'r', 'e', 's', 's', '\030', '8', ' ', '\001', '(', '\005', '\032', '3', '\n', '\021', 'C', 'u', 'r', 'S', 
  'h', 'o', 'w', 'I', 't', 'e', 'm', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', 
  '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\032', '0', '\n', '\016', 'C', 
  'h', 'e', 's', 's', 'R', 'a', 'c', 'e', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', 
  '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\032', '/', '\n', '\r', 'C', 
  'h', 'e', 's', 's', 'P', 'r', 'o', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', 
  '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\032', '4', '\n', '\022', 'U', 'n', 
  'l', 'o', 'c', 'k', 'e', 'd', 'C', 'h', 'e', 's', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', 
  ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\032', '@', 
  '\n', '\r', 'P', 'v', 'e', 'I', 't', 'e', 'm', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', 
  '\001', '(', '\r', '\022', '\036', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\017', '.', 'm', 's', 'g', '.', 
  'K', 'e', 'r', 'n', 'e', 'l', 'I', 't', 'e', 'm', ':', '\002', '8', '\001', '\"', '\'', '\n', '\n', 'K', 'e', 'r', 'n', 'e', 'l', 'I', 
  't', 'e', 'm', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'C', 'o', 'u', 'n', 't', '\030', 
  '\002', ' ', '\001', '(', '\r', '\"', 'E', '\n', '\013', 'C', 'S', 'D', 'T', 'F', 'e', 't', 't', 'e', 'r', 's', '\022', '\r', '\n', '\005', 'R', 
  'e', 's', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\021', '\n', '\t', 'E', 'f', 'f', 'e', 'c', 't', 'N', 'u', 'm', '\030', '\002', 
  ' ', '\001', '(', '\r', '\022', '\024', '\n', '\014', 'M', 'a', 'x', 'E', 'f', 'f', 'e', 'c', 't', 'N', 'u', 'm', '\030', '\003', ' ', '\001', '(', 
  '\r', '\"', '\233', '\001', '\n', '\020', 'C', 'S', 'D', 'T', 'P', 'l', 'a', 'y', 'e', 'r', 'F', 'i', 'n', 'i', 's', 'h', '\022', '\023', '\n', 
  '\013', 'P', 'l', 'a', 'y', 'e', 'r', 'I', 'n', 'd', 'e', 'x', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\022', '\n', '\n', 'D', 'e', 'a', 
  't', 'h', 'I', 'n', 'd', 'e', 'x', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\022', '\n', '\n', 'F', 'r', 'a', 'm', 'e', 'I', 'n', 'd', 
  'e', 'x', '\030', '\003', ' ', '\001', '(', '\r', '\022', '*', '\n', '\n', 'C', 'a', 'm', 'p', 'R', 'e', 's', 'u', 'l', 't', '\030', '\004', ' ', 
  '\001', '(', '\013', '2', '\026', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'P', 'v', 'p', 'C', 'a', 'm', 'p', 'R', 'e', 's', 'u', 
  'l', 't', '\022', '\036', '\n', '\004', 'S', 't', 'a', 't', '\030', '\005', ' ', '\001', '(', '\013', '2', '\020', '.', 'm', 's', 'g', '.', 'C', 'S', 
  'D', 'T', 'P', 'v', 'p', 'S', 't', 'a', 't', '\"', 's', '\n', '\017', 'C', 'S', 'D', 'T', 'M', 'a', 'r', 'q', 'u', 'e', 'e', 'I', 
  't', 'e', 'm', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\003', '\022', '\017', '\n', '\007', 'C', 'o', 'n', 't', 'e', 'n', 
  't', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\021', '\n', '\t', 'S', 't', 'a', 'r', 't', 'T', 'i', 'm', 'e', '\030', '\003', ' ', '\001', '(', 
  '\003', '\022', '\017', '\n', '\007', 'E', 'n', 'd', 'T', 'i', 'm', 'e', '\030', '\004', ' ', '\001', '(', '\003', '\022', '\021', '\n', '\t', 'F', 'r', 'e', 
  'q', 'u', 'e', 'n', 'c', 'y', '\030', '\005', ' ', '\001', '(', '\r', '\022', '\014', '\n', '\004', 'F', 'l', 'a', 'g', '\030', '\006', ' ', '\001', '(', 
  '\r', '\"', '2', '\n', '\013', 'C', 'S', 'D', 'T', 'M', 'a', 'r', 'q', 'u', 'e', 'e', '\022', '#', '\n', '\005', 'I', 't', 'e', 'm', 's', 
  '\030', '\001', ' ', '\003', '(', '\013', '2', '\024', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'M', 'a', 'r', 'q', 'u', 'e', 'e', 'I', 
  't', 'e', 'm', '\"', '?', '\n', '\004', 'C', 'o', 'n', 'd', '\022', '\033', '\n', '\004', 'T', 'y', 'p', 'e', '\030', '\001', ' ', '\001', '(', '\016', 
  '2', '\r', '.', 'm', 's', 'g', '.', 'C', 'O', 'N', 'D', 'T', 'Y', 'P', 'E', '\022', '\014', '\n', '\004', 'P', 'a', 'r', 'a', '\030', '\002', 
  ' ', '\003', '(', '\005', '\022', '\014', '\n', '\004', 'M', 'o', 'd', 'e', '\030', '\003', ' ', '\001', '(', '\t', '\"', '6', '\n', '\024', 'C', 'S', 'D', 
  'T', 'C', 'h', 'e', 's', 's', 'P', 'l', 'a', 'y', 'e', 'r', 'E', 'q', 'u', 'i', 'p', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', 
  ' ', '\001', '(', '\r', '\022', '\022', '\n', '\n', 'I', 'n', 's', 't', 'a', 'n', 'c', 'e', 'I', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\"', 
  '\311', '\002', '\n', '\017', 'C', 'S', 'D', 'T', 'C', 'h', 'e', 's', 's', 'P', 'l', 'a', 'y', 'e', 'r', '\022', '\n', '\n', '\002', 'I', 'd', 
  '\030', '\001', ' ', '\001', '(', '\r', '\022', '\014', '\n', '\004', 'S', 'k', 'i', 'n', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\016', '\n', '\006', 'A', 
  'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'P', 'i', 'c', 't', 'u', 'r', 'e', '\030', '\004', ' ', 
  '\001', '(', '\r', '\022', '\r', '\n', '\005', 'V', 'o', 'i', 'c', 'e', '\030', '\005', ' ', '\001', '(', '\r', '\022', '0', '\n', '\006', 'E', 'q', 'u', 
  'i', 'p', 's', '\030', '\n', ' ', '\003', '(', '\013', '2', ' ', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'C', 'h', 'e', 's', 's', 
  'P', 'l', 'a', 'y', 'e', 'r', '.', 'E', 'q', 'u', 'i', 'p', 's', 'E', 'n', 't', 'r', 'y', '\022', '.', '\n', '\005', 'E', 'q', 'u', 
  'i', 'p', '\030', '\013', ' ', '\003', '(', '\013', '2', '\037', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'C', 'h', 'e', 's', 's', 'P', 
  'l', 'a', 'y', 'e', 'r', '.', 'E', 'q', 'u', 'i', 'p', 'E', 'n', 't', 'r', 'y', '\022', '\022', '\n', '\n', 'I', 'n', 's', 't', 'a', 
  'n', 'c', 'e', 'I', 'd', '\030', '\014', ' ', '\001', '(', '\t', '\032', '-', '\n', '\013', 'E', 'q', 'u', 'i', 'p', 's', 'E', 'n', 't', 'r', 
  'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', 
  ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\032', 'G', '\n', '\n', 'E', 'q', 'u', 'i', 'p', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', 
  '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '(', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', 
  '2', '\031', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'C', 'h', 'e', 's', 's', 'P', 'l', 'a', 'y', 'e', 'r', 'E', 'q', 'u', 
  'i', 'p', ':', '\002', '8', '\001', '\"', 'A', '\n', '\013', 'C', 'S', 'D', 'T', 'T', 'e', 'l', 'B', 'o', 'o', 'k', '\022', '\n', '\n', '\002', 
  'I', 'd', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\013', '\n', '\003', 'T', 'e', 'l', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 
  'N', 'a', 'm', 'e', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\013', '\n', '\003', 'M', 'm', 'r', '\030', '\004', ' ', '\001', '(', '\r', '\"', '.', 
  '\n', '\014', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'D', 'a', 't', 'a', '\022', '\013', '\n', '\003', 'K', 'e', 'y', '\030', '\001', ' ', '\001', 
  '(', '\t', '\022', '\021', '\n', '\t', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', '\206', '\001', '\n', 
  '\016', 'G', 'M', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'D', 'a', 't', 'a', '\022', '\013', '\n', '\003', 'K', 'e', 'y', '\030', '\001', ' ', 
  '\001', '(', '\t', '\022', '5', '\n', '\t', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\"', '.', 
  'm', 's', 'g', '.', 'G', 'M', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'D', 'a', 't', 'a', '.', 'L', 'a', 'n', 'g', 'u', 'a', 
  'g', 'e', 's', 'E', 'n', 't', 'r', 'y', '\032', '0', '\n', '\016', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', 'E', 'n', 't', 'r', 
  'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', 
  ' ', '\001', '(', '\t', ':', '\002', '8', '\001', '\"', ',', '\n', '\016', 'C', 'o', 'm', 'm', 'o', 'n', 'K', 'V', 'S', 't', 'r', 'i', 'n', 
  'g', '\022', '\013', '\n', '\003', 'K', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'V', 'a', 'l', 'u', 'e', '\030', '\002', 
  ' ', '\001', '(', '\t', '\"', 'F', '\n', '\017', 'C', 'D', 'N', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'D', 'a', 't', 'a', '\022', '\013', 
  '\n', '\003', 'K', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '&', '\n', '\t', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 's', '\030', 
  '\002', ' ', '\003', '(', '\013', '2', '\023', '.', 'm', 's', 'g', '.', 'C', 'o', 'm', 'm', 'o', 'n', 'K', 'V', 'S', 't', 'r', 'i', 'n', 
  'g', '\"', 'V', '\n', '\n', 'C', 'S', 'D', 'T', 'S', 'e', 'a', 's', 'o', 'n', '\022', '\025', '\n', '\r', 'C', 'u', 'r', 'R', 'a', 'n', 
  'k', 'S', 'e', 'a', 's', 'o', 'n', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\025', '\n', '\r', 'S', 'e', 'a', 's', 'o', 'n', 'A', 'w', 
  'a', 'r', 'd', 'e', 'd', '\030', '\002', ' ', '\001', '(', '\010', '\022', '\032', '\n', '\022', 'S', 'e', 'a', 's', 'o', 'n', 'T', 'a', 's', 'k', 
  'P', 'r', 'o', 'g', 'r', 'e', 's', 's', '\030', '\003', ' ', '\001', '(', '\r', '\"', '\262', '\001', '\n', '\014', 'C', 'S', 'D', 'T', 'A', 'c', 
  't', 'i', 'v', 'i', 't', 'y', '\022', '-', '\n', '\006', 'G', 'r', 'o', 'u', 'p', 's', '\030', '\001', ' ', '\003', '(', '\013', '2', '\035', '.', 
  'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', '.', 'G', 'r', 'o', 'u', 'p', 's', 'E', 'n', 
  't', 'r', 'y', '\022', '\026', '\n', '\016', 'Q', 'u', 'e', 's', 't', 'i', 'o', 'n', 'n', 'a', 'i', 'r', 'e', 's', '\030', '\002', ' ', '\003', 
  '(', '\r', '\022', '\024', '\n', '\014', 'U', 's', 'e', 'E', 'x', 'c', 'e', 'l', 'C', 'o', 'n', 'f', '\030', '\003', ' ', '\001', '(', '\010', '\032', 
  'E', '\n', '\013', 'G', 'r', 'o', 'u', 'p', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', 
  '(', '\r', '\022', '%', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\026', '.', 'm', 's', 'g', '.', 'C', 
  'S', 'D', 'T', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', 'G', 'r', 'o', 'u', 'p', ':', '\002', '8', '\001', '\"', '\237', '\002', '\n', '\021', 
  'C', 'S', 'D', 'T', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', 'G', 'r', 'o', 'u', 'p', '\022', ':', '\n', '\n', 'A', 'c', 't', 'i', 
  'v', 'i', 't', 'i', 'e', 's', '\030', '\001', ' ', '\003', '(', '\013', '2', '&', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'A', 'c', 
  't', 'i', 'v', 'i', 't', 'y', 'G', 'r', 'o', 'u', 'p', '.', 'A', 'c', 't', 'i', 'v', 'i', 't', 'i', 'e', 's', 'E', 'n', 't', 
  'r', 'y', '\022', '\016', '\n', '\006', 'M', 'd', '5', 'S', 'u', 'm', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\021', '\n', '\t', 'B', 'e', 'g', 
  'i', 'n', 'T', 'i', 'm', 'e', '\030', '\003', ' ', '\001', '(', '\003', '\022', '\'', '\n', '\006', 'R', 'e', 'c', 'o', 'r', 'd', '\030', '\004', ' ', 
  '\001', '(', '\013', '2', '\027', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', 'R', 'e', 'c', 
  'o', 'r', 'd', '\022', '\021', '\n', '\t', 'L', 'o', 'g', 'i', 'n', 'D', 'a', 'y', 's', '\030', '\005', ' ', '\001', '(', '\r', '\022', '\022', '\n', 
  '\n', 'C', 'h', 'e', 's', 't', 'L', 'e', 'v', 'e', 'l', '\030', '\006', ' ', '\001', '(', '\005', '\022', '\017', '\n', '\007', 'E', 'n', 'd', 'T', 
  'i', 'm', 'e', '\030', '\007', ' ', '\001', '(', '\003', '\032', 'J', '\n', '\017', 'A', 'c', 't', 'i', 'v', 'i', 't', 'i', 'e', 's', 'E', 'n', 
  't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '&', '\n', '\005', 'v', 'a', 'l', 'u', 'e', 
  '\030', '\002', ' ', '\001', '(', '\013', '2', '\027', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', 
  'D', 'e', 't', 'a', 'i', 'l', ':', '\002', '8', '\001', '\"', 'd', '\n', '\022', 'C', 'S', 'D', 'T', 'A', 'c', 't', 'i', 'v', 'i', 't', 
  'y', 'D', 'e', 't', 'a', 'i', 'l', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'P', 'r', 
  'o', 'g', 'r', 'e', 's', 's', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'G', 'e', 't', 'A', 'w', 'a', 'r', 'd', '\030', 
  '\003', ' ', '\001', '(', '\010', '\022', '\016', '\n', '\006', 'M', 'd', '5', 'S', 'u', 'm', '\030', '\004', ' ', '\001', '(', '\t', '\022', '\016', '\n', '\006', 
  'U', 'n', 'l', 'o', 'c', 'k', '\030', '\005', ' ', '\001', '(', '\010', '\"', '\357', '\001', '\n', '\022', 'C', 'S', 'D', 'T', 'A', 'c', 't', 'i', 
  'v', 'i', 't', 'y', 'R', 'e', 'c', 'o', 'r', 'd', '\022', '5', '\n', '\007', 'P', 'r', 'o', 'c', 'e', 's', 's', '\030', '\001', ' ', '\003', 
  '(', '\013', '2', '$', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', 'R', 'e', 'c', 'o', 
  'r', 'd', '.', 'P', 'r', 'o', 'c', 'e', 's', 's', 'E', 'n', 't', 'r', 'y', '\022', '3', '\n', '\006', 'R', 'e', 'w', 'a', 'r', 'd', 
  '\030', '\002', ' ', '\003', '(', '\013', '2', '#', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', 
  'R', 'e', 'c', 'o', 'r', 'd', '.', 'R', 'e', 'w', 'a', 'r', 'd', 'E', 'n', 't', 'r', 'y', '\022', '\016', '\n', '\006', 'P', 'a', 'r', 
  'a', 'm', 's', '\030', '\003', ' ', '\001', '(', '\014', '\032', '.', '\n', '\014', 'P', 'r', 'o', 'c', 'e', 's', 's', 'E', 'n', 't', 'r', 'y', 
  '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', 
  '\001', '(', '\r', ':', '\002', '8', '\001', '\032', '-', '\n', '\013', 'R', 'e', 'w', 'a', 'r', 'd', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', 
  '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', 
  ':', '\002', '8', '\001', '\"', '\201', '\001', '\n', '\017', 'C', 'S', 'D', 'T', 'R', 'e', 'c', 'r', 'u', 'i', 't', 'D', 'a', 't', 'a', '\022', 
  ':', '\n', '\013', 'I', 's', 'R', 'e', 'c', 'r', 'u', 'i', 't', 'e', 'd', '\030', '\001', ' ', '\003', '(', '\013', '2', '%', '.', 'm', 's', 
  'g', '.', 'C', 'S', 'D', 'T', 'R', 'e', 'c', 'r', 'u', 'i', 't', 'D', 'a', 't', 'a', '.', 'I', 's', 'R', 'e', 'c', 'r', 'u', 
  'i', 't', 'e', 'd', 'E', 'n', 't', 'r', 'y', '\032', '2', '\n', '\020', 'I', 's', 'R', 'e', 'c', 'r', 'u', 'i', 't', 'e', 'd', 'E', 
  'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 
  'e', '\030', '\002', ' ', '\001', '(', '\010', ':', '\002', '8', '\001', '\"', 'R', '\n', '\021', 'C', 'S', 'D', 'T', 'R', 'e', 'c', 'r', 'u', 'i', 
  't', 'P', 'l', 'a', 'y', 'e', 'r', '\022', '(', '\n', '\006', 'S', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\016', '2', '\030', 
  '.', 'm', 's', 'g', '.', 'P', 'l', 'a', 'y', 'e', 'r', 'R', 'e', 'c', 'r', 'u', 'i', 't', 'S', 't', 'a', 't', 'u', 's', '\022', 
  '\023', '\n', '\013', 'B', 'a', 't', 't', 'l', 'e', 'C', 'o', 'u', 'n', 't', '\030', '\002', ' ', '\001', '(', '\r', '\"', '\225', '\001', '\n', '\023', 
  'C', 'S', 'D', 'T', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', 'R', 'e', 'c', 'r', 'u', 'i', 't', '\022', '6', '\n', '\007', 'P', 'l', 
  'a', 'y', 'e', 'r', 's', '\030', '\001', ' ', '\003', '(', '\013', '2', '%', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'A', 'c', 't', 
  'i', 'v', 'i', 't', 'y', 'R', 'e', 'c', 'r', 'u', 'i', 't', '.', 'P', 'l', 'a', 'y', 'e', 'r', 's', 'E', 'n', 't', 'r', 'y', 
  '\032', 'F', '\n', '\014', 'P', 'l', 'a', 'y', 'e', 'r', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', 
  ' ', '\001', '(', '\t', '\022', '%', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\026', '.', 'm', 's', 'g', 
  '.', 'C', 'S', 'D', 'T', 'R', 'e', 'c', 'r', 'u', 'i', 't', 'P', 'l', 'a', 'y', 'e', 'r', ':', '\002', '8', '\001', '\"', '\357', '\001', 
  '\n', '\017', 'C', 'S', 'D', 'T', 'A', 'c', 't', 'G', 'r', 'o', 'u', 'p', 'B', 'u', 'y', '\022', '2', '\n', '\007', 'P', 'r', 'o', 'c', 
  'e', 's', 's', '\030', '\001', ' ', '\003', '(', '\013', '2', '!', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'A', 'c', 't', 'G', 'r', 
  'o', 'u', 'p', 'B', 'u', 'y', '.', 'P', 'r', 'o', 'c', 'e', 's', 's', 'E', 'n', 't', 'r', 'y', '\022', '0', '\n', '\006', 'R', 'e', 
  'w', 'a', 'r', 'd', '\030', '\002', ' ', '\003', '(', '\013', '2', ' ', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'A', 'c', 't', 'G', 
  'r', 'o', 'u', 'p', 'B', 'u', 'y', '.', 'R', 'e', 'w', 'a', 'r', 'd', 'E', 'n', 't', 'r', 'y', '\032', '.', '\n', '\014', 'P', 'r', 
  'o', 'c', 'e', 's', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\r', 
  '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\032', 'F', '\n', '\013', 'R', 'e', 'w', 'a', 
  'r', 'd', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '&', '\n', '\005', 'v', 
  'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\027', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'A', 'c', 't', 'G', 
  'r', 'o', 'u', 'p', 'B', 'u', 'y', 'R', 'w', 'd', ':', '\002', '8', '\001', '\"', '{', '\n', '\022', 'C', 'S', 'D', 'T', 'A', 'c', 't', 
  'G', 'r', 'o', 'u', 'p', 'B', 'u', 'y', 'R', 'w', 'd', '\022', '5', '\n', '\007', 'R', 'e', 'w', 'a', 'r', 'd', 's', '\030', '\001', ' ', 
  '\003', '(', '\013', '2', '$', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'A', 'c', 't', 'G', 'r', 'o', 'u', 'p', 'B', 'u', 'y', 
  'R', 'w', 'd', '.', 'R', 'e', 'w', 'a', 'r', 'd', 's', 'E', 'n', 't', 'r', 'y', '\032', '.', '\n', '\014', 'R', 'e', 'w', 'a', 'r', 
  'd', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'v', 
  'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\"', '\244', '\001', '\n', '\022', 'C', 'S', 'D', 'T', 'A', 'c', 
  't', 'R', 'e', 'c', 'r', 'u', 'i', 't', 'D', 'a', 't', 'a', '\022', '\017', '\n', '\007', 'I', 'n', 'v', 'i', 't', 'e', 'r', '\030', '\001', 
  ' ', '\001', '(', '\t', '\022', '5', '\n', '\007', 'P', 'l', 'a', 'y', 'e', 'r', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '$', '.', 'm', 
  's', 'g', '.', 'C', 'S', 'D', 'T', 'A', 'c', 't', 'R', 'e', 'c', 'r', 'u', 'i', 't', 'D', 'a', 't', 'a', '.', 'P', 'l', 'a', 
  'y', 'e', 'r', 's', 'E', 'n', 't', 'r', 'y', '\032', 'F', '\n', '\014', 'P', 'l', 'a', 'y', 'e', 'r', 's', 'E', 'n', 't', 'r', 'y', 
  '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '%', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', 
  '\001', '(', '\013', '2', '\026', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'R', 'e', 'c', 'r', 'u', 'i', 't', 'P', 'l', 'a', 'y', 
  'e', 'r', ':', '\002', '8', '\001', '\"', 'I', '\n', '\023', 'C', 'S', 'D', 'T', 'A', 'c', 't', 'L', 'u', 'c', 'k', 'M', 'a', 'l', 'l', 
  'D', 'a', 't', 'a', '\022', '\021', '\n', '\t', 'M', 'a', 'l', 'l', 'G', 'o', 'o', 'd', 's', '\030', '\001', ' ', '\003', '(', '\r', '\022', '\r', 
  '\n', '\005', 'T', 'a', 'b', 'I', 'd', '\030', '\002', ' ', '\001', '(', '\005', '\022', '\020', '\n', '\010', 'D', 'i', 's', 'c', 'o', 'u', 'n', 't', 
  '\030', '\003', ' ', '\001', '(', '\r', '\"', ']', '\n', '\t', 'C', 'S', 'D', 'T', 'M', 'e', 'l', 'e', 'e', '\022', '\020', '\n', '\010', 'P', 'r', 
  'o', 'g', 'r', 'e', 's', 's', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'G', 'e', 't', 'A', 'w', 'a', 'r', 'd', '\030', 
  '\002', ' ', '\001', '(', '\010', '\022', '\026', '\n', '\016', 'M', 'e', 'l', 'e', 'e', 'B', 'e', 'g', 'i', 'n', 'T', 'i', 'm', 'e', '\030', '\003', 
  ' ', '\001', '(', '\003', '\022', '\024', '\n', '\014', 'M', 'e', 'l', 'e', 'e', 'E', 'n', 'd', 'T', 'i', 'm', 'e', '\030', '\004', ' ', '\001', '(', 
  '\003', '\"', '\211', '\002', '\n', '\022', 'C', 'S', 'D', 'T', 'T', 'e', 'a', 'm', 'S', 'l', 'o', 't', 'P', 'l', 'a', 'y', 'e', 'r', '\022', 
  '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'I', 's', 'A', 'I', '\030', '\002', ' ', '\001', '(', '\010', 
  '\022', '\014', '\n', '\004', 'S', 'l', 'o', 't', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\035', '\n', '\005', 'G', 'r', 'o', 'u', 'p', '\030', '\004', 
  ' ', '\001', '(', '\016', '2', '\016', '.', 'm', 's', 'g', '.', 'T', 'E', 'A', 'M', 'G', 'R', 'O', 'U', 'P', '\022', '\017', '\n', '\007', 'U', 
  's', 'r', 'N', 'a', 'm', 'e', '\030', '\005', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'H', 'e', 'a', 'd', 'P', 'i', 'c', '\030', '\006', 
  ' ', '\001', '(', '\r', '\022', '\016', '\n', '\006', 'R', 'e', 'g', 'i', 'o', 'n', '\030', '\007', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'P', 
  'r', 'o', 'v', 'i', 'n', 'c', 'e', '\030', '\010', ' ', '\001', '(', '\r', '\022', '\024', '\n', '\014', 'H', 'e', 'a', 'd', 'P', 'i', 'c', 'F', 
  'r', 'a', 'm', 'e', '\030', '\t', ' ', '\001', '(', '\r', '\022', '\013', '\n', '\003', 'L', 'v', 'l', '\030', '\n', ' ', '\001', '(', '\r', '\022', '\013', 
  '\n', '\003', 'C', 'u', 'p', '\030', '\013', ' ', '\001', '(', '\r', '\022', '\'', '\n', '\014', 'P', 'l', 'a', 't', 'f', 'o', 'r', 'm', 'T', 'y', 
  'p', 'e', '\030', '\014', ' ', '\001', '(', '\016', '2', '\021', '.', 'm', 's', 'g', '.', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', 'T', 'Y', 
  'P', 'E', '\022', '\017', '\n', '\007', 'C', 'o', 'u', 'n', 't', 'r', 'y', '\030', '\r', ' ', '\001', '(', '\t', '\"', '[', '\n', '\023', 'C', 'S', 
  'D', 'T', 'T', 'e', 'a', 'm', 'V', 'o', 'i', 'c', 'e', 'P', 'l', 'a', 'y', 'e', 'r', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', 
  ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'V', 'o', 'i', 'c', 'e', 'I', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 
  'V', 'o', 'i', 'c', 'e', 'M', 'e', 'm', 'I', 'd', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\023', '\n', '\013', 'V', 'o', 'i', 'c', 'e', 
  'U', 's', 'e', 'r', 'I', 'd', '\030', '\004', ' ', '\001', '(', '\t', '\"', '\312', '\006', '\n', '\021', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', 
  'G', 'r', 'o', 'u', 'p', 'D', 'a', 't', 'a', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\037', '\n', '\004', 
  'T', 'y', 'p', 'e', '\030', '\002', ' ', '\001', '(', '\016', '2', '\021', '.', 'm', 's', 'g', '.', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', 
  'T', 'Y', 'P', 'E', '\022', '\017', '\n', '\007', 'T', 'a', 'b', 'N', 'a', 'm', 'e', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 
  'T', 'a', 'b', 'I', 'c', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\t', '\022', '\025', '\n', '\r', 'B', 'e', 'g', 'i', 'n', 'S', 'h', 'o', 
  'w', 'T', 'i', 'm', 'e', '\030', '\005', ' ', '\001', '(', '\t', '\022', '\021', '\n', '\t', 'B', 'e', 'g', 'i', 'n', 'T', 'i', 'm', 'e', '\030', 
  '\006', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'E', 'n', 'd', 'T', 'i', 'm', 'e', '\030', '\007', ' ', '\001', '(', '\t', '\022', '\023', '\n', 
  '\013', 'E', 'n', 'd', 'S', 'h', 'o', 'w', 'T', 'i', 'm', 'e', '\030', '\010', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'D', 'u', 'r', 
  'a', 't', 'i', 'o', 'n', '\030', '\t', ' ', '\001', '(', '\r', '\022', '\023', '\n', '\013', 'P', 'r', 'i', 'v', 'a', 't', 'e', 'D', 'a', 't', 
  'a', '\030', '\n', ' ', '\001', '(', '\r', '\022', '\014', '\n', '\004', 'O', 'p', 'e', 'n', '\030', '\013', ' ', '\001', '(', '\010', '\022', '\022', '\n', '\n', 
  'A', 'c', 't', 'i', 'v', 'i', 't', 'y', 'I', 'd', '\030', '\014', ' ', '\001', '(', '\r', '\022', '\022', '\n', '\n', 'R', 'e', 'p', 'e', 'a', 
  't', 'T', 'y', 'p', 'e', '\030', '\r', ' ', '\001', '(', '\r', '\022', '\021', '\n', '\t', 'S', 'h', 'o', 'w', 'P', 'a', 'r', 'a', 'm', '\030', 
  '\016', ' ', '\001', '(', '\t', '\022', '$', '\n', '\013', 'B', 'u', 'f', 'f', 'E', 'f', 'f', 'e', 'c', 't', 's', '\030', '\017', ' ', '\003', '(', 
  '\013', '2', '\017', '.', 'm', 's', 'g', '.', 'B', 'u', 'f', 'f', 'E', 'f', 'f', 'e', 'c', 't', '\022', '\r', '\n', '\005', 'M', 'o', 'd', 
  'e', 's', '\030', '\020', ' ', '\003', '(', '\r', '\022', '\020', '\n', '\010', 'P', 'a', 'g', 'e', 'T', 'y', 'p', 'e', '\030', '\021', ' ', '\001', '(', 
  '\r', '\022', '\017', '\n', '\007', 'P', 'i', 'c', 'N', 'a', 'm', 'e', '\030', '\022', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'P', 'i', 'c', 
  'O', 'p', 'e', 'n', '\030', '\023', ' ', '\001', '(', '\010', '\022', '\025', '\n', '\r', 'S', 'u', 'b', 's', 'c', 'r', 'i', 'p', 't', 'T', 'y', 
  'p', 'e', '\030', '\024', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'O', 'r', 'd', 'e', 'r', 'I', 'D', '\030', '\025', ' ', '\001', '(', '\r', 
  '\022', '\023', '\n', '\013', 'P', 'i', 'c', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', '\030', '\026', ' ', '\001', '(', '\r', '\022', '\025', '\n', '\r', 
  'P', 'i', 'c', 'S', 'w', 'i', 't', 'c', 'h', 'O', 'p', 'e', 'n', '\030', '\027', ' ', '\001', '(', '\r', '\022', '+', '\n', '\016', 'E', 'f', 
  'f', 'e', 'c', 't', 'T', 'i', 'm', 'e', 'T', 'y', 'p', 'e', '\030', '\030', ' ', '\001', '(', '\016', '2', '\023', '.', 'm', 's', 'g', '.', 
  'E', 'F', 'F', 'E', 'C', 'T', 'T', 'I', 'M', 'E', 'T', 'Y', 'P', 'E', '\022', '\025', '\n', '\r', 'E', 'f', 'f', 'e', 'c', 't', 'W', 
  'e', 'e', 'k', 'd', 'a', 'y', '\030', '\031', ' ', '\001', '(', '\t', '\022', '\026', '\n', '\016', 'T', 'a', 'k', 'e', 'E', 'f', 'f', 'e', 'c', 
  't', 'D', 'a', 't', 'e', '\030', '\032', ' ', '\001', '(', '\t', '\022', '\026', '\n', '\016', 'T', 'a', 'k', 'e', 'E', 'f', 'f', 'e', 'c', 't', 
  'T', 'i', 'm', 'e', '\030', '\033', ' ', '\001', '(', '\t', '\022', '\026', '\n', '\016', 'T', 'a', 'k', 'e', 'E', 'f', 'f', 'e', 'c', 't', 'R', 
  'a', 'n', 'k', '\030', '\034', ' ', '\001', '(', '\t', '\022', '\026', '\n', '\016', 'T', 'a', 'k', 'e', 'E', 'f', 'f', 'e', 'c', 't', 'M', 'o', 
  'd', 'e', '\030', '\035', ' ', '\001', '(', '\t', '\022', ')', '\n', '\t', 'T', 'e', 'a', 'm', 'S', 't', 'a', 't', 'e', '\030', '\036', ' ', '\001', 
  '(', '\016', '2', '\026', '.', 'm', 's', 'g', '.', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', 'T', 'E', 'A', 'M', 'S', 'T', 'A', 'T', 
  'E', '\022', '\024', '\n', '\014', 'U', 'I', 'S', 't', 'y', 'l', 'e', 'P', 'h', 'o', 'n', 'e', '\030', '\037', ' ', '\001', '(', '\r', '\022', '\021', 
  '\n', '\t', 'U', 'I', 'S', 't', 'y', 'l', 'e', 'P', 'C', '\030', ' ', ' ', '\001', '(', '\r', '\022', '\014', '\n', '\004', 'Z', 'o', 'n', 'e', 
  '\030', '!', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 's', '\030', '\"', ' ', '\003', '(', '\t', '\022', 
  '\027', '\n', '\017', 'T', 'a', 'k', 'e', 'E', 'f', 'f', 'e', 'c', 't', 'L', 'e', 'v', 'e', 'l', '\030', '#', ' ', '\001', '(', '\t', '\022', 
  '\016', '\n', '\006', 'M', 'a', 'k', 'e', 'U', 'p', '\030', '$', ' ', '\001', '(', '\005', '\022', '\021', '\n', '\t', 'L', 'e', 'a', 's', 't', 'M', 
  'a', 'c', 'h', '\030', '%', ' ', '\001', '(', '\003', '\022', '\025', '\n', '\r', 'P', 'l', 'a', 't', 'f', 'o', 'r', 'm', 'C', 'l', 'o', 's', 
  'e', '\030', '&', ' ', '\001', '(', '\t', '\"', '\377', '\002', '\n', '\014', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', 'D', 'a', 't', 'a', '\022', 
  '\017', '\n', '\007', 'G', 'r', 'o', 'u', 'p', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\002', ' ', 
  '\001', '(', '\r', '\022', '\r', '\n', '\005', 'T', 'i', 't', 'l', 'e', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'U', 'n', 'i', 
  't', '\030', '\004', ' ', '\001', '(', '\r', '\022', '\027', '\n', '\004', 'C', 'o', 'n', 'd', '\030', '\005', ' ', '\001', '(', '\013', '2', '\t', '.', 'm', 
  's', 'g', '.', 'C', 'o', 'n', 'd', '\022', '\032', '\n', '\006', 'A', 'w', 'a', 'r', 'd', 's', '\030', '\006', ' ', '\003', '(', '\013', '2', '\n', 
  '.', 'm', 's', 'g', '.', 'A', 'w', 'a', 'r', 'd', '\022', '\021', '\n', '\t', 'C', 'o', 'n', 'd', 'G', 'r', 'o', 'u', 'p', '\030', '\007', 
  ' ', '\001', '(', '\r', '\022', '\024', '\n', '\014', 'P', 'r', 'e', 'C', 'o', 'n', 'd', 'G', 'r', 'o', 'u', 'p', '\030', '\010', ' ', '\001', '(', 
  '\r', '\022', '\025', '\n', '\r', 'S', 'k', 'i', 'p', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', '\030', '\t', ' ', '\001', '(', '\t', '\022', 
  '\017', '\n', '\007', 'S', 'k', 'i', 'p', 'T', 'a', 'b', '\030', '\n', ' ', '\001', '(', '\r', '\022', '\013', '\n', '\003', 'D', 'a', 'y', '\030', '\013', 
  ' ', '\001', '(', '\r', '\022', '\014', '\n', '\004', 'D', 'e', 's', 'c', '\030', '\014', ' ', '\001', '(', '\t', '\022', '\023', '\n', '\013', 'S', 'h', 'o', 
  'w', 'Q', 'u', 'a', 'l', 'i', 't', 'y', '\030', '\r', ' ', '\001', '(', '\r', '\022', '\023', '\n', '\013', 'S', 'h', 'o', 'w', 'G', 'i', 'f', 
  't', 'P', 'i', 'c', '\030', '\016', ' ', '\001', '(', '\t', '\022', ')', '\n', '\t', 'R', 'e', 's', 'e', 't', 'T', 'y', 'p', 'e', '\030', '\017', 
  ' ', '\001', '(', '\016', '2', '\026', '.', 'm', 's', 'g', '.', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', 'R', 'e', 's', 'e', 't', 'T', 
  'y', 'p', 'e', '\022', '\023', '\n', '\013', 'I', 's', 'R', 'e', 'c', 'r', 'u', 'i', 't', 'e', 'r', '\030', '\020', ' ', '\001', '(', '\010', '\022', 
  '\027', '\n', '\017', 'P', 'r', 'o', 'g', 'r', 'e', 's', 's', 'I', 'n', 'h', 'e', 'r', 'i', 't', '\030', '\021', ' ', '\001', '(', '\r', '\022', 
  '\021', '\n', '\t', 'S', 'h', 'o', 'w', 'O', 'r', 'd', 'e', 'r', '\030', '\022', ' ', '\001', '(', '\r', '\"', 'X', '\n', '\020', 'A', 'c', 't', 
  'i', 'v', 'i', 't', 'y', 'A', 't', 't', 'r', 'D', 'a', 't', 'a', '\022', '\n', '\n', '\002', 'I', 'D', '\030', '\001', ' ', '\001', '(', '\r', 
  '\022', '#', '\n', '\n', 'A', 'B', 'T', 'e', 's', 't', 'T', 'y', 'p', 'e', '\030', '\002', ' ', '\001', '(', '\016', '2', '\017', '.', 'm', 's', 
  'g', '.', 'A', 'B', 'T', 'E', 'S', 'T', 'T', 'Y', 'P', 'E', '\022', '\023', '\n', '\013', 'A', 'B', 'T', 'e', 's', 't', 'V', 'a', 'l', 
  'u', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', '9', '\n', '\016', 'G', 'M', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'I', 'n', 'f', 
  'o', '\022', '\024', '\n', '\014', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'T', 'y', 'p', 'e', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\021', 
  '\n', '\t', 'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', '\030', '\002', ' ', '\001', '(', '\t', '\"', '\'', '\n', '\t', 'P', 'l', 'a', 'y', 
  'L', 'i', 'm', 'i', 't', '\022', '\013', '\n', '\003', 'A', 'g', 'e', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'C', 'o', 'u', 
  'n', 't', '\030', '\002', ' ', '\001', '(', '\r', '\"', '\273', '\001', '\n', '\023', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'F', 'u', 'n', 'c', 't', 
  'i', 'o', 'n', 'D', 'a', 't', 'a', '\022', '\021', '\n', '\t', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'I', 'd', '\030', '\001', ' ', '\001', '(', 
  '\t', '\022', '\025', '\n', '\r', 'F', 'o', 'r', 'b', 'i', 'd', 'd', 'e', 'n', 'L', 'o', 'g', 'o', '\030', '\002', ' ', '\001', '(', '\010', '\022', 
  '\020', '\n', '\010', 'A', 'g', 'e', 'J', 'u', 'd', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\010', '\022', '\030', '\n', '\020', 'I', 'n', 'f', 'o', 
  'r', 'm', 'a', 't', 'i', 'o', 'n', 'I', 'n', 'p', 'u', 't', '\030', '\004', ' ', '\001', '(', '\010', '\022', '\024', '\n', '\014', 'G', 'a', 'm', 
  'e', 'R', 'e', 's', 't', 'r', 'i', 'c', 't', '\030', '\005', ' ', '\001', '(', '\010', '\022', '\024', '\n', '\014', 'F', 'o', 'r', 'b', 'i', 'd', 
  'd', 'e', 'n', 'A', 'g', 'e', '\030', '\006', ' ', '\001', '(', '\r', '\022', '\"', '\n', '\n', 'P', 'l', 'a', 'y', 'L', 'i', 'm', 'i', 't', 
  's', '\030', '\007', ' ', '\003', '(', '\013', '2', '\016', '.', 'm', 's', 'g', '.', 'P', 'l', 'a', 'y', 'L', 'i', 'm', 'i', 't', '\"', '\350', 
  '\002', '\n', '\016', 'P', 'v', 'p', 'H', 'i', 's', 't', 'o', 'r', 'y', 'D', 'a', 't', 'a', '\022', '\r', '\n', '\005', 'P', 'v', 'p', 'I', 
  'd', '\030', '\001', ' ', '\001', '(', '\004', '\022', '\022', '\n', '\n', 'C', 'r', 'e', 'a', 't', 'e', 'T', 'i', 'm', 'e', '\030', '\002', ' ', '\001', 
  '(', '\003', '\022', '\032', '\n', '\004', 'M', 'o', 'd', 'e', '\030', '\003', ' ', '\001', '(', '\016', '2', '\014', '.', 'm', 's', 'g', '.', 'P', 'V', 
  'P', 'M', 'O', 'D', 'E', '\022', '*', '\n', '\n', 'C', 'a', 'm', 'p', 'R', 'e', 's', 'u', 'l', 't', '\030', '\004', ' ', '\001', '(', '\013', 
  '2', '\026', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'P', 'v', 'p', 'C', 'a', 'm', 'p', 'R', 'e', 's', 'u', 'l', 't', '\022', 
  '\021', '\n', '\t', 'M', 'e', 'l', 'e', 'e', 'R', 'u', 'l', 'e', '\030', '\005', ' ', '\001', '(', '\r', '\022', '\025', '\n', '\r', 'C', 'u', 's', 
  't', 'o', 'm', 'S', 'u', 'b', 'M', 'o', 'd', 'e', '\030', '\006', ' ', '\001', '(', '\r', '\022', '\024', '\n', '\014', 'T', 'o', 'u', 'r', 'n', 
  'a', 'm', 'e', 'n', 't', 'I', 'd', '\030', '\007', ' ', '\001', '(', '\004', '\022', '\016', '\n', '\006', 'G', 'a', 'm', 'e', 'I', 'd', '\030', '\010', 
  ' ', '\001', '(', '\004', '\022', '(', '\n', '\013', 'T', 'e', 'a', 'c', 'h', 'R', 'e', 's', 'u', 'l', 't', '\030', '\t', ' ', '\001', '(', '\013', 
  '2', '\023', '.', 'm', 's', 'g', '.', 'P', 'v', 'p', 'T', 'e', 'a', 'c', 'h', 'R', 'e', 's', 'u', 'l', 't', '\022', ' ', '\n', '\007', 
  'E', 'x', 't', 'D', 'a', 't', 'a', '\030', '\n', ' ', '\001', '(', '\013', '2', '\017', '.', 'm', 's', 'g', '.', 'P', 'v', 'p', 'E', 'x', 
  't', 'D', 'a', 't', 'a', '\022', '(', '\n', '\r', 'P', 'l', 'a', 'y', 'e', 'r', 'E', 'x', 't', 'D', 'a', 't', 'a', '\030', '\013', ' ', 
  '\001', '(', '\013', '2', '\021', '.', 'm', 's', 'g', '.', 'P', 'l', 'a', 'y', 'e', 'r', 'E', 'x', 't', 'M', 'a', 'p', '\022', '%', '\n', 
  '\t', 'B', 'a', 't', 't', 'l', 'e', 'E', 'x', 't', '\030', '\014', ' ', '\001', '(', '\013', '2', '\022', '.', 'm', 's', 'g', '.', 'B', 'a', 
  't', 't', 'l', 'e', 'E', 'x', 't', 'D', 'a', 't', 'a', '\"', 'b', '\n', '\t', 'C', 'S', 'D', 'T', 'G', 'u', 'i', 'd', 'e', '\022', 
  '\021', '\n', '\t', 'G', 'u', 'i', 'd', 'e', 'N', 'a', 'm', 'e', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\016', '\n', '\006', 'S', 't', 'a', 
  't', 'u', 's', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'G', 'u', 'i', 'd', 'e', 'I', 'D', '\030', '\003', ' ', '\001', '(', 
  '\r', '\022', '\020', '\n', '\010', 'S', 'e', 'q', 'u', 'e', 'n', 'c', 'e', '\030', '\004', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'L', 'a', 
  's', 't', 'S', 'e', 'q', '\030', '\005', ' ', '\001', '(', '\r', '\"', '\343', '\001', '\n', '\010', 'C', 'S', 'D', 'T', 'C', 'h', 'a', 't', '\022', 
  '\021', '\n', '\t', 'E', 'm', 'o', 't', 'i', 'o', 'n', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'S', 'e', 'n', 
  'd', 'e', 'r', 'I', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'C', 'o', 'n', 't', 'e', 'n', 't', '\030', '\003', ' ', 
  '\001', '(', '\t', '\022', '$', '\n', '\013', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'T', 'y', 'p', 'e', '\030', '\004', ' ', '\001', '(', '\016', '2', 
  '\017', '.', 'm', 's', 'g', '.', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '\022', '\024', '\n', '\014', 'C', 'h', 'a', 'n', 'n', 
  'e', 'l', 'U', 's', 'r', 'I', 'd', '\030', '\005', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'P', 'S', '4', 'O', 'n', 'l', 'y', '\030', 
  '\006', ' ', '\001', '(', '\010', '\022', '\'', '\n', '\n', 'S', 'o', 'u', 'r', 'c', 'e', 'T', 'y', 'p', 'e', '\030', '\007', ' ', '\001', '(', '\016', 
  '2', '\023', '.', 'm', 's', 'g', '.', 'C', 'H', 'A', 'T', 'S', 'O', 'U', 'R', 'C', 'E', 'T', 'Y', 'P', 'E', '\022', '+', '\n', '\014', 
  'R', 'e', 's', 't', 'r', 'i', 'c', 't', 'T', 'y', 'p', 'e', '\030', '\010', ' ', '\001', '(', '\016', '2', '\025', '.', 'm', 's', 'g', '.', 
  'U', 's', 'e', 'r', 'R', 'e', 's', 't', 'r', 'i', 'c', 't', 'T', 'y', 'p', 'e', '\"', '3', '\n', '\t', 'C', 'S', 'D', 'T', 'G', 
  'o', 'o', 'd', 's', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'C', 'o', 'u', 'n', 't', 
  '\030', '\002', ' ', '\001', '(', '\r', '\022', '\013', '\n', '\003', 'U', 'i', 'd', '\030', '\003', ' ', '\001', '(', '\r', '\"', 'd', '\n', '\r', 'C', 'S', 
  'D', 'T', 'G', 'o', 'o', 'd', 's', 'I', 'n', 'f', 'o', '\022', '\033', '\n', '\004', 'T', 'y', 'p', 'e', '\030', '\001', ' ', '\001', '(', '\016', 
  '2', '\r', '.', 'm', 's', 'g', '.', 'S', 'H', 'O', 'P', 'T', 'Y', 'P', 'E', '\022', '!', '\n', '\t', 'G', 'o', 'o', 'd', 's', 'I', 
  'n', 'f', 'o', '\030', '\002', ' ', '\003', '(', '\013', '2', '\016', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'G', 'o', 'o', 'd', 's', 
  '\022', '\023', '\n', '\013', 'R', 'e', 'f', 'r', 'e', 's', 'h', 'T', 'i', 'm', 'e', '\030', '\003', ' ', '\001', '(', '\003', '\"', '\210', '\001', '\n', 
  '\013', 'M', 'a', 'l', 'l', 'T', 'a', 'b', 'D', 'a', 't', 'a', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', 
  '\r', '\n', '\005', 'T', 'i', 't', 'l', 'e', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\036', '\n', '\004', 'T', 'y', 'p', 'e', '\030', '\003', ' ', 
  '\001', '(', '\016', '2', '\020', '.', 'm', 's', 'g', '.', 'M', 'A', 'L', 'L', 'T', 'A', 'B', 'T', 'Y', 'P', 'E', '\022', '\014', '\n', '\004', 
  'S', 'o', 'r', 't', '\030', '\006', ' ', '\001', '(', '\r', '\022', '\032', '\n', '\022', 'S', 'k', 'i', 'p', 's', '_', 'I', 'n', 't', 'e', 'r', 
  'f', 'a', 'c', 'e', '_', 'p', 'c', '\030', '\013', ' ', '\001', '(', '\r', '\022', '\024', '\n', '\014', 'I', 't', 'e', 'm', 'T', 'y', 'p', 'e', 
  'P', 'a', 'g', 'e', '\030', '\014', ' ', '\001', '(', '\r', '\"', '&', '\n', '\004', 'S', 'k', 'i', 'p', '\022', '\021', '\n', '\t', 'I', 'n', 't', 
  'e', 'r', 'f', 'a', 'c', 'e', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\013', '\n', '\003', 'T', 'a', 'b', '\030', '\002', ' ', '\001', '(', '\r', 
  '\"', '\225', '\n', '\n', '\r', 'M', 'a', 'l', 'l', 'G', 'o', 'o', 'd', 's', 'D', 'a', 't', 'a', '\022', '\n', '\n', '\002', 'I', 'd', '\030', 
  '\001', ' ', '\001', '(', '\r', '\022', '\034', '\n', '\010', 'C', 'o', 'n', 't', 'e', 'n', 't', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\n', 
  '.', 'm', 's', 'g', '.', 'A', 'w', 'a', 'r', 'd', '\022', '\036', '\n', '\010', 'C', 'o', 'n', 's', 'u', 'm', 'e', 's', '\030', '\003', ' ', 
  '\003', '(', '\013', '2', '\014', '.', 'm', 's', 'g', '.', 'C', 'o', 'n', 's', 'u', 'm', 'e', '\022', '\027', '\n', '\017', 'O', 'n', 'S', 'a', 
  'l', 'e', 'B', 'e', 'g', 'i', 'n', 'T', 'i', 'm', 'e', '\030', '\004', ' ', '\001', '(', '\003', '\022', '\025', '\n', '\r', 'O', 'n', 'S', 'a', 
  'l', 'e', 'E', 'n', 'd', 'T', 'i', 'm', 'e', '\030', '\005', ' ', '\001', '(', '\003', '\022', '\026', '\n', '\016', 'S', 'e', 'l', 'l', 'C', 'o', 
  'u', 'n', 't', 'L', 'i', 'm', 'i', 't', '\030', '\006', ' ', '\001', '(', '\r', '\022', '\036', '\n', '\026', 'S', 'e', 'l', 'l', 'C', 'o', 'u', 
  'n', 't', 'R', 'e', 's', 'e', 't', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', '\030', '\007', ' ', '\001', '(', '\r', '\022', '\"', '\n', '\004', 
  'F', 'l', 'a', 'g', '\030', '\010', ' ', '\001', '(', '\016', '2', '\024', '.', 'm', 's', 'g', '.', 'M', 'A', 'L', 'L', '_', 'G', 'O', 'O', 
  'D', 'S', '_', 'F', 'L', 'A', 'G', '\022', '\022', '\n', '\n', 'B', 'u', 'l', 'k', 'B', 'u', 'y', 'i', 'n', 'g', '\030', '\t', ' ', '\001', 
  '(', '\010', '\022', '\021', '\n', '\t', 'R', 'e', 'c', 'o', 'm', 'm', 'e', 'n', 'd', '\030', '\n', ' ', '\001', '(', '\r', '\022', '\014', '\n', '\004', 
  'S', 'o', 'r', 't', '\030', '\013', ' ', '\001', '(', '\r', '\022', '\021', '\n', '\t', 'M', 'a', 'l', 'l', 'T', 'a', 'b', 'I', 'd', '\030', '\014', 
  ' ', '\001', '(', '\r', '\022', '\025', '\n', '\r', 'S', 'h', 'o', 'w', 'B', 'e', 'g', 'i', 'n', 'T', 'i', 'm', 'e', '\030', '\017', ' ', '\001', 
  '(', '\003', '\022', '\023', '\n', '\013', 'S', 'h', 'o', 'w', 'E', 'n', 'd', 'T', 'i', 'm', 'e', '\030', '\020', ' ', '\001', '(', '\003', '\022', '\017', 
  '\n', '\007', 'G', 'r', 'o', 'u', 'p', 'I', 'd', '\030', '\021', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 'G', 'r', 'o', 'u', 'p', 'S', 
  'h', 'o', 'w', 'F', 'i', 'r', 's', 't', '\030', '\022', ' ', '\001', '(', '\010', '\022', '\024', '\n', '\014', 'S', 'h', 'o', 'w', 'R', 'e', 's', 
  'o', 'u', 'r', 'c', 'e', '\030', '\023', ' ', '\001', '(', '\010', '\022', '\031', '\n', '\021', 'C', 'h', 'a', 'r', 'g', 'e', 'P', 'r', 'i', 'v', 
  'a', 't', 'e', 'P', 'a', 'r', 'a', '\030', '\024', ' ', '\001', '(', '\r', '\022', '\032', '\n', '\022', 'S', 'e', 'l', 'l', 'C', 'o', 'u', 'n', 
  't', 'S', 't', 'a', 'r', 't', 'T', 'i', 'm', 'e', '\030', '\025', ' ', '\001', '(', '\003', '\022', '\032', '\n', '\022', 'S', 'k', 'i', 'p', 's', 
  '_', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', '_', 'p', 'c', '\030', '\026', ' ', '\001', '(', '\005', '\022', '\025', '\n', '\r', 'M', 'o', 
  'n', 'e', 'y', 'O', 'f', 'f', 'C', 'o', 'u', 'n', 't', '\030', '\027', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'M', 'o', 'n', 'e', 
  'y', 'O', 'f', 'f', '\030', '\030', ' ', '\001', '(', '\r', '\022', '\024', '\n', '\014', 'R', 'e', 'c', 'o', 'm', 'm', 'e', 'n', 'd', '2', 'N', 
  'd', '\030', '\031', ' ', '\001', '(', '\r', '\022', '\024', '\n', '\014', 'R', 'e', 'c', 'o', 'm', 'm', 'e', 'n', 'd', '3', 'R', 'd', '\030', '\032', 
  ' ', '\001', '(', '\r', '\022', '\014', '\n', '\004', 'Z', 'o', 'n', 'e', '\030', '\033', ' ', '\001', '(', '\r', '\022', '\023', '\n', '\013', 'R', 'e', 'p', 
  'e', 'a', 't', 'e', 'd', 'B', 'u', 'y', '\030', '\034', ' ', '\001', '(', '\010', '\022', '\024', '\n', '\014', 'D', 'o', 'w', 'n', 'l', 'o', 'a', 
  'd', 'L', 'i', 's', 't', '\030', '\035', ' ', '\003', '(', '\t', '\022', '\'', '\n', '\014', 'P', 'l', 'a', 't', 'f', 'o', 'r', 'm', 'L', 'i', 
  's', 't', '\030', '\036', ' ', '\003', '(', '\016', '2', '\021', '.', 'm', 's', 'g', '.', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', 'T', 'Y', 
  'P', 'E', '\022', '!', '\n', '\013', 'C', 'o', 'n', 's', 'u', 'm', 'e', 's', '2', 'N', 'd', '\030', '\037', ' ', '\003', '(', '\013', '2', '\014', 
  '.', 'm', 's', 'g', '.', 'C', 'o', 'n', 's', 'u', 'm', 'e', '\022', '\032', '\n', '\022', 'O', 'n', 'S', 'a', 'l', 'e', '2', 'N', 'd', 
  'B', 'e', 'g', 'i', 'n', 'T', 'i', 'm', 'e', '\030', ' ', ' ', '\001', '(', '\003', '\022', '\030', '\n', '\020', 'O', 'n', 'S', 'a', 'l', 'e', 
  '2', 'N', 'd', 'E', 'n', 'd', 'T', 'i', 'm', 'e', '\030', '!', ' ', '\001', '(', '\003', '\022', '\030', '\n', '\020', 'M', 'o', 'n', 'e', 'y', 
  'O', 'f', 'f', '2', 'N', 'd', 'C', 'o', 'u', 'n', 't', '\030', '\"', ' ', '\001', '(', '\r', '\022', '\023', '\n', '\013', 'M', 'o', 'n', 'e', 
  'y', 'O', 'f', 'f', '2', 'N', 'd', '\030', '#', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\030', 
  '$', ' ', '\001', '(', '\t', '\022', '\027', '\n', '\017', 'E', 'x', 'c', 'l', 'u', 'd', 'e', 'D', 'o', 'w', 'n', 'l', 'o', 'a', 'd', '\030', 
  '%', ' ', '\003', '(', '\t', '\022', '\023', '\n', '\013', 'C', 'o', 'u', 'n', 't', 'r', 'y', 'L', 'i', 's', 't', '\030', '&', ' ', '\003', '(', 
  '\t', '\022', '\030', '\n', '\020', 'D', 'i', 's', 'a', 'b', 'l', 'e', 'D', 'e', 'd', 'u', 'c', 't', 'i', 'o', 'n', '\030', '\'', ' ', '\001', 
  '(', '\010', '\022', '\020', '\n', '\010', 'V', 'i', 'd', 'e', 'o', 'U', 'r', 'l', '\030', '(', ' ', '\001', '(', '\t', '\022', '\031', '\n', '\005', 'G', 
  'i', 'f', 't', 's', '\030', ')', ' ', '\003', '(', '\013', '2', '\n', '.', 'm', 's', 'g', '.', 'A', 'w', 'a', 'r', 'd', '\022', '\032', '\n', 
  '\022', 'R', 'e', 'c', 'o', 'm', 'm', 'e', 'n', 'd', 'B', 'e', 'g', 'i', 'n', 'T', 'i', 'm', 'e', '\030', '*', ' ', '\001', '(', '\003', 
  '\022', '\030', '\n', '\020', 'R', 'e', 'c', 'o', 'm', 'm', 'e', 'n', 'd', 'E', 'n', 'd', 'T', 'i', 'm', 'e', '\030', '+', ' ', '\001', '(', 
  '\003', '\022', '\035', '\n', '\025', 'R', 'e', 'c', 'o', 'm', 'm', 'e', 'n', 'd', '2', 'N', 'd', 'B', 'e', 'g', 'i', 'n', 'T', 'i', 'm', 
  'e', '\030', ',', ' ', '\001', '(', '\003', '\022', '\033', '\n', '\023', 'R', 'e', 'c', 'o', 'm', 'm', 'e', 'n', 'd', '2', 'N', 'd', 'E', 'n', 
  'd', 'T', 'i', 'm', 'e', '\030', '.', ' ', '\001', '(', '\003', '\022', '\035', '\n', '\025', 'R', 'e', 'c', 'o', 'm', 'm', 'e', 'n', 'd', '3', 
  'R', 'd', 'B', 'e', 'g', 'i', 'n', 'T', 'i', 'm', 'e', '\030', '/', ' ', '\001', '(', '\003', '\022', '\033', '\n', '\023', 'R', 'e', 'c', 'o', 
  'm', 'm', 'e', 'n', 'd', '3', 'R', 'd', 'E', 'n', 'd', 'T', 'i', 'm', 'e', '\030', '0', ' ', '\001', '(', '\003', '\022', '(', '\n', '\n', 
  'C', 'o', 'n', 's', 'u', 'm', 'e', 'I', 'n', 'c', '\030', '1', ' ', '\003', '(', '\013', '2', '\024', '.', 'm', 's', 'g', '.', 'C', 'o', 
  'n', 's', 'u', 'm', 'e', 'I', 'n', 'c', 'r', 'e', 'a', 's', 'e', '\022', '6', '\n', '\021', 'C', 'o', 'n', 's', 'u', 'm', 'e', 'I', 
  'n', 'c', 'R', 'e', 'f', 'r', 'e', 's', 'h', '\030', '2', ' ', '\001', '(', '\016', '2', '\033', '.', 'm', 's', 'g', '.', 'C', 'o', 'n', 
  's', 'u', 'm', 'e', 'I', 'n', 'c', 'r', 'e', 'a', 's', 'e', 'R', 'e', 'f', 'r', 'e', 's', 'h', '\022', '\023', '\n', '\013', 'C', 'o', 
  'n', 's', 'u', 'm', 'e', 's', 'U', 'r', 'l', '\030', '3', ' ', '\001', '(', '\010', '\022', '\026', '\n', '\016', 'C', 'o', 'n', 's', 'u', 'm', 
  'e', 's', 'U', 'r', 'l', 'W', 'e', 'b', '\030', '4', ' ', '\001', '(', '\t', '\022', '\026', '\n', '\016', 'C', 'o', 'n', 's', 'u', 'm', 'e', 
  's', 'U', 'r', 'l', 'A', 'p', 'p', '\030', '5', ' ', '\001', '(', '\t', '\022', '\016', '\n', '\006', 'S', 'e', 'r', 'i', 'e', 's', '\030', '6', 
  ' ', '\001', '(', '\r', '\"', ' ', '\n', '\017', 'C', 'o', 'n', 's', 'u', 'm', 'e', 'I', 'n', 'c', 'r', 'e', 'a', 's', 'e', '\022', '\r', 
  '\n', '\005', 'C', 'o', 'u', 'n', 't', '\030', '\001', ' ', '\001', '(', '\r', '\"', 'c', '\n', '\021', 'C', 'S', 'D', 'T', 'M', 'a', 'l', 'l', 
  'G', 'o', 'o', 'd', 's', 'D', 'a', 't', 'a', '\022', '%', '\n', '\t', 'M', 'a', 'l', 'l', 'G', 'o', 'o', 'd', 's', '\030', '\001', ' ', 
  '\001', '(', '\013', '2', '\022', '.', 'm', 's', 'g', '.', 'M', 'a', 'l', 'l', 'G', 'o', 'o', 'd', 's', 'D', 'a', 't', 'a', '\022', '\020', 
  '\n', '\010', 'B', 'u', 'y', 'C', 'o', 'u', 'n', 't', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\025', '\n', '\r', 'L', 'a', 's', 't', 'R', 
  'e', 's', 'e', 't', 'T', 'i', 'm', 'e', '\030', '\003', ' ', '\001', '(', '\003', '\"', ':', '\n', '\r', 'C', 'S', 'D', 'T', 'M', 'a', 'l', 
  'l', 'G', 'o', 'o', 'd', 's', '\022', ')', '\n', '\t', 'M', 'a', 'l', 'l', 'G', 'o', 'o', 'd', 's', '\030', '\001', ' ', '\003', '(', '\013', 
  '2', '\026', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'M', 'a', 'l', 'l', 'G', 'o', 'o', 'd', 's', 'D', 'a', 't', 'a', '\"', 
  'K', '\n', '\024', 'C', 'S', 'D', 'T', 'M', 'a', 'l', 'l', 'B', 'u', 'y', 'C', 'o', 'u', 'n', 't', 'D', 'a', 't', 'a', '\022', '\n', 
  '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'B', 'u', 'y', 'C', 'o', 'u', 'n', 't', '\030', '\002', ' ', 
  '\001', '(', '\r', '\022', '\025', '\n', '\r', 'L', 'a', 's', 't', 'R', 'e', 's', 'e', 't', 'T', 'i', 'm', 'e', '\030', '\003', ' ', '\001', '(', 
  '\003', '\"', '@', '\n', '\020', 'C', 'S', 'D', 'T', 'M', 'a', 'l', 'l', 'B', 'u', 'y', 'C', 'o', 'u', 'n', 't', '\022', ',', '\n', '\t', 
  'M', 'a', 'l', 'l', 'G', 'o', 'o', 'd', 's', '\030', '\001', ' ', '\003', '(', '\013', '2', '\031', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 
  'T', 'M', 'a', 'l', 'l', 'B', 'u', 'y', 'C', 'o', 'u', 'n', 't', 'D', 'a', 't', 'a', '\"', '\323', '\001', '\n', '\016', 'M', 'a', 'l', 
  'l', 'N', 'o', 't', 'i', 'c', 'e', 'D', 'a', 't', 'a', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\017', 
  '\n', '\007', 'P', 'i', 'c', 'N', 'a', 'm', 'e', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\016', '\n', '\006', 'S', 'o', 'r', 't', 'I', 'd', 
  '\030', '\003', ' ', '\001', '(', '\r', '\022', '\037', '\n', '\010', 'S', 'k', 'i', 'p', 'T', 'y', 'p', 'e', '\030', '\004', ' ', '\001', '(', '\016', '2', 
  '\r', '.', 'm', 's', 'g', '.', 'S', 'K', 'I', 'P', 'T', 'Y', 'P', 'E', '\022', '\020', '\n', '\010', 'S', 'k', 'i', 'p', 'N', 'a', 'm', 
  'e', '\030', '\005', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'S', 'k', 'i', 'p', 'T', 'a', 'p', '\030', '\006', ' ', '\001', '(', '\r', '\022', 
  '\023', '\n', '\013', 'M', 'a', 'l', 'l', 'G', 'o', 'o', 'd', 's', 'I', 'd', '\030', '\007', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'C', 
  'o', 'u', 'n', 't', 'r', 'y', '\030', '\010', ' ', '\001', '(', '\t', '\022', '\025', '\n', '\r', 'S', 'h', 'o', 'w', 'B', 'e', 'g', 'i', 'n', 
  'T', 'i', 'm', 'e', '\030', '\t', ' ', '\001', '(', '\t', '\022', '\023', '\n', '\013', 'S', 'h', 'o', 'w', 'E', 'n', 'd', 'T', 'i', 'm', 'e', 
  '\030', '\n', ' ', '\001', '(', '\t', '\"', '?', '\n', '\022', 'C', 'S', 'D', 'T', 'C', 'o', 'm', 'm', 'o', 'n', 'R', 'a', 'n', 'd', 'L', 
  'i', 's', 't', '\022', '\033', '\n', '\004', 'T', 'y', 'p', 'e', '\030', '\001', ' ', '\001', '(', '\016', '2', '\r', '.', 'm', 's', 'g', '.', 'I', 
  'T', 'E', 'M', 'T', 'Y', 'P', 'E', '\022', '\014', '\n', '\004', 'L', 'i', 's', 't', '\030', '\002', ' ', '\003', '(', '\r', '\"', '%', '\n', '\004', 
  'S', 'i', 'g', 'n', '\022', '\013', '\n', '\003', 'D', 'a', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'A', 'w', 'a', 'r', 
  'd', 'D', 'a', 'y', '\030', '\002', ' ', '\001', '(', '\r', '\"', '\304', '\001', '\n', '\014', 'C', 'S', 'D', 'T', 'S', 'i', 'g', 'n', 'D', 'a', 
  't', 'a', '\022', '\033', '\n', '\010', 'S', 'i', 'g', 'n', 'L', 'i', 's', 't', '\030', '\001', ' ', '\003', '(', '\013', '2', '\t', '.', 'm', 's', 
  'g', '.', 'S', 'i', 'g', 'n', '\022', '\025', '\n', '\r', 'T', 'o', 'd', 'a', 'y', 'A', 'w', 'a', 'r', 'd', 'D', 'a', 'y', '\030', '\002', 
  ' ', '\001', '(', '\r', '\022', '\022', '\n', '\n', 'S', 'h', 'a', 'r', 'e', 'C', 'o', 'u', 'n', 't', '\030', '\003', ' ', '\001', '(', '\r', '\022', 
  '\022', '\n', '\n', 'S', 'h', 'a', 'r', 'e', 'A', 'w', 'a', 'r', 'd', '\030', '\004', ' ', '\003', '(', '\r', '\022', '\013', '\n', '\003', 'F', 'i', 
  't', '\030', '\005', ' ', '\003', '(', '\r', '\022', '\r', '\n', '\005', 'A', 'v', 'o', 'i', 'd', '\030', '\006', ' ', '\003', '(', '\r', '\022', '\022', '\n', 
  '\n', 'L', 'u', 'c', 'k', 'y', 'C', 'h', 'e', 's', 's', '\030', '\007', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 'F', 'o', 'r', 't', 
  'u', 'n', 'e', 'P', 'r', 'o', 'v', 'e', 'r', 'b', '\030', '\010', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'F', 'i', 't', 'A', 'v', 
  'o', 'i', 'd', '\030', '\t', ' ', '\001', '(', '\r', '\"', 'P', '\n', '\r', 'M', 'a', 't', 'c', 'h', 'T', 'e', 'a', 'm', 'D', 'a', 't', 
  'a', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\005', '\022', '\r', '\n', '\005', 'C', 'o', 'u', 'n', 't', '\030', '\002', ' ', 
  '\001', '(', '\005', '\022', '\023', '\n', '\013', 'S', 't', 'a', 'r', 't', 'T', 'e', 'a', 'm', 'I', 'd', '\030', '\003', ' ', '\001', '(', '\r', '\022', 
  '\017', '\n', '\007', 'E', 'n', 'd', 'T', 'i', 'm', 'e', '\030', '\004', ' ', '\001', '(', '\003', '\"', '\267', '\002', '\n', '\023', 'C', 'S', 'D', 'T', 
  'R', 'e', 'c', 'o', 'm', 'm', 'e', 'n', 'd', 'P', 'l', 'a', 'y', 'e', 'r', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', 
  '(', '\t', '\022', '\013', '\n', '\003', 'C', 'u', 'p', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'H', 'e', 'a', 'd', 'P', 'i', 
  'c', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\014', '\n', '\004', 'N', 'a', 'm', 'e', '\030', '\004', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 
  'S', 'c', 'e', 'n', 'e', '\030', '\005', ' ', '\001', '(', '\r', '\022', '\023', '\n', '\013', 'C', 'h', 'e', 's', 's', 'P', 'l', 'a', 'y', 'e', 
  'r', '\030', '\006', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 'R', 'e', 'c', 'o', 'm', 'm', 'e', 'n', 'd', 'S', 'c', 'o', 'r', 'e', 
  '\030', '\007', ' ', '\001', '(', '\r', '\022', '\024', '\n', '\014', 'H', 'e', 'a', 'd', 'P', 'i', 'c', 'F', 'r', 'a', 'm', 'e', '\030', '\010', ' ', 
  '\001', '(', '\r', '\022', '/', '\n', '\020', 'O', 'b', 's', 'e', 'r', 'v', 'e', 'P', 'r', 'i', 'v', 'i', 'l', 'e', 'g', 'e', '\030', '\t', 
  ' ', '\001', '(', '\016', '2', '\025', '.', 'm', 's', 'g', '.', 'O', 'B', 'S', 'E', 'R', 'V', 'E', 'P', 'R', 'I', 'V', 'I', 'L', 'E', 
  'G', 'E', '\022', '\'', '\n', '\014', 'P', 'l', 'a', 't', 'F', 'o', 'r', 'm', 'T', 'y', 'p', 'e', '\030', '\n', ' ', '\001', '(', '\016', '2', 
  '\021', '.', 'm', 's', 'g', '.', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', 'T', 'Y', 'P', 'E', '\022', '\017', '\n', '\007', 'P', 's', '4', 
  'O', 'n', 'l', 'y', '\030', '\013', ' ', '\001', '(', '\010', '\022', '+', '\n', '\014', 'R', 'e', 's', 't', 'r', 'i', 'c', 't', 'T', 'y', 'p', 
  'e', '\030', '\014', ' ', '\001', '(', '\016', '2', '\025', '.', 'm', 's', 'g', '.', 'U', 's', 'e', 'r', 'R', 'e', 's', 't', 'r', 'i', 'c', 
  't', 'T', 'y', 'p', 'e', '\"', '\265', '\001', '\n', '\020', 'C', 'S', 'D', 'T', 'T', 'h', 'i', 'r', 'd', 'P', 'v', 'p', 'I', 'n', 'f', 
  'o', '\022', '\n', '\n', '\002', 'I', 'D', '\030', '\001', ' ', '\001', '(', '\004', '\022', '\r', '\n', '\005', 'T', 'i', 't', 'l', 'e', '\030', '\002', ' ', 
  '\001', '(', '\t', '\022', '\017', '\n', '\007', 'C', 'o', 'n', 't', 'e', 'n', 't', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\016', '\n', '\006', 'B', 
  'i', 'g', 'P', 'i', 'c', '\030', '\004', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'S', 'm', 'a', 'l', 'l', 'P', 'i', 'c', '\030', '\005', 
  ' ', '\001', '(', '\t', '\022', '\025', '\n', '\r', 'R', 'e', 'c', 'o', 'm', 'm', 'e', 'n', 'd', 'I', 'c', 'o', 'n', '\030', '\006', ' ', '\001', 
  '(', '\t', '\022', '\024', '\n', '\014', 'P', 'v', 'p', 'S', 't', 'a', 'r', 't', 'T', 'i', 'm', 'e', '\030', '\007', ' ', '\001', '(', '\003', '\022', 
  '\022', '\n', '\n', 'P', 'v', 'p', 'E', 'n', 'd', 'T', 'i', 'm', 'e', '\030', '\010', ' ', '\001', '(', '\003', '\022', '\022', '\n', '\n', 'P', 'r', 
  'e', 'S', 'h', 'o', 'w', 'P', 'i', 'c', '\030', '\t', ' ', '\001', '(', '\t', '\"', '\215', '\002', '\n', '\024', 'C', 'S', 'D', 'T', 'R', 'e', 
  'c', 'o', 'm', 'm', 'e', 'n', 'd', 'P', 'v', 'p', 'I', 'n', 'f', 'o', '\022', ',', '\n', '\n', 'P', 'l', 'a', 'y', 'e', 'r', 'I', 
  'n', 'f', 'o', '\030', '\001', ' ', '\001', '(', '\013', '2', '\030', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'R', 'e', 'c', 'o', 'm', 
  'm', 'e', 'n', 'd', 'P', 'l', 'a', 'y', 'e', 'r', '\022', '\r', '\n', '\005', 'P', 'v', 'p', 'I', 'd', '\030', '\002', ' ', '\001', '(', '\004', 
  '\022', '\024', '\n', '\014', 'O', 'b', 's', 'e', 'r', 'v', 'e', 'C', 'o', 'u', 'n', 't', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\021', '\n', 
  '\t', 'S', 't', 'a', 'r', 't', 'T', 'i', 'm', 'e', '\030', '\004', ' ', '\001', '(', '\003', '\022', '\032', '\n', '\004', 'M', 'o', 'd', 'e', '\030', 
  '\005', ' ', '\001', '(', '\016', '2', '\014', '.', 'm', 's', 'g', '.', 'P', 'V', 'P', 'M', 'O', 'D', 'E', '\022', '\'', '\n', '\n', 'T', 'o', 
  'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', '\030', '\006', ' ', '\001', '(', '\013', '2', '\023', '.', 'm', 's', 'g', '.', 'T', 'o', 'u', 'r', 
  'n', 'a', 'm', 'e', 'n', 't', 'D', 'e', 's', 'c', '\022', '\022', '\n', '\n', 'T', 'h', 'i', 'r', 'd', 'P', 'v', 'p', 'I', 'D', '\030', 
  '\007', ' ', '\001', '(', '\004', '\022', '\017', '\n', '\007', 'S', 'u', 'b', 'M', 'o', 'd', 'e', '\030', '\010', ' ', '\001', '(', '\r', '\022', '%', '\n', 
  '\r', 'A', 'u', 't', 'h', 'o', 'r', 'i', 't', 'y', 'D', 'a', 't', 'a', '\030', '\t', ' ', '\001', '(', '\013', '2', '\016', '.', 'm', 's', 
  'g', '.', 'A', 'u', 't', 'h', 'o', 'r', 'i', 't', 'y', '\"', ']', '\n', '\n', 'W', 'x', 'V', 'V', 'i', 'p', 'D', 'a', 't', 'a', 
  '\022', '\r', '\n', '\005', 'L', 'e', 'v', 'e', 'l', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\025', '\n', '\r', 'W', 'e', 'e', 'k', 'l', 'y', 
  'T', 'A', 'w', 'a', 'r', 'd', 'T', '\030', '\002', ' ', '\001', '(', '\003', '\022', '\024', '\n', '\014', 'D', 'a', 'i', 'l', 'y', 'V', 'A', 'w', 
  'a', 'r', 'd', 'T', '\030', '\003', ' ', '\001', '(', '\003', '\022', '\023', '\n', '\013', 'D', 'a', 'i', 'l', 'y', 'A', 'w', 'a', 'r', 'd', 'T', 
  '\030', '\004', ' ', '\001', '(', '\003', '\"', '7', '\n', '\020', 'C', 'S', 'D', 'T', 'W', 'x', 'R', 'e', 'd', 'P', 'k', 't', 'I', 't', 'e', 
  'm', '\022', '\021', '\n', '\t', 'R', 'e', 'd', 'P', 'k', 't', 'I', 'd', 'x', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'R', 
  'e', 'd', 'P', 'k', 't', 'I', 'd', '\030', '\002', ' ', '\001', '(', '\r', '\"', '9', '\n', '\023', 'C', 'S', 'D', 'T', 'W', 'x', 'R', 'e', 
  'd', 'P', 'k', 't', 'P', 'r', 'o', 'f', 'i', 'l', 'e', '\022', '\020', '\n', '\010', 'S', 'e', 'l', 'f', 'R', 'a', 'n', 'k', '\030', '\001', 
  ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'S', 'e', 'l', 'f', 'L', 'i', 'k', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\"', 'L', '\n', 
  '\022', 'C', 'S', 'D', 'T', 'W', 'x', 'V', 'V', 'i', 'p', 'R', 'a', 'n', 'k', 'I', 't', 'e', 'm', '\022', '\013', '\n', '\003', 'U', 'I', 
  'd', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'N', 'a', 'm', 'e', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 
  'V', 'L', 'v', 'l', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'L', 'i', 'k', 'e', 's', '\030', '\004', ' ', '\001', '(', '\r', 
  '\"', '(', '\n', '\014', 'C', 'S', 'D', 'T', 'S', 'l', 'o', 't', 'I', 'n', 'f', 'o', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', 
  '\001', '(', '\t', '\022', '\014', '\n', '\004', 'S', 'l', 'o', 't', '\030', '\002', ' ', '\001', '(', '\r', '\"', ':', '\n', '\016', 'C', 'S', 'D', 'T', 
  'R', 'e', 'd', 'P', 'k', 't', 'D', 'a', 't', 'a', '\022', '\013', '\n', '\003', 'U', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\014', 
  '\n', '\004', 'N', 'a', 'm', 'e', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'A', 'w', 'a', 'r', 'd', '\030', '\003', ' ', '\001', 
  '(', '\r', '\"', 'V', '\n', '\016', 'C', 'S', 'D', 'T', 'R', 'e', 'd', 'P', 'k', 't', 'I', 'n', 'f', 'o', '\022', '\020', '\n', '\010', 'R', 
  'e', 'd', 'P', 'k', 't', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'R', 'a', 'n', 'k', 'V', 'e', 'r', '\030', 
  '\002', ' ', '\001', '(', '\003', '\022', '!', '\n', '\004', 'R', 'a', 'n', 'k', '\030', '\003', ' ', '\003', '(', '\013', '2', '\023', '.', 'm', 's', 'g', 
  '.', 'C', 'S', 'D', 'T', 'R', 'e', 'd', 'P', 'k', 't', 'D', 'a', 't', 'a', '\"', 'R', '\n', '\n', 'S', 'w', 'i', 't', 'c', 'h', 
  'I', 't', 'e', 'm', '\022', '#', '\n', '\n', 'S', 'w', 'i', 't', 'c', 'h', 'T', 'y', 'p', 'e', '\030', '\001', ' ', '\001', '(', '\016', '2', 
  '\017', '.', 'm', 's', 'g', '.', 'S', 'W', 'I', 'T', 'C', 'H', 'T', 'Y', 'P', 'E', '\022', '\016', '\n', '\006', 'F', 'o', 'r', 'b', 'i', 
  'd', '\030', '\002', ' ', '\001', '(', '\010', '\022', '\017', '\n', '\007', 'E', 'n', 'd', 'T', 'i', 'm', 'e', '\030', '\003', ' ', '\001', '(', '\003', '\"', 
  'Y', '\n', '\r', 'C', 'r', 'e', 'd', 'i', 't', 'C', 'f', 'g', 'I', 't', 'e', 'm', '\022', '\r', '\n', '\005', 'A', 'c', 't', 'I', 'd', 
  '\030', '\001', ' ', '\001', '(', '\005', '\022', '\023', '\n', '\013', 'T', 'h', 'r', 'e', 's', 'h', 'o', 'l', 'd', 'H', 'i', '\030', '\002', ' ', '\001', 
  '(', '\005', '\022', '\023', '\n', '\013', 'T', 'h', 'r', 'e', 's', 'h', 'o', 'l', 'd', 'L', 'o', '\030', '\003', ' ', '\001', '(', '\005', '\022', '\017', 
  '\n', '\007', 'L', 'i', 'm', 'i', 't', 'L', 'v', '\030', '\004', ' ', '\001', '(', '\005', '\"', '\204', '\001', '\n', '\016', 'C', 'S', 'D', 'T', 'P', 
  'u', 'n', 'i', 's', 'h', 'm', 'e', 'n', 't', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\"', '\n', '\005', 
  'T', 'y', 'p', 'e', 's', '\030', '\002', ' ', '\003', '(', '\016', '2', '\023', '.', 'm', 's', 'g', '.', 'P', 'U', 'N', 'I', 'S', 'H', 'M', 
  'E', 'N', 'T', 'T', 'Y', 'P', 'E', '\022', '\027', '\n', '\017', 'E', 'x', 'e', 'c', 'u', 't', 'e', 'D', 'e', 'a', 'd', 'l', 'i', 'n', 
  'e', '\030', '\003', ' ', '\001', '(', '\003', '\022', ')', '\n', '\010', 'T', 'r', 'i', 'g', 'g', 'e', 'r', 's', '\030', '\004', ' ', '\003', '(', '\016', 
  '2', '\027', '.', 'm', 's', 'g', '.', 'P', 'U', 'N', 'I', 'S', 'H', 'M', 'E', 'N', 'T', 'B', 'E', 'H', 'A', 'V', 'I', 'O', 'R', 
  '\"', '0', '\n', '\n', 'C', 'S', 'D', 'T', 'P', 'l', 'a', 'y', 'e', 'r', '\022', '\020', '\n', '\010', 'P', 'l', 'a', 'y', 'e', 'r', 'I', 
  'd', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'U', 's', 'e', 'r', 'N', 'a', 'm', 'e', '\030', '\002', ' ', '\001', '(', '\t', 
  '\"', 'T', '\n', '\023', 'C', 'S', 'D', 'T', 'B', 'r', 'i', 'e', 'f', 'P', 'u', 'n', 'i', 's', 'h', 'm', 'e', 'n', 't', '\022', '!', 
  '\n', '\010', 'U', 's', 'e', 'r', 'N', 'a', 'm', 'e', '\030', '\001', ' ', '\003', '(', '\013', '2', '\017', '.', 'm', 's', 'g', '.', 'C', 'S', 
  'D', 'T', 'P', 'l', 'a', 'y', 'e', 'r', '\022', '\032', '\n', '\022', 'P', 'u', 'n', 'i', 's', 'h', 'm', 'e', 'n', 't', 'D', 'e', 'a', 
  'd', 'l', 'i', 'n', 'e', '\030', '\002', ' ', '\001', '(', '\003', '\"', 'o', '\n', '\021', 'P', 'l', 'a', 'y', 'e', 'r', 'C', 'o', 'n', 'f', 
  'i', 'r', 'm', 'I', 'n', 'f', 'o', '\022', '\020', '\n', '\010', 'P', 'l', 'a', 'y', 'e', 'r', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\t', 
  '\022', '\017', '\n', '\007', 'H', 'e', 'a', 'd', 'P', 'i', 'c', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\024', '\n', '\014', 'H', 'e', 'a', 'd', 
  'P', 'i', 'c', 'F', 'r', 'a', 'm', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'U', 's', 'e', 'r', 'N', 'a', 'm', 
  'e', '\030', '\004', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'I', 's', 'R', 'o', 'b', 'o', 't', '\030', '\005', ' ', '\001', '(', '\010', '\"', 
  '-', '\n', '\n', 'A', 'n', 's', 'w', 'e', 'r', 'D', 'a', 't', 'a', '\022', '\r', '\n', '\005', 'I', 'n', 'd', 'e', 'x', '\030', '\001', ' ', 
  '\001', '(', '\r', '\022', '\020', '\n', '\010', 'C', 'o', 'n', 't', 'e', 'n', 't', 's', '\030', '\002', ' ', '\003', '(', '\t', '\"', '}', '\n', '\t', 
  'V', 'i', 'd', 'e', 'o', 'I', 'n', 'f', 'o', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\014', '\n', '\004', 
  'N', 'a', 'm', 'e', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\035', '\n', '\004', 'T', 'y', 'p', 'e', '\030', '\003', ' ', '\001', '(', '\016', '2', 
  '\017', '.', 'm', 's', 'g', '.', 'V', 'I', 'D', 'E', 'O', '_', 'T', 'Y', 'P', 'E', '\022', '\016', '\n', '\006', 'P', 'i', 'c', 'U', 'r', 
  'l', '\030', '\004', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 'C', 'o', 'n', 't', 'e', 'n', 't', 'U', 'r', 'l', '\030', '\005', ' ', '\001', 
  '(', '\t', '\022', '\023', '\n', '\013', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'K', 'e', 'y', '\030', '\006', ' ', '\001', '(', '\010', '\"', '\\', 
  '\n', '\021', 'C', 'S', 'D', 'T', 'A', 'd', 'd', 'i', 'c', 't', 'i', 'o', 'n', 'I', 'n', 'f', 'o', '\022', '\027', '\n', '\017', 'I', 's', 
  'A', 'u', 't', 'h', 'A', 'd', 'd', 'i', 'c', 't', 'i', 'o', 'n', '\030', '\001', ' ', '\001', '(', '\010', '\022', '\032', '\n', '\022', 'A', 'u', 
  't', 'h', 'A', 'd', 'd', 'i', 'c', 't', 'i', 'o', 'n', 'T', 'o', 'k', 'e', 'n', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\022', '\n', 
  '\n', 'I', 's', 'V', 'e', 'r', 'i', 'f', 'i', 'e', 'd', '\030', '\003', ' ', '\001', '(', '\010', '\"', '\243', '\001', '\n', '\017', 'K', 'r', 'A', 
  'd', 'd', 'i', 'c', 't', 'i', 'o', 'n', 'I', 'n', 'f', 'o', '\022', '\021', '\n', '\t', 'L', 'o', 'g', 'i', 'n', 'T', 'i', 'm', 'e', 
  '\030', '\001', ' ', '\001', '(', '\003', '\022', '\024', '\n', '\014', 'I', 's', 'C', 'h', 'e', 'c', 'k', 'A', 'd', 'd', 'i', 'c', '\030', '\002', ' ', 
  '\001', '(', '\010', '\022', '\026', '\n', '\016', 'S', 't', 'a', 'r', 't', 'L', 'i', 'm', 'i', 't', 'T', 'i', 'm', 'e', '\030', '\003', ' ', '\001', 
  '(', '\003', '\022', '\024', '\n', '\014', 'E', 'n', 'd', 'L', 'i', 'm', 'i', 't', 'T', 'i', 'm', 'e', '\030', '\004', ' ', '\001', '(', '\003', '\022', 
  '\022', '\n', '\n', 'C', 'o', 'u', 'n', 't', 'd', 'o', 'w', 'n', '1', '\030', '\005', ' ', '\001', '(', '\003', '\022', '\022', '\n', '\n', 'C', 'o', 
  'u', 'n', 't', 'd', 'o', 'w', 'n', '2', '\030', '\006', ' ', '\001', '(', '\003', '\022', '\021', '\n', '\t', 'd', 'u', 'r', 'a', 'n', 't', 'i', 
  'o', 'n', '\030', '\007', ' ', '\001', '(', '\003', '\"', '\261', '\001', '\n', '\013', 'M', 'u', 'l', 't', 'i', 'P', 'l', 'a', 'y', 'e', 'r', '\022', 
  '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'N', 'a', 'm', 'e', '\030', '\002', ' ', '\001', '(', '\t', 
  '\022', '\017', '\n', '\007', 'H', 'e', 'a', 'd', 'P', 'i', 'c', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\024', '\n', '\014', 'H', 'e', 'a', 'd', 
  'P', 'i', 'c', 'F', 'r', 'a', 'm', 'e', '\030', '\004', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'L', 'e', 'v', 'e', 'l', '\030', '\005', 
  ' ', '\001', '(', '\r', '\022', '\013', '\n', '\003', 'M', 'M', 'R', '\030', '\006', ' ', '\001', '(', '\r', '\022', '\017', '\n', '\007', 'D', 'i', 'a', 'm', 
  'o', 'n', 'd', '\030', '\007', ' ', '\001', '(', '\r', '\022', '\016', '\n', '\006', 'R', 'e', 'g', 'i', 'o', 'n', '\030', '\010', ' ', '\001', '(', '\t', 
  '\022', '\r', '\n', '\005', 'M', 'o', 'n', 'e', 'y', '\030', '\t', ' ', '\001', '(', '\r', '\022', '\025', '\n', '\r', 'P', 'a', 's', 's', 'p', 'o', 
  'r', 't', 'L', 'e', 'v', 'e', 'l', '\030', '\n', ' ', '\001', '(', '\r', '\"', '/', '\n', '\016', 'C', 'S', 'D', 'T', 'B', 'a', 'n', 'n', 
  'e', 'r', 'I', 'n', 'f', 'o', '\022', '\035', '\n', '\004', 'D', 'a', 't', 'a', '\030', '\001', ' ', '\003', '(', '\013', '2', '\017', '.', 'm', 's', 
  'g', '.', 'C', 'S', 'D', 'T', 'B', 'a', 'n', 'n', 'e', 'r', '\"', '\206', '\003', '\n', '\n', 'C', 'S', 'D', 'T', 'B', 'a', 'n', 'n', 
  'e', 'r', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\003', '\022', '\016', '\n', '\006', 'P', 'i', 'c', 'U', 'r', 'l', '\030', 
  '\002', ' ', '\001', '(', '\t', '\022', '#', '\n', '\n', 'B', 'a', 'n', 'n', 'e', 'r', 'T', 'y', 'p', 'e', '\030', '\003', ' ', '\001', '(', '\016', 
  '2', '\017', '.', 'm', 's', 'g', '.', 'B', 'A', 'N', 'N', 'E', 'R', 'T', 'Y', 'P', 'E', '\022', '\037', '\n', '\010', 'S', 'k', 'i', 'p', 
  'T', 'y', 'p', 'e', '\030', '\004', ' ', '\001', '(', '\016', '2', '\r', '.', 'm', 's', 'g', '.', 'S', 'K', 'I', 'P', 'T', 'Y', 'P', 'E', 
  '\022', '\020', '\n', '\010', 'S', 'k', 'i', 'p', 'N', 'a', 'm', 'e', '\030', '\005', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'S', 'k', 'i', 
  'p', 'T', 'a', 'p', '\030', '\006', ' ', '\001', '(', '\r', '\022', '\023', '\n', '\013', 'M', 'a', 'l', 'l', 'G', 'o', 'o', 'd', 's', 'I', 'd', 
  '\030', '\007', ' ', '\001', '(', '\r', '\022', '\023', '\n', '\013', 'C', 'o', 'u', 'n', 't', 'r', 'y', 'L', 'i', 's', 't', '\030', '\010', ' ', '\003', 
  '(', '\t', '\022', '\025', '\n', '\r', 'S', 'h', 'o', 'w', 'B', 'e', 'g', 'i', 'n', 'T', 'i', 'm', 'e', '\030', '\t', ' ', '\001', '(', '\003', 
  '\022', '\023', '\n', '\013', 'S', 'h', 'o', 'w', 'E', 'n', 'd', 'T', 'i', 'm', 'e', '\030', '\n', ' ', '\001', '(', '\003', '\022', '\016', '\n', '\006', 
  'Z', 'o', 'n', 'e', 'I', 'd', '\030', '\013', ' ', '\003', '(', '\r', '\022', '\024', '\n', '\014', 'D', 'o', 'w', 'n', 'l', 'o', 'a', 'd', 'L', 
  'i', 's', 't', '\030', '\014', ' ', '\003', '(', '\t', '\022', '\'', '\n', '\014', 'P', 'l', 'a', 't', 'f', 'o', 'r', 'm', 'L', 'i', 's', 't', 
  '\030', '\r', ' ', '\003', '(', '\016', '2', '\021', '.', 'm', 's', 'g', '.', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', 'T', 'Y', 'P', 'E', 
  '\022', '\021', '\n', '\t', 'P', 'C', 'S', 'k', 'i', 'p', 'U', 'r', 'l', '\030', '\016', ' ', '\001', '(', '\t', '\022', '\024', '\n', '\014', 'H', 'a', 
  'l', 'l', 'M', 'o', 'd', 'e', 'L', 'i', 's', 't', '\030', '\017', ' ', '\003', '(', '\r', '\022', '\014', '\n', '\004', 'S', 'o', 'r', 't', '\030', 
  '\020', ' ', '\001', '(', '\003', '\022', '\027', '\n', '\017', 'E', 'x', 'c', 'l', 'u', 'd', 'e', 'D', 'o', 'w', 'n', 'l', 'o', 'a', 'd', '\030', 
  '\021', ' ', '\003', '(', '\t', '\"', '\361', '\004', '\n', '\016', 'C', 'S', 'D', 'T', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', '\022', 
  '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\004', '\022', '\023', '\n', '\013', 'E', 'n', 'r', 'o', 'l', 'l', 'C', 'o', 'u', 'n', 
  't', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\016', '\n', '\006', 'E', 'n', 'r', 'o', 'l', 'l', '\030', '\003', ' ', '\001', '(', '\010', '\022', '\013', 
  '\n', '\003', 'O', 'u', 't', '\030', '\004', ' ', '\001', '(', '\010', '\022', '\021', '\n', '\t', 'J', 'o', 'i', 'n', 'C', 'o', 'u', 'n', 't', '\030', 
  '\005', ' ', '\001', '(', '\r', '\022', ')', '\n', '\007', 'C', 'l', 'a', 's', 's', 'e', 's', '\030', '\006', ' ', '\003', '(', '\013', '2', '\030', '.', 
  'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', 'C', 'l', 'a', 's', 's', '\022', '\r', 
  '\n', '\005', 'R', 'o', 'u', 'n', 'd', '\030', '\007', ' ', '\001', '(', '\004', '\022', '\022', '\n', '\n', 'L', 'a', 's', 't', 'G', 'a', 'm', 'e', 
  'I', 'd', '\030', '\010', ' ', '\001', '(', '\004', '\022', '\023', '\n', '\013', 'E', 'n', 'r', 'o', 'l', 'l', 'C', 'l', 'a', 's', 's', '\030', '\t', 
  ' ', '\001', '(', '\004', '\022', '\020', '\n', '\010', 'G', 'r', 'o', 'u', 'p', 'I', 'd', 'x', '\030', '\n', ' ', '\001', '(', '\005', '\022', '3', '\n', 
  '\010', 'R', 'a', 'n', 'k', 'I', 'n', 'f', 'o', '\030', '\013', ' ', '\003', '(', '\013', '2', '!', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 
  'T', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', '.', 'R', 'a', 'n', 'k', 'I', 'n', 'f', 'o', 'E', 'n', 't', 'r', 'y', 
  '\022', '\025', '\n', '\r', 'P', 'o', 'i', 'n', 't', 'A', 'w', 'a', 'r', 'd', 'G', 'e', 't', '\030', '\014', ' ', '\003', '(', '\r', '\022', '\016', 
  '\n', '\006', 'B', 'a', 't', 't', 'l', 'e', '\030', '\r', ' ', '\001', '(', '\010', '\022', '/', '\n', '\006', 'P', 'o', 'i', 'n', 't', 's', '\030', 
  '\016', ' ', '\003', '(', '\013', '2', '\037', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 
  't', '.', 'P', 'o', 'i', 'n', 't', 's', 'E', 'n', 't', 'r', 'y', '\022', '\026', '\n', '\016', 'C', 'h', 'a', 'l', 'l', 'e', 'n', 'g', 
  'e', 'A', 'g', 'a', 'i', 'n', '\030', '\017', ' ', '\001', '(', '\010', '\022', '9', '\n', '\013', 'R', 'o', 'u', 'n', 'd', 'P', 'o', 'i', 'n', 
  't', 's', '\030', '\020', ' ', '\003', '(', '\013', '2', '$', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'T', 'o', 'u', 'r', 'n', 'a', 
  'm', 'e', 'n', 't', '.', 'R', 'o', 'u', 'n', 'd', 'P', 'o', 'i', 'n', 't', 's', 'E', 'n', 't', 'r', 'y', '\022', '%', '\n', '\006', 
  'S', 't', 'a', 't', 'u', 's', '\030', '\021', ' ', '\001', '(', '\016', '2', '\025', '.', 'm', 's', 'g', '.', 'T', 'O', 'U', 'R', 'N', 'A', 
  'M', 'E', 'N', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '\032', '/', '\n', '\r', 'R', 'a', 'n', 'k', 'I', 'n', 'f', 'o', 'E', 'n', 't', 
  'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\004', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', 
  '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\032', '-', '\n', '\013', 'P', 'o', 'i', 'n', 't', 's', 'E', 'n', 't', 'r', 'y', '\022', 
  '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', 
  '(', '\r', ':', '\002', '8', '\001', '\032', '2', '\n', '\020', 'R', 'o', 'u', 'n', 'd', 'P', 'o', 'i', 'n', 't', 's', 'E', 'n', 't', 'r', 
  'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\004', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', 
  ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\"', '\353', '\001', '\n', '\016', 'C', 'S', 'D', 'T', 'A', 'c', 't', 'D', 'a', 'y', 'S', 'i', 
  'g', 'n', '\022', '1', '\n', '\007', 'S', 'i', 'g', 'n', 'D', 'a', 'y', '\030', '\001', ' ', '\003', '(', '\013', '2', ' ', '.', 'm', 's', 'g', 
  '.', 'C', 'S', 'D', 'T', 'A', 'c', 't', 'D', 'a', 'y', 'S', 'i', 'g', 'n', '.', 'S', 'i', 'g', 'n', 'D', 'a', 'y', 'E', 'n', 
  't', 'r', 'y', '\022', '\014', '\n', '\004', 'L', 'o', 'o', 'p', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\013', '\n', '\003', 'D', 'a', 'y', '\030', 
  '\003', ' ', '\001', '(', '\r', '\022', '\023', '\n', '\013', 'R', 'e', 'S', 'i', 'g', 'n', 'T', 'i', 'm', 'e', 's', '\030', '\004', ' ', '\001', '(', 
  '\r', '\022', '\017', '\n', '\007', 'C', 'a', 'n', 'S', 'i', 'g', 'n', '\030', '\005', ' ', '\001', '(', '\010', '\022', '\032', '\n', '\022', 'C', 'a', 'n', 
  'G', 'e', 't', 'S', 'p', 'e', 'c', 'i', 'a', 'l', 'A', 'w', 'a', 'r', 'd', '\030', '\006', ' ', '\001', '(', '\010', '\032', 'I', '\n', '\014', 
  'S', 'i', 'g', 'n', 'D', 'a', 'y', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', 
  '\022', '(', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\031', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 
  'T', 'A', 'c', 't', 'D', 'a', 'y', 'S', 'i', 'g', 'n', 'D', 'e', 't', 'a', 'i', 'l', ':', '\002', '8', '\001', '\"', 'D', '\n', '\024', 
  'C', 'S', 'D', 'T', 'A', 'c', 't', 'D', 'a', 'y', 'S', 'i', 'g', 'n', 'D', 'e', 't', 'a', 'i', 'l', '\022', '\036', '\n', '\004', 'T', 
  'y', 'p', 'e', '\030', '\001', ' ', '\001', '(', '\016', '2', '\020', '.', 'm', 's', 'g', '.', 'A', 'c', 't', 'S', 'i', 'g', 'n', 'T', 'y', 
  'p', 'e', '\022', '\014', '\n', '\004', 'T', 'i', 'm', 'e', '\030', '\002', ' ', '\001', '(', '\003', '\"', '_', '\n', '\017', 'C', 'S', 'D', 'T', 'G', 
  'D', 'C', 'o', 'm', 'm', 'o', 'n', 'B', 'i', 'n', '\022', '\014', '\n', '\004', 'N', 'a', 'm', 'e', '\030', '\001', ' ', '\001', '(', '\t', '\022', 
  '\016', '\n', '\006', 'M', 'd', '5', 's', 'u', 'm', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\037', '\n', '\007', 'C', 'o', 'n', 'f', 'T', 'y', 
  'p', '\030', '\003', ' ', '\001', '(', '\016', '2', '\016', '.', 'm', 's', 'g', '.', 'G', 'D', 'B', 'i', 'n', 'T', 'y', 'p', 'e', '\022', '\r', 
  '\n', '\005', 'D', 'a', 't', 'a', 's', '\030', '\004', ' ', '\001', '(', '\014', '\"', '\311', '\001', '\n', '\023', 'C', 'S', 'D', 'T', 'T', 'o', 'u', 
  'r', 'n', 'a', 'm', 'e', 'n', 't', 'C', 'l', 'a', 's', 's', '\022', '\017', '\n', '\007', 'C', 'l', 'a', 's', 's', 'I', 'd', '\030', '\001', 
  ' ', '\001', '(', '\004', '\022', '4', '\n', '\006', 'G', 'r', 'o', 'u', 'p', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '$', '.', 'm', 's', 
  'g', '.', 'C', 'S', 'D', 'T', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', 'C', 'l', 'a', 's', 's', '.', 'G', 'r', 'o', 
  'u', 'p', 's', 'E', 'n', 't', 'r', 'y', '\022', '\026', '\n', '\016', 'M', 'a', 'x', 'P', 'l', 'a', 'y', 'e', 'r', 'C', 'o', 'u', 'n', 
  't', '\030', '\003', ' ', '\001', '(', '\005', '\022', '\016', '\n', '\006', 'C', 'a', 'n', 'c', 'e', 'l', '\030', '\004', ' ', '\001', '(', '\010', '\032', 'C', 
  '\n', '\013', 'G', 'r', 'o', 'u', 'p', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', 
  '\r', '\022', '#', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\024', '.', 'm', 's', 'g', '.', 'C', 'S', 
  'D', 'T', 'B', 'a', 't', 't', 'l', 'e', 'G', 'r', 'o', 'u', 'p', ':', '\002', '8', '\001', '\"', '\246', '\002', '\n', '\017', 'C', 'S', 'D', 
  'T', 'B', 'a', 't', 't', 'l', 'e', 'G', 'r', 'o', 'u', 'p', '\022', '2', '\n', '\007', 'P', 'l', 'a', 'y', 'e', 'r', 's', '\030', '\001', 
  ' ', '\003', '(', '\013', '2', '!', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'B', 'a', 't', 't', 'l', 'e', 'G', 'r', 'o', 'u', 
  'p', '.', 'P', 'l', 'a', 'y', 'e', 'r', 's', 'E', 'n', 't', 'r', 'y', '\022', '\026', '\n', '\016', 'L', 'a', 's', 't', 'P', 'v', 'p', 
  'E', 'n', 'd', 'T', 'i', 'm', 'e', '\030', '\002', ' ', '\001', '(', '\003', '\022', '\016', '\n', '\006', 'G', 'a', 'm', 'e', 'I', 'D', '\030', '\003', 
  ' ', '\001', '(', '\004', '\022', '\022', '\n', '\n', 'I', 's', 'F', 'i', 'g', 'h', 't', 'i', 'n', 'g', '\030', '\004', ' ', '\001', '(', '\010', '\022', 
  '\017', '\n', '\007', 'R', 'o', 'u', 'n', 'd', 'I', 'D', '\030', '\005', ' ', '\001', '(', '\004', '\022', '2', '\n', '\007', 'G', 'a', 'm', 'e', 'I', 
  'D', 's', '\030', '\006', ' ', '\003', '(', '\013', '2', '!', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'B', 'a', 't', 't', 'l', 'e', 
  'G', 'r', 'o', 'u', 'p', '.', 'G', 'a', 'm', 'e', 'I', 'D', 's', 'E', 'n', 't', 'r', 'y', '\032', '.', '\n', '\014', 'P', 'l', 'a', 
  'y', 'e', 'r', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\r', '\n', 
  '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\004', ':', '\002', '8', '\001', '\032', '.', '\n', '\014', 'G', 'a', 'm', 'e', 'I', 
  'D', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'v', 
  'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\004', ':', '\002', '8', '\001', '\"', 'a', '\n', '\r', 'C', 'S', 'D', 'T', 'E', 'n', 'r', 
  'o', 'l', 'l', 'E', 'n', 'd', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\004', '\022', '\025', '\n', '\r', 'C', 'a', 'n', 
  'c', 'e', 'l', 'C', 'l', 'a', 's', 's', 'e', 's', '\030', '\002', ' ', '\003', '(', '\004', '\022', '-', '\n', '\013', 'C', 'l', 'a', 's', 's', 
  'G', 'r', 'o', 'u', 'p', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\030', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'T', 'o', 
  'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', 'C', 'l', 'a', 's', 's', '\"', '\205', '\001', '\n', '\021', 'C', 'S', 'D', 'T', 'N', 'e', 'w', 
  'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\004', '\022', '4', '\n', 
  '\007', 'C', 'l', 'a', 's', 's', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '#', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 
  'N', 'e', 'w', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', '.', 'C', 'l', 'a', 's', 's', 'e', 's', 'E', 'n', 't', 'r', 
  'y', '\032', '.', '\n', '\014', 'C', 'l', 'a', 's', 's', 'e', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', 
  '\001', ' ', '\001', '(', '\004', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\005', ':', '\002', '8', '\001', '\"', 
  'a', '\n', '\016', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', 'D', 'e', 's', 'c', '\022', '\024', '\n', '\014', 'T', 'o', 'u', 'r', 
  'n', 'a', 'm', 'e', 'n', 't', 'I', 'D', '\030', '\001', ' ', '\001', '(', '\004', '\022', '\017', '\n', '\007', 'T', 'N', 'C', 'l', 'a', 's', 's', 
  '\030', '\002', ' ', '\001', '(', '\004', '\022', '\022', '\n', '\n', 'G', 'r', 'o', 'u', 'p', 'I', 'n', 'd', 'e', 'x', '\030', '\003', ' ', '\001', '(', 
  '\005', '\022', '\024', '\n', '\014', 'T', 'N', 'C', 'l', 'a', 's', 's', 'R', 'o', 'u', 'n', 'd', '\030', '\004', ' ', '\001', '(', '\004', '\"', '\370', 
  '\001', '\n', '\016', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', 'R', 'o', 'o', 'm', '\022', '\025', '\n', '\r', 'G', 'a', 'm', 'e', 
  'S', 't', 'a', 'r', 't', 'T', 'i', 'm', 'e', '\030', '\001', ' ', '\001', '(', '\004', '\022', '\020', '\n', '\010', 'R', 'e', 'a', 'd', 'y', 'I', 
  'd', 's', '\030', '\002', ' ', '\003', '(', '\t', '\022', '\020', '\n', '\010', 'S', 'e', 'l', 'f', 'S', 'l', 'o', 't', '\030', '\003', ' ', '\001', '(', 
  '\r', '\022', '\'', '\n', '\013', 'P', 'l', 'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', 's', '\030', '\004', ' ', '\003', '(', '\013', '2', '\022', '.', 
  'm', 's', 'g', '.', 'P', 'v', 'p', 'P', 'l', 'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', '\022', '\026', '\n', '\016', 'M', 'a', 'x', 'P', 
  'l', 'a', 'y', 'e', 'r', 'C', 'o', 'u', 'n', 't', '\030', '\005', ' ', '\001', '(', '\005', '\022', '\024', '\n', '\014', 'T', 'o', 'u', 'r', 'n', 
  'a', 'm', 'e', 'n', 't', 'I', 'D', '\030', '\006', ' ', '\001', '(', '\004', '\022', '\017', '\n', '\007', 'C', 'l', 'a', 's', 's', 'I', 'D', '\030', 
  '\007', ' ', '\001', '(', '\004', '\022', '\017', '\n', '\007', 'R', 'o', 'u', 'n', 'd', 'I', 'D', '\030', '\010', ' ', '\001', '(', '\004', '\022', '\022', '\n', 
  '\n', 'G', 'r', 'o', 'u', 'p', 'I', 'n', 'd', 'e', 'x', '\030', '\t', ' ', '\001', '(', '\005', '\022', '\036', '\n', '\006', 'S', 't', 'a', 't', 
  'u', 's', '\030', '\n', ' ', '\001', '(', '\016', '2', '\016', '.', 'm', 's', 'g', '.', 'T', 'e', 'a', 'm', 'S', 't', 'a', 't', 'e', '\"', 
  '\350', '\002', '\n', '\020', 'P', 'l', 'a', 'y', 'e', 'r', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', '\022', '\n', '\n', '\002', 'I', 
  'd', '\030', '\001', ' ', '\001', '(', '\t', '\022', '-', '\n', '\004', 'D', 'a', 't', 'a', '\030', '\002', ' ', '\003', '(', '\013', '2', '\037', '.', 'm', 
  's', 'g', '.', 'P', 'l', 'a', 'y', 'e', 'r', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', '.', 'D', 'a', 't', 'a', 'E', 
  'n', 't', 'r', 'y', '\022', '1', '\n', '\006', 'P', 'o', 'i', 'n', 't', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '!', '.', 'm', 's', 
  'g', '.', 'P', 'l', 'a', 'y', 'e', 'r', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', '.', 'P', 'o', 'i', 'n', 't', 's', 
  'E', 'n', 't', 'r', 'y', '\022', ';', '\n', '\013', 'E', 'n', 'r', 'o', 'l', 'l', 'C', 'o', 'u', 'n', 't', '\030', '\004', ' ', '\003', '(', 
  '\013', '2', '&', '.', 'm', 's', 'g', '.', 'P', 'l', 'a', 'y', 'e', 'r', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', '.', 
  'E', 'n', 'r', 'o', 'l', 'l', 'C', 'o', 'u', 'n', 't', 'E', 'n', 't', 'r', 'y', '\032', 'F', '\n', '\t', 'D', 'a', 't', 'a', 'E', 
  'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\004', '\022', '(', '\n', '\005', 'v', 'a', 'l', 'u', 
  'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\031', '.', 'm', 's', 'g', '.', 'P', 'l', 'a', 'y', 'e', 'r', 'T', 'o', 'u', 'r', 'n', 
  'a', 'm', 'e', 'n', 't', 'D', 'a', 't', 'a', ':', '\002', '8', '\001', '\032', '-', '\n', '\013', 'P', 'o', 'i', 'n', 't', 's', 'E', 'n', 
  't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', 
  '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\032', '2', '\n', '\020', 'E', 'n', 'r', 'o', 'l', 'l', 'C', 'o', 'u', 'n', 't', 
  'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\004', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 
  'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\"', '\336', '\003', '\n', '\024', 'P', 'l', 'a', 'y', 'e', 'r', 'T', 'o', 
  'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', 'D', 'a', 't', 'a', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\004', '\022', 
  '\017', '\n', '\007', 'C', 'l', 'a', 's', 's', 'I', 'd', '\030', '\002', ' ', '\001', '(', '\004', '\022', ';', '\n', '\t', 'G', 'e', 't', 'R', 'e', 
  'w', 'a', 'r', 'd', '\030', '\003', ' ', '\003', '(', '\013', '2', '(', '.', 'm', 's', 'g', '.', 'P', 'l', 'a', 'y', 'e', 'r', 'T', 'o', 
  'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', 'D', 'a', 't', 'a', '.', 'G', 'e', 't', 'R', 'e', 'w', 'a', 'r', 'd', 'E', 'n', 't', 
  'r', 'y', '\022', '5', '\n', '\006', 'P', 'o', 'i', 'n', 't', 's', '\030', '\004', ' ', '\003', '(', '\013', '2', '%', '.', 'm', 's', 'g', '.', 
  'P', 'l', 'a', 'y', 'e', 'r', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', 'D', 'a', 't', 'a', '.', 'P', 'o', 'i', 'n', 
  't', 's', 'E', 'n', 't', 'r', 'y', '\022', '\020', '\n', '\010', 'C', 'u', 'r', 'R', 'o', 'u', 'n', 'd', '\030', '\005', ' ', '\001', '(', '\004', 
  '\022', '\016', '\n', '\006', 'G', 'a', 'm', 'e', 'I', 'd', '\030', '\006', ' ', '\001', '(', '\004', '\022', '\013', '\n', '\003', 'O', 'u', 't', '\030', '\007', 
  ' ', '\001', '(', '\010', '\022', '\022', '\n', '\n', 'S', 'i', 'g', 'n', 'U', 'p', 'T', 'i', 'm', 'e', '\030', '\010', ' ', '\001', '(', '\003', '\022', 
  '1', '\n', '\004', 'D', 'a', 't', 'a', '\030', '\t', ' ', '\003', '(', '\013', '2', '#', '.', 'm', 's', 'g', '.', 'P', 'l', 'a', 'y', 'e', 
  'r', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', 'D', 'a', 't', 'a', '.', 'D', 'a', 't', 'a', 'E', 'n', 't', 'r', 'y', 
  '\022', '\r', '\n', '\005', 'P', 'v', 'p', 'I', 'd', '\030', '\n', ' ', '\001', '(', '\004', '\022', '\022', '\n', '\n', 'P', 'v', 'p', 'E', 'n', 'd', 
  'T', 'i', 'm', 'e', '\030', '\013', ' ', '\001', '(', '\003', '\032', '0', '\n', '\016', 'G', 'e', 't', 'R', 'e', 'w', 'a', 'r', 'd', 'E', 'n', 
  't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', 
  '\030', '\002', ' ', '\001', '(', '\010', ':', '\002', '8', '\001', '\032', '-', '\n', '\013', 'P', 'o', 'i', 'n', 't', 's', 'E', 'n', 't', 'r', 'y', 
  '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', 
  '\001', '(', '\r', ':', '\002', '8', '\001', '\032', ';', '\n', '\t', 'D', 'a', 't', 'a', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 
  'e', 'y', '\030', '\001', ' ', '\001', '(', '\004', '\022', '\035', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\016', 
  '.', 'm', 's', 'g', '.', 'R', 'o', 'u', 'n', 'd', 'D', 'a', 't', 'a', ':', '\002', '8', '\001', '\"', '\224', '\002', '\n', '\t', 'R', 'o', 
  'u', 'n', 'd', 'D', 'a', 't', 'a', '\022', '\r', '\n', '\005', 'R', 'o', 'u', 'n', 'd', '\030', '\001', ' ', '\001', '(', '\004', '\022', '\014', '\n', 
  '\004', 'R', 'a', 'n', 'k', '\030', '\002', ' ', '\001', '(', '\r', '\022', '*', '\n', '\006', 'P', 'o', 'i', 'n', 't', 's', '\030', '\003', ' ', '\003', 
  '(', '\013', '2', '\032', '.', 'm', 's', 'g', '.', 'R', 'o', 'u', 'n', 'd', 'D', 'a', 't', 'a', '.', 'P', 'o', 'i', 'n', 't', 's', 
  'E', 'n', 't', 'r', 'y', '\022', '\022', '\n', '\n', 'F', 'i', 'g', 'h', 't', 'T', 'i', 'm', 'e', 's', '\030', '\004', ' ', '\001', '(', '\r', 
  '\022', '\021', '\n', '\t', 'T', 'o', 't', 'a', 'l', 'R', 'a', 'n', 'k', '\030', '\005', ' ', '\001', '(', '\r', '\022', '\016', '\n', '\006', 'T', 'o', 
  'p', 'C', 'n', 't', '\030', '\006', ' ', '\001', '(', '\r', '\022', '\021', '\n', '\t', 'S', 'e', 'c', 'o', 'n', 'd', 'C', 'n', 't', '\030', '\007', 
  ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'T', 'h', 'i', 'r', 'd', 'C', 'n', 't', '\030', '\010', ' ', '\001', '(', '\r', '\022', '\020', '\n', 
  '\010', 'W', 'i', 'n', 'T', 'i', 'm', 'e', 's', '\030', '\t', ' ', '\001', '(', '\r', '\022', '\021', '\n', '\t', 'L', 'o', 's', 't', 'B', 'l', 
  'o', 'o', 'd', '\030', '\n', ' ', '\001', '(', '\r', '\022', '\016', '\n', '\006', 'D', 'a', 'm', 'a', 'g', 'e', '\030', '\013', ' ', '\001', '(', '\r', 
  '\032', '-', '\n', '\013', 'P', 'o', 'i', 'n', 't', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', 
  '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\"', '\265', '\002', 
  '\n', '\r', 'G', 'u', 'i', 'l', 'd', 'B', 'a', 's', 'e', 'I', 'n', 'f', 'o', '\022', '\n', '\n', '\002', 'I', 'D', '\030', '\001', ' ', '\001', 
  '(', '\t', '\022', '\014', '\n', '\004', 'N', 'a', 'm', 'e', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'S', 'i', 'g', 'n', '\030', 
  '\003', ' ', '\001', '(', '\005', '\022', '\016', '\n', '\006', 'N', 'o', 't', 'i', 'c', 'e', '\030', '\004', ' ', '\001', '(', '\t', '\022', '\025', '\n', '\r', 
  'R', 'e', 'c', 'r', 'u', 'i', 't', 'N', 'o', 't', 'i', 'c', 'e', '\030', '\005', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'T', 'a', 
  'g', 's', '\030', '\006', ' ', '\003', '(', '\005', '\022', '\017', '\n', '\007', 'C', 'o', 'u', 'n', 't', 'r', 'y', '\030', '\007', ' ', '\001', '(', '\t', 
  '\022', '\020', '\n', '\010', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', '\030', '\010', ' ', '\001', '(', '\t', '\022', '\025', '\n', '\r', 'R', 'e', 'q', 
  'u', 'i', 'r', 'e', 'P', 'e', 'r', 'm', 'i', 't', '\030', '\t', ' ', '\001', '(', '\010', '\022', '\022', '\n', '\n', 'R', 'e', 'q', 'u', 'i', 
  'r', 'e', 'C', 'u', 'p', '\030', '\n', ' ', '\001', '(', '\005', '\022', '\023', '\n', '\013', 'M', 'e', 'm', 'b', 'e', 'r', 'C', 'o', 'u', 'n', 
  't', '\030', '\013', ' ', '\001', '(', '\005', '\022', '\020', '\n', '\010', 'P', 'r', 'o', 'v', 'i', 'n', 'c', 'e', '\030', '\014', ' ', '\001', '(', '\r', 
  '\022', '\r', '\n', '\005', 'O', 'w', 'n', 'e', 'r', '\030', '\r', ' ', '\001', '(', '\t', '\022', '\021', '\n', '\t', 'O', 'w', 'n', 'e', 'r', 'N', 
  'a', 'm', 'e', '\030', '\016', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'L', 'e', 'v', 'e', 'l', '\030', '\017', ' ', '\001', '(', '\005', '\022', 
  '\013', '\n', '\003', 'E', 'x', 'p', '\030', '\020', ' ', '\001', '(', '\005', '\022', '\024', '\n', '\014', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'U', 's', 
  'r', 'I', 'D', '\030', '\021', ' ', '\001', '(', '\t', '\"', '\364', '\001', '\n', '\t', 'G', 'u', 'i', 'l', 'd', 'A', 't', 't', 'r', '\022', '\014', 
  '\n', '\004', 'N', 'a', 'm', 'e', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'S', 'i', 'g', 'n', '\030', '\002', ' ', '\001', '(', 
  '\005', '\022', '\016', '\n', '\006', 'N', 'o', 't', 'i', 'c', 'e', '\030', '\004', ' ', '\001', '(', '\t', '\022', '\025', '\n', '\r', 'R', 'e', 'c', 'r', 
  'u', 'i', 't', 'N', 'o', 't', 'i', 'c', 'e', '\030', '\005', ' ', '\001', '(', '\t', '\022', '\014', '\n', '\004', 'T', 'a', 'g', 's', '\030', '\006', 
  ' ', '\003', '(', '\005', '\022', '\r', '\n', '\005', 'O', 'w', 'n', 'e', 'r', '\030', '\007', ' ', '\001', '(', '\t', '\022', '\021', '\n', '\t', 'O', 'w', 
  'n', 'e', 'r', 'N', 'a', 'm', 'e', '\030', '\010', ' ', '\001', '(', '\t', '\022', '+', '\n', '\r', 'R', 'e', 'q', 'u', 'i', 'r', 'e', 'P', 
  'e', 'r', 'm', 'i', 't', '\030', '\t', ' ', '\001', '(', '\016', '2', '\024', '.', 'm', 's', 'g', '.', 'G', 'U', 'I', 'L', 'D', 'P', 'E', 
  'R', 'M', 'I', 'T', 'T', 'Y', 'P', 'E', '\022', '\022', '\n', '\n', 'R', 'e', 'q', 'u', 'i', 'r', 'e', 'C', 'u', 'p', '\030', '\n', ' ', 
  '\001', '(', '\005', '\022', '\017', '\n', '\007', 'C', 'o', 'u', 'n', 't', 'r', 'y', '\030', '\013', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'P', 
  'r', 'o', 'v', 'i', 'n', 'c', 'e', '\030', '\014', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 
  '\030', '\r', ' ', '\001', '(', '\t', '\"', 'B', '\n', '\016', 'G', 'u', 'i', 'l', 'd', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 'n', 't', '\022', 
  '\016', '\n', '\006', 'P', 'l', 'a', 'y', 'e', 'r', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\n', '\n', '\002', 't', 's', '\030', '\002', ' ', '\001', 
  '(', '\003', '\022', '\024', '\n', '\014', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'U', 's', 'r', 'I', 'D', '\030', '\003', ' ', '\001', '(', '\t', '\"', 
  'T', '\n', '\013', 'G', 'u', 'i', 'l', 'd', 'M', 'e', 'm', 'b', 'e', 'r', '\022', '\016', '\n', '\006', 'P', 'l', 'a', 'y', 'e', 'r', '\030', 
  '\001', ' ', '\001', '(', '\t', '\022', ' ', '\n', '\004', 'R', 'o', 'l', 'e', '\030', '\002', ' ', '\001', '(', '\016', '2', '\022', '.', 'm', 's', 'g', 
  '.', 'G', 'U', 'I', 'L', 'D', 'R', 'O', 'L', 'E', 'T', 'Y', 'P', 'E', '\022', '\023', '\n', '\013', 'A', 'c', 't', 'i', 'v', 'e', 'S', 
  'c', 'o', 'r', 'e', '\030', '\003', ' ', '\001', '(', '\005', '\"', 'v', '\n', '\016', 'G', 'u', 'i', 'l', 'd', 'E', 'x', 't', 'r', 'a', 'I', 
  'n', 'f', 'o', '\022', '!', '\n', '\007', 'M', 'e', 'm', 'b', 'e', 'r', 's', '\030', '\001', ' ', '\003', '(', '\013', '2', '\020', '.', 'm', 's', 
  'g', '.', 'G', 'u', 'i', 'l', 'd', 'M', 'e', 'm', 'b', 'e', 'r', '\022', '$', '\n', '\007', 'P', 'l', 'a', 'y', 'e', 'r', 's', '\030', 
  '\002', ' ', '\003', '(', '\013', '2', '\023', '.', 'm', 's', 'g', '.', 'G', 'u', 'i', 'l', 'd', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 'n', 
  't', '\022', '\033', '\n', '\004', 'L', 'o', 'g', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\r', '.', 'm', 's', 'g', '.', 'G', 'u', 'i', 
  'l', 'd', 'L', 'o', 'g', '\"', '\256', '\001', '\n', '\r', 'G', 'u', 'i', 'l', 'd', 'C', 'h', 'a', 't', 'I', 'n', 'f', 'o', '\022', ')', 
  '\n', '\006', 'P', 'l', 'a', 'y', 'e', 'r', '\030', '\001', ' ', '\001', '(', '\013', '2', '\031', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 
  'P', 'l', 'a', 'y', 'e', 'r', 'S', 'i', 'm', 'p', 'l', 'e', 'I', 'n', 'f', 'o', '\022', '\017', '\n', '\007', 'C', 'o', 'n', 't', 'e', 
  'n', 't', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'E', 'm', 'o', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\r', 
  '\022', '\024', '\n', '\014', 'N', 'e', 'e', 'd', 'L', 'o', 'c', 'a', 'l', 'i', 'z', 'e', '\030', '\004', ' ', '\001', '(', '\010', '\022', '\021', '\n', 
  '\t', 'T', 'i', 'm', 'e', 's', 't', 'a', 'm', 'p', '\030', '\005', ' ', '\001', '(', '\003', '\022', '\'', '\n', '\n', 'S', 'o', 'u', 'r', 'c', 
  'e', 'T', 'y', 'p', 'e', '\030', '\006', ' ', '\001', '(', '\016', '2', '\023', '.', 'm', 's', 'g', '.', 'C', 'H', 'A', 'T', 'S', 'O', 'U', 
  'R', 'C', 'E', 'T', 'Y', 'P', 'E', '\"', '\224', '\001', '\n', '\010', 'G', 'u', 'i', 'l', 'd', 'L', 'o', 'g', '\022', '\013', '\n', '\003', 'K', 
  'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '%', '\n', '\004', 'P', 'a', 'r', 'a', '\030', '\002', ' ', '\003', '(', '\013', '2', '\027', '.', 
  'm', 's', 'g', '.', 'G', 'u', 'i', 'l', 'd', 'L', 'o', 'g', '.', 'P', 'a', 'r', 'a', 'E', 'n', 't', 'r', 'y', '\022', '\017', '\n', 
  '\007', 'p', 's', '4', 'O', 'n', 'l', 'y', '\030', '\003', ' ', '\001', '(', '\010', '\022', '\n', '\n', '\002', 'p', 's', '\030', '\004', ' ', '\001', '(', 
  '\010', '\022', '\n', '\n', '\002', 'T', 's', '\030', '\006', ' ', '\001', '(', '\003', '\032', '+', '\n', '\t', 'P', 'a', 'r', 'a', 'E', 'n', 't', 'r', 
  'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', 
  ' ', '\001', '(', '\t', ':', '\002', '8', '\001', '\"', 'G', '\n', '\016', 'G', 'u', 'i', 'l', 'd', 'A', 'p', 'p', 'l', 'y', 'I', 'n', 'f', 
  'o', '\022', ')', '\n', '\006', 'P', 'l', 'a', 'y', 'e', 'r', '\030', '\001', ' ', '\001', '(', '\013', '2', '\031', '.', 'm', 's', 'g', '.', 'C', 
  'S', 'D', 'T', 'P', 'l', 'a', 'y', 'e', 'r', 'S', 'i', 'm', 'p', 'l', 'e', 'I', 'n', 'f', 'o', '\022', '\n', '\n', '\002', 'T', 's', 
  '\030', '\002', ' ', '\001', '(', '\003', '\"', 'S', '\n', '\017', 'G', 'u', 'i', 'l', 'd', 'P', 'l', 'a', 'y', 'e', 'r', 'R', 'o', 'l', 'e', 
  '\022', '\016', '\n', '\006', 'P', 'l', 'a', 'y', 'e', 'r', '\030', '\001', ' ', '\001', '(', '\t', '\022', ' ', '\n', '\004', 'R', 'o', 'l', 'e', '\030', 
  '\002', ' ', '\001', '(', '\016', '2', '\022', '.', 'm', 's', 'g', '.', 'G', 'U', 'I', 'L', 'D', 'R', 'O', 'L', 'E', 'T', 'Y', 'P', 'E', 
  '\022', '\016', '\n', '\006', 'A', 'c', 't', 'i', 'v', 'e', '\030', '\003', ' ', '\001', '(', '\r', '\"', ',', '\n', '\013', 'C', 'h', 'e', 's', 't', 
  'R', 'e', 'c', 'o', 'r', 'd', '\022', '\016', '\n', '\006', 'A', 'w', 'a', 'r', 'd', 's', '\030', '\001', ' ', '\003', '(', '\r', '\022', '\r', '\n', 
  '\005', 'R', 'o', 'u', 'n', 'd', '\030', '\002', ' ', '\001', '(', '\r', '\"', 'B', '\n', '\010', 'T', 'e', 'a', 'm', 'D', 'e', 's', 'c', '\022', 
  '\016', '\n', '\006', 'T', 'e', 'a', 'm', 'I', 'D', '\030', '\001', ' ', '\001', '(', '\r', '\022', '&', '\n', '\t', 'G', 'r', 'o', 'u', 'p', 'D', 
  'e', 's', 'c', '\030', '\002', ' ', '\001', '(', '\013', '2', '\023', '.', 'm', 's', 'g', '.', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 
  't', 'D', 'e', 's', 'c', '\"', '>', '\n', '\014', 'C', 'S', 'D', 'T', 'T', 'a', 's', 'k', 'I', 't', 'e', 'm', '\022', '\n', '\n', '\002', 
  'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'P', 'r', 'o', 'g', 'r', 'e', 's', 's', '\030', '\002', ' ', '\001', '(', 
  '\r', '\022', '\020', '\n', '\010', 'G', 'e', 't', 'A', 'w', 'a', 'r', 'd', '\030', '\003', ' ', '\001', '(', '\010', '\"', '1', '\n', '\r', 'O', 's', 
  's', 'P', 'l', 'a', 'y', 'e', 'r', 'D', 'a', 't', 'a', '\022', '\014', '\n', '\004', 'D', 'a', 't', 'a', '\030', '\001', ' ', '\001', '(', '\t', 
  '\022', '\022', '\n', '\n', 'I', 'n', 'v', 'i', 't', 'e', 'C', 'o', 'd', 'e', '\030', '\002', ' ', '\001', '(', '\t', '\"', '\352', '\003', '\n', '\r', 
  'B', 'a', 't', 't', 'l', 'e', 'E', 'x', 't', 'D', 'a', 't', 'a', '\022', '\020', '\n', '\010', 'T', 'i', 'c', 'k', 'e', 't', 'I', 'D', 
  '\030', '\001', ' ', '\001', '(', '\005', '\022', '\021', '\n', '\t', 'T', 'i', 'c', 'k', 'e', 't', 'N', 'u', 'm', '\030', '\002', ' ', '\001', '(', '\005', 
  '\022', '\026', '\n', '\016', 'R', 'a', 'n', 'k', 'R', 'e', 'w', 'a', 'r', 'd', 'L', 'i', 's', 't', '\030', '\003', ' ', '\003', '(', '\005', '\022', 
  '\r', '\n', '\005', 'M', 'a', 'p', 'I', 'D', '\030', '\004', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'S', 'u', 'b', 'M', 'a', 'p', 'I', 
  'D', '\030', '\005', ' ', '\001', '(', '\r', '\022', '\023', '\n', '\013', 'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 'N', 'u', 'm', '\030', '\006', ' ', 
  '\001', '(', '\005', '\022', '\017', '\n', '\007', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\030', '\007', ' ', '\001', '(', '\005', '\022', '\035', '\n', '\025', 'B', 
  'o', 'u', 'n', 't', 'y', 'B', 'a', 's', 'e', 'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 'N', 'u', 'm', '\030', '\010', ' ', '\001', '(', 
  '\005', '\022', 'L', '\n', '\025', 'P', 'l', 'a', 'y', 'e', 'r', 's', 'B', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 'N', 'u', 
  'm', '\030', '\t', ' ', '\003', '(', '\013', '2', '-', '.', 'm', 's', 'g', '.', 'B', 'a', 't', 't', 'l', 'e', 'E', 'x', 't', 'D', 'a', 
  't', 'a', '.', 'P', 'l', 'a', 'y', 'e', 'r', 's', 'B', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 'N', 'u', 'm', 'E', 
  'n', 't', 'r', 'y', '\022', '\020', '\n', '\010', 'A', 'u', 't', 'h', 'o', 'r', 'I', 'd', '\030', '\n', ' ', '\001', '(', '\t', '\022', '\022', '\n', 
  '\n', 's', 'y', 's', 'P', 'e', 'r', 'c', 'e', 'n', 't', '\030', '\013', ' ', '\001', '(', '\005', '\022', '\034', '\n', '\024', 's', 'y', 's', 'D', 
  'r', 'a', 'w', 'A', 'u', 't', 'h', 'o', 'r', 'P', 'e', 'r', 'c', 'e', 'n', 't', '\030', '\014', ' ', '\001', '(', '\005', '\022', '\025', '\n', 
  '\r', 'a', 'u', 't', 'h', 'o', 'r', 'P', 'e', 'r', 'c', 'e', 'n', 't', '\030', '\r', ' ', '\001', '(', '\005', '\022', '\'', '\n', '\t', 'C', 
  'h', 'e', 's', 's', 'L', 'i', 's', 't', '\030', '\016', ' ', '\003', '(', '\013', '2', '\024', '.', 'm', 's', 'g', '.', 'K', 'e', 'r', 'n', 
  'e', 'l', 'C', 'h', 'e', 's', 's', 'I', 'n', 'f', 'o', '\022', '\026', '\n', '\016', 'C', 'u', 's', 't', 'o', 'm', 'C', 'a', 'r', 'd', 
  'F', 'l', 'a', 'g', '\030', '\017', ' ', '\001', '(', '\010', '\022', '\016', '\n', '\006', 'M', 'a', 'p', 'K', 'e', 'y', '\030', '\020', ' ', '\001', '(', 
  '\t', '\032', '<', '\n', '\032', 'P', 'l', 'a', 'y', 'e', 'r', 's', 'B', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 'N', 'u', 
  'm', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'v', 'a', 
  'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\005', ':', '\002', '8', '\001', '\"', '\343', '\001', '\n', '\n', 'P', 'v', 'p', 'E', 'x', 't', 'D', 
  'a', 't', 'a', '\022', '(', '\n', '\t', 'B', 'i', 'g', 'W', 'i', 'n', 'n', 'e', 'r', '\030', '\001', ' ', '\001', '(', '\013', '2', '\025', '.', 
  'm', 's', 'g', '.', 'P', 'v', 'p', 'B', 'i', 'g', 'W', 'i', 'n', 'n', 'e', 'r', 'D', 'a', 't', 'a', '\022', '\017', '\n', '\007', 'S', 
  'u', 'b', 'm', 'o', 'd', 'e', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\030', '\n', '\020', 'P', 'v', 'p', 'C', 'h', 'e', 's', 't', 'V', 
  'i', 'p', 'L', 'e', 'v', 'e', 'l', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\021', '\n', '\t', 'P', 'v', 'e', 'D', 'e', 'b', 'u', 'f', 
  'f', '\030', '\004', ' ', '\003', '(', '\r', '\022', '\016', '\n', '\006', 'M', 'a', 'p', 'K', 'e', 'y', '\030', '\005', ' ', '\001', '(', '\t', '\022', '\017', 
  '\n', '\007', 'C', 'a', 'p', 't', 'a', 'i', 'n', '\030', '\006', ' ', '\001', '(', '\t', '\022', '\023', '\n', '\013', 'I', 's', 'C', 'a', 'r', 'd', 
  'G', 'r', 'o', 'u', 'p', '\030', '\007', ' ', '\001', '(', '\010', '\022', '\017', '\n', '\007', 'T', 'D', 'S', 't', 'a', 'g', 'e', '\030', '\010', ' ', 
  '\001', '(', '\005', '\022', '&', '\n', '\020', 'P', 'v', 'e', 'C', 'h', 'a', 'l', 'l', 'e', 'n', 'g', 'e', 'M', 'o', 'd', 'e', '\030', '\t', 
  ' ', '\001', '(', '\016', '2', '\014', '.', 'm', 's', 'g', '.', 'P', 'v', 'e', 'M', 'o', 'd', 'e', '\"', '\316', '\004', '\n', '\014', 'P', 'l', 
  'a', 'y', 'e', 'r', 'E', 'x', 't', 'M', 'a', 'p', '\022', '9', '\n', '\014', 'A', 's', 's', 'i', 's', 't', 'a', 'n', 't', 'M', 'a', 
  'p', '\030', '\001', ' ', '\003', '(', '\013', '2', '#', '.', 'm', 's', 'g', '.', 'P', 'l', 'a', 'y', 'e', 'r', 'E', 'x', 't', 'M', 'a', 
  'p', '.', 'A', 's', 's', 'i', 's', 't', 'a', 'n', 't', 'M', 'a', 'p', 'E', 'n', 't', 'r', 'y', '\022', ';', '\n', '\r', 'B', 'a', 
  't', 't', 'l', 'e', 'T', 'i', 'm', 'e', 'M', 'a', 'p', '\030', '\002', ' ', '\003', '(', '\013', '2', '$', '.', 'm', 's', 'g', '.', 'P', 
  'l', 'a', 'y', 'e', 'r', 'E', 'x', 't', 'M', 'a', 'p', '.', 'B', 'a', 't', 't', 'l', 'e', 'T', 'i', 'm', 'e', 'M', 'a', 'p', 
  'E', 'n', 't', 'r', 'y', '\022', '/', '\n', '\007', 'P', 'v', 'e', 'B', 'u', 'f', 'f', '\030', '\003', ' ', '\003', '(', '\013', '2', '\036', '.', 
  'm', 's', 'g', '.', 'P', 'l', 'a', 'y', 'e', 'r', 'E', 'x', 't', 'M', 'a', 'p', '.', 'P', 'v', 'e', 'B', 'u', 'f', 'f', 'E', 
  'n', 't', 'r', 'y', '\022', '5', '\n', '\n', 'M', 's', 'R', 'e', 'l', 'a', 't', 'i', 'o', 'n', '\030', '\004', ' ', '\003', '(', '\013', '2', 
  '!', '.', 'm', 's', 'g', '.', 'P', 'l', 'a', 'y', 'e', 'r', 'E', 'x', 't', 'M', 'a', 'p', '.', 'M', 's', 'R', 'e', 'l', 'a', 
  't', 'i', 'o', 'n', 'E', 'n', 't', 'r', 'y', '\022', '=', '\n', '\016', 'P', 'v', 'p', 'P', 'l', 'a', 'y', 'e', 'r', 'G', 'r', 'o', 
  'u', 'p', '\030', '\005', ' ', '\003', '(', '\013', '2', '%', '.', 'm', 's', 'g', '.', 'P', 'l', 'a', 'y', 'e', 'r', 'E', 'x', 't', 'M', 
  'a', 'p', '.', 'P', 'v', 'p', 'P', 'l', 'a', 'y', 'e', 'r', 'G', 'r', 'o', 'u', 'p', 'E', 'n', 't', 'r', 'y', '\032', '3', '\n', 
  '\021', 'A', 's', 's', 'i', 's', 't', 'a', 'n', 't', 'M', 'a', 'p', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', 
  '\030', '\001', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\005', ':', '\002', '8', '\001', 
  '\032', '4', '\n', '\022', 'B', 'a', 't', 't', 'l', 'e', 'T', 'i', 'm', 'e', 'M', 'a', 'p', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', 
  '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\r', 
  ':', '\002', '8', '\001', '\032', ':', '\n', '\014', 'P', 'v', 'e', 'B', 'u', 'f', 'f', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 
  'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\031', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\n', 
  '.', 'm', 's', 'g', '.', 'B', 'u', 'f', 'f', 's', ':', '\002', '8', '\001', '\032', '1', '\n', '\017', 'M', 's', 'R', 'e', 'l', 'a', 't', 
  'i', 'o', 'n', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 
  'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\t', ':', '\002', '8', '\001', '\032', 'E', '\n', '\023', 'P', 'v', 'p', 'P', 'l', 'a', 
  'y', 'e', 'r', 'G', 'r', 'o', 'u', 'p', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', 
  '\t', '\022', '\035', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\016', '2', '\016', '.', 'm', 's', 'g', '.', 'T', 'E', 
  'A', 'M', 'G', 'R', 'O', 'U', 'P', ':', '\002', '8', '\001', '\"', '\025', '\n', '\005', 'B', 'u', 'f', 'f', 's', '\022', '\014', '\n', '\004', 'D', 
  'a', 't', 'a', '\030', '\001', ' ', '\003', '(', '\r', '\"', ']', '\n', '\r', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', 'G', 'r', 'o', 'u', 
  'p', '\022', '%', '\n', '\005', 'G', 'r', 'o', 'u', 'p', '\030', '\001', ' ', '\001', '(', '\013', '2', '\026', '.', 'm', 's', 'g', '.', 'A', 'c', 
  't', 'i', 'v', 'i', 't', 'y', 'G', 'r', 'o', 'u', 'p', 'D', 'a', 't', 'a', '\022', '%', '\n', '\n', 'A', 'c', 't', 'i', 'v', 'i', 
  't', 'i', 'e', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\021', '.', 'm', 's', 'g', '.', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', 
  'D', 'a', 't', 'a', '\"', '*', '\n', '\t', 'S', 'c', 'o', 'r', 'e', 'd', 'M', 'a', 'p', '\022', '\r', '\n', '\005', 'M', 'a', 'p', 'I', 
  'D', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\016', '\n', '\006', 'I', 's', 'L', 'i', 'k', 'e', '\030', '\002', ' ', '\001', '(', '\010', '\"', '\200', 
  '\001', '\n', '\r', 'T', 'r', 'a', 'n', 's', 'f', 'e', 'r', 'E', 'v', 'e', 'n', 't', '\022', '%', '\n', '\005', 'E', 'T', 'y', 'p', 'e', 
  '\030', '\001', ' ', '\001', '(', '\016', '2', '\026', '.', 'm', 's', 'g', '.', 'T', 'r', 'a', 'n', 's', 'f', 'e', 'r', 'E', 'v', 'e', 'n', 
  't', 'T', 'y', 'p', 'e', '\022', '\017', '\n', '\007', 'T', 'o', 'k', 'e', 'n', 'I', 'D', '\030', '\002', ' ', '\001', '(', '\005', '\022', '\022', '\n', 
  '\n', 'T', 'o', 'k', 'e', 'n', 'C', 'o', 'u', 'n', 't', '\030', '\003', ' ', '\001', '(', '\005', '\022', '\r', '\n', '\005', 'P', 'a', 'y', 'e', 
  'e', '\030', '\004', ' ', '\001', '(', '\t', '\022', '\024', '\n', '\014', 'R', 'e', 'd', 'H', 'S', 'e', 't', 'F', 'i', 'e', 'l', 'd', '\030', '\005', 
  ' ', '\001', '(', '\t', '\"', 'L', '\n', '\n', 'T', 'r', 'a', 'n', 's', 'f', 'e', 'r', 'O', 'P', '\022', '\017', '\n', '\007', 'P', 'a', 'y', 
  'e', 'e', 'I', 'D', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'T', 'o', 'k', 'e', 'n', 'I', 'D', '\030', '\002', ' ', '\001', 
  '(', '\r', '\022', '\016', '\n', '\006', 'C', 'h', 'a', 'n', 'g', 'e', '\030', '\003', ' ', '\001', '(', '\005', '\022', '\014', '\n', '\004', 'U', 'U', 'I', 
  'D', '\030', '\004', ' ', '\001', '(', '\t', '\"', '\253', '\001', '\n', '\013', 'C', 'S', 'D', 'T', 'B', 'e', 't', 'D', 'a', 't', 'a', '\022', '\025', 
  '\n', '\r', 'B', 'e', 't', 'F', 'r', 'o', 'm', 'A', 'u', 't', 'h', 'o', 'r', '\030', '\001', ' ', '\001', '(', '\005', '\022', '\020', '\n', '\010', 
  'A', 'u', 't', 'h', 'o', 'r', 'I', 'd', '\030', '\002', ' ', '\001', '(', '\t', '\022', '<', '\n', '\016', 'B', 'e', 't', 'F', 'r', 'o', 'm', 
  'P', 'l', 'a', 'y', 'e', 'r', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '$', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'B', 
  'e', 't', 'D', 'a', 't', 'a', '.', 'B', 'e', 't', 'F', 'r', 'o', 'm', 'P', 'l', 'a', 'y', 'e', 'r', 's', 'E', 'n', 't', 'r', 
  'y', '\032', '5', '\n', '\023', 'B', 'e', 't', 'F', 'r', 'o', 'm', 'P', 'l', 'a', 'y', 'e', 'r', 's', 'E', 'n', 't', 'r', 'y', '\022', 
  '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', 
  '(', '\005', ':', '\002', '8', '\001', '\"', '*', '\n', '\013', 'M', 'a', 'i', 'l', 'E', 'x', 't', 'D', 'a', 't', 'a', '\022', '\033', '\n', '\005', 
  'I', 't', 'e', 'm', 's', '\030', '\001', ' ', '\003', '(', '\013', '2', '\014', '.', 'm', 's', 'g', '.', 'E', 'x', 't', 'I', 't', 'e', 'm', 
  '\"', 'x', '\n', '\007', 'E', 'x', 't', 'I', 't', 'e', 'm', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\005', '\022', '\r', 
  '\n', '\005', 'C', 'o', 'u', 'n', 't', '\030', '\002', ' ', '\001', '(', '\005', '\022', '\014', '\n', '\004', 'P', 'a', 'r', 'a', '\030', '\003', ' ', '\003', 
  '(', '\003', '\022', '\022', '\n', '\n', 'I', 'n', 's', 't', 'a', 'n', 'c', 'e', 'I', 'd', '\030', '\004', ' ', '\001', '(', '\t', '\022', '\016', '\n', 
  '\006', 'W', 'e', 'i', 'g', 'h', 't', '\030', '\005', ' ', '\001', '(', '\005', '\022', '\r', '\n', '\005', 'P', 'r', 'i', 'c', 'e', '\030', '\006', ' ', 
  '\001', '(', '\005', '\022', '\021', '\n', '\t', 'S', 'o', 'u', 'r', 'c', 'e', 'I', 'd', 'x', '\030', '\007', ' ', '\001', '(', '\005', '\"', 'R', '\n', 
  '\t', 'C', 'S', 'D', 'T', 'T', 'a', 's', 'k', 's', '\022', '!', '\n', '\006', 'T', 'r', 'o', 'p', 'h', 'y', '\030', '\001', ' ', '\003', '(', 
  '\013', '2', '\021', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'T', 'a', 's', 'k', 'I', 't', 'e', 'm', '\022', '\"', '\n', '\007', 'A', 
  'c', 'h', 'i', 'e', 'v', 'e', '\030', '\002', ' ', '\003', '(', '\013', '2', '\021', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'T', 'a', 
  's', 'k', 'I', 't', 'e', 'm', '\"', '-', '\n', '\016', 'P', 'v', 'p', 'T', 'e', 'a', 'c', 'h', 'R', 'e', 's', 'u', 'l', 't', '\022', 
  '\016', '\n', '\006', 'P', 'a', 's', 's', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\013', '\n', '\003', 'W', 'i', 'n', '\030', '\002', ' ', 
  '\001', '(', '\010', '\"', 'm', '\n', '\020', 'P', 'v', 'p', 'B', 'i', 'g', 'W', 'i', 'n', 'n', 'e', 'r', 'D', 'a', 't', 'a', '\022', '\n', 
  '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'M', 'a', 'p', 'I', 'd', '\030', '\002', ' ', '\001', '(', '\r', 
  '\022', '\022', '\n', '\n', 'S', 'y', 's', 'P', 'e', 'r', 'c', 'e', 'n', 't', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\026', '\n', '\016', 'R', 
  'a', 'n', 'k', 'R', 'e', 'w', 'a', 'r', 'd', 'L', 'i', 's', 't', '\030', '\004', ' ', '\003', '(', '\r', '\022', '\022', '\n', '\n', 'C', 'o', 
  'n', 'f', 'i', 'g', 'N', 'a', 'm', 'e', '\030', '\005', ' ', '\001', '(', '\t', '\"', 'f', '\n', '\t', 'P', 'v', 'e', 'E', 'x', 'D', 'a', 
  't', 'a', '\022', '*', '\n', '\006', 'T', 'a', 'l', 'e', 'n', 't', '\030', '\001', ' ', '\003', '(', '\013', '2', '\032', '.', 'm', 's', 'g', '.', 
  'P', 'v', 'e', 'E', 'x', 'D', 'a', 't', 'a', '.', 'T', 'a', 'l', 'e', 'n', 't', 'E', 'n', 't', 'r', 'y', '\032', '-', '\n', '\013', 
  'T', 'a', 'l', 'e', 'n', 't', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', 
  '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\005', ':', '\002', '8', '\001', '\"', '8', '\n', '\014', 'C', 'h', 'a', 
  'm', 'p', 'i', 'o', 'n', 'I', 'n', 'f', 'o', '\022', '\014', '\n', '\004', 'Z', 'o', 'n', 'e', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\016', 
  '\n', '\006', 'P', 'e', 'r', 'i', 'o', 'd', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\003', ' ', '\001', '(', 
  '\t', '\"', '5', '\n', '\007', 'T', 'o', 'p', 'R', 'a', 'n', 'k', '\022', '\014', '\n', '\004', 'Z', 'o', 'n', 'e', '\030', '\001', ' ', '\001', '(', 
  '\r', '\022', '\016', '\n', '\006', 'P', 'e', 'r', 'i', 'o', 'd', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\014', '\n', '\004', 'R', 'a', 'n', 'k', 
  '\030', '\003', ' ', '\003', '(', '\t', '\"', '3', '\n', '\020', 'C', 'h', 'a', 'm', 'p', 'i', 'o', 'n', 'I', 'n', 'f', 'o', 'L', 'i', 's', 
  't', '\022', '\037', '\n', '\004', 'l', 'i', 's', 't', '\030', '\001', ' ', '\003', '(', '\013', '2', '\021', '.', 'm', 's', 'g', '.', 'C', 'h', 'a', 
  'm', 'p', 'i', 'o', 'n', 'I', 'n', 'f', 'o', '\"', '\261', '\002', '\n', '\021', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', 'H', 
  'i', 's', 't', 'o', 'r', 'y', '\022', 'D', '\n', '\017', 'C', 'h', 'a', 'm', 'p', 'i', 'o', 'n', 'H', 'i', 's', 't', 'o', 'r', 'y', 
  '\030', '\001', ' ', '\003', '(', '\013', '2', '+', '.', 'm', 's', 'g', '.', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', 'H', 'i', 
  's', 't', 'o', 'r', 'y', '.', 'C', 'h', 'a', 'm', 'p', 'i', 'o', 'n', 'H', 'i', 's', 't', 'o', 'r', 'y', 'E', 'n', 't', 'r', 
  'y', '\022', 'B', '\n', '\016', 'T', 'o', 'p', 'R', 'a', 'n', 'k', 'H', 'i', 's', 't', 'o', 'r', 'y', '\030', '\002', ' ', '\003', '(', '\013', 
  '2', '*', '.', 'm', 's', 'g', '.', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', 'H', 'i', 's', 't', 'o', 'r', 'y', '.', 
  'T', 'o', 'p', 'R', 'a', 'n', 'k', 'H', 'i', 's', 't', 'o', 'r', 'y', 'E', 'n', 't', 'r', 'y', '\032', 'M', '\n', '\024', 'C', 'h', 
  'a', 'm', 'p', 'i', 'o', 'n', 'H', 'i', 's', 't', 'o', 'r', 'y', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', 
  '\030', '\001', ' ', '\001', '(', '\r', '\022', '$', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\025', '.', 'm', 
  's', 'g', '.', 'C', 'h', 'a', 'm', 'p', 'i', 'o', 'n', 'I', 'n', 'f', 'o', 'L', 'i', 's', 't', ':', '\002', '8', '\001', '\032', 'C', 
  '\n', '\023', 'T', 'o', 'p', 'R', 'a', 'n', 'k', 'H', 'i', 's', 't', 'o', 'r', 'y', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 
  'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\033', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', 
  '\014', '.', 'm', 's', 'g', '.', 'T', 'o', 'p', 'R', 'a', 'n', 'k', ':', '\002', '8', '\001', '\"', '\303', '\006', '\n', '\n', 'C', 'S', 'R', 
  'e', 'q', 'L', 'o', 'g', 'i', 'n', '\022', '\020', '\n', '\010', 'D', 'e', 'v', 'i', 'c', 'e', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\t', 
  '\022', '\'', '\n', '\014', 'P', 'l', 'a', 't', 'f', 'o', 'r', 'm', 'T', 'y', 'p', 'e', '\030', '\002', ' ', '\001', '(', '\016', '2', '\021', '.', 
  'm', 's', 'g', '.', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', 'T', 'Y', 'P', 'E', '\022', '\021', '\n', '\t', 'O', 's', 'V', 'e', 'r', 
  's', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 'D', 'e', 'v', 'i', 'c', 'e', 'T', 'y', 'p', 'e', '\030', 
  '\004', ' ', '\001', '(', '\t', '\022', '\035', '\n', '\007', 'N', 'e', 't', 'T', 'y', 'p', 'e', '\030', '\005', ' ', '\001', '(', '\016', '2', '\014', '.', 
  'm', 's', 'g', '.', 'N', 'E', 'T', 'T', 'Y', 'P', 'E', '\022', '!', '\n', '\t', 'L', 'o', 'g', 'i', 'n', 'T', 'y', 'p', 'e', '\030', 
  '\006', ' ', '\001', '(', '\016', '2', '\016', '.', 'm', 's', 'g', '.', 'L', 'O', 'G', 'I', 'N', 'T', 'Y', 'P', 'E', '\022', '\n', '\n', '\002', 
  'I', 'd', '\030', '\007', ' ', '\001', '(', '\t', '\022', '\025', '\n', '\r', 'L', 'y', 'S', 'd', 'k', 'D', 'e', 'v', 'i', 'c', 'e', 'I', 'd', 
  '\030', '\010', ' ', '\001', '(', '\t', '\022', '\021', '\n', '\t', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'I', 'd', '\030', '\t', ' ', '\001', '(', '\t', 
  '\022', '\021', '\n', '\t', 'P', 'a', 'c', 'k', 'a', 'g', 'e', 'I', 'd', '\030', '\n', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 'A', 'p', 
  'k', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\030', '\013', ' ', '\001', '(', '\t', '\022', '\022', '\n', '\n', 'R', 'e', 's', 'o', 'l', 'u', 't', 
  'i', 'o', 'n', '\030', '\014', ' ', '\001', '(', '\t', '\022', '$', '\n', '\013', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'T', 'y', 'p', 'e', '\030', 
  '\r', ' ', '\001', '(', '\016', '2', '\017', '.', 'm', 's', 'g', '.', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '\022', '5', '\n', 
  '\013', 'A', 'u', 't', 'h', 'S', 'D', 'K', 'C', 'o', 'd', 'e', '\030', '\016', ' ', '\003', '(', '\013', '2', ' ', '.', 'm', 's', 'g', '.', 
  'C', 'S', 'R', 'e', 'q', 'L', 'o', 'g', 'i', 'n', '.', 'A', 'u', 't', 'h', 'S', 'D', 'K', 'C', 'o', 'd', 'e', 'E', 'n', 't', 
  'r', 'y', '\022', '\021', '\n', '\t', 'S', 'e', 's', 's', 'i', 'o', 'n', 'I', 'd', '\030', '\017', ' ', '\001', '(', '\t', '\022', '\025', '\n', '\r', 
  'C', 'h', 'a', 'n', 'n', 'e', 'l', 'U', 's', 'e', 'r', 'I', 'd', '\030', '\020', ' ', '\001', '(', '\t', '\022', '\032', '\n', '\022', 'P', 'v', 
  'p', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\030', '\021', ' ', '\001', '(', '\t', '\022', '#', '\n', 
  '\n', 'P', 'a', 'y', 'C', 'h', 'a', 'n', 'n', 'e', 'l', '\030', '\022', ' ', '\001', '(', '\016', '2', '\017', '.', 'm', 's', 'g', '.', 'C', 
  'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '\022', '\022', '\n', '\n', 'A', 'c', 't', 'i', 'v', 'e', 'C', 'o', 'd', 'e', '\030', '\023', 
  ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', '\030', '\024', ' ', '\001', '(', '\t', '\022', '\017', '\n', 
  '\007', 'C', 'o', 'u', 'n', 't', 'r', 'y', '\030', '\025', ' ', '\001', '(', '\t', '\022', '#', '\n', '\n', 'L', 'a', 'u', 'n', 'c', 'h', 'T', 
  'y', 'p', 'e', '\030', '\026', ' ', '\001', '(', '\016', '2', '\017', '.', 'm', 's', 'g', '.', 'L', 'A', 'U', 'N', 'C', 'H', 'T', 'Y', 'P', 
  'E', '\022', '\n', '\n', '\002', 'I', 'p', '\030', '\027', ' ', '\001', '(', '\t', '\022', '\016', '\n', '\006', 'P', 'i', 'c', 'U', 'r', 'l', '\030', '\030', 
  ' ', '\001', '(', '\t', '\022', '\030', '\n', '\020', 'F', 'e', 'n', 'g', 'k', 'o', 'n', 'g', 'D', 'e', 'v', 'i', 'c', 'e', 'I', 'd', '\030', 
  '\031', ' ', '\001', '(', '\t', '\022', '\024', '\n', '\014', 'G', 'a', 'm', 'e', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', '\030', '\032', ' ', '\001', 
  '(', '\t', '\022', '\026', '\n', '\016', 'G', 'a', 'm', 'e', 'l', 'i', 'b', 'V', 'e', 'r', 's', 'i', 'o', 'n', '\030', '\033', ' ', '\001', '(', 
  '\003', '\022', '\025', '\n', '\r', 'A', 'd', 'v', 'e', 'r', 't', 'i', 's', 'i', 'n', 'g', 'I', 'd', '\030', '\034', ' ', '\001', '(', '\t', '\022', 
  '\026', '\n', '\016', 'P', 'S', 'B', 'l', 'o', 'c', 'k', 'e', 'd', 'U', 's', 'e', 'r', 's', '\030', '\035', ' ', '\003', '(', '\t', '\022', '\016', 
  '\n', '\006', 'R', 'e', 's', 'u', 'l', 't', '\030', '\036', ' ', '\001', '(', '\014', '\022', '%', '\n', '\013', 'L', 'o', 'g', 'i', 'n', 'S', 'o', 
  'u', 'r', 'c', 'e', '\030', '\037', ' ', '\001', '(', '\016', '2', '\020', '.', 'm', 's', 'g', '.', 'L', 'O', 'G', 'I', 'N', 'S', 'O', 'U', 
  'R', 'C', 'E', '\032', '2', '\n', '\020', 'A', 'u', 't', 'h', 'S', 'D', 'K', 'C', 'o', 'd', 'e', 'E', 'n', 't', 'r', 'y', '\022', '\013', 
  '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', 
  '\t', ':', '\002', '8', '\001', '\"', '\033', '\n', '\003', 'L', 'o', 'c', '\022', '\t', '\n', '\001', 'X', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\t', 
  '\n', '\001', 'Y', '\030', '\002', ' ', '\001', '(', '\r', '\"', '(', '\n', '\t', 'A', 'u', 't', 'h', 'o', 'r', 'i', 't', 'y', '\022', '\014', '\n', 
  '\004', 'M', 'a', 'r', 'k', '\030', '\001', ' ', '\001', '(', '\010', '\022', '\r', '\n', '\005', 'L', 'e', 'v', 'e', 'l', '\030', '\002', ' ', '\001', '(', 
  '\r', '\"', '\324', '\001', '\n', '\n', 'G', 'e', 't', 'N', 'u', 'm', 'R', 'a', 'n', 'k', '\022', '\033', '\n', '\004', 'T', 'y', 'p', 'e', '\030', 
  '\001', ' ', '\001', '(', '\016', '2', '\r', '.', 'm', 's', 'g', '.', 'R', 'A', 'N', 'K', 'T', 'Y', 'P', 'E', '\022', '\017', '\n', '\007', 'C', 
  'o', 'u', 'n', 't', 'r', 'y', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\024', '\n', '\014', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 
  't', 'I', 'd', '\030', '\003', ' ', '\001', '(', '\004', '\022', '\017', '\n', '\007', 'C', 'l', 'a', 's', 's', 'I', 'd', '\030', '\004', ' ', '\001', '(', 
  '\004', '\022', '\017', '\n', '\007', 'R', 'o', 'u', 'n', 'd', 'I', 'd', '\030', '\005', ' ', '\001', '(', '\004', '\022', '\020', '\n', '\010', 'S', 'e', 'l', 
  'f', 'R', 'a', 'n', 'k', '\030', '\006', ' ', '\001', '(', '\010', '\022', '\022', '\n', '\n', 'G', 'r', 'o', 'u', 'p', 'I', 'n', 'd', 'e', 'x', 
  '\030', '\007', ' ', '\001', '(', '\r', '\022', '$', '\n', '\013', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'T', 'y', 'p', 'e', '\030', '\010', ' ', '\001', 
  '(', '\016', '2', '\017', '.', 'm', 's', 'g', '.', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '\022', '\024', '\n', '\014', 'T', 'a', 
  'r', 'g', 'e', 't', 'P', 'l', 'a', 'y', 'e', 'r', '\030', '\t', ' ', '\001', '(', '\t', '\"', '5', '\n', '\020', 'C', 'S', 'D', 'T', 'P', 
  'a', 's', 's', 'p', 'o', 'r', 't', 'C', 'a', 'r', 'd', '\022', '\022', '\n', '\n', 'T', 'y', 'p', 'e', 'I', 'd', 'L', 'i', 's', 't', 
  '\030', '\001', ' ', '\003', '(', '\r', '\022', '\r', '\n', '\005', 'L', 'e', 'v', 'e', 'l', '\030', '\002', ' ', '\001', '(', '\r', '\"', 'n', '\n', '\013', 
  'P', 'v', 'e', 'D', 'a', 't', 'a', 'I', 'n', 'f', 'o', '\022', '(', '\n', '\004', 'D', 'a', 't', 'a', '\030', '\001', ' ', '\003', '(', '\013', 
  '2', '\032', '.', 'm', 's', 'g', '.', 'P', 'v', 'e', 'D', 'a', 't', 'a', 'I', 'n', 'f', 'o', '.', 'D', 'a', 't', 'a', 'E', 'n', 
  't', 'r', 'y', '\032', '5', '\n', '\t', 'D', 'a', 't', 'a', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', 
  ' ', '\001', '(', '\r', '\022', '\027', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\010', '.', 'm', 's', 'g', 
  '.', 'P', 'v', 'e', ':', '\002', '8', '\001', '\"', '\326', '\002', '\n', '\003', 'P', 'v', 'e', '\022', '\r', '\n', '\005', 'S', 'c', 'o', 'r', 'e', 
  '\030', '\001', ' ', '\001', '(', '\r', '\022', '(', '\n', '\010', 'C', 'h', 'e', 's', 's', 'I', 'd', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', 
  '\026', '.', 'm', 's', 'g', '.', 'P', 'v', 'e', '.', 'C', 'h', 'e', 's', 's', 'I', 'd', 's', 'E', 'n', 't', 'r', 'y', '\022', '$', 
  '\n', '\006', 'S', 'k', 'i', 'l', 'l', 's', '\030', '\003', ' ', '\003', '(', '\013', '2', '\024', '.', 'm', 's', 'g', '.', 'P', 'v', 'e', '.', 
  'S', 'k', 'i', 'l', 'l', 's', 'E', 'n', 't', 'r', 'y', '\022', ' ', '\n', '\004', 'B', 'u', 'f', 'f', '\030', '\004', ' ', '\003', '(', '\013', 
  '2', '\022', '.', 'm', 's', 'g', '.', 'P', 'v', 'e', '.', 'B', 'u', 'f', 'f', 'E', 'n', 't', 'r', 'y', '\022', '\021', '\n', '\t', 'R', 
  'a', 'n', 'k', 'S', 'c', 'o', 'r', 'e', '\030', '\005', ' ', '\001', '(', '\r', '\022', '\020', '\n', '\010', 'T', 'e', 'a', 'm', 'N', 'a', 'm', 
  'e', '\030', '\006', ' ', '\001', '(', '\t', '\022', '\016', '\n', '\006', 'U', 'n', 'l', 'o', 'c', 'k', '\030', '\007', ' ', '\001', '(', '\010', '\032', '/', 
  '\n', '\r', 'C', 'h', 'e', 's', 's', 'I', 'd', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', 
  '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\010', ':', '\002', '8', '\001', '\032', '-', '\n', 
  '\013', 'S', 'k', 'i', 'l', 'l', 's', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', 
  '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\010', ':', '\002', '8', '\001', '\032', '9', '\n', '\t', 'B', 'u', 
  'f', 'f', 'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\033', '\n', '\005', 'v', 
  'a', 'l', 'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\014', '.', 'm', 's', 'g', '.', 'P', 'v', 'e', 'B', 'u', 'f', 'f', ':', 
  '\002', '8', '\001', '\"', '\'', '\n', '\007', 'P', 'v', 'e', 'B', 'u', 'f', 'f', '\022', '\r', '\n', '\005', 'C', 'o', 'u', 'n', 't', '\030', '\001', 
  ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'E', 't', 'i', 'm', 'e', '\030', '\002', ' ', '\001', '(', '\003', '\"', '\247', '\001', '\n', '\r', 'C', 
  'a', 'r', 'd', 'G', 'r', 'o', 'u', 'p', 'D', 'a', 't', 'a', '\022', '%', '\n', '\010', 'C', 'h', 'e', 's', 's', 'I', 'd', 's', '\030', 
  '\001', ' ', '\003', '(', '\013', '2', '\023', '.', 'm', 's', 'g', '.', 'C', 'a', 'r', 'd', 'G', 'r', 'o', 'u', 'p', 'C', 'h', 'e', 's', 
  's', '\022', '\030', '\n', '\020', 'A', 'u', 't', 'o', 'A', 'd', 'd', 'C', 'a', 'r', 'd', 'T', 'i', 'm', 'e', 's', '\030', '\002', ' ', '\001', 
  '(', '\r', '\022', '\033', '\n', '\023', 'I', 's', 'A', 'u', 't', 'o', 'A', 'd', 'd', 'C', 'a', 'r', 'd', 'K', 'e', 'r', 'n', 'e', 'l', 
  '\030', '\003', ' ', '\001', '(', '\010', '\022', '\014', '\n', '\004', 'F', 'l', 'a', 'g', '\030', '\004', ' ', '\001', '(', '\010', '\022', '\026', '\n', '\016', 'R', 
  'e', 'm', 'o', 'v', 'e', 'C', 'h', 'e', 's', 's', 'I', 'd', 's', '\030', '\005', ' ', '\003', '(', '\r', '\022', '\022', '\n', '\n', 'K', 'e', 
  'r', 'n', 'e', 'l', 'F', 'l', 'a', 'g', '\030', '\006', ' ', '\001', '(', '\010', '\"', '+', '\n', '\016', 'C', 'a', 'r', 'd', 'G', 'r', 'o', 
  'u', 'p', 'C', 'h', 'e', 's', 's', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'C', 't', 
  'i', 'm', 'e', '\030', '\002', ' ', '\001', '(', '\003', '\"', '\027', '\n', '\010', 'C', 'h', 'e', 's', 's', 'I', 'd', 's', '\022', '\013', '\n', '\003', 
  'I', 'd', 's', '\030', '\001', ' ', '\003', '(', '\r', '\"', 'J', '\n', '\n', 'P', 'v', 'e', 'C', 'o', 'n', 's', 'u', 'm', 'e', '\022', '!', 
  '\n', '\004', 'T', 'y', 'p', 'e', '\030', '\001', ' ', '\001', '(', '\016', '2', '\023', '.', 'm', 's', 'g', '.', 'P', 'V', 'E', 'C', 'O', 'N', 
  'S', 'U', 'M', 'E', 'T', 'Y', 'P', 'E', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'C', 
  'o', 'u', 'n', 't', '\030', '\003', ' ', '\001', '(', '\r', '\"', '\037', '\n', '\n', 'P', 'v', 'e', 'S', 'e', 't', 't', 'i', 'n', 'g', '\022', 
  '\021', '\n', '\t', 'D', 'e', 'B', 'u', 'f', 'f', 'I', 'd', 's', '\030', '\001', ' ', '\003', '(', '\r', '\"', ' ', '\n', '\016', 'P', 'l', 'a', 
  'y', 'e', 'r', 'T', 'e', 'a', 'm', 'I', 'n', 'f', 'o', '\022', '\016', '\n', '\006', 'M', 'a', 'p', 'K', 'e', 'y', '\030', '\001', ' ', '\001', 
  '(', '\t', '\"', '5', '\n', '\020', 'P', 'v', 'e', 'R', 'a', 'n', 'k', 'R', 'e', 'd', 'i', 's', 'I', 'n', 'f', 'o', '\022', '\017', '\n', 
  '\007', 'C', 'a', 'p', 't', 'i', 'o', 'n', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'T', 'e', 'a', 'm', 'N', 'a', 'm', 
  'e', '\030', '\002', ' ', '\001', '(', '\t', '\"', 'Y', '\n', '\021', 'C', 'S', 'D', 'T', 'P', 'l', 'a', 'y', 'e', 'r', 'P', 'v', 'p', 'D', 
  'a', 't', 'a', '\022', '\035', '\n', '\003', 'P', 'v', 'e', '\030', '\001', ' ', '\001', '(', '\013', '2', '\020', '.', 'm', 's', 'g', '.', 'P', 'v', 
  'e', 'D', 'a', 't', 'a', 'I', 'n', 'f', 'o', '\022', '%', '\n', '\t', 'C', 'a', 'r', 'd', 'G', 'r', 'o', 'u', 'p', '\030', '\002', ' ', 
  '\001', '(', '\013', '2', '\022', '.', 'm', 's', 'g', '.', 'C', 'a', 'r', 'd', 'G', 'r', 'o', 'u', 'p', 'D', 'a', 't', 'a', '\"', '\\', 
  '\n', '\005', 'G', 'm', 'B', 'a', 'n', '\022', '\037', '\n', '\005', 'F', 'T', 'y', 'p', 'e', '\030', '\001', ' ', '\001', '(', '\016', '2', '\020', '.', 
  'm', 's', 'g', '.', 'F', 'R', 'O', 'Z', 'E', 'N', '_', 'T', 'Y', 'P', 'E', '\022', '\021', '\n', '\t', 'S', 't', 'a', 'r', 't', 'T', 
  'i', 'm', 'e', '\030', '\002', ' ', '\001', '(', '\003', '\022', '\017', '\n', '\007', 'E', 'n', 'd', 'T', 'i', 'm', 'e', '\030', '\003', ' ', '\001', '(', 
  '\003', '\022', '\016', '\n', '\006', 'R', 'e', 'a', 's', 'o', 'n', '\030', '\004', ' ', '\001', '(', '\t', '\"', 'r', '\n', '\017', 'M', 'e', 'n', 't', 
  'o', 'r', 'I', 'n', 'v', 'i', 't', 'e', 'M', 's', 'g', '\022', '\035', '\n', '\004', 'T', 'y', 'p', 'e', '\030', '\001', ' ', '\001', '(', '\016', 
  '2', '\017', '.', 'm', 's', 'g', '.', 'M', 'E', 'N', 'T', 'O', 'R', 'S', 'H', 'I', 'P', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\002', 
  ' ', '\001', '(', '\t', '\022', '\r', '\n', '\005', 'C', 't', 'i', 'm', 'e', '\030', '\003', ' ', '\001', '(', '\003', '\022', '\017', '\n', '\007', 'C', 'o', 
  'n', 't', 'e', 'n', 't', '\030', '\004', ' ', '\001', '(', '\t', '\022', '\024', '\n', '\014', 'C', 'o', 'm', 'p', 'l', 'e', 't', 'e', 'T', 'a', 
  's', 'k', '\030', '\005', ' ', '\003', '(', '\r', '\"', '\363', '\001', '\n', '\n', 'M', 'e', 'n', 't', 'o', 'r', 'I', 'n', 'f', 'o', '\022', '\037', 
  '\n', '\005', 'L', 'e', 'v', 'e', 'l', '\030', '\001', ' ', '\001', '(', '\016', '2', '\020', '.', 'm', 's', 'g', '.', 'M', 'E', 'N', 'T', 'O', 
  'R', 'L', 'E', 'V', 'E', 'L', '\022', '\032', '\n', '\006', 'P', 'u', 'p', 'i', 'l', 's', '\030', '\002', ' ', '\003', '(', '\013', '2', '\n', '.', 
  'm', 's', 'g', '.', 'P', 'u', 'p', 'i', 'l', '\022', '\023', '\n', '\013', 'I', 'n', 'v', 'i', 't', 'e', 'T', 'i', 'm', 'e', 's', '\030', 
  '\003', ' ', '\001', '(', '\r', '\022', '\022', '\n', '\n', 'P', 'u', 'n', 'i', 's', 'h', 'T', 'i', 'm', 'e', '\030', '\004', ' ', '\003', '(', '\003', 
  '\022', ')', '\n', '\005', 'T', 'a', 's', 'k', 's', '\030', '\005', ' ', '\003', '(', '\013', '2', '\032', '.', 'm', 's', 'g', '.', 'M', 'e', 'n', 
  't', 'o', 'r', 'I', 'n', 'f', 'o', '.', 'T', 'a', 's', 'k', 's', 'E', 'n', 't', 'r', 'y', '\022', '\023', '\n', '\013', 'G', 'r', 'a', 
  'd', 'u', 'a', 't', 'e', 'N', 'u', 'm', '\030', '\006', ' ', '\001', '(', '\r', '\032', '?', '\n', '\n', 'T', 'a', 's', 'k', 's', 'E', 'n', 
  't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', ' ', '\n', '\005', 'v', 'a', 'l', 'u', 'e', 
  '\030', '\002', ' ', '\001', '(', '\013', '2', '\021', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'T', 'a', 's', 'k', 'I', 't', 'e', 'm', 
  ':', '\002', '8', '\001', '\"', '\333', '\001', '\n', '\005', 'P', 'u', 'p', 'i', 'l', '\022', '$', '\n', '\005', 'T', 'a', 's', 'k', 's', '\030', '\001', 
  ' ', '\003', '(', '\013', '2', '\025', '.', 'm', 's', 'g', '.', 'P', 'u', 'p', 'i', 'l', '.', 'T', 'a', 's', 'k', 's', 'E', 'n', 't', 
  'r', 'y', '\022', '\024', '\n', '\014', 'G', 'r', 'a', 'd', 'u', 'a', 't', 'e', 'T', 'i', 'm', 'e', '\030', '\002', ' ', '\001', '(', '\003', '\022', 
  '\n', '\n', '\002', 'I', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\034', '\n', '\004', 'S', 't', 'a', 't', '\030', '\004', ' ', '\001', '(', '\016', 
  '2', '\016', '.', 'm', 's', 'g', '.', 'P', 'U', 'P', 'I', 'L', 'S', 'T', 'A', 'T', '\022', '\031', '\n', '\021', 'A', 'p', 'p', 'l', 'y', 
  'G', 'r', 'a', 'd', 'u', 'a', 't', 'e', 'T', 'i', 'm', 'e', '\030', '\005', ' ', '\001', '(', '\003', '\022', '\020', '\n', '\010', 'I', 'n', 't', 
  'i', 'm', 'a', 'c', 'y', '\030', '\006', ' ', '\001', '(', '\003', '\032', '?', '\n', '\n', 'T', 'a', 's', 'k', 's', 'E', 'n', 't', 'r', 'y', 
  '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', ' ', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', '\002', ' ', 
  '\001', '(', '\013', '2', '\021', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'T', 'a', 's', 'k', 'I', 't', 'e', 'm', ':', '\002', '8', 
  '\001', '\"', '\251', '\001', '\n', '\007', 'T', 'D', 'U', 'n', 'U', 's', 'e', '\022', '\032', '\n', '\003', 'I', 'd', '1', '\030', '\001', ' ', '\001', '(', 
  '\013', '2', '\r', '.', 'm', 's', 'g', '.', 'T', 'D', 'I', 't', 'e', 'm', 'I', 'd', '\022', '\032', '\n', '\003', 'I', 'd', '2', '\030', '\002', 
  ' ', '\001', '(', '\013', '2', '\r', '.', 'm', 's', 'g', '.', 'T', 'D', 'I', 't', 'e', 'm', 'I', 'd', '\022', '\032', '\n', '\003', 'I', 'd', 
  '3', '\030', '\003', ' ', '\001', '(', '\013', '2', '\r', '.', 'm', 's', 'g', '.', 'T', 'D', 'I', 't', 'e', 'm', 'I', 'd', '\022', '$', '\n', 
  '\n', 'I', 't', 'e', 'm', 'G', 'r', 'o', 'u', 'p', '1', '\030', '\004', ' ', '\001', '(', '\013', '2', '\020', '.', 'm', 's', 'g', '.', 'T', 
  'D', 'I', 't', 'e', 'm', 'G', 'r', 'o', 'u', 'p', '\022', '$', '\n', '\n', 'I', 't', 'e', 'm', 'G', 'r', 'o', 'u', 'p', '2', '\030', 
  '\005', ' ', '\001', '(', '\013', '2', '\020', '.', 'm', 's', 'g', '.', 'T', 'D', 'I', 't', 'e', 'm', 'G', 'r', 'o', 'u', 'p', '\"', '%', 
  '\n', '\010', 'T', 'D', 'I', 't', 'e', 'm', 'I', 'd', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\005', '\022', '\r', '\n', 
  '\005', 'L', 'e', 'v', 'e', 'l', '\030', '\002', ' ', '\001', '(', '\005', '\"', '\272', '\001', '\n', '\006', 'T', 'D', 'I', 't', 'e', 'm', '\022', '\n', 
  '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\005', '\022', '\r', '\n', '\005', 'L', 'e', 'v', 'e', 'l', '\030', '\002', ' ', '\001', '(', '\005', 
  '\022', '\023', '\n', '\013', 'T', 'a', 'l', 'e', 'n', 't', 'L', 'e', 'v', 'e', 'l', '\030', '\003', ' ', '\001', '(', '\005', '\022', '\r', '\n', '\005', 
  'C', 'o', 'u', 'n', 't', '\030', '\004', ' ', '\001', '(', '\005', '\022', '/', '\n', '\n', 'E', 'q', 'u', 'i', 'p', 'm', 'e', 'n', 't', 's', 
  '\030', '\005', ' ', '\003', '(', '\013', '2', '\033', '.', 'm', 's', 'g', '.', 'T', 'D', 'I', 't', 'e', 'm', '.', 'E', 'q', 'u', 'i', 'p', 
  'm', 'e', 'n', 't', 's', 'E', 'n', 't', 'r', 'y', '\032', '@', '\n', '\017', 'E', 'q', 'u', 'i', 'p', 'm', 'e', 'n', 't', 's', 'E', 
  'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\034', '\n', '\005', 'v', 'a', 'l', 'u', 
  'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\r', '.', 'm', 's', 'g', '.', 'T', 'D', 'I', 't', 'e', 'm', 'I', 'd', ':', '\002', '8', 
  '\001', '\"', '@', '\n', '\020', 'A', 'd', 'd', 'R', 'e', 'c', 'o', 'm', 'm', 'e', 'n', 'd', 'D', 'a', 't', 'a', '\022', '\020', '\n', '\010', 
  'P', 'l', 'a', 'y', 'e', 'r', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\t', '\022', '\013', '\n', '\003', 'M', 'm', 'r', '\030', '\002', ' ', '\001', 
  '(', '\r', '\022', '\r', '\n', '\005', 'L', 'e', 'v', 'e', 'l', '\030', '\003', ' ', '\001', '(', '\r', '\"', '\236', '\002', '\n', '\024', 'P', 'l', 'a', 
  'y', 'e', 'r', 'M', 'e', 'n', 't', 'o', 'r', 'S', 'h', 'i', 'p', 'I', 'n', 'f', 'o', '\022', '\020', '\n', '\010', 'I', 's', 'M', 'e', 
  'n', 't', 'o', 'r', '\030', '\001', ' ', '\001', '(', '\010', '\022', '\020', '\n', '\010', 'M', 'e', 'n', 't', 'o', 'r', 'I', 'd', '\030', '\002', ' ', 
  '\001', '(', '\t', '\022', '\014', '\n', '\004', 'S', 'i', 'g', 'n', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\024', '\n', '\014', 'I', 'n', 'v', 'i', 
  't', 'e', 'S', 'w', 'i', 't', 'c', 'h', '\030', '\004', ' ', '\001', '(', '\010', '\022', '\013', '\n', '\003', 'T', 'a', 'g', '\030', '\005', ' ', '\001', 
  '(', '\r', '\022', '\022', '\n', '\n', 'P', 'u', 'n', 'i', 's', 'h', 'T', 'i', 'm', 'e', '\030', '\006', ' ', '\001', '(', '\003', '\022', '\022', '\n', 
  '\n', 'I', 's', 'G', 'r', 'a', 'd', 'u', 'a', 't', 'e', '\030', '\007', ' ', '\001', '(', '\010', '\022', '3', '\n', '\005', 'T', 'a', 's', 'k', 
  's', '\030', '\010', ' ', '\003', '(', '\013', '2', '$', '.', 'm', 's', 'g', '.', 'P', 'l', 'a', 'y', 'e', 'r', 'M', 'e', 'n', 't', 'o', 
  'r', 'S', 'h', 'i', 'p', 'I', 'n', 'f', 'o', '.', 'T', 'a', 's', 'k', 's', 'E', 'n', 't', 'r', 'y', '\022', '\023', '\n', '\013', 'I', 
  'n', 'v', 'i', 't', 'e', 'T', 'i', 'm', 'e', 's', '\030', '\t', ' ', '\001', '(', '\r', '\032', '?', '\n', '\n', 'T', 'a', 's', 'k', 's', 
  'E', 'n', 't', 'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', ' ', '\n', '\005', 'v', 'a', 'l', 
  'u', 'e', '\030', '\002', ' ', '\001', '(', '\013', '2', '\021', '.', 'm', 's', 'g', '.', 'C', 'S', 'D', 'T', 'T', 'a', 's', 'k', 'I', 't', 
  'e', 'm', ':', '\002', '8', '\001', '\"', '-', '\n', '\031', 'C', 'S', 'D', 'T', 'M', 'e', 'n', 't', 'o', 'r', 'R', 'e', 'c', 'o', 'm', 
  'm', 'e', 'n', 'd', 'P', 'l', 'a', 'y', 'e', 'r', '\022', '\020', '\n', '\010', 'P', 'l', 'a', 'y', 'e', 'r', 'I', 'd', '\030', '\001', ' ', 
  '\001', '(', '\t', '\"', 'M', '\n', '\016', 'P', 'F', 'D', 'T', 'T', 'a', 's', 'k', 'D', 'e', 't', 'a', 'i', 'l', '\022', '\037', '\n', '\010', 
  'C', 'o', 'n', 'd', 'T', 'y', 'p', 'e', '\030', '\001', ' ', '\001', '(', '\016', '2', '\r', '.', 'm', 's', 'g', '.', 'C', 'O', 'N', 'D', 
  'T', 'Y', 'P', 'E', '\022', '\014', '\n', '\004', 'P', 'a', 'r', 'a', '\030', '\002', ' ', '\003', '(', '\005', '\022', '\014', '\n', '\004', 'M', 'o', 'd', 
  'e', '\030', '\003', ' ', '\001', '(', '\t', '\"', '1', '\n', '\016', 'C', 'S', 'D', 'T', 'M', 'e', 'n', 't', 'o', 'r', 'I', 'n', 'f', 'o', 
  '\022', '\037', '\n', '\005', 'L', 'e', 'v', 'e', 'l', '\030', '\001', ' ', '\001', '(', '\016', '2', '\020', '.', 'm', 's', 'g', '.', 'M', 'E', 'N', 
  'T', 'O', 'R', 'L', 'E', 'V', 'E', 'L', '\"', 'n', '\n', '\021', 'O', 'B', 'P', 'a', 's', 's', 'T', 'h', 'r', 'o', 'u', 'g', 'h', 
  'D', 'a', 't', 'a', '\022', '!', '\n', '\004', 'T', 'y', 'p', 'e', '\030', '\001', ' ', '\001', '(', '\016', '2', '\023', '.', 'm', 's', 'g', '.', 
  'K', 'E', 'R', 'N', 'E', 'L', 'J', 'S', 'O', 'N', 'T', 'Y', 'P', 'E', '\022', '\r', '\n', '\005', 'R', 'o', 'u', 'n', 'd', '\030', '\002', 
  ' ', '\001', '(', '\r', '\022', '\023', '\n', '\013', 'P', 'v', 'P', 'P', 'l', 'a', 'y', 'e', 'r', 'I', 'd', '\030', '\003', ' ', '\001', '(', '\t', 
  '\022', '\022', '\n', '\n', 'O', 'b', 'P', 'l', 'a', 'y', 'e', 'r', 'I', 'd', '\030', '\004', ' ', '\001', '(', '\t', '\"', 'K', '\n', '\020', 'H', 
  'i', 's', 't', 'o', 'r', 'y', 'M', 'a', 'x', 'C', 'u', 'p', 'M', 'm', 'r', '\022', '\032', '\n', '\004', 'M', 'o', 'd', 'e', '\030', '\001', 
  ' ', '\001', '(', '\016', '2', '\014', '.', 'm', 's', 'g', '.', 'P', 'V', 'P', 'M', 'O', 'D', 'E', '\022', '\013', '\n', '\003', 'M', 'm', 'r', 
  '\030', '\002', ' ', '\001', '(', '\r', '\022', '\016', '\n', '\006', 'P', 'e', 'r', 'i', 'o', 'd', '\030', '\003', ' ', '\001', '(', '\r', '\"', '\223', '\005', 
  '\n', '\014', 'C', 'S', 'N', 't', 'f', 'P', 'v', 'p', 'C', 'h', 'a', 't', '\022', '\n', '\n', '\002', 'I', 'd', '\030', '\001', ' ', '\001', '(', 
  '\t', '\022', '\017', '\n', '\007', 'C', 'o', 'n', 't', 'e', 'n', 't', '\030', '\002', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'E', 'm', 'o', 
  't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'L', 'e', 'v', 'e', 'l', '\030', '\004', ' ', '\001', '(', '\r', 
  '\022', '\037', '\n', '\010', 'C', 'h', 'a', 't', 'T', 'y', 'p', 'e', '\030', '\005', ' ', '\001', '(', '\016', '2', '\r', '.', 'm', 's', 'g', '.', 
  'C', 'H', 'A', 'T', 'T', 'Y', 'P', 'E', '\022', '\r', '\n', '\005', 'I', 'n', 'd', 'e', 'x', '\030', '\006', ' ', '\001', '(', '\r', '\022', '\021', 
  '\n', '\t', 'Q', 'u', 'i', 'c', 'k', 'C', 'h', 'a', 't', '\030', '\007', ' ', '\001', '(', '\005', '\022', '\020', '\n', '\010', 'U', 's', 'e', 'r', 
  'N', 'a', 'm', 'e', '\030', '\010', ' ', '\001', '(', '\t', '\022', '\017', '\n', '\007', 'H', 'e', 'a', 'd', 'P', 'i', 'c', '\030', '\t', ' ', '\001', 
  '(', '\r', '\022', '\017', '\n', '\007', 'C', 'o', 'u', 'n', 't', 'r', 'y', '\030', '\n', ' ', '\001', '(', '\t', '\022', '3', '\n', '\t', 'S', 'h', 
  'o', 'w', 'I', 't', 'e', 'm', 's', '\030', '\013', ' ', '\003', '(', '\013', '2', ' ', '.', 'm', 's', 'g', '.', 'C', 'S', 'N', 't', 'f', 
  'P', 'v', 'p', 'C', 'h', 'a', 't', '.', 'S', 'h', 'o', 'w', 'I', 't', 'e', 'm', 's', 'E', 'n', 't', 'r', 'y', '\022', '\021', '\n', 
  '\t', 'I', 's', 'W', 'a', 't', 'c', 'h', 'e', 'r', '\030', '\014', ' ', '\001', '(', '\010', '\022', '\020', '\n', '\010', 'P', 'r', 'o', 'v', 'i', 
  'n', 'c', 'e', '\030', '\r', ' ', '\001', '(', '\r', '\022', '\021', '\n', '\t', 'T', 'i', 'm', 'e', 's', 't', 'a', 'm', 'p', '\030', '\016', ' ', 
  '\001', '(', '\003', '\022', '#', '\n', '\010', 'P', 'l', 'a', 't', 'f', 'o', 'r', 'm', '\030', '\017', ' ', '\001', '(', '\016', '2', '\021', '.', 'm', 
  's', 'g', '.', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', 'T', 'Y', 'P', 'E', '\022', '\027', '\n', '\017', 'P', 'a', 's', 's', 'p', 'o', 
  'r', 't', 'T', 'y', 'p', 'e', 'I', 'd', 's', '\030', '\020', ' ', '\003', '(', '\r', '\022', '$', '\n', '\013', 'C', 'h', 'a', 'n', 'n', 'e', 
  'l', 'T', 'y', 'p', 'e', '\030', '\021', ' ', '\001', '(', '\016', '2', '\017', '.', 'm', 's', 'g', '.', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 
  'Y', 'P', 'E', '\022', '\024', '\n', '\014', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'U', 's', 'r', 'I', 'd', '\030', '\022', ' ', '\001', '(', '\t', 
  '\022', '\017', '\n', '\007', 'P', 'S', '4', 'O', 'n', 'l', 'y', '\030', '\023', ' ', '\001', '(', '\010', '\022', '+', '\n', '\014', 'R', 'e', 's', 't', 
  'r', 'i', 'c', 't', 'T', 'y', 'p', 'e', '\030', '\024', ' ', '\001', '(', '\016', '2', '\025', '.', 'm', 's', 'g', '.', 'U', 's', 'e', 'r', 
  'R', 'e', 's', 't', 'r', 'i', 'c', 't', 'T', 'y', 'p', 'e', '\022', '\021', '\n', '\t', 'G', 'u', 'i', 'l', 'd', 'N', 'a', 'm', 'e', 
  '\030', '\025', ' ', '\001', '(', '\t', '\022', '\021', '\n', '\t', 'G', 'u', 'i', 'l', 'd', 'S', 'i', 'g', 'n', '\030', '\026', ' ', '\001', '(', '\005', 
  '\022', '\'', '\n', '\n', 'S', 'o', 'u', 'r', 'c', 'e', 'T', 'y', 'p', 'e', '\030', '\027', ' ', '\001', '(', '\016', '2', '\023', '.', 'm', 's', 
  'g', '.', 'C', 'H', 'A', 'T', 'S', 'O', 'U', 'R', 'C', 'E', 'T', 'Y', 'P', 'E', '\022', ')', '\n', '\r', 'E', 'x', 'c', 'h', 'a', 
  'n', 'g', 'e', 'S', 't', 'a', 't', 'e', '\030', '\030', ' ', '\001', '(', '\016', '2', '\022', '.', 'm', 's', 'g', '.', 'E', 'X', 'C', 'H', 
  'A', 'N', 'G', 'E', 'S', 'T', 'A', 'T', 'E', '\032', '0', '\n', '\016', 'S', 'h', 'o', 'w', 'I', 't', 'e', 'm', 's', 'E', 'n', 't', 
  'r', 'y', '\022', '\013', '\n', '\003', 'k', 'e', 'y', '\030', '\001', ' ', '\001', '(', '\r', '\022', '\r', '\n', '\005', 'v', 'a', 'l', 'u', 'e', '\030', 
  '\002', ' ', '\001', '(', '\r', ':', '\002', '8', '\001', '\"', 'Z', '\n', '\022', 'P', 'l', 'a', 'y', 'e', 'r', 'O', 'b', 'S', 'e', 'r', 'v', 
  'e', 'r', 'I', 'n', 'f', 'o', '\022', '\r', '\n', '\005', 'P', 'v', 'p', 'I', 'd', '\030', '\001', ' ', '\001', '(', '\004', '\022', '\017', '\n', '\007', 
  'O', 'b', 'S', 'v', 'r', 'I', 'd', '\030', '\002', ' ', '\001', '(', '\r', '\022', '\022', '\n', '\n', 'O', 'b', 'p', 'l', 'a', 'y', 'e', 'r', 
  'I', 'd', '\030', '\003', ' ', '\001', '(', '\t', '\022', '\020', '\n', '\010', 'P', 'v', 'p', 'S', 'v', 'r', 'I', 'd', '\030', '\004', ' ', '\001', '(', 
  '\r', '*', '\332', '\002', '\n', '\006', 'R', 'E', 'A', 'S', 'O', 'N', '\022', '\017', '\n', '\013', 'R', 'E', 'A', 'S', 'O', 'N', '_', 'N', 'U', 
  'L', 'L', '\020', '\000', '\022', '\n', '\n', '\006', 'S', 'Y', 'S', 'T', 'E', 'M', '\020', '\001', '\022', '\014', '\n', '\010', 'I', 'N', 'A', 'C', 'T', 
  'I', 'V', 'E', '\020', '\002', '\022', '\013', '\n', '\007', 'R', 'E', 'L', 'O', 'G', 'I', 'N', '\020', '\003', '\022', '\022', '\n', '\016', 'S', 'E', 'R', 
  'V', 'E', 'R', '_', 'S', 'T', 'O', 'P', 'I', 'N', 'G', '\020', '\005', '\022', '\030', '\n', '\024', 'R', 'E', 'D', 'I', 'R', 'E', 'C', 'T', 
  '_', 'H', 'A', 'L', 'L', '_', 'S', 'E', 'R', 'V', 'E', 'R', '\020', '\006', '\022', '\030', '\n', '\024', 'G', 'R', 'O', 'W', 'U', 'P', '_', 
  'D', 'E', 'F', 'E', 'N', 'D', '_', 'F', 'R', 'O', 'Z', 'E', 'N', '\020', '\007', '\022', '\024', '\n', '\020', 'R', 'E', 'Q', 'U', 'E', 'S', 
  'T', '_', 'T', 'O', 'O', '_', 'F', 'A', 'S', 'T', '\020', '\010', '\022', '\014', '\n', '\010', 'P', 'U', 'N', 'I', 'S', 'H', 'E', 'D', '\020', 
  '\t', '\022', '\027', '\n', '\023', 'A', 'D', 'D', 'I', 'C', 'T', 'I', 'O', 'N', '_', 'L', 'I', 'M', 'I', 'T', '_', 'A', 'G', 'E', '\020', 
  '\n', '\022', '\r', '\n', '\t', 'G', 'A', 'M', 'E', '_', 'O', 'V', 'E', 'R', '\020', '\013', '\022', '\030', '\n', '\024', 'A', 'D', 'D', 'I', 'C', 
  'T', 'I', 'O', 'N', '_', 'L', 'I', 'M', 'I', 'T', '_', 'T', 'I', 'M', 'E', '\020', '\014', '\022', '\021', '\n', '\r', 'B', 'I', 'N', 'D', 
  '_', 'T', 'X', 'P', 'L', 'A', 'Y', 'E', 'R', '\020', '\r', '\022', '\021', '\n', '\r', 'S', 'E', 'R', 'V', 'I', 'C', 'E', '_', 'C', 'L', 
  'O', 'S', 'E', '\020', '\016', '\022', '\016', '\n', '\n', 'P', 'S', '_', 'R', 'E', 'V', 'O', 'K', 'E', 'D', '\020', '\017', '\022', '\016', '\n', '\n', 
  'P', 'S', '_', 'B', 'I', 'N', 'D', '_', 'L', 'Y', '\020', '\020', '\022', '\020', '\n', '\014', 'P', 'S', '_', 'U', 'N', 'B', 'I', 'N', 'D', 
  '_', 'L', 'Y', '\020', '\021', '\022', '\022', '\n', '\016', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'K', 'I', 'C', 'K', 'O', 'F', 'F', '\020', '\022', 
  '*', '\211', '\035', '\n', '\006', 'S', 'O', 'U', 'R', 'C', 'E', '\022', '\r', '\n', '\t', 'S', 'O', 'U', 'R', 'C', 'E', '_', 'G', 'M', '\020', 
  '\000', '\022', '\017', '\n', '\013', 'S', 'O', 'U', 'R', 'C', 'E', '_', 'I', 'N', 'I', 'T', '\020', '\001', '\022', '\010', '\n', '\004', 'E', 'V', 'A', 
  'L', '\020', '\002', '\022', '\010', '\n', '\004', 'M', 'A', 'I', 'L', '\020', '\003', '\022', '\013', '\n', '\007', 'B', 'U', 'Y', '_', 'E', 'G', 'G', '\020', 
  '\004', '\022', '\014', '\n', '\010', 'S', 'E', 'T', '_', 'N', 'A', 'M', 'E', '\020', '\005', '\022', '\r', '\n', '\t', 'S', 'E', 'L', 'L', '_', 'I', 
  'T', 'E', 'M', '\020', '\006', '\022', '\020', '\n', '\014', 'S', 'O', 'U', 'R', 'C', 'E', '_', 'C', 'D', 'K', 'E', 'Y', '\020', '\007', '\022', '\026', 
  '\n', '\022', 'B', 'U', 'Y', '_', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '_', 'L', 'E', 'V', 'E', 'L', '\020', '\010', '\022', '\034', '\n', 
  '\030', 'G', 'E', 'T', '_', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '_', 'L', 'E', 'V', 'E', 'L', '_', 'A', 'W', 'A', 'R', 'D', 
  '\020', '\t', '\022', '\024', '\n', '\020', 'U', 'P', 'G', 'R', 'A', 'D', 'E', '_', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '\020', '\n', '\022', 
  '\033', '\n', '\027', 'G', 'E', 'T', '_', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '_', 'T', 'A', 'S', 'K', '_', 'A', 'W', 'A', 'R', 
  'D', '\020', '\013', '\022', '\n', '\n', '\006', 'C', 'H', 'A', 'R', 'G', 'E', '\020', '\017', '\022', '\022', '\n', '\016', 'E', 'V', 'A', 'L', '_', 'F', 
  'I', 'R', 'S', 'T', '_', 'W', 'I', 'N', '\020', '\020', '\022', '\022', '\n', '\016', 'S', 'O', 'U', 'R', 'C', 'E', '_', 'G', 'M', '_', 'E', 
  'V', 'A', 'L', '\020', '\021', '\022', '\032', '\n', '\026', 'S', 'O', 'U', 'R', 'C', 'E', '_', 'R', 'A', 'N', 'K', 'S', 'E', 'A', 'S', 'O', 
  'N', '_', 'E', 'V', 'A', 'L', '\020', '\022', '\022', '\022', '\n', '\016', 'U', 'S', 'E', '_', 'B', 'O', 'N', 'U', 'S', '_', 'C', 'A', 'R', 
  'D', '\020', '\023', '\022', '\020', '\n', '\014', 'S', 'E', 'A', 'S', 'O', 'N', '_', 'A', 'W', 'A', 'R', 'D', '\020', '\024', '\022', '\033', '\n', '\027', 
  'S', 'E', 'A', 'S', 'O', 'N', '_', 'A', 'C', 'C', 'O', 'U', 'N', 'T', '_', 'L', 'E', 'V', 'E', 'L', '_', 'U', 'P', '\020', '\025', 
  '\022', '\026', '\n', '\022', 'G', 'E', 'T', '_', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'A', 'W', 'A', 'R', 'D', '\020', '\026', '\022', 
  '\017', '\n', '\013', 'M', 'E', 'L', 'E', 'E', '_', 'A', 'W', 'A', 'R', 'D', '\020', '\027', '\022', '\030', '\n', '\024', 'M', 'A', 'I', 'L', '_', 
  'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'R', 'E', 'W', 'A', 'R', 'D', '\020', '\030', '\022', '\034', '\n', '\030', 'M', 'A', 'I', 'L', 
  '_', 'M', 'A', 'I', 'N', 'T', 'A', 'I', 'N', '_', 'C', 'O', 'M', 'P', 'E', 'N', 'S', 'A', 'T', 'E', '\020', '\031', '\022', '\034', '\n', 
  '\030', 'M', 'A', 'I', 'L', '_', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'C', 'O', 'M', 'P', 'E', 'N', 'S', 'A', 'T', 'E', 
  '\020', '\032', '\022', '\031', '\n', '\025', 'M', 'A', 'I', 'L', '_', 'O', 'T', 'H', 'E', 'R', '_', 'C', 'O', 'M', 'P', 'E', 'N', 'S', 'A', 
  'T', 'E', '\020', '\033', '\022', '\031', '\n', '\025', 'M', 'A', 'I', 'L', '_', 'I', 'N', 'T', 'E', 'R', 'N', 'A', 'L', '_', 'W', 'E', 'L', 
  'F', 'A', 'R', 'E', '\020', '\034', '\022', '\022', '\n', '\016', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '_', 'C', 'L', 'O', 'S', 'E', '\020', 
  '\035', '\022', '\022', '\n', '\016', 'A', 'L', 'P', 'H', 'A', '_', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '\020', '\036', '\022', '\017', '\n', '\013', 
  'A', 'L', 'P', 'H', 'A', '_', 'O', 'R', 'D', 'E', 'R', '\020', '\037', '\022', '\021', '\n', '\r', 'A', 'L', 'P', 'H', 'A', '_', 'C', 'O', 
  'M', 'P', 'E', 'T', 'E', '\020', ' ', '\022', '\020', '\n', '\014', 'A', 'L', 'P', 'H', 'A', '_', 'C', 'H', 'A', 'R', 'G', 'E', '\020', '!', 
  '\022', '\016', '\n', '\n', 'A', 'L', 'P', 'H', 'A', '_', 'T', 'E', 'S', 'T', '\020', '\"', '\022', '\023', '\n', '\017', 'P', 'A', 'S', 'S', 'P', 
  'O', 'R', 'T', '_', 'R', 'E', 'T', 'U', 'R', 'N', '\020', '#', '\022', '\024', '\n', '\020', 'B', 'U', 'Y', '_', 'S', 'P', 'E', 'C', 'I', 
  'A', 'L', '_', 'G', 'I', 'F', 'T', '\020', '$', '\022', '\030', '\n', '\024', 'E', 'X', 'C', 'H', 'A', 'N', 'G', 'E', '_', 'T', 'I', 'M', 
  'E', 'D', '_', 'G', 'O', 'O', 'D', 'S', '\020', '%', '\022', '\033', '\n', '\027', 'E', 'X', 'C', 'H', 'A', 'N', 'G', 'E', '_', 'P', 'A', 
  'S', 'S', 'P', 'O', 'R', 'T', '_', 'G', 'O', 'O', 'D', 'S', '\020', '&', '\022', '\032', '\n', '\026', 'U', 'S', 'E', '_', 'P', 'A', 'S', 
  'S', 'P', 'O', 'R', 'T', '_', 'T', 'A', 'S', 'K', '_', 'C', 'A', 'R', 'D', '\020', '\'', '\022', '\023', '\n', '\017', 'O', 'P', 'E', 'N', 
  '_', 'R', 'A', 'N', 'D', '_', 'C', 'H', 'E', 'S', 'T', '\020', '(', '\022', '\017', '\n', '\013', 'E', 'G', 'G', '_', 'L', 'O', 'T', 'T', 
  'E', 'R', 'Y', '\020', ')', '\022', '\026', '\n', '\022', 'U', 'N', 'G', 'E', 'T', '_', 'W', 'E', 'E', 'K', 'L', 'Y', '_', 'A', 'W', 'A', 
  'R', 'D', '\020', '*', '\022', '\014', '\n', '\010', 'U', 'S', 'E', '_', 'I', 'T', 'E', 'M', '\020', '+', '\022', '\027', '\n', '\023', 'U', 'S', 'E', 
  '_', 'E', 'X', 'P', 'E', 'R', 'I', 'E', 'N', 'C', 'E', '_', 'C', 'A', 'R', 'D', '\020', ',', '\022', '\025', '\n', '\021', 'B', 'I', 'N', 
  'D', '_', 'P', 'H', 'O', 'N', 'E', '_', 'N', 'U', 'M', 'B', 'E', 'R', '\020', '-', '\022', '\027', '\n', '\023', 'P', 'A', 'S', 'S', 'P', 
  'O', 'R', 'T', '_', 'W', 'R', 'O', 'N', 'G', '_', 'D', 'A', 'T', 'A', '\020', '.', '\022', '\032', '\n', '\026', 'L', 'A', 'U', 'N', 'C', 
  'H', '_', 'P', 'R', 'I', 'V', 'I', 'L', 'E', 'G', 'E', '_', 'A', 'W', 'A', 'R', 'D', '\020', '/', '\022', '\034', '\n', '\030', 'Q', 'Q', 
  '_', 'L', 'O', 'G', 'I', 'N', '_', 'P', 'R', 'I', 'V', 'I', 'L', 'E', 'G', 'E', '_', 'A', 'W', 'A', 'R', 'D', '\020', '0', '\022', 
  '\036', '\n', '\032', 'Q', 'Q', 'S', 'V', 'I', 'P', '_', 'L', 'O', 'G', 'I', 'N', 'C', 'O', 'N', 'T', 'I', 'N', 'U', 'S', '_', 'A', 
  'W', 'A', 'R', 'D', '\020', '1', '\022', '\026', '\n', '\022', 'D', 'A', 'I', 'L', 'Y', '_', 'S', 'H', 'A', 'R', 'E', '_', 'R', 'E', 'W', 
  'A', 'R', 'D', '\020', '2', '\022', '\022', '\n', '\016', 'B', 'U', 'Y', '_', 'M', 'A', 'L', 'L', '_', 'G', 'O', 'O', 'D', 'S', '\020', '3', 
  '\022', '\022', '\n', '\016', 'D', 'A', 'Y', '_', 'S', 'I', 'G', 'N', '_', 'A', 'W', 'A', 'R', 'D', '\020', '4', '\022', '\021', '\n', '\r', 'A', 
  'C', 'T', '_', 'I', 'T', 'E', 'M', '_', 'E', 'X', 'C', 'H', '\020', '5', '\022', '\016', '\n', '\n', 'C', 'H', 'A', 'R', 'G', 'E', '_', 
  'R', 'A', 'W', '\020', '6', '\022', '\020', '\n', '\014', 'W', 'X', '_', 'V', 'V', 'I', 'P', '_', 'I', 'N', 'I', 'T', '\020', '7', '\022', '\027', 
  '\n', '\023', 'W', 'X', '_', 'V', 'V', 'I', 'P', '_', 'D', 'A', 'I', 'L', 'Y', '_', 'A', 'W', 'A', 'R', 'D', '\020', '8', '\022', '\031', 
  '\n', '\025', 'W', 'X', '_', 'V', 'V', 'I', 'P', '_', 'D', 'A', 'I', 'L', 'Y', '_', 'V', '_', 'A', 'W', 'A', 'R', 'D', '\020', '9', 
  '\022', '\032', '\n', '\026', 'W', 'X', '_', 'V', 'V', 'I', 'P', '_', 'W', 'E', 'E', 'K', 'L', 'Y', '_', 'V', '_', 'A', 'W', 'A', 'R', 
  'D', '\020', ':', '\022', '\025', '\n', '\021', 'W', 'X', '_', 'V', 'V', 'I', 'P', '_', 'A', 'C', 'C', '_', 'L', 'O', 'G', 'I', 'N', '\020', 
  ';', '\022', '\026', '\n', '\022', 'W', 'X', '_', 'V', 'V', 'I', 'P', '_', 'A', 'C', 'C', '_', 'B', 'A', 'T', 'T', 'L', 'E', '\020', '<', 
  '\022', '\023', '\n', '\017', 'W', 'X', '_', 'V', 'V', 'I', 'P', '_', 'A', 'C', 'C', '_', 'W', 'I', 'N', '\020', '=', '\022', '\022', '\n', '\016', 
  'W', 'X', '_', 'V', 'V', 'I', 'P', '_', 'L', 'V', 'L', '_', 'U', 'P', '\020', '>', '\022', '\024', '\n', '\020', 'W', 'X', '_', 'V', 'V', 
  'I', 'P', '_', 'S', '_', 'C', 'U', 'P', '_', 'U', 'P', '\020', '?', '\022', '\024', '\n', '\020', 'W', 'X', '_', 'V', 'V', 'I', 'P', '_', 
  'D', '_', 'C', 'U', 'P', '_', 'U', 'P', '\020', '@', '\022', '\031', '\n', '\025', 'W', 'X', '_', 'R', 'E', 'D', 'P', 'K', 'T', '_', 'D', 
  'A', 'I', 'L', 'Y', '_', 'A', 'W', 'A', 'R', 'D', '\020', 'A', '\022', '\026', '\n', '\022', 'W', 'X', '_', 'S', 'E', 'N', 'D', '_', 'R', 
  'E', 'D', '_', 'P', 'A', 'C', 'K', 'E', 'T', '\020', 'B', '\022', '\026', '\n', '\022', 'W', 'X', '_', 'R', 'E', 'C', 'V', '_', 'R', 'E', 
  'D', '_', 'P', 'A', 'C', 'K', 'E', 'T', '\020', 'C', '\022', '\030', '\n', '\024', 'W', 'X', '_', 'R', 'E', 'D', 'P', 'K', 'T', '_', 'L', 
  'I', 'K', 'E', '_', 'A', 'W', 'A', 'R', 'D', '\020', 'D', '\022', '\030', '\n', '\024', 'W', 'X', '_', 'R', 'E', 'D', 'P', 'K', 'T', '_', 
  'R', 'A', 'N', 'K', '_', 'A', 'W', 'A', 'R', 'D', '\020', 'E', '\022', '\032', '\n', '\026', 'I', 'N', 'V', 'I', 'T', 'E', 'D', '_', 'R', 
  'E', 'G', 'I', 'S', 'T', 'E', 'R', '_', 'A', 'W', 'A', 'R', 'D', '\020', 'F', '\022', '\026', '\n', '\022', 'L', 'Y', 'D', 'I', 'A', 'M', 
  'O', 'N', 'D', '_', 'T', 'R', 'A', 'N', 'S', 'M', 'I', 'T', '\020', 'G', '\022', '\017', '\n', '\013', 'C', 'H', 'A', 'R', 'G', 'E', '_', 
  'G', 'B', 'U', 'Y', '\020', 'H', '\022', '\024', '\n', '\020', 'A', 'C', 'T', '_', 'A', 'U', 'T', 'O', '_', 'E', 'X', 'C', 'H', 'A', 'G', 
  'E', '\020', 'I', '\022', '\013', '\n', '\007', 'C', 'O', 'M', 'P', 'O', 'S', 'E', '\020', 'J', '\022', '\023', '\n', '\017', 'C', 'H', 'A', 'R', 'G', 
  'E', '_', 'A', 'C', 'T', '_', 'M', 'A', 'L', 'L', '\020', 'K', '\022', '\025', '\n', '\021', 'A', 'M', 'A', 'Z', 'O', 'N', '_', 'G', 'I', 
  'F', 'T', '_', 'A', 'W', 'A', 'R', 'D', '\020', 'L', '\022', '\020', '\n', '\014', 'R', 'E', 'C', 'A', 'L', 'L', '_', 'A', 'W', 'A', 'R', 
  'D', '\020', 'M', '\022', '\024', '\n', '\020', 'T', 'E', 'A', 'M', 'P', 'V', 'P', 'W', 'I', 'N', '_', 'A', 'W', 'A', 'R', 'D', '\020', 'N', 
  '\022', '\020', '\n', '\014', 'M', 'E', 'R', 'G', 'E', '_', 'P', 'L', 'A', 'Y', 'E', 'R', '\020', 'O', '\022', '\025', '\n', '\021', 'E', 'N', 'R', 
  'O', 'L', 'L', '_', 'T', 'O', 'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', '\020', 'P', '\022', '\030', '\n', '\024', 'W', 'E', 'B', '_', 'S', 
  'H', 'O', 'P', 'P', 'I', 'N', 'G', '_', 'C', 'O', 'N', 'S', 'U', 'M', 'E', '\020', 'Q', '\022', '\027', '\n', '\023', 'W', 'E', 'B', '_', 
  'S', 'H', 'O', 'P', 'P', 'I', 'N', 'G', '_', 'R', 'E', 'F', 'U', 'N', 'D', '\020', 'R', '\022', '\037', '\n', '\033', 'A', 'L', 'L', '_', 
  'T', 'O', 'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', '_', 'C', 'L', 'A', 'S', 'S', '_', 'C', 'A', 'N', 'C', 'E', 'L', '\020', 'S', 
  '\022', '\022', '\n', '\016', 'T', 'O', 'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', '_', 'E', 'N', 'D', '\020', 'T', '\022', '\r', '\n', '\t', 'L', 
  'U', 'C', 'K', '_', 'S', 'T', 'A', 'R', '\020', 'U', '\022', '\031', '\n', '\025', 'T', 'O', 'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', '_', 
  'P', 'O', 'I', 'N', 'T', '_', 'R', 'A', 'N', 'K', '\020', 'V', '\022', '\024', '\n', '\020', 'C', 'L', 'A', 'S', 'S', '_', 'P', 'O', 'I', 
  'N', 'T', '_', 'R', 'A', 'N', 'K', '\020', 'W', '\022', '\024', '\n', '\020', 'R', 'O', 'U', 'N', 'D', '_', 'P', 'O', 'I', 'N', 'T', '_', 
  'R', 'A', 'N', 'K', '\020', 'X', '\022', '\030', '\n', '\024', 'S', 'E', 'L', 'F', '_', 'G', 'E', 'T', '_', 'P', 'O', 'I', 'N', 'T', '_', 
  'A', 'W', 'A', 'R', 'D', '\020', 'Y', '\022', '\024', '\n', '\020', 'M', 'A', 'I', 'L', '_', 'P', 'O', 'I', 'N', 'T', '_', 'A', 'W', 'A', 
  'R', 'D', '\020', 'Z', '\022', '\022', '\n', '\016', 'T', 'O', 'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', '_', 'O', 'U', 'T', '\020', '[', '\022', 
  '\020', '\n', '\014', 'O', 'B', 'S', 'E', 'R', 'V', 'E', '_', 'T', 'A', 'S', 'K', '\020', '\\', '\022', '\026', '\n', '\022', 'E', 'N', 'R', 'O', 
  'L', 'L', '_', 'F', 'A', 'I', 'L', '_', 'R', 'E', 'T', 'U', 'R', 'N', '\020', ']', '\022', '\030', '\n', '\024', 'C', 'H', 'E', 'S', 'T', 
  '_', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'E', '_', 'A', 'W', 'A', 'R', 'D', '\020', '^', '\022', '\023', '\n', '\017', 'W', 'O', 'R', 'K', 
  'S', 'H', 'O', 'P', '_', 'T', 'I', 'C', 'K', 'E', 'T', '\020', '_', '\022', '\021', '\n', '\r', 'M', 'A', 'I', 'L', '_', 'A', 'U', 'T', 
  'O', '_', 'G', 'E', 'T', '\020', '`', '\022', '\025', '\n', '\021', 'W', 'O', 'R', 'K', 'S', 'H', 'O', 'P', '_', 'C', 'U', 'R', 'R', 'E', 
  'N', 'C', 'Y', '\020', 'a', '\022', '\017', '\n', '\013', 'B', 'O', 'U', 'N', 'T', 'Y', '_', 'R', 'O', 'O', 'M', '\020', 'b', '\022', ' ', '\n', 
  '\034', 'T', 'R', 'A', 'N', 'S', 'F', 'E', 'R', '_', 'T', 'O', '_', 'O', 'F', 'F', 'I', 'C', 'I', 'A', 'L', '_', 'A', 'C', 'C', 
  'O', 'U', 'N', 'T', '\020', 'c', '\022', '\016', '\n', '\n', 'P', 'V', 'P', '_', 'I', 'N', 'C', 'O', 'M', 'E', '\020', 'd', '\022', '\034', '\n', 
  '\030', 'S', 'O', 'U', 'R', 'C', 'E', '_', 'S', 'U', 'M', 'S', 'A', 'N', 'G', '_', 'O', 'R', 'D', 'E', 'R', 'G', 'I', 'F', 'T', 
  '\020', 'e', '\022', '\n', '\n', '\006', 'R', 'E', 'P', 'O', 'R', 'T', '\020', 'f', '\022', '\r', '\n', '\t', 'P', 'S', '_', 'R', 'E', 'V', 'O', 
  'K', 'E', '\020', 'g', '\022', '\020', '\n', '\014', 'G', 'U', 'I', 'L', 'D', '_', 'C', 'R', 'E', 'A', 'T', 'E', '\020', 'h', '\022', '\016', '\n', 
  '\n', 'G', 'U', 'I', 'L', 'D', '_', 'N', 'A', 'M', 'E', '\020', 'i', '\022', '\016', '\n', '\n', 'G', 'U', 'I', 'L', 'D', '_', 'S', 'I', 
  'G', 'N', '\020', 'j', '\022', '\013', '\n', '\007', 'C', 'O', 'N', 'V', 'E', 'R', 'T', '\020', 'k', '\022', '\025', '\n', '\021', 'V', 'N', 'G', '_', 
  'C', 'O', 'M', 'M', 'E', 'N', 'T', '_', 'A', 'W', 'A', 'R', 'D', '\020', 'l', '\022', '\025', '\n', '\021', 'O', 'P', 'E', 'N', '_', 'C', 
  'H', 'O', 'I', 'C', 'E', '_', 'C', 'H', 'E', 'S', 'T', '\020', 'm', '\022', '\027', '\n', '\023', 'U', 'S', 'E', '_', 'P', 'R', 'O', 'T', 
  'E', 'C', 'T', 'I', 'O', 'N', '_', 'C', 'A', 'R', 'D', '\020', 'n', '\022', '\023', '\n', '\017', 'A', 'D', 'V', 'E', 'R', 'T', 'I', 'S', 
  'E', '_', 'A', 'W', 'A', 'R', 'D', '\020', 'o', '\022', '\021', '\n', '\r', 'L', 'E', 'V', 'E', 'L', 'U', 'P', '_', 'C', 'H', 'E', 'S', 
  'T', '\020', 'p', '\022', '\024', '\n', '\020', 'T', 'E', 'A', 'C', 'H', '_', 'P', 'A', 'S', 'S', '_', 'A', 'W', 'A', 'R', 'D', '\020', 'q', 
  '\022', ' ', '\n', '\034', 'O', 'P', 'E', 'N', '_', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', '_', 'I', 'N', 'T', 'E', 'L', '_', 'E', 
  'X', 'C', 'H', 'A', 'N', 'G', 'E', '\020', 'r', '\022', '\034', '\n', '\030', 'O', 'P', 'E', 'N', '_', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 
  'M', '_', 'D', 'A', 'I', 'L', 'Y', '_', 'S', 'I', 'G', 'N', '\020', 's', '\022', '!', '\n', '\035', 'O', 'P', 'E', 'N', '_', 'P', 'L', 
  'A', 'T', 'F', 'O', 'R', 'M', '_', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'R', 'E', 'W', 'A', 'R', 'D', '\020', 't', '\022', 
  '\027', '\n', '\023', 'O', 'P', 'E', 'N', '_', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', '_', 'T', 'R', 'A', 'D', 'E', '\020', 'u', '\022', 
  '\032', '\n', '\026', 'O', 'P', 'E', 'N', '_', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', '_', 'G', 'I', 'V', 'E', 'A', 'W', 'A', 'Y', 
  '\020', 'v', '\022', '\025', '\n', '\021', 'U', 'S', 'E', '_', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '_', 'C', 'A', 'R', 'D', '\020', 'w', 
  '\022', '\021', '\n', '\r', 'C', 'O', 'M', 'P', 'L', 'E', 'T', 'E', '_', 'T', 'A', 'S', 'K', '\020', 'x', '\022', '\024', '\n', '\020', 'C', 'H', 
  'E', 'S', 'T', '_', 'R', 'A', 'R', 'E', '_', 'A', 'W', 'A', 'R', 'D', '\020', 'y', '\022', '\023', '\n', '\017', 'B', 'I', 'G', 'W', 'I', 
  'N', 'N', 'E', 'R', '_', 'A', 'W', 'A', 'R', 'D', '\020', 'z', '\022', '\031', '\n', '\025', 'B', 'I', 'G', 'W', 'I', 'N', 'N', 'E', 'R', 
  '_', 'B', 'A', 'T', 'T', 'L', 'E', 'A', 'W', 'A', 'R', 'D', '\020', '{', '\022', '\024', '\n', '\020', 'B', 'I', 'G', 'W', 'I', 'N', 'N', 
  'E', 'R', '_', 'T', 'I', 'C', 'K', 'E', 'T', '\020', '|', '\022', '\033', '\n', '\027', 'B', 'I', 'G', 'W', 'I', 'N', 'N', 'E', 'R', '_', 
  'B', 'A', 'T', 'T', 'L', 'E', 'C', 'O', 'N', 'S', 'U', 'M', 'E', '\020', '}', '\022', '\020', '\n', '\014', 'E', 'X', 'C', 'H', 'A', 'N', 
  'G', 'E', '_', 'B', 'U', 'Y', '\020', '~', '\022', '\021', '\n', '\r', 'E', 'X', 'C', 'H', 'A', 'N', 'G', 'E', '_', 'S', 'E', 'L', 'L', 
  '\020', '\177', '\022', '\022', '\n', '\r', 'E', 'X', 'C', 'H', 'A', 'N', 'G', 'E', '_', 'F', 'A', 'I', 'L', '\020', '\200', '\001', '\022', '\024', '\n', 
  '\017', 'P', 'V', 'P', '_', 'P', 'L', 'A', 'Y', '_', 'R', 'E', 'W', 'A', 'R', 'D', '\020', '\201', '\001', '\022', '\022', '\n', '\r', 'D', 'E', 
  'A', 'L', '_', 'W', 'E', 'B', '_', 'M', 'A', 'I', 'L', '\020', '\202', '\001', '\022', '\023', '\n', '\016', 'N', 'O', 'R', 'M', 'A', 'L', '_', 
  'O', 'U', 'T', '_', 'P', 'U', 'T', '\020', '\203', '\001', '\022', '\031', '\n', '\024', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'P', 'U', 
  'Z', 'Z', 'L', 'E', '_', 'I', 'T', 'E', 'M', '\020', '\204', '\001', '\022', '\031', '\n', '\024', 'B', 'I', 'G', 'W', 'I', 'N', 'N', 'E', 'R', 
  '_', 'S', 'E', 'A', 'S', 'O', 'N', 'E', 'V', 'A', 'L', '\020', '\205', '\001', '\022', '\036', '\n', '\031', 'O', 'P', 'E', 'N', '_', 'P', 'L', 
  'A', 'T', 'F', 'O', 'R', 'M', '_', 'C', 'O', 'N', 'V', 'E', 'R', 'T', 'I', 'T', 'E', 'M', '\020', '\206', '\001', '\022', '\030', '\n', '\023', 
  'P', 'V', 'E', '_', 'C', 'H', 'A', 'L', 'L', 'E', 'N', 'A', 'G', 'E', '_', 'I', 'T', 'E', 'M', '\020', '\207', '\001', '\022', '!', '\n', 
  '\034', 'O', 'P', 'E', 'N', '_', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', '_', 'C', 'O', 'N', 'V', 'E', 'R', 'T', 'D', 'I', 'A', 
  'M', 'O', 'N', 'D', '\020', '\210', '\001', '\022', '\035', '\n', '\030', 'P', 'V', 'E', '_', 'C', 'H', 'A', 'L', 'L', 'E', 'N', 'G', 'E', '_', 
  'R', 'A', 'N', 'K', '_', 'A', 'W', 'A', 'R', 'D', '\020', '\211', '\001', '\022', '\017', '\n', '\n', 'S', 'M', 'E', 'L', 'T', '_', 'I', 'T', 
  'E', 'M', '\020', '\212', '\001', '\022', '\030', '\n', '\023', 'S', 'O', 'U', 'R', 'C', 'E', '_', 'B', 'I', 'N', 'D', '_', 'A', 'C', 'C', 'O', 
  'U', 'N', 'T', '\020', '\213', '\001', '\022', '\033', '\n', '\026', 'S', 'O', 'U', 'R', 'C', 'C', 'E', '_', 'T', 'R', 'A', 'N', 'S', '_', 'O', 
  'L', 'D', '_', 'I', 'T', 'E', 'M', '\020', '\214', '\001', '\022', '\031', '\n', '\024', 'S', 'O', 'U', 'R', 'C', 'E', '_', 'I', 'D', 'E', 'N', 
  'T', 'I', 'F', 'Y', '_', 'I', 'T', 'E', 'M', '\020', '\215', '\001', '\022', '\030', '\n', '\023', 'S', 'O', 'U', 'R', 'C', 'E', '_', 'I', 'N', 
  'S', 'E', 'R', 'T', '_', 'A', 'F', 'F', 'I', 'X', '\020', '\216', '\001', '\022', '\023', '\n', '\016', 'P', 'L', 'A', 'T', '_', 'G', 'E', 'T', 
  '_', 'A', 'W', 'A', 'R', 'D', '\020', '\217', '\001', '\022', '\022', '\n', '\r', 'P', 'V', 'P', '_', 'O', 'B', '_', 'R', 'E', 'W', 'A', 'R', 
  'D', '\020', '\220', '\001', '\022', '\032', '\n', '\025', 'S', 'E', 'T', '_', 'D', 'E', 'F', 'A', 'U', 'L', 'T', '_', 'A', 'T', 'T', 'R', 'I', 
  'B', 'U', 'T', 'E', '\020', '\221', '\001', '\022', '\036', '\n', '\031', 'E', 'X', 'C', 'H', 'A', 'N', 'G', 'E', '_', 'U', 'P', 'G', 'R', 'A', 
  'D', 'E', '_', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '\020', '\222', '\001', '\022', '\r', '\n', '\010', 'P', 'V', 'E', '_', 'B', 'U', 'F', 
  'F', '\020', '\223', '\001', '\022', '\031', '\n', '\024', 'P', 'V', 'P', '_', 'A', 'U', 'T', 'H', 'O', 'R', 'I', 'T', 'Y', '_', 'R', 'E', 'W', 
  'A', 'R', 'D', '\020', '\224', '\001', '\022', '\020', '\n', '\013', 'T', 'D', '_', 'B', 'U', 'Y', '_', 'C', 'A', 'R', 'D', '\020', '\225', '\001', '\022', 
  '\025', '\n', '\020', 'M', 'E', 'N', 'T', 'O', 'R', '_', 'S', 'H', 'I', 'P', '_', 'T', 'A', 'S', 'K', '\020', '\226', '\001', '\022', '\020', '\n', 
  '\013', 'T', 'D', '_', 'M', 'A', 'T', 'E', 'R', 'I', 'A', 'L', '\020', '\227', '\001', '\022', '\016', '\n', '\t', 'T', 'D', '_', 'I', 'N', '_', 
  'U', 'S', 'E', '\020', '\230', '\001', '\022', '\020', '\n', '\013', 'T', 'D', '_', 'T', 'A', 'K', 'E', '_', 'O', 'F', 'F', '\020', '\231', '\001', '\022', 
  '\014', '\n', '\007', 'T', 'D', '_', 'W', 'E', 'A', 'R', '\020', '\232', '\001', '\022', '\017', '\n', '\n', 'T', 'D', '_', 'C', 'O', 'M', 'P', 'O', 
  'S', 'E', '\020', '\233', '\001', '\022', '\020', '\n', '\013', 'T', 'D', '_', 'L', 'E', 'V', 'E', 'L', '_', 'U', 'P', '\020', '\234', '\001', '\022', '\020', 
  '\n', '\013', 'T', 'D', '_', 'E', 'X', 'A', 'W', 'A', 'R', 'D', 'S', '\020', '\235', '\001', '\022', '\014', '\n', '\007', 'T', 'D', '_', 'I', 'N', 
  'I', 'T', '\020', '\236', '\001', '\022', '\017', '\n', '\n', 'T', 'D', '_', 'O', 'N', '_', 'H', 'O', 'O', 'K', '\020', '\237', '\001', '\022', '\014', '\n', 
  '\007', 'T', 'D', '_', 'D', 'R', 'A', 'W', '\020', '\240', '\001', '\022', '\r', '\n', '\010', 'T', 'D', '_', 'T', 'R', 'A', 'N', 'S', '\020', '\241', 
  '\001', '\022', '\013', '\n', '\006', 'T', 'D', '_', 'B', 'U', 'Y', '\020', '\242', '\001', '\022', '\013', '\n', '\006', 'T', 'D', '_', 'C', 'A', 'L', '\020', 
  '\243', '\001', '\022', '\n', '\n', '\005', 'T', 'D', '_', 'G', 'M', '\020', '\244', '\001', '\022', '\025', '\n', '\020', 'B', 'A', 'L', 'A', 'N', 'C', 'E', 
  '_', 'R', 'E', 'C', 'H', 'A', 'R', 'G', 'E', '\020', '\245', '\001', '\022', '\026', '\n', '\021', 'E', 'X', 'C', 'H', 'A', 'N', 'G', 'E', '_', 
  'C', 'O', 'N', 'S', 'U', 'M', 'E', 'S', '\020', '\246', '\001', '\022', '\030', '\n', '\023', 'C', 'O', 'M', 'P', 'L', 'E', 'T', 'E', '_', 'M', 
  'E', 'D', 'A', 'L', '_', 'T', 'A', 'S', 'K', '\020', '\247', '\001', '\022', '!', '\n', '\034', 'L', 'Y', '_', 'A', 'C', 'T', 'I', 'V', 'I', 
  'T', 'Y', '_', 'L', 'I', 'M', 'I', 'T', '_', 'D', 'R', 'O', 'P', '_', 'A', 'W', 'A', 'R', 'D', '\020', '\250', '\001', '\022', '\027', '\n', 
  '\022', 'I', 'N', 'S', 'U', 'R', 'A', 'N', 'C', 'E', '_', 'C', 'A', 'R', 'D', '_', 'U', 'S', 'E', '\020', '\251', '\001', '\022', '\031', '\n', 
  '\024', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '_', 'S', 'E', 'A', 'S', 'O', 'N', '_', 'E', 'V', 'A', 'L', '\020', '\252', '\001', '*', 
  '\306', '\001', '\n', '\014', 'P', 'L', 'A', 'Y', 'E', 'R', 'S', 'T', 'A', 'T', 'U', 'S', '\022', '\030', '\n', '\024', 'P', 'L', 'A', 'Y', 'E', 
  'R', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'O', 'F', 'F', 'L', 'I', 'N', 'E', '\020', '\000', '\022', '\025', '\n', '\021', 'P', 'L', 'A', 'Y', 
  'E', 'R', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'H', 'A', 'L', 'L', '\020', '\001', '\022', '\024', '\n', '\020', 'P', 'L', 'A', 'Y', 'E', 'R', 
  'S', 'T', 'A', 'T', 'U', 'S', '_', 'P', 'V', 'P', '\020', '\002', '\022', '\025', '\n', '\021', 'P', 'L', 'A', 'Y', 'E', 'R', 'S', 'T', 'A', 
  'T', 'U', 'S', '_', 'T', 'E', 'A', 'M', '\020', '\003', '\022', '\034', '\n', '\030', 'P', 'L', 'A', 'Y', 'E', 'R', 'S', 'T', 'A', 'T', 'U', 
  'S', '_', 'P', 'V', 'P', '_', 'O', 'F', 'F', 'L', 'I', 'N', 'E', '\020', '\004', '\022', '\030', '\n', '\024', 'P', 'L', 'A', 'Y', 'E', 'R', 
  'S', 'T', 'A', 'T', 'U', 'S', '_', 'O', 'B', 'S', 'E', 'R', 'V', 'E', '\020', '\005', '\022', ' ', '\n', '\034', 'P', 'L', 'A', 'Y', 'E', 
  'R', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'O', 'B', 'S', 'E', 'R', 'V', 'E', '_', 'O', 'F', 'F', 'L', 'I', 'N', 'E', '\020', '\006', 
  '*', '`', '\n', '\017', 'F', 'R', 'I', 'E', 'N', 'D', 'I', 'N', 'V', 'I', 'S', 'I', 'B', 'L', 'E', '\022', '\030', '\n', '\024', 'F', 'R', 
  'I', 'E', 'N', 'D', 'I', 'N', 'V', 'I', 'S', 'I', 'B', 'L', 'E', '_', 'N', 'O', 'N', 'E', '\020', '\000', '\022', '\030', '\n', '\024', 'F', 
  'R', 'I', 'E', 'N', 'D', 'I', 'N', 'V', 'I', 'S', 'I', 'B', 'L', 'E', '_', 'T', 'R', 'U', 'E', '\020', '\001', '\022', '\031', '\n', '\025', 
  'F', 'R', 'I', 'E', 'N', 'D', 'I', 'N', 'V', 'I', 'S', 'I', 'B', 'L', 'E', '_', 'F', 'A', 'L', 'S', 'E', '\020', '\002', '*', '\255', 
  '\001', '\n', '\014', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', 'T', 'Y', 'P', 'E', '\022', '\026', '\n', '\022', 'P', 'L', 'A', 'T', 'F', 'O', 
  'R', 'M', 'T', 'Y', 'P', 'E', '_', 'O', 'T', 'H', 'E', 'R', '\020', '\000', '\022', '\030', '\n', '\024', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 
  'M', 'T', 'Y', 'P', 'E', '_', 'A', 'N', 'D', 'R', 'O', 'I', 'D', '\020', '\001', '\022', '\024', '\n', '\020', 'P', 'L', 'A', 'T', 'F', 'O', 
  'R', 'M', 'T', 'Y', 'P', 'E', '_', 'I', 'O', 'S', '\020', '\002', '\022', '\023', '\n', '\017', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', 'T', 
  'Y', 'P', 'E', '_', 'P', 'C', '\020', '\003', '\022', '\024', '\n', '\020', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', 'T', 'Y', 'P', 'E', '_', 
  'P', 'S', '4', '\020', '\004', '\022', '\024', '\n', '\020', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', 'T', 'Y', 'P', 'E', '_', 'P', 'S', '5', 
  '\020', '\005', '\022', '\024', '\n', '\020', 'P', 'L', 'A', 'T', 'F', 'O', 'R', 'M', 'T', 'Y', 'P', 'E', '_', 'E', 'N', 'D', '\020', '\006', '*', 
  '{', '\n', '\r', 'M', 'A', 'G', 'N', 'E', 'T', 'I', 'S', 'M', 'T', 'Y', 'P', 'E', '\022', '\026', '\n', '\022', 'M', 'A', 'G', 'N', 'E', 
  'T', 'I', 'S', 'M', 'T', 'Y', 'P', 'E', '_', 'N', 'O', 'N', 'E', '\020', '\000', '\022', '\023', '\n', '\017', 'M', 'A', 'G', 'N', 'E', 'T', 
  'I', 'S', 'M', 'T', 'Y', 'P', 'E', '_', '1', '\020', '\001', '\022', '\023', '\n', '\017', 'M', 'A', 'G', 'N', 'E', 'T', 'I', 'S', 'M', 'T', 
  'Y', 'P', 'E', '_', '2', '\020', '\002', '\022', '\023', '\n', '\017', 'M', 'A', 'G', 'N', 'E', 'T', 'I', 'S', 'M', 'T', 'Y', 'P', 'E', '_', 
  '3', '\020', '\003', '\022', '\023', '\n', '\017', 'M', 'A', 'G', 'N', 'E', 'T', 'I', 'S', 'M', 'T', 'Y', 'P', 'E', '_', '4', '\020', '\004', '*', 
  'Q', '\n', '\r', 'P', 'V', 'P', 'E', 'N', 'D', '_', 'R', 'E', 'A', 'S', 'O', 'N', '\022', '\023', '\n', '\017', 'P', 'V', 'P', 'E', 'N', 
  'D', '_', 'G', 'A', 'M', 'E', 'O', 'V', 'E', 'R', '\020', '\000', '\022', '\024', '\n', '\020', 'P', 'V', 'P', 'E', 'N', 'D', '_', 'P', 'L', 
  'A', 'Y', 'E', 'R', 'D', 'I', 'E', '\020', '\001', '\022', '\025', '\n', '\021', 'P', 'V', 'P', 'E', 'N', 'D', '_', 'L', 'E', 'A', 'V', 'E', 
  'E', 'A', 'R', 'L', 'Y', '\020', '\002', '*', '\232', '\017', '\n', '\n', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '\022', '\024', '\n', 
  '\020', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'G', 'U', 'E', 'S', 'T', '\020', '\000', '\022', '\021', '\n', '\r', 'C', 'H', 
  'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'L', 'Y', '\020', '\001', '\022', '\023', '\n', '\017', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 
  'P', 'E', '_', '4', '3', '9', '9', '\020', '\002', '\022', '\022', '\n', '\016', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', '3', 
  '6', '0', '\020', '\003', '\022', '\024', '\n', '\020', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'B', 'A', 'I', 'D', 'U', '\020', 
  '\004', '\022', '\025', '\n', '\021', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'D', 'A', 'N', 'G', 'L', 'E', '\020', '\005', '\022', 
  '\024', '\n', '\020', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'K', 'U', 'P', 'A', 'I', '\020', '\006', '\022', '\030', '\n', '\024', 
  'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'L', 'I', 'A', 'N', 'X', 'I', 'A', 'N', 'G', '\020', '\007', '\022', '\025', '\n', 
  '\021', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'X', 'I', 'A', 'O', 'M', 'I', '\020', '\010', '\022', '\032', '\n', '\026', 'C', 
  'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'Y', 'I', 'N', 'G', 'Y', 'O', 'N', 'G', 'H', 'U', 'I', '\020', '\t', '\022', '\023', 
  '\n', '\017', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'O', 'P', 'P', 'O', '\020', '\n', '\022', '\023', '\n', '\017', 'C', 'H', 
  'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'V', 'I', 'V', 'O', '\020', '\013', '\022', '\025', '\n', '\021', 'C', 'H', 'A', 'N', 'E', 'L', 
  'T', 'Y', 'P', 'E', '_', 'H', 'U', 'A', 'W', 'E', 'I', '\020', '\014', '\022', '\021', '\n', '\r', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 
  'P', 'E', '_', 'Q', 'Q', '\020', '\r', '\022', '\021', '\n', '\r', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'W', 'X', '\020', 
  '\016', '\022', '\021', '\n', '\r', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'U', 'C', '\020', '\017', '\022', '\024', '\n', '\020', 'C', 
  'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'J', 'I', 'N', 'L', 'I', '\020', '\020', '\022', '\024', '\n', '\020', 'C', 'H', 'A', 'N', 
  'E', 'L', 'T', 'Y', 'P', 'E', '_', 'M', 'E', 'I', 'Z', 'U', '\020', '\021', '\022', '\025', '\n', '\021', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 
  'Y', 'P', 'E', '_', 'L', 'Y', '_', 'I', 'O', 'S', '\020', '\022', '\022', '\026', '\n', '\022', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 
  'E', '_', 'T', 'W', 'I', 'T', 'T', 'E', 'R', '\020', '\023', '\022', '\023', '\n', '\017', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', 
  '_', 'L', 'I', 'N', 'E', '\020', '\024', '\022', '\022', '\n', '\016', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'D', 'M', 'M', 
  '\020', '\025', '\022', '\024', '\n', '\020', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'L', 'Y', '_', 'J', 'P', '\020', '\026', '\022', 
  '\031', '\n', '\025', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'G', 'O', 'O', 'G', 'L', 'E', '_', 'P', 'A', 'Y', '\020', 
  '\027', '\022', '\026', '\n', '\022', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'I', 'O', 'S', '_', 'P', 'A', 'Y', '\020', '\030', 
  '\022', '\030', '\n', '\024', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'B', 'I', 'L', 'I', '_', 'G', 'A', 'M', 'E', '\020', 
  '\031', '\022', '\033', '\n', '\027', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'G', 'O', 'O', 'G', 'L', 'E', '_', 'L', 'O', 
  'G', 'I', 'N', '\020', '\032', '\022', '\027', '\n', '\023', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'F', 'A', 'C', 'E', 'B', 
  'O', 'O', 'K', '\020', '\033', '\022', '\034', '\n', '\030', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'O', 'P', 'P', 'O', '_', 
  'O', 'V', 'E', 'R', 'S', 'E', 'A', 'S', '\020', '\034', '\022', '\032', '\n', '\026', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 
  'V', 'I', 'E', 'T', 'N', 'A', 'M', '_', 'I', 'O', 'S', '\020', '\035', '\022', '\035', '\n', '\031', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 
  'P', 'E', '_', 'V', 'I', 'E', 'T', 'N', 'A', 'M', '_', 'G', 'O', 'O', 'G', 'L', 'E', '\020', '\036', '\022', '\035', '\n', '\031', 'C', 'H', 
  'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'X', 'I', 'A', 'O', 'M', 'I', '_', 'O', 'V', 'E', 'R', 'S', 'E', 'A', '\020', '\037', 
  '\022', '\036', '\n', '\032', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'X', 'I', 'A', 'O', 'M', 'I', '_', 'O', 'V', 'E', 
  'R', 'S', 'E', 'A', '2', '\020', ' ', '\022', '\031', '\n', '\025', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'Q', 'Q', '_', 
  'I', 'O', 'S', '_', 'P', 'A', 'Y', '\020', '!', '\022', '\031', '\n', '\025', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'W', 
  'X', '_', 'I', 'O', 'S', '_', 'P', 'A', 'Y', '\020', '\"', '\022', '\032', '\n', '\026', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', 
  '_', 'V', 'I', 'E', 'T', 'N', 'A', 'M', '_', 'V', 'N', 'G', '\020', '#', '\022', '\030', '\n', '\024', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 
  'Y', 'P', 'E', '_', 'G', 'U', 'E', 'S', 'T', '_', 'I', 'O', 'S', '\020', '$', '\022', '\035', '\n', '\031', 'C', 'H', 'A', 'N', 'E', 'L', 
  'T', 'Y', 'P', 'E', '_', 'Q', 'Q', '_', 'A', 'N', 'D', 'R', 'O', 'I', 'D', '_', 'P', 'A', 'Y', '\020', '%', '\022', '\035', '\n', '\031', 
  'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'W', 'X', '_', 'A', 'N', 'D', 'R', 'O', 'I', 'D', '_', 'P', 'A', 'Y', 
  '\020', '&', '\022', '\033', '\n', '\027', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'V', 'I', 'V', 'O', '_', 'O', 'V', 'E', 
  'R', 'S', 'E', 'A', '\020', '\'', '\022', '\033', '\n', '\027', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'V', 'N', 'G', '_', 
  'F', 'I', 'R', 'E', 'B', 'A', 'S', 'E', '\020', ')', '\022', '\023', '\n', '\017', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 
  'E', 'P', 'I', 'C', '\020', '*', '\022', '\033', '\n', '\027', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'W', 'E', 'B', '_', 
  'F', 'A', 'C', 'E', 'B', 'O', 'O', 'K', '\020', '+', '\022', '\031', '\n', '\025', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 
  'W', 'E', 'B', '_', 'G', 'O', 'O', 'G', 'L', 'E', '\020', ',', '\022', '\032', '\n', '\026', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 
  'E', '_', 'S', 'U', 'M', 'S', 'A', 'N', 'G', '_', 'P', 'A', 'Y', '\020', '-', '\022', '\022', '\n', '\016', 'C', 'H', 'A', 'N', 'E', 'L', 
  'T', 'Y', 'P', 'E', '_', 'I', 'O', 'S', '\020', '.', '\022', '\026', '\n', '\022', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 
  'M', 'A', 'X', '_', 'N', 'U', 'M', '\020', '/', '\022', '\027', '\n', '\023', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'M', 
  'S', 'D', 'K', '_', 'I', 'O', 'S', '\020', '0', '\022', '\026', '\n', '\022', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'S', 
  'E', 'S', 'S', 'I', 'O', 'N', '\020', '2', '\022', '\021', '\n', '\r', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'I', 'D', 
  '\020', '3', '\022', '\032', '\n', '\026', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'A', 'I', '_', 'T', 'R', 'A', 'I', 'N', 
  'I', 'N', 'G', '\020', '4', '\022', '\035', '\n', '\031', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'H', 'U', 'A', 'W', 'E', 
  'I', '_', 'O', 'V', 'E', 'R', 'S', 'E', 'A', '\020', '5', '\022', '\027', '\n', '\023', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', 
  '_', 'L', 'A', 'U', 'N', 'C', 'H', 'E', 'R', '\020', '6', '\022', '\031', '\n', '\025', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', 
  '_', 'L', 'Y', '_', 'I', 'O', 'S', '_', 'P', 'A', 'Y', '\020', '7', '\022', '\022', '\n', '\016', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 
  'P', 'E', '_', 'P', 'S', '4', '\020', '8', '\022', '\032', '\n', '\026', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'L', 'Y', 
  '_', 'O', 'P', 'E', 'N', '_', 'P', 'A', 'Y', '\020', ':', '\022', '$', '\n', ' ', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', 
  '_', 'V', 'I', 'E', 'T', 'N', 'A', 'M', '_', 'G', 'O', 'O', 'G', 'L', 'E', '_', 'B', 'A', 'T', 'T', 'L', 'E', '\020', ';', '\022', 
  '\032', '\n', '\026', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'C', 'A', 'F', 'E', '_', 'B', 'A', 'Z', 'A', 'A', 'R', 
  '\020', '<', '\022', '!', '\n', '\035', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'V', 'I', 'E', 'T', 'N', 'A', 'M', '_', 
  'I', 'O', 'S', '_', 'B', 'A', 'T', 'T', 'L', 'E', '\020', '=', '\022', '\026', '\n', '\022', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 
  'E', '_', 'Y', 'I', 'L', 'E', 'W', 'A', 'N', '\020', '>', '\022', '\025', '\n', '\021', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', 
  '_', 'F', 'E', 'I', 'H', 'U', 'O', '\020', '?', '\022', '\030', '\n', '\024', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'F', 
  'E', 'I', 'H', 'U', 'O', '_', 'P', 'C', '\020', '@', '\022', '\025', '\n', '\021', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 
  'W', 'E', 'G', 'A', 'M', 'E', '\020', 'A', '\022', '\031', '\n', '\025', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'W', 'E', 
  'G', 'A', 'M', 'E', '_', 'I', 'O', 'S', '\020', 'B', '\022', '\035', '\n', '\031', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 
  'W', 'E', 'G', 'A', 'M', 'E', '_', 'A', 'N', 'D', 'R', 'O', 'I', 'D', '\020', 'C', '\022', '\027', '\n', '\023', 'C', 'H', 'A', 'N', 'E', 
  'L', 'T', 'Y', 'P', 'E', '_', 'P', 'A', 'N', 'G', 'O', 'L', 'I', 'N', '\020', 'D', '\022', '\024', '\n', '\020', 'C', 'H', 'A', 'N', 'E', 
  'L', 'T', 'Y', 'P', 'E', '_', 'A', 'D', 'M', 'O', 'B', '\020', 'E', '\022', '\026', '\n', '\022', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 
  'P', 'E', '_', 'P', 'S', '5', '_', 'P', 'A', 'Y', '\020', 'F', '\022', '\030', '\n', '\024', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 
  'E', '_', 'R', 'A', 'Z', 'E', 'R', '_', 'P', 'A', 'Y', '\020', 'G', '\022', '\025', '\n', '\021', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 
  'P', 'E', '_', 'G', 'M', '_', 'P', 'A', 'Y', '\020', 'H', '\022', '\027', '\n', '\023', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', 
  '_', 'C', 'O', 'D', 'A', '_', 'P', 'A', 'Y', '\020', 'I', '\022', '\024', '\n', '\020', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', 
  '_', 'L', 'Y', 'A', 'P', 'I', '\020', 'J', '\022', '\032', '\n', '\026', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'A', 'D', 
  '_', 'F', 'A', 'C', 'E', 'B', 'O', 'O', 'K', '\020', 'K', '\022', '\025', '\n', '\021', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', 
  '_', 'P', 'A', 'Y', 'P', 'A', 'L', '\020', 'L', '\022', '\025', '\n', '\021', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'X', 
  'S', 'O', 'L', 'L', 'A', '\020', 'M', '\022', '\025', '\n', '\021', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'N', 'O', 'W', 
  '_', 'G', 'G', '\020', 'N', '\022', '\030', '\n', '\024', 'C', 'H', 'A', 'N', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'S', 'T', 'E', 'A', 'M', 
  '_', 'P', 'A', 'Y', '\020', 'O', '*', 'H', '\n', '\007', 'N', 'E', 'T', 'T', 'Y', 'P', 'E', '\022', '\020', '\n', '\014', 'N', 'E', 'T', 'T', 
  'Y', 'P', 'E', '_', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\031', '\n', '\025', 'N', 'E', 'T', 'T', 'Y', 'P', 'E', '_', 'M', 'O', 'B', 
  'I', 'L', 'E', 'N', 'E', 'T', 'W', 'O', 'R', 'K', '\020', '\001', '\022', '\020', '\n', '\014', 'N', 'E', 'T', 'T', 'Y', 'P', 'E', '_', 'W', 
  'I', 'F', 'I', '\020', '\002', '*', 'G', '\n', '\t', 'L', 'O', 'G', 'I', 'N', 'T', 'Y', 'P', 'E', '\022', '\020', '\n', '\014', 'L', 'O', 'G', 
  'I', 'N', '_', 'N', 'O', 'R', 'M', 'A', 'L', '\020', '\000', '\022', '\023', '\n', '\017', 'L', 'O', 'G', 'I', 'N', '_', 'R', 'E', 'C', 'O', 
  'N', 'N', 'E', 'C', 'T', '\020', '\001', '\022', '\023', '\n', '\017', 'L', 'O', 'G', 'I', 'N', '_', 'P', 'V', 'P', 'F', 'I', 'N', 'I', 'S', 
  'H', '\020', '\002', '*', '?', '\n', '\n', 'L', 'A', 'U', 'N', 'C', 'H', 'T', 'Y', 'P', 'E', '\022', '\017', '\n', '\013', 'L', 'A', 'U', 'N', 
  'C', 'H', '_', 'G', 'A', 'M', 'E', '\020', '\000', '\022', '\021', '\n', '\r', 'L', 'A', 'U', 'N', 'C', 'H', '_', 'W', 'E', 'C', 'H', 'A', 
  'T', '\020', '\001', '\022', '\r', '\n', '\t', 'L', 'A', 'U', 'N', 'C', 'H', '_', 'Q', 'Q', '\020', '\002', '*', 'R', '\n', '\016', 'C', 'H', 'A', 
  'N', 'N', 'E', 'L', 'V', 'I', 'P', 'T', 'Y', 'P', 'E', '\022', '\023', '\n', '\017', 'C', 'H', 'A', 'N', 'N', 'E', 'L', 'V', 'I', 'P', 
  '_', 'N', 'O', 'N', 'E', '\020', '\000', '\022', '\024', '\n', '\020', 'C', 'H', 'A', 'N', 'N', 'E', 'L', 'V', 'I', 'P', '_', 'Q', 'Q', 'V', 
  'I', 'P', '\020', '\001', '\022', '\025', '\n', '\021', 'C', 'H', 'A', 'N', 'N', 'E', 'L', 'V', 'I', 'P', '_', 'Q', 'Q', 'S', 'V', 'I', 'P', 
  '\020', '\002', '*', 'j', '\n', '\021', 'C', 'H', 'A', 'R', 'G', 'E', 'R', 'E', 'S', 'U', 'L', 'T', '_', 'T', 'Y', 'P', 'E', '\022', '\032', 
  '\n', '\026', 'C', 'H', 'A', 'R', 'G', 'E', 'R', 'E', 'S', 'U', 'L', 'T', '_', 'T', 'Y', 'P', 'E', '_', 'N', 'U', 'L', 'L', '\020', 
  '\000', '\022', '\035', '\n', '\031', 'C', 'H', 'A', 'R', 'G', 'E', 'R', 'E', 'S', 'U', 'L', 'T', '_', 'T', 'Y', 'P', 'E', '_', 'S', 'U', 
  'C', 'C', 'E', 'S', 'S', '\020', '\001', '\022', '\032', '\n', '\026', 'C', 'H', 'A', 'R', 'G', 'E', 'R', 'E', 'S', 'U', 'L', 'T', '_', 'T', 
  'Y', 'P', 'E', '_', 'F', 'A', 'I', 'L', '\020', '\002', '*', 'Q', '\n', '\017', 'C', 'H', 'E', 'S', 'T', '_', 'O', 'P', 'E', 'N', '_', 
  'T', 'Y', 'P', 'E', '\022', '\030', '\n', '\024', 'C', 'H', 'E', 'S', 'T', '_', 'O', 'P', 'E', 'N', '_', 'T', 'Y', 'P', 'E', '_', 'N', 
  'U', 'L', 'L', '\020', '\000', '\022', '\017', '\n', '\013', 'H', 'I', 'G', 'H', '_', 'S', 'E', 'C', 'R', 'E', 'T', '\020', '\001', '\022', '\023', '\n', 
  '\017', 'O', 'R', 'D', 'I', 'N', 'A', 'R', 'Y', '_', 'S', 'E', 'C', 'R', 'E', 'T', '\020', '\002', '*', '\356', '\n', '\n', '\010', 'I', 'T', 
  'E', 'M', 'T', 'Y', 'P', 'E', '\022', '\021', '\n', '\r', 'I', 'T', 'E', 'M', 'T', 'Y', 'P', 'E', '_', 'N', 'U', 'L', 'L', '\020', '\000', 
  '\022', '\t', '\n', '\005', 'M', 'O', 'N', 'E', 'Y', '\020', '\001', '\022', '\026', '\n', '\022', 'C', 'H', 'E', 'S', 'S', '_', 'P', 'L', 'A', 'Y', 
  'E', 'R', '_', 'M', 'O', 'D', 'E', 'L', '\020', '\002', '\022', '\t', '\n', '\005', 'S', 'C', 'E', 'N', 'E', '\020', '\003', '\022', '\014', '\n', '\010', 
  'H', 'E', 'A', 'D', '_', 'P', 'I', 'C', '\020', '\004', '\022', '\027', '\n', '\023', 'C', 'H', 'E', 'S', 'S', '_', 'P', 'L', 'A', 'Y', 'E', 
  'R', '_', 'A', 'C', 'T', 'I', 'O', 'N', '\020', '\005', '\022', '\030', '\n', '\024', 'C', 'H', 'E', 'S', 'S', '_', 'P', 'L', 'A', 'Y', 'E', 
  'R', '_', 'P', 'I', 'C', 'T', 'U', 'R', 'E', '\020', '\006', '\022', '\026', '\n', '\022', 'C', 'H', 'E', 'S', 'S', '_', 'P', 'L', 'A', 'Y', 
  'E', 'R', '_', 'V', 'O', 'I', 'C', 'E', '\020', '\007', '\022', '\017', '\n', '\013', 'B', 'A', 'T', 'T', 'L', 'E', '_', 'S', 'T', 'A', 'R', 
  '\020', '\010', '\022', '\013', '\n', '\007', 'D', 'I', 'A', 'M', 'O', 'N', 'D', '\020', '\t', '\022', '\016', '\n', '\n', 'P', 'L', 'A', 'Y', 'E', 'R', 
  '_', 'E', 'X', 'P', '\020', '\n', '\022', '\022', '\n', '\016', 'E', 'X', 'P', '_', 'B', 'O', 'N', 'U', 'S', '_', 'C', 'A', 'R', 'D', '\020', 
  '\013', '\022', '\024', '\n', '\020', 'C', 'A', 'N', 'D', 'Y', '_', 'B', 'O', 'N', 'U', 'S', '_', 'C', 'A', 'R', 'D', '\020', '\014', '\022', '\017', 
  '\n', '\013', 'R', 'E', 'N', 'A', 'M', 'E', '_', 'C', 'A', 'R', 'D', '\020', '\r', '\022', '\023', '\n', '\017', 'D', 'I', 'R', 'E', 'C', 'T', 
  '_', 'L', 'E', 'V', 'E', 'L', '_', 'U', 'P', '\020', '\016', '\022', '\016', '\n', '\n', 'S', 'C', 'E', 'N', 'E', '_', 'S', 'K', 'I', 'N', 
  '\020', '\017', '\022', '\021', '\n', '\r', 'C', 'H', 'E', 'S', 'S', '_', 'E', 'F', 'F', 'E', 'C', 'T', 'S', '\020', '\020', '\022', '\020', '\n', '\014', 
  'C', 'H', 'E', 'S', 'S', '_', 'A', 'C', 'T', 'I', 'O', 'N', '\020', '\021', '\022', '\017', '\n', '\013', 'C', 'H', 'E', 'S', 'S', '_', 'V', 
  'O', 'I', 'C', 'E', '\020', '\022', '\022', '\013', '\n', '\007', 'E', 'M', 'O', 'T', 'I', 'O', 'N', '\020', '\023', '\022', '\022', '\n', '\016', 'H', 'E', 
  'A', 'D', '_', 'P', 'I', 'C', '_', 'F', 'R', 'A', 'M', 'E', '\020', '\024', '\022', '\027', '\n', '\023', 'P', 'E', 'R', 'S', 'O', 'N', 'A', 
  'L', '_', 'B', 'A', 'C', 'K', 'G', 'R', 'O', 'U', 'N', 'D', '\020', '\025', '\022', '\017', '\n', '\013', 'C', 'H', 'A', 'T', '_', 'B', 'U', 
  'B', 'B', 'L', 'E', '\020', '\026', '\022', '\025', '\n', '\021', 'A', 'D', 'V', 'A', 'N', 'C', 'E', 'D', '_', 'P', 'A', 'S', 'S', 'P', 'O', 
  'R', 'T', '\020', '\027', '\022', '\020', '\n', '\014', 'C', 'H', 'A', 'T', '_', 'D', 'A', 'N', 'M', 'A', 'K', 'U', '\020', '\030', '\022', '\030', '\n', 
  '\024', 'C', 'H', 'E', 'S', 'S', '_', 'C', 'O', 'M', 'B', 'I', 'N', 'E', '_', 'E', 'F', 'F', 'E', 'C', 'T', '\020', '\031', '\022', '\026', 
  '\n', '\022', 'S', 'T', 'R', 'E', 'A', 'K', '_', 'W', 'I', 'N', '_', 'T', 'O', 'O', 'L', 'T', 'I', 'P', '\020', '\032', '\022', '\024', '\n', 
  '\020', 'H', 'E', 'A', 'D', '_', 'P', 'I', 'C', '_', 'P', 'E', 'N', 'D', 'A', 'N', 'T', '\020', '\033', '\022', '\022', '\n', '\016', 'C', 'H', 
  'I', 'C', 'K', 'E', 'N', '_', 'A', 'C', 'T', 'I', 'O', 'N', '\020', '\034', '\022', '\024', '\n', '\020', 'R', 'O', 'U', 'N', 'D', '_', 'B', 
  'E', 'G', 'I', 'N', '_', 'P', 'O', 'S', 'E', '\020', '\035', '\022', '\021', '\n', '\r', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '_', 'C', 
  'O', 'I', 'N', '\020', '\036', '\022', '\026', '\n', '\022', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '_', 'T', 'A', 'S', 'K', '_', 'C', 'A', 
  'R', 'D', '\020', '\037', '\022', '\016', '\n', '\n', 'R', 'A', 'N', 'D', '_', 'C', 'H', 'E', 'S', 'T', '\020', ' ', '\022', '\016', '\n', '\n', 'E', 
  'G', 'G', '_', 'T', 'I', 'C', 'K', 'E', 'T', '\020', '!', '\022', '\023', '\n', '\017', 'E', 'X', 'P', 'E', 'R', 'I', 'E', 'N', 'C', 'E', 
  '_', 'C', 'A', 'R', 'D', '\020', '\"', '\022', '\017', '\n', '\013', 'D', 'R', 'E', 'S', 'S', '_', 'P', 'I', 'E', 'C', 'E', '\020', '#', '\022', 
  '\023', '\n', '\017', 'G', 'I', 'N', 'G', 'E', 'R', 'B', 'R', 'E', 'A', 'D', '_', 'M', 'A', 'N', '\020', '$', '\022', '\r', '\n', '\t', 'T', 
  'W', 'O', '_', 'S', 'C', 'E', 'N', 'E', '\020', '%', '\022', '\016', '\n', '\n', 'C', 'H', 'E', 'S', 'S', '_', 'S', 'K', 'I', 'N', '\020', 
  '&', '\022', '\020', '\n', '\014', 'D', 'I', 'R', 'E', 'C', 'T', '_', 'M', 'O', 'N', 'E', 'Y', '\020', '\'', '\022', '\025', '\n', '\021', 'C', 'H', 
  'E', 'S', 'S', '_', 'P', 'L', 'A', 'Y', 'E', 'R', '_', 'W', 'E', 'A', 'R', '\020', '(', '\022', '\027', '\n', '\023', 'C', 'H', 'E', 'S', 
  'S', '_', 'P', 'L', 'A', 'Y', 'E', 'R', '_', 'W', 'E', 'A', 'P', 'O', 'N', '\020', ')', '\022', '\025', '\n', '\021', 'C', 'H', 'E', 'S', 
  'S', '_', 'P', 'L', 'A', 'Y', 'E', 'R', '_', 'R', 'I', 'D', 'E', '\020', '*', '\022', '\007', '\n', '\003', 'K', 'E', 'Y', '\020', '+', '\022', 
  '\033', '\n', '\027', 'T', 'O', 'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', '_', 'P', 'O', 'I', 'N', 'T', '_', 'G', 'L', 'O', 'B', 'A', 
  'L', '\020', ',', '\022', '\031', '\n', '\025', 'T', 'O', 'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', '_', 'P', 'O', 'I', 'N', 'T', '_', 'P', 
  'A', 'R', 'T', '\020', '-', '\022', '\032', '\n', '\026', 'T', 'O', 'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', '_', 'P', 'O', 'I', 'N', 'T', 
  '_', 'R', 'O', 'U', 'N', 'D', '\020', '.', '\022', '\025', '\n', '\021', 'T', 'O', 'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', '_', 'T', 'I', 
  'C', 'K', 'E', 'T', '\020', '/', '\022', '\024', '\n', '\020', 'D', 'E', 'D', 'U', 'C', 'T', 'I', 'O', 'N', '_', 'C', 'O', 'U', 'P', 'O', 
  'N', '\020', '0', '\022', '\022', '\n', '\016', 'D', 'E', 'D', 'U', 'C', 'T', 'I', 'O', 'N', '_', 'M', 'A', 'L', 'L', '\020', '1', '\022', '\026', 
  '\n', '\022', 'I', 'T', '_', 'W', 'O', 'R', 'K', 'S', 'H', 'O', 'P', '_', 'T', 'I', 'C', 'K', 'E', 'T', '\020', '2', '\022', '\025', '\n', 
  '\021', 'C', 'H', 'E', 'S', 'S', '_', 'S', 'K', 'I', 'N', '_', 'D', 'E', 'B', 'R', 'I', 'S', '\020', '3', '\022', '\027', '\n', '\023', 'C', 
  'H', 'E', 'S', 'S', '_', 'P', 'L', 'A', 'Y', 'E', 'R', '_', 'D', 'E', 'B', 'R', 'I', 'S', '\020', '4', '\022', '\020', '\n', '\014', 'S', 
  'C', 'E', 'N', 'E', '_', 'D', 'E', 'B', 'R', 'I', 'S', '\020', '5', '\022', '\027', '\n', '\023', 'E', 'X', 'P', 'I', 'R', 'E', 'D', '_', 
  'S', 'K', 'I', 'N', '_', 'D', 'E', 'B', 'R', 'I', 'S', '\020', '6', '\022', '\023', '\n', '\017', 'P', 'R', 'O', 'T', 'E', 'C', 'T', 'I', 
  'O', 'N', '_', 'C', 'A', 'R', 'D', '\020', '8', '\022', '\021', '\n', '\r', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '_', 'C', 'A', 'R', 
  'D', '\020', '9', '\022', '\023', '\n', '\017', 'B', 'I', 'G', 'W', 'I', 'N', 'N', 'E', 'R', '_', 'S', 'C', 'O', 'R', 'E', '\020', ':', '\022', 
  '\t', '\n', '\005', 'M', 'E', 'D', 'A', 'L', '\020', ';', '\022', '\022', '\n', '\016', 'C', 'H', 'E', 'S', 'S', 'S', 'K', 'I', 'N', '_', 'S', 
  'U', 'I', 'T', '\020', '<', '\022', '\010', '\n', '\004', 'S', 'L', 'A', 'G', '\020', '=', '\022', '\024', '\n', '\020', 'I', 'T', 'E', 'M', 'T', 'Y', 
  'P', 'E', '_', 'N', 'O', 'T', 'U', 'S', 'E', 'D', '\020', '>', '\022', '\030', '\n', '\024', 'I', 'T', 'E', 'M', 'T', 'Y', 'P', 'E', '_', 
  'A', 'F', 'F', 'I', 'X', '_', 'S', 'A', 'V', 'E', 'R', '\020', '?', '\022', '\021', '\n', '\r', 'D', 'A', 'N', 'M', 'A', 'K', 'U', '_', 
  'F', 'L', 'O', 'O', 'R', '\020', '@', '\022', '\024', '\n', '\020', 'I', 'T', 'E', 'M', 'T', 'Y', 'P', 'E', '_', 'C', 'O', 'O', 'K', 'I', 
  'E', 'S', '\020', 'A', '\022', '\024', '\n', '\020', 'I', 'T', 'E', 'M', 'T', 'Y', 'P', 'E', '_', 'M', 'A', 'X', '_', 'N', 'U', 'M', '\020', 
  'B', '\022', '\017', '\n', '\013', 'M', 'E', 'D', 'A', 'L', '_', 'S', 'C', 'O', 'R', 'E', '\020', 'C', '\022', '\025', '\n', '\021', 'L', 'Y', '_', 
  'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'L', 'I', 'M', 'I', 'T', '\020', 'D', '\022', '\022', '\n', '\016', 'I', 'N', 'S', 'U', 'R', 
  'A', 'N', 'C', 'E', '_', 'C', 'A', 'R', 'D', '\020', 'E', '*', 'e', '\n', '\013', 'I', 'T', 'E', 'M', 'Q', 'U', 'A', 'L', 'I', 'T', 
  'Y', '\022', '\010', '\n', '\004', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\t', '\n', '\005', 'W', 'H', 'I', 'T', 'E', '\020', '\001', '\022', '\t', '\n', 
  '\005', 'G', 'R', 'E', 'E', 'N', '\020', '\002', '\022', '\010', '\n', '\004', 'B', 'L', 'U', 'E', '\020', '\003', '\022', '\n', '\n', '\006', 'P', 'U', 'R', 
  'P', 'L', 'E', '\020', '\004', '\022', '\n', '\n', '\006', 'O', 'R', 'A', 'N', 'G', 'E', '\020', '\005', '\022', '\007', '\n', '\003', 'R', 'E', 'D', '\020', 
  '\006', '\022', '\013', '\n', '\007', 'M', 'A', 'X', '_', 'N', 'U', 'M', '\020', '\007', '*', '\202', '\001', '\n', '\013', 'I', 'T', 'E', 'M', 'S', 'H', 
  'A', 'R', 'E', 'B', 'G', '\022', '\013', '\n', '\007', 'B', 'G', '_', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\r', '\n', '\t', 'B', 'G', '_', 
  'O', 'R', 'A', 'N', 'G', 'E', '\020', '\001', '\022', '\020', '\n', '\014', 'B', 'G', '_', 'B', 'R', 'O', 'W', 'N', 'N', 'E', 'S', 'S', '\020', 
  '\002', '\022', '\013', '\n', '\007', 'B', 'G', '_', 'B', 'L', 'U', 'E', '\020', '\003', '\022', '\014', '\n', '\010', 'B', 'G', '_', 'G', 'R', 'E', 'E', 
  'N', '\020', '\004', '\022', '\r', '\n', '\t', 'B', 'G', '_', 'P', 'U', 'R', 'P', 'L', 'E', '\020', '\005', '\022', '\013', '\n', '\007', 'B', 'G', '_', 
  'G', 'R', 'A', 'Y', '\020', '\006', '\022', '\016', '\n', '\n', 'B', 'G', '_', 'M', 'A', 'X', '_', 'N', 'U', 'M', '\020', '\007', '*', '/', '\n', 
  '\r', 'I', 'T', 'E', 'M', 'A', 'C', 'C', 'U', 'M', 'T', 'Y', 'P', 'E', '\022', '\020', '\n', '\014', 'N', 'O', 'T', '_', 'M', 'U', 'L', 
  'T', 'I', 'P', 'L', 'Y', '\020', '\000', '\022', '\014', '\n', '\010', 'M', 'U', 'L', 'T', 'I', 'P', 'L', 'Y', '\020', '\001', '*', '=', '\n', '\016', 
  'I', 'T', 'E', 'M', 'S', 'E', 'L', 'L', 'S', 'T', 'A', 'T', 'U', 'S', '\022', '\014', '\n', '\010', 'N', 'O', 'T', '_', 'S', 'E', 'L', 
  'L', '\020', '\000', '\022', '\010', '\n', '\004', 'S', 'E', 'L', 'L', '\020', '\001', '\022', '\023', '\n', '\017', 'I', 'N', 'D', 'A', 'T', 'E', '_', 'N', 
  'O', 'T', '_', 'S', 'E', 'L', 'L', '\020', '\002', '*', '\200', '\003', '\n', '\007', 'P', 'V', 'P', 'M', 'O', 'D', 'E', '\022', '\016', '\n', '\n', 
  'A', 'U', 'T', 'O', '_', 'C', 'H', 'E', 'S', 'S', '\020', '\000', '\022', '\023', '\n', '\017', 'A', 'U', 'T', 'O', '_', 'C', 'H', 'E', 'S', 
  'S', '_', 'R', 'A', 'N', 'K', '\020', '\001', '\022', '\n', '\n', '\006', 'C', 'U', 'S', 'T', 'O', 'M', '\020', '\002', '\022', '\016', '\n', '\n', 'N', 
  'E', 'W', '_', 'P', 'L', 'A', 'Y', 'E', 'R', '\020', '\003', '\022', '\t', '\n', '\005', 'M', 'E', 'L', 'E', 'E', '\020', '\004', '\022', '\017', '\n', 
  '\013', 'T', 'E', 'A', 'M', '_', 'B', 'A', 'T', 'T', 'L', 'E', '\020', '\005', '\022', '\024', '\n', '\020', 'T', 'E', 'A', 'M', '_', 'B', 'A', 
  'T', 'T', 'L', 'E', '_', 'R', 'A', 'N', 'K', '\020', '\006', '\022', '\023', '\n', '\017', 'C', 'O', 'M', 'B', 'A', 'T', '_', 'T', 'R', 'A', 
  'I', 'N', 'I', 'N', 'G', '\020', '\007', '\022', '\024', '\n', '\020', 'N', 'E', 'W', '_', 'P', 'L', 'A', 'Y', 'E', 'R', '_', 'G', 'U', 'I', 
  'D', 'E', '\020', '\010', '\022', '\021', '\n', '\r', 'C', 'U', 'S', 'T', 'O', 'M', '_', 'B', 'A', 'T', 'T', 'L', 'E', '\020', '\t', '\022', '\020', 
  '\n', '\014', 'T', 'E', 'A', 'C', 'H', '_', 'B', 'A', 'T', 'T', 'L', 'E', '\020', '\013', '\022', '\014', '\n', '\010', 'A', 'I', '_', 'T', 'R', 
  'A', 'I', 'N', '\020', '\014', '\022', '\r', '\n', '\t', 'B', 'I', 'G', 'W', 'I', 'N', 'N', 'E', 'R', '\020', '\r', '\022', '\014', '\n', '\010', 'T', 
  'W', 'O', 'V', 'S', 'T', 'W', 'O', '\020', '\016', '\022', '\016', '\n', '\n', 'F', 'O', 'U', 'R', 'V', 'S', 'F', 'O', 'U', 'R', '\020', '\017', 
  '\022', '\023', '\n', '\017', 'F', 'O', 'U', 'R', 'V', 'S', 'F', 'O', 'U', 'R', '_', 'R', 'A', 'N', 'K', '\020', '\020', '\022', '\014', '\n', '\010', 
  'N', 'I', 'A', 'N', '_', 'P', 'V', 'E', '\020', '\021', '\022', '\007', '\n', '\003', 'P', 'V', 'E', '\020', '\022', '\022', '\022', '\n', '\016', 'O', 'L', 
  'D', '_', 'A', 'U', 'T', 'O', '_', 'C', 'H', 'E', 'S', 'S', '\020', '\023', '\022', '\022', '\n', '\016', 'O', 'L', 'D', '_', 'F', 'O', 'U', 
  'R', 'V', 'S', 'F', 'O', 'U', 'R', '\020', '\024', '\022', '\021', '\n', '\r', 'T', 'O', 'W', 'E', 'R', '_', 'D', 'E', 'F', 'E', 'N', 'S', 
  'E', '\020', '\025', '\022', '\020', '\n', '\014', 'M', 'O', 'D', 'E', '_', 'M', 'A', 'X', '_', 'N', 'U', 'M', '\020', '\026', '*', 'W', '\n', '\t', 
  'T', 'E', 'A', 'M', 'G', 'R', 'O', 'U', 'P', '\022', '\023', '\n', '\017', 'T', 'Y', 'P', 'E', '_', 'C', 'O', 'M', 'P', 'E', 'T', 'O', 
  'T', 'P', 'R', '\020', '\000', '\022', '\021', '\n', '\r', 'T', 'Y', 'P', 'E', '_', 'O', 'B', 'S', 'E', 'R', 'V', 'E', 'R', '\020', '\001', '\022', 
  '\020', '\n', '\014', 'T', 'Y', 'P', 'E', '_', 'R', 'E', 'F', 'E', 'R', 'E', 'E', '\020', '\002', '\022', '\020', '\n', '\014', 'T', 'Y', 'P', 'E', 
  '_', 'M', 'A', 'X', '_', 'N', 'U', 'M', '\020', '\003', '*', '9', '\n', '\010', 'T', 'E', 'A', 'M', 'T', 'Y', 'P', 'E', '\022', '\n', '\n', 
  '\006', 'N', 'O', 'R', 'M', 'A', 'L', '\020', '\000', '\022', '\014', '\n', '\010', 'O', 'B', 'S', 'E', 'R', 'V', 'E', 'R', '\020', '\001', '\022', '\023', 
  '\n', '\017', 'T', 'O', 'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', '_', 'R', 'O', 'O', 'M', '\020', '\003', '*', 'L', '\n', '\021', 'T', 'E', 
  'A', 'M', 'G', 'R', 'O', 'U', 'P', 'B', 'E', 'G', 'I', 'N', 'I', 'D', 'X', '\022', '\022', '\n', '\016', 'I', 'D', 'X', '_', 'C', 'O', 
  'M', 'P', 'E', 'T', 'O', 'T', 'P', 'R', '\020', '\000', '\022', '\020', '\n', '\013', 'I', 'D', 'X', '_', 'R', 'E', 'F', 'E', 'R', 'E', 'E', 
  '\020', '\350', '\007', '\022', '\021', '\n', '\014', 'I', 'D', 'X', '_', 'O', 'B', 'S', 'E', 'R', 'V', 'E', 'R', '\020', '\320', '\017', '*', '\301', '\001', 
  '\n', '\006', 'T', 'E', 'A', 'M', 'O', 'P', '\022', '\013', '\n', '\007', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '\020', '\000', '\022', '\020', '\n', '\014', 
  'S', 'W', 'I', 'T', 'C', 'H', '_', 'G', 'R', 'O', 'U', 'P', '\020', '\001', '\022', '\021', '\n', '\r', 'A', 'P', 'P', 'O', 'I', 'N', 'T', 
  'L', 'E', 'A', 'D', 'E', 'R', '\020', '\002', '\022', '\020', '\n', '\014', 'R', 'E', 'F', 'R', 'E', 'S', 'H', '_', 'S', 'L', 'O', 'T', '\020', 
  '\003', '\022', '\025', '\n', '\021', 'S', 'E', 'L', 'F', '_', 'S', 'W', 'I', 'T', 'C', 'H', '_', 'G', 'R', 'O', 'U', 'P', '\020', '\004', '\022', 
  '\024', '\n', '\020', 'I', 'N', 'V', 'I', 'T', 'E', '_', 'J', 'O', 'I', 'N', '_', 'T', 'E', 'A', 'M', '\020', '\005', '\022', '\017', '\n', '\013', 
  'C', 'H', 'A', 'N', 'G', 'E', '_', 'N', 'A', 'M', 'E', '\020', '\006', '\022', '\017', '\n', '\013', 'S', 'W', 'I', 'T', 'C', 'H', '_', 'S', 
  'L', 'O', 'T', '\020', '\007', '\022', '\021', '\n', '\r', 'B', 'E', 'T', '_', 'O', 'N', '_', 'B', 'O', 'U', 'N', 'T', 'Y', '\020', '\010', '\022', 
  '\021', '\n', '\r', 'U', 'P', 'D', 'A', 'T', 'E', '_', 'D', 'E', 'B', 'U', 'F', 'F', '\020', '\t', '*', '&', '\n', '\016', 'O', 'F', 'F', 
  'L', 'I', 'N', 'E', '_', 'I', 'N', 'V', 'I', 'T', 'E', '\022', '\t', '\n', '\005', 'T', 'X', '_', 'W', 'X', '\020', '\000', '\022', '\t', '\n', 
  '\005', 'T', 'X', '_', 'Q', 'Q', '\020', '\001', '*', 'V', '\n', '\007', 'W', 'I', 'N', 'T', 'Y', 'P', 'E', '\022', '\020', '\n', '\014', 'W', 'I', 
  'N', 'T', 'Y', 'P', 'E', '_', 'F', 'A', 'I', 'L', '\020', '\000', '\022', '\017', '\n', '\013', 'W', 'I', 'N', 'T', 'Y', 'P', 'E', '_', 'W', 
  'I', 'N', '\020', '\001', '\022', '\020', '\n', '\014', 'W', 'I', 'N', 'T', 'Y', 'P', 'E', '_', 'D', 'R', 'A', 'W', '\020', '\002', '\022', '\026', '\n', 
  '\022', 'W', 'I', 'N', 'T', 'Y', 'P', 'E', '_', 'N', 'O', 'T', '_', 'U', 'P', 'D', 'A', 'T', 'E', '\020', '\003', '*', '\301', '\003', '\n', 
  '\010', 'R', 'A', 'N', 'K', 'T', 'Y', 'P', 'E', '\022', '\021', '\n', '\r', 'R', 'A', 'N', 'K', 'T', 'Y', 'P', 'E', '_', 'N', 'U', 'L', 
  'L', '\020', '\000', '\022', '\020', '\n', '\014', 'R', 'A', 'N', 'K', 'T', 'Y', 'P', 'E', '_', 'M', 'M', 'R', '\020', '\001', '\022', '\033', '\n', '\027', 
  'R', 'A', 'N', 'K', 'T', 'Y', 'P', 'E', '_', 'M', 'V', 'P', '_', 'A', 'U', 'T', 'O', '_', 'C', 'H', 'E', 'S', 'S', '\020', '\002', 
  '\022', ' ', '\n', '\034', 'R', 'A', 'N', 'K', 'T', 'Y', 'P', 'E', '_', 'M', 'V', 'P', '_', 'A', 'U', 'T', 'O', '_', 'C', 'H', 'E', 
  'S', 'S', '_', 'R', 'A', 'N', 'K', '\020', '\003', '\022', '\033', '\n', '\027', 'R', 'A', 'N', 'K', 'T', 'Y', 'P', 'E', '_', 'M', 'V', 'P', 
  '_', 'N', 'E', 'W', '_', 'P', 'L', 'A', 'Y', 'E', 'R', '\020', '\004', '\022', '\026', '\n', '\022', 'R', 'A', 'N', 'K', 'T', 'Y', 'P', 'E', 
  '_', 'M', 'V', 'P', '_', 'M', 'E', 'L', 'E', 'E', '\020', '\005', '\022', '\034', '\n', '\030', 'R', 'A', 'N', 'K', 'T', 'Y', 'P', 'E', '_', 
  'M', 'M', 'R', '_', 'T', 'E', 'A', 'M', '_', 'B', 'A', 'T', 'T', 'L', 'E', '\020', '\006', '\022', '\034', '\n', '\030', 'R', 'A', 'N', 'K', 
  'T', 'Y', 'P', 'E', '_', 'M', 'V', 'P', '_', 'T', 'E', 'A', 'M', '_', 'B', 'A', 'T', 'T', 'L', 'E', '\020', '\007', '\022', '!', '\n', 
  '\035', 'R', 'A', 'N', 'K', 'T', 'Y', 'P', 'E', '_', 'M', 'V', 'P', '_', 'T', 'E', 'A', 'M', '_', 'B', 'A', 'T', 'T', 'L', 'E', 
  '_', 'R', 'A', 'N', 'K', '\020', '\010', '\022', '\030', '\n', '\024', 'R', 'A', 'N', 'K', 'T', 'Y', 'P', 'E', '_', 'B', 'A', 'T', 'T', 'L', 
  'E', '_', 'S', 'T', 'A', 'R', '\020', '\t', '\022', '\031', '\n', '\025', 'R', 'A', 'N', 'K', 'T', 'Y', 'P', 'E', '_', 'P', 'L', 'A', 'Y', 
  'E', 'R', '_', 'L', 'E', 'V', 'E', 'L', '\020', '\n', '\022', '\027', '\n', '\023', 'R', 'A', 'N', 'K', 'T', 'Y', 'P', 'E', '_', 'T', 'O', 
  'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', '\020', '\013', '\022', '\"', '\n', '\036', 'R', 'A', 'N', 'K', 'T', 'Y', 'P', 'E', '_', 'B', 'I', 
  'G', 'W', 'I', 'N', 'N', 'E', 'R', '_', 'S', 'E', 'A', 'S', 'O', 'N', 'S', 'C', 'O', 'R', 'E', '\020', '\014', '\022', ' ', '\n', '\034', 
  'R', 'A', 'N', 'K', 'T', 'Y', 'P', 'E', '_', 'F', 'O', 'U', 'R', 'V', 'S', 'F', 'O', 'U', 'R', '_', 'M', 'M', 'R', '_', 'R', 
  'A', 'N', 'K', '\020', '\r', '\022', '\023', '\n', '\017', 'R', 'A', 'N', 'K', 'T', 'Y', 'P', 'E', '_', 'M', 'E', 'N', 'T', 'O', 'R', '\020', 
  '\016', '\022', '\024', '\n', '\020', 'R', 'A', 'N', 'K', 'T', 'Y', 'P', 'E', '_', 'M', 'A', 'X', '_', 'N', 'U', 'M', '\020', '\017', '*', '\276', 
  '\001', '\n', '\013', 'F', 'R', 'O', 'Z', 'E', 'N', '_', 'T', 'Y', 'P', 'E', '\022', '\024', '\n', '\020', 'F', 'R', 'O', 'Z', 'E', 'N', '_', 
  'T', 'Y', 'P', 'E', '_', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\027', '\n', '\023', 'F', 'R', 'O', 'Z', 'E', 'N', '_', 'T', 'Y', 'P', 
  'E', '_', 'A', 'C', 'C', 'O', 'U', 'N', 'T', '\020', '\001', '\022', '\023', '\n', '\017', 'F', 'R', 'O', 'Z', 'E', 'N', '_', 'T', 'Y', 'P', 
  'E', '_', 'D', 'E', 'V', '\020', '\002', '\022', '\024', '\n', '\020', 'F', 'R', 'O', 'Z', 'E', 'N', '_', 'T', 'Y', 'P', 'E', '_', 'C', 'H', 
  'A', 'T', '\020', '\003', '\022', '\035', '\n', '\031', 'F', 'R', 'O', 'Z', 'E', 'N', '_', 'T', 'Y', 'P', 'E', '_', 'P', 'U', 'B', 'L', 'I', 
  'S', 'H', '_', 'S', 'T', 'A', 'T', 'E', '\020', '\004', '\022', '\035', '\n', '\031', 'F', 'R', 'O', 'Z', 'E', 'N', '_', 'T', 'Y', 'P', 'E', 
  '_', 'G', 'R', 'O', 'W', 'U', 'P', '_', 'D', 'E', 'F', 'E', 'N', 'D', '\020', '\005', '\022', '\027', '\n', '\023', 'F', 'R', 'O', 'Z', 'E', 
  'N', '_', 'T', 'Y', 'P', 'E', '_', 'M', 'A', 'X', '_', 'N', 'U', 'M', '\020', '\006', '*', '\317', '\002', '\n', '\n', 'N', 'O', 'T', 'I', 
  'C', 'E', 'T', 'Y', 'P', 'E', '\022', '\023', '\n', '\017', 'N', 'O', 'T', 'I', 'C', 'E', 'T', 'Y', 'P', 'E', '_', 'N', 'U', 'L', 'L', 
  '\020', '\000', '\022', '\023', '\n', '\017', 'N', 'O', 'T', 'I', 'C', 'E', 'T', 'Y', 'P', 'E', '_', 'O', 'P', 'E', 'N', '\020', '\001', '\022', '\023', 
  '\n', '\017', 'N', 'O', 'T', 'I', 'C', 'E', 'T', 'Y', 'P', 'E', '_', 'S', 'T', 'O', 'P', '\020', '\002', '\022', '\034', '\n', '\030', 'N', 'O', 
  'T', 'I', 'C', 'E', 'T', 'Y', 'P', 'E', '_', 'F', 'R', 'O', 'Z', 'E', '_', 'A', 'C', 'C', 'O', 'U', 'N', 'T', '\020', '\003', '\022', 
  '\030', '\n', '\024', 'N', 'O', 'T', 'I', 'C', 'E', 'T', 'Y', 'P', 'E', '_', 'F', 'R', 'O', 'Z', 'E', '_', 'D', 'E', 'V', '\020', '\004', 
  '\022', '\034', '\n', '\030', 'N', 'O', 'T', 'I', 'C', 'E', 'T', 'Y', 'P', 'E', '_', 'L', 'Y', '_', 'W', 'H', 'I', 'T', 'E', '_', 'L', 
  'I', 'S', 'T', '\020', '\005', '\022', '\032', '\n', '\026', 'N', 'O', 'T', 'I', 'C', 'E', 'T', 'Y', 'P', 'E', '_', 'A', 'C', 'T', 'I', 'V', 
  'E', '_', 'C', 'O', 'D', 'E', '\020', '\006', '\022', '\032', '\n', '\026', 'N', 'O', 'T', 'I', 'C', 'E', 'T', 'Y', 'P', 'E', '_', 'A', 'P', 
  'K', '_', 'U', 'P', 'G', 'R', 'A', 'D', 'E', '\020', '\007', '\022', '\037', '\n', '\033', 'N', 'O', 'T', 'I', 'C', 'E', 'T', 'Y', 'P', 'E', 
  '_', 'R', 'E', 'S', 'O', 'U', 'R', 'C', 'E', '_', 'U', 'P', 'G', 'R', 'A', 'D', 'E', '\020', '\010', '\022', '\"', '\n', '\036', 'N', 'O', 
  'T', 'I', 'C', 'E', 'T', 'Y', 'P', 'E', '_', 'F', 'R', 'O', 'Z', 'E', '_', 'G', 'R', 'O', 'W', 'U', 'P', '_', 'D', 'E', 'F', 
  'E', 'N', 'D', '\020', '\t', '\022', '\027', '\n', '\023', 'N', 'O', 'T', 'I', 'C', 'E', 'T', 'Y', 'P', 'E', '_', 'P', 'R', 'E', 'L', 'O', 
  'G', 'I', 'N', '\020', '\n', '\022', '\026', '\n', '\022', 'N', 'O', 'T', 'I', 'C', 'E', 'T', 'Y', 'P', 'E', '_', 'M', 'A', 'X', '_', 'N', 
  'U', 'M', '\020', '\013', '*', 'h', '\n', '\t', 'N', 'O', 'T', 'I', 'C', 'E', 'T', 'A', 'P', '\022', '\021', '\n', '\r', 'N', 'O', 'T', 'I', 
  'C', 'E', 'T', 'A', 'P', '_', 'N', 'E', 'W', '\020', '\000', '\022', '\026', '\n', '\022', 'N', 'O', 'T', 'I', 'C', 'E', 'T', 'A', 'P', '_', 
  'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '\020', '\001', '\022', '\025', '\n', '\021', 'N', 'O', 'T', 'I', 'C', 'E', 'T', 'A', 'P', '_', 'S', 
  'P', 'E', 'C', 'I', 'A', 'L', '\020', '\002', '\022', '\031', '\n', '\025', 'N', 'O', 'T', 'I', 'C', 'E', 'T', 'A', 'P', '_', 'C', 'O', 'M', 
  'P', 'E', 'T', 'I', 'T', 'I', 'O', 'N', '\020', '\003', '*', 'H', '\n', '\021', 'P', 'I', 'C', 'N', 'O', 'T', 'I', 'C', 'E', 'J', 'U', 
  'M', 'P', 'T', 'Y', 'P', 'E', '\022', '\030', '\n', '\024', 'P', 'I', 'C', 'N', 'O', 'T', 'I', 'C', 'E', 'J', 'U', 'M', 'P', 'T', 'Y', 
  'P', 'E', '_', 'I', 'N', '\020', '\000', '\022', '\031', '\n', '\025', 'P', 'I', 'C', 'N', 'O', 'T', 'I', 'C', 'E', 'J', 'U', 'M', 'P', 'T', 
  'Y', 'P', 'E', '_', 'O', 'U', 'T', '\020', '\001', '*', '4', '\n', '\007', 'A', 'D', 'S', 'T', 'Y', 'P', 'E', '\022', '\020', '\n', '\014', 'A', 
  'D', 'S', 'T', 'Y', 'P', 'E', '_', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\027', '\n', '\023', 'A', 'D', 'S', 'T', 'Y', 'P', 'E', '_', 
  'P', 'V', 'P', '_', 'L', 'O', 'A', 'D', 'I', 'N', 'G', '\020', '\001', '*', 'C', '\n', '\n', 'A', 'D', 'S', 'P', 'A', 'Y', 'T', 'Y', 
  'P', 'E', '\022', '\017', '\n', '\013', 'A', 'D', 'S', 'T', 'Y', 'P', 'E', '_', 'A', 'L', 'L', '\020', '\000', '\022', '\023', '\n', '\017', 'A', 'D', 
  'S', 'T', 'Y', 'P', 'E', '_', 'N', 'O', 'T', '_', 'P', 'A', 'Y', '\020', '\001', '\022', '\017', '\n', '\013', 'A', 'D', 'S', 'T', 'Y', 'P', 
  'E', '_', 'P', 'A', 'Y', '\020', '\002', '*', '\246', '\001', '\n', '\014', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', 'T', 'Y', 'P', 'E', '\022', 
  '\030', '\n', '\024', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '_', 'U', 'N', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'E', 'D', '\020', '\000', 
  '\022', '\021', '\n', '\r', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '_', 'F', 'R', 'E', 'E', '\020', '\001', '\022', '\024', '\n', '\020', 'P', 'A', 
  'S', 'S', 'P', 'O', 'R', 'T', '_', 'A', 'D', 'V', 'A', 'N', 'C', 'E', '\020', '\002', '\022', '\032', '\n', '\026', 'P', 'A', 'S', 'S', 'P', 
  'O', 'R', 'T', '_', 'A', 'D', 'V', 'A', 'N', 'C', 'E', '_', 'S', 'U', 'P', 'E', 'R', '\020', '\003', '\022', '\034', '\n', '\030', 'P', 'A', 
  'S', 'S', 'P', 'O', 'R', 'T', '_', 'A', 'D', 'V', 'A', 'N', 'C', 'E', '_', 'S', 'E', 'G', 'M', 'E', 'N', 'T', '\020', '\004', '\022', 
  '\031', '\n', '\025', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '_', 'A', 'D', 'V', 'A', 'N', 'C', 'E', '_', 'Y', 'E', 'A', 'R', '\020', 
  '\005', '*', '8', '\n', '\n', 'R', 'E', 'L', 'O', 'A', 'D', 'T', 'Y', 'P', 'E', '\022', '\023', '\n', '\017', 'R', 'E', 'L', 'O', 'A', 'D', 
  '_', 'L', 'A', 'N', 'G', 'U', 'A', 'G', 'E', '\020', '\000', '\022', '\025', '\n', '\021', 'R', 'E', 'L', 'O', 'A', 'D', '_', 'W', 'H', 'I', 
  'L', 'E', '_', 'L', 'I', 'S', 'T', '\020', '\001', '*', 'L', '\n', '\013', 'T', 'R', 'A', 'N', 'S', 'A', 'C', 'T', 'I', 'O', 'N', '\022', 
  '\023', '\n', '\017', 'T', 'R', 'A', 'N', 'S', 'A', 'C', 'T', 'I', 'O', 'N', '_', 'A', 'L', 'L', '\020', '\000', '\022', '\023', '\n', '\017', 'T', 
  'R', 'A', 'N', 'S', 'A', 'C', 'T', 'I', 'O', 'N', '_', 'G', 'E', 'T', '\020', '\001', '\022', '\023', '\n', '\017', 'T', 'R', 'A', 'N', 'S', 
  'A', 'C', 'T', 'I', 'O', 'N', '_', 'U', 'S', 'E', '\020', '\002', '*', '\362', '\026', '\n', '\010', 'C', 'O', 'N', 'D', 'T', 'Y', 'P', 'E', 
  '\022', '\021', '\n', '\r', 'C', 'O', 'N', 'D', 'T', 'Y', 'P', 'E', '_', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\026', '\n', '\022', 'C', 'H', 
  'E', 'S', 'S', '_', 'P', 'L', 'A', 'Y', 'E', 'R', '_', 'L', 'E', 'V', 'E', 'L', '\020', 'd', '\022', '\026', '\n', '\021', 'A', 'C', 'C', 
  'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'R', 'A', 'N', 'K', '\020', '\310', '\001', '\022', '\024', '\n', '\017', 'C', 'O', 'N', 'T', 
  'I', 'N', 'U', 'O', 'U', 'S', '_', 'R', 'A', 'N', 'K', '\020', '\311', '\001', '\022', '\016', '\n', '\t', 'F', 'I', 'R', 'S', 'T', '_', 'P', 
  'A', 'Y', '\020', '\312', '\001', '\022', '\025', '\n', '\020', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'P', 'A', 'Y', 
  '\020', '\313', '\001', '\022', '\026', '\n', '\021', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'C', 'O', 'S', 'T', '\020', 
  '\314', '\001', '\022', '\035', '\n', '\030', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'R', 'A', 'N', 'K', '_', 'F', 
  'E', 'T', 'T', 'E', 'R', '\020', '\315', '\001', '\022', '\016', '\n', '\t', 'R', 'O', 'U', 'N', 'D', '_', 'W', 'I', 'N', '\020', '\254', '\002', '\022', 
  '\025', '\n', '\020', 'R', 'O', 'U', 'N', 'D', '_', 'S', 'T', 'R', 'E', 'A', 'K', '_', 'W', 'I', 'N', '\020', '\255', '\002', '\022', '\033', '\n', 
  '\026', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'R', 'O', 'U', 'N', 'D', '_', 'W', 'I', 'N', '\020', '\256', 
  '\002', '\022', '\020', '\n', '\013', 'A', 'L', 'I', 'V', 'E', '_', 'R', 'O', 'U', 'N', 'D', '\020', '\220', '\003', '\022', '\022', '\n', '\r', 'B', 'U', 
  'Y', '_', 'C', 'H', 'E', 'S', 'S', '_', 'P', 'R', 'O', '\020', '\222', '\003', '\022', '\023', '\n', '\016', 'B', 'U', 'Y', '_', 'C', 'H', 'E', 
  'S', 'S', '_', 'R', 'A', 'C', 'E', '\020', '\223', '\003', '\022', '\033', '\n', '\026', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 
  'E', '_', 'B', 'U', 'Y', '_', 'C', 'H', 'E', 'S', 'S', '\020', '\225', '\003', '\022', '&', '\n', '!', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 
  'A', 'T', 'I', 'V', 'E', '_', 'B', 'U', 'Y', '_', 'C', 'H', 'E', 'S', 'S', '_', 'P', 'R', 'O', 'F', 'E', 'S', 'S', 'I', 'O', 
  'N', '\020', '\226', '\003', '\022', ' ', '\n', '\033', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'B', 'U', 'Y', '_', 
  'C', 'H', 'E', 'S', 'S', '_', 'R', 'A', 'C', 'E', '\020', '\227', '\003', '\022', '#', '\n', '\036', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 
  'T', 'I', 'V', 'E', '_', 'B', 'U', 'Y', '_', 'C', 'H', 'E', 'S', 'S', '_', 'Q', 'U', 'A', 'L', 'I', 'T', 'Y', '\020', '\230', '\003', 
  '\022', '\036', '\n', '\031', 'S', 'I', 'N', 'G', 'L', 'E', '_', 'R', 'O', 'U', 'N', 'D', '_', 'C', 'H', 'E', 'S', 'S', '_', 'B', 'A', 
  'T', 'T', 'L', 'E', '\020', '\364', '\003', '\022', '\"', '\n', '\035', 'S', 'I', 'N', 'G', 'L', 'E', '_', 'R', 'O', 'U', 'N', 'D', '_', 'C', 
  'H', 'E', 'S', 'S', '_', 'P', 'R', 'O', '_', 'B', 'A', 'T', 'T', 'L', 'E', '\020', '\365', '\003', '\022', '#', '\n', '\036', 'S', 'I', 'N', 
  'G', 'L', 'E', '_', 'R', 'O', 'U', 'N', 'D', '_', 'C', 'H', 'E', 'S', 'S', '_', 'R', 'A', 'C', 'E', '_', 'B', 'A', 'T', 'T', 
  'L', 'E', '\020', '\366', '\003', '\022', '&', '\n', '!', 'S', 'I', 'N', 'G', 'L', 'E', '_', 'R', 'O', 'U', 'N', 'D', '_', 'C', 'H', 'E', 
  'S', 'S', '_', 'Q', 'U', 'A', 'L', 'I', 'T', 'Y', '_', 'B', 'A', 'T', 'T', 'L', 'E', '\020', '\367', '\003', '\022', '#', '\n', '\036', 'S', 
  'I', 'N', 'G', 'L', 'E', '_', 'R', 'O', 'U', 'N', 'D', '_', 'C', 'H', 'E', 'S', 'S', '_', 'S', 'T', 'A', 'R', '_', 'B', 'A', 
  'T', 'T', 'L', 'E', '\020', '\370', '\003', '\022', '\033', '\n', '\026', 'C', 'O', 'M', 'P', 'O', 'S', 'E', '_', 'C', 'H', 'E', 'S', 'S', '_', 
  'S', 'T', 'A', 'R', '_', 'P', 'R', 'O', '\020', '\331', '\004', '\022', '\037', '\n', '\032', 'C', 'O', 'M', 'P', 'O', 'S', 'E', '_', 'C', 'H', 
  'E', 'S', 'S', '_', 'S', 'T', 'A', 'R', '_', 'Q', 'U', 'A', 'L', 'I', 'T', 'Y', '\020', '\332', '\004', '\022', '\037', '\n', '\032', 'A', 'C', 
  'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'C', 'O', 'M', 'P', 'O', 'S', 'E', '_', 'C', 'H', 'E', 'S', 'S', '\020', 
  '\333', '\004', '\022', '(', '\n', '#', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'C', 'O', 'M', 'P', 'O', 'S', 
  'E', '_', 'C', 'H', 'E', 'S', 'S', '_', 'S', 'T', 'A', 'R', '_', 'P', 'R', 'O', '\020', '\334', '\004', '\022', '$', '\n', '\037', 'A', 'C', 
  'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'C', 'O', 'M', 'P', 'O', 'S', 'E', '_', 'C', 'H', 'E', 'S', 'S', '_', 
  'S', 'T', 'A', 'R', '\020', '\336', '\004', '\022', '\027', '\n', '\022', 'S', 'E', 'L', 'L', '_', 'C', 'H', 'E', 'S', 'S', '_', 'Q', 'U', 'A', 
  'L', 'I', 'T', 'Y', '\020', '\277', '\005', '\022', '\034', '\n', '\027', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'S', 
  'E', 'L', 'L', '_', 'C', 'H', 'E', 'S', 'S', '\020', '\301', '\005', '\022', '!', '\n', '\034', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 
  'I', 'V', 'E', '_', 'S', 'E', 'L', 'L', '_', 'C', 'H', 'E', 'S', 'S', '_', 'S', 'T', 'A', 'R', '\020', '\305', '\005', '\022', '\036', '\n', 
  '\031', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'P', 'I', 'C', 'K', 'U', 'P', '_', 'E', 'Q', 'U', 'I', 
  'P', '\020', '\241', '\006', '\022', '\022', '\n', '\r', 'C', 'O', 'M', 'P', 'O', 'S', 'E', '_', 'E', 'Q', 'U', 'I', 'P', '\020', '\204', '\007', '\022', 
  '\037', '\n', '\032', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'C', 'O', 'M', 'P', 'O', 'S', 'E', '_', 'E', 
  'Q', 'U', 'I', 'P', '\020', '\205', '\007', '\022', '\'', '\n', '\"', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'C', 
  'O', 'M', 'P', 'O', 'S', 'E', '_', 'E', 'Q', 'U', 'I', 'P', '_', 'Q', 'U', 'A', 'L', 'I', 'T', 'Y', '\020', '\206', '\007', '\022', '\033', 
  '\n', '\026', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'G', 'A', 'I', 'N', '_', 'G', 'O', 'L', 'D', '\020', 
  '\354', '\007', '\022', '\"', '\n', '\035', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'G', 'A', 'I', 'N', '_', 'G', 
  'O', 'L', 'D', '_', 'S', 'T', 'R', 'E', 'A', 'K', '\020', '\355', '\007', '\022', ' ', '\n', '\033', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 
  'T', 'I', 'V', 'E', '_', 'G', 'A', 'I', 'N', '_', 'G', 'O', 'L', 'D', '_', 'L', 'O', 'S', 'S', '\020', '\356', '\007', '\022', '$', '\n', 
  '\037', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'G', 'A', 'I', 'N', '_', 'G', 'O', 'L', 'D', '_', 'I', 
  'N', 'T', 'E', 'R', 'E', 'S', 'T', '\020', '\357', '\007', '\022', '\r', '\n', '\010', 'U', 'S', 'E', '_', 'G', 'O', 'L', 'D', '\020', '\314', '\010', 
  '\022', '\032', '\n', '\025', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'U', 'S', 'E', '_', 'G', 'O', 'L', 'D', 
  '\020', '\320', '\010', '\022', '\"', '\n', '\035', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'U', 'S', 'E', '_', 'G', 
  'O', 'L', 'D', '_', 'U', 'P', 'G', 'R', 'A', 'D', 'E', '\020', '\321', '\010', '\022', ' ', '\n', '\033', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 
  'A', 'T', 'I', 'V', 'E', '_', 'U', 'S', 'E', '_', 'G', 'O', 'L', 'D', '_', 'C', 'H', 'E', 'S', 'S', '\020', '\322', '\010', '\022', '\"', 
  '\n', '\035', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'U', 'S', 'E', '_', 'G', 'O', 'L', 'D', '_', 'R', 
  'E', 'F', 'R', 'E', 'S', 'H', '\020', '\323', '\010', '\022', '#', '\n', '\036', 'C', 'H', 'E', 'S', 'S', '_', 'S', 'T', 'A', 'R', '_', 'S', 
  'T', 'A', 'R', '_', 'B', 'A', 'T', 'T', 'L', 'E', '_', 'A', 'N', 'D', '_', 'W', 'I', 'N', '\020', '\242', '\n', '\022', '\"', '\n', '\035', 
  'C', 'H', 'E', 'S', 'S', '_', 'P', 'R', 'O', '_', 'R', 'A', 'C', 'E', '_', 'B', 'A', 'T', 'T', 'L', 'E', '_', 'A', 'N', 'D', 
  '_', 'W', 'I', 'N', '\020', '\257', '\n', '\022', '\022', '\n', '\r', 'A', 'C', 'C', 'O', 'U', 'N', 'T', '_', 'L', 'E', 'V', 'E', 'L', '\020', 
  '\370', '\n', '\022', '\023', '\n', '\016', 'I', 'N', 'D', 'I', 'V', 'I', 'D', 'U', 'A', 'L', '_', 'P', 'V', 'P', '\020', '\334', '\013', '\022', '\020', 
  '\n', '\013', 'T', 'E', 'A', 'M', 'I', 'N', 'G', '_', 'P', 'V', 'P', '\020', '\336', '\013', '\022', '\033', '\n', '\026', 'I', 'N', 'D', 'I', 'V', 
  'I', 'D', 'U', 'A', 'L', '_', 'T', 'E', 'A', 'M', 'I', 'N', 'G', '_', 'P', 'V', 'P', '\020', '\337', '\013', '\022', '\017', '\n', '\n', 'F', 
  'I', 'N', 'I', 'S', 'H', '_', 'P', 'V', 'P', '\020', '\340', '\013', '\022', '\031', '\n', '\024', 'F', 'I', 'N', 'I', 'S', 'H', '_', 'D', 'A', 
  'Y', '_', 'F', 'I', 'R', 'S', 'T', '_', 'W', 'I', 'N', '\020', '\341', '\013', '\022', '\026', '\n', '\021', 'P', 'A', 'S', 'S', '_', 'T', 'E', 
  'A', 'C', 'H', '_', 'B', 'A', 'T', 'T', 'L', 'E', '\020', '\342', '\013', '\022', '#', '\n', '\036', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 
  'T', 'I', 'V', 'E', '_', 'P', 'A', 'S', 'S', '_', 'T', 'E', 'A', 'C', 'H', '_', 'B', 'A', 'T', 'T', 'L', 'E', '\020', '\343', '\013', 
  '\022', '\024', '\n', '\017', 'G', 'A', 'I', 'N', '_', 'I', 'T', 'E', 'M', '_', 'B', 'Y', '_', 'I', 'D', '\020', '\300', '\014', '\022', '\026', '\n', 
  '\021', 'G', 'A', 'I', 'N', '_', 'I', 'T', 'E', 'M', '_', 'B', 'Y', '_', 'T', 'Y', 'P', 'E', '\020', '\301', '\014', '\022', '\030', '\n', '\023', 
  'G', 'A', 'I', 'N', '_', 'I', 'T', 'E', 'M', '_', 'B', 'Y', '_', 'C', 'L', 'A', 'S', 'S', '1', '\020', '\302', '\014', '\022', ' ', '\n', 
  '\033', 'G', 'A', 'I', 'N', '_', 'D', 'I', 'F', 'F', '_', 'I', 'T', 'E', 'M', '_', 'S', 'K', 'I', 'N', '_', 'Q', 'U', 'A', 'L', 
  'I', 'T', 'Y', '\020', '\303', '\014', '\022', '\031', '\n', '\024', 'G', 'A', 'I', 'N', '_', 'F', 'R', 'O', 'M', '_', 'S', 'M', 'E', 'L', 'T', 
  '_', 'I', 'T', 'E', 'M', '\020', '\304', '\014', '\022', '\027', '\n', '\022', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 
  'S', 'H', 'A', 'R', 'E', '\020', '\354', '\016', '\022', '\020', '\n', '\013', 'D', 'A', 'I', 'L', 'Y', '_', 'S', 'H', 'A', 'R', 'E', '\020', '\355', 
  '\016', '\022', '#', '\n', '\036', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'F', 'O', 'L', 'L', 'O', 'W', '_', 
  'E', 'A', 'C', 'H', '_', 'O', 'T', 'H', 'E', 'R', '\020', '\323', '\017', '\022', '\036', '\n', '\031', 'C', 'O', 'M', 'P', 'L', 'E', 'T', 'E', 
  '_', 'S', 'E', 'A', 'S', 'O', 'N', '_', 'C', 'H', 'A', 'L', 'L', 'E', 'N', 'G', 'E', '\020', '\265', '\020', '\022', '\034', '\n', '\027', 'C', 
  'O', 'M', 'P', 'L', 'E', 'T', 'E', '_', 'W', 'E', 'E', 'K', '_', 'C', 'H', 'A', 'L', 'L', 'E', 'N', 'G', 'E', '\020', '\266', '\020', 
  '\022', ' ', '\n', '\033', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'W', 'E', 'E', 'K', '_', 'C', 'H', 'A', 
  'L', 'L', 'E', 'N', 'G', 'E', '\020', '\267', '\020', '\022', '!', '\n', '\034', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', 
  '_', 'N', 'E', 'W', '_', 'P', 'L', 'A', 'Y', 'E', 'R', '_', 'T', 'A', 'S', 'K', '\020', '\270', '\020', '\022', '$', '\n', '\037', 'C', 'O', 
  'M', 'P', 'L', 'E', 'T', 'E', '_', 'C', 'U', 'R', 'R', 'E', 'N', 'T', '_', 'W', 'E', 'E', 'K', '_', 'C', 'H', 'A', 'L', 'L', 
  'E', 'N', 'G', 'E', '\020', '\271', '\020', '\022', '\035', '\n', '\030', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'R', 
  'E', 'T', 'U', 'R', 'N', '_', 'T', 'A', 'S', 'K', '\020', '\272', '\020', '\022', '\026', '\n', '\021', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 
  'T', 'I', 'V', 'E', '_', 'T', 'A', 'S', 'K', '\020', '\273', '\020', '\022', '%', '\n', ' ', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 
  'I', 'V', 'E', '_', 'N', 'E', 'W', '_', 'P', 'L', 'A', 'Y', 'E', 'R', '_', 'A', 'C', 'T', '_', 'T', 'A', 'S', 'K', '\020', '\274', 
  '\020', '\022', '\032', '\n', '\025', 'S', 'K', 'I', 'P', '_', 'C', 'L', 'I', 'E', 'N', 'T', '_', 'I', 'N', 'T', 'E', 'R', 'F', 'A', 'C', 
  'E', '\020', '\230', '\021', '\022', '\017', '\n', '\n', 'P', 'L', 'A', 'Y', 'E', 'R', '_', 'C', 'U', 'P', '\020', '\374', '\021', '\022', '\026', '\n', '\021', 
  'S', 'E', 'A', 'S', 'O', 'N', '_', 'P', 'L', 'A', 'Y', 'E', 'R', '_', 'C', 'U', 'P', '\020', '\375', '\021', '\022', '\033', '\n', '\026', 'H', 
  'I', 'S', 'T', 'O', 'R', 'Y', '_', 'M', 'A', 'X', '_', 'P', 'L', 'A', 'Y', 'E', 'R', '_', 'C', 'U', 'P', '\020', '\376', '\021', '\022', 
  '\031', '\n', '\024', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'B', 'U', 'Y', '_', 'E', 'G', 'G', '\020', '\340', 
  '\022', '\022', '\027', '\n', '\022', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'L', 'O', 'G', 'I', 'N', '\020', '\304', 
  '\023', '\022', '\036', '\n', '\031', 'S', 'E', 'A', 'S', 'O', 'N', '_', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 
  'L', 'O', 'G', 'I', 'N', '\020', '\305', '\023', '\022', '\023', '\n', '\016', 'F', 'R', 'I', 'E', 'N', 'D', 'S', '_', 'I', 'N', 'G', 'A', 'M', 
  'E', '\020', '\250', '\024', '\022', '\024', '\n', '\017', 'A', 'L', 'L', '_', 'F', 'I', 'G', 'H', 'T', '_', 'T', 'O', 'T', 'A', 'L', '\020', '\214', 
  '\025', '\022', '\022', '\n', '\r', 'A', 'L', 'L', '_', 'F', 'I', 'G', 'H', 'T', '_', 'O', 'N', 'E', '\020', '\215', '\025', '\022', '\027', '\n', '\022', 
  'R', 'E', 'A', 'L', 'A', 'T', 'I', 'O', 'N', 'S', 'H', 'I', 'P', '_', 'S', 'T', 'A', 'R', '\020', '\360', '\025', '\022', '\r', '\n', '\010', 
  'B', 'U', 'F', 'F', '_', 'A', 'C', 'T', '\020', '\361', '\025', '\022', '\025', '\n', '\020', 'O', 'B', 'S', 'E', 'R', 'V', 'E', '_', 'D', 'U', 
  'R', 'A', 'T', 'I', 'O', 'N', '\020', '\362', '\025', '\022', '\021', '\n', '\014', 'O', 'B', 'S', 'E', 'R', 'V', 'E', '_', 'M', 'O', 'D', 'E', 
  '\020', '\374', '\025', '\022', '\037', '\n', '\032', 'R', 'E', 'C', 'R', 'U', 'I', 'T', '_', 'P', 'L', 'A', 'Y', 'E', 'R', '_', 'B', 'A', 'T', 
  'T', 'L', 'E', 'C', 'O', 'U', 'N', 'T', '\020', '\363', '\025', '\022', '\036', '\n', '\031', 'R', 'E', 'C', 'R', 'U', 'I', 'T', '_', 'W', 'I', 
  'T', 'H', 'I', 'N', 'V', 'I', 'T', 'E', 'R', '_', 'F', 'I', 'G', 'H', 'T', '\020', '\364', '\025', '\022', '\036', '\n', '\031', 'R', 'E', 'C', 
  'R', 'U', 'I', 'T', '_', 'W', 'I', 'T', 'H', 'R', 'E', 'C', 'R', 'U', 'I', 'T', '_', 'F', 'I', 'G', 'H', 'T', '\020', '\365', '\025', 
  '\022', '\026', '\n', '\021', 'G', 'U', 'I', 'L', 'D', '_', 'C', 'R', 'E', 'A', 'T', 'E', '_', 'J', 'O', 'I', 'N', '\020', '\324', '\026', '\022', 
  '\034', '\n', '\027', 'C', 'H', 'A', 'N', 'G', 'E', '_', 'R', 'E', 'C', 'O', 'M', 'M', 'E', 'N', 'D', '_', 'L', 'I', 'N', 'E', 'U', 
  'P', '\020', '\206', '\027', '\022', '\021', '\n', '\014', 'C', 'H', 'A', 'N', 'G', 'E', '_', 'D', 'R', 'E', 'S', 'S', '\020', '\207', '\027', '\022', '\026', 
  '\n', '\021', 'G', 'A', 'I', 'N', '_', 'W', 'I', 'N', 'N', 'E', 'R', '_', 'S', 'C', 'O', 'R', 'E', '\020', '\200', '\031', '\022', '\035', '\n', 
  '\030', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '_', 'T', 'A', 'S', 'K', 'S', '_', 'C', 'O', 'M', 'P', 'L', 'E', 'T', 'E', 'D', 
  '\020', '\201', '\031', '\022', '\035', '\n', '\030', 'S', 'E', 'A', 'S', 'O', 'N', '_', 'G', 'A', 'I', 'N', '_', 'W', 'I', 'N', 'N', 'E', 'R', 
  '_', 'S', 'C', 'O', 'R', 'E', '\020', '\202', '\031', '\022', '\023', '\n', '\016', 'P', 'V', 'E', '_', 'G', 'A', 'I', 'N', '_', 'S', 'C', 'O', 
  'R', 'E', '\020', '\203', '\031', '\022', '\032', '\n', '\025', 'P', 'V', 'E', '_', 'C', 'U', 'S', 'T', 'O', 'M', '_', 'G', 'A', 'I', 'N', '_', 
  'S', 'C', 'O', 'R', 'E', '\020', '\204', '\031', '\022', '#', '\n', '\036', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 
  'C', 'O', 'L', 'L', 'E', 'C', 'T', '_', 'S', 'E', 'T', '_', 'M', 'E', 'D', 'A', 'L', '\020', '\344', '\031', '\022', '\033', '\n', '\026', 'S', 
  'E', 'A', 'S', 'O', 'N', '_', 'P', 'L', 'A', 'Y', 'E', 'R', '_', 'O', 'V', 'E', 'R', '_', 'C', 'U', 'P', '\020', '\345', '\031', '\022', 
  '#', '\n', '\036', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'U', 'N', 'L', 'O', 'C', 'K', '_', 'C', 'H', 
  'E', 'S', 'S', '_', 'S', 'T', 'A', 'R', '\020', '\310', '\032', '\022', '#', '\n', '\036', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 
  'V', 'E', '_', 'T', 'O', 'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', '_', 'B', 'A', 'T', 'T', 'L', 'E', '\020', '\220', '\034', '\022', '\026', 
  '\n', '\021', 'M', 'E', 'N', 'T', 'O', 'R', '_', 'I', 'N', 'V', 'I', 'T', 'E', '_', 'M', 'S', 'G', '\020', '\240', '\037', '\022', '\026', '\n', 
  '\021', 'M', 'E', 'N', 'T', 'O', 'R', '_', 'P', 'L', 'A', 'Y', 'E', 'R', '_', 'C', 'U', 'P', '\020', '\241', '\037', '\022', '\036', '\n', '\031', 
  'M', 'E', 'N', 'T', 'O', 'R', '_', 'G', 'R', 'A', 'D', 'U', 'A', 'T', 'E', '_', 'P', 'U', 'P', 'I', 'L', '_', 'N', 'U', 'M', 
  '\020', '\242', '\037', '\022', '\017', '\n', '\n', 'C', 'O', 'M', 'M', 'O', 'N', '_', 'P', 'A', 'Y', '\020', '\210', '\'', '*', '\206', '\001', '\n', '\020', 
  'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', 'T', 'A', 'S', 'K', 'T', 'Y', 'P', 'E', '\022', '\031', '\n', '\025', 'P', 'A', 'S', 'S', 'P', 
  'O', 'R', 'T', 'T', 'A', 'S', 'K', 'T', 'Y', 'P', 'E', '_', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\017', '\n', '\013', 'W', 'E', 'E', 
  'K', 'L', 'Y', '_', 'T', 'A', 'S', 'K', '\020', '\001', '\022', '\022', '\n', '\016', 'W', 'E', 'E', 'K', 'L', 'Y', '_', 'R', 'E', 'F', 'R', 
  'E', 'S', 'H', '\020', '\002', '\022', '\017', '\n', '\013', 'S', 'E', 'A', 'S', 'O', 'N', '_', 'T', 'A', 'S', 'K', '\020', '\003', '\022', '\021', '\n', 
  '\r', 'D', 'A', 'I', 'L', 'Y', '_', 'R', 'E', 'F', 'R', 'E', 'S', 'H', '\020', '\004', '\022', '\016', '\n', '\n', 'D', 'A', 'I', 'L', 'Y', 
  '_', 'T', 'A', 'S', 'K', '\020', '\005', '*', 'g', '\n', '\010', 'S', 'H', 'O', 'P', 'T', 'Y', 'P', 'E', '\022', '\021', '\n', '\r', 'S', 'H', 
  'O', 'P', 'T', 'Y', 'P', 'E', '_', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\020', '\n', '\014', 'S', 'H', 'O', 'P', 'T', 'Y', 'P', 'E', 
  '_', 'E', 'G', 'G', '\020', '\001', '\022', '\031', '\n', '\025', 'S', 'H', 'O', 'P', 'T', 'Y', 'P', 'E', '_', 'S', 'P', 'E', 'C', 'I', 'A', 
  'L', '_', 'G', 'I', 'F', 'T', '\020', '\002', '\022', '\033', '\n', '\027', 'S', 'H', 'O', 'P', 'T', 'Y', 'P', 'E', '_', 'T', 'I', 'M', 'E', 
  'D', '_', 'E', 'X', 'C', 'H', 'A', 'N', 'G', 'E', '\020', '\003', '*', '\203', '\001', '\n', '\t', 'P', 'A', 'Y', 'R', 'E', 'S', 'U', 'L', 
  'T', '\022', '\025', '\n', '\021', 'P', 'A', 'Y', 'R', 'E', 'S', 'U', 'L', 'T', '_', 'S', 'U', 'C', 'C', 'E', 'S', 'S', '\020', '\000', '\022', 
  '\022', '\n', '\016', 'P', 'A', 'Y', 'R', 'E', 'S', 'U', 'L', 'T', '_', 'F', 'A', 'I', 'L', '\020', '\001', '\022', '\023', '\n', '\017', 'P', 'A', 
  'Y', 'R', 'E', 'S', 'U', 'L', 'T', '_', 'O', 'T', 'H', 'E', 'R', '\020', '\002', '\022', '\033', '\n', '\027', 'P', 'A', 'Y', 'R', 'E', 'S', 
  'U', 'L', 'T', '_', 'N', 'O', '_', 'O', 'R', 'D', 'E', 'R', '_', 'D', 'A', 'T', 'A', '\020', '\003', '\022', '\031', '\n', '\025', 'P', 'A', 
  'Y', 'R', 'E', 'S', 'U', 'L', 'T', '_', 'O', 'R', 'D', 'E', 'R', '_', 'P', 'A', 'Y', 'E', 'D', '\020', '\004', '*', '\324', '\002', '\n', 
  '\014', 'C', 'U', 'R', 'R', 'E', 'N', 'C', 'Y', 'T', 'Y', 'P', 'E', '\022', '\020', '\n', '\014', 'C', 'U', 'R', 'R', 'E', 'N', 'C', 'Y', 
  '_', 'R', 'M', 'B', '\020', '\000', '\022', '\023', '\n', '\017', 'C', 'U', 'R', 'R', 'E', 'N', 'C', 'Y', '_', 'D', 'O', 'L', 'L', 'A', 'R', 
  '\020', '\001', '\022', '\022', '\n', '\016', 'C', 'U', 'R', 'R', 'E', 'N', 'C', 'Y', '_', 'R', 'U', 'P', 'E', 'E', '\020', '\002', '\022', '\036', '\n', 
  '\032', 'C', 'U', 'R', 'R', 'E', 'N', 'C', 'Y', '_', 'I', 'N', 'D', 'O', 'N', 'E', 'S', 'I', 'A', 'N', '_', 'R', 'U', 'P', 'I', 
  'A', 'H', '\020', '\003', '\022', '\032', '\n', '\026', 'C', 'U', 'R', 'R', 'E', 'N', 'C', 'Y', '_', 'T', 'A', 'I', 'W', 'A', 'N', '_', 'D', 
  'O', 'L', 'L', 'A', 'R', '\020', '\004', '\022', '\034', '\n', '\030', 'C', 'U', 'R', 'R', 'E', 'N', 'C', 'Y', '_', 'V', 'I', 'E', 'T', 'N', 
  'A', 'M', 'E', 'S', 'E', '_', 'D', 'O', 'N', 'G', '\020', '\005', '\022', '\026', '\n', '\022', 'C', 'U', 'R', 'R', 'E', 'N', 'C', 'Y', '_', 
  'T', 'H', 'A', 'I', '_', 'B', 'A', 'H', 'T', '\020', '\006', '\022', '\034', '\n', '\030', 'C', 'U', 'R', 'R', 'E', 'N', 'C', 'Y', '_', 'P', 
  'H', 'I', 'L', 'I', 'P', 'P', 'I', 'N', 'E', '_', 'P', 'E', 'S', 'O', '\020', '\007', '\022', '\024', '\n', '\020', 'C', 'U', 'R', 'R', 'E', 
  'N', 'C', 'Y', '_', 'R', 'I', 'N', 'G', 'G', 'I', 'T', '\020', '\010', '\022', '\027', '\n', '\023', 'C', 'U', 'R', 'R', 'E', 'N', 'C', 'Y', 
  '_', 'B', 'R', 'A', 'Z', 'I', 'L', '_', 'B', 'R', 'L', '\020', '\t', '\022', '\030', '\n', '\024', 'C', 'U', 'R', 'R', 'E', 'N', 'C', 'Y', 
  '_', 'I', 'R', 'A', 'N', '_', 'T', 'O', 'M', 'A', 'N', 'S', '\020', '\n', '\022', '\032', '\n', '\026', 'C', 'U', 'R', 'R', 'E', 'N', 'C', 
  'Y', '_', 'S', 'I', 'N', 'G', 'A', 'P', 'O', 'R', 'E', '_', 'S', 'G', 'D', '\020', '\013', '\022', '\024', '\n', '\020', 'C', 'U', 'R', 'R', 
  'E', 'N', 'C', 'Y', '_', 'U', 'N', 'K', 'N', 'O', 'W', 'N', '\020', 'c', '*', 'Q', '\n', '\016', 'N', 'O', 'T', 'I', 'C', 'E', 'S', 
  'H', 'O', 'W', 'T', 'Y', 'P', 'E', '\022', '\023', '\n', '\017', 'N', 'O', 'T', 'I', 'C', 'E', 'S', 'H', 'O', 'W', '_', 'N', 'U', 'L', 
  'L', '\020', '\000', '\022', '\026', '\n', '\022', 'N', 'O', 'T', 'I', 'C', 'E', 'S', 'H', 'O', 'W', '_', 'D', 'E', 'F', 'A', 'U', 'L', 'T', 
  '\020', '\001', '\022', '\022', '\n', '\016', 'N', 'O', 'T', 'I', 'C', 'E', 'S', 'H', 'O', 'W', '_', 'P', 'O', 'P', '\020', '\002', '*', '\225', '\001', 
  '\n', '\021', 'N', 'O', 'T', 'I', 'C', 'E', 'C', 'O', 'N', 'T', 'E', 'N', 'T', 'T', 'Y', 'P', 'E', '\022', '\026', '\n', '\022', 'N', 'O', 
  'T', 'I', 'C', 'E', 'C', 'O', 'N', 'T', 'E', 'N', 'T', '_', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\026', '\n', '\022', 'N', 'O', 'T', 
  'I', 'C', 'E', 'C', 'O', 'N', 'T', 'E', 'N', 'T', '_', 'T', 'E', 'X', 'T', '\020', '\001', '\022', '\031', '\n', '\025', 'N', 'O', 'T', 'I', 
  'C', 'E', 'C', 'O', 'N', 'T', 'E', 'N', 'T', '_', 'P', 'I', 'C', 'T', 'U', 'R', 'E', '\020', '\002', '\022', '\025', '\n', '\021', 'N', 'O', 
  'T', 'I', 'C', 'E', 'C', 'O', 'N', 'T', 'E', 'N', 'T', '_', 'W', 'E', 'B', '\020', '\003', '\022', '\036', '\n', '\032', 'N', 'O', 'T', 'I', 
  'C', 'E', 'C', 'O', 'N', 'T', 'E', 'N', 'T', '_', 'P', 'I', 'C', 'T', 'U', 'R', 'E', '_', 'T', 'E', 'X', 'T', '\020', '\004', '*', 
  '\371', '\010', '\n', '\014', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', 'T', 'Y', 'P', 'E', '\022', '\021', '\n', '\r', 'A', 'C', 'T', 'I', 'V', 
  'I', 'T', 'Y', '_', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\027', '\n', '\023', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'N', 'E', 
  'W', '_', 'P', 'L', 'A', 'Y', 'E', 'R', '\020', '\001', '\022', '\031', '\n', '\025', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'F', 'I', 
  'R', 'S', 'T', '_', 'C', 'H', 'A', 'R', 'G', 'E', '\020', '\002', '\022', '\034', '\n', '\030', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 
  'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '_', 'T', 'Y', 'P', 'E', '_', '2', '\020', '\003', '\022', '\034', '\n', '\030', 'A', 'C', 'T', 'I', 
  'V', 'I', 'T', 'Y', '_', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '_', 'T', 'Y', 'P', 'E', '_', '3', '\020', '\004', '\022', '\033', '\n', 
  '\027', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'F', 'R', 'I', 'E', 'N', 'D', 'S', '_', 'I', 'N', 'G', 'A', 'M', 'E', '\020', 
  '\005', '\022', '\026', '\n', '\022', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'A', 'L', 'L', '_', 'F', 'I', 'G', 'H', 'T', '\020', '\006', 
  '\022', '\031', '\n', '\025', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'S', 'H', 'A', 'R', 'I', 'N', 'G', '_', 'C', 'O', 'D', 'E', 
  '\020', '\007', '\022', '\035', '\n', '\031', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'A', 'C', 'C', 'U', 'M', 'U', 'L', 'A', 'T', 'I', 
  'V', 'E', '_', 'P', 'A', 'Y', '\020', '\010', '\022', '\036', '\n', '\032', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'A', 'C', 'C', 'U', 
  'M', 'U', 'L', 'A', 'T', 'I', 'V', 'E', '_', 'C', 'O', 'S', 'T', '\020', '\t', '\022', '\026', '\n', '\022', 'A', 'C', 'T', 'I', 'V', 'I', 
  'T', 'Y', '_', 'F', 'I', 'R', 'S', 'T', '_', 'P', 'A', 'Y', '\020', '\n', '\022', '\032', '\n', '\026', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 
  'Y', '_', 'I', 'T', 'E', 'M', '_', 'E', 'X', 'C', 'H', 'A', 'N', 'G', 'E', '\020', '\013', '\022', '\037', '\n', '\033', 'A', 'C', 'T', 'I', 
  'V', 'I', 'T', 'Y', '_', 'R', 'E', 'A', 'L', 'A', 'T', 'I', 'O', 'N', 'S', 'H', 'I', 'P', '_', 'S', 'T', 'A', 'R', '\020', '\014', 
  '\022', '\034', '\n', '\030', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'L', 'I', 'M', 'I', 'T', '_', 'T', 'I', 'M', 'E', '_', 'B', 
  'U', 'F', 'F', '\020', '\r', '\022', '\026', '\n', '\022', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'G', 'R', 'O', 'U', 'P', '_', 'B', 
  'U', 'Y', '\020', '\016', '\022', '\025', '\n', '\021', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'H', '5', '_', 'L', 'I', 'N', 'K', 'S', 
  '\020', '\017', '\022', '\023', '\n', '\017', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'R', 'E', 'T', 'U', 'R', 'N', '\020', '\020', '\022', '\036', 
  '\n', '\032', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'W', 'X', 'V', 'V', 'I', 'P', '_', 'R', 'E', 'D', '_', 'P', 'A', 'C', 
  'K', 'E', 'T', '\020', '\021', '\022', '\022', '\n', '\016', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'S', 'H', 'A', 'R', 'E', '\020', '\022', 
  '\022', '\027', '\n', '\023', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'C', 'Y', 'B', 'E', 'R', '_', 'W', 'E', 'E', 'K', '\020', '\023', 
  '\022', '\033', '\n', '\027', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'Y', 'E', 'A', 'R', '_', 'E', 'N', 'D', '_', 'G', 'I', 'F', 
  'T', 'S', '\020', '\024', '\022', '\032', '\n', '\026', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'Q', 'U', 'E', 'S', 'T', 'I', 'O', 'N', 
  'N', 'A', 'I', 'R', 'E', '\020', '\025', '\022', '\035', '\n', '\031', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'T', 'R', 'A', 'F', 'F', 
  'I', 'C', '_', 'S', 'T', 'E', 'E', 'R', 'I', 'N', 'G', '\020', '\026', '\022', '\034', '\n', '\030', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', 
  '_', 'L', 'I', 'M', 'I', 'T', '_', 'T', 'I', 'M', 'E', '_', 'M', 'A', 'L', 'L', '\020', '\027', '\022', '\027', '\n', '\023', 'A', 'C', 'T', 
  'I', 'V', 'I', 'T', 'Y', '_', 'S', 'H', 'A', 'R', 'E', '_', 'N', 'E', 'W', 'S', '\020', '\030', '\022', '\036', '\n', '\032', 'A', 'C', 'T', 
  'I', 'V', 'I', 'T', 'Y', '_', 'H', '5', '_', 'L', 'I', 'N', 'K', 'S', '_', 'O', 'V', 'E', 'R', 'S', 'E', 'A', 'S', '\020', '\031', 
  '\022', '\034', '\n', '\030', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'H', '5', '_', 'T', 'W', 'I', 'T', 'C', 'H', '_', 'P', 'R', 
  'I', 'M', 'E', '\020', '\032', '\022', '\024', '\n', '\020', 'R', 'E', 'T', 'U', 'R', 'N', '_', 'S', 'L', 'I', 'D', 'E', 'S', 'H', 'O', 'W', 
  '\020', '\033', '\022', '\024', '\n', '\020', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'R', 'E', 'C', 'R', 'U', 'I', 'T', '\020', '\034', '\022', 
  '\030', '\n', '\024', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'R', 'E', 'T', 'U', 'R', 'N', '_', 'M', 'A', 'L', 'L', '\020', '\035', 
  '\022', '\022', '\n', '\016', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'C', 'H', 'E', 'S', 'T', '\020', '\036', '\022', '\026', '\n', '\022', 'A', 
  'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'L', 'U', 'C', 'K', '_', 'M', 'A', 'L', 'L', '\020', '\037', '\022', '\021', '\n', '\r', 'A', 'C', 
  'T', 'I', 'V', 'I', 'T', 'Y', '_', 'S', 'I', 'G', 'N', '\020', ' ', '\022', '\021', '\n', '\r', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', 
  '_', 'T', 'A', 'S', 'K', '\020', '!', '\022', '\036', '\n', '\032', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'G', 'O', 'A', '_', 'Q', 
  'U', 'E', 'S', 'T', 'I', 'O', 'N', 'N', 'A', 'I', 'R', 'E', '\020', '\"', '\022', '\033', '\n', '\027', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 
  'Y', '_', 'N', 'E', 'W', 'P', 'L', 'A', 'Y', 'E', 'R', '_', 'G', 'I', 'F', 'T', '\020', '#', '\022', '\033', '\n', '\027', 'A', 'C', 'T', 
  'I', 'V', 'I', 'T', 'Y', '_', 'N', 'E', 'W', 'P', 'L', 'A', 'Y', 'E', 'R', '_', 'M', 'A', 'L', 'L', '\020', '$', '\022', '\023', '\n', 
  '\017', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'P', 'U', 'Z', 'Z', 'L', 'E', '\020', '%', '\022', '\032', '\n', '\026', 'A', 'C', 'T', 
  'I', 'V', 'I', 'T', 'Y', '_', 'P', 'V', 'E', '_', 'C', 'H', 'A', 'L', 'L', 'E', 'N', 'G', 'E', '\020', '&', '\022', '\031', '\n', '\025', 
  'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'R', 'E', 'T', 'U', 'R', 'N', '_', 'G', 'U', 'I', 'L', 'D', '\020', '\'', '\022', '\037', 
  '\n', '\033', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'N', 'E', 'W', 'P', 'L', 'A', 'Y', 'E', 'R', '_', 'S', 'H', 'O', 'R', 
  'T', 'C', 'U', 'T', '\020', '(', '\022', '\020', '\n', '\014', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'P', 'V', 'E', '\020', ')', '\022', 
  '\025', '\n', '\021', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'L', 'Y', '_', 'L', 'I', 'M', 'I', 'T', '\020', '*', '*', 'f', '\n', 
  '\030', 'H', 'I', 'S', 'T', 'O', 'R', 'Y', 'P', 'V', 'P', 'S', 'H', 'O', 'W', 'P', 'E', 'R', 'M', 'I', 'S', 'S', 'I', 'O', 'N', 
  '\022', '\026', '\n', '\022', 'S', 'H', 'O', 'W', 'P', 'E', 'R', 'M', 'I', 'S', 'S', 'I', 'O', 'N', '_', 'A', 'L', 'L', '\020', '\000', '\022', 
  '\027', '\n', '\023', 'S', 'H', 'O', 'W', 'P', 'E', 'R', 'M', 'I', 'S', 'S', 'I', 'O', 'N', '_', 'F', 'A', 'N', 'S', '\020', '\001', '\022', 
  '\031', '\n', '\025', 'S', 'H', 'O', 'W', 'P', 'E', 'R', 'M', 'I', 'S', 'S', 'I', 'O', 'N', '_', 'D', 'E', 'N', 'I', 'E', 'D', '\020', 
  '\002', '*', '\223', '\002', '\n', '\010', 'C', 'H', 'A', 'T', 'T', 'Y', 'P', 'E', '\022', '\020', '\n', '\014', 'C', 'H', 'A', 'T', 'T', 'Y', 'P', 
  'E', '_', 'A', 'l', 'l', '\020', '\000', '\022', '\022', '\n', '\016', 'C', 'H', 'A', 'T', 'T', 'Y', 'P', 'E', '_', 'W', 'O', 'R', 'L', 'D', 
  '\020', '\001', '\022', '\025', '\n', '\021', 'C', 'H', 'A', 'T', 'T', 'Y', 'P', 'E', '_', 'P', 'E', 'R', 'S', 'O', 'N', 'A', 'L', '\020', '\002', 
  '\022', '\021', '\n', '\r', 'C', 'H', 'A', 'T', 'T', 'Y', 'P', 'E', '_', 'T', 'E', 'A', 'M', '\020', '\003', '\022', '\023', '\n', '\017', 'C', 'H', 
  'A', 'T', 'T', 'Y', 'P', 'E', '_', 'B', 'A', 'T', 'T', 'L', 'E', '\020', '\004', '\022', '\021', '\n', '\r', 'C', 'H', 'A', 'T', 'T', 'Y', 
  'P', 'E', '_', 'C', 'A', 'M', 'P', '\020', '\005', '\022', '\023', '\n', '\017', 'C', 'H', 'A', 'T', 'T', 'Y', 'P', 'E', '_', 'I', 'N', 'V', 
  'I', 'T', 'E', '\020', '\006', '\022', '\024', '\n', '\020', 'C', 'H', 'A', 'T', 'T', 'Y', 'P', 'E', '_', 'W', 'A', 'T', 'C', 'H', 'E', 'R', 
  '\020', '\007', '\022', '\034', '\n', '\030', 'C', 'H', 'A', 'T', 'T', 'Y', 'P', 'E', '_', 'B', 'A', 'T', 'T', 'L', 'E', '_', 'O', 'B', 'S', 
  'E', 'R', 'V', 'E', 'R', '\020', '\010', '\022', '\036', '\n', '\032', 'C', 'H', 'A', 'T', 'T', 'Y', 'P', 'E', '_', 'B', 'A', 'T', 'T', 'L', 
  'E', '_', 'C', 'O', 'M', 'P', 'E', 'T', 'O', 'T', 'P', 'R', '\020', '\t', '\022', '\022', '\n', '\016', 'C', 'H', 'A', 'T', 'T', 'Y', 'P', 
  'E', '_', 'S', 'T', 'E', 'A', 'M', '\020', '\n', '\022', '\022', '\n', '\016', 'C', 'H', 'A', 'T', 'T', 'Y', 'P', 'E', '_', 'G', 'U', 'I', 
  'L', 'D', '\020', '\013', '*', '\224', '\001', '\n', '\016', 'C', 'H', 'A', 'T', 'S', 'O', 'U', 'R', 'C', 'E', 'T', 'Y', 'P', 'E', '\022', '\n', 
  '\n', '\006', 'P', 'L', 'A', 'Y', 'E', 'R', '\020', '\000', '\022', '\023', '\n', '\017', 'R', 'E', 'C', 'O', 'M', 'M', 'E', 'N', 'D', '_', 'S', 
  'H', 'A', 'R', 'E', '\020', '\001', '\022', '\035', '\n', '\031', 'C', 'H', 'A', 'T', 'S', 'O', 'U', 'R', 'C', 'E', 'T', 'Y', 'P', 'E', '_', 
  'S', 'H', 'O', 'W', '_', 'M', 'E', 'D', 'A', 'L', '\020', '\002', '\022', ' ', '\n', '\034', 'C', 'H', 'A', 'T', 'S', 'O', 'U', 'R', 'C', 
  'E', 'T', 'Y', 'P', 'E', '_', 'M', 'E', 'D', 'A', 'L', '_', 'E', 'M', 'O', 'T', 'I', 'O', 'N', '\020', '\003', '\022', '\025', '\n', '\021', 
  'C', 'O', 'M', 'M', 'O', 'N', '_', 'J', 'S', 'O', 'N', '_', 'S', 'H', 'A', 'R', 'E', '\020', '\004', '\022', '\t', '\n', '\005', 'V', 'O', 
  'I', 'C', 'E', '\020', '\005', '*', '\376', '\005', '\n', '\n', 'S', 'W', 'I', 'T', 'C', 'H', 'T', 'Y', 'P', 'E', '\022', '\023', '\n', '\017', 'S', 
  'W', 'I', 'T', 'C', 'H', 'T', 'Y', 'P', 'E', '_', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\021', '\n', '\r', 'B', 'A', 'G', '_', 'S', 
  'E', 'L', 'L', '_', 'I', 'T', 'E', 'M', '\020', 'd', '\022', '\r', '\n', '\010', 'C', 'H', 'A', 'T', '_', 'A', 'l', 'l', '\020', '\310', '\001', 
  '\022', '\027', '\n', '\022', 'P', 'V', 'P', 'M', 'O', 'D', 'E', '_', 'A', 'U', 'T', 'O', '_', 'C', 'H', 'E', 'S', 'S', '\020', '\254', '\002', 
  '\022', '\034', '\n', '\027', 'P', 'V', 'P', 'M', 'O', 'D', 'E', '_', 'A', 'U', 'T', 'O', '_', 'C', 'H', 'E', 'S', 'S', '_', 'R', 'A', 
  'N', 'K', '\020', '\255', '\002', '\022', '\023', '\n', '\016', 'P', 'V', 'P', 'M', 'O', 'D', 'E', '_', 'C', 'U', 'S', 'T', 'O', 'M', '\020', '\256', 
  '\002', '\022', '\027', '\n', '\022', 'P', 'V', 'P', 'M', 'O', 'D', 'E', '_', 'N', 'E', 'W', '_', 'P', 'L', 'A', 'Y', 'E', 'R', '\020', '\257', 
  '\002', '\022', '\022', '\n', '\r', 'P', 'V', 'P', 'M', 'O', 'D', 'E', '_', 'M', 'E', 'L', 'E', 'E', '\020', '\260', '\002', '\022', '\030', '\n', '\023', 
  'P', 'V', 'P', 'M', 'O', 'D', 'E', '_', 'T', 'E', 'A', 'M', '_', 'B', 'A', 'T', 'T', 'L', 'E', '\020', '\261', '\002', '\022', '\035', '\n', 
  '\030', 'P', 'V', 'P', 'M', 'O', 'D', 'E', '_', 'T', 'E', 'A', 'M', '_', 'B', 'A', 'T', 'T', 'L', 'E', '_', 'R', 'A', 'N', 'K', 
  '\020', '\262', '\002', '\022', '\031', '\n', '\024', 'P', 'V', 'P', 'M', 'O', 'D', 'E', '_', 'T', 'E', 'A', 'C', 'H', '_', 'B', 'A', 'T', 'T', 
  'L', 'E', '\020', '\263', '\002', '\022', '\034', '\n', '\027', 'P', 'V', 'P', 'M', 'O', 'D', 'E', '_', 'C', 'O', 'M', 'B', 'A', 'T', '_', 'T', 
  'R', 'A', 'I', 'N', 'I', 'N', 'G', '\020', '\264', '\002', '\022', '\025', '\n', '\020', 'P', 'V', 'P', 'M', 'O', 'D', 'E', '_', 'A', 'I', '_', 
  'T', 'R', 'A', 'I', 'N', '\020', '\265', '\002', '\022', '\027', '\n', '\022', 'P', 'V', 'P', 'M', 'O', 'D', 'E', '_', 'F', 'O', 'U', 'R', 'V', 
  'S', 'F', 'O', 'U', 'R', '\020', '\266', '\002', '\022', '\034', '\n', '\027', 'P', 'V', 'P', 'M', 'O', 'D', 'E', '_', 'F', 'O', 'U', 'R', 'V', 
  'S', 'F', 'O', 'U', 'R', '_', 'R', 'A', 'N', 'K', '\020', '\267', '\002', '\022', '\016', '\n', '\t', 'M', 'A', 'K', 'E', '_', 'R', 'O', 'O', 
  'M', '\020', '\220', '\003', '\022', '\016', '\n', '\t', 'M', 'A', 'K', 'E', '_', 'T', 'E', 'A', 'M', '\020', '\364', '\003', '\022', '\027', '\n', '\022', 'A', 
  'C', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'N', 'E', 'W', 'P', 'L', 'A', 'Y', 'E', 'R', '\020', '\330', '\004', '\022', '\r', '\n', '\010', 'S', 
  'H', 'O', 'P', '_', 'E', 'G', 'G', '\020', '\274', '\005', '\022', '\021', '\n', '\014', 'S', 'H', 'A', 'R', 'E', '_', 'F', 'I', 'N', 'G', 'H', 
  'T', '\020', '\240', '\006', '\022', '\026', '\n', '\021', 'S', 'H', 'A', 'R', 'E', '_', 'P', 'L', 'A', 'T', 'E', 'R', '_', 'I', 'N', 'F', 'O', 
  '\020', '\241', '\006', '\022', '\r', '\n', '\010', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '\020', '\204', '\007', '\022', '\020', '\n', '\013', 'S', 'Y', 'S', 
  'T', 'E', 'M', '_', 'M', 'A', 'I', 'L', '\020', '\350', '\007', '\022', '\017', '\n', '\n', 'R', 'A', 'N', 'K', '_', 'W', 'O', 'R', 'L', 'D', 
  '\020', '\314', '\010', '\022', '\020', '\n', '\013', 'R', 'A', 'N', 'K', '_', 'F', 'O', 'L', 'L', 'O', 'W', '\020', '\315', '\010', '\022', '\014', '\n', '\007', 
  'O', 'P', 'E', 'N', '_', 'G', 'M', '\020', '\260', '\t', '\022', '\026', '\n', '\021', 'C', 'L', 'O', 'S', 'E', '_', 'G', 'M', '_', 'L', 'V', 
  '_', 'L', 'I', 'M', 'I', 'T', '\020', '\261', '\t', '\022', '\017', '\n', '\n', 'A', 'D', 'D', '_', 'F', 'R', 'I', 'E', 'N', 'D', '\020', '\224', 
  '\n', '\022', '#', '\n', '\036', 'P', 'V', 'P', 'M', 'O', 'D', 'E', '_', 'A', 'L', 'L', '_', 'W', 'I', 'T', 'H', 'O', 'U', 'T', '_', 
  'N', 'E', 'W', '_', 'P', 'L', 'A', 'Y', 'E', 'R', '\020', '\370', '\n', '\022', '\026', '\n', '\021', 'S', 'W', 'I', 'T', 'C', 'H', '_', 'T', 
  'O', 'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', '\020', '\334', '\013', '\022', '\023', '\n', '\016', 'S', 'W', 'I', 'T', 'C', 'H', '_', 'O', 'B', 
  'S', 'E', 'R', 'V', 'E', '\020', '\300', '\014', '\022', '\024', '\n', '\017', 'S', 'W', 'I', 'T', 'C', 'H', '_', 'L', 'U', 'C', 'K', 'S', 'T', 
  'A', 'R', '\020', '\244', '\r', '\022', '\024', '\n', '\017', 'S', 'W', 'I', 'T', 'C', 'H', '_', 'O', 'P', 'E', 'N', 'P', 'L', 'A', 'T', '\020', 
  '\210', '\016', '\022', '\024', '\n', '\017', 'S', 'W', 'I', 'T', 'C', 'H', '_', 'G', 'R', 'O', 'U', 'P', 'B', 'U', 'Y', '\020', '\354', '\016', '*', 
  '\226', '\001', '\n', '\013', 'M', 'A', 'L', 'L', 'T', 'A', 'B', 'T', 'Y', 'P', 'E', '\022', '\014', '\n', '\010', 'T', 'A', 'B', '_', 'N', 'U', 
  'L', 'L', '\020', '\000', '\022', '\022', '\n', '\016', 'T', 'A', 'B', '_', 'T', 'I', 'M', 'E', '_', 'L', 'I', 'M', 'I', 'T', '\020', '\001', '\022', 
  '\017', '\n', '\013', 'T', 'A', 'B', '_', 'G', 'E', 'N', 'E', 'R', 'A', 'L', '\020', '\002', '\022', '\021', '\n', '\r', 'T', 'A', 'B', '_', 'R', 
  'E', 'C', 'O', 'M', 'M', 'E', 'N', 'D', '\020', '\003', '\022', '\020', '\n', '\014', 'T', 'A', 'B', '_', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 
  'Y', '\020', '\004', '\022', '\016', '\n', '\n', 'T', 'A', 'B', '_', 'R', 'E', 'T', 'U', 'R', 'N', '\020', '\005', '\022', '\014', '\n', '\010', 'T', 'A', 
  'B', '_', 'L', 'U', 'C', 'K', '\020', '\006', '\022', '\021', '\n', '\r', 'T', 'A', 'B', '_', 'B', 'I', 'G', 'W', 'I', 'N', 'N', 'E', 'R', 
  '\020', '\007', '*', '*', '\n', '\010', 'S', 'K', 'I', 'P', 'T', 'Y', 'P', 'E', '\022', '\010', '\n', '\004', 'P', 'A', 'G', 'E', '\020', '\000', '\022', 
  '\t', '\n', '\005', 'G', 'O', 'O', 'D', 'S', '\020', '\001', '\022', '\t', '\n', '\005', 'V', 'I', 'D', 'E', 'O', '\020', '\002', '*', '\202', '\001', '\n', 
  '\014', 'J', 'O', 'I', 'N', 'T', 'E', 'A', 'M', 'T', 'Y', 'P', 'E', '\022', '\013', '\n', '\007', 'I', 'n', 'v', 'i', 't', 'e', 'd', '\020', 
  '\000', '\022', '\007', '\n', '\003', 'N', 'u', 'm', '\020', '\001', '\022', '\010', '\n', '\004', 'L', 'i', 'n', 'k', '\020', '\002', '\022', '\022', '\n', '\016', 'O', 
  'f', 'f', 'l', 'i', 'n', 'e', 'I', 'n', 'v', 'i', 't', 'e', 'd', '\020', '\003', '\022', '\r', '\n', '\t', 'P', 'l', 'a', 't', 'M', 'a', 
  't', 'c', 'h', '\020', '\004', '\022', '\016', '\n', '\n', 'T', 'o', 'u', 'r', 'n', 'a', 'm', 'e', 'n', 't', '\020', '\005', '\022', '\r', '\n', '\t', 
  'R', 'e', 'c', 'o', 'n', 'n', 'e', 'c', 't', '\020', '\006', '\022', '\020', '\n', '\013', 'I', 'n', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 
  'e', '\020', '\376', '\001', '*', 'r', '\n', '\r', 'B', 'U', 'F', 'F', 'A', 'C', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '\022', '\026', '\n', '\022', 
  'B', 'U', 'F', 'F', 'A', 'C', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'N', 'O', 'N', 'E', '\020', '\000', '\022', '\027', '\n', '\023', 'B', 
  'U', 'F', 'F', 'A', 'C', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'S', 'T', 'A', 'R', 'T', '\020', '\001', '\022', '\025', '\n', '\021', 'B', 
  'U', 'F', 'F', 'A', 'C', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'E', 'N', 'D', '\020', '\002', '\022', '\031', '\n', '\025', 'B', 'U', 'F', 
  'F', 'A', 'C', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'E', 'N', 'D', 'S', 'H', 'O', 'W', '\020', '\003', '*', '.', '\n', '\007', 'S', 
  'M', 'S', 'T', 'Y', 'P', 'E', '\022', '\016', '\n', '\n', 'S', 'M', 'S', 'T', 'Y', 'P', 'E', '_', 'L', 'Y', '\020', '\000', '\022', '\023', '\n', 
  '\017', 'S', 'M', 'S', 'T', 'Y', 'P', 'E', '_', 'T', 'E', 'N', 'C', 'E', 'N', 'T', '\020', '\001', '*', 'T', '\n', '\017', 'O', 'B', 'S', 
  'E', 'R', 'V', 'E', 'L', 'I', 'S', 'T', 'T', 'Y', 'P', 'E', '\022', '\025', '\n', '\021', 'O', 'B', 'S', 'E', 'R', 'V', 'E', '_', 'R', 
  'E', 'C', 'O', 'M', 'M', 'E', 'N', 'D', '\020', '\000', '\022', '\022', '\n', '\016', 'O', 'B', 'S', 'E', 'R', 'V', 'E', '_', 'F', 'O', 'L', 
  'L', 'O', 'W', '\020', '\001', '\022', '\026', '\n', '\022', 'O', 'B', 'S', 'E', 'R', 'V', 'E', '_', 'T', 'O', 'U', 'R', 'N', 'A', 'M', 'E', 
  'N', 'T', '\020', '\002', '*', '\241', '\001', '\n', '\005', 'W', 'E', 'B', 'O', 'P', '\022', '\016', '\n', '\n', 'W', 'E', 'B', 'O', 'P', '_', 'N', 
  'U', 'L', 'L', '\020', '\000', '\022', '\022', '\n', '\016', 'W', 'E', 'B', 'O', 'P', '_', 'B', 'I', 'N', 'D', '_', 'A', 'C', 'C', '\020', '\001', 
  '\022', '&', '\n', '\"', 'W', 'E', 'B', 'O', 'P', '_', 'T', 'R', 'A', 'N', 'S', 'F', 'E', 'R', '_', 'T', 'O', '_', 'O', 'F', 'F', 
  'I', 'C', 'I', 'A', 'L', '_', 'A', 'C', 'C', 'O', 'U', 'N', 'T', '\020', '\002', '\022', '\027', '\n', '\023', 'W', 'E', 'B', 'O', 'P', '_', 
  'E', 'X', 'C', 'H', 'A', 'N', 'G', 'E', '_', 'S', 'E', 'L', 'L', '\020', '\003', '\022', '\027', '\n', '\023', 'W', 'E', 'B', 'O', 'P', '_', 
  'E', 'X', 'C', 'H', 'A', 'N', 'G', 'E', '_', 'G', 'I', 'F', 'T', '\020', '\004', '\022', '\032', '\n', '\026', 'W', 'E', 'B', 'O', 'P', '_', 
  'E', 'X', 'C', 'H', 'A', 'N', 'G', 'E', '_', 'R', 'E', 'C', 'E', 'I', 'V', 'E', '\020', '\005', '*', '5', '\n', '\t', 'W', 'E', 'B', 
  'R', 'E', 'S', 'U', 'L', 'T', '\022', '\021', '\n', '\r', 'W', 'E', 'B', '_', 'R', 'E', 'S', 'U', 'L', 'T', '_', 'O', 'K', '\020', '\000', 
  '\022', '\025', '\n', '\021', 'W', 'E', 'B', '_', 'R', 'E', 'S', 'U', 'L', 'T', '_', 'C', 'A', 'N', 'C', 'E', 'L', '\020', '\001', '*', '\214', 
  '\001', '\n', '\022', 'P', 'U', 'N', 'I', 'S', 'H', 'M', 'E', 'N', 'T', 'B', 'E', 'H', 'A', 'V', 'I', 'O', 'R', '\022', '\021', '\n', '\r', 
  'B', 'E', 'H', 'A', 'V', 'I', 'O', 'R', '_', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\035', '\n', '\031', 'M', 'A', 'T', 'C', 'H', '_', 
  'S', 'U', 'C', 'C', 'E', 'S', 'S', '_', 'N', 'O', 'T', '_', 'C', 'O', 'N', 'F', 'I', 'R', 'M', '\020', '\001', '\022', '\031', '\n', '\025', 
  'M', 'A', 'T', 'C', 'H', '_', 'S', 'U', 'C', 'C', 'E', 'S', 'S', '_', 'O', 'F', 'F', 'L', 'I', 'N', 'E', '\020', '\002', '\022', '\021', 
  '\n', '\r', 'G', 'I', 'V', 'E', '_', 'U', 'P', '_', 'A', 'H', 'E', 'A', 'D', '\020', '\003', '\022', '\026', '\n', '\022', 'A', 'W', 'A', 'Y', 
  '_', 'F', 'R', 'O', 'M', '_', 'K', 'E', 'Y', 'B', 'O', 'A', 'R', 'D', '\020', '\004', '*', 's', '\n', '\016', 'P', 'U', 'N', 'I', 'S', 
  'H', 'M', 'E', 'N', 'T', 'T', 'Y', 'P', 'E', '\022', '\023', '\n', '\017', 'P', 'U', 'N', 'I', 'S', 'H', 'M', 'E', 'N', 'T', '_', 'N', 
  'U', 'L', 'L', '\020', '\000', '\022', '\024', '\n', '\020', 'F', 'O', 'R', 'B', 'I', 'D', '_', 'P', 'L', 'A', 'Y', '_', 'G', 'A', 'M', 'E', 
  '\020', '\001', '\022', '\017', '\n', '\013', 'F', 'O', 'R', 'B', 'I', 'D', '_', 'C', 'H', 'A', 'T', '\020', '\002', '\022', '\022', '\n', '\016', 'F', 'R', 
  'O', 'Z', 'E', 'N', '_', 'A', 'C', 'C', 'O', 'U', 'N', 'T', '\020', '\003', '\022', '\021', '\n', '\r', 'F', 'R', 'O', 'Z', 'E', 'N', '_', 
  'D', 'E', 'V', 'I', 'C', 'E', '\020', '\004', '*', '\336', '\001', '\n', '\n', 'B', 'A', 'N', 'N', 'E', 'R', 'T', 'Y', 'P', 'E', '\022', '\023', 
  '\n', '\017', 'B', 'A', 'N', 'N', 'E', 'R', 'T', 'Y', 'P', 'E', '_', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\023', '\n', '\017', 'B', 'A', 
  'N', 'N', 'E', 'R', 'T', 'Y', 'P', 'E', '_', 'H', 'A', 'L', 'L', '\020', '\001', '\022', '\031', '\n', '\025', 'B', 'A', 'N', 'N', 'E', 'R', 
  'T', 'Y', 'P', 'E', '_', 'M', 'A', 'L', 'L', '_', 'T', 'H', 'R', 'E', 'E', '\020', '\002', '\022', '\030', '\n', '\024', 'B', 'A', 'N', 'N', 
  'E', 'R', 'T', 'Y', 'P', 'E', '_', 'F', 'I', 'R', 'S', 'T', '_', 'P', 'A', 'Y', '\020', '\003', '\022', '\022', '\n', '\016', 'B', 'A', 'N', 
  'N', 'E', 'R', 'T', 'Y', 'P', 'E', '_', 'B', 'A', 'G', '\020', '\004', '\022', '\022', '\n', '\016', 'B', 'A', 'N', 'N', 'E', 'R', 'T', 'Y', 
  'P', 'E', '_', 'M', 'A', 'P', '\020', '\005', '\022', '\030', '\n', '\024', 'B', 'A', 'N', 'N', 'E', 'R', 'T', 'Y', 'P', 'E', '_', 'H', 'A', 
  'L', 'L', '_', 'M', 'O', 'D', 'E', '\020', '\006', '\022', '\027', '\n', '\023', 'B', 'A', 'N', 'N', 'E', 'R', 'T', 'Y', 'P', 'E', '_', 'M', 
  'A', 'L', 'L', '_', 'O', 'N', 'E', '\020', '\007', '\022', '\026', '\n', '\022', 'B', 'A', 'N', 'N', 'E', 'R', 'T', 'Y', 'P', 'E', '_', 'M', 
  'A', 'X', '_', 'N', 'U', 'M', '\020', '\010', '*', 'j', '\n', '\016', 'A', 'C', 'C', 'O', 'U', 'N', 'T', '_', 'S', 'T', 'A', 'T', 'U', 
  'S', '\022', '\031', '\n', '\025', 'A', 'C', 'C', 'O', 'U', 'N', 'T', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'N', 'O', 'R', 'M', 'A', 
  'L', '\020', '\000', '\022', '\031', '\n', '\025', 'A', 'C', 'C', 'O', 'U', 'N', 'T', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'L', 'O', 'G', 
  'O', 'F', 'F', '\020', '\001', '\022', '\"', '\n', '\036', 'A', 'C', 'C', 'O', 'U', 'N', 'T', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'L', 
  'O', 'G', 'O', 'F', 'F', '_', 'P', 'R', 'O', 'G', 'R', 'E', 'S', 'S', '\020', '\002', '*', 'u', '\n', '\n', 'A', 'B', 'T', 'E', 'S', 
  'T', 'T', 'Y', 'P', 'E', '\022', '\013', '\n', '\007', 'A', 'B', '_', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\017', '\n', '\013', 'A', 'B', '_', 
  'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '\020', '\001', '\022', '\017', '\n', '\013', 'A', 'B', '_', 'N', 'E', 'W', 'G', 'U', 'I', 'D', 'E', 
  '\020', '\002', '\022', '\020', '\n', '\014', 'A', 'B', '_', 'A', 'D', 'V', 'E', 'R', 'T', 'I', 'S', 'E', '\020', '\003', '\022', '\020', '\n', '\014', 'A', 
  'B', '_', 'N', 'E', 'W', 'P', 'L', 'A', 'Y', 'E', 'R', '\020', '\004', '\022', '\024', '\n', '\020', 'A', 'B', '_', 'P', 'E', 'R', 'S', 'O', 
  'N', 'A', 'L', '_', 'M', 'A', 'L', 'L', '\020', '\005', '*', '\334', '\001', '\n', '\t', 'L', 'A', 'B', 'E', 'L', 'T', 'Y', 'P', 'E', '\022', 
  '\022', '\n', '\016', 'L', 'A', 'B', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\025', '\n', '\021', 'L', 'A', 
  'B', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'L', 'I', 'N', 'K', 'A', 'G', 'E', '\020', '\001', '\022', '\027', '\n', '\023', 'L', 'A', 'B', 'E', 
  'L', 'T', 'Y', 'P', 'E', '_', 'C', 'O', 'M', 'M', 'U', 'N', 'I', 'T', 'Y', '\020', '\002', '\022', '\031', '\n', '\025', 'L', 'A', 'B', 'E', 
  'L', 'T', 'Y', 'P', 'E', '_', 'C', 'O', 'M', 'P', 'E', 'T', 'I', 'T', 'I', 'O', 'N', '\020', '\003', '\022', '\026', '\n', '\022', 'L', 'A', 
  'B', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', '\020', '\004', '\022', '\022', '\n', '\016', 'L', 'A', 'B', 
  'E', 'L', 'T', 'Y', 'P', 'E', '_', 'L', 'I', 'V', 'E', '\020', '\005', '\022', '\024', '\n', '\020', 'L', 'A', 'B', 'E', 'L', 'T', 'Y', 'P', 
  'E', '_', 'U', 'P', 'D', 'A', 'T', 'E', '\020', '\006', '\022', '\024', '\n', '\020', 'L', 'A', 'B', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'R', 
  'E', 'P', 'A', 'I', 'R', '\020', '\007', '\022', '\030', '\n', '\024', 'L', 'A', 'B', 'E', 'L', 'T', 'Y', 'P', 'E', '_', 'P', 'U', 'N', 'I', 
  'S', 'H', 'M', 'E', 'N', 'T', '\020', '\010', '*', 'T', '\n', '\n', 'I', 'N', 'V', 'I', 'T', 'E', 'T', 'Y', 'P', 'E', '\022', '\017', '\n', 
  '\013', 'I', 'N', 'V', 'I', 'T', 'E', '_', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\017', '\n', '\013', 'I', 'N', 'V', 'I', 'T', 'E', '_', 
  'T', 'E', 'A', 'M', '\020', '\001', '\022', '\022', '\n', '\016', 'I', 'N', 'V', 'I', 'T', 'E', '_', 'O', 'B', 'S', 'E', 'R', 'V', 'E', '\020', 
  '\002', '\022', '\020', '\n', '\014', 'I', 'N', 'V', 'I', 'T', 'E', '_', 'G', 'U', 'I', 'L', 'D', '\020', '\003', '*', '\355', '\001', '\n', '\020', 'T', 
  'O', 'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '\022', '\032', '\n', '\026', 'T', 'O', 'U', 'R', 'N', 'A', 
  'M', 'E', 'N', 'T', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'N', 'U', 'L', 'L', '\020', '\000', '\022', ' ', '\n', '\034', 'T', 'O', 'U', 
  'R', 'N', 'A', 'M', 'E', 'N', 'T', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'W', 'I', 'L', 'L', '_', 'B', 'E', 'G', 'I', 'N', 
  '\020', '\001', '\022', '\037', '\n', '\033', 'T', 'O', 'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'B', 
  'E', 'G', 'I', 'N', 'N', 'I', 'N', 'G', '\020', '\002', '\022', '\037', '\n', '\033', 'T', 'O', 'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', '_', 
  'S', 'T', 'A', 'T', 'U', 'S', '_', 'E', 'N', 'R', 'O', 'L', 'L', 'I', 'N', 'G', '\020', '\003', '\022', ' ', '\n', '\034', 'T', 'O', 'U', 
  'R', 'N', 'A', 'M', 'E', 'N', 'T', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'E', 'N', 'R', 'O', 'L', 'L', '_', 'E', 'N', 'D', 
  '\020', '\004', '\022', '\031', '\n', '\025', 'T', 'O', 'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'E', 
  'N', 'D', '\020', '\005', '\022', '\034', '\n', '\030', 'T', 'O', 'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', '_', 'S', 'T', 'A', 'T', 'U', 'S', 
  '_', 'C', 'A', 'N', 'C', 'E', 'L', '\020', '\006', '*', '^', '\n', '\017', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', 'R', 'E', 'F', 'R', 
  'E', 'S', 'H', '\022', '\030', '\n', '\024', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', 'R', 'E', 'F', 'R', 'E', 'S', 'H', '_', 'N', 'O', 
  'N', 'E', '\020', '\000', '\022', '\027', '\n', '\023', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', 'R', 'E', 'F', 'R', 'E', 'S', 'H', '_', 'D', 
  'A', 'Y', '\020', '\001', '\022', '\030', '\n', '\024', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', 'R', 'E', 'F', 'R', 'E', 'S', 'H', '_', 'W', 
  'E', 'E', 'K', '\020', '\002', '*', 'P', '\n', '\020', 'O', 'B', 'S', 'E', 'R', 'V', 'E', 'P', 'R', 'I', 'V', 'I', 'L', 'E', 'G', 'E', 
  '\022', '\017', '\n', '\013', 'O', 'B', 'S', 'E', 'R', 'V', 'E', '_', 'A', 'L', 'L', '\020', '\000', '\022', '\020', '\n', '\014', 'O', 'B', 'S', 'E', 
  'R', 'V', 'E', '_', 'N', 'O', 'N', 'E', '\020', '\001', '\022', '\031', '\n', '\025', 'O', 'B', 'S', 'E', 'R', 'V', 'E', '_', 'M', 'U', 'T', 
  'U', 'A', 'L', '_', 'F', 'O', 'L', 'L', 'O', 'W', '\020', '\002', '*', '\366', '\014', '\n', '\n', 'N', 'o', 't', 'i', 'c', 'e', 'S', 'k', 
  'i', 'p', '\022', '\n', '\n', '\006', 'U', 'I', 'N', 'u', 'l', 'l', '\020', '\000', '\022', '\020', '\n', '\014', 'U', 'I', 'H', 'a', 'l', 'l', 'B', 
  'a', 'g', '_', '3', '4', '\020', '\001', '\022', '\020', '\n', '\014', 'U', 'I', 'H', 'a', 'l', 'l', 'B', 'a', 'g', '_', '3', '5', '\020', '\002', 
  '\022', '\026', '\n', '\022', 'U', 'I', 'H', 'a', 'l', 'l', 'M', 'a', 'i', 'n', 'P', 'l', 'a', 'y', 'e', 'r', '_', '0', '\020', '\n', '\022', 
  '\r', '\n', '\t', 'U', 'I', 'E', 'm', 'a', 'i', 'l', '_', '0', '\020', '\013', '\022', '\033', '\n', '\027', 'U', 'I', 'H', 'a', 'l', 'l', 'B', 
  'a', 't', 't', 'l', 'e', 'P', 'a', 's', 's', 'p', 'o', 'r', 't', '_', '5', '1', '\020', '\014', '\022', '\033', '\n', '\027', 'U', 'I', 'H', 
  'a', 'l', 'l', 'B', 'a', 't', 't', 'l', 'e', 'P', 'a', 's', 's', 'p', 'o', 'r', 't', '_', '5', '2', '\020', '\r', '\022', '\033', '\n', 
  '\027', 'U', 'I', 'H', 'a', 'l', 'l', 'B', 'a', 't', 't', 'l', 'e', 'P', 'a', 's', 's', 'p', 'o', 'r', 't', '_', '5', '3', '\020', 
  '\016', '\022', '\033', '\n', '\027', 'U', 'I', 'H', 'a', 'l', 'l', 'B', 'a', 't', 't', 'l', 'e', 'P', 'a', 's', 's', 'p', 'o', 'r', 't', 
  '_', '5', '4', '\020', '\017', '\022', '\023', '\n', '\017', 'U', 'I', 'H', 'a', 'l', 'l', 'P', 'i', 'c', 'B', 'o', 'o', 'k', '_', '3', '\020', 
  '\021', '\022', '\023', '\n', '\017', 'U', 'I', 'H', 'a', 'l', 'l', 'P', 'i', 'c', 'B', 'o', 'o', 'k', '_', '4', '\020', '\022', '\022', '\023', '\n', 
  '\017', 'U', 'I', 'H', 'a', 'l', 'l', 'P', 'i', 'c', 'B', 'o', 'o', 'k', '_', '5', '\020', '\023', '\022', '\023', '\n', '\017', 'U', 'I', 'H', 
  'a', 'l', 'l', 'P', 'i', 'c', 'B', 'o', 'o', 'k', '_', '6', '\020', '\024', '\022', '\024', '\n', '\020', 'U', 'I', 'H', 'a', 'l', 'l', 'P', 
  'i', 'c', 'B', 'o', 'o', 'k', '_', '1', '8', '\020', '\025', '\022', '\032', '\n', '\026', 'U', 'I', 'H', 'a', 'l', 'l', 'A', 'c', 't', 'i', 
  'v', 'i', 't', 'y', 'F', 'o', 'l', 'l', 'o', 'w', '_', '0', '\020', '!', '\022', '\026', '\n', '\022', 'U', 'I', 'H', 'a', 'l', 'l', 'M', 
  'o', 'd', 'e', 'S', 'e', 'l', 'e', 'c', 't', '_', '0', '\020', '\"', '\022', '\026', '\n', '\022', 'U', 'I', 'H', 'a', 'l', 'l', 'M', 'o', 
  'd', 'e', 'S', 'e', 'l', 'e', 'c', 't', '_', '1', '\020', '#', '\022', '\026', '\n', '\022', 'U', 'I', 'H', 'a', 'l', 'l', 'M', 'o', 'd', 
  'e', 'S', 'e', 'l', 'e', 'c', 't', '_', '2', '\020', '$', '\022', '\026', '\n', '\022', 'U', 'I', 'H', 'a', 'l', 'l', 'M', 'o', 'd', 'e', 
  'S', 'e', 'l', 'e', 'c', 't', '_', '3', '\020', '%', '\022', '\022', '\n', '\016', 'U', 'I', 'H', 'a', 'l', 'l', 'C', 'h', 'a', 'r', 'g', 
  'e', '_', '0', '\020', '1', '\022', '\022', '\n', '\016', 'U', 'I', 'H', 'a', 'l', 'l', 'S', 'e', 'a', 's', 'o', 'n', '_', '0', '\020', '2', 
  '\022', '\026', '\n', '\022', 'U', 'I', 'H', 'a', 'l', 'l', 'S', 'p', 'e', 'c', 't', 'a', 't', 'o', 'r', '_', '7', '6', '\020', '7', '\022', 
  '\026', '\n', '\022', 'U', 'I', 'H', 'a', 'l', 'l', 'S', 'p', 'e', 'c', 't', 'a', 't', 'o', 'r', '_', '7', '7', '\020', '8', '\022', '\024', 
  '\n', '\020', 'U', 'I', 'H', 'a', 'l', 'l', 'P', 'i', 'c', 'B', 'o', 'o', 'k', '_', '8', '8', '\020', 'C', '\022', '\025', '\n', '\021', 'U', 
  'I', 'H', 'a', 'l', 'l', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', '_', '2', '2', '\020', 'D', '\022', '\025', '\n', '\021', 'U', 'I', 'H', 
  'a', 'l', 'l', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', '_', '4', '1', '\020', 'F', '\022', '\025', '\n', '\021', 'U', 'I', 'H', 'a', 'l', 
  'l', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', '_', '4', '8', '\020', 'G', '\022', '\025', '\n', '\021', 'U', 'I', 'H', 'a', 'l', 'l', 'A', 
  'c', 't', 'i', 'v', 'i', 't', 'y', '_', '5', '0', '\020', 'H', '\022', '\025', '\n', '\021', 'U', 'I', 'H', 'a', 'l', 'l', 'A', 'c', 't', 
  'i', 'v', 'i', 't', 'y', '_', '5', '6', '\020', 'I', '\022', '\025', '\n', '\021', 'U', 'I', 'H', 'a', 'l', 'l', 'A', 'c', 't', 'i', 'v', 
  'i', 't', 'y', '_', '5', '7', '\020', 'J', '\022', '\025', '\n', '\021', 'U', 'I', 'H', 'a', 'l', 'l', 'A', 'c', 't', 'i', 'v', 'i', 't', 
  'y', '_', '5', '8', '\020', 'K', '\022', '\025', '\n', '\021', 'U', 'I', 'H', 'a', 'l', 'l', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', '_', 
  '7', '8', '\020', 'L', '\022', '\025', '\n', '\021', 'U', 'I', 'H', 'a', 'l', 'l', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', '_', '8', '2', 
  '\020', 'M', '\022', '\025', '\n', '\021', 'U', 'I', 'H', 'a', 'l', 'l', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', '_', '8', '5', '\020', 'O', 
  '\022', '\026', '\n', '\022', 'U', 'I', 'H', 'a', 'l', 'l', 'S', 'e', 'l', 'e', 'c', 't', 'M', 'o', 'd', 'e', '_', '0', '\020', 'P', '\022', 
  '\025', '\n', '\021', 'U', 'I', 'H', 'a', 'l', 'l', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', '_', '8', '3', '\020', 'Q', '\022', '\020', '\n', 
  '\014', 'U', 'I', 'H', 'a', 'l', 'l', 'M', 'a', 'l', 'l', '_', '0', '\020', 'R', '\022', '\020', '\n', '\014', 'U', 'I', 'H', 'a', 'l', 'l', 
  'B', 'a', 'g', '_', '9', '9', '\020', 'S', '\022', '\021', '\n', '\r', 'U', 'I', 'H', 'a', 'l', 'l', 'B', 'a', 'g', '_', '1', '0', '0', 
  '\020', 'T', '\022', '\021', '\n', '\r', 'U', 'I', 'H', 'a', 'l', 'l', 'B', 'a', 'g', '_', '1', '0', '1', '\020', 'U', '\022', '\021', '\n', '\r', 
  'U', 'I', 'H', 'a', 'l', 'l', 'B', 'a', 'g', '_', '1', '0', '2', '\020', 'V', '\022', '\025', '\n', '\021', 'U', 'I', 'H', 'a', 'l', 'l', 
  'A', 'c', 't', 'i', 'v', 'i', 't', 'y', '_', '4', '4', '\020', 'W', '\022', '\025', '\n', '\021', 'U', 'I', 'H', 'a', 'l', 'l', 'A', 'c', 
  't', 'i', 'v', 'i', 't', 'y', '_', '4', '5', '\020', 'X', '\022', '\025', '\n', '\021', 'U', 'I', 'H', 'a', 'l', 'l', 'A', 'c', 't', 'i', 
  'v', 'i', 't', 'y', '_', '4', '6', '\020', 'Y', '\022', '\025', '\n', '\021', 'U', 'I', 'H', 'a', 'l', 'l', 'A', 'c', 't', 'i', 'v', 'i', 
  't', 'y', '_', '4', '9', '\020', 'Z', '\022', '\025', '\n', '\021', 'U', 'I', 'H', 'a', 'l', 'l', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', 
  '_', '8', '1', '\020', '[', '\022', '\024', '\n', '\020', 'U', 'I', 'S', 'h', 'a', 'r', 'e', 'C', 'o', 'm', 'm', 'o', 'n', '_', '6', '5', 
  '\020', '\\', '\022', '\024', '\n', '\020', 'U', 'I', 'S', 'h', 'a', 'r', 'e', 'C', 'o', 'm', 'm', 'o', 'n', '_', '6', '6', '\020', ']', '\022', 
  '\024', '\n', '\020', 'U', 'I', 'S', 'h', 'a', 'r', 'e', 'C', 'o', 'm', 'm', 'o', 'n', '_', '6', '7', '\020', '^', '\022', '\024', '\n', '\020', 
  'U', 'I', 'S', 'h', 'a', 'r', 'e', 'C', 'o', 'm', 'm', 'o', 'n', '_', '6', '8', '\020', '_', '\022', '\024', '\n', '\020', 'U', 'I', 'S', 
  'h', 'a', 'r', 'e', 'C', 'o', 'm', 'm', 'o', 'n', '_', '6', '9', '\020', '`', '\022', '\024', '\n', '\020', 'U', 'I', 'S', 'h', 'a', 'r', 
  'e', 'C', 'o', 'm', 'm', 'o', 'n', '_', '7', '0', '\020', 'a', '\022', '\024', '\n', '\020', 'U', 'I', 'S', 'h', 'a', 'r', 'e', 'C', 'o', 
  'm', 'm', 'o', 'n', '_', '7', '1', '\020', 'b', '\022', '\024', '\n', '\020', 'U', 'I', 'S', 'h', 'a', 'r', 'e', 'C', 'o', 'm', 'm', 'o', 
  'n', '_', '7', '2', '\020', 'c', '\022', '\024', '\n', '\020', 'U', 'I', 'S', 'h', 'a', 'r', 'e', 'C', 'o', 'm', 'm', 'o', 'n', '_', '7', 
  '3', '\020', 'd', '\022', '\024', '\n', '\020', 'U', 'I', 'S', 'h', 'a', 'r', 'e', 'C', 'o', 'm', 'm', 'o', 'n', '_', '7', '4', '\020', 'e', 
  '\022', '\024', '\n', '\020', 'U', 'I', 'S', 'h', 'a', 'r', 'e', 'C', 'o', 'm', 'm', 'o', 'n', '_', '7', '5', '\020', 'f', '\022', '\024', '\n', 
  '\020', 'U', 'I', 'H', 'a', 'l', 'l', 'W', 'o', 'r', 'k', 's', 'h', 'o', 'p', '_', '0', '\020', 'g', '\022', '\025', '\n', '\021', 'U', 'I', 
  'H', 'a', 'l', 'l', 'P', 'i', 'c', 'B', 'o', 'o', 'k', '_', '1', '4', '1', '\020', 'h', '\022', '\025', '\n', '\021', 'U', 'I', 'H', 'a', 
  'l', 'l', 'P', 'i', 'c', 'B', 'o', 'o', 'k', '_', '1', '4', '2', '\020', 'i', '\022', '\025', '\n', '\021', 'U', 'I', 'H', 'a', 'l', 'l', 
  'P', 'i', 'c', 'B', 'o', 'o', 'k', '_', '1', '4', '3', '\020', 'j', '\022', '\025', '\n', '\021', 'U', 'I', 'H', 'a', 'l', 'l', 'P', 'i', 
  'c', 'B', 'o', 'o', 'k', '_', '1', '4', '4', '\020', 'k', '\022', '\025', '\n', '\021', 'U', 'I', 'H', 'a', 'l', 'l', 'P', 'i', 'c', 'B', 
  'o', 'o', 'k', '_', '1', '4', '5', '\020', 'l', '\022', '\027', '\n', '\023', 'U', 'I', 'H', 'a', 'l', 'l', 'G', 'u', 'i', 'l', 'd', 'J', 
  'o', 'i', 'n', '_', '1', '5', '8', '\020', 'm', '\022', '\027', '\n', '\023', 'U', 'I', 'H', 'a', 'l', 'l', 'G', 'u', 'i', 'l', 'd', 'J', 
  'o', 'i', 'n', '_', '1', '5', '9', '\020', 'n', '\022', '\036', '\n', '\032', 'U', 'I', 'H', 'a', 'l', 'l', 'G', 'u', 'i', 'l', 'd', 'C', 
  'r', 'e', 'a', 't', 'e', 'D', 'e', 't', 'a', 'i', 'l', 's', '_', '0', '\020', 'o', '\022', '\032', '\n', '\026', 'U', 'I', 'H', 'a', 'l', 
  'l', 'G', 'u', 'i', 'l', 'd', 'M', 'e', 'm', 'b', 'e', 'r', 's', '_', '1', '6', '0', '\020', 'p', '\022', '\032', '\n', '\026', 'U', 'I', 
  'H', 'a', 'l', 'l', 'G', 'u', 'i', 'l', 'd', 'M', 'e', 'm', 'b', 'e', 'r', 's', '_', '1', '6', '1', '\020', 'q', '\022', '\032', '\n', 
  '\026', 'U', 'I', 'H', 'a', 'l', 'l', 'G', 'u', 'i', 'l', 'd', 'M', 'e', 'm', 'b', 'e', 'r', 's', '_', '1', '6', '2', '\020', 'r', 
  '\022', '\026', '\n', '\022', 'U', 'I', 'H', 'a', 'l', 'l', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', '_', '1', '7', '5', '\020', 's', '\022', 
  '\026', '\n', '\022', 'U', 'I', 'H', 'a', 'l', 'l', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', '_', '1', '4', '0', '\020', 't', '\022', '\023', 
  '\n', '\017', 'U', 'I', 'H', 'a', 'l', 'l', 'A', 'c', 't', 'N', 'o', 't', 'i', 'c', 'e', '\020', 'u', '*', '2', '\n', '\n', 'V', 'I', 
  'D', 'E', 'O', '_', 'T', 'Y', 'P', 'E', '\022', '\014', '\n', '\010', 'T', 'e', 'a', 'c', 'h', 'i', 'n', 'g', '\020', '\000', '\022', '\t', '\n', 
  '\005', 'G', 'e', 'n', 'r', 'e', '\020', '\001', '\022', '\013', '\n', '\007', 'M', 'a', 'x', 'T', 'y', 'p', 'e', '\020', '\002', '*', '0', '\n', '\r', 
  'V', 'I', 'D', 'E', 'O', '_', 'O', 'P', 'E', 'R', 'A', 'T', 'E', '\022', '\007', '\n', '\003', 'A', 'd', 'd', '\020', '\000', '\022', '\n', '\n', 
  '\006', 'M', 'o', 'd', 'i', 'f', 'y', '\020', '\001', '\022', '\n', '\n', '\006', 'R', 'e', 'm', 'o', 'v', 'e', '\020', '\002', '*', 'z', '\n', '\023', 
  'T', 'E', 'A', 'M', '_', 'D', 'I', 'S', 'M', 'I', 'S', 'S', '_', 'R', 'E', 'A', 'S', 'O', 'N', '\022', '\020', '\n', '\014', 'J', 'O', 
  'I', 'N', '_', 'T', 'I', 'M', 'E', 'O', 'U', 'T', '\020', '\000', '\022', '\r', '\n', '\t', 'E', 'N', 'T', 'E', 'R', '_', 'P', 'V', 'P', 
  '\020', '\001', '\022', '\025', '\n', '\021', 'E', 'N', 'T', 'E', 'R', '_', 'P', 'V', 'P', '_', 'T', 'I', 'M', 'E', 'O', 'U', 'T', '\020', '\002', 
  '\022', '\030', '\n', '\024', 'T', 'O', 'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', '_', 'R', 'O', 'U', 'N', 'D', '_', 'E', 'N', 'D', '\020', 
  '\003', '\022', '\021', '\n', '\r', 'T', 'E', 'A', 'M', '_', 'I', 'N', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\004', '*', 'o', '\n', '\017', 'M', 
  'A', 'L', 'L', '_', 'G', 'O', 'O', 'D', 'S', '_', 'F', 'L', 'A', 'G', '\022', '\014', '\n', '\010', 'M', 'G', 'F', '_', 'N', 'U', 'L', 
  'L', '\020', '\000', '\022', '\010', '\n', '\004', 'S', 'A', 'L', 'E', '\020', '\001', '\022', '\027', '\n', '\023', 'P', 'U', 'R', 'C', 'H', 'A', 'S', 'E', 
  '_', 'L', 'I', 'M', 'I', 'T', 'A', 'T', 'I', 'O', 'N', '\020', '\002', '\022', '\007', '\n', '\003', 'N', 'E', 'W', '\020', '\003', '\022', '\016', '\n', 
  '\n', 'T', 'I', 'M', 'E', '_', 'L', 'I', 'M', 'I', 'T', '\020', '\004', '\022', '\007', '\n', '\003', 'H', 'O', 'T', '\020', '\005', '\022', '\t', '\n', 
  '\005', 'T', 'H', 'E', 'M', 'E', '\020', '\006', '*', '>', '\n', '\r', 'E', 'X', 'C', 'H', 'A', 'N', 'G', 'E', 'S', 'T', 'A', 'T', 'E', 
  '\022', '\024', '\n', '\020', 'E', 'X', 'C', 'H', 'A', 'N', 'G', 'E', 'M', 'A', 'R', 'K', '_', 'N', 'O', 'T', '\020', '\000', '\022', '\027', '\n', 
  '\023', 'E', 'X', 'C', 'H', 'A', 'N', 'G', 'E', 'M', 'A', 'R', 'K', '_', 'N', 'O', 'R', 'M', 'A', 'L', '\020', '\001', '*', '+', '\n', 
  '\010', 'W', 'O', 'R', 'D', 'C', 'H', 'A', 'T', '\022', '\017', '\n', '\013', 'T', 'Y', 'P', 'E', '_', 'C', 'O', 'M', 'M', 'O', 'N', '\020', 
  '\000', '\022', '\016', '\n', '\n', 'T', 'Y', 'P', 'E', '_', 'S', 'T', 'E', 'A', 'M', '\020', '\001', '*', '\352', '\001', '\n', '\016', 'B', 'u', 'f', 
  'f', 'E', 'f', 'f', 'e', 'c', 't', 'T', 'y', 'p', 'e', '\022', '\027', '\n', '\023', 'B', 'u', 'f', 'f', 'E', 'f', 'f', 'e', 'c', 't', 
  'T', 'y', 'p', 'e', '_', 'N', 'o', 'n', 'e', '\020', '\000', '\022', '\026', '\n', '\022', 'B', 'u', 'f', 'f', 'E', 'f', 'f', 'e', 'c', 't', 
  'T', 'y', 'p', 'e', '_', 'E', 'x', 'p', '\020', '\001', '\022', '\030', '\n', '\024', 'B', 'u', 'f', 'f', 'E', 'f', 'f', 'e', 'c', 't', 'T', 
  'y', 'p', 'e', '_', 'M', 'o', 'n', 'e', 'y', '\020', '\002', '\022', '\027', '\n', '\023', 'B', 'u', 'f', 'f', 'E', 'f', 'f', 'e', 'c', 't', 
  'T', 'y', 'p', 'e', '_', 'M', 'a', 'l', 'l', '\020', '\003', '\022', '\036', '\n', '\032', 'B', 'u', 'f', 'f', 'E', 'f', 'f', 'e', 'c', 't', 
  'T', 'y', 'p', 'e', '_', 'R', 'a', 'n', 'k', 'P', 'r', 'o', 't', 'e', 'c', 't', '\020', '\004', '\022', '\033', '\n', '\027', 'B', 'u', 'f', 
  'f', 'E', 'f', 'f', 'e', 'c', 't', 'T', 'y', 'p', 'e', '_', 'P', 'a', 's', 's', 'p', 'o', 'r', 't', '\020', '\005', '\022', ' ', '\n', 
  '\034', 'B', 'u', 'f', 'f', 'E', 'f', 'f', 'e', 'c', 't', 'T', 'y', 'p', 'e', '_', 'N', 'e', 'w', 'P', 'l', 'a', 'y', 'e', 'r', 
  '_', 'E', 'x', 'p', '\020', '\006', '\022', '\025', '\n', '\021', 'B', 'u', 'f', 'f', 'E', 'f', 'f', 'e', 'c', 't', 'T', 'y', 'p', 'e', '_', 
  'M', 's', '\020', '\007', '*', 'e', '\n', '\023', 'P', 'l', 'a', 'y', 'e', 'r', 'R', 'e', 'c', 'r', 'u', 'i', 't', 'S', 't', 'a', 't', 
  'u', 's', '\022', '\020', '\n', '\014', 'R', 'E', 'C', 'R', 'U', 'I', 'T', '_', 'I', 'N', 'I', 'T', '\020', '\000', '\022', '\022', '\n', '\016', 'R', 
  'E', 'C', 'R', 'U', 'I', 'T', '_', 'I', 'N', 'V', 'I', 'T', 'E', '\020', '\001', '\022', '\023', '\n', '\017', 'R', 'E', 'C', 'R', 'U', 'I', 
  'T', '_', 'S', 'U', 'C', 'C', 'E', 'S', 'S', '\020', '\002', '\022', '\023', '\n', '\017', 'R', 'E', 'C', 'R', 'U', 'I', 'T', '_', 'I', 'N', 
  'V', 'A', 'L', 'I', 'D', '\020', '\003', '*', '\251', '\001', '\n', '\n', 'T', 'e', 'a', 'c', 'h', 'P', 'h', 'a', 's', 'e', '\022', '\010', '\n', 
  '\004', 'O', 'v', 'e', 'r', '\020', '\000', '\022', '\010', '\n', '\004', 'N', 'o', 'n', 'e', '\020', '\001', '\022', '\017', '\n', '\013', 'I', 'f', 'S', 'k', 
  'i', 'p', 'G', 'u', 'i', 'd', 'e', '\020', '\n', '\022', '\t', '\n', '\005', 'G', 'u', 'i', 'd', 'e', '\020', '\013', '\022', '\021', '\n', '\r', 'N', 
  'e', 'w', 'P', 'l', 'a', 'y', 'e', 'r', 'M', 'o', 'd', 'e', '\020', '\014', '\022', '\020', '\n', '\014', 'A', 'c', 't', 'u', 'a', 'l', 'B', 
  'a', 't', 't', 'l', 'e', '\020', '\r', '\022', '\023', '\n', '\017', 'F', 'i', 'r', 's', 't', 'T', 'e', 'a', 'c', 'h', 'L', 'e', 'v', 'e', 
  'l', '\020', '\016', '\022', '\016', '\n', '\n', 'M', 'o', 'd', 'e', 'S', 'e', 'l', 'e', 'c', 't', '\020', '\017', '\022', '\r', '\n', '\t', 'B', 'e', 
  'g', 'i', 'n', 'P', 'l', 'a', 'y', '\020', '\020', '\022', '\022', '\n', '\016', 'M', 'e', 'n', 't', 'o', 'r', 'S', 'h', 'i', 'p', 'P', 'l', 
  'a', 'y', '\020', '\021', '*', 'G', '\n', '\016', 'E', 'F', 'F', 'E', 'C', 'T', 'T', 'I', 'M', 'E', 'T', 'Y', 'P', 'E', '\022', '\027', '\n', 
  '\023', 'E', 'F', 'F', 'E', 'C', 'T', 'T', 'I', 'M', 'E', 'T', 'Y', 'P', 'E', '_', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\013', '\n', 
  '\007', 'W', 'E', 'E', 'K', 'D', 'A', 'Y', '\020', '\001', '\022', '\017', '\n', '\013', 'F', 'I', 'X', 'D', 'A', 'T', 'E', 'T', 'I', 'M', 'E', 
  '\020', '\002', '*', ':', '\n', '\021', 'A', 'C', 'T', 'I', 'V', 'I', 'T', 'Y', 'T', 'E', 'A', 'M', 'S', 'T', 'A', 'T', 'E', '\022', '\014', 
  '\n', '\010', 'T', 'E', 'A', 'M', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\n', '\n', '\006', 'T', 'E', 'A', 'M', 'I', 'N', '\020', '\001', '\022', 
  '\013', '\n', '\007', 'T', 'E', 'A', 'M', 'O', 'U', 'T', '\020', '\002', '*', 'Z', '\n', '\021', 'A', 'c', 't', 'i', 'v', 'i', 't', 'y', 'R', 
  'e', 's', 'e', 't', 'T', 'y', 'p', 'e', '\022', '\014', '\n', '\010', 'A', 'R', 'T', '_', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\010', '\n', 
  '\004', 'W', 'E', 'E', 'K', '\020', '\001', '\022', '\017', '\n', '\013', 'W', 'E', 'E', 'K', 'R', 'E', 'F', 'R', 'E', 'S', 'H', '\020', '\002', '\022', 
  '\n', '\n', '\006', 'S', 'E', 'A', 'S', 'E', 'N', '\020', '\003', '\022', '\020', '\n', '\014', 'D', 'A', 'Y', 'L', 'Y', 'R', 'E', 'F', 'R', 'E', 
  'S', 'H', '\020', '\004', '*', 'N', '\n', '\026', 'C', 'o', 'n', 's', 'u', 'm', 'e', 'I', 'n', 'c', 'r', 'e', 'a', 's', 'e', 'R', 'e', 
  'f', 'r', 'e', 's', 'h', '\022', '\017', '\n', '\013', 'C', 'I', 'R', 'e', 'f', 'r', 'e', 's', 'h', 'N', 'o', '\020', '\000', '\022', '\020', '\n', 
  '\014', 'C', 'I', 'R', 'e', 'f', 'r', 'e', 's', 'h', 'D', 'a', 'y', '\020', '\001', '\022', '\021', '\n', '\r', 'C', 'I', 'R', 'e', 'f', 'r', 
  'e', 's', 'h', 'W', 'e', 'e', 'k', '\020', '\002', '*', '1', '\n', '\013', 'A', 'c', 't', 'S', 'i', 'g', 'n', 'T', 'y', 'p', 'e', '\022', 
  '\n', '\n', '\006', 'U', 'n', 'S', 'i', 'g', 'n', '\020', '\000', '\022', '\n', '\n', '\006', 'S', 'i', 'g', 'n', 'I', 'n', '\020', '\001', '\022', '\n', 
  '\n', '\006', 'R', 'e', 'S', 'i', 'g', 'n', '\020', '\002', '*', 'i', '\n', '\t', 'G', 'D', 'B', 'i', 'n', 'T', 'y', 'p', 'e', '\022', '\013', 
  '\n', '\007', 'B', 'i', 'n', 'N', 'u', 'l', 'l', '\020', '\000', '\022', '\016', '\n', '\n', 'C', 'o', 'm', 'm', 'o', 'n', 'F', 'i', 'l', 'e', 
  '\020', '\001', '\022', '\014', '\n', '\010', 'C', 'o', 'r', 'e', 'F', 'i', 'l', 'e', '\020', '\002', '\022', '\020', '\n', '\014', 'U', 'n', 'i', 't', 'y', 
  'L', 'o', 'c', 'F', 'i', 'l', 'e', '\020', '\003', '\022', '\023', '\n', '\017', 'U', 'n', 'i', 't', 'y', 'G', 'l', 'o', 'b', 'a', 'l', 'F', 
  'i', 'l', 'e', '\020', '\004', '\022', '\n', '\n', '\006', 'P', 'C', 'F', 'i', 'l', 'e', '\020', '\005', '*', 'O', '\n', '\r', 'G', 'U', 'I', 'L', 
  'D', 'R', 'O', 'L', 'E', 'T', 'Y', 'P', 'E', '\022', '\020', '\n', '\014', 'R', 'O', 'L', 'E', 'T', 'Y', 'P', 'E', 'N', 'U', 'L', 'L', 
  '\020', '\000', '\022', '\n', '\n', '\006', 'M', 'E', 'M', 'B', 'E', 'R', '\020', '\001', '\022', '\013', '\n', '\007', 'O', 'F', 'F', 'I', 'C', 'E', 'R', 
  '\020', '\n', '\022', '\010', '\n', '\004', 'V', 'I', 'C', 'E', '\020', '\024', '\022', '\t', '\n', '\005', 'O', 'W', 'N', 'E', 'R', '\020', '\036', '*', 'T', 
  '\n', '\017', 'G', 'U', 'I', 'L', 'D', 'P', 'E', 'R', 'M', 'I', 'T', 'T', 'Y', 'P', 'E', '\022', '\024', '\n', '\020', 'G', 'U', 'I', 'L', 
  'D', 'P', 'E', 'R', 'M', 'I', 'T', '_', 'N', 'U', 'L', 'L', '\020', '\000', '\022', '\024', '\n', '\020', 'G', 'U', 'I', 'L', 'D', 'P', 'E', 
  'R', 'M', 'I', 'T', '_', 'F', 'R', 'E', 'E', '\020', '\001', '\022', '\025', '\n', '\021', 'G', 'U', 'I', 'L', 'D', 'P', 'E', 'R', 'M', 'I', 
  'T', '_', 'L', 'I', 'M', 'I', 'T', '\020', '\002', '*', 'X', '\n', '\t', 'T', 'e', 'a', 'm', 'S', 't', 'a', 't', 'e', '\022', '\010', '\n', 
  '\004', 'I', 'd', 'l', 'e', '\020', '\000', '\022', '\014', '\n', '\010', 'M', 'a', 't', 'c', 'h', 'i', 'n', 'g', '\020', '\001', '\022', '\007', '\n', '\003', 
  'P', 'v', 'p', '\020', '\002', '\022', '\r', '\n', '\t', 'D', 'i', 's', 'm', 'i', 's', 's', 'e', 'd', '\020', '\003', '\022', '\013', '\n', '\007', 'I', 
  'n', 'v', 'a', 'l', 'i', 'd', '\020', '\004', '\022', '\016', '\n', '\n', 'S', 't', 'a', 't', 'e', 'C', 'o', 'u', 'n', 't', '\020', '\005', '*', 
  '%', '\n', '\007', 'P', 'v', 'e', 'M', 'o', 'd', 'e', '\022', '\013', '\n', '\007', 'C', 'l', 'a', 's', 's', 'i', 'c', '\020', '\000', '\022', '\r', 
  '\n', '\t', 'N', 'i', 'g', 'h', 't', 'm', 'a', 'r', 'e', '\020', '\001', '*', '6', '\n', '\016', 'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 
  'M', 'a', 'p', 's', 'O', 'P', '\022', '\n', '\n', '\006', 'M', 'o', 'v', 'e', 'I', 'n', '\020', '\000', '\022', '\013', '\n', '\007', 'M', 'o', 'v', 
  'e', 'O', 'u', 't', '\020', '\001', '\022', '\013', '\n', '\007', 'O', 'P', 'C', 'o', 'u', 'n', 't', '\020', '\002', '*', 'C', '\n', '\021', 'T', 'r', 
  'a', 'n', 's', 'f', 'e', 'r', 'E', 'v', 'e', 'n', 't', 'T', 'y', 'p', 'e', '\022', '\r', '\n', '\t', 'P', 'r', 'e', 's', 'e', 'r', 
  'v', 'e', 'd', '\020', '\000', '\022', '\n', '\n', '\006', 'S', 'l', 'i', 'e', 'n', 't', '\020', '\001', '\022', '\023', '\n', '\017', 'O', 'f', 'f', 'i', 
  'c', 'i', 'a', 'l', 'A', 'c', 'c', 'o', 'u', 'n', 't', '\020', '\002', '*', 'D', '\n', '\017', 'O', 'B', 'S', 'E', 'R', 'V', 'E', 'R', 
  'A', 'C', 'E', 'M', 'O', 'D', 'E', '\022', '\033', '\n', '\027', 'O', 'B', 'S', 'E', 'R', 'V', 'E', '_', 'R', 'A', 'C', 'E', '_', 'T', 
  'O', 'U', 'R', 'N', 'A', 'M', 'E', 'N', 'T', '\020', '\000', '\022', '\024', '\n', '\020', 'O', 'B', 'S', 'E', 'R', 'V', 'E', '_', 'R', 'A', 
  'C', 'E', '_', 'M', 'A', 'X', '\020', 'd', '*', '0', '\n', '\010', 'T', 'A', 'S', 'K', 'T', 'Y', 'P', 'E', '\022', '\013', '\n', '\007', 'D', 
  'E', 'F', 'A', 'U', 'L', 'T', '\020', '\000', '\022', '\n', '\n', '\006', 'T', 'R', 'O', 'P', 'H', 'Y', '\020', '\001', '\022', '\013', '\n', '\007', 'A', 
  'C', 'H', 'I', 'E', 'V', 'E', '\020', '\002', '*', '0', '\n', '\020', 'U', 's', 'e', 'r', 'R', 'e', 's', 't', 'r', 'i', 'c', 't', 'T', 
  'y', 'p', 'e', '\022', '\r', '\n', '\t', 'U', 'N', 'L', 'I', 'M', 'I', 'T', 'E', 'D', '\020', '\000', '\022', '\r', '\n', '\t', 'U', 'N', 'D', 
  'E', 'R', '_', 'A', 'G', 'E', '\020', '\001', '*', '@', '\n', '\020', 'O', 'U', 'T', 'P', 'U', 'T', '_', 'I', 'T', 'E', 'M', '_', 'T', 
  'Y', 'P', 'E', '\022', '\017', '\n', '\013', 'I', 'T', 'E', 'M', '_', 'N', 'O', 'R', 'M', 'A', 'L', '\020', '\000', '\022', '\014', '\n', '\010', 'I', 
  'T', 'E', 'M', '_', 'L', 'O', 'W', '\020', '\001', '\022', '\r', '\n', '\t', 'I', 'T', 'E', 'M', '_', 'H', 'I', 'G', 'H', '\020', '\002', '*', 
  '3', '\n', '\013', 'L', 'O', 'G', 'I', 'N', 'S', 'O', 'U', 'R', 'C', 'E', '\022', '\020', '\n', '\014', 'N', 'O', 'R', 'M', 'A', 'L', '_', 
  'L', 'O', 'G', 'I', 'N', '\020', '\000', '\022', '\022', '\n', '\016', 'B', 'L', 'A', 'C', 'K', 'B', 'O', 'X', '_', 'L', 'O', 'G', 'I', 'N', 
  '\020', '\001', '*', 'z', '\n', '\020', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', 'C', 'A', 'R', 'D', 'T', 'Y', 'P', 'E', '\022', '\020', '\n', 
  '\014', 'N', 'O', '_', 'C', 'A', 'R', 'D', '_', 'T', 'Y', 'P', 'E', '\020', '\000', '\022', '\025', '\n', '\021', 'D', 'E', 'F', 'A', 'U', 'L', 
  'T', '_', 'C', 'A', 'R', 'D', '_', 'T', 'Y', 'P', 'E', '\020', '\001', '\022', '\026', '\n', '\022', 'G', 'R', 'A', 'D', 'U', 'A', 'T', 'E', 
  '_', 'C', 'A', 'R', 'D', '_', 'T', 'Y', 'P', 'E', '\020', '\002', '\022', '\022', '\n', '\016', 'Y', 'E', 'A', 'R', '_', 'C', 'A', 'R', 'D', 
  '_', 'T', 'Y', 'P', 'E', '\020', '\003', '\022', '\021', '\n', '\r', 'M', 'A', 'X', '_', 'C', 'A', 'R', 'D', '_', 'T', 'Y', 'P', 'E', '\020', 
  '\004', '*', '\210', '\001', '\n', '\r', 'P', 'V', 'E', '_', 'B', 'U', 'F', 'F', '_', 'T', 'Y', 'P', 'E', '\022', '\r', '\n', '\t', 'B', 'U', 
  'F', 'F', '_', 'N', 'O', 'N', 'E', '\020', '\000', '\022', '\r', '\n', '\t', 'B', 'U', 'F', 'F', '_', 'P', 'R', 'O', 'P', '\020', '\001', '\022', 
  '\025', '\n', '\021', 'B', 'U', 'F', 'F', '_', 'S', 'T', 'A', 'T', 'I', 'O', 'N', '_', 'G', 'A', 'I', 'N', '\020', '\002', '\022', '\014', '\n', 
  '\010', 'B', 'U', 'F', 'F', '_', 'V', 'I', 'P', '\020', '\003', '\022', '\017', '\n', '\013', 'B', 'U', 'F', 'F', '_', 'D', 'E', 'B', 'U', 'F', 
  'F', '\020', '\004', '\022', '\017', '\n', '\013', 'B', 'U', 'F', 'F', '_', 'K', 'E', 'R', 'N', 'E', 'L', '\020', '\005', '\022', '\022', '\n', '\016', 'B', 
  'U', 'F', 'F', '_', 'S', 'U', 'P', 'E', 'R', '_', 'V', 'I', 'P', '\020', '\006', '*', 'v', '\n', '\r', 'C', 'H', 'E', 'S', 'S', '_', 
  'Q', 'U', 'A', 'L', 'I', 'T', 'Y', '\022', '\020', '\n', '\014', 'N', 'O', 'R', 'M', 'A', 'L', '_', 'C', 'H', 'E', 'S', 'S', '\020', '\000', 
  '\022', '\016', '\n', '\n', 'R', 'A', 'R', 'E', '_', 'C', 'H', 'E', 'S', 'S', '\020', '\001', '\022', '\022', '\n', '\016', 'U', 'N', 'C', 'O', 'M', 
  'M', 'O', 'N', '_', 'C', 'H', 'E', 'S', 'S', '\020', '\002', '\022', '\016', '\n', '\n', 'E', 'P', 'I', 'C', '_', 'C', 'H', 'E', 'S', 'S', 
  '\020', '\003', '\022', '\020', '\n', '\014', 'L', 'E', 'G', 'E', 'N', 'D', '_', 'C', 'H', 'E', 'S', 'S', '\020', '\004', '\022', '\r', '\n', '\t', 'A', 
  'L', 'L', '_', 'C', 'H', 'E', 'S', 'S', '\020', 'c', '*', '5', '\n', '\016', 'P', 'V', 'E', 'C', 'O', 'N', 'S', 'U', 'M', 'E', 'T', 
  'Y', 'P', 'E', '\022', '\021', '\n', '\r', 'C', 'O', 'N', 'S', 'U', 'M', 'E', '_', 'S', 'C', 'O', 'R', 'E', '\020', '\000', '\022', '\020', '\n', 
  '\014', 'C', 'O', 'N', 'S', 'U', 'M', 'E', '_', 'I', 'T', 'E', 'M', '\020', '\001', '*', '$', '\n', '\014', 'P', 'V', 'E', 'C', 'H', 'E', 
  'S', 'S', 'T', 'Y', 'P', 'E', '\022', '\t', '\n', '\005', 'C', 'H', 'E', 'S', 'S', '\020', '\000', '\022', '\t', '\n', '\005', 'S', 'K', 'I', 'L', 
  'L', '\020', '\001', '*', '+', '\n', '\014', 'P', 'V', 'E', 'S', 'K', 'I', 'L', 'L', 'T', 'Y', 'P', 'E', '\022', '\016', '\n', '\n', 'I', 'N', 
  'I', 'T', 'I', 'A', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\013', '\n', '\007', 'P', 'A', 'S', 'S', 'I', 'V', 'E', '\020', '\001', '*', '2', 
  '\n', '\013', 'P', 'V', 'E', 'R', 'A', 'N', 'K', 'T', 'Y', 'P', 'E', '\022', '\022', '\n', '\016', 'R', 'A', 'N', 'K', '_', 'C', 'H', 'A', 
  'L', 'L', 'E', 'N', 'G', 'E', '\020', '\000', '\022', '\017', '\n', '\013', 'R', 'A', 'N', 'K', '_', 'C', 'U', 'S', 'T', 'O', 'M', '\020', '\001', 
  '*', '6', '\n', '\n', 'M', 'E', 'N', 'T', 'O', 'R', 'S', 'H', 'I', 'P', '\022', '\n', '\n', '\006', 'M', 'E', 'N', 'T', 'O', 'R', '\020', 
  '\000', '\022', '\t', '\n', '\005', 'P', 'U', 'P', 'I', 'L', '\020', '\001', '\022', '\021', '\n', '\r', 'N', 'O', 'N', 'E', '_', 'R', 'E', 'L', 'A', 
  'T', 'I', 'O', 'N', '\020', '\002', '*', 'n', '\n', '\016', 'M', 'E', 'N', 'T', 'O', 'R', 'S', 'H', 'I', 'P', 'T', 'A', 'S', 'K', '\022', 
  '\023', '\n', '\017', 'I', 'L', 'L', 'E', 'G', 'A', 'L', '_', 'A', 'R', 'C', 'H', 'I', 'V', 'E', '\020', '\000', '\022', '\022', '\n', '\016', 'M', 
  'E', 'N', 'T', 'O', 'R', '_', 'A', 'R', 'C', 'H', 'I', 'V', 'E', '\020', '\001', '\022', '\030', '\n', '\024', 'M', 'E', 'N', 'T', 'R', 'O', 
  '_', 'P', 'U', 'P', 'I', 'L', '_', 'A', 'R', 'C', 'H', 'I', 'V', 'E', '\020', '\002', '\022', '\031', '\n', '\025', 'M', 'E', 'N', 'T', 'R', 
  'O', '_', 'P', 'U', 'P', 'I', 'L', '_', 'G', 'R', 'A', 'D', 'U', 'A', 'T', 'E', '\020', '\003', '*', 'M', '\n', '\013', 'M', 'E', 'N', 
  'T', 'O', 'R', 'R', 'E', 'A', 'C', 'H', '\022', '\016', '\n', '\n', 'E', 'R', 'R', 'O', 'R', '_', 'T', 'Y', 'P', 'E', '\020', '\000', '\022', 
  '\023', '\n', '\017', 'M', 'A', 'X', '_', 'H', 'I', 'S', 'T', 'O', 'R', 'Y', '_', 'M', 'M', 'R', '\020', '\001', '\022', '\n', '\n', '\006', 'L', 
  'E', 'A', 'V', 'E', 'L', '\020', '\002', '\022', '\r', '\n', '\t', 'P', 'U', 'P', 'I', 'L', '_', 'M', 'M', 'R', '\020', '\003', '*', '4', '\n', 
  '\n', 'M', 'E', 'N', 'T', 'O', 'R', 'A', 'D', 'D', 'N', '\022', '\007', '\n', '\003', 'M', 'M', 'R', '\020', '\000', '\022', '\007', '\n', '\003', 'E', 
  'X', 'P', '\020', '\001', '\022', '\024', '\n', '\020', 'P', 'A', 'S', 'S', 'P', 'O', 'R', 'T', '_', 'I', 'N', 'T', 'E', 'G', 'E', 'R', '\020', 
  '\002', '*', 'c', '\n', '\013', 'M', 'E', 'N', 'T', 'O', 'R', 'L', 'E', 'V', 'E', 'L', '\022', '\021', '\n', '\r', 'I', 'L', 'L', 'E', 'G', 
  'A', 'L', '_', 'L', 'E', 'V', 'E', 'L', '\020', '\000', '\022', '\020', '\n', '\014', 'C', 'O', 'P', 'P', 'E', 'R', '_', 'L', 'E', 'V', 'E', 
  'L', '\020', '\001', '\022', '\020', '\n', '\014', 'S', 'I', 'L', 'V', 'E', 'R', '_', 'L', 'E', 'V', 'E', 'L', '\020', '\002', '\022', '\016', '\n', '\n', 
  'G', 'O', 'L', 'D', '_', 'L', 'E', 'V', 'E', 'L', '\020', '\003', '\022', '\r', '\n', '\t', 'M', 'A', 'X', '_', 'L', 'E', 'V', 'E', 'L', 
  '\020', '\004', '*', 'H', '\n', '\017', 'M', 'E', 'N', 'T', 'O', 'R', 'R', 'E', 'C', 'O', 'M', 'M', 'E', 'N', 'D', '\022', '\017', '\n', '\013', 
  'M', 'E', 'N', 'T', 'O', 'R', '_', 'R', 'A', 'N', 'K', '\020', '\000', '\022', '\024', '\n', '\020', 'M', 'E', 'N', 'T', 'O', 'R', '_', 'R', 
  'A', 'N', 'D', '_', 'L', 'I', 'S', 'T', '\020', '\001', '\022', '\016', '\n', '\n', 'P', 'U', 'P', 'I', 'L', '_', 'R', 'A', 'N', 'K', '\020', 
  '\002', '*', '\200', '\001', '\n', '\t', 'P', 'U', 'P', 'I', 'L', 'S', 'T', 'A', 'T', '\022', '\014', '\n', '\010', 'P', 'R', 'A', 'C', 'T', 'I', 
  'C', 'E', '\020', '\000', '\022', '\n', '\n', '\006', 'R', 'E', 'M', 'O', 'V', 'E', '\020', '\001', '\022', '\014', '\n', '\010', 'G', 'R', 'A', 'D', 'U', 
  'A', 'T', 'E', '\020', '\002', '\022', '\033', '\n', '\027', 'P', 'U', 'P', 'I', 'L', '_', 'G', 'R', 'A', 'D', 'U', 'A', 'T', 'E', '_', 'A', 
  'P', 'P', 'L', 'Y', 'I', 'N', 'G', '\020', '\003', '\022', '\034', '\n', '\030', 'M', 'E', 'N', 'T', 'O', 'R', '_', 'G', 'R', 'A', 'D', 'U', 
  'A', 'T', 'E', '_', 'A', 'P', 'P', 'L', 'Y', 'I', 'N', 'G', '\020', '\004', '\022', '\020', '\n', '\014', 'L', 'I', 'M', 'I', 'T', '_', 'R', 
  'E', 'M', 'O', 'V', 'E', '\020', '\005', '*', 'M', '\n', '\016', 'K', 'E', 'R', 'N', 'E', 'L', 'J', 'S', 'O', 'N', 'T', 'Y', 'P', 'E', 
  '\022', '\r', '\n', '\t', 'N', 'O', 'N', 'E', '_', 'T', 'Y', 'P', 'E', '\020', '\000', '\022', '\021', '\n', '\r', 'B', 'A', 'T', 'T', 'L', 'E', 
  '_', 'B', 'U', 'F', 'F', 'E', 'R', '\020', '\001', '\022', '\016', '\n', '\n', 'S', 'T', 'A', 'T', 'E', '_', 'J', 'S', 'O', 'N', '\020', '\002', 
  '\022', '\t', '\n', '\005', 'O', 'T', 'H', 'E', 'R', '\020', '\003', 'b', '\006', 'p', 'r', 'o', 't', 'o', '3', 
  '\0' };
static ::_pbi::once_flag descriptor_table_common_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2eproto = {
    false, false, 69219, descriptor_table_protodef_common_2eproto,
    "common.proto",
    &descriptor_table_common_2eproto_once, nullptr, 0, 322,
    schemas, file_default_instances, TableStruct_common_2eproto::offsets,
    file_level_metadata_common_2eproto, file_level_enum_descriptors_common_2eproto,
    file_level_service_descriptors_common_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2eproto_getter() {
  return &descriptor_table_common_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2eproto(&descriptor_table_common_2eproto);
namespace msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* REASON_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool REASON_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SOURCE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[1];
}
bool SOURCE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PLAYERSTATUS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[2];
}
bool PLAYERSTATUS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FRIENDINVISIBLE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[3];
}
bool FRIENDINVISIBLE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PLATFORMTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[4];
}
bool PLATFORMTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MAGNETISMTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[5];
}
bool MAGNETISMTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PVPEND_REASON_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[6];
}
bool PVPEND_REASON_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CHANELTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[7];
}
bool CHANELTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NETTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[8];
}
bool NETTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LOGINTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[9];
}
bool LOGINTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LAUNCHTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[10];
}
bool LAUNCHTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CHANNELVIPTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[11];
}
bool CHANNELVIPTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CHARGERESULT_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[12];
}
bool CHARGERESULT_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CHEST_OPEN_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[13];
}
bool CHEST_OPEN_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ITEMTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[14];
}
bool ITEMTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ITEMQUALITY_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[15];
}
bool ITEMQUALITY_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ITEMSHAREBG_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[16];
}
bool ITEMSHAREBG_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ITEMACCUMTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[17];
}
bool ITEMACCUMTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ITEMSELLSTATUS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[18];
}
bool ITEMSELLSTATUS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PVPMODE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[19];
}
bool PVPMODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEAMGROUP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[20];
}
bool TEAMGROUP_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEAMTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[21];
}
bool TEAMTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEAMGROUPBEGINIDX_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[22];
}
bool TEAMGROUPBEGINIDX_IsValid(int value) {
  switch (value) {
    case 0:
    case 1000:
    case 2000:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEAMOP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[23];
}
bool TEAMOP_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OFFLINE_INVITE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[24];
}
bool OFFLINE_INVITE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WINTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[25];
}
bool WINTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RANKTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[26];
}
bool RANKTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FROZEN_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[27];
}
bool FROZEN_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NOTICETYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[28];
}
bool NOTICETYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NOTICETAP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[29];
}
bool NOTICETAP_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PICNOTICEJUMPTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[30];
}
bool PICNOTICEJUMPTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ADSTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[31];
}
bool ADSTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ADSPAYTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[32];
}
bool ADSPAYTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PASSPORTTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[33];
}
bool PASSPORTTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RELOADTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[34];
}
bool RELOADTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TRANSACTION_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[35];
}
bool TRANSACTION_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CONDTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[36];
}
bool CONDTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 300:
    case 301:
    case 302:
    case 400:
    case 402:
    case 403:
    case 405:
    case 406:
    case 407:
    case 408:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 601:
    case 602:
    case 603:
    case 604:
    case 606:
    case 703:
    case 705:
    case 709:
    case 801:
    case 900:
    case 901:
    case 902:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1100:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1314:
    case 1327:
    case 1400:
    case 1500:
    case 1502:
    case 1503:
    case 1504:
    case 1505:
    case 1506:
    case 1507:
    case 1600:
    case 1601:
    case 1602:
    case 1603:
    case 1604:
    case 1900:
    case 1901:
    case 2003:
    case 2101:
    case 2102:
    case 2103:
    case 2104:
    case 2105:
    case 2106:
    case 2107:
    case 2108:
    case 2200:
    case 2300:
    case 2301:
    case 2302:
    case 2400:
    case 2500:
    case 2501:
    case 2600:
    case 2700:
    case 2701:
    case 2800:
    case 2801:
    case 2802:
    case 2803:
    case 2804:
    case 2805:
    case 2812:
    case 2900:
    case 2950:
    case 2951:
    case 3200:
    case 3201:
    case 3202:
    case 3203:
    case 3204:
    case 3300:
    case 3301:
    case 3400:
    case 3600:
    case 4000:
    case 4001:
    case 4002:
    case 5000:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PASSPORTTASKTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[37];
}
bool PASSPORTTASKTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SHOPTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[38];
}
bool SHOPTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PAYRESULT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[39];
}
bool PAYRESULT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CURRENCYTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[40];
}
bool CURRENCYTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NOTICESHOWTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[41];
}
bool NOTICESHOWTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NOTICECONTENTTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[42];
}
bool NOTICECONTENTTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ACTIVITYTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[43];
}
bool ACTIVITYTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HISTORYPVPSHOWPERMISSION_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[44];
}
bool HISTORYPVPSHOWPERMISSION_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CHATTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[45];
}
bool CHATTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CHATSOURCETYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[46];
}
bool CHATSOURCETYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SWITCHTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[47];
}
bool SWITCHTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 200:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 400:
    case 500:
    case 600:
    case 700:
    case 800:
    case 801:
    case 900:
    case 1000:
    case 1100:
    case 1101:
    case 1200:
    case 1201:
    case 1300:
    case 1400:
    case 1500:
    case 1600:
    case 1700:
    case 1800:
    case 1900:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MALLTABTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[48];
}
bool MALLTABTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SKIPTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[49];
}
bool SKIPTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JOINTEAMTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[50];
}
bool JOINTEAMTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 254:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BUFFACTSTATUS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[51];
}
bool BUFFACTSTATUS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SMSTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[52];
}
bool SMSTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OBSERVELISTTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[53];
}
bool OBSERVELISTTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WEBOP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[54];
}
bool WEBOP_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WEBRESULT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[55];
}
bool WEBRESULT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PUNISHMENTBEHAVIOR_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[56];
}
bool PUNISHMENTBEHAVIOR_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PUNISHMENTTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[57];
}
bool PUNISHMENTTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BANNERTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[58];
}
bool BANNERTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ACCOUNT_STATUS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[59];
}
bool ACCOUNT_STATUS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ABTESTTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[60];
}
bool ABTESTTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LABELTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[61];
}
bool LABELTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* INVITETYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[62];
}
bool INVITETYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TOURNAMENTSTATUS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[63];
}
bool TOURNAMENTSTATUS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PASSPORTREFRESH_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[64];
}
bool PASSPORTREFRESH_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OBSERVEPRIVILEGE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[65];
}
bool OBSERVEPRIVILEGE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NoticeSkip_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[66];
}
bool NoticeSkip_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 49:
    case 50:
    case 55:
    case 56:
    case 67:
    case 68:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VIDEO_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[67];
}
bool VIDEO_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VIDEO_OPERATE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[68];
}
bool VIDEO_OPERATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEAM_DISMISS_REASON_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[69];
}
bool TEAM_DISMISS_REASON_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MALL_GOODS_FLAG_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[70];
}
bool MALL_GOODS_FLAG_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EXCHANGESTATE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[71];
}
bool EXCHANGESTATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WORDCHAT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[72];
}
bool WORDCHAT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BuffEffectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[73];
}
bool BuffEffectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerRecruitStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[74];
}
bool PlayerRecruitStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeachPhase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[75];
}
bool TeachPhase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EFFECTTIMETYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[76];
}
bool EFFECTTIMETYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ACTIVITYTEAMSTATE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[77];
}
bool ACTIVITYTEAMSTATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActivityResetType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[78];
}
bool ActivityResetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConsumeIncreaseRefresh_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[79];
}
bool ConsumeIncreaseRefresh_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActSignType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[80];
}
bool ActSignType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GDBinType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[81];
}
bool GDBinType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GUILDROLETYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[82];
}
bool GUILDROLETYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 20:
    case 30:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GUILDPERMITTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[83];
}
bool GUILDPERMITTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeamState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[84];
}
bool TeamState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PveMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[85];
}
bool PveMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShortcutMapsOP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[86];
}
bool ShortcutMapsOP_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransferEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[87];
}
bool TransferEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OBSERVERACEMODE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[88];
}
bool OBSERVERACEMODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TASKTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[89];
}
bool TASKTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserRestrictType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[90];
}
bool UserRestrictType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OUTPUT_ITEM_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[91];
}
bool OUTPUT_ITEM_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LOGINSOURCE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[92];
}
bool LOGINSOURCE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PASSPORTCARDTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[93];
}
bool PASSPORTCARDTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PVE_BUFF_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[94];
}
bool PVE_BUFF_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CHESS_QUALITY_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[95];
}
bool CHESS_QUALITY_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PVECONSUMETYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[96];
}
bool PVECONSUMETYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PVECHESSTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[97];
}
bool PVECHESSTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PVESKILLTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[98];
}
bool PVESKILLTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PVERANKTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[99];
}
bool PVERANKTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MENTORSHIP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[100];
}
bool MENTORSHIP_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MENTORSHIPTASK_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[101];
}
bool MENTORSHIPTASK_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MENTORREACH_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[102];
}
bool MENTORREACH_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MENTORADDN_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[103];
}
bool MENTORADDN_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MENTORLEVEL_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[104];
}
bool MENTORLEVEL_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MENTORRECOMMEND_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[105];
}
bool MENTORRECOMMEND_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PUPILSTAT_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[106];
}
bool PUPILSTAT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KERNELJSONTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[107];
}
bool KERNELJSONTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class BountySetting::_Internal {
 public:
};

BountySetting::BountySetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.BountySetting)
}
BountySetting::BountySetting(const BountySetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BountySetting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.currencyid_){}
    , decltype(_impl_.currencymin_){}
    , decltype(_impl_.currencymax_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.currencyid_, &from._impl_.currencyid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.currencymax_) -
    reinterpret_cast<char*>(&_impl_.currencyid_)) + sizeof(_impl_.currencymax_));
  // @@protoc_insertion_point(copy_constructor:msg.BountySetting)
}

inline void BountySetting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.currencyid_){0}
    , decltype(_impl_.currencymin_){0}
    , decltype(_impl_.currencymax_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BountySetting::~BountySetting() {
  // @@protoc_insertion_point(destructor:msg.BountySetting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BountySetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BountySetting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BountySetting::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.BountySetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.currencyid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.currencymax_) -
      reinterpret_cast<char*>(&_impl_.currencyid_)) + sizeof(_impl_.currencymax_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BountySetting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 CurrencyId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.currencyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CurrencyMin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.currencymin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CurrencyMax = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.currencymax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BountySetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.BountySetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 CurrencyId = 1;
  if (this->_internal_currencyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_currencyid(), target);
  }

  // int32 CurrencyMin = 2;
  if (this->_internal_currencymin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_currencymin(), target);
  }

  // int32 CurrencyMax = 3;
  if (this->_internal_currencymax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_currencymax(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.BountySetting)
  return target;
}

size_t BountySetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.BountySetting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 CurrencyId = 1;
  if (this->_internal_currencyid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currencyid());
  }

  // int32 CurrencyMin = 2;
  if (this->_internal_currencymin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currencymin());
  }

  // int32 CurrencyMax = 3;
  if (this->_internal_currencymax() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currencymax());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BountySetting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BountySetting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BountySetting::GetClassData() const { return &_class_data_; }


void BountySetting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BountySetting*>(&to_msg);
  auto& from = static_cast<const BountySetting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.BountySetting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_currencyid() != 0) {
    _this->_internal_set_currencyid(from._internal_currencyid());
  }
  if (from._internal_currencymin() != 0) {
    _this->_internal_set_currencymin(from._internal_currencymin());
  }
  if (from._internal_currencymax() != 0) {
    _this->_internal_set_currencymax(from._internal_currencymax());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BountySetting::CopyFrom(const BountySetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.BountySetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BountySetting::IsInitialized() const {
  return true;
}

void BountySetting::InternalSwap(BountySetting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BountySetting, _impl_.currencymax_)
      + sizeof(BountySetting::_impl_.currencymax_)
      - PROTOBUF_FIELD_OFFSET(BountySetting, _impl_.currencyid_)>(
          reinterpret_cast<char*>(&_impl_.currencyid_),
          reinterpret_cast<char*>(&other->_impl_.currencyid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BountySetting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[0]);
}

// ===================================================================

class TeamOPSetting::_Internal {
 public:
  static const ::msg::WorkshopSetting& workshop(const TeamOPSetting* msg);
  static const ::msg::BountySetting& bounty(const TeamOPSetting* msg);
  static const ::msg::PveSetting& pvesetting(const TeamOPSetting* msg);
};

const ::msg::WorkshopSetting&
TeamOPSetting::_Internal::workshop(const TeamOPSetting* msg) {
  return *msg->_impl_.workshop_;
}
const ::msg::BountySetting&
TeamOPSetting::_Internal::bounty(const TeamOPSetting* msg) {
  return *msg->_impl_.bounty_;
}
const ::msg::PveSetting&
TeamOPSetting::_Internal::pvesetting(const TeamOPSetting* msg) {
  return *msg->_impl_.pvesetting_;
}
TeamOPSetting::TeamOPSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TeamOPSetting)
}
TeamOPSetting::TeamOPSetting(const TeamOPSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TeamOPSetting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lockgroups_){from._impl_.lockgroups_}
    , decltype(_impl_.pwd_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.workshop_){nullptr}
    , decltype(_impl_.bounty_){nullptr}
    , decltype(_impl_.pvesetting_){nullptr}
    , decltype(_impl_.pwdopen_){}
    , decltype(_impl_.visible_){}
    , decltype(_impl_.inviteauthority_){}
    , decltype(_impl_.teamtype_){}
    , decltype(_impl_.submode_){}
    , decltype(_impl_.customgameid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pwd().empty()) {
    _this->_impl_.pwd_.Set(from._internal_pwd(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channelusrid().empty()) {
    _this->_impl_.channelusrid_.Set(from._internal_channelusrid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_workshop()) {
    _this->_impl_.workshop_ = new ::msg::WorkshopSetting(*from._impl_.workshop_);
  }
  if (from._internal_has_bounty()) {
    _this->_impl_.bounty_ = new ::msg::BountySetting(*from._impl_.bounty_);
  }
  if (from._internal_has_pvesetting()) {
    _this->_impl_.pvesetting_ = new ::msg::PveSetting(*from._impl_.pvesetting_);
  }
  ::memcpy(&_impl_.pwdopen_, &from._impl_.pwdopen_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.customgameid_) -
    reinterpret_cast<char*>(&_impl_.pwdopen_)) + sizeof(_impl_.customgameid_));
  // @@protoc_insertion_point(copy_constructor:msg.TeamOPSetting)
}

inline void TeamOPSetting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lockgroups_){arena}
    , decltype(_impl_.pwd_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.workshop_){nullptr}
    , decltype(_impl_.bounty_){nullptr}
    , decltype(_impl_.pvesetting_){nullptr}
    , decltype(_impl_.pwdopen_){false}
    , decltype(_impl_.visible_){false}
    , decltype(_impl_.inviteauthority_){0}
    , decltype(_impl_.teamtype_){0}
    , decltype(_impl_.submode_){0u}
    , decltype(_impl_.customgameid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TeamOPSetting::~TeamOPSetting() {
  // @@protoc_insertion_point(destructor:msg.TeamOPSetting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamOPSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lockgroups_.~RepeatedField();
  _impl_.pwd_.Destroy();
  _impl_.name_.Destroy();
  _impl_.channelusrid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.workshop_;
  if (this != internal_default_instance()) delete _impl_.bounty_;
  if (this != internal_default_instance()) delete _impl_.pvesetting_;
}

void TeamOPSetting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TeamOPSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TeamOPSetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lockgroups_.Clear();
  _impl_.pwd_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.channelusrid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.workshop_ != nullptr) {
    delete _impl_.workshop_;
  }
  _impl_.workshop_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bounty_ != nullptr) {
    delete _impl_.bounty_;
  }
  _impl_.bounty_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvesetting_ != nullptr) {
    delete _impl_.pvesetting_;
  }
  _impl_.pvesetting_ = nullptr;
  ::memset(&_impl_.pwdopen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.customgameid_) -
      reinterpret_cast<char*>(&_impl_.pwdopen_)) + sizeof(_impl_.customgameid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamOPSetting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pwd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TeamOPSetting.pwd"));
        } else
          goto handle_unusual;
        continue;
      // bool pwdOpen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pwdopen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool visible = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 inviteAuthority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.inviteauthority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TEAMTYPE teamType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_teamtype(static_cast<::msg::TEAMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TeamOPSetting.name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 subMode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.submode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool lockGroups = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_lockgroups(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_lockgroups(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 customGameId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.customgameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.WorkshopSetting Workshop = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_workshop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.BountySetting Bounty = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounty(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string channelUsrId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_channelusrid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TeamOPSetting.channelUsrId"));
        } else
          goto handle_unusual;
        continue;
      // .msg.PveSetting PveSetting = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvesetting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamOPSetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TeamOPSetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pwd = 1;
  if (!this->_internal_pwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pwd().data(), static_cast<int>(this->_internal_pwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TeamOPSetting.pwd");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pwd(), target);
  }

  // bool pwdOpen = 2;
  if (this->_internal_pwdopen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_pwdopen(), target);
  }

  // bool visible = 3;
  if (this->_internal_visible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_visible(), target);
  }

  // int32 inviteAuthority = 4;
  if (this->_internal_inviteauthority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_inviteauthority(), target);
  }

  // .msg.TEAMTYPE teamType = 5;
  if (this->_internal_teamtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_teamtype(), target);
  }

  // string name = 6;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TeamOPSetting.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // uint32 subMode = 7;
  if (this->_internal_submode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_submode(), target);
  }

  // repeated bool lockGroups = 8;
  if (this->_internal_lockgroups_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_lockgroups(), target);
  }

  // int32 customGameId = 9;
  if (this->_internal_customgameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_customgameid(), target);
  }

  // .msg.WorkshopSetting Workshop = 10;
  if (this->_internal_has_workshop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::workshop(this),
        _Internal::workshop(this).GetCachedSize(), target, stream);
  }

  // .msg.BountySetting Bounty = 11;
  if (this->_internal_has_bounty()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::bounty(this),
        _Internal::bounty(this).GetCachedSize(), target, stream);
  }

  // string channelUsrId = 12;
  if (!this->_internal_channelusrid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelusrid().data(), static_cast<int>(this->_internal_channelusrid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TeamOPSetting.channelUsrId");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_channelusrid(), target);
  }

  // .msg.PveSetting PveSetting = 13;
  if (this->_internal_has_pvesetting()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::pvesetting(this),
        _Internal::pvesetting(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TeamOPSetting)
  return target;
}

size_t TeamOPSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TeamOPSetting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool lockGroups = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_lockgroups_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string pwd = 1;
  if (!this->_internal_pwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pwd());
  }

  // string name = 6;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string channelUsrId = 12;
  if (!this->_internal_channelusrid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelusrid());
  }

  // .msg.WorkshopSetting Workshop = 10;
  if (this->_internal_has_workshop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.workshop_);
  }

  // .msg.BountySetting Bounty = 11;
  if (this->_internal_has_bounty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bounty_);
  }

  // .msg.PveSetting PveSetting = 13;
  if (this->_internal_has_pvesetting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvesetting_);
  }

  // bool pwdOpen = 2;
  if (this->_internal_pwdopen() != 0) {
    total_size += 1 + 1;
  }

  // bool visible = 3;
  if (this->_internal_visible() != 0) {
    total_size += 1 + 1;
  }

  // int32 inviteAuthority = 4;
  if (this->_internal_inviteauthority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_inviteauthority());
  }

  // .msg.TEAMTYPE teamType = 5;
  if (this->_internal_teamtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_teamtype());
  }

  // uint32 subMode = 7;
  if (this->_internal_submode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_submode());
  }

  // int32 customGameId = 9;
  if (this->_internal_customgameid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_customgameid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamOPSetting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TeamOPSetting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamOPSetting::GetClassData() const { return &_class_data_; }


void TeamOPSetting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TeamOPSetting*>(&to_msg);
  auto& from = static_cast<const TeamOPSetting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TeamOPSetting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lockgroups_.MergeFrom(from._impl_.lockgroups_);
  if (!from._internal_pwd().empty()) {
    _this->_internal_set_pwd(from._internal_pwd());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_channelusrid().empty()) {
    _this->_internal_set_channelusrid(from._internal_channelusrid());
  }
  if (from._internal_has_workshop()) {
    _this->_internal_mutable_workshop()->::msg::WorkshopSetting::MergeFrom(
        from._internal_workshop());
  }
  if (from._internal_has_bounty()) {
    _this->_internal_mutable_bounty()->::msg::BountySetting::MergeFrom(
        from._internal_bounty());
  }
  if (from._internal_has_pvesetting()) {
    _this->_internal_mutable_pvesetting()->::msg::PveSetting::MergeFrom(
        from._internal_pvesetting());
  }
  if (from._internal_pwdopen() != 0) {
    _this->_internal_set_pwdopen(from._internal_pwdopen());
  }
  if (from._internal_visible() != 0) {
    _this->_internal_set_visible(from._internal_visible());
  }
  if (from._internal_inviteauthority() != 0) {
    _this->_internal_set_inviteauthority(from._internal_inviteauthority());
  }
  if (from._internal_teamtype() != 0) {
    _this->_internal_set_teamtype(from._internal_teamtype());
  }
  if (from._internal_submode() != 0) {
    _this->_internal_set_submode(from._internal_submode());
  }
  if (from._internal_customgameid() != 0) {
    _this->_internal_set_customgameid(from._internal_customgameid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamOPSetting::CopyFrom(const TeamOPSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TeamOPSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamOPSetting::IsInitialized() const {
  return true;
}

void TeamOPSetting::InternalSwap(TeamOPSetting* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lockgroups_.InternalSwap(&other->_impl_.lockgroups_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pwd_, lhs_arena,
      &other->_impl_.pwd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channelusrid_, lhs_arena,
      &other->_impl_.channelusrid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamOPSetting, _impl_.customgameid_)
      + sizeof(TeamOPSetting::_impl_.customgameid_)
      - PROTOBUF_FIELD_OFFSET(TeamOPSetting, _impl_.workshop_)>(
          reinterpret_cast<char*>(&_impl_.workshop_),
          reinterpret_cast<char*>(&other->_impl_.workshop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamOPSetting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[1]);
}

// ===================================================================

class WorkshopSetting::_Internal {
 public:
};

WorkshopSetting::WorkshopSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.WorkshopSetting)
}
WorkshopSetting::WorkshopSetting(const WorkshopSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkshopSetting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mapname_){}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.submapid_){}
    , decltype(_impl_.joinaiswitch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mapname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapname().empty()) {
    _this->_impl_.mapname_.Set(from._internal_mapname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mapid_, &from._impl_.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.joinaiswitch_) -
    reinterpret_cast<char*>(&_impl_.mapid_)) + sizeof(_impl_.joinaiswitch_));
  // @@protoc_insertion_point(copy_constructor:msg.WorkshopSetting)
}

inline void WorkshopSetting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mapname_){}
    , decltype(_impl_.mapid_){0}
    , decltype(_impl_.submapid_){0}
    , decltype(_impl_.joinaiswitch_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mapname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkshopSetting::~WorkshopSetting() {
  // @@protoc_insertion_point(destructor:msg.WorkshopSetting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkshopSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mapname_.Destroy();
}

void WorkshopSetting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkshopSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.WorkshopSetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mapname_.ClearToEmpty();
  ::memset(&_impl_.mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.joinaiswitch_) -
      reinterpret_cast<char*>(&_impl_.mapid_)) + sizeof(_impl_.joinaiswitch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkshopSetting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 MapId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SubMapId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.submapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string MapName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mapname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.WorkshopSetting.MapName"));
        } else
          goto handle_unusual;
        continue;
      // bool joinAISwitch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.joinaiswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkshopSetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.WorkshopSetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 MapId = 1;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_mapid(), target);
  }

  // int32 SubMapId = 2;
  if (this->_internal_submapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_submapid(), target);
  }

  // string MapName = 3;
  if (!this->_internal_mapname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapname().data(), static_cast<int>(this->_internal_mapname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.WorkshopSetting.MapName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mapname(), target);
  }

  // bool joinAISwitch = 4;
  if (this->_internal_joinaiswitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_joinaiswitch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.WorkshopSetting)
  return target;
}

size_t WorkshopSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.WorkshopSetting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string MapName = 3;
  if (!this->_internal_mapname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapname());
  }

  // int32 MapId = 1;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mapid());
  }

  // int32 SubMapId = 2;
  if (this->_internal_submapid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_submapid());
  }

  // bool joinAISwitch = 4;
  if (this->_internal_joinaiswitch() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkshopSetting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkshopSetting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkshopSetting::GetClassData() const { return &_class_data_; }


void WorkshopSetting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkshopSetting*>(&to_msg);
  auto& from = static_cast<const WorkshopSetting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.WorkshopSetting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mapname().empty()) {
    _this->_internal_set_mapname(from._internal_mapname());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_submapid() != 0) {
    _this->_internal_set_submapid(from._internal_submapid());
  }
  if (from._internal_joinaiswitch() != 0) {
    _this->_internal_set_joinaiswitch(from._internal_joinaiswitch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkshopSetting::CopyFrom(const WorkshopSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.WorkshopSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkshopSetting::IsInitialized() const {
  return true;
}

void WorkshopSetting::InternalSwap(WorkshopSetting* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapname_, lhs_arena,
      &other->_impl_.mapname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkshopSetting, _impl_.joinaiswitch_)
      + sizeof(WorkshopSetting::_impl_.joinaiswitch_)
      - PROTOBUF_FIELD_OFFSET(WorkshopSetting, _impl_.mapid_)>(
          reinterpret_cast<char*>(&_impl_.mapid_),
          reinterpret_cast<char*>(&other->_impl_.mapid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkshopSetting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[2]);
}

// ===================================================================

class TeamOPChangeGroup::_Internal {
 public:
};

TeamOPChangeGroup::TeamOPChangeGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TeamOPChangeGroup)
}
TeamOPChangeGroup::TeamOPChangeGroup(const TeamOPChangeGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TeamOPChangeGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.groupid_){}
    , decltype(_impl_.slot_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pid().empty()) {
    _this->_impl_.pid_.Set(from._internal_pid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.groupid_, &from._impl_.groupid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.slot_) -
    reinterpret_cast<char*>(&_impl_.groupid_)) + sizeof(_impl_.slot_));
  // @@protoc_insertion_point(copy_constructor:msg.TeamOPChangeGroup)
}

inline void TeamOPChangeGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.groupid_){0}
    , decltype(_impl_.slot_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TeamOPChangeGroup::~TeamOPChangeGroup() {
  // @@protoc_insertion_point(destructor:msg.TeamOPChangeGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamOPChangeGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pid_.Destroy();
}

void TeamOPChangeGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TeamOPChangeGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TeamOPChangeGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_.ClearToEmpty();
  ::memset(&_impl_.groupid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.slot_) -
      reinterpret_cast<char*>(&_impl_.groupid_)) + sizeof(_impl_.slot_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamOPChangeGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TeamOPChangeGroup.pid"));
        } else
          goto handle_unusual;
        continue;
      // int32 groupId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamOPChangeGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TeamOPChangeGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pid = 1;
  if (!this->_internal_pid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pid().data(), static_cast<int>(this->_internal_pid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TeamOPChangeGroup.pid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pid(), target);
  }

  // int32 groupId = 2;
  if (this->_internal_groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_groupid(), target);
  }

  // int32 slot = 3;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TeamOPChangeGroup)
  return target;
}

size_t TeamOPChangeGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TeamOPChangeGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pid = 1;
  if (!this->_internal_pid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pid());
  }

  // int32 groupId = 2;
  if (this->_internal_groupid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_groupid());
  }

  // int32 slot = 3;
  if (this->_internal_slot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamOPChangeGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TeamOPChangeGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamOPChangeGroup::GetClassData() const { return &_class_data_; }


void TeamOPChangeGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TeamOPChangeGroup*>(&to_msg);
  auto& from = static_cast<const TeamOPChangeGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TeamOPChangeGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pid().empty()) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_groupid() != 0) {
    _this->_internal_set_groupid(from._internal_groupid());
  }
  if (from._internal_slot() != 0) {
    _this->_internal_set_slot(from._internal_slot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamOPChangeGroup::CopyFrom(const TeamOPChangeGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TeamOPChangeGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamOPChangeGroup::IsInitialized() const {
  return true;
}

void TeamOPChangeGroup::InternalSwap(TeamOPChangeGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pid_, lhs_arena,
      &other->_impl_.pid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamOPChangeGroup, _impl_.slot_)
      + sizeof(TeamOPChangeGroup::_impl_.slot_)
      - PROTOBUF_FIELD_OFFSET(TeamOPChangeGroup, _impl_.groupid_)>(
          reinterpret_cast<char*>(&_impl_.groupid_),
          reinterpret_cast<char*>(&other->_impl_.groupid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamOPChangeGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[3]);
}

// ===================================================================

class TeamOPSelfChangeGroup::_Internal {
 public:
};

TeamOPSelfChangeGroup::TeamOPSelfChangeGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TeamOPSelfChangeGroup)
}
TeamOPSelfChangeGroup::TeamOPSelfChangeGroup(const TeamOPSelfChangeGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TeamOPSelfChangeGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groupid_){}
    , decltype(_impl_.slot_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.groupid_, &from._impl_.groupid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.slot_) -
    reinterpret_cast<char*>(&_impl_.groupid_)) + sizeof(_impl_.slot_));
  // @@protoc_insertion_point(copy_constructor:msg.TeamOPSelfChangeGroup)
}

inline void TeamOPSelfChangeGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.groupid_){0}
    , decltype(_impl_.slot_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TeamOPSelfChangeGroup::~TeamOPSelfChangeGroup() {
  // @@protoc_insertion_point(destructor:msg.TeamOPSelfChangeGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamOPSelfChangeGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TeamOPSelfChangeGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TeamOPSelfChangeGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TeamOPSelfChangeGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.groupid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.slot_) -
      reinterpret_cast<char*>(&_impl_.groupid_)) + sizeof(_impl_.slot_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamOPSelfChangeGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 groupId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamOPSelfChangeGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TeamOPSelfChangeGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 groupId = 1;
  if (this->_internal_groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_groupid(), target);
  }

  // int32 slot = 2;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TeamOPSelfChangeGroup)
  return target;
}

size_t TeamOPSelfChangeGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TeamOPSelfChangeGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 groupId = 1;
  if (this->_internal_groupid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_groupid());
  }

  // int32 slot = 2;
  if (this->_internal_slot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamOPSelfChangeGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TeamOPSelfChangeGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamOPSelfChangeGroup::GetClassData() const { return &_class_data_; }


void TeamOPSelfChangeGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TeamOPSelfChangeGroup*>(&to_msg);
  auto& from = static_cast<const TeamOPSelfChangeGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TeamOPSelfChangeGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_groupid() != 0) {
    _this->_internal_set_groupid(from._internal_groupid());
  }
  if (from._internal_slot() != 0) {
    _this->_internal_set_slot(from._internal_slot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamOPSelfChangeGroup::CopyFrom(const TeamOPSelfChangeGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TeamOPSelfChangeGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamOPSelfChangeGroup::IsInitialized() const {
  return true;
}

void TeamOPSelfChangeGroup::InternalSwap(TeamOPSelfChangeGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamOPSelfChangeGroup, _impl_.slot_)
      + sizeof(TeamOPSelfChangeGroup::_impl_.slot_)
      - PROTOBUF_FIELD_OFFSET(TeamOPSelfChangeGroup, _impl_.groupid_)>(
          reinterpret_cast<char*>(&_impl_.groupid_),
          reinterpret_cast<char*>(&other->_impl_.groupid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamOPSelfChangeGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[4]);
}

// ===================================================================

class TeamOPAppointLeader::_Internal {
 public:
};

TeamOPAppointLeader::TeamOPAppointLeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TeamOPAppointLeader)
}
TeamOPAppointLeader::TeamOPAppointLeader(const TeamOPAppointLeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TeamOPAppointLeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pid().empty()) {
    _this->_impl_.pid_.Set(from._internal_pid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.TeamOPAppointLeader)
}

inline void TeamOPAppointLeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TeamOPAppointLeader::~TeamOPAppointLeader() {
  // @@protoc_insertion_point(destructor:msg.TeamOPAppointLeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamOPAppointLeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pid_.Destroy();
}

void TeamOPAppointLeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TeamOPAppointLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TeamOPAppointLeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamOPAppointLeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TeamOPAppointLeader.pid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamOPAppointLeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TeamOPAppointLeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string pid = 1;
  if (!this->_internal_pid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pid().data(), static_cast<int>(this->_internal_pid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TeamOPAppointLeader.pid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TeamOPAppointLeader)
  return target;
}

size_t TeamOPAppointLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TeamOPAppointLeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pid = 1;
  if (!this->_internal_pid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamOPAppointLeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TeamOPAppointLeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamOPAppointLeader::GetClassData() const { return &_class_data_; }


void TeamOPAppointLeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TeamOPAppointLeader*>(&to_msg);
  auto& from = static_cast<const TeamOPAppointLeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TeamOPAppointLeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pid().empty()) {
    _this->_internal_set_pid(from._internal_pid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamOPAppointLeader::CopyFrom(const TeamOPAppointLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TeamOPAppointLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamOPAppointLeader::IsInitialized() const {
  return true;
}

void TeamOPAppointLeader::InternalSwap(TeamOPAppointLeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pid_, lhs_arena,
      &other->_impl_.pid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamOPAppointLeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[5]);
}

// ===================================================================

class TeamOPChangeName::_Internal {
 public:
};

TeamOPChangeName::TeamOPChangeName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TeamOPChangeName)
}
TeamOPChangeName::TeamOPChangeName(const TeamOPChangeName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TeamOPChangeName* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.TeamOPChangeName)
}

inline void TeamOPChangeName::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TeamOPChangeName::~TeamOPChangeName() {
  // @@protoc_insertion_point(destructor:msg.TeamOPChangeName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamOPChangeName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void TeamOPChangeName::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TeamOPChangeName::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TeamOPChangeName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamOPChangeName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TeamOPChangeName.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamOPChangeName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TeamOPChangeName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TeamOPChangeName.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TeamOPChangeName)
  return target;
}

size_t TeamOPChangeName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TeamOPChangeName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamOPChangeName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TeamOPChangeName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamOPChangeName::GetClassData() const { return &_class_data_; }


void TeamOPChangeName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TeamOPChangeName*>(&to_msg);
  auto& from = static_cast<const TeamOPChangeName&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TeamOPChangeName)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamOPChangeName::CopyFrom(const TeamOPChangeName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TeamOPChangeName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamOPChangeName::IsInitialized() const {
  return true;
}

void TeamOPChangeName::InternalSwap(TeamOPChangeName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamOPChangeName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[6]);
}

// ===================================================================

class TeamOPSwitchSlot::_Internal {
 public:
};

TeamOPSwitchSlot::TeamOPSwitchSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TeamOPSwitchSlot)
}
TeamOPSwitchSlot::TeamOPSwitchSlot(const TeamOPSwitchSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TeamOPSwitchSlot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerone_){}
    , decltype(_impl_.playertwo_){}
    , decltype(_impl_.groupone_){}
    , decltype(_impl_.grouptwo_){}
    , decltype(_impl_.slotone_){}
    , decltype(_impl_.slottwo_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.playerone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playerone().empty()) {
    _this->_impl_.playerone_.Set(from._internal_playerone(), 
      _this->GetArenaForAllocation());
  }
  _impl_.playertwo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playertwo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playertwo().empty()) {
    _this->_impl_.playertwo_.Set(from._internal_playertwo(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.groupone_, &from._impl_.groupone_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.slottwo_) -
    reinterpret_cast<char*>(&_impl_.groupone_)) + sizeof(_impl_.slottwo_));
  // @@protoc_insertion_point(copy_constructor:msg.TeamOPSwitchSlot)
}

inline void TeamOPSwitchSlot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerone_){}
    , decltype(_impl_.playertwo_){}
    , decltype(_impl_.groupone_){0}
    , decltype(_impl_.grouptwo_){0}
    , decltype(_impl_.slotone_){0}
    , decltype(_impl_.slottwo_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.playerone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.playertwo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playertwo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TeamOPSwitchSlot::~TeamOPSwitchSlot() {
  // @@protoc_insertion_point(destructor:msg.TeamOPSwitchSlot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamOPSwitchSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playerone_.Destroy();
  _impl_.playertwo_.Destroy();
}

void TeamOPSwitchSlot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TeamOPSwitchSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TeamOPSwitchSlot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerone_.ClearToEmpty();
  _impl_.playertwo_.ClearToEmpty();
  ::memset(&_impl_.groupone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.slottwo_) -
      reinterpret_cast<char*>(&_impl_.groupone_)) + sizeof(_impl_.slottwo_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamOPSwitchSlot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 groupOne = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.groupone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 groupTwo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grouptwo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string playerOne = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_playerone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TeamOPSwitchSlot.playerOne"));
        } else
          goto handle_unusual;
        continue;
      // string playerTwo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_playertwo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TeamOPSwitchSlot.playerTwo"));
        } else
          goto handle_unusual;
        continue;
      // int32 slotOne = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.slotone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 slotTwo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.slottwo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamOPSwitchSlot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TeamOPSwitchSlot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 groupOne = 1;
  if (this->_internal_groupone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_groupone(), target);
  }

  // int32 groupTwo = 2;
  if (this->_internal_grouptwo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_grouptwo(), target);
  }

  // string playerOne = 3;
  if (!this->_internal_playerone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playerone().data(), static_cast<int>(this->_internal_playerone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TeamOPSwitchSlot.playerOne");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_playerone(), target);
  }

  // string playerTwo = 4;
  if (!this->_internal_playertwo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playertwo().data(), static_cast<int>(this->_internal_playertwo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TeamOPSwitchSlot.playerTwo");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_playertwo(), target);
  }

  // int32 slotOne = 5;
  if (this->_internal_slotone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_slotone(), target);
  }

  // int32 slotTwo = 6;
  if (this->_internal_slottwo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_slottwo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TeamOPSwitchSlot)
  return target;
}

size_t TeamOPSwitchSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TeamOPSwitchSlot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playerOne = 3;
  if (!this->_internal_playerone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playerone());
  }

  // string playerTwo = 4;
  if (!this->_internal_playertwo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playertwo());
  }

  // int32 groupOne = 1;
  if (this->_internal_groupone() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_groupone());
  }

  // int32 groupTwo = 2;
  if (this->_internal_grouptwo() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_grouptwo());
  }

  // int32 slotOne = 5;
  if (this->_internal_slotone() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slotone());
  }

  // int32 slotTwo = 6;
  if (this->_internal_slottwo() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slottwo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamOPSwitchSlot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TeamOPSwitchSlot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamOPSwitchSlot::GetClassData() const { return &_class_data_; }


void TeamOPSwitchSlot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TeamOPSwitchSlot*>(&to_msg);
  auto& from = static_cast<const TeamOPSwitchSlot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TeamOPSwitchSlot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_playerone().empty()) {
    _this->_internal_set_playerone(from._internal_playerone());
  }
  if (!from._internal_playertwo().empty()) {
    _this->_internal_set_playertwo(from._internal_playertwo());
  }
  if (from._internal_groupone() != 0) {
    _this->_internal_set_groupone(from._internal_groupone());
  }
  if (from._internal_grouptwo() != 0) {
    _this->_internal_set_grouptwo(from._internal_grouptwo());
  }
  if (from._internal_slotone() != 0) {
    _this->_internal_set_slotone(from._internal_slotone());
  }
  if (from._internal_slottwo() != 0) {
    _this->_internal_set_slottwo(from._internal_slottwo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamOPSwitchSlot::CopyFrom(const TeamOPSwitchSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TeamOPSwitchSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamOPSwitchSlot::IsInitialized() const {
  return true;
}

void TeamOPSwitchSlot::InternalSwap(TeamOPSwitchSlot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playerone_, lhs_arena,
      &other->_impl_.playerone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playertwo_, lhs_arena,
      &other->_impl_.playertwo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamOPSwitchSlot, _impl_.slottwo_)
      + sizeof(TeamOPSwitchSlot::_impl_.slottwo_)
      - PROTOBUF_FIELD_OFFSET(TeamOPSwitchSlot, _impl_.groupone_)>(
          reinterpret_cast<char*>(&_impl_.groupone_),
          reinterpret_cast<char*>(&other->_impl_.groupone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamOPSwitchSlot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[7]);
}

// ===================================================================

class TeamBetOnBounty::_Internal {
 public:
};

TeamBetOnBounty::TeamBetOnBounty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TeamBetOnBounty)
}
TeamBetOnBounty::TeamBetOnBounty(const TeamBetOnBounty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TeamBetOnBounty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.num_ = from._impl_.num_;
  // @@protoc_insertion_point(copy_constructor:msg.TeamBetOnBounty)
}

inline void TeamBetOnBounty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TeamBetOnBounty::~TeamBetOnBounty() {
  // @@protoc_insertion_point(destructor:msg.TeamBetOnBounty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamBetOnBounty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TeamBetOnBounty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TeamBetOnBounty::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TeamBetOnBounty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamBetOnBounty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamBetOnBounty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TeamBetOnBounty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Num = 1;
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TeamBetOnBounty)
  return target;
}

size_t TeamBetOnBounty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TeamBetOnBounty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Num = 1;
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamBetOnBounty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TeamBetOnBounty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamBetOnBounty::GetClassData() const { return &_class_data_; }


void TeamBetOnBounty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TeamBetOnBounty*>(&to_msg);
  auto& from = static_cast<const TeamBetOnBounty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TeamBetOnBounty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamBetOnBounty::CopyFrom(const TeamBetOnBounty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TeamBetOnBounty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamBetOnBounty::IsInitialized() const {
  return true;
}

void TeamBetOnBounty::InternalSwap(TeamBetOnBounty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.num_, other->_impl_.num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamBetOnBounty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[8]);
}

// ===================================================================

class TeamOP::_Internal {
 public:
  static const ::msg::TeamOPSetting& setting(const TeamOP* msg);
  static const ::msg::TeamOPChangeGroup& changegroup(const TeamOP* msg);
  static const ::msg::TeamOPAppointLeader& appointleader(const TeamOP* msg);
  static const ::msg::TeamOPSelfChangeGroup& selfchangegroup(const TeamOP* msg);
  static const ::msg::TeamOPChangeName& changename(const TeamOP* msg);
  static const ::msg::TeamOPSwitchSlot& switchslot(const TeamOP* msg);
  static const ::msg::TeamBetOnBounty& betonbounty(const TeamOP* msg);
};

const ::msg::TeamOPSetting&
TeamOP::_Internal::setting(const TeamOP* msg) {
  return *msg->_impl_.setting_;
}
const ::msg::TeamOPChangeGroup&
TeamOP::_Internal::changegroup(const TeamOP* msg) {
  return *msg->_impl_.changegroup_;
}
const ::msg::TeamOPAppointLeader&
TeamOP::_Internal::appointleader(const TeamOP* msg) {
  return *msg->_impl_.appointleader_;
}
const ::msg::TeamOPSelfChangeGroup&
TeamOP::_Internal::selfchangegroup(const TeamOP* msg) {
  return *msg->_impl_.selfchangegroup_;
}
const ::msg::TeamOPChangeName&
TeamOP::_Internal::changename(const TeamOP* msg) {
  return *msg->_impl_.changename_;
}
const ::msg::TeamOPSwitchSlot&
TeamOP::_Internal::switchslot(const TeamOP* msg) {
  return *msg->_impl_.switchslot_;
}
const ::msg::TeamBetOnBounty&
TeamOP::_Internal::betonbounty(const TeamOP* msg) {
  return *msg->_impl_.betonbounty_;
}
TeamOP::TeamOP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TeamOP)
}
TeamOP::TeamOP(const TeamOP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TeamOP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.setting_){nullptr}
    , decltype(_impl_.changegroup_){nullptr}
    , decltype(_impl_.appointleader_){nullptr}
    , decltype(_impl_.selfchangegroup_){nullptr}
    , decltype(_impl_.changename_){nullptr}
    , decltype(_impl_.switchslot_){nullptr}
    , decltype(_impl_.betonbounty_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pid().empty()) {
    _this->_impl_.pid_.Set(from._internal_pid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_setting()) {
    _this->_impl_.setting_ = new ::msg::TeamOPSetting(*from._impl_.setting_);
  }
  if (from._internal_has_changegroup()) {
    _this->_impl_.changegroup_ = new ::msg::TeamOPChangeGroup(*from._impl_.changegroup_);
  }
  if (from._internal_has_appointleader()) {
    _this->_impl_.appointleader_ = new ::msg::TeamOPAppointLeader(*from._impl_.appointleader_);
  }
  if (from._internal_has_selfchangegroup()) {
    _this->_impl_.selfchangegroup_ = new ::msg::TeamOPSelfChangeGroup(*from._impl_.selfchangegroup_);
  }
  if (from._internal_has_changename()) {
    _this->_impl_.changename_ = new ::msg::TeamOPChangeName(*from._impl_.changename_);
  }
  if (from._internal_has_switchslot()) {
    _this->_impl_.switchslot_ = new ::msg::TeamOPSwitchSlot(*from._impl_.switchslot_);
  }
  if (from._internal_has_betonbounty()) {
    _this->_impl_.betonbounty_ = new ::msg::TeamBetOnBounty(*from._impl_.betonbounty_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:msg.TeamOP)
}

inline void TeamOP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pid_){}
    , decltype(_impl_.setting_){nullptr}
    , decltype(_impl_.changegroup_){nullptr}
    , decltype(_impl_.appointleader_){nullptr}
    , decltype(_impl_.selfchangegroup_){nullptr}
    , decltype(_impl_.changename_){nullptr}
    , decltype(_impl_.switchslot_){nullptr}
    , decltype(_impl_.betonbounty_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TeamOP::~TeamOP() {
  // @@protoc_insertion_point(destructor:msg.TeamOP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamOP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.setting_;
  if (this != internal_default_instance()) delete _impl_.changegroup_;
  if (this != internal_default_instance()) delete _impl_.appointleader_;
  if (this != internal_default_instance()) delete _impl_.selfchangegroup_;
  if (this != internal_default_instance()) delete _impl_.changename_;
  if (this != internal_default_instance()) delete _impl_.switchslot_;
  if (this != internal_default_instance()) delete _impl_.betonbounty_;
}

void TeamOP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TeamOP::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TeamOP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.setting_ != nullptr) {
    delete _impl_.setting_;
  }
  _impl_.setting_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.changegroup_ != nullptr) {
    delete _impl_.changegroup_;
  }
  _impl_.changegroup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.appointleader_ != nullptr) {
    delete _impl_.appointleader_;
  }
  _impl_.appointleader_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.selfchangegroup_ != nullptr) {
    delete _impl_.selfchangegroup_;
  }
  _impl_.selfchangegroup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.changename_ != nullptr) {
    delete _impl_.changename_;
  }
  _impl_.changename_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.switchslot_ != nullptr) {
    delete _impl_.switchslot_;
  }
  _impl_.switchslot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.betonbounty_ != nullptr) {
    delete _impl_.betonbounty_;
  }
  _impl_.betonbounty_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamOP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string PID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TeamOP.PID"));
        } else
          goto handle_unusual;
        continue;
      // .msg.TEAMOP type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::TEAMOP>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.TeamOPSetting setting = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_setting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TeamOPChangeGroup changeGroup = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_changegroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TeamOPAppointLeader appointLeader = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_appointleader(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TeamOPSelfChangeGroup selfChangeGroup = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_selfchangegroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TeamOPChangeName changeName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_changename(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TeamOPSwitchSlot switchSlot = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_switchslot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TeamBetOnBounty betOnBounty = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_betonbounty(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamOP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TeamOP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string PID = 1;
  if (!this->_internal_pid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pid().data(), static_cast<int>(this->_internal_pid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TeamOP.PID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pid(), target);
  }

  // .msg.TEAMOP type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .msg.TeamOPSetting setting = 3;
  if (this->_internal_has_setting()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::setting(this),
        _Internal::setting(this).GetCachedSize(), target, stream);
  }

  // .msg.TeamOPChangeGroup changeGroup = 4;
  if (this->_internal_has_changegroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::changegroup(this),
        _Internal::changegroup(this).GetCachedSize(), target, stream);
  }

  // .msg.TeamOPAppointLeader appointLeader = 5;
  if (this->_internal_has_appointleader()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::appointleader(this),
        _Internal::appointleader(this).GetCachedSize(), target, stream);
  }

  // .msg.TeamOPSelfChangeGroup selfChangeGroup = 6;
  if (this->_internal_has_selfchangegroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::selfchangegroup(this),
        _Internal::selfchangegroup(this).GetCachedSize(), target, stream);
  }

  // .msg.TeamOPChangeName changeName = 7;
  if (this->_internal_has_changename()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::changename(this),
        _Internal::changename(this).GetCachedSize(), target, stream);
  }

  // .msg.TeamOPSwitchSlot switchSlot = 8;
  if (this->_internal_has_switchslot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::switchslot(this),
        _Internal::switchslot(this).GetCachedSize(), target, stream);
  }

  // .msg.TeamBetOnBounty betOnBounty = 9;
  if (this->_internal_has_betonbounty()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::betonbounty(this),
        _Internal::betonbounty(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TeamOP)
  return target;
}

size_t TeamOP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TeamOP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string PID = 1;
  if (!this->_internal_pid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pid());
  }

  // .msg.TeamOPSetting setting = 3;
  if (this->_internal_has_setting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setting_);
  }

  // .msg.TeamOPChangeGroup changeGroup = 4;
  if (this->_internal_has_changegroup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.changegroup_);
  }

  // .msg.TeamOPAppointLeader appointLeader = 5;
  if (this->_internal_has_appointleader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.appointleader_);
  }

  // .msg.TeamOPSelfChangeGroup selfChangeGroup = 6;
  if (this->_internal_has_selfchangegroup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.selfchangegroup_);
  }

  // .msg.TeamOPChangeName changeName = 7;
  if (this->_internal_has_changename()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.changename_);
  }

  // .msg.TeamOPSwitchSlot switchSlot = 8;
  if (this->_internal_has_switchslot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.switchslot_);
  }

  // .msg.TeamBetOnBounty betOnBounty = 9;
  if (this->_internal_has_betonbounty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.betonbounty_);
  }

  // .msg.TEAMOP type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamOP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TeamOP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamOP::GetClassData() const { return &_class_data_; }


void TeamOP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TeamOP*>(&to_msg);
  auto& from = static_cast<const TeamOP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TeamOP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pid().empty()) {
    _this->_internal_set_pid(from._internal_pid());
  }
  if (from._internal_has_setting()) {
    _this->_internal_mutable_setting()->::msg::TeamOPSetting::MergeFrom(
        from._internal_setting());
  }
  if (from._internal_has_changegroup()) {
    _this->_internal_mutable_changegroup()->::msg::TeamOPChangeGroup::MergeFrom(
        from._internal_changegroup());
  }
  if (from._internal_has_appointleader()) {
    _this->_internal_mutable_appointleader()->::msg::TeamOPAppointLeader::MergeFrom(
        from._internal_appointleader());
  }
  if (from._internal_has_selfchangegroup()) {
    _this->_internal_mutable_selfchangegroup()->::msg::TeamOPSelfChangeGroup::MergeFrom(
        from._internal_selfchangegroup());
  }
  if (from._internal_has_changename()) {
    _this->_internal_mutable_changename()->::msg::TeamOPChangeName::MergeFrom(
        from._internal_changename());
  }
  if (from._internal_has_switchslot()) {
    _this->_internal_mutable_switchslot()->::msg::TeamOPSwitchSlot::MergeFrom(
        from._internal_switchslot());
  }
  if (from._internal_has_betonbounty()) {
    _this->_internal_mutable_betonbounty()->::msg::TeamBetOnBounty::MergeFrom(
        from._internal_betonbounty());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamOP::CopyFrom(const TeamOP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TeamOP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamOP::IsInitialized() const {
  return true;
}

void TeamOP::InternalSwap(TeamOP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pid_, lhs_arena,
      &other->_impl_.pid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamOP, _impl_.type_)
      + sizeof(TeamOP::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TeamOP, _impl_.setting_)>(
          reinterpret_cast<char*>(&_impl_.setting_),
          reinterpret_cast<char*>(&other->_impl_.setting_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamOP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[9]);
}

// ===================================================================

class TeamBaseInfo::_Internal {
 public:
  static const ::msg::WorkshopSetting& wssetting(const TeamBaseInfo* msg);
  static const ::msg::BountySetting& bounty(const TeamBaseInfo* msg);
};

const ::msg::WorkshopSetting&
TeamBaseInfo::_Internal::wssetting(const TeamBaseInfo* msg) {
  return *msg->_impl_.wssetting_;
}
const ::msg::BountySetting&
TeamBaseInfo::_Internal::bounty(const TeamBaseInfo* msg) {
  return *msg->_impl_.bounty_;
}
TeamBaseInfo::TeamBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TeamBaseInfo)
}
TeamBaseInfo::TeamBaseInfo(const TeamBaseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TeamBaseInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.wssetting_){nullptr}
    , decltype(_impl_.bounty_){nullptr}
    , decltype(_impl_.teamid_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.competotpernum_){}
    , decltype(_impl_.competotpertotalnum_){}
    , decltype(_impl_.haspwd_){}
    , decltype(_impl_.submode_){}
    , decltype(_impl_.bountytotal_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channelusrid().empty()) {
    _this->_impl_.channelusrid_.Set(from._internal_channelusrid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_wssetting()) {
    _this->_impl_.wssetting_ = new ::msg::WorkshopSetting(*from._impl_.wssetting_);
  }
  if (from._internal_has_bounty()) {
    _this->_impl_.bounty_ = new ::msg::BountySetting(*from._impl_.bounty_);
  }
  ::memcpy(&_impl_.teamid_, &from._impl_.teamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bountytotal_) -
    reinterpret_cast<char*>(&_impl_.teamid_)) + sizeof(_impl_.bountytotal_));
  // @@protoc_insertion_point(copy_constructor:msg.TeamBaseInfo)
}

inline void TeamBaseInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.wssetting_){nullptr}
    , decltype(_impl_.bounty_){nullptr}
    , decltype(_impl_.teamid_){uint64_t{0u}}
    , decltype(_impl_.mode_){0}
    , decltype(_impl_.competotpernum_){0}
    , decltype(_impl_.competotpertotalnum_){0}
    , decltype(_impl_.haspwd_){false}
    , decltype(_impl_.submode_){0}
    , decltype(_impl_.bountytotal_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TeamBaseInfo::~TeamBaseInfo() {
  // @@protoc_insertion_point(destructor:msg.TeamBaseInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamBaseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.channelusrid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.wssetting_;
  if (this != internal_default_instance()) delete _impl_.bounty_;
}

void TeamBaseInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TeamBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TeamBaseInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.channelusrid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.wssetting_ != nullptr) {
    delete _impl_.wssetting_;
  }
  _impl_.wssetting_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.bounty_ != nullptr) {
    delete _impl_.bounty_;
  }
  _impl_.bounty_ = nullptr;
  ::memset(&_impl_.teamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bountytotal_) -
      reinterpret_cast<char*>(&_impl_.teamid_)) + sizeof(_impl_.bountytotal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamBaseInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TeamBaseInfo.Name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 TeamId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PVPMODE Mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::msg::PVPMODE>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 CompetotperNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.competotpernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CompetotperTotalNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.competotpertotalnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool HasPwd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.haspwd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SubMode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.submode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.WorkshopSetting WSSetting = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_wssetting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.BountySetting Bounty = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounty(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BountyTotal = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.bountytotal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string channelUsrId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_channelusrid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TeamBaseInfo.channelUsrId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamBaseInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TeamBaseInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TeamBaseInfo.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint64 TeamId = 2;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_teamid(), target);
  }

  // .msg.PVPMODE Mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mode(), target);
  }

  // int32 CompetotperNum = 4;
  if (this->_internal_competotpernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_competotpernum(), target);
  }

  // int32 CompetotperTotalNum = 5;
  if (this->_internal_competotpertotalnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_competotpertotalnum(), target);
  }

  // bool HasPwd = 6;
  if (this->_internal_haspwd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_haspwd(), target);
  }

  // int32 SubMode = 7;
  if (this->_internal_submode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_submode(), target);
  }

  // .msg.WorkshopSetting WSSetting = 8;
  if (this->_internal_has_wssetting()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::wssetting(this),
        _Internal::wssetting(this).GetCachedSize(), target, stream);
  }

  // .msg.BountySetting Bounty = 9;
  if (this->_internal_has_bounty()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::bounty(this),
        _Internal::bounty(this).GetCachedSize(), target, stream);
  }

  // int32 BountyTotal = 10;
  if (this->_internal_bountytotal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_bountytotal(), target);
  }

  // string channelUsrId = 11;
  if (!this->_internal_channelusrid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelusrid().data(), static_cast<int>(this->_internal_channelusrid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TeamBaseInfo.channelUsrId");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_channelusrid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TeamBaseInfo)
  return target;
}

size_t TeamBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TeamBaseInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string channelUsrId = 11;
  if (!this->_internal_channelusrid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelusrid());
  }

  // .msg.WorkshopSetting WSSetting = 8;
  if (this->_internal_has_wssetting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wssetting_);
  }

  // .msg.BountySetting Bounty = 9;
  if (this->_internal_has_bounty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bounty_);
  }

  // uint64 TeamId = 2;
  if (this->_internal_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_teamid());
  }

  // .msg.PVPMODE Mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // int32 CompetotperNum = 4;
  if (this->_internal_competotpernum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_competotpernum());
  }

  // int32 CompetotperTotalNum = 5;
  if (this->_internal_competotpertotalnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_competotpertotalnum());
  }

  // bool HasPwd = 6;
  if (this->_internal_haspwd() != 0) {
    total_size += 1 + 1;
  }

  // int32 SubMode = 7;
  if (this->_internal_submode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_submode());
  }

  // int32 BountyTotal = 10;
  if (this->_internal_bountytotal() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bountytotal());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamBaseInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TeamBaseInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamBaseInfo::GetClassData() const { return &_class_data_; }


void TeamBaseInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TeamBaseInfo*>(&to_msg);
  auto& from = static_cast<const TeamBaseInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TeamBaseInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_channelusrid().empty()) {
    _this->_internal_set_channelusrid(from._internal_channelusrid());
  }
  if (from._internal_has_wssetting()) {
    _this->_internal_mutable_wssetting()->::msg::WorkshopSetting::MergeFrom(
        from._internal_wssetting());
  }
  if (from._internal_has_bounty()) {
    _this->_internal_mutable_bounty()->::msg::BountySetting::MergeFrom(
        from._internal_bounty());
  }
  if (from._internal_teamid() != 0) {
    _this->_internal_set_teamid(from._internal_teamid());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_competotpernum() != 0) {
    _this->_internal_set_competotpernum(from._internal_competotpernum());
  }
  if (from._internal_competotpertotalnum() != 0) {
    _this->_internal_set_competotpertotalnum(from._internal_competotpertotalnum());
  }
  if (from._internal_haspwd() != 0) {
    _this->_internal_set_haspwd(from._internal_haspwd());
  }
  if (from._internal_submode() != 0) {
    _this->_internal_set_submode(from._internal_submode());
  }
  if (from._internal_bountytotal() != 0) {
    _this->_internal_set_bountytotal(from._internal_bountytotal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamBaseInfo::CopyFrom(const TeamBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TeamBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamBaseInfo::IsInitialized() const {
  return true;
}

void TeamBaseInfo::InternalSwap(TeamBaseInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channelusrid_, lhs_arena,
      &other->_impl_.channelusrid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamBaseInfo, _impl_.bountytotal_)
      + sizeof(TeamBaseInfo::_impl_.bountytotal_)
      - PROTOBUF_FIELD_OFFSET(TeamBaseInfo, _impl_.wssetting_)>(
          reinterpret_cast<char*>(&_impl_.wssetting_),
          reinterpret_cast<char*>(&other->_impl_.wssetting_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamBaseInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[10]);
}

// ===================================================================

Award_AffixsEntry_DoNotUse::Award_AffixsEntry_DoNotUse() {}
Award_AffixsEntry_DoNotUse::Award_AffixsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Award_AffixsEntry_DoNotUse::MergeFrom(const Award_AffixsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Award_AffixsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[11]);
}

// ===================================================================

class Award::_Internal {
 public:
  static const ::msg::CSDTItemMedal& medal(const Award* msg);
};

const ::msg::CSDTItemMedal&
Award::_Internal::medal(const Award* msg) {
  return *msg->_impl_.medal_;
}
Award::Award(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Award::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.Award)
}
Award::Award(const Award& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Award* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.para_){from._impl_.para_}
    , /*decltype(_impl_._para_cached_byte_size_)*/{0}
    , /*decltype(_impl_.affixs_)*/{}
    , decltype(_impl_.instanceid_){}
    , decltype(_impl_.number_){}
    , decltype(_impl_.abrasion_){}
    , decltype(_impl_.medal_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.weight_){}
    , decltype(_impl_.price_){}
    , decltype(_impl_.survivetime_){}
    , decltype(_impl_.sourceidx_){}
    , decltype(_impl_.identified_){}
    , decltype(_impl_.textureid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.affixs_.MergeFrom(from._impl_.affixs_);
  _impl_.instanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instanceid().empty()) {
    _this->_impl_.instanceid_.Set(from._internal_instanceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_number().empty()) {
    _this->_impl_.number_.Set(from._internal_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.abrasion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abrasion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_abrasion().empty()) {
    _this->_impl_.abrasion_.Set(from._internal_abrasion(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_medal()) {
    _this->_impl_.medal_ = new ::msg::CSDTItemMedal(*from._impl_.medal_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.textureid_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.textureid_));
  // @@protoc_insertion_point(copy_constructor:msg.Award)
}

inline void Award::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.para_){arena}
    , /*decltype(_impl_._para_cached_byte_size_)*/{0}
    , /*decltype(_impl_.affixs_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.instanceid_){}
    , decltype(_impl_.number_){}
    , decltype(_impl_.abrasion_){}
    , decltype(_impl_.medal_){nullptr}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.count_){0u}
    , decltype(_impl_.weight_){0u}
    , decltype(_impl_.price_){0u}
    , decltype(_impl_.survivetime_){int64_t{0}}
    , decltype(_impl_.sourceidx_){0u}
    , decltype(_impl_.identified_){false}
    , decltype(_impl_.textureid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.abrasion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abrasion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Award::~Award() {
  // @@protoc_insertion_point(destructor:msg.Award)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Award::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.para_.~RepeatedField();
  _impl_.affixs_.Destruct();
  _impl_.affixs_.~MapField();
  _impl_.instanceid_.Destroy();
  _impl_.number_.Destroy();
  _impl_.abrasion_.Destroy();
  if (this != internal_default_instance()) delete _impl_.medal_;
}

void Award::ArenaDtor(void* object) {
  Award* _this = reinterpret_cast< Award* >(object);
  _this->_impl_.affixs_.Destruct();
}
void Award::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Award::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Award)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.para_.Clear();
  _impl_.affixs_.Clear();
  _impl_.instanceid_.ClearToEmpty();
  _impl_.number_.ClearToEmpty();
  _impl_.abrasion_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.medal_ != nullptr) {
    delete _impl_.medal_;
  }
  _impl_.medal_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.textureid_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.textureid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Award::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 Para = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_para(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_para(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string InstanceId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_instanceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.Award.InstanceId"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SourceIdx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.sourceidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 SurviveTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.survivetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTItemMedal Medal = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_medal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Number = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.Award.Number"));
        } else
          goto handle_unusual;
        continue;
      // string Abrasion = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_abrasion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.Award.Abrasion"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .msg.ItemAffix> Affixs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.affixs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool Identified = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.identified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TextureId = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.textureid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Award::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Award)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 Count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated int64 Para = 3;
  {
    int byte_size = _impl_._para_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_para(), byte_size, target);
    }
  }

  // string InstanceId = 4;
  if (!this->_internal_instanceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instanceid().data(), static_cast<int>(this->_internal_instanceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.Award.InstanceId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_instanceid(), target);
  }

  // uint32 Weight = 5;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_weight(), target);
  }

  // uint32 Price = 6;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_price(), target);
  }

  // uint32 SourceIdx = 7;
  if (this->_internal_sourceidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_sourceidx(), target);
  }

  // int64 SurviveTime = 8;
  if (this->_internal_survivetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_survivetime(), target);
  }

  // .msg.CSDTItemMedal Medal = 9;
  if (this->_internal_has_medal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::medal(this),
        _Internal::medal(this).GetCachedSize(), target, stream);
  }

  // string Number = 10;
  if (!this->_internal_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_number().data(), static_cast<int>(this->_internal_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.Award.Number");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_number(), target);
  }

  // string Abrasion = 11;
  if (!this->_internal_abrasion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_abrasion().data(), static_cast<int>(this->_internal_abrasion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.Award.Abrasion");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_abrasion(), target);
  }

  // map<string, .msg.ItemAffix> Affixs = 12;
  if (!this->_internal_affixs().empty()) {
    using MapType = ::_pb::Map<std::string, ::msg::ItemAffix>;
    using WireHelper = Award_AffixsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_affixs();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.Award.AffixsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // bool Identified = 13;
  if (this->_internal_identified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_identified(), target);
  }

  // uint32 TextureId = 14;
  if (this->_internal_textureid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_textureid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Award)
  return target;
}

size_t Award::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Award)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 Para = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.para_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._para_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, .msg.ItemAffix> Affixs = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_affixs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ItemAffix >::const_iterator
      it = this->_internal_affixs().begin();
      it != this->_internal_affixs().end(); ++it) {
    total_size += Award_AffixsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string InstanceId = 4;
  if (!this->_internal_instanceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instanceid());
  }

  // string Number = 10;
  if (!this->_internal_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_number());
  }

  // string Abrasion = 11;
  if (!this->_internal_abrasion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_abrasion());
  }

  // .msg.CSDTItemMedal Medal = 9;
  if (this->_internal_has_medal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.medal_);
  }

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 Count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  // uint32 Weight = 5;
  if (this->_internal_weight() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_weight());
  }

  // uint32 Price = 6;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_price());
  }

  // int64 SurviveTime = 8;
  if (this->_internal_survivetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_survivetime());
  }

  // uint32 SourceIdx = 7;
  if (this->_internal_sourceidx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sourceidx());
  }

  // bool Identified = 13;
  if (this->_internal_identified() != 0) {
    total_size += 1 + 1;
  }

  // uint32 TextureId = 14;
  if (this->_internal_textureid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_textureid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Award::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Award::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Award::GetClassData() const { return &_class_data_; }


void Award::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Award*>(&to_msg);
  auto& from = static_cast<const Award&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Award)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.para_.MergeFrom(from._impl_.para_);
  _this->_impl_.affixs_.MergeFrom(from._impl_.affixs_);
  if (!from._internal_instanceid().empty()) {
    _this->_internal_set_instanceid(from._internal_instanceid());
  }
  if (!from._internal_number().empty()) {
    _this->_internal_set_number(from._internal_number());
  }
  if (!from._internal_abrasion().empty()) {
    _this->_internal_set_abrasion(from._internal_abrasion());
  }
  if (from._internal_has_medal()) {
    _this->_internal_mutable_medal()->::msg::CSDTItemMedal::MergeFrom(
        from._internal_medal());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_weight() != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_survivetime() != 0) {
    _this->_internal_set_survivetime(from._internal_survivetime());
  }
  if (from._internal_sourceidx() != 0) {
    _this->_internal_set_sourceidx(from._internal_sourceidx());
  }
  if (from._internal_identified() != 0) {
    _this->_internal_set_identified(from._internal_identified());
  }
  if (from._internal_textureid() != 0) {
    _this->_internal_set_textureid(from._internal_textureid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Award::CopyFrom(const Award& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Award)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Award::IsInitialized() const {
  return true;
}

void Award::InternalSwap(Award* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.para_.InternalSwap(&other->_impl_.para_);
  _impl_.affixs_.InternalSwap(&other->_impl_.affixs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instanceid_, lhs_arena,
      &other->_impl_.instanceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.number_, lhs_arena,
      &other->_impl_.number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.abrasion_, lhs_arena,
      &other->_impl_.abrasion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Award, _impl_.textureid_)
      + sizeof(Award::_impl_.textureid_)
      - PROTOBUF_FIELD_OFFSET(Award, _impl_.medal_)>(
          reinterpret_cast<char*>(&_impl_.medal_),
          reinterpret_cast<char*>(&other->_impl_.medal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Award::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[12]);
}

// ===================================================================

UpdatePlayerData_ChessSkinDataEntry_DoNotUse::UpdatePlayerData_ChessSkinDataEntry_DoNotUse() {}
UpdatePlayerData_ChessSkinDataEntry_DoNotUse::UpdatePlayerData_ChessSkinDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UpdatePlayerData_ChessSkinDataEntry_DoNotUse::MergeFrom(const UpdatePlayerData_ChessSkinDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlayerData_ChessSkinDataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[13]);
}

// ===================================================================

UpdatePlayerData_ShowItemsEntry_DoNotUse::UpdatePlayerData_ShowItemsEntry_DoNotUse() {}
UpdatePlayerData_ShowItemsEntry_DoNotUse::UpdatePlayerData_ShowItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UpdatePlayerData_ShowItemsEntry_DoNotUse::MergeFrom(const UpdatePlayerData_ShowItemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlayerData_ShowItemsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[14]);
}

// ===================================================================

UpdatePlayerData_SkinDataEntry_DoNotUse::UpdatePlayerData_SkinDataEntry_DoNotUse() {}
UpdatePlayerData_SkinDataEntry_DoNotUse::UpdatePlayerData_SkinDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UpdatePlayerData_SkinDataEntry_DoNotUse::MergeFrom(const UpdatePlayerData_SkinDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlayerData_SkinDataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[15]);
}

// ===================================================================

class UpdatePlayerData::_Internal {
 public:
  static const ::msg::CSDTChessPlrInfo& chessplayer(const UpdatePlayerData* msg);
  static const ::msg::CSDTCommonRandList& emotionlist(const UpdatePlayerData* msg);
  static const ::msg::PveExData& pve(const UpdatePlayerData* msg);
  static const ::msg::CardGroupData& cardgroupdata(const UpdatePlayerData* msg);
};

const ::msg::CSDTChessPlrInfo&
UpdatePlayerData::_Internal::chessplayer(const UpdatePlayerData* msg) {
  return *msg->_impl_.chessplayer_;
}
const ::msg::CSDTCommonRandList&
UpdatePlayerData::_Internal::emotionlist(const UpdatePlayerData* msg) {
  return *msg->_impl_.emotionlist_;
}
const ::msg::PveExData&
UpdatePlayerData::_Internal::pve(const UpdatePlayerData* msg) {
  return *msg->_impl_.pve_;
}
const ::msg::CardGroupData&
UpdatePlayerData::_Internal::cardgroupdata(const UpdatePlayerData* msg) {
  return *msg->_impl_.cardgroupdata_;
}
UpdatePlayerData::UpdatePlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &UpdatePlayerData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.UpdatePlayerData)
}
UpdatePlayerData::UpdatePlayerData(const UpdatePlayerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdatePlayerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.passporttype_){from._impl_.passporttype_}
    , /*decltype(_impl_._passporttype_cached_byte_size_)*/{0}
    , /*decltype(_impl_.chessskindata_)*/{}
    , /*decltype(_impl_.showitems_)*/{}
    , /*decltype(_impl_.skindata_)*/{}
    , decltype(_impl_.username_){}
    , decltype(_impl_.chessplayer_){nullptr}
    , decltype(_impl_.emotionlist_){nullptr}
    , decltype(_impl_.pve_){nullptr}
    , decltype(_impl_.cardgroupdata_){nullptr}
    , decltype(_impl_.sceneid_){}
    , decltype(_impl_.headpic_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.chessskindata_.MergeFrom(from._impl_.chessskindata_);
  _this->_impl_.showitems_.MergeFrom(from._impl_.showitems_);
  _this->_impl_.skindata_.MergeFrom(from._impl_.skindata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_chessplayer()) {
    _this->_impl_.chessplayer_ = new ::msg::CSDTChessPlrInfo(*from._impl_.chessplayer_);
  }
  if (from._internal_has_emotionlist()) {
    _this->_impl_.emotionlist_ = new ::msg::CSDTCommonRandList(*from._impl_.emotionlist_);
  }
  if (from._internal_has_pve()) {
    _this->_impl_.pve_ = new ::msg::PveExData(*from._impl_.pve_);
  }
  if (from._internal_has_cardgroupdata()) {
    _this->_impl_.cardgroupdata_ = new ::msg::CardGroupData(*from._impl_.cardgroupdata_);
  }
  ::memcpy(&_impl_.sceneid_, &from._impl_.sceneid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.headpic_) -
    reinterpret_cast<char*>(&_impl_.sceneid_)) + sizeof(_impl_.headpic_));
  // @@protoc_insertion_point(copy_constructor:msg.UpdatePlayerData)
}

inline void UpdatePlayerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.passporttype_){arena}
    , /*decltype(_impl_._passporttype_cached_byte_size_)*/{0}
    , /*decltype(_impl_.chessskindata_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.showitems_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.skindata_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.username_){}
    , decltype(_impl_.chessplayer_){nullptr}
    , decltype(_impl_.emotionlist_){nullptr}
    , decltype(_impl_.pve_){nullptr}
    , decltype(_impl_.cardgroupdata_){nullptr}
    , decltype(_impl_.sceneid_){0u}
    , decltype(_impl_.headpic_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdatePlayerData::~UpdatePlayerData() {
  // @@protoc_insertion_point(destructor:msg.UpdatePlayerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void UpdatePlayerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.passporttype_.~RepeatedField();
  _impl_.chessskindata_.Destruct();
  _impl_.chessskindata_.~MapField();
  _impl_.showitems_.Destruct();
  _impl_.showitems_.~MapField();
  _impl_.skindata_.Destruct();
  _impl_.skindata_.~MapField();
  _impl_.username_.Destroy();
  if (this != internal_default_instance()) delete _impl_.chessplayer_;
  if (this != internal_default_instance()) delete _impl_.emotionlist_;
  if (this != internal_default_instance()) delete _impl_.pve_;
  if (this != internal_default_instance()) delete _impl_.cardgroupdata_;
}

void UpdatePlayerData::ArenaDtor(void* object) {
  UpdatePlayerData* _this = reinterpret_cast< UpdatePlayerData* >(object);
  _this->_impl_.chessskindata_.Destruct();
  _this->_impl_.showitems_.Destruct();
  _this->_impl_.skindata_.Destruct();
}
void UpdatePlayerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdatePlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.UpdatePlayerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.passporttype_.Clear();
  _impl_.chessskindata_.Clear();
  _impl_.showitems_.Clear();
  _impl_.skindata_.Clear();
  _impl_.username_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.chessplayer_ != nullptr) {
    delete _impl_.chessplayer_;
  }
  _impl_.chessplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.emotionlist_ != nullptr) {
    delete _impl_.emotionlist_;
  }
  _impl_.emotionlist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pve_ != nullptr) {
    delete _impl_.pve_;
  }
  _impl_.pve_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cardgroupdata_ != nullptr) {
    delete _impl_.cardgroupdata_;
  }
  _impl_.cardgroupdata_ = nullptr;
  ::memset(&_impl_.sceneid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.headpic_) -
      reinterpret_cast<char*>(&_impl_.sceneid_)) + sizeof(_impl_.headpic_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePlayerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string UserName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.UpdatePlayerData.UserName"));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 PassportType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_passporttype(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_passporttype(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTChessPlrInfo ChessPlayer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_chessplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SceneId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.sceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .msg.ChessSkinSlotData> ChessSkinData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.chessskindata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPic = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.headpic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> ShowItems = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.showitems_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTCommonRandList EmotionList = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_emotionlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PveExData Pve = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_pve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .msg.CSDTItem> SkinData = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.skindata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .msg.CardGroupData CardGroupData = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardgroupdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdatePlayerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.UpdatePlayerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string UserName = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.UpdatePlayerData.UserName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // repeated uint32 PassportType = 2;
  {
    int byte_size = _impl_._passporttype_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_passporttype(), byte_size, target);
    }
  }

  // .msg.CSDTChessPlrInfo ChessPlayer = 4;
  if (this->_internal_has_chessplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::chessplayer(this),
        _Internal::chessplayer(this).GetCachedSize(), target, stream);
  }

  // uint32 SceneId = 5;
  if (this->_internal_sceneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sceneid(), target);
  }

  // map<uint32, .msg.ChessSkinSlotData> ChessSkinData = 6;
  if (!this->_internal_chessskindata().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::ChessSkinSlotData>;
    using WireHelper = UpdatePlayerData_ChessSkinDataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_chessskindata();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint32 HeadPic = 7;
  if (this->_internal_headpic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_headpic(), target);
  }

  // map<uint32, uint32> ShowItems = 8;
  if (!this->_internal_showitems().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = UpdatePlayerData_ShowItemsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_showitems();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    }
  }

  // .msg.CSDTCommonRandList EmotionList = 9;
  if (this->_internal_has_emotionlist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::emotionlist(this),
        _Internal::emotionlist(this).GetCachedSize(), target, stream);
  }

  // .msg.PveExData Pve = 10;
  if (this->_internal_has_pve()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::pve(this),
        _Internal::pve(this).GetCachedSize(), target, stream);
  }

  // map<uint32, .msg.CSDTItem> SkinData = 11;
  if (!this->_internal_skindata().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::CSDTItem>;
    using WireHelper = UpdatePlayerData_SkinDataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_skindata();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
      }
    }
  }

  // .msg.CardGroupData CardGroupData = 12;
  if (this->_internal_has_cardgroupdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::cardgroupdata(this),
        _Internal::cardgroupdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.UpdatePlayerData)
  return target;
}

size_t UpdatePlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.UpdatePlayerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 PassportType = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.passporttype_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._passporttype_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<uint32, .msg.ChessSkinSlotData> ChessSkinData = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_chessskindata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChessSkinSlotData >::const_iterator
      it = this->_internal_chessskindata().begin();
      it != this->_internal_chessskindata().end(); ++it) {
    total_size += UpdatePlayerData_ChessSkinDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> ShowItems = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_showitems_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_showitems().begin();
      it != this->_internal_showitems().end(); ++it) {
    total_size += UpdatePlayerData_ShowItemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .msg.CSDTItem> SkinData = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_skindata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTItem >::const_iterator
      it = this->_internal_skindata().begin();
      it != this->_internal_skindata().end(); ++it) {
    total_size += UpdatePlayerData_SkinDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string UserName = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .msg.CSDTChessPlrInfo ChessPlayer = 4;
  if (this->_internal_has_chessplayer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chessplayer_);
  }

  // .msg.CSDTCommonRandList EmotionList = 9;
  if (this->_internal_has_emotionlist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.emotionlist_);
  }

  // .msg.PveExData Pve = 10;
  if (this->_internal_has_pve()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pve_);
  }

  // .msg.CardGroupData CardGroupData = 12;
  if (this->_internal_has_cardgroupdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cardgroupdata_);
  }

  // uint32 SceneId = 5;
  if (this->_internal_sceneid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sceneid());
  }

  // uint32 HeadPic = 7;
  if (this->_internal_headpic() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpic());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdatePlayerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdatePlayerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdatePlayerData::GetClassData() const { return &_class_data_; }


void UpdatePlayerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdatePlayerData*>(&to_msg);
  auto& from = static_cast<const UpdatePlayerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.UpdatePlayerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.passporttype_.MergeFrom(from._impl_.passporttype_);
  _this->_impl_.chessskindata_.MergeFrom(from._impl_.chessskindata_);
  _this->_impl_.showitems_.MergeFrom(from._impl_.showitems_);
  _this->_impl_.skindata_.MergeFrom(from._impl_.skindata_);
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (from._internal_has_chessplayer()) {
    _this->_internal_mutable_chessplayer()->::msg::CSDTChessPlrInfo::MergeFrom(
        from._internal_chessplayer());
  }
  if (from._internal_has_emotionlist()) {
    _this->_internal_mutable_emotionlist()->::msg::CSDTCommonRandList::MergeFrom(
        from._internal_emotionlist());
  }
  if (from._internal_has_pve()) {
    _this->_internal_mutable_pve()->::msg::PveExData::MergeFrom(
        from._internal_pve());
  }
  if (from._internal_has_cardgroupdata()) {
    _this->_internal_mutable_cardgroupdata()->::msg::CardGroupData::MergeFrom(
        from._internal_cardgroupdata());
  }
  if (from._internal_sceneid() != 0) {
    _this->_internal_set_sceneid(from._internal_sceneid());
  }
  if (from._internal_headpic() != 0) {
    _this->_internal_set_headpic(from._internal_headpic());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdatePlayerData::CopyFrom(const UpdatePlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.UpdatePlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlayerData::IsInitialized() const {
  return true;
}

void UpdatePlayerData::InternalSwap(UpdatePlayerData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.passporttype_.InternalSwap(&other->_impl_.passporttype_);
  _impl_.chessskindata_.InternalSwap(&other->_impl_.chessskindata_);
  _impl_.showitems_.InternalSwap(&other->_impl_.showitems_);
  _impl_.skindata_.InternalSwap(&other->_impl_.skindata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdatePlayerData, _impl_.headpic_)
      + sizeof(UpdatePlayerData::_impl_.headpic_)
      - PROTOBUF_FIELD_OFFSET(UpdatePlayerData, _impl_.chessplayer_)>(
          reinterpret_cast<char*>(&_impl_.chessplayer_),
          reinterpret_cast<char*>(&other->_impl_.chessplayer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePlayerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[16]);
}

// ===================================================================

class SkipType::_Internal {
 public:
};

SkipType::SkipType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.SkipType)
}
SkipType::SkipType(const SkipType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SkipType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skip_){}
    , decltype(_impl_.tap_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.skip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_skip().empty()) {
    _this->_impl_.skip_.Set(from._internal_skip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tap().empty()) {
    _this->_impl_.tap_.Set(from._internal_tap(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.SkipType)
}

inline void SkipType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skip_){}
    , decltype(_impl_.tap_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.skip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tap_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tap_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SkipType::~SkipType() {
  // @@protoc_insertion_point(destructor:msg.SkipType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SkipType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skip_.Destroy();
  _impl_.tap_.Destroy();
}

void SkipType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SkipType::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.SkipType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skip_.ClearToEmpty();
  _impl_.tap_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkipType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Skip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_skip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.SkipType.Skip"));
        } else
          goto handle_unusual;
        continue;
      // string Tap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tap();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.SkipType.Tap"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SkipType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.SkipType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Skip = 1;
  if (!this->_internal_skip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skip().data(), static_cast<int>(this->_internal_skip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.SkipType.Skip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_skip(), target);
  }

  // string Tap = 2;
  if (!this->_internal_tap().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tap().data(), static_cast<int>(this->_internal_tap().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.SkipType.Tap");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.SkipType)
  return target;
}

size_t SkipType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.SkipType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Skip = 1;
  if (!this->_internal_skip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skip());
  }

  // string Tap = 2;
  if (!this->_internal_tap().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tap());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SkipType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SkipType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SkipType::GetClassData() const { return &_class_data_; }


void SkipType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SkipType*>(&to_msg);
  auto& from = static_cast<const SkipType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.SkipType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_skip().empty()) {
    _this->_internal_set_skip(from._internal_skip());
  }
  if (!from._internal_tap().empty()) {
    _this->_internal_set_tap(from._internal_tap());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SkipType::CopyFrom(const SkipType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.SkipType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkipType::IsInitialized() const {
  return true;
}

void SkipType::InternalSwap(SkipType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.skip_, lhs_arena,
      &other->_impl_.skip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tap_, lhs_arena,
      &other->_impl_.tap_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SkipType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[17]);
}

// ===================================================================

class BuffEffect::_Internal {
 public:
};

BuffEffect::BuffEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.BuffEffect)
}
BuffEffect::BuffEffect(const BuffEffect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BuffEffect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:msg.BuffEffect)
}

inline void BuffEffect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.value_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BuffEffect::~BuffEffect() {
  // @@protoc_insertion_point(destructor:msg.BuffEffect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuffEffect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BuffEffect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuffEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.BuffEffect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuffEffect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuffEffect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.BuffEffect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 Value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.BuffEffect)
  return target;
}

size_t BuffEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.BuffEffect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 Value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuffEffect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BuffEffect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuffEffect::GetClassData() const { return &_class_data_; }


void BuffEffect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BuffEffect*>(&to_msg);
  auto& from = static_cast<const BuffEffect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.BuffEffect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuffEffect::CopyFrom(const BuffEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.BuffEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffEffect::IsInitialized() const {
  return true;
}

void BuffEffect::InternalSwap(BuffEffect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuffEffect, _impl_.value_)
      + sizeof(BuffEffect::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(BuffEffect, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuffEffect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[18]);
}

// ===================================================================

class Consume::_Internal {
 public:
};

Consume::Consume(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.Consume)
}
Consume::Consume(const Consume& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Consume* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.para_){from._impl_.para_}
    , /*decltype(_impl_._para_cached_byte_size_)*/{0}
    , decltype(_impl_.instanceid_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instanceid().empty()) {
    _this->_impl_.instanceid_.Set(from._internal_instanceid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:msg.Consume)
}

inline void Consume::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.para_){arena}
    , /*decltype(_impl_._para_cached_byte_size_)*/{0}
    , decltype(_impl_.instanceid_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Consume::~Consume() {
  // @@protoc_insertion_point(destructor:msg.Consume)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Consume::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.para_.~RepeatedField();
  _impl_.instanceid_.Destroy();
}

void Consume::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Consume::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Consume)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.para_.Clear();
  _impl_.instanceid_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Consume::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 Para = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_para(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_para(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string InstanceId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_instanceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.Consume.InstanceId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Consume::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Consume)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 Count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated int64 Para = 3;
  {
    int byte_size = _impl_._para_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_para(), byte_size, target);
    }
  }

  // string InstanceId = 4;
  if (!this->_internal_instanceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instanceid().data(), static_cast<int>(this->_internal_instanceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.Consume.InstanceId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_instanceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Consume)
  return target;
}

size_t Consume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Consume)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 Para = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.para_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._para_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string InstanceId = 4;
  if (!this->_internal_instanceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instanceid());
  }

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 Count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Consume::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Consume::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Consume::GetClassData() const { return &_class_data_; }


void Consume::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Consume*>(&to_msg);
  auto& from = static_cast<const Consume&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Consume)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.para_.MergeFrom(from._impl_.para_);
  if (!from._internal_instanceid().empty()) {
    _this->_internal_set_instanceid(from._internal_instanceid());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Consume::CopyFrom(const Consume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Consume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Consume::IsInitialized() const {
  return true;
}

void Consume::InternalSwap(Consume* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.para_.InternalSwap(&other->_impl_.para_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instanceid_, lhs_arena,
      &other->_impl_.instanceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Consume, _impl_.count_)
      + sizeof(Consume::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(Consume, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Consume::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[19]);
}

// ===================================================================

CSDTItem_AffixsEntry_DoNotUse::CSDTItem_AffixsEntry_DoNotUse() {}
CSDTItem_AffixsEntry_DoNotUse::CSDTItem_AffixsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTItem_AffixsEntry_DoNotUse::MergeFrom(const CSDTItem_AffixsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTItem_AffixsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[20]);
}

// ===================================================================

class CSDTItem::_Internal {
 public:
  static const ::msg::CSDTItemMedal& medal(const CSDTItem* msg);
};

const ::msg::CSDTItemMedal&
CSDTItem::_Internal::medal(const CSDTItem* msg) {
  return *msg->_impl_.medal_;
}
CSDTItem::CSDTItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTItem::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTItem)
}
CSDTItem::CSDTItem(const CSDTItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.para_){from._impl_.para_}
    , /*decltype(_impl_._para_cached_byte_size_)*/{0}
    , /*decltype(_impl_.affixs_)*/{}
    , decltype(_impl_.instanceid_){}
    , decltype(_impl_.number_){}
    , decltype(_impl_.abrasion_){}
    , decltype(_impl_.medal_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.survivetime_){}
    , decltype(_impl_.createtime_){}
    , decltype(_impl_.gettime_){}
    , decltype(_impl_.identified_){}
    , decltype(_impl_.textureid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.affixs_.MergeFrom(from._impl_.affixs_);
  _impl_.instanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instanceid().empty()) {
    _this->_impl_.instanceid_.Set(from._internal_instanceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_number().empty()) {
    _this->_impl_.number_.Set(from._internal_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.abrasion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abrasion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_abrasion().empty()) {
    _this->_impl_.abrasion_.Set(from._internal_abrasion(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_medal()) {
    _this->_impl_.medal_ = new ::msg::CSDTItemMedal(*from._impl_.medal_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.textureid_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.textureid_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTItem)
}

inline void CSDTItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.para_){arena}
    , /*decltype(_impl_._para_cached_byte_size_)*/{0}
    , /*decltype(_impl_.affixs_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.instanceid_){}
    , decltype(_impl_.number_){}
    , decltype(_impl_.abrasion_){}
    , decltype(_impl_.medal_){nullptr}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.count_){0u}
    , decltype(_impl_.survivetime_){int64_t{0}}
    , decltype(_impl_.createtime_){int64_t{0}}
    , decltype(_impl_.gettime_){int64_t{0}}
    , decltype(_impl_.identified_){false}
    , decltype(_impl_.textureid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.abrasion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abrasion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTItem::~CSDTItem() {
  // @@protoc_insertion_point(destructor:msg.CSDTItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.para_.~RepeatedField();
  _impl_.affixs_.Destruct();
  _impl_.affixs_.~MapField();
  _impl_.instanceid_.Destroy();
  _impl_.number_.Destroy();
  _impl_.abrasion_.Destroy();
  if (this != internal_default_instance()) delete _impl_.medal_;
}

void CSDTItem::ArenaDtor(void* object) {
  CSDTItem* _this = reinterpret_cast< CSDTItem* >(object);
  _this->_impl_.affixs_.Destruct();
}
void CSDTItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTItem::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.para_.Clear();
  _impl_.affixs_.Clear();
  _impl_.instanceid_.ClearToEmpty();
  _impl_.number_.ClearToEmpty();
  _impl_.abrasion_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.medal_ != nullptr) {
    delete _impl_.medal_;
  }
  _impl_.medal_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.textureid_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.textureid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string InstanceId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_instanceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTItem.InstanceId"));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 Para = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_para(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_para(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 SurviveTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.survivetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTItemMedal Medal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_medal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 CreateTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 GetTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.gettime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Number = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTItem.Number"));
        } else
          goto handle_unusual;
        continue;
      // string Abrasion = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_abrasion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTItem.Abrasion"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .msg.ItemAffix> Affixs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.affixs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool Identified = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.identified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TextureId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.textureid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 Count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // string InstanceId = 3;
  if (!this->_internal_instanceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instanceid().data(), static_cast<int>(this->_internal_instanceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTItem.InstanceId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_instanceid(), target);
  }

  // repeated int64 Para = 4;
  {
    int byte_size = _impl_._para_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_para(), byte_size, target);
    }
  }

  // int64 SurviveTime = 5;
  if (this->_internal_survivetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_survivetime(), target);
  }

  // .msg.CSDTItemMedal Medal = 6;
  if (this->_internal_has_medal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::medal(this),
        _Internal::medal(this).GetCachedSize(), target, stream);
  }

  // int64 CreateTime = 7;
  if (this->_internal_createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_createtime(), target);
  }

  // int64 GetTime = 8;
  if (this->_internal_gettime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_gettime(), target);
  }

  // string Number = 9;
  if (!this->_internal_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_number().data(), static_cast<int>(this->_internal_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTItem.Number");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_number(), target);
  }

  // string Abrasion = 10;
  if (!this->_internal_abrasion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_abrasion().data(), static_cast<int>(this->_internal_abrasion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTItem.Abrasion");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_abrasion(), target);
  }

  // map<string, .msg.ItemAffix> Affixs = 11;
  if (!this->_internal_affixs().empty()) {
    using MapType = ::_pb::Map<std::string, ::msg::ItemAffix>;
    using WireHelper = CSDTItem_AffixsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_affixs();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.CSDTItem.AffixsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // bool Identified = 12;
  if (this->_internal_identified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_identified(), target);
  }

  // uint32 TextureId = 13;
  if (this->_internal_textureid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_textureid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTItem)
  return target;
}

size_t CSDTItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 Para = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.para_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._para_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, .msg.ItemAffix> Affixs = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_affixs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::ItemAffix >::const_iterator
      it = this->_internal_affixs().begin();
      it != this->_internal_affixs().end(); ++it) {
    total_size += CSDTItem_AffixsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string InstanceId = 3;
  if (!this->_internal_instanceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instanceid());
  }

  // string Number = 9;
  if (!this->_internal_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_number());
  }

  // string Abrasion = 10;
  if (!this->_internal_abrasion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_abrasion());
  }

  // .msg.CSDTItemMedal Medal = 6;
  if (this->_internal_has_medal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.medal_);
  }

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 Count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  // int64 SurviveTime = 5;
  if (this->_internal_survivetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_survivetime());
  }

  // int64 CreateTime = 7;
  if (this->_internal_createtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_createtime());
  }

  // int64 GetTime = 8;
  if (this->_internal_gettime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_gettime());
  }

  // bool Identified = 12;
  if (this->_internal_identified() != 0) {
    total_size += 1 + 1;
  }

  // uint32 TextureId = 13;
  if (this->_internal_textureid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_textureid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTItem::GetClassData() const { return &_class_data_; }


void CSDTItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTItem*>(&to_msg);
  auto& from = static_cast<const CSDTItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.para_.MergeFrom(from._impl_.para_);
  _this->_impl_.affixs_.MergeFrom(from._impl_.affixs_);
  if (!from._internal_instanceid().empty()) {
    _this->_internal_set_instanceid(from._internal_instanceid());
  }
  if (!from._internal_number().empty()) {
    _this->_internal_set_number(from._internal_number());
  }
  if (!from._internal_abrasion().empty()) {
    _this->_internal_set_abrasion(from._internal_abrasion());
  }
  if (from._internal_has_medal()) {
    _this->_internal_mutable_medal()->::msg::CSDTItemMedal::MergeFrom(
        from._internal_medal());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_survivetime() != 0) {
    _this->_internal_set_survivetime(from._internal_survivetime());
  }
  if (from._internal_createtime() != 0) {
    _this->_internal_set_createtime(from._internal_createtime());
  }
  if (from._internal_gettime() != 0) {
    _this->_internal_set_gettime(from._internal_gettime());
  }
  if (from._internal_identified() != 0) {
    _this->_internal_set_identified(from._internal_identified());
  }
  if (from._internal_textureid() != 0) {
    _this->_internal_set_textureid(from._internal_textureid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTItem::CopyFrom(const CSDTItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTItem::IsInitialized() const {
  return true;
}

void CSDTItem::InternalSwap(CSDTItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.para_.InternalSwap(&other->_impl_.para_);
  _impl_.affixs_.InternalSwap(&other->_impl_.affixs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instanceid_, lhs_arena,
      &other->_impl_.instanceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.number_, lhs_arena,
      &other->_impl_.number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.abrasion_, lhs_arena,
      &other->_impl_.abrasion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTItem, _impl_.textureid_)
      + sizeof(CSDTItem::_impl_.textureid_)
      - PROTOBUF_FIELD_OFFSET(CSDTItem, _impl_.medal_)>(
          reinterpret_cast<char*>(&_impl_.medal_),
          reinterpret_cast<char*>(&other->_impl_.medal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[21]);
}

// ===================================================================

class ItemAffix::_Internal {
 public:
};

ItemAffix::ItemAffix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ItemAffix)
}
ItemAffix::ItemAffix(const ItemAffix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemAffix* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.sourceitemid_){}
    , decltype(_impl_.sourceitemtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sourceitemtype_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sourceitemtype_));
  // @@protoc_insertion_point(copy_constructor:msg.ItemAffix)
}

inline void ItemAffix::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.sourceitemid_){0u}
    , decltype(_impl_.sourceitemtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ItemAffix::~ItemAffix() {
  // @@protoc_insertion_point(destructor:msg.ItemAffix)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemAffix::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ItemAffix::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemAffix::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ItemAffix)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sourceitemtype_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sourceitemtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemAffix::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 SourceItemId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sourceitemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.ITEMTYPE SourceItemType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sourceitemtype(static_cast<::msg::ITEMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemAffix::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ItemAffix)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // float Value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  // uint32 SourceItemId = 3;
  if (this->_internal_sourceitemid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sourceitemid(), target);
  }

  // .msg.ITEMTYPE SourceItemType = 4;
  if (this->_internal_sourceitemtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_sourceitemtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ItemAffix)
  return target;
}

size_t ItemAffix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ItemAffix)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // float Value = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  // uint32 SourceItemId = 3;
  if (this->_internal_sourceitemid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sourceitemid());
  }

  // .msg.ITEMTYPE SourceItemType = 4;
  if (this->_internal_sourceitemtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sourceitemtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemAffix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemAffix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemAffix::GetClassData() const { return &_class_data_; }


void ItemAffix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemAffix*>(&to_msg);
  auto& from = static_cast<const ItemAffix&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ItemAffix)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_sourceitemid() != 0) {
    _this->_internal_set_sourceitemid(from._internal_sourceitemid());
  }
  if (from._internal_sourceitemtype() != 0) {
    _this->_internal_set_sourceitemtype(from._internal_sourceitemtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemAffix::CopyFrom(const ItemAffix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ItemAffix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemAffix::IsInitialized() const {
  return true;
}

void ItemAffix::InternalSwap(ItemAffix* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemAffix, _impl_.sourceitemtype_)
      + sizeof(ItemAffix::_impl_.sourceitemtype_)
      - PROTOBUF_FIELD_OFFSET(ItemAffix, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemAffix::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[22]);
}

// ===================================================================

class CSDTItemMedal::_Internal {
 public:
};

CSDTItemMedal::CSDTItemMedal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTItemMedal)
}
CSDTItemMedal::CSDTItemMedal(const CSDTItemMedal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTItemMedal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.number_){}
    , decltype(_impl_.createtime_){}
    , decltype(_impl_.score_){}
    , decltype(_impl_.seasonid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_number().empty()) {
    _this->_impl_.number_.Set(from._internal_number(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.createtime_, &from._impl_.createtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.seasonid_) -
    reinterpret_cast<char*>(&_impl_.createtime_)) + sizeof(_impl_.seasonid_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTItemMedal)
}

inline void CSDTItemMedal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.number_){}
    , decltype(_impl_.createtime_){int64_t{0}}
    , decltype(_impl_.score_){int64_t{0}}
    , decltype(_impl_.seasonid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTItemMedal::~CSDTItemMedal() {
  // @@protoc_insertion_point(destructor:msg.CSDTItemMedal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTItemMedal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.number_.Destroy();
}

void CSDTItemMedal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTItemMedal::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTItemMedal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.number_.ClearToEmpty();
  ::memset(&_impl_.createtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.seasonid_) -
      reinterpret_cast<char*>(&_impl_.createtime_)) + sizeof(_impl_.seasonid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTItemMedal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 CreateTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTItemMedal.Number"));
        } else
          goto handle_unusual;
        continue;
      // int64 SeasonId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.seasonid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTItemMedal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTItemMedal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 CreateTime = 1;
  if (this->_internal_createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_createtime(), target);
  }

  // int64 Score = 2;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_score(), target);
  }

  // string Number = 3;
  if (!this->_internal_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_number().data(), static_cast<int>(this->_internal_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTItemMedal.Number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_number(), target);
  }

  // int64 SeasonId = 4;
  if (this->_internal_seasonid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_seasonid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTItemMedal)
  return target;
}

size_t CSDTItemMedal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTItemMedal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Number = 3;
  if (!this->_internal_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_number());
  }

  // int64 CreateTime = 1;
  if (this->_internal_createtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_createtime());
  }

  // int64 Score = 2;
  if (this->_internal_score() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_score());
  }

  // int64 SeasonId = 4;
  if (this->_internal_seasonid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seasonid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTItemMedal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTItemMedal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTItemMedal::GetClassData() const { return &_class_data_; }


void CSDTItemMedal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTItemMedal*>(&to_msg);
  auto& from = static_cast<const CSDTItemMedal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTItemMedal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_number().empty()) {
    _this->_internal_set_number(from._internal_number());
  }
  if (from._internal_createtime() != 0) {
    _this->_internal_set_createtime(from._internal_createtime());
  }
  if (from._internal_score() != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  if (from._internal_seasonid() != 0) {
    _this->_internal_set_seasonid(from._internal_seasonid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTItemMedal::CopyFrom(const CSDTItemMedal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTItemMedal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTItemMedal::IsInitialized() const {
  return true;
}

void CSDTItemMedal::InternalSwap(CSDTItemMedal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.number_, lhs_arena,
      &other->_impl_.number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTItemMedal, _impl_.seasonid_)
      + sizeof(CSDTItemMedal::_impl_.seasonid_)
      - PROTOBUF_FIELD_OFFSET(CSDTItemMedal, _impl_.createtime_)>(
          reinterpret_cast<char*>(&_impl_.createtime_),
          reinterpret_cast<char*>(&other->_impl_.createtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTItemMedal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[23]);
}

// ===================================================================

class CSDTItemID::_Internal {
 public:
};

CSDTItemID::CSDTItemID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTItemID)
}
CSDTItemID::CSDTItemID(const CSDTItemID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTItemID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instanceid_){}
    , decltype(_impl_.abrasion_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.ismedal_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instanceid().empty()) {
    _this->_impl_.instanceid_.Set(from._internal_instanceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.abrasion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abrasion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_abrasion().empty()) {
    _this->_impl_.abrasion_.Set(from._internal_abrasion(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTItemID)
}

inline void CSDTItemID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instanceid_){}
    , decltype(_impl_.abrasion_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.ismedal_){false}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.abrasion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.abrasion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTItemID::~CSDTItemID() {
  // @@protoc_insertion_point(destructor:msg.CSDTItemID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTItemID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instanceid_.Destroy();
  _impl_.abrasion_.Destroy();
}

void CSDTItemID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTItemID::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTItemID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instanceid_.ClearToEmpty();
  _impl_.abrasion_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTItemID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string InstanceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instanceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTItemID.InstanceId"));
        } else
          goto handle_unusual;
        continue;
      // bool IsMedal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ismedal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Abrasion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_abrasion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTItemID.Abrasion"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTItemID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTItemID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string InstanceId = 2;
  if (!this->_internal_instanceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instanceid().data(), static_cast<int>(this->_internal_instanceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTItemID.InstanceId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instanceid(), target);
  }

  // bool IsMedal = 3;
  if (this->_internal_ismedal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_ismedal(), target);
  }

  // uint32 Count = 4;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_count(), target);
  }

  // string Abrasion = 5;
  if (!this->_internal_abrasion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_abrasion().data(), static_cast<int>(this->_internal_abrasion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTItemID.Abrasion");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_abrasion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTItemID)
  return target;
}

size_t CSDTItemID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTItemID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string InstanceId = 2;
  if (!this->_internal_instanceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instanceid());
  }

  // string Abrasion = 5;
  if (!this->_internal_abrasion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_abrasion());
  }

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // bool IsMedal = 3;
  if (this->_internal_ismedal() != 0) {
    total_size += 1 + 1;
  }

  // uint32 Count = 4;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTItemID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTItemID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTItemID::GetClassData() const { return &_class_data_; }


void CSDTItemID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTItemID*>(&to_msg);
  auto& from = static_cast<const CSDTItemID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTItemID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instanceid().empty()) {
    _this->_internal_set_instanceid(from._internal_instanceid());
  }
  if (!from._internal_abrasion().empty()) {
    _this->_internal_set_abrasion(from._internal_abrasion());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_ismedal() != 0) {
    _this->_internal_set_ismedal(from._internal_ismedal());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTItemID::CopyFrom(const CSDTItemID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTItemID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTItemID::IsInitialized() const {
  return true;
}

void CSDTItemID::InternalSwap(CSDTItemID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instanceid_, lhs_arena,
      &other->_impl_.instanceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.abrasion_, lhs_arena,
      &other->_impl_.abrasion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTItemID, _impl_.count_)
      + sizeof(CSDTItemID::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(CSDTItemID, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTItemID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[24]);
}

// ===================================================================

class CSDTBagPara::_Internal {
 public:
};

CSDTBagPara::CSDTBagPara(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTBagPara)
}
CSDTBagPara::CSDTBagPara(const CSDTBagPara& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTBagPara* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orderid_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.subsource_){}
    , decltype(_impl_.addtime_){}
    , decltype(_impl_.triggerevent_){}
    , decltype(_impl_.newget_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.orderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.orderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_orderid().empty()) {
    _this->_impl_.orderid_.Set(from._internal_orderid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.source_, &from._impl_.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.newget_) -
    reinterpret_cast<char*>(&_impl_.source_)) + sizeof(_impl_.newget_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTBagPara)
}

inline void CSDTBagPara::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.orderid_){}
    , decltype(_impl_.source_){0}
    , decltype(_impl_.subsource_){0u}
    , decltype(_impl_.addtime_){int64_t{0}}
    , decltype(_impl_.triggerevent_){false}
    , decltype(_impl_.newget_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.orderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.orderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTBagPara::~CSDTBagPara() {
  // @@protoc_insertion_point(destructor:msg.CSDTBagPara)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTBagPara::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.orderid_.Destroy();
}

void CSDTBagPara::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTBagPara::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTBagPara)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.orderid_.ClearToEmpty();
  ::memset(&_impl_.source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.newget_) -
      reinterpret_cast<char*>(&_impl_.source_)) + sizeof(_impl_.newget_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTBagPara::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.SOURCE Source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source(static_cast<::msg::SOURCE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 SubSource = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.subsource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool TriggerEvent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.triggerevent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool NewGet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.newget_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string OrderId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_orderid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTBagPara.OrderId"));
        } else
          goto handle_unusual;
        continue;
      // int64 AddTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.addtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTBagPara::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTBagPara)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.SOURCE Source = 1;
  if (this->_internal_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_source(), target);
  }

  // uint32 SubSource = 2;
  if (this->_internal_subsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_subsource(), target);
  }

  // bool TriggerEvent = 3;
  if (this->_internal_triggerevent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_triggerevent(), target);
  }

  // bool NewGet = 4;
  if (this->_internal_newget() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_newget(), target);
  }

  // string OrderId = 5;
  if (!this->_internal_orderid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTBagPara.OrderId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_orderid(), target);
  }

  // int64 AddTime = 6;
  if (this->_internal_addtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_addtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTBagPara)
  return target;
}

size_t CSDTBagPara::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTBagPara)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string OrderId = 5;
  if (!this->_internal_orderid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // .msg.SOURCE Source = 1;
  if (this->_internal_source() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_source());
  }

  // uint32 SubSource = 2;
  if (this->_internal_subsource() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_subsource());
  }

  // int64 AddTime = 6;
  if (this->_internal_addtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_addtime());
  }

  // bool TriggerEvent = 3;
  if (this->_internal_triggerevent() != 0) {
    total_size += 1 + 1;
  }

  // bool NewGet = 4;
  if (this->_internal_newget() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTBagPara::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTBagPara::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTBagPara::GetClassData() const { return &_class_data_; }


void CSDTBagPara::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTBagPara*>(&to_msg);
  auto& from = static_cast<const CSDTBagPara&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTBagPara)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_orderid().empty()) {
    _this->_internal_set_orderid(from._internal_orderid());
  }
  if (from._internal_source() != 0) {
    _this->_internal_set_source(from._internal_source());
  }
  if (from._internal_subsource() != 0) {
    _this->_internal_set_subsource(from._internal_subsource());
  }
  if (from._internal_addtime() != 0) {
    _this->_internal_set_addtime(from._internal_addtime());
  }
  if (from._internal_triggerevent() != 0) {
    _this->_internal_set_triggerevent(from._internal_triggerevent());
  }
  if (from._internal_newget() != 0) {
    _this->_internal_set_newget(from._internal_newget());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTBagPara::CopyFrom(const CSDTBagPara& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTBagPara)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTBagPara::IsInitialized() const {
  return true;
}

void CSDTBagPara::InternalSwap(CSDTBagPara* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.orderid_, lhs_arena,
      &other->_impl_.orderid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTBagPara, _impl_.newget_)
      + sizeof(CSDTBagPara::_impl_.newget_)
      - PROTOBUF_FIELD_OFFSET(CSDTBagPara, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTBagPara::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[25]);
}

// ===================================================================

class CSDTBagItem::_Internal {
 public:
  static const ::msg::CSDTItem& item(const CSDTBagItem* msg);
  static const ::msg::CSDTBagPara& para(const CSDTBagItem* msg);
};

const ::msg::CSDTItem&
CSDTBagItem::_Internal::item(const CSDTBagItem* msg) {
  return *msg->_impl_.item_;
}
const ::msg::CSDTBagPara&
CSDTBagItem::_Internal::para(const CSDTBagItem* msg) {
  return *msg->_impl_.para_;
}
CSDTBagItem::CSDTBagItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTBagItem)
}
CSDTBagItem::CSDTBagItem(const CSDTBagItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTBagItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.para_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::msg::CSDTItem(*from._impl_.item_);
  }
  if (from._internal_has_para()) {
    _this->_impl_.para_ = new ::msg::CSDTBagPara(*from._impl_.para_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.CSDTBagItem)
}

inline void CSDTBagItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.para_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTBagItem::~CSDTBagItem() {
  // @@protoc_insertion_point(destructor:msg.CSDTBagItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTBagItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
  if (this != internal_default_instance()) delete _impl_.para_;
}

void CSDTBagItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTBagItem::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTBagItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.para_ != nullptr) {
    delete _impl_.para_;
  }
  _impl_.para_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTBagItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.CSDTItem Item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTBagPara Para = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_para(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTBagItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTBagItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.CSDTItem Item = 1;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  // .msg.CSDTBagPara Para = 2;
  if (this->_internal_has_para()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::para(this),
        _Internal::para(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTBagItem)
  return target;
}

size_t CSDTBagItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTBagItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.CSDTItem Item = 1;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // .msg.CSDTBagPara Para = 2;
  if (this->_internal_has_para()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.para_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTBagItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTBagItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTBagItem::GetClassData() const { return &_class_data_; }


void CSDTBagItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTBagItem*>(&to_msg);
  auto& from = static_cast<const CSDTBagItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTBagItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::msg::CSDTItem::MergeFrom(
        from._internal_item());
  }
  if (from._internal_has_para()) {
    _this->_internal_mutable_para()->::msg::CSDTBagPara::MergeFrom(
        from._internal_para());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTBagItem::CopyFrom(const CSDTBagItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTBagItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTBagItem::IsInitialized() const {
  return true;
}

void CSDTBagItem::InternalSwap(CSDTBagItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTBagItem, _impl_.para_)
      + sizeof(CSDTBagItem::_impl_.para_)
      - PROTOBUF_FIELD_OFFSET(CSDTBagItem, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTBagItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[26]);
}

// ===================================================================

class CSDTPlayerStatusInfo::_Internal {
 public:
};

CSDTPlayerStatusInfo::CSDTPlayerStatusInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPlayerStatusInfo)
}
CSDTPlayerStatusInfo::CSDTPlayerStatusInfo(const CSDTPlayerStatusInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPlayerStatusInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.apkversion_){}
    , decltype(_impl_.serviceversion_){}
    , decltype(_impl_.playerstatus_){}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.platformtype_){}
    , decltype(_impl_.hallserverid_){}
    , decltype(_impl_.observepvpid_){}
    , decltype(_impl_.friendinvisible_){}
    , decltype(_impl_.mapplaying_){}
    , decltype(_impl_.changefriendinvisible_){}
    , decltype(_impl_.changepsonly_){}
    , decltype(_impl_.psonly_){}
    , decltype(_impl_.loginsource_){}
    , decltype(_impl_.observepvpmod_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.apkversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apkversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_apkversion().empty()) {
    _this->_impl_.apkversion_.Set(from._internal_apkversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serviceversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serviceversion().empty()) {
    _this->_impl_.serviceversion_.Set(from._internal_serviceversion(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.playerstatus_, &from._impl_.playerstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.observepvpmod_) -
    reinterpret_cast<char*>(&_impl_.playerstatus_)) + sizeof(_impl_.observepvpmod_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPlayerStatusInfo)
}

inline void CSDTPlayerStatusInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.apkversion_){}
    , decltype(_impl_.serviceversion_){}
    , decltype(_impl_.playerstatus_){0}
    , decltype(_impl_.mapid_){0u}
    , decltype(_impl_.platformtype_){0}
    , decltype(_impl_.hallserverid_){0u}
    , decltype(_impl_.observepvpid_){uint64_t{0u}}
    , decltype(_impl_.friendinvisible_){0}
    , decltype(_impl_.mapplaying_){0u}
    , decltype(_impl_.changefriendinvisible_){false}
    , decltype(_impl_.changepsonly_){false}
    , decltype(_impl_.psonly_){false}
    , decltype(_impl_.loginsource_){0}
    , decltype(_impl_.observepvpmod_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.apkversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apkversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serviceversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTPlayerStatusInfo::~CSDTPlayerStatusInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTPlayerStatusInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTPlayerStatusInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.apkversion_.Destroy();
  _impl_.serviceversion_.Destroy();
}

void CSDTPlayerStatusInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPlayerStatusInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPlayerStatusInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.apkversion_.ClearToEmpty();
  _impl_.serviceversion_.ClearToEmpty();
  ::memset(&_impl_.playerstatus_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.observepvpmod_) -
      reinterpret_cast<char*>(&_impl_.playerstatus_)) + sizeof(_impl_.observepvpmod_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPlayerStatusInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPlayerStatusInfo.Id"));
        } else
          goto handle_unusual;
        continue;
      // .msg.PLAYERSTATUS PlayerStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_playerstatus(static_cast<::msg::PLAYERSTATUS>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 MapId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ApkVersion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_apkversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPlayerStatusInfo.ApkVersion"));
        } else
          goto handle_unusual;
        continue;
      // .msg.PLATFORMTYPE PlatFormType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platformtype(static_cast<::msg::PLATFORMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 HallServerId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.hallserverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.FRIENDINVISIBLE FriendInvisible = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_friendinvisible(static_cast<::msg::FRIENDINVISIBLE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 ObservePvpId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.observepvpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ChangeFriendInvisible = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.changefriendinvisible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MapPlaying = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.mapplaying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ChangePsOnly = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.changepsonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool PsOnly = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.psonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ServiceVersion = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_serviceversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPlayerStatusInfo.ServiceVersion"));
        } else
          goto handle_unusual;
        continue;
      // .msg.LOGINSOURCE LoginSource = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_loginsource(static_cast<::msg::LOGINSOURCE>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.PVPMODE ObservePvpMod = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_observepvpmod(static_cast<::msg::PVPMODE>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPlayerStatusInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPlayerStatusInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPlayerStatusInfo.Id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .msg.PLAYERSTATUS PlayerStatus = 2;
  if (this->_internal_playerstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_playerstatus(), target);
  }

  // uint32 MapId = 3;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mapid(), target);
  }

  // string ApkVersion = 4;
  if (!this->_internal_apkversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_apkversion().data(), static_cast<int>(this->_internal_apkversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPlayerStatusInfo.ApkVersion");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_apkversion(), target);
  }

  // .msg.PLATFORMTYPE PlatFormType = 5;
  if (this->_internal_platformtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_platformtype(), target);
  }

  // uint32 HallServerId = 6;
  if (this->_internal_hallserverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_hallserverid(), target);
  }

  // .msg.FRIENDINVISIBLE FriendInvisible = 7;
  if (this->_internal_friendinvisible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_friendinvisible(), target);
  }

  // uint64 ObservePvpId = 8;
  if (this->_internal_observepvpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_observepvpid(), target);
  }

  // bool ChangeFriendInvisible = 9;
  if (this->_internal_changefriendinvisible() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_changefriendinvisible(), target);
  }

  // uint32 MapPlaying = 10;
  if (this->_internal_mapplaying() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_mapplaying(), target);
  }

  // bool ChangePsOnly = 11;
  if (this->_internal_changepsonly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_changepsonly(), target);
  }

  // bool PsOnly = 12;
  if (this->_internal_psonly() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_psonly(), target);
  }

  // string ServiceVersion = 13;
  if (!this->_internal_serviceversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceversion().data(), static_cast<int>(this->_internal_serviceversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPlayerStatusInfo.ServiceVersion");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_serviceversion(), target);
  }

  // .msg.LOGINSOURCE LoginSource = 14;
  if (this->_internal_loginsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_loginsource(), target);
  }

  // .msg.PVPMODE ObservePvpMod = 20;
  if (this->_internal_observepvpmod() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_observepvpmod(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPlayerStatusInfo)
  return target;
}

size_t CSDTPlayerStatusInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPlayerStatusInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string ApkVersion = 4;
  if (!this->_internal_apkversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_apkversion());
  }

  // string ServiceVersion = 13;
  if (!this->_internal_serviceversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceversion());
  }

  // .msg.PLAYERSTATUS PlayerStatus = 2;
  if (this->_internal_playerstatus() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_playerstatus());
  }

  // uint32 MapId = 3;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mapid());
  }

  // .msg.PLATFORMTYPE PlatFormType = 5;
  if (this->_internal_platformtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_platformtype());
  }

  // uint32 HallServerId = 6;
  if (this->_internal_hallserverid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hallserverid());
  }

  // uint64 ObservePvpId = 8;
  if (this->_internal_observepvpid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_observepvpid());
  }

  // .msg.FRIENDINVISIBLE FriendInvisible = 7;
  if (this->_internal_friendinvisible() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_friendinvisible());
  }

  // uint32 MapPlaying = 10;
  if (this->_internal_mapplaying() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mapplaying());
  }

  // bool ChangeFriendInvisible = 9;
  if (this->_internal_changefriendinvisible() != 0) {
    total_size += 1 + 1;
  }

  // bool ChangePsOnly = 11;
  if (this->_internal_changepsonly() != 0) {
    total_size += 1 + 1;
  }

  // bool PsOnly = 12;
  if (this->_internal_psonly() != 0) {
    total_size += 1 + 1;
  }

  // .msg.LOGINSOURCE LoginSource = 14;
  if (this->_internal_loginsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_loginsource());
  }

  // .msg.PVPMODE ObservePvpMod = 20;
  if (this->_internal_observepvpmod() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_observepvpmod());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPlayerStatusInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPlayerStatusInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPlayerStatusInfo::GetClassData() const { return &_class_data_; }


void CSDTPlayerStatusInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPlayerStatusInfo*>(&to_msg);
  auto& from = static_cast<const CSDTPlayerStatusInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPlayerStatusInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_apkversion().empty()) {
    _this->_internal_set_apkversion(from._internal_apkversion());
  }
  if (!from._internal_serviceversion().empty()) {
    _this->_internal_set_serviceversion(from._internal_serviceversion());
  }
  if (from._internal_playerstatus() != 0) {
    _this->_internal_set_playerstatus(from._internal_playerstatus());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_platformtype() != 0) {
    _this->_internal_set_platformtype(from._internal_platformtype());
  }
  if (from._internal_hallserverid() != 0) {
    _this->_internal_set_hallserverid(from._internal_hallserverid());
  }
  if (from._internal_observepvpid() != 0) {
    _this->_internal_set_observepvpid(from._internal_observepvpid());
  }
  if (from._internal_friendinvisible() != 0) {
    _this->_internal_set_friendinvisible(from._internal_friendinvisible());
  }
  if (from._internal_mapplaying() != 0) {
    _this->_internal_set_mapplaying(from._internal_mapplaying());
  }
  if (from._internal_changefriendinvisible() != 0) {
    _this->_internal_set_changefriendinvisible(from._internal_changefriendinvisible());
  }
  if (from._internal_changepsonly() != 0) {
    _this->_internal_set_changepsonly(from._internal_changepsonly());
  }
  if (from._internal_psonly() != 0) {
    _this->_internal_set_psonly(from._internal_psonly());
  }
  if (from._internal_loginsource() != 0) {
    _this->_internal_set_loginsource(from._internal_loginsource());
  }
  if (from._internal_observepvpmod() != 0) {
    _this->_internal_set_observepvpmod(from._internal_observepvpmod());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPlayerStatusInfo::CopyFrom(const CSDTPlayerStatusInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPlayerStatusInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPlayerStatusInfo::IsInitialized() const {
  return true;
}

void CSDTPlayerStatusInfo::InternalSwap(CSDTPlayerStatusInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.apkversion_, lhs_arena,
      &other->_impl_.apkversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serviceversion_, lhs_arena,
      &other->_impl_.serviceversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTPlayerStatusInfo, _impl_.observepvpmod_)
      + sizeof(CSDTPlayerStatusInfo::_impl_.observepvpmod_)
      - PROTOBUF_FIELD_OFFSET(CSDTPlayerStatusInfo, _impl_.playerstatus_)>(
          reinterpret_cast<char*>(&_impl_.playerstatus_),
          reinterpret_cast<char*>(&other->_impl_.playerstatus_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPlayerStatusInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[27]);
}

// ===================================================================

class CSDTPvpWinData::_Internal {
 public:
};

CSDTPvpWinData::CSDTPvpWinData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPvpWinData)
}
CSDTPvpWinData::CSDTPvpWinData(const CSDTPvpWinData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPvpWinData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.wintype_){}
    , decltype(_impl_.resultcnt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.wintype_, &from._impl_.wintype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.resultcnt_) -
    reinterpret_cast<char*>(&_impl_.wintype_)) + sizeof(_impl_.resultcnt_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPvpWinData)
}

inline void CSDTPvpWinData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.wintype_){0}
    , decltype(_impl_.resultcnt_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTPvpWinData::~CSDTPvpWinData() {
  // @@protoc_insertion_point(destructor:msg.CSDTPvpWinData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTPvpWinData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDTPvpWinData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPvpWinData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPvpWinData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.wintype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.resultcnt_) -
      reinterpret_cast<char*>(&_impl_.wintype_)) + sizeof(_impl_.resultcnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPvpWinData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.WINTYPE WinType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_wintype(static_cast<::msg::WINTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 ResultCnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.resultcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPvpWinData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPvpWinData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.WINTYPE WinType = 1;
  if (this->_internal_wintype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_wintype(), target);
  }

  // uint32 ResultCnt = 2;
  if (this->_internal_resultcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_resultcnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPvpWinData)
  return target;
}

size_t CSDTPvpWinData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPvpWinData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.WINTYPE WinType = 1;
  if (this->_internal_wintype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_wintype());
  }

  // uint32 ResultCnt = 2;
  if (this->_internal_resultcnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_resultcnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPvpWinData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPvpWinData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPvpWinData::GetClassData() const { return &_class_data_; }


void CSDTPvpWinData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPvpWinData*>(&to_msg);
  auto& from = static_cast<const CSDTPvpWinData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPvpWinData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_wintype() != 0) {
    _this->_internal_set_wintype(from._internal_wintype());
  }
  if (from._internal_resultcnt() != 0) {
    _this->_internal_set_resultcnt(from._internal_resultcnt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPvpWinData::CopyFrom(const CSDTPvpWinData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPvpWinData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPvpWinData::IsInitialized() const {
  return true;
}

void CSDTPvpWinData::InternalSwap(CSDTPvpWinData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTPvpWinData, _impl_.resultcnt_)
      + sizeof(CSDTPvpWinData::_impl_.resultcnt_)
      - PROTOBUF_FIELD_OFFSET(CSDTPvpWinData, _impl_.wintype_)>(
          reinterpret_cast<char*>(&_impl_.wintype_),
          reinterpret_cast<char*>(&other->_impl_.wintype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPvpWinData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[28]);
}

// ===================================================================

CSDTChessPlrInfo_EquipsEntry_DoNotUse::CSDTChessPlrInfo_EquipsEntry_DoNotUse() {}
CSDTChessPlrInfo_EquipsEntry_DoNotUse::CSDTChessPlrInfo_EquipsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTChessPlrInfo_EquipsEntry_DoNotUse::MergeFrom(const CSDTChessPlrInfo_EquipsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTChessPlrInfo_EquipsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[29]);
}

// ===================================================================

class CSDTChessPlrInfo::_Internal {
 public:
};

CSDTChessPlrInfo::CSDTChessPlrInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTChessPlrInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTChessPlrInfo)
}
CSDTChessPlrInfo::CSDTChessPlrInfo(const CSDTChessPlrInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTChessPlrInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.equips_)*/{}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.equips_.MergeFrom(from._impl_.equips_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:msg.CSDTChessPlrInfo)
}

inline void CSDTChessPlrInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.equips_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTChessPlrInfo::~CSDTChessPlrInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTChessPlrInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTChessPlrInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.equips_.Destruct();
  _impl_.equips_.~MapField();
}

void CSDTChessPlrInfo::ArenaDtor(void* object) {
  CSDTChessPlrInfo* _this = reinterpret_cast< CSDTChessPlrInfo* >(object);
  _this->_impl_.equips_.Destruct();
}
void CSDTChessPlrInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTChessPlrInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTChessPlrInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.equips_.Clear();
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTChessPlrInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> Equips = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.equips_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTChessPlrInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTChessPlrInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // map<uint32, uint32> Equips = 2;
  if (!this->_internal_equips().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTChessPlrInfo_EquipsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_equips();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTChessPlrInfo)
  return target;
}

size_t CSDTChessPlrInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTChessPlrInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> Equips = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_equips_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_equips().begin();
      it != this->_internal_equips().end(); ++it) {
    total_size += CSDTChessPlrInfo_EquipsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTChessPlrInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTChessPlrInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTChessPlrInfo::GetClassData() const { return &_class_data_; }


void CSDTChessPlrInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTChessPlrInfo*>(&to_msg);
  auto& from = static_cast<const CSDTChessPlrInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTChessPlrInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.equips_.MergeFrom(from._impl_.equips_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTChessPlrInfo::CopyFrom(const CSDTChessPlrInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTChessPlrInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTChessPlrInfo::IsInitialized() const {
  return true;
}

void CSDTChessPlrInfo::InternalSwap(CSDTChessPlrInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.equips_.InternalSwap(&other->_impl_.equips_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTChessPlrInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[30]);
}

// ===================================================================

CSDTPuzzle_ItemMapEntry_DoNotUse::CSDTPuzzle_ItemMapEntry_DoNotUse() {}
CSDTPuzzle_ItemMapEntry_DoNotUse::CSDTPuzzle_ItemMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTPuzzle_ItemMapEntry_DoNotUse::MergeFrom(const CSDTPuzzle_ItemMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTPuzzle_ItemMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[31]);
}

// ===================================================================

class CSDTPuzzle::_Internal {
 public:
};

CSDTPuzzle::CSDTPuzzle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTPuzzle::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPuzzle)
}
CSDTPuzzle::CSDTPuzzle(const CSDTPuzzle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPuzzle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.openmap_){from._impl_.openmap_}
    , /*decltype(_impl_._openmap_cached_byte_size_)*/{0}
    , decltype(_impl_.groupaward_){from._impl_.groupaward_}
    , /*decltype(_impl_._groupaward_cached_byte_size_)*/{0}
    , /*decltype(_impl_.itemmap_)*/{}
    , decltype(_impl_.awardpool_){from._impl_.awardpool_}
    , /*decltype(_impl_._awardpool_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.itemmap_.MergeFrom(from._impl_.itemmap_);
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPuzzle)
}

inline void CSDTPuzzle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.openmap_){arena}
    , /*decltype(_impl_._openmap_cached_byte_size_)*/{0}
    , decltype(_impl_.groupaward_){arena}
    , /*decltype(_impl_._groupaward_cached_byte_size_)*/{0}
    , /*decltype(_impl_.itemmap_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.awardpool_){arena}
    , /*decltype(_impl_._awardpool_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTPuzzle::~CSDTPuzzle() {
  // @@protoc_insertion_point(destructor:msg.CSDTPuzzle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTPuzzle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.openmap_.~RepeatedField();
  _impl_.groupaward_.~RepeatedField();
  _impl_.itemmap_.Destruct();
  _impl_.itemmap_.~MapField();
  _impl_.awardpool_.~RepeatedField();
}

void CSDTPuzzle::ArenaDtor(void* object) {
  CSDTPuzzle* _this = reinterpret_cast< CSDTPuzzle* >(object);
  _this->_impl_.itemmap_.Destruct();
}
void CSDTPuzzle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPuzzle::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPuzzle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.openmap_.Clear();
  _impl_.groupaward_.Clear();
  _impl_.itemmap_.Clear();
  _impl_.awardpool_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPuzzle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 OpenMap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_openmap(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_openmap(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 GroupAward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_groupaward(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_groupaward(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, int32> ItemMap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.itemmap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 AwardPool = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_awardpool(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_awardpool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPuzzle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPuzzle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 OpenMap = 1;
  {
    int byte_size = _impl_._openmap_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_openmap(), byte_size, target);
    }
  }

  // repeated uint32 GroupAward = 2;
  {
    int byte_size = _impl_._groupaward_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_groupaward(), byte_size, target);
    }
  }

  // map<uint32, int32> ItemMap = 3;
  if (!this->_internal_itemmap().empty()) {
    using MapType = ::_pb::Map<uint32_t, int32_t>;
    using WireHelper = CSDTPuzzle_ItemMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_itemmap();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated uint32 AwardPool = 4;
  {
    int byte_size = _impl_._awardpool_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_awardpool(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPuzzle)
  return target;
}

size_t CSDTPuzzle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPuzzle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 OpenMap = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.openmap_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._openmap_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 GroupAward = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.groupaward_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._groupaward_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<uint32, int32> ItemMap = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_itemmap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >::const_iterator
      it = this->_internal_itemmap().begin();
      it != this->_internal_itemmap().end(); ++it) {
    total_size += CSDTPuzzle_ItemMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated uint32 AwardPool = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.awardpool_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._awardpool_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPuzzle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPuzzle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPuzzle::GetClassData() const { return &_class_data_; }


void CSDTPuzzle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPuzzle*>(&to_msg);
  auto& from = static_cast<const CSDTPuzzle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPuzzle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.openmap_.MergeFrom(from._impl_.openmap_);
  _this->_impl_.groupaward_.MergeFrom(from._impl_.groupaward_);
  _this->_impl_.itemmap_.MergeFrom(from._impl_.itemmap_);
  _this->_impl_.awardpool_.MergeFrom(from._impl_.awardpool_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPuzzle::CopyFrom(const CSDTPuzzle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPuzzle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPuzzle::IsInitialized() const {
  return true;
}

void CSDTPuzzle::InternalSwap(CSDTPuzzle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.openmap_.InternalSwap(&other->_impl_.openmap_);
  _impl_.groupaward_.InternalSwap(&other->_impl_.groupaward_);
  _impl_.itemmap_.InternalSwap(&other->_impl_.itemmap_);
  _impl_.awardpool_.InternalSwap(&other->_impl_.awardpool_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPuzzle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[32]);
}

// ===================================================================

ChessSkinSlotData_SlotsEntry_DoNotUse::ChessSkinSlotData_SlotsEntry_DoNotUse() {}
ChessSkinSlotData_SlotsEntry_DoNotUse::ChessSkinSlotData_SlotsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ChessSkinSlotData_SlotsEntry_DoNotUse::MergeFrom(const ChessSkinSlotData_SlotsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ChessSkinSlotData_SlotsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[33]);
}

// ===================================================================

class ChessSkinSlotData::_Internal {
 public:
};

ChessSkinSlotData::ChessSkinSlotData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ChessSkinSlotData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.ChessSkinSlotData)
}
ChessSkinSlotData::ChessSkinSlotData(const ChessSkinSlotData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChessSkinSlotData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.slots_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.slots_.MergeFrom(from._impl_.slots_);
  // @@protoc_insertion_point(copy_constructor:msg.ChessSkinSlotData)
}

inline void ChessSkinSlotData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.slots_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChessSkinSlotData::~ChessSkinSlotData() {
  // @@protoc_insertion_point(destructor:msg.ChessSkinSlotData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ChessSkinSlotData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slots_.Destruct();
  _impl_.slots_.~MapField();
}

void ChessSkinSlotData::ArenaDtor(void* object) {
  ChessSkinSlotData* _this = reinterpret_cast< ChessSkinSlotData* >(object);
  _this->_impl_.slots_.Destruct();
}
void ChessSkinSlotData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChessSkinSlotData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ChessSkinSlotData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slots_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChessSkinSlotData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .msg.CSDTItem> Slots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.slots_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChessSkinSlotData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ChessSkinSlotData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .msg.CSDTItem> Slots = 1;
  if (!this->_internal_slots().empty()) {
    using MapType = ::_pb::Map<std::string, ::msg::CSDTItem>;
    using WireHelper = ChessSkinSlotData_SlotsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_slots();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.ChessSkinSlotData.SlotsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ChessSkinSlotData)
  return target;
}

size_t ChessSkinSlotData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ChessSkinSlotData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .msg.CSDTItem> Slots = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_slots_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTItem >::const_iterator
      it = this->_internal_slots().begin();
      it != this->_internal_slots().end(); ++it) {
    total_size += ChessSkinSlotData_SlotsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChessSkinSlotData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChessSkinSlotData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChessSkinSlotData::GetClassData() const { return &_class_data_; }


void ChessSkinSlotData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChessSkinSlotData*>(&to_msg);
  auto& from = static_cast<const ChessSkinSlotData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ChessSkinSlotData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.slots_.MergeFrom(from._impl_.slots_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChessSkinSlotData::CopyFrom(const ChessSkinSlotData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ChessSkinSlotData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessSkinSlotData::IsInitialized() const {
  return true;
}

void ChessSkinSlotData::InternalSwap(ChessSkinSlotData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.slots_.InternalSwap(&other->_impl_.slots_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChessSkinSlotData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[34]);
}

// ===================================================================

PvpPlayerData_ModeWinDatasEntry_DoNotUse::PvpPlayerData_ModeWinDatasEntry_DoNotUse() {}
PvpPlayerData_ModeWinDatasEntry_DoNotUse::PvpPlayerData_ModeWinDatasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PvpPlayerData_ModeWinDatasEntry_DoNotUse::MergeFrom(const PvpPlayerData_ModeWinDatasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PvpPlayerData_ModeWinDatasEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[35]);
}

// ===================================================================

PvpPlayerData_CurShowItemsEntry_DoNotUse::PvpPlayerData_CurShowItemsEntry_DoNotUse() {}
PvpPlayerData_CurShowItemsEntry_DoNotUse::PvpPlayerData_CurShowItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PvpPlayerData_CurShowItemsEntry_DoNotUse::MergeFrom(const PvpPlayerData_CurShowItemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PvpPlayerData_CurShowItemsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[36]);
}

// ===================================================================

PvpPlayerData_SettingsEntry_DoNotUse::PvpPlayerData_SettingsEntry_DoNotUse() {}
PvpPlayerData_SettingsEntry_DoNotUse::PvpPlayerData_SettingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PvpPlayerData_SettingsEntry_DoNotUse::MergeFrom(const PvpPlayerData_SettingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PvpPlayerData_SettingsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[37]);
}

// ===================================================================

PvpPlayerData_SwitchItemsEntry_DoNotUse::PvpPlayerData_SwitchItemsEntry_DoNotUse() {}
PvpPlayerData_SwitchItemsEntry_DoNotUse::PvpPlayerData_SwitchItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PvpPlayerData_SwitchItemsEntry_DoNotUse::MergeFrom(const PvpPlayerData_SwitchItemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PvpPlayerData_SwitchItemsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[38]);
}

// ===================================================================

PvpPlayerData_PunishmentEntry_DoNotUse::PvpPlayerData_PunishmentEntry_DoNotUse() {}
PvpPlayerData_PunishmentEntry_DoNotUse::PvpPlayerData_PunishmentEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PvpPlayerData_PunishmentEntry_DoNotUse::MergeFrom(const PvpPlayerData_PunishmentEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PvpPlayerData_PunishmentEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[39]);
}

// ===================================================================

PvpPlayerData_RegionDelaysEntry_DoNotUse::PvpPlayerData_RegionDelaysEntry_DoNotUse() {}
PvpPlayerData_RegionDelaysEntry_DoNotUse::PvpPlayerData_RegionDelaysEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PvpPlayerData_RegionDelaysEntry_DoNotUse::MergeFrom(const PvpPlayerData_RegionDelaysEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PvpPlayerData_RegionDelaysEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[40]);
}

// ===================================================================

PvpPlayerData_TicketsEntry_DoNotUse::PvpPlayerData_TicketsEntry_DoNotUse() {}
PvpPlayerData_TicketsEntry_DoNotUse::PvpPlayerData_TicketsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PvpPlayerData_TicketsEntry_DoNotUse::MergeFrom(const PvpPlayerData_TicketsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PvpPlayerData_TicketsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[41]);
}

// ===================================================================

PvpPlayerData_CurrencysEntry_DoNotUse::PvpPlayerData_CurrencysEntry_DoNotUse() {}
PvpPlayerData_CurrencysEntry_DoNotUse::PvpPlayerData_CurrencysEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PvpPlayerData_CurrencysEntry_DoNotUse::MergeFrom(const PvpPlayerData_CurrencysEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PvpPlayerData_CurrencysEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[42]);
}

// ===================================================================

PvpPlayerData_ChessSkinDataEntry_DoNotUse::PvpPlayerData_ChessSkinDataEntry_DoNotUse() {}
PvpPlayerData_ChessSkinDataEntry_DoNotUse::PvpPlayerData_ChessSkinDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PvpPlayerData_ChessSkinDataEntry_DoNotUse::MergeFrom(const PvpPlayerData_ChessSkinDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PvpPlayerData_ChessSkinDataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[43]);
}

// ===================================================================

PvpPlayerData_SkinDataEntry_DoNotUse::PvpPlayerData_SkinDataEntry_DoNotUse() {}
PvpPlayerData_SkinDataEntry_DoNotUse::PvpPlayerData_SkinDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PvpPlayerData_SkinDataEntry_DoNotUse::MergeFrom(const PvpPlayerData_SkinDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PvpPlayerData_SkinDataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[44]);
}

// ===================================================================

class PvpPlayerData::_Internal {
 public:
  static const ::msg::CSDTCommonRandList& emotionlist(const PvpPlayerData* msg);
  static const ::msg::CSDTChessPlrInfo& curchessplr(const PvpPlayerData* msg);
  static const ::msg::KrAddictionInfo& addiction(const PvpPlayerData* msg);
  static const ::msg::PvpData& pvpdata(const PvpPlayerData* msg);
};

const ::msg::CSDTCommonRandList&
PvpPlayerData::_Internal::emotionlist(const PvpPlayerData* msg) {
  return *msg->_impl_.emotionlist_;
}
const ::msg::CSDTChessPlrInfo&
PvpPlayerData::_Internal::curchessplr(const PvpPlayerData* msg) {
  return *msg->_impl_.curchessplr_;
}
const ::msg::KrAddictionInfo&
PvpPlayerData::_Internal::addiction(const PvpPlayerData* msg) {
  return *msg->_impl_.addiction_;
}
const ::msg::PvpData&
PvpPlayerData::_Internal::pvpdata(const PvpPlayerData* msg) {
  return *msg->_impl_.pvpdata_;
}
PvpPlayerData::PvpPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PvpPlayerData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.PvpPlayerData)
}
PvpPlayerData::PvpPlayerData(const PvpPlayerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PvpPlayerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.modewindatas_)*/{}
    , /*decltype(_impl_.curshowitems_)*/{}
    , /*decltype(_impl_.settings_)*/{}
    , /*decltype(_impl_.switchitems_)*/{}
    , /*decltype(_impl_.punishment_)*/{}
    , /*decltype(_impl_.regiondelays_)*/{}
    , decltype(_impl_.passporttypeids_){from._impl_.passporttypeids_}
    , /*decltype(_impl_._passporttypeids_cached_byte_size_)*/{0}
    , /*decltype(_impl_.tickets_)*/{}
    , /*decltype(_impl_.currencys_)*/{}
    , decltype(_impl_.psblockedusers_){from._impl_.psblockedusers_}
    , decltype(_impl_.chesslist_){from._impl_.chesslist_}
    , decltype(_impl_.skinsuitid_){from._impl_.skinsuitid_}
    , /*decltype(_impl_._skinsuitid_cached_byte_size_)*/{0}
    , /*decltype(_impl_.chessskindata_)*/{}
    , /*decltype(_impl_.skindata_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.usrname_){}
    , decltype(_impl_.apkversion_){}
    , decltype(_impl_.pvpresourceversion_){}
    , decltype(_impl_.devicetype_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.teamvoiceid_){}
    , decltype(_impl_.picurl_){}
    , decltype(_impl_.cupnamechina_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.cupiconurl_){}
    , decltype(_impl_.pvpservergroup_){}
    , decltype(_impl_.teamvoiceuserid_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.packagename_){}
    , decltype(_impl_.sdkcountry_){}
    , decltype(_impl_.guildname_){}
    , decltype(_impl_.channelid_){}
    , decltype(_impl_.mentorid_){}
    , decltype(_impl_.emotionlist_){nullptr}
    , decltype(_impl_.curchessplr_){nullptr}
    , decltype(_impl_.addiction_){nullptr}
    , decltype(_impl_.pvpdata_){nullptr}
    , decltype(_impl_.index_){}
    , decltype(_impl_.camp_){}
    , decltype(_impl_.competitioncnt_){}
    , decltype(_impl_.headpic_){}
    , decltype(_impl_.teamplayernum_){}
    , decltype(_impl_.mmr_){}
    , decltype(_impl_.reqtime_){}
    , decltype(_impl_.lvl_){}
    , decltype(_impl_.platformtype_){}
    , decltype(_impl_.teamid_){}
    , decltype(_impl_.cup_){}
    , decltype(_impl_.asyn_){}
    , decltype(_impl_.chessplayerskin_){}
    , decltype(_impl_.sceneskin_){}
    , decltype(_impl_.damageeffect_){}
    , decltype(_impl_.currankseason_){}
    , decltype(_impl_.meleerule_){}
    , decltype(_impl_.channeltype_){}
    , decltype(_impl_.assistantid_){}
    , decltype(_impl_.creditscore_){}
    , decltype(_impl_.tmmr_){}
    , decltype(_impl_.tcup_){}
    , decltype(_impl_.teamvoicememid_){}
    , decltype(_impl_.isrobot_){}
    , decltype(_impl_.ps4only_){}
    , decltype(_impl_.teambattlecount_){}
    , decltype(_impl_.teambattlemvpcount_){}
    , decltype(_impl_.recommendscore_){}
    , decltype(_impl_.wxvviplevel_){}
    , decltype(_impl_.teambattleavgrank_){}
    , decltype(_impl_.personalavgmvp_){}
    , decltype(_impl_.observeprivilege_){}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.teamgroup_){}
    , decltype(_impl_.ping_){}
    , decltype(_impl_.province_){}
    , decltype(_impl_.tournamentid_){}
    , decltype(_impl_.tournamclass_){}
    , decltype(_impl_.tournamclassround_){}
    , decltype(_impl_.tournamchessid_){}
    , decltype(_impl_.firstmatchsuccesswaittime_){}
    , decltype(_impl_.restricttype_){}
    , decltype(_impl_.guildsign_){}
    , decltype(_impl_.ffmmr_){}
    , decltype(_impl_.ffcup_){}
    , decltype(_impl_.battletime_){}
    , decltype(_impl_.pvpvoicememid_){}
    , decltype(_impl_.campvoicememid_){}
    , decltype(_impl_.chosecardgroup_){}
    , decltype(_impl_.exchangestate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.modewindatas_.MergeFrom(from._impl_.modewindatas_);
  _this->_impl_.curshowitems_.MergeFrom(from._impl_.curshowitems_);
  _this->_impl_.settings_.MergeFrom(from._impl_.settings_);
  _this->_impl_.switchitems_.MergeFrom(from._impl_.switchitems_);
  _this->_impl_.punishment_.MergeFrom(from._impl_.punishment_);
  _this->_impl_.regiondelays_.MergeFrom(from._impl_.regiondelays_);
  _this->_impl_.tickets_.MergeFrom(from._impl_.tickets_);
  _this->_impl_.currencys_.MergeFrom(from._impl_.currencys_);
  _this->_impl_.chessskindata_.MergeFrom(from._impl_.chessskindata_);
  _this->_impl_.skindata_.MergeFrom(from._impl_.skindata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.usrname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.usrname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_usrname().empty()) {
    _this->_impl_.usrname_.Set(from._internal_usrname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.apkversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apkversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_apkversion().empty()) {
    _this->_impl_.apkversion_.Set(from._internal_apkversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pvpresourceversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pvpresourceversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pvpresourceversion().empty()) {
    _this->_impl_.pvpresourceversion_.Set(from._internal_pvpresourceversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.devicetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_devicetype().empty()) {
    _this->_impl_.devicetype_.Set(from._internal_devicetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channelusrid().empty()) {
    _this->_impl_.channelusrid_.Set(from._internal_channelusrid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.teamvoiceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teamvoiceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_teamvoiceid().empty()) {
    _this->_impl_.teamvoiceid_.Set(from._internal_teamvoiceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.picurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.picurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_picurl().empty()) {
    _this->_impl_.picurl_.Set(from._internal_picurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cupnamechina_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cupnamechina_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cupnamechina().empty()) {
    _this->_impl_.cupnamechina_.Set(from._internal_cupnamechina(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cupiconurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cupiconurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cupiconurl().empty()) {
    _this->_impl_.cupiconurl_.Set(from._internal_cupiconurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pvpservergroup_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pvpservergroup_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pvpservergroup().empty()) {
    _this->_impl_.pvpservergroup_.Set(from._internal_pvpservergroup(), 
      _this->GetArenaForAllocation());
  }
  _impl_.teamvoiceuserid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teamvoiceuserid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_teamvoiceuserid().empty()) {
    _this->_impl_.teamvoiceuserid_.Set(from._internal_teamvoiceuserid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  _impl_.packagename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packagename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_packagename().empty()) {
    _this->_impl_.packagename_.Set(from._internal_packagename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sdkcountry_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdkcountry_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdkcountry().empty()) {
    _this->_impl_.sdkcountry_.Set(from._internal_sdkcountry(), 
      _this->GetArenaForAllocation());
  }
  _impl_.guildname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guildname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_guildname().empty()) {
    _this->_impl_.guildname_.Set(from._internal_guildname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.channelid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channelid().empty()) {
    _this->_impl_.channelid_.Set(from._internal_channelid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mentorid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mentorid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mentorid().empty()) {
    _this->_impl_.mentorid_.Set(from._internal_mentorid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_emotionlist()) {
    _this->_impl_.emotionlist_ = new ::msg::CSDTCommonRandList(*from._impl_.emotionlist_);
  }
  if (from._internal_has_curchessplr()) {
    _this->_impl_.curchessplr_ = new ::msg::CSDTChessPlrInfo(*from._impl_.curchessplr_);
  }
  if (from._internal_has_addiction()) {
    _this->_impl_.addiction_ = new ::msg::KrAddictionInfo(*from._impl_.addiction_);
  }
  if (from._internal_has_pvpdata()) {
    _this->_impl_.pvpdata_ = new ::msg::PvpData(*from._impl_.pvpdata_);
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.exchangestate_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.exchangestate_));
  // @@protoc_insertion_point(copy_constructor:msg.PvpPlayerData)
}

inline void PvpPlayerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.modewindatas_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.curshowitems_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.settings_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.switchitems_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.punishment_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.regiondelays_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.passporttypeids_){arena}
    , /*decltype(_impl_._passporttypeids_cached_byte_size_)*/{0}
    , /*decltype(_impl_.tickets_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.currencys_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.psblockedusers_){arena}
    , decltype(_impl_.chesslist_){arena}
    , decltype(_impl_.skinsuitid_){arena}
    , /*decltype(_impl_._skinsuitid_cached_byte_size_)*/{0}
    , /*decltype(_impl_.chessskindata_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.skindata_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.usrname_){}
    , decltype(_impl_.apkversion_){}
    , decltype(_impl_.pvpresourceversion_){}
    , decltype(_impl_.devicetype_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.teamvoiceid_){}
    , decltype(_impl_.picurl_){}
    , decltype(_impl_.cupnamechina_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.cupiconurl_){}
    , decltype(_impl_.pvpservergroup_){}
    , decltype(_impl_.teamvoiceuserid_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.packagename_){}
    , decltype(_impl_.sdkcountry_){}
    , decltype(_impl_.guildname_){}
    , decltype(_impl_.channelid_){}
    , decltype(_impl_.mentorid_){}
    , decltype(_impl_.emotionlist_){nullptr}
    , decltype(_impl_.curchessplr_){nullptr}
    , decltype(_impl_.addiction_){nullptr}
    , decltype(_impl_.pvpdata_){nullptr}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.camp_){0u}
    , decltype(_impl_.competitioncnt_){0u}
    , decltype(_impl_.headpic_){0u}
    , decltype(_impl_.teamplayernum_){0u}
    , decltype(_impl_.mmr_){0u}
    , decltype(_impl_.reqtime_){int64_t{0}}
    , decltype(_impl_.lvl_){0u}
    , decltype(_impl_.platformtype_){0}
    , decltype(_impl_.teamid_){0u}
    , decltype(_impl_.cup_){0u}
    , decltype(_impl_.asyn_){0u}
    , decltype(_impl_.chessplayerskin_){0u}
    , decltype(_impl_.sceneskin_){0u}
    , decltype(_impl_.damageeffect_){0u}
    , decltype(_impl_.currankseason_){0u}
    , decltype(_impl_.meleerule_){0u}
    , decltype(_impl_.channeltype_){0}
    , decltype(_impl_.assistantid_){0}
    , decltype(_impl_.creditscore_){0u}
    , decltype(_impl_.tmmr_){0u}
    , decltype(_impl_.tcup_){0u}
    , decltype(_impl_.teamvoicememid_){0u}
    , decltype(_impl_.isrobot_){false}
    , decltype(_impl_.ps4only_){false}
    , decltype(_impl_.teambattlecount_){0u}
    , decltype(_impl_.teambattlemvpcount_){0u}
    , decltype(_impl_.recommendscore_){0u}
    , decltype(_impl_.wxvviplevel_){0u}
    , decltype(_impl_.teambattleavgrank_){0}
    , decltype(_impl_.personalavgmvp_){0}
    , decltype(_impl_.observeprivilege_){0}
    , decltype(_impl_.slot_){0u}
    , decltype(_impl_.teamgroup_){0}
    , decltype(_impl_.ping_){0u}
    , decltype(_impl_.province_){0u}
    , decltype(_impl_.tournamentid_){uint64_t{0u}}
    , decltype(_impl_.tournamclass_){uint64_t{0u}}
    , decltype(_impl_.tournamclassround_){uint64_t{0u}}
    , decltype(_impl_.tournamchessid_){uint64_t{0u}}
    , decltype(_impl_.firstmatchsuccesswaittime_){0u}
    , decltype(_impl_.restricttype_){0}
    , decltype(_impl_.guildsign_){0}
    , decltype(_impl_.ffmmr_){0u}
    , decltype(_impl_.ffcup_){0u}
    , decltype(_impl_.battletime_){0u}
    , decltype(_impl_.pvpvoicememid_){0u}
    , decltype(_impl_.campvoicememid_){0u}
    , decltype(_impl_.chosecardgroup_){0u}
    , decltype(_impl_.exchangestate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.usrname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.usrname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.apkversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apkversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pvpresourceversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pvpresourceversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.teamvoiceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teamvoiceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.picurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.picurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cupnamechina_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cupnamechina_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cupiconurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cupiconurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pvpservergroup_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pvpservergroup_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.teamvoiceuserid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teamvoiceuserid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.packagename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packagename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdkcountry_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdkcountry_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.guildname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guildname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channelid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mentorid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mentorid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PvpPlayerData::~PvpPlayerData() {
  // @@protoc_insertion_point(destructor:msg.PvpPlayerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PvpPlayerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modewindatas_.Destruct();
  _impl_.modewindatas_.~MapField();
  _impl_.curshowitems_.Destruct();
  _impl_.curshowitems_.~MapField();
  _impl_.settings_.Destruct();
  _impl_.settings_.~MapField();
  _impl_.switchitems_.Destruct();
  _impl_.switchitems_.~MapField();
  _impl_.punishment_.Destruct();
  _impl_.punishment_.~MapField();
  _impl_.regiondelays_.Destruct();
  _impl_.regiondelays_.~MapField();
  _impl_.passporttypeids_.~RepeatedField();
  _impl_.tickets_.Destruct();
  _impl_.tickets_.~MapField();
  _impl_.currencys_.Destruct();
  _impl_.currencys_.~MapField();
  _impl_.psblockedusers_.~RepeatedPtrField();
  _impl_.chesslist_.~RepeatedPtrField();
  _impl_.skinsuitid_.~RepeatedField();
  _impl_.chessskindata_.Destruct();
  _impl_.chessskindata_.~MapField();
  _impl_.skindata_.Destruct();
  _impl_.skindata_.~MapField();
  _impl_.id_.Destroy();
  _impl_.usrname_.Destroy();
  _impl_.apkversion_.Destroy();
  _impl_.pvpresourceversion_.Destroy();
  _impl_.devicetype_.Destroy();
  _impl_.channelusrid_.Destroy();
  _impl_.teamvoiceid_.Destroy();
  _impl_.picurl_.Destroy();
  _impl_.cupnamechina_.Destroy();
  _impl_.language_.Destroy();
  _impl_.country_.Destroy();
  _impl_.cupiconurl_.Destroy();
  _impl_.pvpservergroup_.Destroy();
  _impl_.teamvoiceuserid_.Destroy();
  _impl_.region_.Destroy();
  _impl_.packagename_.Destroy();
  _impl_.sdkcountry_.Destroy();
  _impl_.guildname_.Destroy();
  _impl_.channelid_.Destroy();
  _impl_.mentorid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.emotionlist_;
  if (this != internal_default_instance()) delete _impl_.curchessplr_;
  if (this != internal_default_instance()) delete _impl_.addiction_;
  if (this != internal_default_instance()) delete _impl_.pvpdata_;
}

void PvpPlayerData::ArenaDtor(void* object) {
  PvpPlayerData* _this = reinterpret_cast< PvpPlayerData* >(object);
  _this->_impl_.modewindatas_.Destruct();
  _this->_impl_.curshowitems_.Destruct();
  _this->_impl_.settings_.Destruct();
  _this->_impl_.switchitems_.Destruct();
  _this->_impl_.punishment_.Destruct();
  _this->_impl_.regiondelays_.Destruct();
  _this->_impl_.tickets_.Destruct();
  _this->_impl_.currencys_.Destruct();
  _this->_impl_.chessskindata_.Destruct();
  _this->_impl_.skindata_.Destruct();
}
void PvpPlayerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PvpPlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PvpPlayerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.modewindatas_.Clear();
  _impl_.curshowitems_.Clear();
  _impl_.settings_.Clear();
  _impl_.switchitems_.Clear();
  _impl_.punishment_.Clear();
  _impl_.regiondelays_.Clear();
  _impl_.passporttypeids_.Clear();
  _impl_.tickets_.Clear();
  _impl_.currencys_.Clear();
  _impl_.psblockedusers_.Clear();
  _impl_.chesslist_.Clear();
  _impl_.skinsuitid_.Clear();
  _impl_.chessskindata_.Clear();
  _impl_.skindata_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.usrname_.ClearToEmpty();
  _impl_.apkversion_.ClearToEmpty();
  _impl_.pvpresourceversion_.ClearToEmpty();
  _impl_.devicetype_.ClearToEmpty();
  _impl_.channelusrid_.ClearToEmpty();
  _impl_.teamvoiceid_.ClearToEmpty();
  _impl_.picurl_.ClearToEmpty();
  _impl_.cupnamechina_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  _impl_.country_.ClearToEmpty();
  _impl_.cupiconurl_.ClearToEmpty();
  _impl_.pvpservergroup_.ClearToEmpty();
  _impl_.teamvoiceuserid_.ClearToEmpty();
  _impl_.region_.ClearToEmpty();
  _impl_.packagename_.ClearToEmpty();
  _impl_.sdkcountry_.ClearToEmpty();
  _impl_.guildname_.ClearToEmpty();
  _impl_.channelid_.ClearToEmpty();
  _impl_.mentorid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.emotionlist_ != nullptr) {
    delete _impl_.emotionlist_;
  }
  _impl_.emotionlist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.curchessplr_ != nullptr) {
    delete _impl_.curchessplr_;
  }
  _impl_.curchessplr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.addiction_ != nullptr) {
    delete _impl_.addiction_;
  }
  _impl_.addiction_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpdata_ != nullptr) {
    delete _impl_.pvpdata_;
  }
  _impl_.pvpdata_ = nullptr;
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.exchangestate_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.exchangestate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PvpPlayerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.Id"));
        } else
          goto handle_unusual;
        continue;
      // string UsrName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_usrname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.UsrName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Camp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.camp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsRobot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.isrobot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 CompetitionCnt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.competitioncnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPic = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.headpic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TeamPlayerNum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.teamplayernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MMR = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Lvl = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.lvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ReqTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.reqtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PLATFORMTYPE PlatformType = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platformtype(static_cast<::msg::PLATFORMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 TeamId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Cup = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.cup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ApkVersion = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_apkversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.ApkVersion"));
        } else
          goto handle_unusual;
        continue;
      // string PvpResourceVersion = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_pvpresourceversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.PvpResourceVersion"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Asyn = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.asyn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ChessPlayerSkin = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.chessplayerskin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SceneSkin = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.sceneskin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string DeviceType = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_devicetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.DeviceType"));
        } else
          goto handle_unusual;
        continue;
      // uint32 DamageEffect = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.damageeffect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .msg.CSDTPvpWinData> ModeWinDatas = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.modewindatas_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 CurRankSeason = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.currankseason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MeleeRule = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.meleerule_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> CurShowItems = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.curshowitems_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTCommonRandList EmotionList = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_emotionlist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ChannelUsrId = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_channelusrid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.ChannelUsrId"));
        } else
          goto handle_unusual;
        continue;
      // .msg.CHANELTYPE ChannelType = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channeltype(static_cast<::msg::CHANELTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> Settings = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.settings_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 AssistantId = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.assistantid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 CreditScore = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.creditscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TMMR = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tmmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TCup = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.tcup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TeamVoiceId = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_teamvoiceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.TeamVoiceId"));
        } else
          goto handle_unusual;
        continue;
      // uint32 TeamVoiceMemId = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.teamvoicememid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string PicUrl = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_picurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.PicUrl"));
        } else
          goto handle_unusual;
        continue;
      // uint32 TeamBattleCount = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.teambattlecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TeamBattleMvpCount = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.teambattlemvpcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RecommendScore = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.recommendscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 WxVVipLevel = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.wxvviplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TeamBattleAvgRank = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.teambattleavgrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string CupNameChina = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_cupnamechina();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.CupNameChina"));
        } else
          goto handle_unusual;
        continue;
      // string Language = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.Language"));
        } else
          goto handle_unusual;
        continue;
      // string Country = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.Country"));
        } else
          goto handle_unusual;
        continue;
      // string CupIconUrl = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_cupiconurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.CupIconUrl"));
        } else
          goto handle_unusual;
        continue;
      // int32 PersonalAvgMvp = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.personalavgmvp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .msg.SwitchItem> SwitchItems = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.switchitems_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .msg.OBSERVEPRIVILEGE ObservePrivilege = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_observeprivilege(static_cast<::msg::OBSERVEPRIVILEGE>(val));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, int64> Punishment = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.punishment_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<418>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 Slot = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTChessPlrInfo CurChessPlr = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_curchessplr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TEAMGROUP TeamGroup = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_teamgroup(static_cast<::msg::TEAMGROUP>(val));
        } else
          goto handle_unusual;
        continue;
      // string PvpServerGroup = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_pvpservergroup();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.PvpServerGroup"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Ping = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Province = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.province_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TeamVoiceUserId = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_teamvoiceuserid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.TeamVoiceUserId"));
        } else
          goto handle_unusual;
        continue;
      // map<string, uint32> RegionDelays = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.regiondelays_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<490>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .msg.KrAddictionInfo Addiction = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_addiction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Region = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.Region"));
        } else
          goto handle_unusual;
        continue;
      // uint32 FirstMatchSuccessWaitTime = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.firstmatchsuccesswaittime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string PackageName = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_packagename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.PackageName"));
        } else
          goto handle_unusual;
        continue;
      // uint64 TournamentID = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tournamentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 TournamClass = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tournamclass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 TournamClassRound = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.tournamclassround_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 TournamChessID = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.tournamchessid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 PassportTypeIds = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_passporttypeids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_passporttypeids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> Tickets = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.tickets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<570>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string SdkCountry = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_sdkcountry();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.SdkCountry"));
        } else
          goto handle_unusual;
        continue;
      // bool Ps4Only = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.ps4only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.UserRestrictType RestrictType = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_restricttype(static_cast<::msg::UserRestrictType>(val));
        } else
          goto handle_unusual;
        continue;
      // map<int32, int32> Currencys = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.currencys_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<602>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string GuildName = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_guildname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.GuildName"));
        } else
          goto handle_unusual;
        continue;
      // int32 GuildSign = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.guildsign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string PSBlockedUsers = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_psblockedusers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.PSBlockedUsers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<626>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.KernelChessInfo ChessList = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_chesslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<634>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string ChannelID = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_channelid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.ChannelID"));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 SkinSuitID = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_skinsuitid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 136) {
          _internal_add_skinsuitid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 FFMMR = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.ffmmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 FFCup = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.ffcup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 BattleTime = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.battletime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .msg.ChessSkinSlotData> ChessSkinData = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.chessskindata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<682>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .msg.CSDTItem> SkinData = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.skindata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<690>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .msg.PvpData PvpData = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PvpVoiceMemId = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.pvpvoicememid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 CampVoiceMemId = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.campvoicememid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ChoseCardGroup = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.chosecardgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string MentorId = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_mentorid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpPlayerData.MentorId"));
        } else
          goto handle_unusual;
        continue;
      // .msg.EXCHANGESTATE ExchangeState = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_exchangestate(static_cast<::msg::EXCHANGESTATE>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PvpPlayerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PvpPlayerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.Id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string UsrName = 2;
  if (!this->_internal_usrname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usrname().data(), static_cast<int>(this->_internal_usrname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.UsrName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_usrname(), target);
  }

  // uint32 Index = 3;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_index(), target);
  }

  // uint32 Camp = 4;
  if (this->_internal_camp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_camp(), target);
  }

  // bool IsRobot = 5;
  if (this->_internal_isrobot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_isrobot(), target);
  }

  // uint32 CompetitionCnt = 6;
  if (this->_internal_competitioncnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_competitioncnt(), target);
  }

  // uint32 HeadPic = 7;
  if (this->_internal_headpic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_headpic(), target);
  }

  // uint32 TeamPlayerNum = 8;
  if (this->_internal_teamplayernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_teamplayernum(), target);
  }

  // uint32 MMR = 9;
  if (this->_internal_mmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_mmr(), target);
  }

  // uint32 Lvl = 10;
  if (this->_internal_lvl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_lvl(), target);
  }

  // int64 ReqTime = 11;
  if (this->_internal_reqtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_reqtime(), target);
  }

  // .msg.PLATFORMTYPE PlatformType = 12;
  if (this->_internal_platformtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_platformtype(), target);
  }

  // uint32 TeamId = 13;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_teamid(), target);
  }

  // uint32 Cup = 14;
  if (this->_internal_cup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_cup(), target);
  }

  // string ApkVersion = 15;
  if (!this->_internal_apkversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_apkversion().data(), static_cast<int>(this->_internal_apkversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.ApkVersion");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_apkversion(), target);
  }

  // string PvpResourceVersion = 16;
  if (!this->_internal_pvpresourceversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pvpresourceversion().data(), static_cast<int>(this->_internal_pvpresourceversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.PvpResourceVersion");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_pvpresourceversion(), target);
  }

  // uint32 Asyn = 17;
  if (this->_internal_asyn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_asyn(), target);
  }

  // uint32 ChessPlayerSkin = 18;
  if (this->_internal_chessplayerskin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_chessplayerskin(), target);
  }

  // uint32 SceneSkin = 19;
  if (this->_internal_sceneskin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_sceneskin(), target);
  }

  // string DeviceType = 20;
  if (!this->_internal_devicetype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicetype().data(), static_cast<int>(this->_internal_devicetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.DeviceType");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_devicetype(), target);
  }

  // uint32 DamageEffect = 21;
  if (this->_internal_damageeffect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_damageeffect(), target);
  }

  // map<uint32, .msg.CSDTPvpWinData> ModeWinDatas = 22;
  if (!this->_internal_modewindatas().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::CSDTPvpWinData>;
    using WireHelper = PvpPlayerData_ModeWinDatasEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_modewindatas();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(22, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(22, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint32 CurRankSeason = 24;
  if (this->_internal_currankseason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_currankseason(), target);
  }

  // uint32 MeleeRule = 25;
  if (this->_internal_meleerule() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_meleerule(), target);
  }

  // map<uint32, uint32> CurShowItems = 26;
  if (!this->_internal_curshowitems().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = PvpPlayerData_CurShowItemsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_curshowitems();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(26, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(26, entry.first, entry.second, target, stream);
      }
    }
  }

  // .msg.CSDTCommonRandList EmotionList = 28;
  if (this->_internal_has_emotionlist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::emotionlist(this),
        _Internal::emotionlist(this).GetCachedSize(), target, stream);
  }

  // string ChannelUsrId = 30;
  if (!this->_internal_channelusrid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelusrid().data(), static_cast<int>(this->_internal_channelusrid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.ChannelUsrId");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_channelusrid(), target);
  }

  // .msg.CHANELTYPE ChannelType = 31;
  if (this->_internal_channeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      31, this->_internal_channeltype(), target);
  }

  // map<uint32, uint32> Settings = 32;
  if (!this->_internal_settings().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = PvpPlayerData_SettingsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_settings();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(32, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(32, entry.first, entry.second, target, stream);
      }
    }
  }

  // int32 AssistantId = 33;
  if (this->_internal_assistantid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(33, this->_internal_assistantid(), target);
  }

  // uint32 CreditScore = 34;
  if (this->_internal_creditscore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(34, this->_internal_creditscore(), target);
  }

  // uint32 TMMR = 35;
  if (this->_internal_tmmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(35, this->_internal_tmmr(), target);
  }

  // uint32 TCup = 36;
  if (this->_internal_tcup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(36, this->_internal_tcup(), target);
  }

  // string TeamVoiceId = 37;
  if (!this->_internal_teamvoiceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_teamvoiceid().data(), static_cast<int>(this->_internal_teamvoiceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.TeamVoiceId");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_teamvoiceid(), target);
  }

  // uint32 TeamVoiceMemId = 38;
  if (this->_internal_teamvoicememid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(38, this->_internal_teamvoicememid(), target);
  }

  // string PicUrl = 39;
  if (!this->_internal_picurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_picurl().data(), static_cast<int>(this->_internal_picurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.PicUrl");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_picurl(), target);
  }

  // uint32 TeamBattleCount = 40;
  if (this->_internal_teambattlecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(40, this->_internal_teambattlecount(), target);
  }

  // uint32 TeamBattleMvpCount = 41;
  if (this->_internal_teambattlemvpcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(41, this->_internal_teambattlemvpcount(), target);
  }

  // uint32 RecommendScore = 42;
  if (this->_internal_recommendscore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(42, this->_internal_recommendscore(), target);
  }

  // uint32 WxVVipLevel = 43;
  if (this->_internal_wxvviplevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(43, this->_internal_wxvviplevel(), target);
  }

  // int32 TeamBattleAvgRank = 44;
  if (this->_internal_teambattleavgrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(44, this->_internal_teambattleavgrank(), target);
  }

  // string CupNameChina = 45;
  if (!this->_internal_cupnamechina().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cupnamechina().data(), static_cast<int>(this->_internal_cupnamechina().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.CupNameChina");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_cupnamechina(), target);
  }

  // string Language = 46;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.Language");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_language(), target);
  }

  // string Country = 47;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.Country");
    target = stream->WriteStringMaybeAliased(
        47, this->_internal_country(), target);
  }

  // string CupIconUrl = 48;
  if (!this->_internal_cupiconurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cupiconurl().data(), static_cast<int>(this->_internal_cupiconurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.CupIconUrl");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_cupiconurl(), target);
  }

  // int32 PersonalAvgMvp = 49;
  if (this->_internal_personalavgmvp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(49, this->_internal_personalavgmvp(), target);
  }

  // map<string, .msg.SwitchItem> SwitchItems = 50;
  if (!this->_internal_switchitems().empty()) {
    using MapType = ::_pb::Map<std::string, ::msg::SwitchItem>;
    using WireHelper = PvpPlayerData_SwitchItemsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_switchitems();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.PvpPlayerData.SwitchItemsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(50, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(50, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .msg.OBSERVEPRIVILEGE ObservePrivilege = 51;
  if (this->_internal_observeprivilege() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      51, this->_internal_observeprivilege(), target);
  }

  // map<uint32, int64> Punishment = 52;
  if (!this->_internal_punishment().empty()) {
    using MapType = ::_pb::Map<uint32_t, int64_t>;
    using WireHelper = PvpPlayerData_PunishmentEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_punishment();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(52, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(52, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint32 Slot = 53;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(53, this->_internal_slot(), target);
  }

  // .msg.CSDTChessPlrInfo CurChessPlr = 55;
  if (this->_internal_has_curchessplr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(55, _Internal::curchessplr(this),
        _Internal::curchessplr(this).GetCachedSize(), target, stream);
  }

  // .msg.TEAMGROUP TeamGroup = 56;
  if (this->_internal_teamgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      56, this->_internal_teamgroup(), target);
  }

  // string PvpServerGroup = 57;
  if (!this->_internal_pvpservergroup().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pvpservergroup().data(), static_cast<int>(this->_internal_pvpservergroup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.PvpServerGroup");
    target = stream->WriteStringMaybeAliased(
        57, this->_internal_pvpservergroup(), target);
  }

  // uint32 Ping = 58;
  if (this->_internal_ping() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(58, this->_internal_ping(), target);
  }

  // uint32 Province = 59;
  if (this->_internal_province() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(59, this->_internal_province(), target);
  }

  // string TeamVoiceUserId = 60;
  if (!this->_internal_teamvoiceuserid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_teamvoiceuserid().data(), static_cast<int>(this->_internal_teamvoiceuserid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.TeamVoiceUserId");
    target = stream->WriteStringMaybeAliased(
        60, this->_internal_teamvoiceuserid(), target);
  }

  // map<string, uint32> RegionDelays = 61;
  if (!this->_internal_regiondelays().empty()) {
    using MapType = ::_pb::Map<std::string, uint32_t>;
    using WireHelper = PvpPlayerData_RegionDelaysEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_regiondelays();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.PvpPlayerData.RegionDelaysEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(61, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(61, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .msg.KrAddictionInfo Addiction = 62;
  if (this->_internal_has_addiction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(62, _Internal::addiction(this),
        _Internal::addiction(this).GetCachedSize(), target, stream);
  }

  // string Region = 63;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.Region");
    target = stream->WriteStringMaybeAliased(
        63, this->_internal_region(), target);
  }

  // uint32 FirstMatchSuccessWaitTime = 64;
  if (this->_internal_firstmatchsuccesswaittime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(64, this->_internal_firstmatchsuccesswaittime(), target);
  }

  // string PackageName = 65;
  if (!this->_internal_packagename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_packagename().data(), static_cast<int>(this->_internal_packagename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.PackageName");
    target = stream->WriteStringMaybeAliased(
        65, this->_internal_packagename(), target);
  }

  // uint64 TournamentID = 66;
  if (this->_internal_tournamentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(66, this->_internal_tournamentid(), target);
  }

  // uint64 TournamClass = 67;
  if (this->_internal_tournamclass() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(67, this->_internal_tournamclass(), target);
  }

  // uint64 TournamClassRound = 68;
  if (this->_internal_tournamclassround() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(68, this->_internal_tournamclassround(), target);
  }

  // uint64 TournamChessID = 69;
  if (this->_internal_tournamchessid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(69, this->_internal_tournamchessid(), target);
  }

  // repeated uint32 PassportTypeIds = 70;
  {
    int byte_size = _impl_._passporttypeids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          70, _internal_passporttypeids(), byte_size, target);
    }
  }

  // map<uint32, uint32> Tickets = 71;
  if (!this->_internal_tickets().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = PvpPlayerData_TicketsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_tickets();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(71, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(71, entry.first, entry.second, target, stream);
      }
    }
  }

  // string SdkCountry = 72;
  if (!this->_internal_sdkcountry().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdkcountry().data(), static_cast<int>(this->_internal_sdkcountry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.SdkCountry");
    target = stream->WriteStringMaybeAliased(
        72, this->_internal_sdkcountry(), target);
  }

  // bool Ps4Only = 73;
  if (this->_internal_ps4only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(73, this->_internal_ps4only(), target);
  }

  // .msg.UserRestrictType RestrictType = 74;
  if (this->_internal_restricttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      74, this->_internal_restricttype(), target);
  }

  // map<int32, int32> Currencys = 75;
  if (!this->_internal_currencys().empty()) {
    using MapType = ::_pb::Map<int32_t, int32_t>;
    using WireHelper = PvpPlayerData_CurrencysEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_currencys();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(75, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(75, entry.first, entry.second, target, stream);
      }
    }
  }

  // string GuildName = 76;
  if (!this->_internal_guildname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guildname().data(), static_cast<int>(this->_internal_guildname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.GuildName");
    target = stream->WriteStringMaybeAliased(
        76, this->_internal_guildname(), target);
  }

  // int32 GuildSign = 77;
  if (this->_internal_guildsign() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(77, this->_internal_guildsign(), target);
  }

  // repeated string PSBlockedUsers = 78;
  for (int i = 0, n = this->_internal_psblockedusers_size(); i < n; i++) {
    const auto& s = this->_internal_psblockedusers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.PSBlockedUsers");
    target = stream->WriteString(78, s, target);
  }

  // repeated .msg.KernelChessInfo ChessList = 79;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chesslist_size()); i < n; i++) {
    const auto& repfield = this->_internal_chesslist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(79, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string ChannelID = 80;
  if (!this->_internal_channelid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.ChannelID");
    target = stream->WriteStringMaybeAliased(
        80, this->_internal_channelid(), target);
  }

  // repeated uint32 SkinSuitID = 81;
  {
    int byte_size = _impl_._skinsuitid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          81, _internal_skinsuitid(), byte_size, target);
    }
  }

  // uint32 FFMMR = 82;
  if (this->_internal_ffmmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(82, this->_internal_ffmmr(), target);
  }

  // uint32 FFCup = 83;
  if (this->_internal_ffcup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(83, this->_internal_ffcup(), target);
  }

  // uint32 BattleTime = 84;
  if (this->_internal_battletime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(84, this->_internal_battletime(), target);
  }

  // map<uint32, .msg.ChessSkinSlotData> ChessSkinData = 85;
  if (!this->_internal_chessskindata().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::ChessSkinSlotData>;
    using WireHelper = PvpPlayerData_ChessSkinDataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_chessskindata();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(85, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(85, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .msg.CSDTItem> SkinData = 86;
  if (!this->_internal_skindata().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::CSDTItem>;
    using WireHelper = PvpPlayerData_SkinDataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_skindata();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(86, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(86, entry.first, entry.second, target, stream);
      }
    }
  }

  // .msg.PvpData PvpData = 87;
  if (this->_internal_has_pvpdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(87, _Internal::pvpdata(this),
        _Internal::pvpdata(this).GetCachedSize(), target, stream);
  }

  // uint32 PvpVoiceMemId = 88;
  if (this->_internal_pvpvoicememid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(88, this->_internal_pvpvoicememid(), target);
  }

  // uint32 CampVoiceMemId = 89;
  if (this->_internal_campvoicememid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(89, this->_internal_campvoicememid(), target);
  }

  // uint32 ChoseCardGroup = 90;
  if (this->_internal_chosecardgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(90, this->_internal_chosecardgroup(), target);
  }

  // string MentorId = 91;
  if (!this->_internal_mentorid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mentorid().data(), static_cast<int>(this->_internal_mentorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpPlayerData.MentorId");
    target = stream->WriteStringMaybeAliased(
        91, this->_internal_mentorid(), target);
  }

  // .msg.EXCHANGESTATE ExchangeState = 92;
  if (this->_internal_exchangestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      92, this->_internal_exchangestate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PvpPlayerData)
  return target;
}

size_t PvpPlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PvpPlayerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .msg.CSDTPvpWinData> ModeWinDatas = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_modewindatas_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTPvpWinData >::const_iterator
      it = this->_internal_modewindatas().begin();
      it != this->_internal_modewindatas().end(); ++it) {
    total_size += PvpPlayerData_ModeWinDatasEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> CurShowItems = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_curshowitems_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_curshowitems().begin();
      it != this->_internal_curshowitems().end(); ++it) {
    total_size += PvpPlayerData_CurShowItemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> Settings = 32;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_settings_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_settings().begin();
      it != this->_internal_settings().end(); ++it) {
    total_size += PvpPlayerData_SettingsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .msg.SwitchItem> SwitchItems = 50;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_switchitems_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::SwitchItem >::const_iterator
      it = this->_internal_switchitems().begin();
      it != this->_internal_switchitems().end(); ++it) {
    total_size += PvpPlayerData_SwitchItemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, int64> Punishment = 52;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_punishment_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int64_t >::const_iterator
      it = this->_internal_punishment().begin();
      it != this->_internal_punishment().end(); ++it) {
    total_size += PvpPlayerData_PunishmentEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, uint32> RegionDelays = 61;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_regiondelays_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >::const_iterator
      it = this->_internal_regiondelays().begin();
      it != this->_internal_regiondelays().end(); ++it) {
    total_size += PvpPlayerData_RegionDelaysEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated uint32 PassportTypeIds = 70;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.passporttypeids_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._passporttypeids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<uint32, uint32> Tickets = 71;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tickets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_tickets().begin();
      it != this->_internal_tickets().end(); ++it) {
    total_size += PvpPlayerData_TicketsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, int32> Currencys = 75;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_currencys_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >::const_iterator
      it = this->_internal_currencys().begin();
      it != this->_internal_currencys().end(); ++it) {
    total_size += PvpPlayerData_CurrencysEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string PSBlockedUsers = 78;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.psblockedusers_.size());
  for (int i = 0, n = _impl_.psblockedusers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.psblockedusers_.Get(i));
  }

  // repeated .msg.KernelChessInfo ChessList = 79;
  total_size += 2UL * this->_internal_chesslist_size();
  for (const auto& msg : this->_impl_.chesslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 SkinSuitID = 81;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.skinsuitid_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._skinsuitid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<uint32, .msg.ChessSkinSlotData> ChessSkinData = 85;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_chessskindata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChessSkinSlotData >::const_iterator
      it = this->_internal_chessskindata().begin();
      it != this->_internal_chessskindata().end(); ++it) {
    total_size += PvpPlayerData_ChessSkinDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .msg.CSDTItem> SkinData = 86;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_skindata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTItem >::const_iterator
      it = this->_internal_skindata().begin();
      it != this->_internal_skindata().end(); ++it) {
    total_size += PvpPlayerData_SkinDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string UsrName = 2;
  if (!this->_internal_usrname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usrname());
  }

  // string ApkVersion = 15;
  if (!this->_internal_apkversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_apkversion());
  }

  // string PvpResourceVersion = 16;
  if (!this->_internal_pvpresourceversion().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pvpresourceversion());
  }

  // string DeviceType = 20;
  if (!this->_internal_devicetype().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devicetype());
  }

  // string ChannelUsrId = 30;
  if (!this->_internal_channelusrid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelusrid());
  }

  // string TeamVoiceId = 37;
  if (!this->_internal_teamvoiceid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_teamvoiceid());
  }

  // string PicUrl = 39;
  if (!this->_internal_picurl().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_picurl());
  }

  // string CupNameChina = 45;
  if (!this->_internal_cupnamechina().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cupnamechina());
  }

  // string Language = 46;
  if (!this->_internal_language().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string Country = 47;
  if (!this->_internal_country().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string CupIconUrl = 48;
  if (!this->_internal_cupiconurl().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cupiconurl());
  }

  // string PvpServerGroup = 57;
  if (!this->_internal_pvpservergroup().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pvpservergroup());
  }

  // string TeamVoiceUserId = 60;
  if (!this->_internal_teamvoiceuserid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_teamvoiceuserid());
  }

  // string Region = 63;
  if (!this->_internal_region().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string PackageName = 65;
  if (!this->_internal_packagename().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_packagename());
  }

  // string SdkCountry = 72;
  if (!this->_internal_sdkcountry().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdkcountry());
  }

  // string GuildName = 76;
  if (!this->_internal_guildname().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guildname());
  }

  // string ChannelID = 80;
  if (!this->_internal_channelid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  // string MentorId = 91;
  if (!this->_internal_mentorid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mentorid());
  }

  // .msg.CSDTCommonRandList EmotionList = 28;
  if (this->_internal_has_emotionlist()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.emotionlist_);
  }

  // .msg.CSDTChessPlrInfo CurChessPlr = 55;
  if (this->_internal_has_curchessplr()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.curchessplr_);
  }

  // .msg.KrAddictionInfo Addiction = 62;
  if (this->_internal_has_addiction()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.addiction_);
  }

  // .msg.PvpData PvpData = 87;
  if (this->_internal_has_pvpdata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpdata_);
  }

  // uint32 Index = 3;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // uint32 Camp = 4;
  if (this->_internal_camp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_camp());
  }

  // uint32 CompetitionCnt = 6;
  if (this->_internal_competitioncnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_competitioncnt());
  }

  // uint32 HeadPic = 7;
  if (this->_internal_headpic() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpic());
  }

  // uint32 TeamPlayerNum = 8;
  if (this->_internal_teamplayernum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_teamplayernum());
  }

  // uint32 MMR = 9;
  if (this->_internal_mmr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mmr());
  }

  // int64 ReqTime = 11;
  if (this->_internal_reqtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_reqtime());
  }

  // uint32 Lvl = 10;
  if (this->_internal_lvl() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lvl());
  }

  // .msg.PLATFORMTYPE PlatformType = 12;
  if (this->_internal_platformtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_platformtype());
  }

  // uint32 TeamId = 13;
  if (this->_internal_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_teamid());
  }

  // uint32 Cup = 14;
  if (this->_internal_cup() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cup());
  }

  // uint32 Asyn = 17;
  if (this->_internal_asyn() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_asyn());
  }

  // uint32 ChessPlayerSkin = 18;
  if (this->_internal_chessplayerskin() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_chessplayerskin());
  }

  // uint32 SceneSkin = 19;
  if (this->_internal_sceneskin() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_sceneskin());
  }

  // uint32 DamageEffect = 21;
  if (this->_internal_damageeffect() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_damageeffect());
  }

  // uint32 CurRankSeason = 24;
  if (this->_internal_currankseason() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_currankseason());
  }

  // uint32 MeleeRule = 25;
  if (this->_internal_meleerule() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_meleerule());
  }

  // .msg.CHANELTYPE ChannelType = 31;
  if (this->_internal_channeltype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_channeltype());
  }

  // int32 AssistantId = 33;
  if (this->_internal_assistantid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_assistantid());
  }

  // uint32 CreditScore = 34;
  if (this->_internal_creditscore() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_creditscore());
  }

  // uint32 TMMR = 35;
  if (this->_internal_tmmr() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tmmr());
  }

  // uint32 TCup = 36;
  if (this->_internal_tcup() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tcup());
  }

  // uint32 TeamVoiceMemId = 38;
  if (this->_internal_teamvoicememid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_teamvoicememid());
  }

  // bool IsRobot = 5;
  if (this->_internal_isrobot() != 0) {
    total_size += 1 + 1;
  }

  // bool Ps4Only = 73;
  if (this->_internal_ps4only() != 0) {
    total_size += 2 + 1;
  }

  // uint32 TeamBattleCount = 40;
  if (this->_internal_teambattlecount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_teambattlecount());
  }

  // uint32 TeamBattleMvpCount = 41;
  if (this->_internal_teambattlemvpcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_teambattlemvpcount());
  }

  // uint32 RecommendScore = 42;
  if (this->_internal_recommendscore() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_recommendscore());
  }

  // uint32 WxVVipLevel = 43;
  if (this->_internal_wxvviplevel() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_wxvviplevel());
  }

  // int32 TeamBattleAvgRank = 44;
  if (this->_internal_teambattleavgrank() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_teambattleavgrank());
  }

  // int32 PersonalAvgMvp = 49;
  if (this->_internal_personalavgmvp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_personalavgmvp());
  }

  // .msg.OBSERVEPRIVILEGE ObservePrivilege = 51;
  if (this->_internal_observeprivilege() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_observeprivilege());
  }

  // uint32 Slot = 53;
  if (this->_internal_slot() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_slot());
  }

  // .msg.TEAMGROUP TeamGroup = 56;
  if (this->_internal_teamgroup() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_teamgroup());
  }

  // uint32 Ping = 58;
  if (this->_internal_ping() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_ping());
  }

  // uint32 Province = 59;
  if (this->_internal_province() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_province());
  }

  // uint64 TournamentID = 66;
  if (this->_internal_tournamentid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_tournamentid());
  }

  // uint64 TournamClass = 67;
  if (this->_internal_tournamclass() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_tournamclass());
  }

  // uint64 TournamClassRound = 68;
  if (this->_internal_tournamclassround() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_tournamclassround());
  }

  // uint64 TournamChessID = 69;
  if (this->_internal_tournamchessid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_tournamchessid());
  }

  // uint32 FirstMatchSuccessWaitTime = 64;
  if (this->_internal_firstmatchsuccesswaittime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_firstmatchsuccesswaittime());
  }

  // .msg.UserRestrictType RestrictType = 74;
  if (this->_internal_restricttype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_restricttype());
  }

  // int32 GuildSign = 77;
  if (this->_internal_guildsign() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_guildsign());
  }

  // uint32 FFMMR = 82;
  if (this->_internal_ffmmr() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_ffmmr());
  }

  // uint32 FFCup = 83;
  if (this->_internal_ffcup() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_ffcup());
  }

  // uint32 BattleTime = 84;
  if (this->_internal_battletime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_battletime());
  }

  // uint32 PvpVoiceMemId = 88;
  if (this->_internal_pvpvoicememid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_pvpvoicememid());
  }

  // uint32 CampVoiceMemId = 89;
  if (this->_internal_campvoicememid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_campvoicememid());
  }

  // uint32 ChoseCardGroup = 90;
  if (this->_internal_chosecardgroup() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_chosecardgroup());
  }

  // .msg.EXCHANGESTATE ExchangeState = 92;
  if (this->_internal_exchangestate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_exchangestate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PvpPlayerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PvpPlayerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PvpPlayerData::GetClassData() const { return &_class_data_; }


void PvpPlayerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PvpPlayerData*>(&to_msg);
  auto& from = static_cast<const PvpPlayerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PvpPlayerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.modewindatas_.MergeFrom(from._impl_.modewindatas_);
  _this->_impl_.curshowitems_.MergeFrom(from._impl_.curshowitems_);
  _this->_impl_.settings_.MergeFrom(from._impl_.settings_);
  _this->_impl_.switchitems_.MergeFrom(from._impl_.switchitems_);
  _this->_impl_.punishment_.MergeFrom(from._impl_.punishment_);
  _this->_impl_.regiondelays_.MergeFrom(from._impl_.regiondelays_);
  _this->_impl_.passporttypeids_.MergeFrom(from._impl_.passporttypeids_);
  _this->_impl_.tickets_.MergeFrom(from._impl_.tickets_);
  _this->_impl_.currencys_.MergeFrom(from._impl_.currencys_);
  _this->_impl_.psblockedusers_.MergeFrom(from._impl_.psblockedusers_);
  _this->_impl_.chesslist_.MergeFrom(from._impl_.chesslist_);
  _this->_impl_.skinsuitid_.MergeFrom(from._impl_.skinsuitid_);
  _this->_impl_.chessskindata_.MergeFrom(from._impl_.chessskindata_);
  _this->_impl_.skindata_.MergeFrom(from._impl_.skindata_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_usrname().empty()) {
    _this->_internal_set_usrname(from._internal_usrname());
  }
  if (!from._internal_apkversion().empty()) {
    _this->_internal_set_apkversion(from._internal_apkversion());
  }
  if (!from._internal_pvpresourceversion().empty()) {
    _this->_internal_set_pvpresourceversion(from._internal_pvpresourceversion());
  }
  if (!from._internal_devicetype().empty()) {
    _this->_internal_set_devicetype(from._internal_devicetype());
  }
  if (!from._internal_channelusrid().empty()) {
    _this->_internal_set_channelusrid(from._internal_channelusrid());
  }
  if (!from._internal_teamvoiceid().empty()) {
    _this->_internal_set_teamvoiceid(from._internal_teamvoiceid());
  }
  if (!from._internal_picurl().empty()) {
    _this->_internal_set_picurl(from._internal_picurl());
  }
  if (!from._internal_cupnamechina().empty()) {
    _this->_internal_set_cupnamechina(from._internal_cupnamechina());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (!from._internal_cupiconurl().empty()) {
    _this->_internal_set_cupiconurl(from._internal_cupiconurl());
  }
  if (!from._internal_pvpservergroup().empty()) {
    _this->_internal_set_pvpservergroup(from._internal_pvpservergroup());
  }
  if (!from._internal_teamvoiceuserid().empty()) {
    _this->_internal_set_teamvoiceuserid(from._internal_teamvoiceuserid());
  }
  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (!from._internal_packagename().empty()) {
    _this->_internal_set_packagename(from._internal_packagename());
  }
  if (!from._internal_sdkcountry().empty()) {
    _this->_internal_set_sdkcountry(from._internal_sdkcountry());
  }
  if (!from._internal_guildname().empty()) {
    _this->_internal_set_guildname(from._internal_guildname());
  }
  if (!from._internal_channelid().empty()) {
    _this->_internal_set_channelid(from._internal_channelid());
  }
  if (!from._internal_mentorid().empty()) {
    _this->_internal_set_mentorid(from._internal_mentorid());
  }
  if (from._internal_has_emotionlist()) {
    _this->_internal_mutable_emotionlist()->::msg::CSDTCommonRandList::MergeFrom(
        from._internal_emotionlist());
  }
  if (from._internal_has_curchessplr()) {
    _this->_internal_mutable_curchessplr()->::msg::CSDTChessPlrInfo::MergeFrom(
        from._internal_curchessplr());
  }
  if (from._internal_has_addiction()) {
    _this->_internal_mutable_addiction()->::msg::KrAddictionInfo::MergeFrom(
        from._internal_addiction());
  }
  if (from._internal_has_pvpdata()) {
    _this->_internal_mutable_pvpdata()->::msg::PvpData::MergeFrom(
        from._internal_pvpdata());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_camp() != 0) {
    _this->_internal_set_camp(from._internal_camp());
  }
  if (from._internal_competitioncnt() != 0) {
    _this->_internal_set_competitioncnt(from._internal_competitioncnt());
  }
  if (from._internal_headpic() != 0) {
    _this->_internal_set_headpic(from._internal_headpic());
  }
  if (from._internal_teamplayernum() != 0) {
    _this->_internal_set_teamplayernum(from._internal_teamplayernum());
  }
  if (from._internal_mmr() != 0) {
    _this->_internal_set_mmr(from._internal_mmr());
  }
  if (from._internal_reqtime() != 0) {
    _this->_internal_set_reqtime(from._internal_reqtime());
  }
  if (from._internal_lvl() != 0) {
    _this->_internal_set_lvl(from._internal_lvl());
  }
  if (from._internal_platformtype() != 0) {
    _this->_internal_set_platformtype(from._internal_platformtype());
  }
  if (from._internal_teamid() != 0) {
    _this->_internal_set_teamid(from._internal_teamid());
  }
  if (from._internal_cup() != 0) {
    _this->_internal_set_cup(from._internal_cup());
  }
  if (from._internal_asyn() != 0) {
    _this->_internal_set_asyn(from._internal_asyn());
  }
  if (from._internal_chessplayerskin() != 0) {
    _this->_internal_set_chessplayerskin(from._internal_chessplayerskin());
  }
  if (from._internal_sceneskin() != 0) {
    _this->_internal_set_sceneskin(from._internal_sceneskin());
  }
  if (from._internal_damageeffect() != 0) {
    _this->_internal_set_damageeffect(from._internal_damageeffect());
  }
  if (from._internal_currankseason() != 0) {
    _this->_internal_set_currankseason(from._internal_currankseason());
  }
  if (from._internal_meleerule() != 0) {
    _this->_internal_set_meleerule(from._internal_meleerule());
  }
  if (from._internal_channeltype() != 0) {
    _this->_internal_set_channeltype(from._internal_channeltype());
  }
  if (from._internal_assistantid() != 0) {
    _this->_internal_set_assistantid(from._internal_assistantid());
  }
  if (from._internal_creditscore() != 0) {
    _this->_internal_set_creditscore(from._internal_creditscore());
  }
  if (from._internal_tmmr() != 0) {
    _this->_internal_set_tmmr(from._internal_tmmr());
  }
  if (from._internal_tcup() != 0) {
    _this->_internal_set_tcup(from._internal_tcup());
  }
  if (from._internal_teamvoicememid() != 0) {
    _this->_internal_set_teamvoicememid(from._internal_teamvoicememid());
  }
  if (from._internal_isrobot() != 0) {
    _this->_internal_set_isrobot(from._internal_isrobot());
  }
  if (from._internal_ps4only() != 0) {
    _this->_internal_set_ps4only(from._internal_ps4only());
  }
  if (from._internal_teambattlecount() != 0) {
    _this->_internal_set_teambattlecount(from._internal_teambattlecount());
  }
  if (from._internal_teambattlemvpcount() != 0) {
    _this->_internal_set_teambattlemvpcount(from._internal_teambattlemvpcount());
  }
  if (from._internal_recommendscore() != 0) {
    _this->_internal_set_recommendscore(from._internal_recommendscore());
  }
  if (from._internal_wxvviplevel() != 0) {
    _this->_internal_set_wxvviplevel(from._internal_wxvviplevel());
  }
  if (from._internal_teambattleavgrank() != 0) {
    _this->_internal_set_teambattleavgrank(from._internal_teambattleavgrank());
  }
  if (from._internal_personalavgmvp() != 0) {
    _this->_internal_set_personalavgmvp(from._internal_personalavgmvp());
  }
  if (from._internal_observeprivilege() != 0) {
    _this->_internal_set_observeprivilege(from._internal_observeprivilege());
  }
  if (from._internal_slot() != 0) {
    _this->_internal_set_slot(from._internal_slot());
  }
  if (from._internal_teamgroup() != 0) {
    _this->_internal_set_teamgroup(from._internal_teamgroup());
  }
  if (from._internal_ping() != 0) {
    _this->_internal_set_ping(from._internal_ping());
  }
  if (from._internal_province() != 0) {
    _this->_internal_set_province(from._internal_province());
  }
  if (from._internal_tournamentid() != 0) {
    _this->_internal_set_tournamentid(from._internal_tournamentid());
  }
  if (from._internal_tournamclass() != 0) {
    _this->_internal_set_tournamclass(from._internal_tournamclass());
  }
  if (from._internal_tournamclassround() != 0) {
    _this->_internal_set_tournamclassround(from._internal_tournamclassround());
  }
  if (from._internal_tournamchessid() != 0) {
    _this->_internal_set_tournamchessid(from._internal_tournamchessid());
  }
  if (from._internal_firstmatchsuccesswaittime() != 0) {
    _this->_internal_set_firstmatchsuccesswaittime(from._internal_firstmatchsuccesswaittime());
  }
  if (from._internal_restricttype() != 0) {
    _this->_internal_set_restricttype(from._internal_restricttype());
  }
  if (from._internal_guildsign() != 0) {
    _this->_internal_set_guildsign(from._internal_guildsign());
  }
  if (from._internal_ffmmr() != 0) {
    _this->_internal_set_ffmmr(from._internal_ffmmr());
  }
  if (from._internal_ffcup() != 0) {
    _this->_internal_set_ffcup(from._internal_ffcup());
  }
  if (from._internal_battletime() != 0) {
    _this->_internal_set_battletime(from._internal_battletime());
  }
  if (from._internal_pvpvoicememid() != 0) {
    _this->_internal_set_pvpvoicememid(from._internal_pvpvoicememid());
  }
  if (from._internal_campvoicememid() != 0) {
    _this->_internal_set_campvoicememid(from._internal_campvoicememid());
  }
  if (from._internal_chosecardgroup() != 0) {
    _this->_internal_set_chosecardgroup(from._internal_chosecardgroup());
  }
  if (from._internal_exchangestate() != 0) {
    _this->_internal_set_exchangestate(from._internal_exchangestate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PvpPlayerData::CopyFrom(const PvpPlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PvpPlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpPlayerData::IsInitialized() const {
  return true;
}

void PvpPlayerData::InternalSwap(PvpPlayerData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.modewindatas_.InternalSwap(&other->_impl_.modewindatas_);
  _impl_.curshowitems_.InternalSwap(&other->_impl_.curshowitems_);
  _impl_.settings_.InternalSwap(&other->_impl_.settings_);
  _impl_.switchitems_.InternalSwap(&other->_impl_.switchitems_);
  _impl_.punishment_.InternalSwap(&other->_impl_.punishment_);
  _impl_.regiondelays_.InternalSwap(&other->_impl_.regiondelays_);
  _impl_.passporttypeids_.InternalSwap(&other->_impl_.passporttypeids_);
  _impl_.tickets_.InternalSwap(&other->_impl_.tickets_);
  _impl_.currencys_.InternalSwap(&other->_impl_.currencys_);
  _impl_.psblockedusers_.InternalSwap(&other->_impl_.psblockedusers_);
  _impl_.chesslist_.InternalSwap(&other->_impl_.chesslist_);
  _impl_.skinsuitid_.InternalSwap(&other->_impl_.skinsuitid_);
  _impl_.chessskindata_.InternalSwap(&other->_impl_.chessskindata_);
  _impl_.skindata_.InternalSwap(&other->_impl_.skindata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.usrname_, lhs_arena,
      &other->_impl_.usrname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.apkversion_, lhs_arena,
      &other->_impl_.apkversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pvpresourceversion_, lhs_arena,
      &other->_impl_.pvpresourceversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.devicetype_, lhs_arena,
      &other->_impl_.devicetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channelusrid_, lhs_arena,
      &other->_impl_.channelusrid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.teamvoiceid_, lhs_arena,
      &other->_impl_.teamvoiceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.picurl_, lhs_arena,
      &other->_impl_.picurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cupnamechina_, lhs_arena,
      &other->_impl_.cupnamechina_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cupiconurl_, lhs_arena,
      &other->_impl_.cupiconurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pvpservergroup_, lhs_arena,
      &other->_impl_.pvpservergroup_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.teamvoiceuserid_, lhs_arena,
      &other->_impl_.teamvoiceuserid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.packagename_, lhs_arena,
      &other->_impl_.packagename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdkcountry_, lhs_arena,
      &other->_impl_.sdkcountry_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.guildname_, lhs_arena,
      &other->_impl_.guildname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channelid_, lhs_arena,
      &other->_impl_.channelid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mentorid_, lhs_arena,
      &other->_impl_.mentorid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PvpPlayerData, _impl_.exchangestate_)
      + sizeof(PvpPlayerData::_impl_.exchangestate_)
      - PROTOBUF_FIELD_OFFSET(PvpPlayerData, _impl_.emotionlist_)>(
          reinterpret_cast<char*>(&_impl_.emotionlist_),
          reinterpret_cast<char*>(&other->_impl_.emotionlist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PvpPlayerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[45]);
}

// ===================================================================

class PvpData::_Internal {
 public:
  static const ::msg::PveDataInfo& pve(const PvpData* msg);
  static const ::msg::CardGroupData& cardgroup(const PvpData* msg);
  static const ::msg::TowerDefenseData& towerdefense(const PvpData* msg);
};

const ::msg::PveDataInfo&
PvpData::_Internal::pve(const PvpData* msg) {
  return *msg->_impl_.pve_;
}
const ::msg::CardGroupData&
PvpData::_Internal::cardgroup(const PvpData* msg) {
  return *msg->_impl_.cardgroup_;
}
const ::msg::TowerDefenseData&
PvpData::_Internal::towerdefense(const PvpData* msg) {
  return *msg->_impl_.towerdefense_;
}
PvpData::PvpData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PvpData)
}
PvpData::PvpData(const PvpData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PvpData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pve_){nullptr}
    , decltype(_impl_.cardgroup_){nullptr}
    , decltype(_impl_.towerdefense_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pve()) {
    _this->_impl_.pve_ = new ::msg::PveDataInfo(*from._impl_.pve_);
  }
  if (from._internal_has_cardgroup()) {
    _this->_impl_.cardgroup_ = new ::msg::CardGroupData(*from._impl_.cardgroup_);
  }
  if (from._internal_has_towerdefense()) {
    _this->_impl_.towerdefense_ = new ::msg::TowerDefenseData(*from._impl_.towerdefense_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.PvpData)
}

inline void PvpData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pve_){nullptr}
    , decltype(_impl_.cardgroup_){nullptr}
    , decltype(_impl_.towerdefense_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PvpData::~PvpData() {
  // @@protoc_insertion_point(destructor:msg.PvpData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PvpData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pve_;
  if (this != internal_default_instance()) delete _impl_.cardgroup_;
  if (this != internal_default_instance()) delete _impl_.towerdefense_;
}

void PvpData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PvpData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PvpData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pve_ != nullptr) {
    delete _impl_.pve_;
  }
  _impl_.pve_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cardgroup_ != nullptr) {
    delete _impl_.cardgroup_;
  }
  _impl_.cardgroup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.towerdefense_ != nullptr) {
    delete _impl_.towerdefense_;
  }
  _impl_.towerdefense_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PvpData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.PveDataInfo Pve = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CardGroupData CardGroup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardgroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TowerDefenseData TowerDefense = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_towerdefense(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PvpData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PvpData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.PveDataInfo Pve = 1;
  if (this->_internal_has_pve()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pve(this),
        _Internal::pve(this).GetCachedSize(), target, stream);
  }

  // .msg.CardGroupData CardGroup = 2;
  if (this->_internal_has_cardgroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cardgroup(this),
        _Internal::cardgroup(this).GetCachedSize(), target, stream);
  }

  // .msg.TowerDefenseData TowerDefense = 3;
  if (this->_internal_has_towerdefense()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::towerdefense(this),
        _Internal::towerdefense(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PvpData)
  return target;
}

size_t PvpData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PvpData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PveDataInfo Pve = 1;
  if (this->_internal_has_pve()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pve_);
  }

  // .msg.CardGroupData CardGroup = 2;
  if (this->_internal_has_cardgroup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cardgroup_);
  }

  // .msg.TowerDefenseData TowerDefense = 3;
  if (this->_internal_has_towerdefense()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.towerdefense_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PvpData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PvpData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PvpData::GetClassData() const { return &_class_data_; }


void PvpData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PvpData*>(&to_msg);
  auto& from = static_cast<const PvpData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PvpData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pve()) {
    _this->_internal_mutable_pve()->::msg::PveDataInfo::MergeFrom(
        from._internal_pve());
  }
  if (from._internal_has_cardgroup()) {
    _this->_internal_mutable_cardgroup()->::msg::CardGroupData::MergeFrom(
        from._internal_cardgroup());
  }
  if (from._internal_has_towerdefense()) {
    _this->_internal_mutable_towerdefense()->::msg::TowerDefenseData::MergeFrom(
        from._internal_towerdefense());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PvpData::CopyFrom(const PvpData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PvpData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpData::IsInitialized() const {
  return true;
}

void PvpData::InternalSwap(PvpData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PvpData, _impl_.towerdefense_)
      + sizeof(PvpData::_impl_.towerdefense_)
      - PROTOBUF_FIELD_OFFSET(PvpData, _impl_.pve_)>(
          reinterpret_cast<char*>(&_impl_.pve_),
          reinterpret_cast<char*>(&other->_impl_.pve_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PvpData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[46]);
}

// ===================================================================

class TDCardGroup::_Internal {
 public:
};

TDCardGroup::TDCardGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDCardGroup)
}
TDCardGroup::TDCardGroup(const TDCardGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDCardGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.TDCardGroup)
}

inline void TDCardGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDCardGroup::~TDCardGroup() {
  // @@protoc_insertion_point(destructor:msg.TDCardGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDCardGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedField();
}

void TDCardGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDCardGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDCardGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDCardGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 Ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDCardGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDCardGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 Ids = 1;
  {
    int byte_size = _impl_._ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDCardGroup)
  return target;
}

size_t TDCardGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDCardGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDCardGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDCardGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDCardGroup::GetClassData() const { return &_class_data_; }


void TDCardGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDCardGroup*>(&to_msg);
  auto& from = static_cast<const TDCardGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDCardGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDCardGroup::CopyFrom(const TDCardGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDCardGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDCardGroup::IsInitialized() const {
  return true;
}

void TDCardGroup::InternalSwap(TDCardGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TDCardGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[47]);
}

// ===================================================================

class TDCardGroups::_Internal {
 public:
  static const ::msg::TDCardGroup& chessboard(const TDCardGroups* msg);
  static const ::msg::TDCardGroup& chessplayer(const TDCardGroups* msg);
  static const ::msg::TDCardGroup& chessman(const TDCardGroups* msg);
};

const ::msg::TDCardGroup&
TDCardGroups::_Internal::chessboard(const TDCardGroups* msg) {
  return *msg->_impl_.chessboard_;
}
const ::msg::TDCardGroup&
TDCardGroups::_Internal::chessplayer(const TDCardGroups* msg) {
  return *msg->_impl_.chessplayer_;
}
const ::msg::TDCardGroup&
TDCardGroups::_Internal::chessman(const TDCardGroups* msg) {
  return *msg->_impl_.chessman_;
}
TDCardGroups::TDCardGroups(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDCardGroups)
}
TDCardGroups::TDCardGroups(const TDCardGroups& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDCardGroups* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chessboard_){nullptr}
    , decltype(_impl_.chessplayer_){nullptr}
    , decltype(_impl_.chessman_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chessboard()) {
    _this->_impl_.chessboard_ = new ::msg::TDCardGroup(*from._impl_.chessboard_);
  }
  if (from._internal_has_chessplayer()) {
    _this->_impl_.chessplayer_ = new ::msg::TDCardGroup(*from._impl_.chessplayer_);
  }
  if (from._internal_has_chessman()) {
    _this->_impl_.chessman_ = new ::msg::TDCardGroup(*from._impl_.chessman_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.TDCardGroups)
}

inline void TDCardGroups::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chessboard_){nullptr}
    , decltype(_impl_.chessplayer_){nullptr}
    , decltype(_impl_.chessman_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDCardGroups::~TDCardGroups() {
  // @@protoc_insertion_point(destructor:msg.TDCardGroups)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDCardGroups::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.chessboard_;
  if (this != internal_default_instance()) delete _impl_.chessplayer_;
  if (this != internal_default_instance()) delete _impl_.chessman_;
}

void TDCardGroups::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDCardGroups::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDCardGroups)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.chessboard_ != nullptr) {
    delete _impl_.chessboard_;
  }
  _impl_.chessboard_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chessplayer_ != nullptr) {
    delete _impl_.chessplayer_;
  }
  _impl_.chessplayer_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.chessman_ != nullptr) {
    delete _impl_.chessman_;
  }
  _impl_.chessman_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDCardGroups::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.TDCardGroup ChessBoard = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chessboard(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TDCardGroup ChessPlayer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chessplayer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TDCardGroup ChessMan = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chessman(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDCardGroups::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDCardGroups)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.TDCardGroup ChessBoard = 1;
  if (this->_internal_has_chessboard()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chessboard(this),
        _Internal::chessboard(this).GetCachedSize(), target, stream);
  }

  // .msg.TDCardGroup ChessPlayer = 2;
  if (this->_internal_has_chessplayer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::chessplayer(this),
        _Internal::chessplayer(this).GetCachedSize(), target, stream);
  }

  // .msg.TDCardGroup ChessMan = 3;
  if (this->_internal_has_chessman()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::chessman(this),
        _Internal::chessman(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDCardGroups)
  return target;
}

size_t TDCardGroups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDCardGroups)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.TDCardGroup ChessBoard = 1;
  if (this->_internal_has_chessboard()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chessboard_);
  }

  // .msg.TDCardGroup ChessPlayer = 2;
  if (this->_internal_has_chessplayer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chessplayer_);
  }

  // .msg.TDCardGroup ChessMan = 3;
  if (this->_internal_has_chessman()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chessman_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDCardGroups::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDCardGroups::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDCardGroups::GetClassData() const { return &_class_data_; }


void TDCardGroups::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDCardGroups*>(&to_msg);
  auto& from = static_cast<const TDCardGroups&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDCardGroups)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chessboard()) {
    _this->_internal_mutable_chessboard()->::msg::TDCardGroup::MergeFrom(
        from._internal_chessboard());
  }
  if (from._internal_has_chessplayer()) {
    _this->_internal_mutable_chessplayer()->::msg::TDCardGroup::MergeFrom(
        from._internal_chessplayer());
  }
  if (from._internal_has_chessman()) {
    _this->_internal_mutable_chessman()->::msg::TDCardGroup::MergeFrom(
        from._internal_chessman());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDCardGroups::CopyFrom(const TDCardGroups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDCardGroups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDCardGroups::IsInitialized() const {
  return true;
}

void TDCardGroups::InternalSwap(TDCardGroups* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TDCardGroups, _impl_.chessman_)
      + sizeof(TDCardGroups::_impl_.chessman_)
      - PROTOBUF_FIELD_OFFSET(TDCardGroups, _impl_.chessboard_)>(
          reinterpret_cast<char*>(&_impl_.chessboard_),
          reinterpret_cast<char*>(&other->_impl_.chessboard_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TDCardGroups::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[48]);
}

// ===================================================================

TDItemGroup_ItemsEntry_DoNotUse::TDItemGroup_ItemsEntry_DoNotUse() {}
TDItemGroup_ItemsEntry_DoNotUse::TDItemGroup_ItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TDItemGroup_ItemsEntry_DoNotUse::MergeFrom(const TDItemGroup_ItemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TDItemGroup_ItemsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[49]);
}

// ===================================================================

class TDItemGroup::_Internal {
 public:
  static const ::msg::TDCardGroups& cardgroups(const TDItemGroup* msg);
};

const ::msg::TDCardGroups&
TDItemGroup::_Internal::cardgroups(const TDItemGroup* msg) {
  return *msg->_impl_.cardgroups_;
}
TDItemGroup::TDItemGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TDItemGroup::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.TDItemGroup)
}
TDItemGroup::TDItemGroup(const TDItemGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDItemGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.items_)*/{}
    , decltype(_impl_.cardgroups_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_cardgroups()) {
    _this->_impl_.cardgroups_ = new ::msg::TDCardGroups(*from._impl_.cardgroups_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.TDItemGroup)
}

inline void TDItemGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.items_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.cardgroups_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDItemGroup::~TDItemGroup() {
  // @@protoc_insertion_point(destructor:msg.TDItemGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TDItemGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.Destruct();
  _impl_.items_.~MapField();
  if (this != internal_default_instance()) delete _impl_.cardgroups_;
}

void TDItemGroup::ArenaDtor(void* object) {
  TDItemGroup* _this = reinterpret_cast< TDItemGroup* >(object);
  _this->_impl_.items_.Destruct();
}
void TDItemGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDItemGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDItemGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.cardgroups_ != nullptr) {
    delete _impl_.cardgroups_;
  }
  _impl_.cardgroups_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDItemGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.TDCardGroups CardGroups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardgroups(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<int32, .msg.TDItem> Items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.items_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDItemGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDItemGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.TDCardGroups CardGroups = 1;
  if (this->_internal_has_cardgroups()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cardgroups(this),
        _Internal::cardgroups(this).GetCachedSize(), target, stream);
  }

  // map<int32, .msg.TDItem> Items = 2;
  if (!this->_internal_items().empty()) {
    using MapType = ::_pb::Map<int32_t, ::msg::TDItem>;
    using WireHelper = TDItemGroup_ItemsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_items();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDItemGroup)
  return target;
}

size_t TDItemGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDItemGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .msg.TDItem> Items = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_items_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::msg::TDItem >::const_iterator
      it = this->_internal_items().begin();
      it != this->_internal_items().end(); ++it) {
    total_size += TDItemGroup_ItemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .msg.TDCardGroups CardGroups = 1;
  if (this->_internal_has_cardgroups()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cardgroups_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDItemGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDItemGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDItemGroup::GetClassData() const { return &_class_data_; }


void TDItemGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDItemGroup*>(&to_msg);
  auto& from = static_cast<const TDItemGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDItemGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_cardgroups()) {
    _this->_internal_mutable_cardgroups()->::msg::TDCardGroups::MergeFrom(
        from._internal_cardgroups());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDItemGroup::CopyFrom(const TDItemGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDItemGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDItemGroup::IsInitialized() const {
  return true;
}

void TDItemGroup::InternalSwap(TDItemGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.cardgroups_, other->_impl_.cardgroups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TDItemGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[50]);
}

// ===================================================================

class TowerDefenseData::_Internal {
 public:
  static const ::msg::TDItemGroup& itemgroup(const TowerDefenseData* msg);
};

const ::msg::TDItemGroup&
TowerDefenseData::_Internal::itemgroup(const TowerDefenseData* msg) {
  return *msg->_impl_.itemgroup_;
}
TowerDefenseData::TowerDefenseData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TowerDefenseData)
}
TowerDefenseData::TowerDefenseData(const TowerDefenseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TowerDefenseData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.itemgroup_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_itemgroup()) {
    _this->_impl_.itemgroup_ = new ::msg::TDItemGroup(*from._impl_.itemgroup_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.TowerDefenseData)
}

inline void TowerDefenseData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.itemgroup_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TowerDefenseData::~TowerDefenseData() {
  // @@protoc_insertion_point(destructor:msg.TowerDefenseData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TowerDefenseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.itemgroup_;
}

void TowerDefenseData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TowerDefenseData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TowerDefenseData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.itemgroup_ != nullptr) {
    delete _impl_.itemgroup_;
  }
  _impl_.itemgroup_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TowerDefenseData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.TDItemGroup ItemGroup = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_itemgroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TowerDefenseData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TowerDefenseData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.TDItemGroup ItemGroup = 1;
  if (this->_internal_has_itemgroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::itemgroup(this),
        _Internal::itemgroup(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TowerDefenseData)
  return target;
}

size_t TowerDefenseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TowerDefenseData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.TDItemGroup ItemGroup = 1;
  if (this->_internal_has_itemgroup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.itemgroup_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TowerDefenseData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TowerDefenseData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TowerDefenseData::GetClassData() const { return &_class_data_; }


void TowerDefenseData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TowerDefenseData*>(&to_msg);
  auto& from = static_cast<const TowerDefenseData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TowerDefenseData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_itemgroup()) {
    _this->_internal_mutable_itemgroup()->::msg::TDItemGroup::MergeFrom(
        from._internal_itemgroup());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TowerDefenseData::CopyFrom(const TowerDefenseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TowerDefenseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerDefenseData::IsInitialized() const {
  return true;
}

void TowerDefenseData::InternalSwap(TowerDefenseData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.itemgroup_, other->_impl_.itemgroup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TowerDefenseData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[51]);
}

// ===================================================================

class KernelCardGroup::_Internal {
 public:
};

KernelCardGroup::KernelCardGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.KernelCardGroup)
}
KernelCardGroup::KernelCardGroup(const KernelCardGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KernelCardGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chessids_){from._impl_.chessids_}
    , /*decltype(_impl_._chessids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.KernelCardGroup)
}

inline void KernelCardGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chessids_){arena}
    , /*decltype(_impl_._chessids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KernelCardGroup::~KernelCardGroup() {
  // @@protoc_insertion_point(destructor:msg.KernelCardGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KernelCardGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chessids_.~RepeatedField();
}

void KernelCardGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KernelCardGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.KernelCardGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chessids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KernelCardGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 ChessIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_chessids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_chessids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KernelCardGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.KernelCardGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 ChessIds = 1;
  {
    int byte_size = _impl_._chessids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_chessids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.KernelCardGroup)
  return target;
}

size_t KernelCardGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.KernelCardGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ChessIds = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.chessids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._chessids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KernelCardGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KernelCardGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KernelCardGroup::GetClassData() const { return &_class_data_; }


void KernelCardGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KernelCardGroup*>(&to_msg);
  auto& from = static_cast<const KernelCardGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.KernelCardGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chessids_.MergeFrom(from._impl_.chessids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KernelCardGroup::CopyFrom(const KernelCardGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.KernelCardGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KernelCardGroup::IsInitialized() const {
  return true;
}

void KernelCardGroup::InternalSwap(KernelCardGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chessids_.InternalSwap(&other->_impl_.chessids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KernelCardGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[52]);
}

// ===================================================================

class KernelChessInfo::_Internal {
 public:
};

KernelChessInfo::KernelChessInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.KernelChessInfo)
}
KernelChessInfo::KernelChessInfo(const KernelChessInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KernelChessInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.quantity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.quantity_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.quantity_));
  // @@protoc_insertion_point(copy_constructor:msg.KernelChessInfo)
}

inline void KernelChessInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.quantity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KernelChessInfo::~KernelChessInfo() {
  // @@protoc_insertion_point(destructor:msg.KernelChessInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KernelChessInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KernelChessInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KernelChessInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.KernelChessInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.quantity_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.quantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KernelChessInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Quantity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KernelChessInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.KernelChessInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 Level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // int32 Quantity = 3;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.KernelChessInfo)
  return target;
}

size_t KernelChessInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.KernelChessInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 Level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 Quantity = 3;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KernelChessInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KernelChessInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KernelChessInfo::GetClassData() const { return &_class_data_; }


void KernelChessInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KernelChessInfo*>(&to_msg);
  auto& from = static_cast<const KernelChessInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.KernelChessInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KernelChessInfo::CopyFrom(const KernelChessInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.KernelChessInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KernelChessInfo::IsInitialized() const {
  return true;
}

void KernelChessInfo::InternalSwap(KernelChessInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KernelChessInfo, _impl_.quantity_)
      + sizeof(KernelChessInfo::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(KernelChessInfo, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KernelChessInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[53]);
}

// ===================================================================

class ApplyWorkshopRule::_Internal {
 public:
  static const ::msg::BattleExtData& extdata(const ApplyWorkshopRule* msg);
};

const ::msg::BattleExtData&
ApplyWorkshopRule::_Internal::extdata(const ApplyWorkshopRule* msg) {
  return *msg->_impl_.extdata_;
}
ApplyWorkshopRule::ApplyWorkshopRule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ApplyWorkshopRule)
}
ApplyWorkshopRule::ApplyWorkshopRule(const ApplyWorkshopRule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ApplyWorkshopRule* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extdata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_extdata()) {
    _this->_impl_.extdata_ = new ::msg::BattleExtData(*from._impl_.extdata_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.ApplyWorkshopRule)
}

inline void ApplyWorkshopRule::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extdata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ApplyWorkshopRule::~ApplyWorkshopRule() {
  // @@protoc_insertion_point(destructor:msg.ApplyWorkshopRule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ApplyWorkshopRule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.extdata_;
}

void ApplyWorkshopRule::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ApplyWorkshopRule::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ApplyWorkshopRule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.extdata_ != nullptr) {
    delete _impl_.extdata_;
  }
  _impl_.extdata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyWorkshopRule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.BattleExtData ExtData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_extdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ApplyWorkshopRule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ApplyWorkshopRule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.BattleExtData ExtData = 1;
  if (this->_internal_has_extdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::extdata(this),
        _Internal::extdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ApplyWorkshopRule)
  return target;
}

size_t ApplyWorkshopRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ApplyWorkshopRule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.BattleExtData ExtData = 1;
  if (this->_internal_has_extdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extdata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApplyWorkshopRule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ApplyWorkshopRule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApplyWorkshopRule::GetClassData() const { return &_class_data_; }


void ApplyWorkshopRule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ApplyWorkshopRule*>(&to_msg);
  auto& from = static_cast<const ApplyWorkshopRule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ApplyWorkshopRule)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_extdata()) {
    _this->_internal_mutable_extdata()->::msg::BattleExtData::MergeFrom(
        from._internal_extdata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApplyWorkshopRule::CopyFrom(const ApplyWorkshopRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ApplyWorkshopRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyWorkshopRule::IsInitialized() const {
  return true;
}

void ApplyWorkshopRule::InternalSwap(ApplyWorkshopRule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.extdata_, other->_impl_.extdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyWorkshopRule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[54]);
}

// ===================================================================

class CSDTVisitedMap::_Internal {
 public:
};

CSDTVisitedMap::CSDTVisitedMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTVisitedMap)
}
CSDTVisitedMap::CSDTVisitedMap(const CSDTVisitedMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTVisitedMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.submapid_){}
    , decltype(_impl_.isplaying_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isplaying_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.isplaying_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTVisitedMap)
}

inline void CSDTVisitedMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.mapid_){0u}
    , decltype(_impl_.submapid_){0u}
    , decltype(_impl_.isplaying_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTVisitedMap::~CSDTVisitedMap() {
  // @@protoc_insertion_point(destructor:msg.CSDTVisitedMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTVisitedMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDTVisitedMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTVisitedMap::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTVisitedMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isplaying_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.isplaying_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTVisitedMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 TimeStamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MapID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SubMapID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.submapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsPlaying = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.isplaying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTVisitedMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTVisitedMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 TimeStamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint32 MapID = 2;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mapid(), target);
  }

  // uint32 SubMapID = 3;
  if (this->_internal_submapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_submapid(), target);
  }

  // bool IsPlaying = 4;
  if (this->_internal_isplaying() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_isplaying(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTVisitedMap)
  return target;
}

size_t CSDTVisitedMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTVisitedMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 TimeStamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 MapID = 2;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mapid());
  }

  // uint32 SubMapID = 3;
  if (this->_internal_submapid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_submapid());
  }

  // bool IsPlaying = 4;
  if (this->_internal_isplaying() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTVisitedMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTVisitedMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTVisitedMap::GetClassData() const { return &_class_data_; }


void CSDTVisitedMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTVisitedMap*>(&to_msg);
  auto& from = static_cast<const CSDTVisitedMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTVisitedMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_submapid() != 0) {
    _this->_internal_set_submapid(from._internal_submapid());
  }
  if (from._internal_isplaying() != 0) {
    _this->_internal_set_isplaying(from._internal_isplaying());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTVisitedMap::CopyFrom(const CSDTVisitedMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTVisitedMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTVisitedMap::IsInitialized() const {
  return true;
}

void CSDTVisitedMap::InternalSwap(CSDTVisitedMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTVisitedMap, _impl_.isplaying_)
      + sizeof(CSDTVisitedMap::_impl_.isplaying_)
      - PROTOBUF_FIELD_OFFSET(CSDTVisitedMap, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTVisitedMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[55]);
}

// ===================================================================

VisitedMaps_MapsEntry_DoNotUse::VisitedMaps_MapsEntry_DoNotUse() {}
VisitedMaps_MapsEntry_DoNotUse::VisitedMaps_MapsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VisitedMaps_MapsEntry_DoNotUse::MergeFrom(const VisitedMaps_MapsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VisitedMaps_MapsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[56]);
}

// ===================================================================

class VisitedMaps::_Internal {
 public:
};

VisitedMaps::VisitedMaps(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &VisitedMaps::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.VisitedMaps)
}
VisitedMaps::VisitedMaps(const VisitedMaps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VisitedMaps* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.maps_)*/{}
    , decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.maps_.MergeFrom(from._impl_.maps_);
  _impl_.playerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playerid().empty()) {
    _this->_impl_.playerid_.Set(from._internal_playerid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.VisitedMaps)
}

inline void VisitedMaps::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.maps_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.playerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VisitedMaps::~VisitedMaps() {
  // @@protoc_insertion_point(destructor:msg.VisitedMaps)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void VisitedMaps::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.maps_.Destruct();
  _impl_.maps_.~MapField();
  _impl_.playerid_.Destroy();
}

void VisitedMaps::ArenaDtor(void* object) {
  VisitedMaps* _this = reinterpret_cast< VisitedMaps* >(object);
  _this->_impl_.maps_.Destruct();
}
void VisitedMaps::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VisitedMaps::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.VisitedMaps)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.maps_.Clear();
  _impl_.playerid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisitedMaps::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string PlayerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.VisitedMaps.PlayerID"));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .msg.CSDTVisitedMap> Maps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.maps_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VisitedMaps::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.VisitedMaps)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string PlayerID = 1;
  if (!this->_internal_playerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.VisitedMaps.PlayerID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playerid(), target);
  }

  // map<uint32, .msg.CSDTVisitedMap> Maps = 2;
  if (!this->_internal_maps().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::CSDTVisitedMap>;
    using WireHelper = VisitedMaps_MapsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_maps();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.VisitedMaps)
  return target;
}

size_t VisitedMaps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.VisitedMaps)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .msg.CSDTVisitedMap> Maps = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_maps_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTVisitedMap >::const_iterator
      it = this->_internal_maps().begin();
      it != this->_internal_maps().end(); ++it) {
    total_size += VisitedMaps_MapsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string PlayerID = 1;
  if (!this->_internal_playerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VisitedMaps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VisitedMaps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VisitedMaps::GetClassData() const { return &_class_data_; }


void VisitedMaps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VisitedMaps*>(&to_msg);
  auto& from = static_cast<const VisitedMaps&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.VisitedMaps)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.maps_.MergeFrom(from._impl_.maps_);
  if (!from._internal_playerid().empty()) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VisitedMaps::CopyFrom(const VisitedMaps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.VisitedMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisitedMaps::IsInitialized() const {
  return true;
}

void VisitedMaps::InternalSwap(VisitedMaps* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.maps_.InternalSwap(&other->_impl_.maps_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playerid_, lhs_arena,
      &other->_impl_.playerid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VisitedMaps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[57]);
}

// ===================================================================

class CSDTCurShowItem::_Internal {
 public:
};

CSDTCurShowItem::CSDTCurShowItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTCurShowItem)
}
CSDTCurShowItem::CSDTCurShowItem(const CSDTCurShowItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTCurShowItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instanceid_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instanceid().empty()) {
    _this->_impl_.instanceid_.Set(from._internal_instanceid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:msg.CSDTCurShowItem)
}

inline void CSDTCurShowItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instanceid_){}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTCurShowItem::~CSDTCurShowItem() {
  // @@protoc_insertion_point(destructor:msg.CSDTCurShowItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTCurShowItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instanceid_.Destroy();
}

void CSDTCurShowItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTCurShowItem::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTCurShowItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instanceid_.ClearToEmpty();
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTCurShowItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string InstanceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instanceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTCurShowItem.InstanceId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTCurShowItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTCurShowItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string InstanceId = 2;
  if (!this->_internal_instanceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instanceid().data(), static_cast<int>(this->_internal_instanceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTCurShowItem.InstanceId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instanceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTCurShowItem)
  return target;
}

size_t CSDTCurShowItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTCurShowItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string InstanceId = 2;
  if (!this->_internal_instanceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instanceid());
  }

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTCurShowItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTCurShowItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTCurShowItem::GetClassData() const { return &_class_data_; }


void CSDTCurShowItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTCurShowItem*>(&to_msg);
  auto& from = static_cast<const CSDTCurShowItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTCurShowItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instanceid().empty()) {
    _this->_internal_set_instanceid(from._internal_instanceid());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTCurShowItem::CopyFrom(const CSDTCurShowItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTCurShowItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTCurShowItem::IsInitialized() const {
  return true;
}

void CSDTCurShowItem::InternalSwap(CSDTCurShowItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instanceid_, lhs_arena,
      &other->_impl_.instanceid_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTCurShowItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[58]);
}

// ===================================================================

class CSDTPassportHistory::_Internal {
 public:
};

CSDTPassportHistory::CSDTPassportHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPassportHistory)
}
CSDTPassportHistory::CSDTPassportHistory(const CSDTPassportHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPassportHistory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.season_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPassportHistory)
}

inline void CSDTPassportHistory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.season_){0u}
    , decltype(_impl_.level_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTPassportHistory::~CSDTPassportHistory() {
  // @@protoc_insertion_point(destructor:msg.CSDTPassportHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTPassportHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDTPassportHistory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPassportHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPassportHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPassportHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.PASSPORTTYPE Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::PASSPORTTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 Season = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPassportHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPassportHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.PASSPORTTYPE Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 Season = 2;
  if (this->_internal_season() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_season(), target);
  }

  // uint32 Level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPassportHistory)
  return target;
}

size_t CSDTPassportHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPassportHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PASSPORTTYPE Type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 Season = 2;
  if (this->_internal_season() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_season());
  }

  // uint32 Level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPassportHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPassportHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPassportHistory::GetClassData() const { return &_class_data_; }


void CSDTPassportHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPassportHistory*>(&to_msg);
  auto& from = static_cast<const CSDTPassportHistory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPassportHistory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_season() != 0) {
    _this->_internal_set_season(from._internal_season());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPassportHistory::CopyFrom(const CSDTPassportHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPassportHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPassportHistory::IsInitialized() const {
  return true;
}

void CSDTPassportHistory::InternalSwap(CSDTPassportHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTPassportHistory, _impl_.level_)
      + sizeof(CSDTPassportHistory::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(CSDTPassportHistory, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPassportHistory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[59]);
}

// ===================================================================

class ExchangeRecord::_Internal {
 public:
};

ExchangeRecord::ExchangeRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ExchangeRecord)
}
ExchangeRecord::ExchangeRecord(const ExchangeRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExchangeRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.init_){}
    , decltype(_impl_.balancecount_){}
    , decltype(_impl_.salecount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.init_, &from._impl_.init_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.salecount_) -
    reinterpret_cast<char*>(&_impl_.init_)) + sizeof(_impl_.salecount_));
  // @@protoc_insertion_point(copy_constructor:msg.ExchangeRecord)
}

inline void ExchangeRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.init_){false}
    , decltype(_impl_.balancecount_){0}
    , decltype(_impl_.salecount_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExchangeRecord::~ExchangeRecord() {
  // @@protoc_insertion_point(destructor:msg.ExchangeRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExchangeRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExchangeRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExchangeRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ExchangeRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.init_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.salecount_) -
      reinterpret_cast<char*>(&_impl_.init_)) + sizeof(_impl_.salecount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangeRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Init = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.init_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BalanceCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.balancecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SaleCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.salecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExchangeRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ExchangeRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Init = 1;
  if (this->_internal_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_init(), target);
  }

  // int32 BalanceCount = 2;
  if (this->_internal_balancecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_balancecount(), target);
  }

  // int32 SaleCount = 3;
  if (this->_internal_salecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_salecount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ExchangeRecord)
  return target;
}

size_t ExchangeRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ExchangeRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool Init = 1;
  if (this->_internal_init() != 0) {
    total_size += 1 + 1;
  }

  // int32 BalanceCount = 2;
  if (this->_internal_balancecount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_balancecount());
  }

  // int32 SaleCount = 3;
  if (this->_internal_salecount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_salecount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExchangeRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExchangeRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExchangeRecord::GetClassData() const { return &_class_data_; }


void ExchangeRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExchangeRecord*>(&to_msg);
  auto& from = static_cast<const ExchangeRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ExchangeRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_init() != 0) {
    _this->_internal_set_init(from._internal_init());
  }
  if (from._internal_balancecount() != 0) {
    _this->_internal_set_balancecount(from._internal_balancecount());
  }
  if (from._internal_salecount() != 0) {
    _this->_internal_set_salecount(from._internal_salecount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExchangeRecord::CopyFrom(const ExchangeRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ExchangeRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRecord::IsInitialized() const {
  return true;
}

void ExchangeRecord::InternalSwap(ExchangeRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExchangeRecord, _impl_.salecount_)
      + sizeof(ExchangeRecord::_impl_.salecount_)
      - PROTOBUF_FIELD_OFFSET(ExchangeRecord, _impl_.init_)>(
          reinterpret_cast<char*>(&_impl_.init_),
          reinterpret_cast<char*>(&other->_impl_.init_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangeRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[60]);
}

// ===================================================================

CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse::CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse() {}
CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse::CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse::MergeFrom(const CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[61]);
}

// ===================================================================

CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse::CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse() {}
CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse::CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse::MergeFrom(const CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[62]);
}

// ===================================================================

CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse::CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse() {}
CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse::CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse::MergeFrom(const CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[63]);
}

// ===================================================================

CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse::CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse() {}
CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse::CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse::MergeFrom(const CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[64]);
}

// ===================================================================

class CSDTPlayerBaseInfo::_Internal {
 public:
  static const ::msg::PlayerGuildInfo& guildinfo(const CSDTPlayerBaseInfo* msg);
  static const ::msg::CSDTItem& medal(const CSDTPlayerBaseInfo* msg);
  static const ::msg::CSDTPlayerPvpData& pvpdata(const CSDTPlayerBaseInfo* msg);
  static const ::msg::PlayerMentorShipInfo& mentorshipinfo(const CSDTPlayerBaseInfo* msg);
  static const ::msg::CSDTMentorInfo& mentorinfo(const CSDTPlayerBaseInfo* msg);
  static const ::msg::ExchangeRecord& exchangerecord(const CSDTPlayerBaseInfo* msg);
};

const ::msg::PlayerGuildInfo&
CSDTPlayerBaseInfo::_Internal::guildinfo(const CSDTPlayerBaseInfo* msg) {
  return *msg->_impl_.guildinfo_;
}
const ::msg::CSDTItem&
CSDTPlayerBaseInfo::_Internal::medal(const CSDTPlayerBaseInfo* msg) {
  return *msg->_impl_.medal_;
}
const ::msg::CSDTPlayerPvpData&
CSDTPlayerBaseInfo::_Internal::pvpdata(const CSDTPlayerBaseInfo* msg) {
  return *msg->_impl_.pvpdata_;
}
const ::msg::PlayerMentorShipInfo&
CSDTPlayerBaseInfo::_Internal::mentorshipinfo(const CSDTPlayerBaseInfo* msg) {
  return *msg->_impl_.mentorshipinfo_;
}
const ::msg::CSDTMentorInfo&
CSDTPlayerBaseInfo::_Internal::mentorinfo(const CSDTPlayerBaseInfo* msg) {
  return *msg->_impl_.mentorinfo_;
}
const ::msg::ExchangeRecord&
CSDTPlayerBaseInfo::_Internal::exchangerecord(const CSDTPlayerBaseInfo* msg) {
  return *msg->_impl_.exchangerecord_;
}
CSDTPlayerBaseInfo::CSDTPlayerBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTPlayerBaseInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPlayerBaseInfo)
}
CSDTPlayerBaseInfo::CSDTPlayerBaseInfo(const CSDTPlayerBaseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPlayerBaseInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.pvphistory_)*/{}
    , decltype(_impl_.switchplayerset_){from._impl_.switchplayerset_}
    , /*decltype(_impl_._switchplayerset_cached_byte_size_)*/{0}
    , decltype(_impl_.punishment_){from._impl_.punishment_}
    , decltype(_impl_.passporttypeids_){from._impl_.passporttypeids_}
    , /*decltype(_impl_._passporttypeids_cached_byte_size_)*/{0}
    , /*decltype(_impl_.mvpinfos_)*/{}
    , /*decltype(_impl_.advancepassport_)*/{}
    , /*decltype(_impl_.passportcardnum_)*/{}
    , decltype(_impl_.passporthistory_){from._impl_.passporthistory_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.usrname_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.nativecountry_){}
    , decltype(_impl_.oriregion_){}
    , decltype(_impl_.guildinfo_){nullptr}
    , decltype(_impl_.medal_){nullptr}
    , decltype(_impl_.pvpdata_){nullptr}
    , decltype(_impl_.mentorshipinfo_){nullptr}
    , decltype(_impl_.mentorinfo_){nullptr}
    , decltype(_impl_.exchangerecord_){nullptr}
    , decltype(_impl_.headpic_){}
    , decltype(_impl_.chatbubble_){}
    , decltype(_impl_.mmr_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.exp_){}
    , decltype(_impl_.currankseason_){}
    , decltype(_impl_.historypvpshowpermission_){}
    , decltype(_impl_.headpicframe_){}
    , decltype(_impl_.headpicpendant_){}
    , decltype(_impl_.scene_){}
    , decltype(_impl_.channelviptype_){}
    , decltype(_impl_.launchtype_){}
    , decltype(_impl_.platformtype_){}
    , decltype(_impl_.tmmr_){}
    , decltype(_impl_.passportlevel_){}
    , decltype(_impl_.star_){}
    , decltype(_impl_.lastlogintime_){}
    , decltype(_impl_.resetheadpictime_){}
    , decltype(_impl_.channeltype_){}
    , decltype(_impl_.period_){}
    , decltype(_impl_.province_){}
    , decltype(_impl_.mvpcount_){}
    , decltype(_impl_.observepvpid_){}
    , decltype(_impl_.ps4only_){}
    , decltype(_impl_.restricttype_){}
    , decltype(_impl_.ffmmr_){}
    , decltype(_impl_.exchangestate_){}
    , decltype(_impl_.totalduration_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.pvphistory_.MergeFrom(from._impl_.pvphistory_);
  _this->_impl_.mvpinfos_.MergeFrom(from._impl_.mvpinfos_);
  _this->_impl_.advancepassport_.MergeFrom(from._impl_.advancepassport_);
  _this->_impl_.passportcardnum_.MergeFrom(from._impl_.passportcardnum_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.usrname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.usrname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_usrname().empty()) {
    _this->_impl_.usrname_.Set(from._internal_usrname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channelusrid().empty()) {
    _this->_impl_.channelusrid_.Set(from._internal_channelusrid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nativecountry_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nativecountry_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nativecountry().empty()) {
    _this->_impl_.nativecountry_.Set(from._internal_nativecountry(), 
      _this->GetArenaForAllocation());
  }
  _impl_.oriregion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oriregion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oriregion().empty()) {
    _this->_impl_.oriregion_.Set(from._internal_oriregion(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_guildinfo()) {
    _this->_impl_.guildinfo_ = new ::msg::PlayerGuildInfo(*from._impl_.guildinfo_);
  }
  if (from._internal_has_medal()) {
    _this->_impl_.medal_ = new ::msg::CSDTItem(*from._impl_.medal_);
  }
  if (from._internal_has_pvpdata()) {
    _this->_impl_.pvpdata_ = new ::msg::CSDTPlayerPvpData(*from._impl_.pvpdata_);
  }
  if (from._internal_has_mentorshipinfo()) {
    _this->_impl_.mentorshipinfo_ = new ::msg::PlayerMentorShipInfo(*from._impl_.mentorshipinfo_);
  }
  if (from._internal_has_mentorinfo()) {
    _this->_impl_.mentorinfo_ = new ::msg::CSDTMentorInfo(*from._impl_.mentorinfo_);
  }
  if (from._internal_has_exchangerecord()) {
    _this->_impl_.exchangerecord_ = new ::msg::ExchangeRecord(*from._impl_.exchangerecord_);
  }
  ::memcpy(&_impl_.headpic_, &from._impl_.headpic_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.totalduration_) -
    reinterpret_cast<char*>(&_impl_.headpic_)) + sizeof(_impl_.totalduration_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPlayerBaseInfo)
}

inline void CSDTPlayerBaseInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.pvphistory_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.switchplayerset_){arena}
    , /*decltype(_impl_._switchplayerset_cached_byte_size_)*/{0}
    , decltype(_impl_.punishment_){arena}
    , decltype(_impl_.passporttypeids_){arena}
    , /*decltype(_impl_._passporttypeids_cached_byte_size_)*/{0}
    , /*decltype(_impl_.mvpinfos_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.advancepassport_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.passportcardnum_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.passporthistory_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.usrname_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.nativecountry_){}
    , decltype(_impl_.oriregion_){}
    , decltype(_impl_.guildinfo_){nullptr}
    , decltype(_impl_.medal_){nullptr}
    , decltype(_impl_.pvpdata_){nullptr}
    , decltype(_impl_.mentorshipinfo_){nullptr}
    , decltype(_impl_.mentorinfo_){nullptr}
    , decltype(_impl_.exchangerecord_){nullptr}
    , decltype(_impl_.headpic_){0u}
    , decltype(_impl_.chatbubble_){0u}
    , decltype(_impl_.mmr_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.exp_){0u}
    , decltype(_impl_.currankseason_){0u}
    , decltype(_impl_.historypvpshowpermission_){0}
    , decltype(_impl_.headpicframe_){0u}
    , decltype(_impl_.headpicpendant_){0u}
    , decltype(_impl_.scene_){0u}
    , decltype(_impl_.channelviptype_){0}
    , decltype(_impl_.launchtype_){0}
    , decltype(_impl_.platformtype_){0}
    , decltype(_impl_.tmmr_){0u}
    , decltype(_impl_.passportlevel_){0u}
    , decltype(_impl_.star_){0u}
    , decltype(_impl_.lastlogintime_){int64_t{0}}
    , decltype(_impl_.resetheadpictime_){int64_t{0}}
    , decltype(_impl_.channeltype_){0}
    , decltype(_impl_.period_){0u}
    , decltype(_impl_.province_){0u}
    , decltype(_impl_.mvpcount_){0u}
    , decltype(_impl_.observepvpid_){uint64_t{0u}}
    , decltype(_impl_.ps4only_){false}
    , decltype(_impl_.restricttype_){0}
    , decltype(_impl_.ffmmr_){0u}
    , decltype(_impl_.exchangestate_){0}
    , decltype(_impl_.totalduration_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.usrname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.usrname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nativecountry_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nativecountry_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oriregion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oriregion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTPlayerBaseInfo::~CSDTPlayerBaseInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTPlayerBaseInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTPlayerBaseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pvphistory_.Destruct();
  _impl_.pvphistory_.~MapField();
  _impl_.switchplayerset_.~RepeatedField();
  _impl_.punishment_.~RepeatedPtrField();
  _impl_.passporttypeids_.~RepeatedField();
  _impl_.mvpinfos_.Destruct();
  _impl_.mvpinfos_.~MapField();
  _impl_.advancepassport_.Destruct();
  _impl_.advancepassport_.~MapField();
  _impl_.passportcardnum_.Destruct();
  _impl_.passportcardnum_.~MapField();
  _impl_.passporthistory_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.usrname_.Destroy();
  _impl_.channelusrid_.Destroy();
  _impl_.country_.Destroy();
  _impl_.nativecountry_.Destroy();
  _impl_.oriregion_.Destroy();
  if (this != internal_default_instance()) delete _impl_.guildinfo_;
  if (this != internal_default_instance()) delete _impl_.medal_;
  if (this != internal_default_instance()) delete _impl_.pvpdata_;
  if (this != internal_default_instance()) delete _impl_.mentorshipinfo_;
  if (this != internal_default_instance()) delete _impl_.mentorinfo_;
  if (this != internal_default_instance()) delete _impl_.exchangerecord_;
}

void CSDTPlayerBaseInfo::ArenaDtor(void* object) {
  CSDTPlayerBaseInfo* _this = reinterpret_cast< CSDTPlayerBaseInfo* >(object);
  _this->_impl_.pvphistory_.Destruct();
  _this->_impl_.mvpinfos_.Destruct();
  _this->_impl_.advancepassport_.Destruct();
  _this->_impl_.passportcardnum_.Destruct();
}
void CSDTPlayerBaseInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPlayerBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPlayerBaseInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pvphistory_.Clear();
  _impl_.switchplayerset_.Clear();
  _impl_.punishment_.Clear();
  _impl_.passporttypeids_.Clear();
  _impl_.mvpinfos_.Clear();
  _impl_.advancepassport_.Clear();
  _impl_.passportcardnum_.Clear();
  _impl_.passporthistory_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.usrname_.ClearToEmpty();
  _impl_.channelusrid_.ClearToEmpty();
  _impl_.country_.ClearToEmpty();
  _impl_.nativecountry_.ClearToEmpty();
  _impl_.oriregion_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.guildinfo_ != nullptr) {
    delete _impl_.guildinfo_;
  }
  _impl_.guildinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.medal_ != nullptr) {
    delete _impl_.medal_;
  }
  _impl_.medal_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pvpdata_ != nullptr) {
    delete _impl_.pvpdata_;
  }
  _impl_.pvpdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorshipinfo_ != nullptr) {
    delete _impl_.mentorshipinfo_;
  }
  _impl_.mentorshipinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mentorinfo_ != nullptr) {
    delete _impl_.mentorinfo_;
  }
  _impl_.mentorinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.exchangerecord_ != nullptr) {
    delete _impl_.exchangerecord_;
  }
  _impl_.exchangerecord_ = nullptr;
  ::memset(&_impl_.headpic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.totalduration_) -
      reinterpret_cast<char*>(&_impl_.headpic_)) + sizeof(_impl_.totalduration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPlayerBaseInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPlayerBaseInfo.Id"));
        } else
          goto handle_unusual;
        continue;
      // string UsrName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_usrname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPlayerBaseInfo.UsrName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.headpic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ChatBubble = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.chatbubble_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MMR = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Exp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 CurRankSeason = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.currankseason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.HISTORYPVPSHOWPERMISSION HistoryPvpShowPermission = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_historypvpshowpermission(static_cast<::msg::HISTORYPVPSHOWPERMISSION>(val));
        } else
          goto handle_unusual;
        continue;
      // map<uint64, string> PvpHistory = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.pvphistory_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPicFrame = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.headpicframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPicPendant = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.headpicpendant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Scene = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.scene_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ChannelUsrId = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_channelusrid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPlayerBaseInfo.ChannelUsrId"));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.SWITCHTYPE SwitchPlayerSet = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_switchplayerset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 120) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_switchplayerset(static_cast<::msg::SWITCHTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.CHANNELVIPTYPE ChannelVipType = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channelviptype(static_cast<::msg::CHANNELVIPTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.LAUNCHTYPE LaunchType = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_launchtype(static_cast<::msg::LAUNCHTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.PLATFORMTYPE PlatFormType = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platformtype(static_cast<::msg::PLATFORMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 TMMR = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.tmmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PassportLevel = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.passportlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Star = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.star_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Country = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPlayerBaseInfo.Country"));
        } else
          goto handle_unusual;
        continue;
      // int64 LastLoginTime = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.lastlogintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string NativeCountry = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_nativecountry();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPlayerBaseInfo.NativeCountry"));
        } else
          goto handle_unusual;
        continue;
      // .msg.CHANELTYPE ChannelType = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channeltype(static_cast<::msg::CHANELTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 ResetHeadPicTime = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.resetheadpictime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CSDTPunishment Punishment = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_punishment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 Period = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Province = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.province_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MvpCount = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.mvpcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 PassportTypeIds = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_passporttypeids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 248) {
          _internal_add_passporttypeids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> MvpInfos = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.mvpinfos_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 ObservePvpId = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.observepvpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Ps4Only = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ps4only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.UserRestrictType RestrictType = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_restricttype(static_cast<::msg::UserRestrictType>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.PlayerGuildInfo GuildInfo = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTItem medal = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_medal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string OriRegion = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_oriregion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPlayerBaseInfo.OriRegion"));
        } else
          goto handle_unusual;
        continue;
      // uint32 FFMMR = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.ffmmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .msg.CSDTPassportCard> AdvancePassport = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.advancepassport_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<346>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, uint32> PassportCardNum = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.passportcardnum_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<354>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTPlayerPvpData PvpData = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PlayerMentorShipInfo MentorShipInfo = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorshipinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 TotalDuration = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.totalduration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTMentorInfo MentorInfo = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_mentorinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.EXCHANGESTATE ExchangeState = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_exchangestate(static_cast<::msg::EXCHANGESTATE>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CSDTPassportHistory PassportHistory = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_passporthistory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .msg.ExchangeRecord ExchangeRecord = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchangerecord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPlayerBaseInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPlayerBaseInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPlayerBaseInfo.Id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string UsrName = 2;
  if (!this->_internal_usrname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usrname().data(), static_cast<int>(this->_internal_usrname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPlayerBaseInfo.UsrName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_usrname(), target);
  }

  // uint32 HeadPic = 3;
  if (this->_internal_headpic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_headpic(), target);
  }

  // uint32 ChatBubble = 4;
  if (this->_internal_chatbubble() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_chatbubble(), target);
  }

  // uint32 MMR = 5;
  if (this->_internal_mmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_mmr(), target);
  }

  // uint32 Level = 6;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  // uint32 Exp = 7;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_exp(), target);
  }

  // uint32 CurRankSeason = 8;
  if (this->_internal_currankseason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_currankseason(), target);
  }

  // .msg.HISTORYPVPSHOWPERMISSION HistoryPvpShowPermission = 9;
  if (this->_internal_historypvpshowpermission() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_historypvpshowpermission(), target);
  }

  // map<uint64, string> PvpHistory = 10;
  if (!this->_internal_pvphistory().empty()) {
    using MapType = ::_pb::Map<uint64_t, std::string>;
    using WireHelper = CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_pvphistory();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.CSDTPlayerBaseInfo.PvpHistoryEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // uint32 HeadPicFrame = 11;
  if (this->_internal_headpicframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_headpicframe(), target);
  }

  // uint32 HeadPicPendant = 12;
  if (this->_internal_headpicpendant() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_headpicpendant(), target);
  }

  // uint32 Scene = 13;
  if (this->_internal_scene() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_scene(), target);
  }

  // string ChannelUsrId = 14;
  if (!this->_internal_channelusrid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelusrid().data(), static_cast<int>(this->_internal_channelusrid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPlayerBaseInfo.ChannelUsrId");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_channelusrid(), target);
  }

  // repeated .msg.SWITCHTYPE SwitchPlayerSet = 15;
  {
    int byte_size = _impl_._switchplayerset_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          15, _impl_.switchplayerset_, byte_size, target);
    }
  }

  // .msg.CHANNELVIPTYPE ChannelVipType = 16;
  if (this->_internal_channelviptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      16, this->_internal_channelviptype(), target);
  }

  // .msg.LAUNCHTYPE LaunchType = 17;
  if (this->_internal_launchtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_launchtype(), target);
  }

  // .msg.PLATFORMTYPE PlatFormType = 18;
  if (this->_internal_platformtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_platformtype(), target);
  }

  // uint32 TMMR = 19;
  if (this->_internal_tmmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_tmmr(), target);
  }

  // uint32 PassportLevel = 20;
  if (this->_internal_passportlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_passportlevel(), target);
  }

  // uint32 Star = 21;
  if (this->_internal_star() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_star(), target);
  }

  // string Country = 22;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPlayerBaseInfo.Country");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_country(), target);
  }

  // int64 LastLoginTime = 23;
  if (this->_internal_lastlogintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(23, this->_internal_lastlogintime(), target);
  }

  // string NativeCountry = 24;
  if (!this->_internal_nativecountry().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nativecountry().data(), static_cast<int>(this->_internal_nativecountry().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPlayerBaseInfo.NativeCountry");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_nativecountry(), target);
  }

  // .msg.CHANELTYPE ChannelType = 25;
  if (this->_internal_channeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      25, this->_internal_channeltype(), target);
  }

  // int64 ResetHeadPicTime = 26;
  if (this->_internal_resetheadpictime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(26, this->_internal_resetheadpictime(), target);
  }

  // repeated .msg.CSDTPunishment Punishment = 27;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_punishment_size()); i < n; i++) {
    const auto& repfield = this->_internal_punishment(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(27, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 Period = 28;
  if (this->_internal_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_period(), target);
  }

  // uint32 Province = 29;
  if (this->_internal_province() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_province(), target);
  }

  // uint32 MvpCount = 30;
  if (this->_internal_mvpcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_mvpcount(), target);
  }

  // repeated uint32 PassportTypeIds = 31;
  {
    int byte_size = _impl_._passporttypeids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          31, _internal_passporttypeids(), byte_size, target);
    }
  }

  // map<uint32, uint32> MvpInfos = 32;
  if (!this->_internal_mvpinfos().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_mvpinfos();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(32, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(32, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint64 ObservePvpId = 33;
  if (this->_internal_observepvpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(33, this->_internal_observepvpid(), target);
  }

  // bool Ps4Only = 34;
  if (this->_internal_ps4only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_ps4only(), target);
  }

  // .msg.UserRestrictType RestrictType = 35;
  if (this->_internal_restricttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      35, this->_internal_restricttype(), target);
  }

  // .msg.PlayerGuildInfo GuildInfo = 36;
  if (this->_internal_has_guildinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::guildinfo(this),
        _Internal::guildinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSDTItem medal = 37;
  if (this->_internal_has_medal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::medal(this),
        _Internal::medal(this).GetCachedSize(), target, stream);
  }

  // string OriRegion = 38;
  if (!this->_internal_oriregion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oriregion().data(), static_cast<int>(this->_internal_oriregion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPlayerBaseInfo.OriRegion");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_oriregion(), target);
  }

  // uint32 FFMMR = 39;
  if (this->_internal_ffmmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(39, this->_internal_ffmmr(), target);
  }

  // map<string, .msg.CSDTPassportCard> AdvancePassport = 43;
  if (!this->_internal_advancepassport().empty()) {
    using MapType = ::_pb::Map<std::string, ::msg::CSDTPassportCard>;
    using WireHelper = CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_advancepassport();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.CSDTPlayerBaseInfo.AdvancePassportEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(43, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(43, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, uint32> PassportCardNum = 44;
  if (!this->_internal_passportcardnum().empty()) {
    using MapType = ::_pb::Map<std::string, uint32_t>;
    using WireHelper = CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_passportcardnum();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.CSDTPlayerBaseInfo.PassportCardNumEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(44, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(44, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .msg.CSDTPlayerPvpData PvpData = 45;
  if (this->_internal_has_pvpdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, _Internal::pvpdata(this),
        _Internal::pvpdata(this).GetCachedSize(), target, stream);
  }

  // .msg.PlayerMentorShipInfo MentorShipInfo = 46;
  if (this->_internal_has_mentorshipinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, _Internal::mentorshipinfo(this),
        _Internal::mentorshipinfo(this).GetCachedSize(), target, stream);
  }

  // int64 TotalDuration = 47;
  if (this->_internal_totalduration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(47, this->_internal_totalduration(), target);
  }

  // .msg.CSDTMentorInfo MentorInfo = 48;
  if (this->_internal_has_mentorinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, _Internal::mentorinfo(this),
        _Internal::mentorinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.EXCHANGESTATE ExchangeState = 49;
  if (this->_internal_exchangestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      49, this->_internal_exchangestate(), target);
  }

  // repeated .msg.CSDTPassportHistory PassportHistory = 50;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_passporthistory_size()); i < n; i++) {
    const auto& repfield = this->_internal_passporthistory(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(50, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .msg.ExchangeRecord ExchangeRecord = 51;
  if (this->_internal_has_exchangerecord()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, _Internal::exchangerecord(this),
        _Internal::exchangerecord(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPlayerBaseInfo)
  return target;
}

size_t CSDTPlayerBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPlayerBaseInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, string> PvpHistory = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pvphistory_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, std::string >::const_iterator
      it = this->_internal_pvphistory().begin();
      it != this->_internal_pvphistory().end(); ++it) {
    total_size += CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .msg.SWITCHTYPE SwitchPlayerSet = 15;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_switchplayerset_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_switchplayerset(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._switchplayerset_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .msg.CSDTPunishment Punishment = 27;
  total_size += 2UL * this->_internal_punishment_size();
  for (const auto& msg : this->_impl_.punishment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 PassportTypeIds = 31;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.passporttypeids_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._passporttypeids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<uint32, uint32> MvpInfos = 32;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mvpinfos_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_mvpinfos().begin();
      it != this->_internal_mvpinfos().end(); ++it) {
    total_size += CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .msg.CSDTPassportCard> AdvancePassport = 43;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_advancepassport_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTPassportCard >::const_iterator
      it = this->_internal_advancepassport().begin();
      it != this->_internal_advancepassport().end(); ++it) {
    total_size += CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, uint32> PassportCardNum = 44;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_passportcardnum_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >::const_iterator
      it = this->_internal_passportcardnum().begin();
      it != this->_internal_passportcardnum().end(); ++it) {
    total_size += CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .msg.CSDTPassportHistory PassportHistory = 50;
  total_size += 2UL * this->_internal_passporthistory_size();
  for (const auto& msg : this->_impl_.passporthistory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string UsrName = 2;
  if (!this->_internal_usrname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usrname());
  }

  // string ChannelUsrId = 14;
  if (!this->_internal_channelusrid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelusrid());
  }

  // string Country = 22;
  if (!this->_internal_country().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string NativeCountry = 24;
  if (!this->_internal_nativecountry().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nativecountry());
  }

  // string OriRegion = 38;
  if (!this->_internal_oriregion().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oriregion());
  }

  // .msg.PlayerGuildInfo GuildInfo = 36;
  if (this->_internal_has_guildinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildinfo_);
  }

  // .msg.CSDTItem medal = 37;
  if (this->_internal_has_medal()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.medal_);
  }

  // .msg.CSDTPlayerPvpData PvpData = 45;
  if (this->_internal_has_pvpdata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpdata_);
  }

  // .msg.PlayerMentorShipInfo MentorShipInfo = 46;
  if (this->_internal_has_mentorshipinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorshipinfo_);
  }

  // .msg.CSDTMentorInfo MentorInfo = 48;
  if (this->_internal_has_mentorinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mentorinfo_);
  }

  // .msg.ExchangeRecord ExchangeRecord = 51;
  if (this->_internal_has_exchangerecord()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.exchangerecord_);
  }

  // uint32 HeadPic = 3;
  if (this->_internal_headpic() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpic());
  }

  // uint32 ChatBubble = 4;
  if (this->_internal_chatbubble() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chatbubble());
  }

  // uint32 MMR = 5;
  if (this->_internal_mmr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mmr());
  }

  // uint32 Level = 6;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 Exp = 7;
  if (this->_internal_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_exp());
  }

  // uint32 CurRankSeason = 8;
  if (this->_internal_currankseason() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_currankseason());
  }

  // .msg.HISTORYPVPSHOWPERMISSION HistoryPvpShowPermission = 9;
  if (this->_internal_historypvpshowpermission() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_historypvpshowpermission());
  }

  // uint32 HeadPicFrame = 11;
  if (this->_internal_headpicframe() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpicframe());
  }

  // uint32 HeadPicPendant = 12;
  if (this->_internal_headpicpendant() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpicpendant());
  }

  // uint32 Scene = 13;
  if (this->_internal_scene() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_scene());
  }

  // .msg.CHANNELVIPTYPE ChannelVipType = 16;
  if (this->_internal_channelviptype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_channelviptype());
  }

  // .msg.LAUNCHTYPE LaunchType = 17;
  if (this->_internal_launchtype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_launchtype());
  }

  // .msg.PLATFORMTYPE PlatFormType = 18;
  if (this->_internal_platformtype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_platformtype());
  }

  // uint32 TMMR = 19;
  if (this->_internal_tmmr() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_tmmr());
  }

  // uint32 PassportLevel = 20;
  if (this->_internal_passportlevel() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_passportlevel());
  }

  // uint32 Star = 21;
  if (this->_internal_star() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_star());
  }

  // int64 LastLoginTime = 23;
  if (this->_internal_lastlogintime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_lastlogintime());
  }

  // int64 ResetHeadPicTime = 26;
  if (this->_internal_resetheadpictime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_resetheadpictime());
  }

  // .msg.CHANELTYPE ChannelType = 25;
  if (this->_internal_channeltype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_channeltype());
  }

  // uint32 Period = 28;
  if (this->_internal_period() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_period());
  }

  // uint32 Province = 29;
  if (this->_internal_province() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_province());
  }

  // uint32 MvpCount = 30;
  if (this->_internal_mvpcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_mvpcount());
  }

  // uint64 ObservePvpId = 33;
  if (this->_internal_observepvpid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_observepvpid());
  }

  // bool Ps4Only = 34;
  if (this->_internal_ps4only() != 0) {
    total_size += 2 + 1;
  }

  // .msg.UserRestrictType RestrictType = 35;
  if (this->_internal_restricttype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_restricttype());
  }

  // uint32 FFMMR = 39;
  if (this->_internal_ffmmr() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_ffmmr());
  }

  // .msg.EXCHANGESTATE ExchangeState = 49;
  if (this->_internal_exchangestate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_exchangestate());
  }

  // int64 TotalDuration = 47;
  if (this->_internal_totalduration() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_totalduration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPlayerBaseInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPlayerBaseInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPlayerBaseInfo::GetClassData() const { return &_class_data_; }


void CSDTPlayerBaseInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPlayerBaseInfo*>(&to_msg);
  auto& from = static_cast<const CSDTPlayerBaseInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPlayerBaseInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pvphistory_.MergeFrom(from._impl_.pvphistory_);
  _this->_impl_.switchplayerset_.MergeFrom(from._impl_.switchplayerset_);
  _this->_impl_.punishment_.MergeFrom(from._impl_.punishment_);
  _this->_impl_.passporttypeids_.MergeFrom(from._impl_.passporttypeids_);
  _this->_impl_.mvpinfos_.MergeFrom(from._impl_.mvpinfos_);
  _this->_impl_.advancepassport_.MergeFrom(from._impl_.advancepassport_);
  _this->_impl_.passportcardnum_.MergeFrom(from._impl_.passportcardnum_);
  _this->_impl_.passporthistory_.MergeFrom(from._impl_.passporthistory_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_usrname().empty()) {
    _this->_internal_set_usrname(from._internal_usrname());
  }
  if (!from._internal_channelusrid().empty()) {
    _this->_internal_set_channelusrid(from._internal_channelusrid());
  }
  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (!from._internal_nativecountry().empty()) {
    _this->_internal_set_nativecountry(from._internal_nativecountry());
  }
  if (!from._internal_oriregion().empty()) {
    _this->_internal_set_oriregion(from._internal_oriregion());
  }
  if (from._internal_has_guildinfo()) {
    _this->_internal_mutable_guildinfo()->::msg::PlayerGuildInfo::MergeFrom(
        from._internal_guildinfo());
  }
  if (from._internal_has_medal()) {
    _this->_internal_mutable_medal()->::msg::CSDTItem::MergeFrom(
        from._internal_medal());
  }
  if (from._internal_has_pvpdata()) {
    _this->_internal_mutable_pvpdata()->::msg::CSDTPlayerPvpData::MergeFrom(
        from._internal_pvpdata());
  }
  if (from._internal_has_mentorshipinfo()) {
    _this->_internal_mutable_mentorshipinfo()->::msg::PlayerMentorShipInfo::MergeFrom(
        from._internal_mentorshipinfo());
  }
  if (from._internal_has_mentorinfo()) {
    _this->_internal_mutable_mentorinfo()->::msg::CSDTMentorInfo::MergeFrom(
        from._internal_mentorinfo());
  }
  if (from._internal_has_exchangerecord()) {
    _this->_internal_mutable_exchangerecord()->::msg::ExchangeRecord::MergeFrom(
        from._internal_exchangerecord());
  }
  if (from._internal_headpic() != 0) {
    _this->_internal_set_headpic(from._internal_headpic());
  }
  if (from._internal_chatbubble() != 0) {
    _this->_internal_set_chatbubble(from._internal_chatbubble());
  }
  if (from._internal_mmr() != 0) {
    _this->_internal_set_mmr(from._internal_mmr());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_exp() != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  if (from._internal_currankseason() != 0) {
    _this->_internal_set_currankseason(from._internal_currankseason());
  }
  if (from._internal_historypvpshowpermission() != 0) {
    _this->_internal_set_historypvpshowpermission(from._internal_historypvpshowpermission());
  }
  if (from._internal_headpicframe() != 0) {
    _this->_internal_set_headpicframe(from._internal_headpicframe());
  }
  if (from._internal_headpicpendant() != 0) {
    _this->_internal_set_headpicpendant(from._internal_headpicpendant());
  }
  if (from._internal_scene() != 0) {
    _this->_internal_set_scene(from._internal_scene());
  }
  if (from._internal_channelviptype() != 0) {
    _this->_internal_set_channelviptype(from._internal_channelviptype());
  }
  if (from._internal_launchtype() != 0) {
    _this->_internal_set_launchtype(from._internal_launchtype());
  }
  if (from._internal_platformtype() != 0) {
    _this->_internal_set_platformtype(from._internal_platformtype());
  }
  if (from._internal_tmmr() != 0) {
    _this->_internal_set_tmmr(from._internal_tmmr());
  }
  if (from._internal_passportlevel() != 0) {
    _this->_internal_set_passportlevel(from._internal_passportlevel());
  }
  if (from._internal_star() != 0) {
    _this->_internal_set_star(from._internal_star());
  }
  if (from._internal_lastlogintime() != 0) {
    _this->_internal_set_lastlogintime(from._internal_lastlogintime());
  }
  if (from._internal_resetheadpictime() != 0) {
    _this->_internal_set_resetheadpictime(from._internal_resetheadpictime());
  }
  if (from._internal_channeltype() != 0) {
    _this->_internal_set_channeltype(from._internal_channeltype());
  }
  if (from._internal_period() != 0) {
    _this->_internal_set_period(from._internal_period());
  }
  if (from._internal_province() != 0) {
    _this->_internal_set_province(from._internal_province());
  }
  if (from._internal_mvpcount() != 0) {
    _this->_internal_set_mvpcount(from._internal_mvpcount());
  }
  if (from._internal_observepvpid() != 0) {
    _this->_internal_set_observepvpid(from._internal_observepvpid());
  }
  if (from._internal_ps4only() != 0) {
    _this->_internal_set_ps4only(from._internal_ps4only());
  }
  if (from._internal_restricttype() != 0) {
    _this->_internal_set_restricttype(from._internal_restricttype());
  }
  if (from._internal_ffmmr() != 0) {
    _this->_internal_set_ffmmr(from._internal_ffmmr());
  }
  if (from._internal_exchangestate() != 0) {
    _this->_internal_set_exchangestate(from._internal_exchangestate());
  }
  if (from._internal_totalduration() != 0) {
    _this->_internal_set_totalduration(from._internal_totalduration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPlayerBaseInfo::CopyFrom(const CSDTPlayerBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPlayerBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPlayerBaseInfo::IsInitialized() const {
  return true;
}

void CSDTPlayerBaseInfo::InternalSwap(CSDTPlayerBaseInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pvphistory_.InternalSwap(&other->_impl_.pvphistory_);
  _impl_.switchplayerset_.InternalSwap(&other->_impl_.switchplayerset_);
  _impl_.punishment_.InternalSwap(&other->_impl_.punishment_);
  _impl_.passporttypeids_.InternalSwap(&other->_impl_.passporttypeids_);
  _impl_.mvpinfos_.InternalSwap(&other->_impl_.mvpinfos_);
  _impl_.advancepassport_.InternalSwap(&other->_impl_.advancepassport_);
  _impl_.passportcardnum_.InternalSwap(&other->_impl_.passportcardnum_);
  _impl_.passporthistory_.InternalSwap(&other->_impl_.passporthistory_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.usrname_, lhs_arena,
      &other->_impl_.usrname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channelusrid_, lhs_arena,
      &other->_impl_.channelusrid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nativecountry_, lhs_arena,
      &other->_impl_.nativecountry_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.oriregion_, lhs_arena,
      &other->_impl_.oriregion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTPlayerBaseInfo, _impl_.totalduration_)
      + sizeof(CSDTPlayerBaseInfo::_impl_.totalduration_)
      - PROTOBUF_FIELD_OFFSET(CSDTPlayerBaseInfo, _impl_.guildinfo_)>(
          reinterpret_cast<char*>(&_impl_.guildinfo_),
          reinterpret_cast<char*>(&other->_impl_.guildinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPlayerBaseInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[65]);
}

// ===================================================================

class PlayerGuildInfo::_Internal {
 public:
};

PlayerGuildInfo::PlayerGuildInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PlayerGuildInfo)
}
PlayerGuildInfo::PlayerGuildInfo(const PlayerGuildInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerGuildInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.role_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sign_, &from._impl_.sign_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.role_) -
    reinterpret_cast<char*>(&_impl_.sign_)) + sizeof(_impl_.role_));
  // @@protoc_insertion_point(copy_constructor:msg.PlayerGuildInfo)
}

inline void PlayerGuildInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.sign_){0}
    , decltype(_impl_.role_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerGuildInfo::~PlayerGuildInfo() {
  // @@protoc_insertion_point(destructor:msg.PlayerGuildInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerGuildInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
}

void PlayerGuildInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerGuildInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayerGuildInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.sign_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.role_) -
      reinterpret_cast<char*>(&_impl_.sign_)) + sizeof(_impl_.role_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerGuildInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PlayerGuildInfo.ID"));
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PlayerGuildInfo.Name"));
        } else
          goto handle_unusual;
        continue;
      // int32 Sign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.GUILDROLETYPE Role = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_role(static_cast<::msg::GUILDROLETYPE>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerGuildInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerGuildInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PlayerGuildInfo.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PlayerGuildInfo.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 Sign = 3;
  if (this->_internal_sign() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_sign(), target);
  }

  // .msg.GUILDROLETYPE Role = 4;
  if (this->_internal_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerGuildInfo)
  return target;
}

size_t PlayerGuildInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayerGuildInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 Sign = 3;
  if (this->_internal_sign() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sign());
  }

  // .msg.GUILDROLETYPE Role = 4;
  if (this->_internal_role() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerGuildInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerGuildInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerGuildInfo::GetClassData() const { return &_class_data_; }


void PlayerGuildInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerGuildInfo*>(&to_msg);
  auto& from = static_cast<const PlayerGuildInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayerGuildInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_sign() != 0) {
    _this->_internal_set_sign(from._internal_sign());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerGuildInfo::CopyFrom(const PlayerGuildInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayerGuildInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGuildInfo::IsInitialized() const {
  return true;
}

void PlayerGuildInfo::InternalSwap(PlayerGuildInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerGuildInfo, _impl_.role_)
      + sizeof(PlayerGuildInfo::_impl_.role_)
      - PROTOBUF_FIELD_OFFSET(PlayerGuildInfo, _impl_.sign_)>(
          reinterpret_cast<char*>(&_impl_.sign_),
          reinterpret_cast<char*>(&other->_impl_.sign_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerGuildInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[66]);
}

// ===================================================================

CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse::CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse() {}
CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse::CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse::MergeFrom(const CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[67]);
}

// ===================================================================

class CSDTPlayerSimpleInfo::_Internal {
 public:
  static const ::msg::PlayerGuildInfo& guildinfo(const CSDTPlayerSimpleInfo* msg);
};

const ::msg::PlayerGuildInfo&
CSDTPlayerSimpleInfo::_Internal::guildinfo(const CSDTPlayerSimpleInfo* msg) {
  return *msg->_impl_.guildinfo_;
}
CSDTPlayerSimpleInfo::CSDTPlayerSimpleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTPlayerSimpleInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPlayerSimpleInfo)
}
CSDTPlayerSimpleInfo::CSDTPlayerSimpleInfo(const CSDTPlayerSimpleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPlayerSimpleInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.passporttypeids_){from._impl_.passporttypeids_}
    , /*decltype(_impl_._passporttypeids_cached_byte_size_)*/{0}
    , /*decltype(_impl_.historymaxstat_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.usrname_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.guildinfo_){nullptr}
    , decltype(_impl_.headpic_){}
    , decltype(_impl_.headpicframe_){}
    , decltype(_impl_.headpicpendant_){}
    , decltype(_impl_.chatbubble_){}
    , decltype(_impl_.mmr_){}
    , decltype(_impl_.tmmr_){}
    , decltype(_impl_.cup_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.province_){}
    , decltype(_impl_.platformtype_){}
    , decltype(_impl_.observepvpid_){}
    , decltype(_impl_.period_){}
    , decltype(_impl_.ps4only_){}
    , decltype(_impl_.channeltype_){}
    , decltype(_impl_.restricttype_){}
    , decltype(_impl_.exchangestate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.historymaxstat_.MergeFrom(from._impl_.historymaxstat_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.usrname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.usrname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_usrname().empty()) {
    _this->_impl_.usrname_.Set(from._internal_usrname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channelusrid().empty()) {
    _this->_impl_.channelusrid_.Set(from._internal_channelusrid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_guildinfo()) {
    _this->_impl_.guildinfo_ = new ::msg::PlayerGuildInfo(*from._impl_.guildinfo_);
  }
  ::memcpy(&_impl_.headpic_, &from._impl_.headpic_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.exchangestate_) -
    reinterpret_cast<char*>(&_impl_.headpic_)) + sizeof(_impl_.exchangestate_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPlayerSimpleInfo)
}

inline void CSDTPlayerSimpleInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.passporttypeids_){arena}
    , /*decltype(_impl_._passporttypeids_cached_byte_size_)*/{0}
    , /*decltype(_impl_.historymaxstat_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.usrname_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.guildinfo_){nullptr}
    , decltype(_impl_.headpic_){0u}
    , decltype(_impl_.headpicframe_){0u}
    , decltype(_impl_.headpicpendant_){0u}
    , decltype(_impl_.chatbubble_){0u}
    , decltype(_impl_.mmr_){0u}
    , decltype(_impl_.tmmr_){0u}
    , decltype(_impl_.cup_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.province_){0u}
    , decltype(_impl_.platformtype_){0}
    , decltype(_impl_.observepvpid_){uint64_t{0u}}
    , decltype(_impl_.period_){0u}
    , decltype(_impl_.ps4only_){false}
    , decltype(_impl_.channeltype_){0}
    , decltype(_impl_.restricttype_){0}
    , decltype(_impl_.exchangestate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.usrname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.usrname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTPlayerSimpleInfo::~CSDTPlayerSimpleInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTPlayerSimpleInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTPlayerSimpleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.passporttypeids_.~RepeatedField();
  _impl_.historymaxstat_.Destruct();
  _impl_.historymaxstat_.~MapField();
  _impl_.id_.Destroy();
  _impl_.usrname_.Destroy();
  _impl_.country_.Destroy();
  _impl_.channelusrid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.guildinfo_;
}

void CSDTPlayerSimpleInfo::ArenaDtor(void* object) {
  CSDTPlayerSimpleInfo* _this = reinterpret_cast< CSDTPlayerSimpleInfo* >(object);
  _this->_impl_.historymaxstat_.Destruct();
}
void CSDTPlayerSimpleInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPlayerSimpleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPlayerSimpleInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.passporttypeids_.Clear();
  _impl_.historymaxstat_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.usrname_.ClearToEmpty();
  _impl_.country_.ClearToEmpty();
  _impl_.channelusrid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.guildinfo_ != nullptr) {
    delete _impl_.guildinfo_;
  }
  _impl_.guildinfo_ = nullptr;
  ::memset(&_impl_.headpic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.exchangestate_) -
      reinterpret_cast<char*>(&_impl_.headpic_)) + sizeof(_impl_.exchangestate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPlayerSimpleInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPlayerSimpleInfo.Id"));
        } else
          goto handle_unusual;
        continue;
      // string UsrName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_usrname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPlayerSimpleInfo.UsrName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.headpic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPicFrame = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.headpicframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPicPendant = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.headpicpendant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ChatBubble = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.chatbubble_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MMR = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TMMR = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.tmmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Cup = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.cup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Level = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Country = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPlayerSimpleInfo.Country"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Province = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.province_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PLATFORMTYPE PlatFormType = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platformtype(static_cast<::msg::PLATFORMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 Period = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 PassportTypeIds = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_passporttypeids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 120) {
          _internal_add_passporttypeids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ObservePvpId = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.observepvpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool PS4Only = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.ps4only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CHANELTYPE ChannelType = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channeltype(static_cast<::msg::CHANELTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string ChannelUsrId = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_channelusrid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPlayerSimpleInfo.ChannelUsrId"));
        } else
          goto handle_unusual;
        continue;
      // .msg.PlayerGuildInfo GuildInfo = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_guildinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.UserRestrictType RestrictType = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_restricttype(static_cast<::msg::UserRestrictType>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.EXCHANGESTATE ExchangeState = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_exchangestate(static_cast<::msg::EXCHANGESTATE>(val));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .msg.HistoryMaxCupMmr> HisToryMaxStat = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.historymaxstat_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPlayerSimpleInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPlayerSimpleInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPlayerSimpleInfo.Id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string UsrName = 2;
  if (!this->_internal_usrname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usrname().data(), static_cast<int>(this->_internal_usrname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPlayerSimpleInfo.UsrName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_usrname(), target);
  }

  // uint32 HeadPic = 3;
  if (this->_internal_headpic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_headpic(), target);
  }

  // uint32 HeadPicFrame = 4;
  if (this->_internal_headpicframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_headpicframe(), target);
  }

  // uint32 HeadPicPendant = 5;
  if (this->_internal_headpicpendant() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_headpicpendant(), target);
  }

  // uint32 ChatBubble = 6;
  if (this->_internal_chatbubble() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_chatbubble(), target);
  }

  // uint32 MMR = 7;
  if (this->_internal_mmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_mmr(), target);
  }

  // uint32 TMMR = 8;
  if (this->_internal_tmmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_tmmr(), target);
  }

  // uint32 Cup = 9;
  if (this->_internal_cup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_cup(), target);
  }

  // uint32 Level = 10;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_level(), target);
  }

  // string Country = 11;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPlayerSimpleInfo.Country");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_country(), target);
  }

  // uint32 Province = 12;
  if (this->_internal_province() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_province(), target);
  }

  // .msg.PLATFORMTYPE PlatFormType = 13;
  if (this->_internal_platformtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_platformtype(), target);
  }

  // uint32 Period = 14;
  if (this->_internal_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_period(), target);
  }

  // repeated uint32 PassportTypeIds = 15;
  {
    int byte_size = _impl_._passporttypeids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          15, _internal_passporttypeids(), byte_size, target);
    }
  }

  // uint64 ObservePvpId = 16;
  if (this->_internal_observepvpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_observepvpid(), target);
  }

  // bool PS4Only = 19;
  if (this->_internal_ps4only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_ps4only(), target);
  }

  // .msg.CHANELTYPE ChannelType = 20;
  if (this->_internal_channeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_channeltype(), target);
  }

  // string ChannelUsrId = 21;
  if (!this->_internal_channelusrid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelusrid().data(), static_cast<int>(this->_internal_channelusrid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPlayerSimpleInfo.ChannelUsrId");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_channelusrid(), target);
  }

  // .msg.PlayerGuildInfo GuildInfo = 22;
  if (this->_internal_has_guildinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::guildinfo(this),
        _Internal::guildinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.UserRestrictType RestrictType = 23;
  if (this->_internal_restricttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_restricttype(), target);
  }

  // .msg.EXCHANGESTATE ExchangeState = 24;
  if (this->_internal_exchangestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      24, this->_internal_exchangestate(), target);
  }

  // map<int32, .msg.HistoryMaxCupMmr> HisToryMaxStat = 25;
  if (!this->_internal_historymaxstat().empty()) {
    using MapType = ::_pb::Map<int32_t, ::msg::HistoryMaxCupMmr>;
    using WireHelper = CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_historymaxstat();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(25, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(25, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPlayerSimpleInfo)
  return target;
}

size_t CSDTPlayerSimpleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPlayerSimpleInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 PassportTypeIds = 15;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.passporttypeids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._passporttypeids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<int32, .msg.HistoryMaxCupMmr> HisToryMaxStat = 25;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_historymaxstat_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::msg::HistoryMaxCupMmr >::const_iterator
      it = this->_internal_historymaxstat().begin();
      it != this->_internal_historymaxstat().end(); ++it) {
    total_size += CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string UsrName = 2;
  if (!this->_internal_usrname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usrname());
  }

  // string Country = 11;
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string ChannelUsrId = 21;
  if (!this->_internal_channelusrid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelusrid());
  }

  // .msg.PlayerGuildInfo GuildInfo = 22;
  if (this->_internal_has_guildinfo()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.guildinfo_);
  }

  // uint32 HeadPic = 3;
  if (this->_internal_headpic() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpic());
  }

  // uint32 HeadPicFrame = 4;
  if (this->_internal_headpicframe() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpicframe());
  }

  // uint32 HeadPicPendant = 5;
  if (this->_internal_headpicpendant() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpicpendant());
  }

  // uint32 ChatBubble = 6;
  if (this->_internal_chatbubble() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chatbubble());
  }

  // uint32 MMR = 7;
  if (this->_internal_mmr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mmr());
  }

  // uint32 TMMR = 8;
  if (this->_internal_tmmr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tmmr());
  }

  // uint32 Cup = 9;
  if (this->_internal_cup() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cup());
  }

  // uint32 Level = 10;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 Province = 12;
  if (this->_internal_province() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_province());
  }

  // .msg.PLATFORMTYPE PlatFormType = 13;
  if (this->_internal_platformtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_platformtype());
  }

  // uint64 ObservePvpId = 16;
  if (this->_internal_observepvpid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_observepvpid());
  }

  // uint32 Period = 14;
  if (this->_internal_period() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_period());
  }

  // bool PS4Only = 19;
  if (this->_internal_ps4only() != 0) {
    total_size += 2 + 1;
  }

  // .msg.CHANELTYPE ChannelType = 20;
  if (this->_internal_channeltype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_channeltype());
  }

  // .msg.UserRestrictType RestrictType = 23;
  if (this->_internal_restricttype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_restricttype());
  }

  // .msg.EXCHANGESTATE ExchangeState = 24;
  if (this->_internal_exchangestate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_exchangestate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPlayerSimpleInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPlayerSimpleInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPlayerSimpleInfo::GetClassData() const { return &_class_data_; }


void CSDTPlayerSimpleInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPlayerSimpleInfo*>(&to_msg);
  auto& from = static_cast<const CSDTPlayerSimpleInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPlayerSimpleInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.passporttypeids_.MergeFrom(from._impl_.passporttypeids_);
  _this->_impl_.historymaxstat_.MergeFrom(from._impl_.historymaxstat_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_usrname().empty()) {
    _this->_internal_set_usrname(from._internal_usrname());
  }
  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (!from._internal_channelusrid().empty()) {
    _this->_internal_set_channelusrid(from._internal_channelusrid());
  }
  if (from._internal_has_guildinfo()) {
    _this->_internal_mutable_guildinfo()->::msg::PlayerGuildInfo::MergeFrom(
        from._internal_guildinfo());
  }
  if (from._internal_headpic() != 0) {
    _this->_internal_set_headpic(from._internal_headpic());
  }
  if (from._internal_headpicframe() != 0) {
    _this->_internal_set_headpicframe(from._internal_headpicframe());
  }
  if (from._internal_headpicpendant() != 0) {
    _this->_internal_set_headpicpendant(from._internal_headpicpendant());
  }
  if (from._internal_chatbubble() != 0) {
    _this->_internal_set_chatbubble(from._internal_chatbubble());
  }
  if (from._internal_mmr() != 0) {
    _this->_internal_set_mmr(from._internal_mmr());
  }
  if (from._internal_tmmr() != 0) {
    _this->_internal_set_tmmr(from._internal_tmmr());
  }
  if (from._internal_cup() != 0) {
    _this->_internal_set_cup(from._internal_cup());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_province() != 0) {
    _this->_internal_set_province(from._internal_province());
  }
  if (from._internal_platformtype() != 0) {
    _this->_internal_set_platformtype(from._internal_platformtype());
  }
  if (from._internal_observepvpid() != 0) {
    _this->_internal_set_observepvpid(from._internal_observepvpid());
  }
  if (from._internal_period() != 0) {
    _this->_internal_set_period(from._internal_period());
  }
  if (from._internal_ps4only() != 0) {
    _this->_internal_set_ps4only(from._internal_ps4only());
  }
  if (from._internal_channeltype() != 0) {
    _this->_internal_set_channeltype(from._internal_channeltype());
  }
  if (from._internal_restricttype() != 0) {
    _this->_internal_set_restricttype(from._internal_restricttype());
  }
  if (from._internal_exchangestate() != 0) {
    _this->_internal_set_exchangestate(from._internal_exchangestate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPlayerSimpleInfo::CopyFrom(const CSDTPlayerSimpleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPlayerSimpleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPlayerSimpleInfo::IsInitialized() const {
  return true;
}

void CSDTPlayerSimpleInfo::InternalSwap(CSDTPlayerSimpleInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.passporttypeids_.InternalSwap(&other->_impl_.passporttypeids_);
  _impl_.historymaxstat_.InternalSwap(&other->_impl_.historymaxstat_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.usrname_, lhs_arena,
      &other->_impl_.usrname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channelusrid_, lhs_arena,
      &other->_impl_.channelusrid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTPlayerSimpleInfo, _impl_.exchangestate_)
      + sizeof(CSDTPlayerSimpleInfo::_impl_.exchangestate_)
      - PROTOBUF_FIELD_OFFSET(CSDTPlayerSimpleInfo, _impl_.guildinfo_)>(
          reinterpret_cast<char*>(&_impl_.guildinfo_),
          reinterpret_cast<char*>(&other->_impl_.guildinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPlayerSimpleInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[68]);
}

// ===================================================================

class CSDTPlayerRankInfo::_Internal {
 public:
};

CSDTPlayerRankInfo::CSDTPlayerRankInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPlayerRankInfo)
}
CSDTPlayerRankInfo::CSDTPlayerRankInfo(const CSDTPlayerRankInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPlayerRankInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.usrname_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.headpic_){}
    , decltype(_impl_.headpicframe_){}
    , decltype(_impl_.cup_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.usrname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.usrname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_usrname().empty()) {
    _this->_impl_.usrname_.Set(from._internal_usrname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.headpic_, &from._impl_.headpic_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cup_) -
    reinterpret_cast<char*>(&_impl_.headpic_)) + sizeof(_impl_.cup_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPlayerRankInfo)
}

inline void CSDTPlayerRankInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.usrname_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.headpic_){0u}
    , decltype(_impl_.headpicframe_){0u}
    , decltype(_impl_.cup_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.usrname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.usrname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTPlayerRankInfo::~CSDTPlayerRankInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTPlayerRankInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTPlayerRankInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.usrname_.Destroy();
  _impl_.country_.Destroy();
}

void CSDTPlayerRankInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPlayerRankInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPlayerRankInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.usrname_.ClearToEmpty();
  _impl_.country_.ClearToEmpty();
  ::memset(&_impl_.headpic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cup_) -
      reinterpret_cast<char*>(&_impl_.headpic_)) + sizeof(_impl_.cup_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPlayerRankInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPlayerRankInfo.Id"));
        } else
          goto handle_unusual;
        continue;
      // string UsrName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_usrname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPlayerRankInfo.UsrName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.headpic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPicFrame = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.headpicframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Country = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPlayerRankInfo.Country"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Cup = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.cup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPlayerRankInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPlayerRankInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPlayerRankInfo.Id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string UsrName = 2;
  if (!this->_internal_usrname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usrname().data(), static_cast<int>(this->_internal_usrname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPlayerRankInfo.UsrName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_usrname(), target);
  }

  // uint32 HeadPic = 3;
  if (this->_internal_headpic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_headpic(), target);
  }

  // uint32 HeadPicFrame = 4;
  if (this->_internal_headpicframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_headpicframe(), target);
  }

  // string Country = 5;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPlayerRankInfo.Country");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_country(), target);
  }

  // uint32 Cup = 6;
  if (this->_internal_cup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPlayerRankInfo)
  return target;
}

size_t CSDTPlayerRankInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPlayerRankInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string UsrName = 2;
  if (!this->_internal_usrname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usrname());
  }

  // string Country = 5;
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // uint32 HeadPic = 3;
  if (this->_internal_headpic() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpic());
  }

  // uint32 HeadPicFrame = 4;
  if (this->_internal_headpicframe() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpicframe());
  }

  // uint32 Cup = 6;
  if (this->_internal_cup() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cup());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPlayerRankInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPlayerRankInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPlayerRankInfo::GetClassData() const { return &_class_data_; }


void CSDTPlayerRankInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPlayerRankInfo*>(&to_msg);
  auto& from = static_cast<const CSDTPlayerRankInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPlayerRankInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_usrname().empty()) {
    _this->_internal_set_usrname(from._internal_usrname());
  }
  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (from._internal_headpic() != 0) {
    _this->_internal_set_headpic(from._internal_headpic());
  }
  if (from._internal_headpicframe() != 0) {
    _this->_internal_set_headpicframe(from._internal_headpicframe());
  }
  if (from._internal_cup() != 0) {
    _this->_internal_set_cup(from._internal_cup());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPlayerRankInfo::CopyFrom(const CSDTPlayerRankInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPlayerRankInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPlayerRankInfo::IsInitialized() const {
  return true;
}

void CSDTPlayerRankInfo::InternalSwap(CSDTPlayerRankInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.usrname_, lhs_arena,
      &other->_impl_.usrname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTPlayerRankInfo, _impl_.cup_)
      + sizeof(CSDTPlayerRankInfo::_impl_.cup_)
      - PROTOBUF_FIELD_OFFSET(CSDTPlayerRankInfo, _impl_.headpic_)>(
          reinterpret_cast<char*>(&_impl_.headpic_),
          reinterpret_cast<char*>(&other->_impl_.headpic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPlayerRankInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[69]);
}

// ===================================================================

class CSDTPlayerTournamentInfo::_Internal {
 public:
};

CSDTPlayerTournamentInfo::CSDTPlayerTournamentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPlayerTournamentInfo)
}
CSDTPlayerTournamentInfo::CSDTPlayerTournamentInfo(const CSDTPlayerTournamentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPlayerTournamentInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.score_ = from._impl_.score_;
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPlayerTournamentInfo)
}

inline void CSDTPlayerTournamentInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.score_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTPlayerTournamentInfo::~CSDTPlayerTournamentInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTPlayerTournamentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTPlayerTournamentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void CSDTPlayerTournamentInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPlayerTournamentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPlayerTournamentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.score_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPlayerTournamentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPlayerTournamentInfo.Id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPlayerTournamentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPlayerTournamentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPlayerTournamentInfo.Id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 Score = 2;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPlayerTournamentInfo)
  return target;
}

size_t CSDTPlayerTournamentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPlayerTournamentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint32 Score = 2;
  if (this->_internal_score() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_score());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPlayerTournamentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPlayerTournamentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPlayerTournamentInfo::GetClassData() const { return &_class_data_; }


void CSDTPlayerTournamentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPlayerTournamentInfo*>(&to_msg);
  auto& from = static_cast<const CSDTPlayerTournamentInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPlayerTournamentInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_score() != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPlayerTournamentInfo::CopyFrom(const CSDTPlayerTournamentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPlayerTournamentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPlayerTournamentInfo::IsInitialized() const {
  return true;
}

void CSDTPlayerTournamentInfo::InternalSwap(CSDTPlayerTournamentInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.score_, other->_impl_.score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPlayerTournamentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[70]);
}

// ===================================================================

class CSDTPvpHistory::_Internal {
 public:
};

CSDTPvpHistory::CSDTPvpHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPvpHistory)
}
CSDTPvpHistory::CSDTPvpHistory(const CSDTPvpHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPvpHistory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dailyfirstwinaward_){from._impl_.dailyfirstwinaward_}
    , decltype(_impl_.pvpid_){}
    , decltype(_impl_.changemmr_){}
    , decltype(_impl_.dailyfirstwin_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pvpid_, &from._impl_.pvpid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dailyfirstwin_) -
    reinterpret_cast<char*>(&_impl_.pvpid_)) + sizeof(_impl_.dailyfirstwin_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPvpHistory)
}

inline void CSDTPvpHistory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dailyfirstwinaward_){arena}
    , decltype(_impl_.pvpid_){uint64_t{0u}}
    , decltype(_impl_.changemmr_){0}
    , decltype(_impl_.dailyfirstwin_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTPvpHistory::~CSDTPvpHistory() {
  // @@protoc_insertion_point(destructor:msg.CSDTPvpHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTPvpHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dailyfirstwinaward_.~RepeatedPtrField();
}

void CSDTPvpHistory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPvpHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPvpHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dailyfirstwinaward_.Clear();
  ::memset(&_impl_.pvpid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dailyfirstwin_) -
      reinterpret_cast<char*>(&_impl_.pvpid_)) + sizeof(_impl_.dailyfirstwin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPvpHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 PvpId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pvpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ChangeMmr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.changemmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool DailyFirstWin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.dailyfirstwin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Award DailyFirstWinAward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dailyfirstwinaward(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPvpHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPvpHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 PvpId = 1;
  if (this->_internal_pvpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pvpid(), target);
  }

  // int32 ChangeMmr = 2;
  if (this->_internal_changemmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_changemmr(), target);
  }

  // bool DailyFirstWin = 3;
  if (this->_internal_dailyfirstwin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_dailyfirstwin(), target);
  }

  // repeated .msg.Award DailyFirstWinAward = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dailyfirstwinaward_size()); i < n; i++) {
    const auto& repfield = this->_internal_dailyfirstwinaward(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPvpHistory)
  return target;
}

size_t CSDTPvpHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPvpHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.Award DailyFirstWinAward = 4;
  total_size += 1UL * this->_internal_dailyfirstwinaward_size();
  for (const auto& msg : this->_impl_.dailyfirstwinaward_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 PvpId = 1;
  if (this->_internal_pvpid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pvpid());
  }

  // int32 ChangeMmr = 2;
  if (this->_internal_changemmr() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_changemmr());
  }

  // bool DailyFirstWin = 3;
  if (this->_internal_dailyfirstwin() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPvpHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPvpHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPvpHistory::GetClassData() const { return &_class_data_; }


void CSDTPvpHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPvpHistory*>(&to_msg);
  auto& from = static_cast<const CSDTPvpHistory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPvpHistory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dailyfirstwinaward_.MergeFrom(from._impl_.dailyfirstwinaward_);
  if (from._internal_pvpid() != 0) {
    _this->_internal_set_pvpid(from._internal_pvpid());
  }
  if (from._internal_changemmr() != 0) {
    _this->_internal_set_changemmr(from._internal_changemmr());
  }
  if (from._internal_dailyfirstwin() != 0) {
    _this->_internal_set_dailyfirstwin(from._internal_dailyfirstwin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPvpHistory::CopyFrom(const CSDTPvpHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPvpHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPvpHistory::IsInitialized() const {
  return true;
}

void CSDTPvpHistory::InternalSwap(CSDTPvpHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dailyfirstwinaward_.InternalSwap(&other->_impl_.dailyfirstwinaward_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTPvpHistory, _impl_.dailyfirstwin_)
      + sizeof(CSDTPvpHistory::_impl_.dailyfirstwin_)
      - PROTOBUF_FIELD_OFFSET(CSDTPvpHistory, _impl_.pvpid_)>(
          reinterpret_cast<char*>(&_impl_.pvpid_),
          reinterpret_cast<char*>(&other->_impl_.pvpid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPvpHistory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[71]);
}

// ===================================================================

class CSDTPlayerPvpInfo::_Internal {
 public:
};

CSDTPlayerPvpInfo::CSDTPlayerPvpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPlayerPvpInfo)
}
CSDTPlayerPvpInfo::CSDTPlayerPvpInfo(const CSDTPlayerPvpInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPlayerPvpInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pvphistory_){from._impl_.pvphistory_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPlayerPvpInfo)
}

inline void CSDTPlayerPvpInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pvphistory_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTPlayerPvpInfo::~CSDTPlayerPvpInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTPlayerPvpInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTPlayerPvpInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pvphistory_.~RepeatedPtrField();
}

void CSDTPlayerPvpInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPlayerPvpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPlayerPvpInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pvphistory_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPlayerPvpInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.CSDTPvpHistory PvpHistory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pvphistory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPlayerPvpInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPlayerPvpInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.CSDTPvpHistory PvpHistory = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pvphistory_size()); i < n; i++) {
    const auto& repfield = this->_internal_pvphistory(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPlayerPvpInfo)
  return target;
}

size_t CSDTPlayerPvpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPlayerPvpInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTPvpHistory PvpHistory = 1;
  total_size += 1UL * this->_internal_pvphistory_size();
  for (const auto& msg : this->_impl_.pvphistory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPlayerPvpInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPlayerPvpInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPlayerPvpInfo::GetClassData() const { return &_class_data_; }


void CSDTPlayerPvpInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPlayerPvpInfo*>(&to_msg);
  auto& from = static_cast<const CSDTPlayerPvpInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPlayerPvpInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pvphistory_.MergeFrom(from._impl_.pvphistory_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPlayerPvpInfo::CopyFrom(const CSDTPlayerPvpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPlayerPvpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPlayerPvpInfo::IsInitialized() const {
  return true;
}

void CSDTPlayerPvpInfo::InternalSwap(CSDTPlayerPvpInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pvphistory_.InternalSwap(&other->_impl_.pvphistory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPlayerPvpInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[72]);
}

// ===================================================================

class CSDTPlayerDetailInfo::_Internal {
 public:
  static const ::msg::CSDTPlayerBaseInfo& baseinfo(const CSDTPlayerDetailInfo* msg);
  static const ::msg::CSDTStat& stat(const CSDTPlayerDetailInfo* msg);
};

const ::msg::CSDTPlayerBaseInfo&
CSDTPlayerDetailInfo::_Internal::baseinfo(const CSDTPlayerDetailInfo* msg) {
  return *msg->_impl_.baseinfo_;
}
const ::msg::CSDTStat&
CSDTPlayerDetailInfo::_Internal::stat(const CSDTPlayerDetailInfo* msg) {
  return *msg->_impl_.stat_;
}
CSDTPlayerDetailInfo::CSDTPlayerDetailInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPlayerDetailInfo)
}
CSDTPlayerDetailInfo::CSDTPlayerDetailInfo(const CSDTPlayerDetailInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPlayerDetailInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.baseinfo_){nullptr}
    , decltype(_impl_.stat_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_baseinfo()) {
    _this->_impl_.baseinfo_ = new ::msg::CSDTPlayerBaseInfo(*from._impl_.baseinfo_);
  }
  if (from._internal_has_stat()) {
    _this->_impl_.stat_ = new ::msg::CSDTStat(*from._impl_.stat_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPlayerDetailInfo)
}

inline void CSDTPlayerDetailInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.baseinfo_){nullptr}
    , decltype(_impl_.stat_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTPlayerDetailInfo::~CSDTPlayerDetailInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTPlayerDetailInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTPlayerDetailInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.baseinfo_;
  if (this != internal_default_instance()) delete _impl_.stat_;
}

void CSDTPlayerDetailInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPlayerDetailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPlayerDetailInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.baseinfo_ != nullptr) {
    delete _impl_.baseinfo_;
  }
  _impl_.baseinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.stat_ != nullptr) {
    delete _impl_.stat_;
  }
  _impl_.stat_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPlayerDetailInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.CSDTPlayerBaseInfo BaseInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_baseinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTStat Stat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CSDTItem Items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPlayerDetailInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPlayerDetailInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.CSDTPlayerBaseInfo BaseInfo = 1;
  if (this->_internal_has_baseinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::baseinfo(this),
        _Internal::baseinfo(this).GetCachedSize(), target, stream);
  }

  // .msg.CSDTStat Stat = 2;
  if (this->_internal_has_stat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stat(this),
        _Internal::stat(this).GetCachedSize(), target, stream);
  }

  // repeated .msg.CSDTItem Items = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPlayerDetailInfo)
  return target;
}

size_t CSDTPlayerDetailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPlayerDetailInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTItem Items = 3;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .msg.CSDTPlayerBaseInfo BaseInfo = 1;
  if (this->_internal_has_baseinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.baseinfo_);
  }

  // .msg.CSDTStat Stat = 2;
  if (this->_internal_has_stat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stat_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPlayerDetailInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPlayerDetailInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPlayerDetailInfo::GetClassData() const { return &_class_data_; }


void CSDTPlayerDetailInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPlayerDetailInfo*>(&to_msg);
  auto& from = static_cast<const CSDTPlayerDetailInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPlayerDetailInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_has_baseinfo()) {
    _this->_internal_mutable_baseinfo()->::msg::CSDTPlayerBaseInfo::MergeFrom(
        from._internal_baseinfo());
  }
  if (from._internal_has_stat()) {
    _this->_internal_mutable_stat()->::msg::CSDTStat::MergeFrom(
        from._internal_stat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPlayerDetailInfo::CopyFrom(const CSDTPlayerDetailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPlayerDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPlayerDetailInfo::IsInitialized() const {
  return true;
}

void CSDTPlayerDetailInfo::InternalSwap(CSDTPlayerDetailInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTPlayerDetailInfo, _impl_.stat_)
      + sizeof(CSDTPlayerDetailInfo::_impl_.stat_)
      - PROTOBUF_FIELD_OFFSET(CSDTPlayerDetailInfo, _impl_.baseinfo_)>(
          reinterpret_cast<char*>(&_impl_.baseinfo_),
          reinterpret_cast<char*>(&other->_impl_.baseinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPlayerDetailInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[73]);
}

// ===================================================================

class CSDTPlayerItems::_Internal {
 public:
};

CSDTPlayerItems::CSDTPlayerItems(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPlayerItems)
}
CSDTPlayerItems::CSDTPlayerItems(const CSDTPlayerItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPlayerItems* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.medals_){from._impl_.medals_}
    , decltype(_impl_.cache_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.cache_ = from._impl_.cache_;
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPlayerItems)
}

inline void CSDTPlayerItems::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.medals_){arena}
    , decltype(_impl_.cache_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTPlayerItems::~CSDTPlayerItems() {
  // @@protoc_insertion_point(destructor:msg.CSDTPlayerItems)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTPlayerItems::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.medals_.~RepeatedPtrField();
}

void CSDTPlayerItems::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPlayerItems::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPlayerItems)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.medals_.Clear();
  _impl_.cache_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPlayerItems::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Cache = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CSDTItem Medals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_medals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPlayerItems::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPlayerItems)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Cache = 1;
  if (this->_internal_cache() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_cache(), target);
  }

  // repeated .msg.CSDTItem Medals = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_medals_size()); i < n; i++) {
    const auto& repfield = this->_internal_medals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPlayerItems)
  return target;
}

size_t CSDTPlayerItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPlayerItems)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTItem Medals = 2;
  total_size += 1UL * this->_internal_medals_size();
  for (const auto& msg : this->_impl_.medals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool Cache = 1;
  if (this->_internal_cache() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPlayerItems::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPlayerItems::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPlayerItems::GetClassData() const { return &_class_data_; }


void CSDTPlayerItems::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPlayerItems*>(&to_msg);
  auto& from = static_cast<const CSDTPlayerItems&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPlayerItems)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.medals_.MergeFrom(from._impl_.medals_);
  if (from._internal_cache() != 0) {
    _this->_internal_set_cache(from._internal_cache());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPlayerItems::CopyFrom(const CSDTPlayerItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPlayerItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPlayerItems::IsInitialized() const {
  return true;
}

void CSDTPlayerItems::InternalSwap(CSDTPlayerItems* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.medals_.InternalSwap(&other->_impl_.medals_);
  swap(_impl_.cache_, other->_impl_.cache_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPlayerItems::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[74]);
}

// ===================================================================

class CSDTRankSeasonData::_Internal {
 public:
};

CSDTRankSeasonData::CSDTRankSeasonData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTRankSeasonData)
}
CSDTRankSeasonData::CSDTRankSeasonData(const CSDTRankSeasonData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTRankSeasonData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.competitioncnt_){}
    , decltype(_impl_.avgrank_){}
    , decltype(_impl_.mvpcount_){}
    , decltype(_impl_.mvpprobability_){}
    , decltype(_impl_.top3count_){}
    , decltype(_impl_.top3probability_){}
    , decltype(_impl_.avground_){}
    , decltype(_impl_.wintimes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.competitioncnt_, &from._impl_.competitioncnt_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.wintimes_) -
    reinterpret_cast<char*>(&_impl_.competitioncnt_)) + sizeof(_impl_.wintimes_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTRankSeasonData)
}

inline void CSDTRankSeasonData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.competitioncnt_){0u}
    , decltype(_impl_.avgrank_){0u}
    , decltype(_impl_.mvpcount_){0u}
    , decltype(_impl_.mvpprobability_){0u}
    , decltype(_impl_.top3count_){0u}
    , decltype(_impl_.top3probability_){0u}
    , decltype(_impl_.avground_){0u}
    , decltype(_impl_.wintimes_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTRankSeasonData::~CSDTRankSeasonData() {
  // @@protoc_insertion_point(destructor:msg.CSDTRankSeasonData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTRankSeasonData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDTRankSeasonData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTRankSeasonData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTRankSeasonData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.competitioncnt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.wintimes_) -
      reinterpret_cast<char*>(&_impl_.competitioncnt_)) + sizeof(_impl_.wintimes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTRankSeasonData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 CompetitionCnt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.competitioncnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 AvgRank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.avgrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MvpCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mvpcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MvpProbability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.mvpprobability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Top3Count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.top3count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Top3Probability = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.top3probability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 AvgRound = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.avground_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 WinTimes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.wintimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTRankSeasonData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTRankSeasonData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 CompetitionCnt = 1;
  if (this->_internal_competitioncnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_competitioncnt(), target);
  }

  // uint32 AvgRank = 2;
  if (this->_internal_avgrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_avgrank(), target);
  }

  // uint32 MvpCount = 3;
  if (this->_internal_mvpcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mvpcount(), target);
  }

  // uint32 MvpProbability = 4;
  if (this->_internal_mvpprobability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mvpprobability(), target);
  }

  // uint32 Top3Count = 5;
  if (this->_internal_top3count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_top3count(), target);
  }

  // uint32 Top3Probability = 6;
  if (this->_internal_top3probability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_top3probability(), target);
  }

  // uint32 AvgRound = 7;
  if (this->_internal_avground() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_avground(), target);
  }

  // uint32 WinTimes = 8;
  if (this->_internal_wintimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_wintimes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTRankSeasonData)
  return target;
}

size_t CSDTRankSeasonData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTRankSeasonData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 CompetitionCnt = 1;
  if (this->_internal_competitioncnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_competitioncnt());
  }

  // uint32 AvgRank = 2;
  if (this->_internal_avgrank() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_avgrank());
  }

  // uint32 MvpCount = 3;
  if (this->_internal_mvpcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mvpcount());
  }

  // uint32 MvpProbability = 4;
  if (this->_internal_mvpprobability() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mvpprobability());
  }

  // uint32 Top3Count = 5;
  if (this->_internal_top3count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top3count());
  }

  // uint32 Top3Probability = 6;
  if (this->_internal_top3probability() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top3probability());
  }

  // uint32 AvgRound = 7;
  if (this->_internal_avground() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_avground());
  }

  // uint32 WinTimes = 8;
  if (this->_internal_wintimes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wintimes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTRankSeasonData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTRankSeasonData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTRankSeasonData::GetClassData() const { return &_class_data_; }


void CSDTRankSeasonData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTRankSeasonData*>(&to_msg);
  auto& from = static_cast<const CSDTRankSeasonData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTRankSeasonData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_competitioncnt() != 0) {
    _this->_internal_set_competitioncnt(from._internal_competitioncnt());
  }
  if (from._internal_avgrank() != 0) {
    _this->_internal_set_avgrank(from._internal_avgrank());
  }
  if (from._internal_mvpcount() != 0) {
    _this->_internal_set_mvpcount(from._internal_mvpcount());
  }
  if (from._internal_mvpprobability() != 0) {
    _this->_internal_set_mvpprobability(from._internal_mvpprobability());
  }
  if (from._internal_top3count() != 0) {
    _this->_internal_set_top3count(from._internal_top3count());
  }
  if (from._internal_top3probability() != 0) {
    _this->_internal_set_top3probability(from._internal_top3probability());
  }
  if (from._internal_avground() != 0) {
    _this->_internal_set_avground(from._internal_avground());
  }
  if (from._internal_wintimes() != 0) {
    _this->_internal_set_wintimes(from._internal_wintimes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTRankSeasonData::CopyFrom(const CSDTRankSeasonData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTRankSeasonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTRankSeasonData::IsInitialized() const {
  return true;
}

void CSDTRankSeasonData::InternalSwap(CSDTRankSeasonData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTRankSeasonData, _impl_.wintimes_)
      + sizeof(CSDTRankSeasonData::_impl_.wintimes_)
      - PROTOBUF_FIELD_OFFSET(CSDTRankSeasonData, _impl_.competitioncnt_)>(
          reinterpret_cast<char*>(&_impl_.competitioncnt_),
          reinterpret_cast<char*>(&other->_impl_.competitioncnt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTRankSeasonData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[75]);
}

// ===================================================================

CSDTRankSeasonInfo_ModesEntry_DoNotUse::CSDTRankSeasonInfo_ModesEntry_DoNotUse() {}
CSDTRankSeasonInfo_ModesEntry_DoNotUse::CSDTRankSeasonInfo_ModesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTRankSeasonInfo_ModesEntry_DoNotUse::MergeFrom(const CSDTRankSeasonInfo_ModesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTRankSeasonInfo_ModesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[76]);
}

// ===================================================================

class CSDTRankSeasonInfo::_Internal {
 public:
};

CSDTRankSeasonInfo::CSDTRankSeasonInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTRankSeasonInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTRankSeasonInfo)
}
CSDTRankSeasonInfo::CSDTRankSeasonInfo(const CSDTRankSeasonInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTRankSeasonInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.modes_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.maxmmr_){}
    , decltype(_impl_.maxtmmr_){}
    , decltype(_impl_.maxffmmr_){}
    , decltype(_impl_.maxqueenrank_){}
    , decltype(_impl_.maxtqueenrank_){}
    , decltype(_impl_.maxfqueenrank_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.modes_.MergeFrom(from._impl_.modes_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxfqueenrank_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.maxfqueenrank_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTRankSeasonInfo)
}

inline void CSDTRankSeasonInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.modes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.maxmmr_){0u}
    , decltype(_impl_.maxtmmr_){0u}
    , decltype(_impl_.maxffmmr_){0u}
    , decltype(_impl_.maxqueenrank_){0}
    , decltype(_impl_.maxtqueenrank_){0}
    , decltype(_impl_.maxfqueenrank_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTRankSeasonInfo::~CSDTRankSeasonInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTRankSeasonInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTRankSeasonInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modes_.Destruct();
  _impl_.modes_.~MapField();
}

void CSDTRankSeasonInfo::ArenaDtor(void* object) {
  CSDTRankSeasonInfo* _this = reinterpret_cast< CSDTRankSeasonInfo* >(object);
  _this->_impl_.modes_.Destruct();
}
void CSDTRankSeasonInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTRankSeasonInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTRankSeasonInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.modes_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxfqueenrank_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.maxfqueenrank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTRankSeasonInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MaxMMR = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.maxmmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .msg.CSDTRankSeasonData> Modes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.modes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 MaxTMMR = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.maxtmmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MaxFFMMR = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.maxffmmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MaxQueenRank = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.maxqueenrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MaxTQueenRank = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.maxtqueenrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MaxFQueenRank = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.maxfqueenrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTRankSeasonInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTRankSeasonInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 MaxMMR = 2;
  if (this->_internal_maxmmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maxmmr(), target);
  }

  // map<uint32, .msg.CSDTRankSeasonData> Modes = 3;
  if (!this->_internal_modes().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::CSDTRankSeasonData>;
    using WireHelper = CSDTRankSeasonInfo_ModesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_modes();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint32 MaxTMMR = 4;
  if (this->_internal_maxtmmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_maxtmmr(), target);
  }

  // uint32 MaxFFMMR = 5;
  if (this->_internal_maxffmmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_maxffmmr(), target);
  }

  // int32 MaxQueenRank = 6;
  if (this->_internal_maxqueenrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_maxqueenrank(), target);
  }

  // int32 MaxTQueenRank = 7;
  if (this->_internal_maxtqueenrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_maxtqueenrank(), target);
  }

  // int32 MaxFQueenRank = 8;
  if (this->_internal_maxfqueenrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_maxfqueenrank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTRankSeasonInfo)
  return target;
}

size_t CSDTRankSeasonInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTRankSeasonInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .msg.CSDTRankSeasonData> Modes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_modes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTRankSeasonData >::const_iterator
      it = this->_internal_modes().begin();
      it != this->_internal_modes().end(); ++it) {
    total_size += CSDTRankSeasonInfo_ModesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 MaxMMR = 2;
  if (this->_internal_maxmmr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxmmr());
  }

  // uint32 MaxTMMR = 4;
  if (this->_internal_maxtmmr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxtmmr());
  }

  // uint32 MaxFFMMR = 5;
  if (this->_internal_maxffmmr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxffmmr());
  }

  // int32 MaxQueenRank = 6;
  if (this->_internal_maxqueenrank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxqueenrank());
  }

  // int32 MaxTQueenRank = 7;
  if (this->_internal_maxtqueenrank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxtqueenrank());
  }

  // int32 MaxFQueenRank = 8;
  if (this->_internal_maxfqueenrank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxfqueenrank());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTRankSeasonInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTRankSeasonInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTRankSeasonInfo::GetClassData() const { return &_class_data_; }


void CSDTRankSeasonInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTRankSeasonInfo*>(&to_msg);
  auto& from = static_cast<const CSDTRankSeasonInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTRankSeasonInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.modes_.MergeFrom(from._impl_.modes_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_maxmmr() != 0) {
    _this->_internal_set_maxmmr(from._internal_maxmmr());
  }
  if (from._internal_maxtmmr() != 0) {
    _this->_internal_set_maxtmmr(from._internal_maxtmmr());
  }
  if (from._internal_maxffmmr() != 0) {
    _this->_internal_set_maxffmmr(from._internal_maxffmmr());
  }
  if (from._internal_maxqueenrank() != 0) {
    _this->_internal_set_maxqueenrank(from._internal_maxqueenrank());
  }
  if (from._internal_maxtqueenrank() != 0) {
    _this->_internal_set_maxtqueenrank(from._internal_maxtqueenrank());
  }
  if (from._internal_maxfqueenrank() != 0) {
    _this->_internal_set_maxfqueenrank(from._internal_maxfqueenrank());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTRankSeasonInfo::CopyFrom(const CSDTRankSeasonInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTRankSeasonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTRankSeasonInfo::IsInitialized() const {
  return true;
}

void CSDTRankSeasonInfo::InternalSwap(CSDTRankSeasonInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.modes_.InternalSwap(&other->_impl_.modes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTRankSeasonInfo, _impl_.maxfqueenrank_)
      + sizeof(CSDTRankSeasonInfo::_impl_.maxfqueenrank_)
      - PROTOBUF_FIELD_OFFSET(CSDTRankSeasonInfo, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTRankSeasonInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[77]);
}

// ===================================================================

CSDTStat_SeasonInfoEntry_DoNotUse::CSDTStat_SeasonInfoEntry_DoNotUse() {}
CSDTStat_SeasonInfoEntry_DoNotUse::CSDTStat_SeasonInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTStat_SeasonInfoEntry_DoNotUse::MergeFrom(const CSDTStat_SeasonInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTStat_SeasonInfoEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[78]);
}

// ===================================================================

class CSDTStat::_Internal {
 public:
  static const ::msg::CSDTRankSeasonData& unseasondata(const CSDTStat* msg);
  static const ::msg::CSDTChessPlayer& curchessplr(const CSDTStat* msg);
};

const ::msg::CSDTRankSeasonData&
CSDTStat::_Internal::unseasondata(const CSDTStat* msg) {
  return *msg->_impl_.unseasondata_;
}
const ::msg::CSDTChessPlayer&
CSDTStat::_Internal::curchessplr(const CSDTStat* msg) {
  return *msg->_impl_.curchessplr_;
}
CSDTStat::CSDTStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTStat::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTStat)
}
CSDTStat::CSDTStat(const CSDTStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTStat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.seasoninfo_)*/{}
    , decltype(_impl_.unseasondata_){nullptr}
    , decltype(_impl_.curchessplr_){nullptr}
    , decltype(_impl_.mmr_){}
    , decltype(_impl_.competitioncnt_){}
    , decltype(_impl_.registertime_){}
    , decltype(_impl_.mvpcnt_){}
    , decltype(_impl_.chessplayerskin_){}
    , decltype(_impl_.followcount_){}
    , decltype(_impl_.fanscount_){}
    , decltype(_impl_.competitioncntdaily_){}
    , decltype(_impl_.bindoldplayercount_){}
    , decltype(_impl_.tmmr_){}
    , decltype(_impl_.cup_){}
    , decltype(_impl_.ffmmr_){}
    , decltype(_impl_.maxqueenrank_){}
    , decltype(_impl_.maxtqueenrank_){}
    , decltype(_impl_.maxfqueenrank_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.seasoninfo_.MergeFrom(from._impl_.seasoninfo_);
  if (from._internal_has_unseasondata()) {
    _this->_impl_.unseasondata_ = new ::msg::CSDTRankSeasonData(*from._impl_.unseasondata_);
  }
  if (from._internal_has_curchessplr()) {
    _this->_impl_.curchessplr_ = new ::msg::CSDTChessPlayer(*from._impl_.curchessplr_);
  }
  ::memcpy(&_impl_.mmr_, &from._impl_.mmr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxfqueenrank_) -
    reinterpret_cast<char*>(&_impl_.mmr_)) + sizeof(_impl_.maxfqueenrank_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTStat)
}

inline void CSDTStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.seasoninfo_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.unseasondata_){nullptr}
    , decltype(_impl_.curchessplr_){nullptr}
    , decltype(_impl_.mmr_){0u}
    , decltype(_impl_.competitioncnt_){0u}
    , decltype(_impl_.registertime_){int64_t{0}}
    , decltype(_impl_.mvpcnt_){0u}
    , decltype(_impl_.chessplayerskin_){0u}
    , decltype(_impl_.followcount_){0u}
    , decltype(_impl_.fanscount_){0u}
    , decltype(_impl_.competitioncntdaily_){0u}
    , decltype(_impl_.bindoldplayercount_){0u}
    , decltype(_impl_.tmmr_){0u}
    , decltype(_impl_.cup_){0u}
    , decltype(_impl_.ffmmr_){0u}
    , decltype(_impl_.maxqueenrank_){0}
    , decltype(_impl_.maxtqueenrank_){0}
    , decltype(_impl_.maxfqueenrank_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTStat::~CSDTStat() {
  // @@protoc_insertion_point(destructor:msg.CSDTStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.seasoninfo_.Destruct();
  _impl_.seasoninfo_.~MapField();
  if (this != internal_default_instance()) delete _impl_.unseasondata_;
  if (this != internal_default_instance()) delete _impl_.curchessplr_;
}

void CSDTStat::ArenaDtor(void* object) {
  CSDTStat* _this = reinterpret_cast< CSDTStat* >(object);
  _this->_impl_.seasoninfo_.Destruct();
}
void CSDTStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTStat::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.seasoninfo_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.unseasondata_ != nullptr) {
    delete _impl_.unseasondata_;
  }
  _impl_.unseasondata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.curchessplr_ != nullptr) {
    delete _impl_.curchessplr_;
  }
  _impl_.curchessplr_ = nullptr;
  ::memset(&_impl_.mmr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxfqueenrank_) -
      reinterpret_cast<char*>(&_impl_.mmr_)) + sizeof(_impl_.maxfqueenrank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 MMR = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 CompetitionCnt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.competitioncnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MvpCnt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.mvpcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 RegisterTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.registertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ChessPlayerSkin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.chessplayerskin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 FollowCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.followcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 FansCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.fanscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .msg.CSDTRankSeasonInfo> SeasonInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.seasoninfo_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTRankSeasonData UnSeasonData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_unseasondata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 CompetitionCntDaily = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.competitioncntdaily_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 BindOldPlayerCount = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.bindoldplayercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TMMR = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.tmmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTChessPlayer CurChessPlr = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_curchessplr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Cup = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.cup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 FFMMR = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.ffmmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MaxQueenRank = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.maxqueenrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MaxTQueenRank = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.maxtqueenrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MaxFQueenRank = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.maxfqueenrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 MMR = 1;
  if (this->_internal_mmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mmr(), target);
  }

  // uint32 CompetitionCnt = 2;
  if (this->_internal_competitioncnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_competitioncnt(), target);
  }

  // uint32 MvpCnt = 3;
  if (this->_internal_mvpcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mvpcnt(), target);
  }

  // int64 RegisterTime = 4;
  if (this->_internal_registertime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_registertime(), target);
  }

  // uint32 ChessPlayerSkin = 5;
  if (this->_internal_chessplayerskin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_chessplayerskin(), target);
  }

  // uint32 FollowCount = 6;
  if (this->_internal_followcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_followcount(), target);
  }

  // uint32 FansCount = 7;
  if (this->_internal_fanscount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_fanscount(), target);
  }

  // map<uint32, .msg.CSDTRankSeasonInfo> SeasonInfo = 8;
  if (!this->_internal_seasoninfo().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::CSDTRankSeasonInfo>;
    using WireHelper = CSDTStat_SeasonInfoEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_seasoninfo();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    }
  }

  // .msg.CSDTRankSeasonData UnSeasonData = 9;
  if (this->_internal_has_unseasondata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::unseasondata(this),
        _Internal::unseasondata(this).GetCachedSize(), target, stream);
  }

  // uint32 CompetitionCntDaily = 10;
  if (this->_internal_competitioncntdaily() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_competitioncntdaily(), target);
  }

  // uint32 BindOldPlayerCount = 11;
  if (this->_internal_bindoldplayercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_bindoldplayercount(), target);
  }

  // uint32 TMMR = 12;
  if (this->_internal_tmmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_tmmr(), target);
  }

  // .msg.CSDTChessPlayer CurChessPlr = 13;
  if (this->_internal_has_curchessplr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::curchessplr(this),
        _Internal::curchessplr(this).GetCachedSize(), target, stream);
  }

  // uint32 Cup = 14;
  if (this->_internal_cup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_cup(), target);
  }

  // uint32 FFMMR = 15;
  if (this->_internal_ffmmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_ffmmr(), target);
  }

  // int32 MaxQueenRank = 16;
  if (this->_internal_maxqueenrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_maxqueenrank(), target);
  }

  // int32 MaxTQueenRank = 17;
  if (this->_internal_maxtqueenrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_maxtqueenrank(), target);
  }

  // int32 MaxFQueenRank = 18;
  if (this->_internal_maxfqueenrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_maxfqueenrank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTStat)
  return target;
}

size_t CSDTStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .msg.CSDTRankSeasonInfo> SeasonInfo = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_seasoninfo_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTRankSeasonInfo >::const_iterator
      it = this->_internal_seasoninfo().begin();
      it != this->_internal_seasoninfo().end(); ++it) {
    total_size += CSDTStat_SeasonInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .msg.CSDTRankSeasonData UnSeasonData = 9;
  if (this->_internal_has_unseasondata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.unseasondata_);
  }

  // .msg.CSDTChessPlayer CurChessPlr = 13;
  if (this->_internal_has_curchessplr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.curchessplr_);
  }

  // uint32 MMR = 1;
  if (this->_internal_mmr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mmr());
  }

  // uint32 CompetitionCnt = 2;
  if (this->_internal_competitioncnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_competitioncnt());
  }

  // int64 RegisterTime = 4;
  if (this->_internal_registertime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_registertime());
  }

  // uint32 MvpCnt = 3;
  if (this->_internal_mvpcnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mvpcnt());
  }

  // uint32 ChessPlayerSkin = 5;
  if (this->_internal_chessplayerskin() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chessplayerskin());
  }

  // uint32 FollowCount = 6;
  if (this->_internal_followcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_followcount());
  }

  // uint32 FansCount = 7;
  if (this->_internal_fanscount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fanscount());
  }

  // uint32 CompetitionCntDaily = 10;
  if (this->_internal_competitioncntdaily() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_competitioncntdaily());
  }

  // uint32 BindOldPlayerCount = 11;
  if (this->_internal_bindoldplayercount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bindoldplayercount());
  }

  // uint32 TMMR = 12;
  if (this->_internal_tmmr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tmmr());
  }

  // uint32 Cup = 14;
  if (this->_internal_cup() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cup());
  }

  // uint32 FFMMR = 15;
  if (this->_internal_ffmmr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ffmmr());
  }

  // int32 MaxQueenRank = 16;
  if (this->_internal_maxqueenrank() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_maxqueenrank());
  }

  // int32 MaxTQueenRank = 17;
  if (this->_internal_maxtqueenrank() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_maxtqueenrank());
  }

  // int32 MaxFQueenRank = 18;
  if (this->_internal_maxfqueenrank() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_maxfqueenrank());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTStat::GetClassData() const { return &_class_data_; }


void CSDTStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTStat*>(&to_msg);
  auto& from = static_cast<const CSDTStat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTStat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.seasoninfo_.MergeFrom(from._impl_.seasoninfo_);
  if (from._internal_has_unseasondata()) {
    _this->_internal_mutable_unseasondata()->::msg::CSDTRankSeasonData::MergeFrom(
        from._internal_unseasondata());
  }
  if (from._internal_has_curchessplr()) {
    _this->_internal_mutable_curchessplr()->::msg::CSDTChessPlayer::MergeFrom(
        from._internal_curchessplr());
  }
  if (from._internal_mmr() != 0) {
    _this->_internal_set_mmr(from._internal_mmr());
  }
  if (from._internal_competitioncnt() != 0) {
    _this->_internal_set_competitioncnt(from._internal_competitioncnt());
  }
  if (from._internal_registertime() != 0) {
    _this->_internal_set_registertime(from._internal_registertime());
  }
  if (from._internal_mvpcnt() != 0) {
    _this->_internal_set_mvpcnt(from._internal_mvpcnt());
  }
  if (from._internal_chessplayerskin() != 0) {
    _this->_internal_set_chessplayerskin(from._internal_chessplayerskin());
  }
  if (from._internal_followcount() != 0) {
    _this->_internal_set_followcount(from._internal_followcount());
  }
  if (from._internal_fanscount() != 0) {
    _this->_internal_set_fanscount(from._internal_fanscount());
  }
  if (from._internal_competitioncntdaily() != 0) {
    _this->_internal_set_competitioncntdaily(from._internal_competitioncntdaily());
  }
  if (from._internal_bindoldplayercount() != 0) {
    _this->_internal_set_bindoldplayercount(from._internal_bindoldplayercount());
  }
  if (from._internal_tmmr() != 0) {
    _this->_internal_set_tmmr(from._internal_tmmr());
  }
  if (from._internal_cup() != 0) {
    _this->_internal_set_cup(from._internal_cup());
  }
  if (from._internal_ffmmr() != 0) {
    _this->_internal_set_ffmmr(from._internal_ffmmr());
  }
  if (from._internal_maxqueenrank() != 0) {
    _this->_internal_set_maxqueenrank(from._internal_maxqueenrank());
  }
  if (from._internal_maxtqueenrank() != 0) {
    _this->_internal_set_maxtqueenrank(from._internal_maxtqueenrank());
  }
  if (from._internal_maxfqueenrank() != 0) {
    _this->_internal_set_maxfqueenrank(from._internal_maxfqueenrank());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTStat::CopyFrom(const CSDTStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTStat::IsInitialized() const {
  return true;
}

void CSDTStat::InternalSwap(CSDTStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.seasoninfo_.InternalSwap(&other->_impl_.seasoninfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTStat, _impl_.maxfqueenrank_)
      + sizeof(CSDTStat::_impl_.maxfqueenrank_)
      - PROTOBUF_FIELD_OFFSET(CSDTStat, _impl_.unseasondata_)>(
          reinterpret_cast<char*>(&_impl_.unseasondata_),
          reinterpret_cast<char*>(&other->_impl_.unseasondata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[79]);
}

// ===================================================================

class CSDTNumRankItem::_Internal {
 public:
};

CSDTNumRankItem::CSDTNumRankItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTNumRankItem)
}
CSDTNumRankItem::CSDTNumRankItem(const CSDTNumRankItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTNumRankItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.captain_){}
    , decltype(_impl_.number_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.captain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.captain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_captain().empty()) {
    _this->_impl_.captain_.Set(from._internal_captain(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.number_, &from._impl_.number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.score_) -
    reinterpret_cast<char*>(&_impl_.number_)) + sizeof(_impl_.score_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTNumRankItem)
}

inline void CSDTNumRankItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.captain_){}
    , decltype(_impl_.number_){0u}
    , decltype(_impl_.rank_){0}
    , decltype(_impl_.score_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.captain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.captain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTNumRankItem::~CSDTNumRankItem() {
  // @@protoc_insertion_point(destructor:msg.CSDTNumRankItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTNumRankItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.captain_.Destroy();
}

void CSDTNumRankItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTNumRankItem::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTNumRankItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.captain_.ClearToEmpty();
  ::memset(&_impl_.number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.score_) -
      reinterpret_cast<char*>(&_impl_.number_)) + sizeof(_impl_.score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTNumRankItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTNumRankItem.Id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Rank = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Captain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_captain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTNumRankItem.Captain"));
        } else
          goto handle_unusual;
        continue;
      // int64 Score = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTNumRankItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTNumRankItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTNumRankItem.Id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 Number = 4;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_number(), target);
  }

  // int32 Rank = 5;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_rank(), target);
  }

  // string Captain = 6;
  if (!this->_internal_captain().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_captain().data(), static_cast<int>(this->_internal_captain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTNumRankItem.Captain");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_captain(), target);
  }

  // int64 Score = 7;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTNumRankItem)
  return target;
}

size_t CSDTNumRankItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTNumRankItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string Captain = 6;
  if (!this->_internal_captain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_captain());
  }

  // uint32 Number = 4;
  if (this->_internal_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number());
  }

  // int32 Rank = 5;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }

  // int64 Score = 7;
  if (this->_internal_score() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_score());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTNumRankItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTNumRankItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTNumRankItem::GetClassData() const { return &_class_data_; }


void CSDTNumRankItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTNumRankItem*>(&to_msg);
  auto& from = static_cast<const CSDTNumRankItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTNumRankItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_captain().empty()) {
    _this->_internal_set_captain(from._internal_captain());
  }
  if (from._internal_number() != 0) {
    _this->_internal_set_number(from._internal_number());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  if (from._internal_score() != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTNumRankItem::CopyFrom(const CSDTNumRankItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTNumRankItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTNumRankItem::IsInitialized() const {
  return true;
}

void CSDTNumRankItem::InternalSwap(CSDTNumRankItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.captain_, lhs_arena,
      &other->_impl_.captain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTNumRankItem, _impl_.score_)
      + sizeof(CSDTNumRankItem::_impl_.score_)
      - PROTOBUF_FIELD_OFFSET(CSDTNumRankItem, _impl_.number_)>(
          reinterpret_cast<char*>(&_impl_.number_),
          reinterpret_cast<char*>(&other->_impl_.number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTNumRankItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[80]);
}

// ===================================================================

class CSDTWorldChat::_Internal {
 public:
  static const ::msg::CSDTPlayerSimpleInfo& baseinfo(const CSDTWorldChat* msg);
  static const ::msg::WorkshopSetting& wssetting(const CSDTWorldChat* msg);
  static const ::msg::CSDTItemMedal& medalinfo(const CSDTWorldChat* msg);
};

const ::msg::CSDTPlayerSimpleInfo&
CSDTWorldChat::_Internal::baseinfo(const CSDTWorldChat* msg) {
  return *msg->_impl_.baseinfo_;
}
const ::msg::WorkshopSetting&
CSDTWorldChat::_Internal::wssetting(const CSDTWorldChat* msg) {
  return *msg->_impl_.wssetting_;
}
const ::msg::CSDTItemMedal&
CSDTWorldChat::_Internal::medalinfo(const CSDTWorldChat* msg) {
  return *msg->_impl_.medalinfo_;
}
CSDTWorldChat::CSDTWorldChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTWorldChat)
}
CSDTWorldChat::CSDTWorldChat(const CSDTWorldChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTWorldChat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.workshopmapname_){}
    , decltype(_impl_.channelid_){}
    , decltype(_impl_.baseinfo_){nullptr}
    , decltype(_impl_.wssetting_){nullptr}
    , decltype(_impl_.medalinfo_){nullptr}
    , decltype(_impl_.emotionid_){}
    , decltype(_impl_.needlocalize_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.worldchattype_){}
    , decltype(_impl_.sourcetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.workshopmapname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workshopmapname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_workshopmapname().empty()) {
    _this->_impl_.workshopmapname_.Set(from._internal_workshopmapname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.channelid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channelid().empty()) {
    _this->_impl_.channelid_.Set(from._internal_channelid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_baseinfo()) {
    _this->_impl_.baseinfo_ = new ::msg::CSDTPlayerSimpleInfo(*from._impl_.baseinfo_);
  }
  if (from._internal_has_wssetting()) {
    _this->_impl_.wssetting_ = new ::msg::WorkshopSetting(*from._impl_.wssetting_);
  }
  if (from._internal_has_medalinfo()) {
    _this->_impl_.medalinfo_ = new ::msg::CSDTItemMedal(*from._impl_.medalinfo_);
  }
  ::memcpy(&_impl_.emotionid_, &from._impl_.emotionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sourcetype_) -
    reinterpret_cast<char*>(&_impl_.emotionid_)) + sizeof(_impl_.sourcetype_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTWorldChat)
}

inline void CSDTWorldChat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.workshopmapname_){}
    , decltype(_impl_.channelid_){}
    , decltype(_impl_.baseinfo_){nullptr}
    , decltype(_impl_.wssetting_){nullptr}
    , decltype(_impl_.medalinfo_){nullptr}
    , decltype(_impl_.emotionid_){0u}
    , decltype(_impl_.needlocalize_){false}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.worldchattype_){0}
    , decltype(_impl_.sourcetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.workshopmapname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.workshopmapname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channelid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTWorldChat::~CSDTWorldChat() {
  // @@protoc_insertion_point(destructor:msg.CSDTWorldChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTWorldChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
  _impl_.workshopmapname_.Destroy();
  _impl_.channelid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.baseinfo_;
  if (this != internal_default_instance()) delete _impl_.wssetting_;
  if (this != internal_default_instance()) delete _impl_.medalinfo_;
}

void CSDTWorldChat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTWorldChat::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTWorldChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  _impl_.workshopmapname_.ClearToEmpty();
  _impl_.channelid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.baseinfo_ != nullptr) {
    delete _impl_.baseinfo_;
  }
  _impl_.baseinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.wssetting_ != nullptr) {
    delete _impl_.wssetting_;
  }
  _impl_.wssetting_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.medalinfo_ != nullptr) {
    delete _impl_.medalinfo_;
  }
  _impl_.medalinfo_ = nullptr;
  ::memset(&_impl_.emotionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sourcetype_) -
      reinterpret_cast<char*>(&_impl_.emotionid_)) + sizeof(_impl_.sourcetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTWorldChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.CSDTPlayerSimpleInfo BaseInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_baseinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTWorldChat.Content"));
        } else
          goto handle_unusual;
        continue;
      // uint32 EmotionId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.emotionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool NeedLocalize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.needlocalize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.WORDCHAT WorldChatType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_worldchattype(static_cast<::msg::WORDCHAT>(val));
        } else
          goto handle_unusual;
        continue;
      // string WorkshopMapName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_workshopmapname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTWorldChat.WorkshopMapName"));
        } else
          goto handle_unusual;
        continue;
      // .msg.WorkshopSetting WSSetting = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_wssetting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CHATSOURCETYPE SourceType = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sourcetype(static_cast<::msg::CHATSOURCETYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string ChannelID = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_channelid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTWorldChat.ChannelID"));
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTItemMedal MedalInfo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_medalinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTWorldChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTWorldChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.CSDTPlayerSimpleInfo BaseInfo = 1;
  if (this->_internal_has_baseinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::baseinfo(this),
        _Internal::baseinfo(this).GetCachedSize(), target, stream);
  }

  // string Content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTWorldChat.Content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // uint32 EmotionId = 3;
  if (this->_internal_emotionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_emotionid(), target);
  }

  // bool NeedLocalize = 4;
  if (this->_internal_needlocalize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_needlocalize(), target);
  }

  // int64 Timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // .msg.WORDCHAT WorldChatType = 6;
  if (this->_internal_worldchattype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_worldchattype(), target);
  }

  // string WorkshopMapName = 7;
  if (!this->_internal_workshopmapname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workshopmapname().data(), static_cast<int>(this->_internal_workshopmapname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTWorldChat.WorkshopMapName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_workshopmapname(), target);
  }

  // .msg.WorkshopSetting WSSetting = 8;
  if (this->_internal_has_wssetting()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::wssetting(this),
        _Internal::wssetting(this).GetCachedSize(), target, stream);
  }

  // .msg.CHATSOURCETYPE SourceType = 9;
  if (this->_internal_sourcetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_sourcetype(), target);
  }

  // string ChannelID = 10;
  if (!this->_internal_channelid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTWorldChat.ChannelID");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_channelid(), target);
  }

  // .msg.CSDTItemMedal MedalInfo = 11;
  if (this->_internal_has_medalinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::medalinfo(this),
        _Internal::medalinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTWorldChat)
  return target;
}

size_t CSDTWorldChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTWorldChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string WorkshopMapName = 7;
  if (!this->_internal_workshopmapname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workshopmapname());
  }

  // string ChannelID = 10;
  if (!this->_internal_channelid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  // .msg.CSDTPlayerSimpleInfo BaseInfo = 1;
  if (this->_internal_has_baseinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.baseinfo_);
  }

  // .msg.WorkshopSetting WSSetting = 8;
  if (this->_internal_has_wssetting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.wssetting_);
  }

  // .msg.CSDTItemMedal MedalInfo = 11;
  if (this->_internal_has_medalinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.medalinfo_);
  }

  // uint32 EmotionId = 3;
  if (this->_internal_emotionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_emotionid());
  }

  // bool NeedLocalize = 4;
  if (this->_internal_needlocalize() != 0) {
    total_size += 1 + 1;
  }

  // int64 Timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // .msg.WORDCHAT WorldChatType = 6;
  if (this->_internal_worldchattype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_worldchattype());
  }

  // .msg.CHATSOURCETYPE SourceType = 9;
  if (this->_internal_sourcetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sourcetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTWorldChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTWorldChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTWorldChat::GetClassData() const { return &_class_data_; }


void CSDTWorldChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTWorldChat*>(&to_msg);
  auto& from = static_cast<const CSDTWorldChat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTWorldChat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_workshopmapname().empty()) {
    _this->_internal_set_workshopmapname(from._internal_workshopmapname());
  }
  if (!from._internal_channelid().empty()) {
    _this->_internal_set_channelid(from._internal_channelid());
  }
  if (from._internal_has_baseinfo()) {
    _this->_internal_mutable_baseinfo()->::msg::CSDTPlayerSimpleInfo::MergeFrom(
        from._internal_baseinfo());
  }
  if (from._internal_has_wssetting()) {
    _this->_internal_mutable_wssetting()->::msg::WorkshopSetting::MergeFrom(
        from._internal_wssetting());
  }
  if (from._internal_has_medalinfo()) {
    _this->_internal_mutable_medalinfo()->::msg::CSDTItemMedal::MergeFrom(
        from._internal_medalinfo());
  }
  if (from._internal_emotionid() != 0) {
    _this->_internal_set_emotionid(from._internal_emotionid());
  }
  if (from._internal_needlocalize() != 0) {
    _this->_internal_set_needlocalize(from._internal_needlocalize());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_worldchattype() != 0) {
    _this->_internal_set_worldchattype(from._internal_worldchattype());
  }
  if (from._internal_sourcetype() != 0) {
    _this->_internal_set_sourcetype(from._internal_sourcetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTWorldChat::CopyFrom(const CSDTWorldChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTWorldChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTWorldChat::IsInitialized() const {
  return true;
}

void CSDTWorldChat::InternalSwap(CSDTWorldChat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.workshopmapname_, lhs_arena,
      &other->_impl_.workshopmapname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channelid_, lhs_arena,
      &other->_impl_.channelid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTWorldChat, _impl_.sourcetype_)
      + sizeof(CSDTWorldChat::_impl_.sourcetype_)
      - PROTOBUF_FIELD_OFFSET(CSDTWorldChat, _impl_.baseinfo_)>(
          reinterpret_cast<char*>(&_impl_.baseinfo_),
          reinterpret_cast<char*>(&other->_impl_.baseinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTWorldChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[81]);
}

// ===================================================================

class CSDTBuffAct::_Internal {
 public:
};

CSDTBuffAct::CSDTBuffAct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTBuffAct)
}
CSDTBuffAct::CSDTBuffAct(const CSDTBuffAct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTBuffAct* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groupid_){}
    , decltype(_impl_.actid_){}
    , decltype(_impl_.actstatus_){}
    , decltype(_impl_.showtime_){}
    , decltype(_impl_.endshowtime_){}
    , decltype(_impl_.starttime_){}
    , decltype(_impl_.endtime_){}
    , decltype(_impl_.buffstarttime_){}
    , decltype(_impl_.buffendtime_){}
    , decltype(_impl_.acttype_){}
    , decltype(_impl_.bufftype_){}
    , decltype(_impl_.buffstartlv_){}
    , decltype(_impl_.buffendlv_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.groupid_, &from._impl_.groupid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.buffendlv_) -
    reinterpret_cast<char*>(&_impl_.groupid_)) + sizeof(_impl_.buffendlv_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTBuffAct)
}

inline void CSDTBuffAct::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.groupid_){0u}
    , decltype(_impl_.actid_){0u}
    , decltype(_impl_.actstatus_){0}
    , decltype(_impl_.showtime_){0u}
    , decltype(_impl_.endshowtime_){0u}
    , decltype(_impl_.starttime_){0u}
    , decltype(_impl_.endtime_){0u}
    , decltype(_impl_.buffstarttime_){0u}
    , decltype(_impl_.buffendtime_){0u}
    , decltype(_impl_.acttype_){0}
    , decltype(_impl_.bufftype_){0}
    , decltype(_impl_.buffstartlv_){0u}
    , decltype(_impl_.buffendlv_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTBuffAct::~CSDTBuffAct() {
  // @@protoc_insertion_point(destructor:msg.CSDTBuffAct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTBuffAct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDTBuffAct::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTBuffAct::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTBuffAct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.groupid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.buffendlv_) -
      reinterpret_cast<char*>(&_impl_.groupid_)) + sizeof(_impl_.buffendlv_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTBuffAct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 GroupId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ActId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.actid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.BUFFACTSTATUS ActStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_actstatus(static_cast<::msg::BUFFACTSTATUS>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 ShowTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.showtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 EndShowTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.endshowtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 StartTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 EndTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 BuffStartTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.buffstarttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 BuffEndTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.buffendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.ACTIVITYTYPE ActType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_acttype(static_cast<::msg::ACTIVITYTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.BuffEffectType BuffType = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bufftype(static_cast<::msg::BuffEffectType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 BuffStartLv = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.buffstartlv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 BuffEndLv = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.buffendlv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTBuffAct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTBuffAct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 GroupId = 1;
  if (this->_internal_groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_groupid(), target);
  }

  // uint32 ActId = 2;
  if (this->_internal_actid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_actid(), target);
  }

  // .msg.BUFFACTSTATUS ActStatus = 3;
  if (this->_internal_actstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_actstatus(), target);
  }

  // uint32 ShowTime = 4;
  if (this->_internal_showtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_showtime(), target);
  }

  // uint32 EndShowTime = 5;
  if (this->_internal_endshowtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_endshowtime(), target);
  }

  // uint32 StartTime = 6;
  if (this->_internal_starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_starttime(), target);
  }

  // uint32 EndTime = 7;
  if (this->_internal_endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_endtime(), target);
  }

  // uint32 BuffStartTime = 8;
  if (this->_internal_buffstarttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_buffstarttime(), target);
  }

  // uint32 BuffEndTime = 9;
  if (this->_internal_buffendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_buffendtime(), target);
  }

  // .msg.ACTIVITYTYPE ActType = 10;
  if (this->_internal_acttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_acttype(), target);
  }

  // .msg.BuffEffectType BuffType = 11;
  if (this->_internal_bufftype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_bufftype(), target);
  }

  // uint32 BuffStartLv = 12;
  if (this->_internal_buffstartlv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_buffstartlv(), target);
  }

  // uint32 BuffEndLv = 13;
  if (this->_internal_buffendlv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_buffendlv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTBuffAct)
  return target;
}

size_t CSDTBuffAct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTBuffAct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 GroupId = 1;
  if (this->_internal_groupid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_groupid());
  }

  // uint32 ActId = 2;
  if (this->_internal_actid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_actid());
  }

  // .msg.BUFFACTSTATUS ActStatus = 3;
  if (this->_internal_actstatus() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_actstatus());
  }

  // uint32 ShowTime = 4;
  if (this->_internal_showtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_showtime());
  }

  // uint32 EndShowTime = 5;
  if (this->_internal_endshowtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_endshowtime());
  }

  // uint32 StartTime = 6;
  if (this->_internal_starttime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_starttime());
  }

  // uint32 EndTime = 7;
  if (this->_internal_endtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_endtime());
  }

  // uint32 BuffStartTime = 8;
  if (this->_internal_buffstarttime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_buffstarttime());
  }

  // uint32 BuffEndTime = 9;
  if (this->_internal_buffendtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_buffendtime());
  }

  // .msg.ACTIVITYTYPE ActType = 10;
  if (this->_internal_acttype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_acttype());
  }

  // .msg.BuffEffectType BuffType = 11;
  if (this->_internal_bufftype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_bufftype());
  }

  // uint32 BuffStartLv = 12;
  if (this->_internal_buffstartlv() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_buffstartlv());
  }

  // uint32 BuffEndLv = 13;
  if (this->_internal_buffendlv() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_buffendlv());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTBuffAct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTBuffAct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTBuffAct::GetClassData() const { return &_class_data_; }


void CSDTBuffAct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTBuffAct*>(&to_msg);
  auto& from = static_cast<const CSDTBuffAct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTBuffAct)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_groupid() != 0) {
    _this->_internal_set_groupid(from._internal_groupid());
  }
  if (from._internal_actid() != 0) {
    _this->_internal_set_actid(from._internal_actid());
  }
  if (from._internal_actstatus() != 0) {
    _this->_internal_set_actstatus(from._internal_actstatus());
  }
  if (from._internal_showtime() != 0) {
    _this->_internal_set_showtime(from._internal_showtime());
  }
  if (from._internal_endshowtime() != 0) {
    _this->_internal_set_endshowtime(from._internal_endshowtime());
  }
  if (from._internal_starttime() != 0) {
    _this->_internal_set_starttime(from._internal_starttime());
  }
  if (from._internal_endtime() != 0) {
    _this->_internal_set_endtime(from._internal_endtime());
  }
  if (from._internal_buffstarttime() != 0) {
    _this->_internal_set_buffstarttime(from._internal_buffstarttime());
  }
  if (from._internal_buffendtime() != 0) {
    _this->_internal_set_buffendtime(from._internal_buffendtime());
  }
  if (from._internal_acttype() != 0) {
    _this->_internal_set_acttype(from._internal_acttype());
  }
  if (from._internal_bufftype() != 0) {
    _this->_internal_set_bufftype(from._internal_bufftype());
  }
  if (from._internal_buffstartlv() != 0) {
    _this->_internal_set_buffstartlv(from._internal_buffstartlv());
  }
  if (from._internal_buffendlv() != 0) {
    _this->_internal_set_buffendlv(from._internal_buffendlv());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTBuffAct::CopyFrom(const CSDTBuffAct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTBuffAct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTBuffAct::IsInitialized() const {
  return true;
}

void CSDTBuffAct::InternalSwap(CSDTBuffAct* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTBuffAct, _impl_.buffendlv_)
      + sizeof(CSDTBuffAct::_impl_.buffendlv_)
      - PROTOBUF_FIELD_OFFSET(CSDTBuffAct, _impl_.groupid_)>(
          reinterpret_cast<char*>(&_impl_.groupid_),
          reinterpret_cast<char*>(&other->_impl_.groupid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTBuffAct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[82]);
}

// ===================================================================

CSDTMail_DictEntry_DoNotUse::CSDTMail_DictEntry_DoNotUse() {}
CSDTMail_DictEntry_DoNotUse::CSDTMail_DictEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTMail_DictEntry_DoNotUse::MergeFrom(const CSDTMail_DictEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTMail_DictEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[83]);
}

// ===================================================================

class CSDTMail::_Internal {
 public:
  static const ::msg::MailExtData& extdata(const CSDTMail* msg);
};

const ::msg::MailExtData&
CSDTMail::_Internal::extdata(const CSDTMail* msg) {
  return *msg->_impl_.extdata_;
}
CSDTMail::CSDTMail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTMail::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTMail)
}
CSDTMail::CSDTMail(const CSDTMail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTMail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.awards_){from._impl_.awards_}
    , /*decltype(_impl_.dict_)*/{}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.webopendata_){}
    , decltype(_impl_.extdata_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.ts_){}
    , decltype(_impl_.isread_){}
    , decltype(_impl_.isgetaward_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.endtime_){}
    , decltype(_impl_.awardsource_){}
    , decltype(_impl_.webop_){}
    , decltype(_impl_.mustwaittime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.dict_.MergeFrom(from._impl_.dict_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.webopendata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.webopendata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_webopendata().empty()) {
    _this->_impl_.webopendata_.Set(from._internal_webopendata(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_extdata()) {
    _this->_impl_.extdata_ = new ::msg::MailExtData(*from._impl_.extdata_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mustwaittime_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.mustwaittime_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTMail)
}

inline void CSDTMail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.awards_){arena}
    , /*decltype(_impl_.dict_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.webopendata_){}
    , decltype(_impl_.extdata_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.ts_){int64_t{0}}
    , decltype(_impl_.isread_){false}
    , decltype(_impl_.isgetaward_){false}
    , decltype(_impl_.flag_){0u}
    , decltype(_impl_.endtime_){int64_t{0}}
    , decltype(_impl_.awardsource_){0}
    , decltype(_impl_.webop_){0}
    , decltype(_impl_.mustwaittime_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.webopendata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.webopendata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTMail::~CSDTMail() {
  // @@protoc_insertion_point(destructor:msg.CSDTMail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTMail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.awards_.~RepeatedPtrField();
  _impl_.dict_.Destruct();
  _impl_.dict_.~MapField();
  _impl_.title_.Destroy();
  _impl_.content_.Destroy();
  _impl_.webopendata_.Destroy();
  if (this != internal_default_instance()) delete _impl_.extdata_;
}

void CSDTMail::ArenaDtor(void* object) {
  CSDTMail* _this = reinterpret_cast< CSDTMail* >(object);
  _this->_impl_.dict_.Destruct();
}
void CSDTMail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTMail::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTMail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.awards_.Clear();
  _impl_.dict_.Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.webopendata_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.extdata_ != nullptr) {
    delete _impl_.extdata_;
  }
  _impl_.extdata_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mustwaittime_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.mustwaittime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTMail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTMail.Title"));
        } else
          goto handle_unusual;
        continue;
      // string Content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTMail.Content"));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Award Awards = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_awards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 Ts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsRead = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.isread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsGetAward = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.isgetaward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Flag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.SOURCE AwardSource = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_awardsource(static_cast<::msg::SOURCE>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> Dict = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.dict_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .msg.MailExtData ExtData = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_extdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 EndTime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.WEBOP WebOp = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_webop(static_cast<::msg::WEBOP>(val));
        } else
          goto handle_unusual;
        continue;
      // string WebOpenData = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_webopendata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTMail.WebOpenData"));
        } else
          goto handle_unusual;
        continue;
      // int64 MustWaitTime = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.mustwaittime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTMail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTMail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string Title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTMail.Title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string Content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTMail.Content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  // repeated .msg.Award Awards = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_awards_size()); i < n; i++) {
    const auto& repfield = this->_internal_awards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 Ts = 5;
  if (this->_internal_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_ts(), target);
  }

  // bool IsRead = 6;
  if (this->_internal_isread() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_isread(), target);
  }

  // bool IsGetAward = 7;
  if (this->_internal_isgetaward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_isgetaward(), target);
  }

  // uint32 Flag = 8;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_flag(), target);
  }

  // .msg.SOURCE AwardSource = 9;
  if (this->_internal_awardsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_awardsource(), target);
  }

  // map<string, string> Dict = 10;
  if (!this->_internal_dict().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = CSDTMail_DictEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_dict();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.CSDTMail.DictEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.CSDTMail.DictEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .msg.MailExtData ExtData = 11;
  if (this->_internal_has_extdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::extdata(this),
        _Internal::extdata(this).GetCachedSize(), target, stream);
  }

  // int64 EndTime = 12;
  if (this->_internal_endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_endtime(), target);
  }

  // .msg.WEBOP WebOp = 30;
  if (this->_internal_webop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      30, this->_internal_webop(), target);
  }

  // string WebOpenData = 31;
  if (!this->_internal_webopendata().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_webopendata().data(), static_cast<int>(this->_internal_webopendata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTMail.WebOpenData");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_webopendata(), target);
  }

  // int64 MustWaitTime = 32;
  if (this->_internal_mustwaittime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(32, this->_internal_mustwaittime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTMail)
  return target;
}

size_t CSDTMail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTMail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.Award Awards = 4;
  total_size += 1UL * this->_internal_awards_size();
  for (const auto& msg : this->_impl_.awards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> Dict = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dict_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_dict().begin();
      it != this->_internal_dict().end(); ++it) {
    total_size += CSDTMail_DictEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string Title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string Content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string WebOpenData = 31;
  if (!this->_internal_webopendata().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_webopendata());
  }

  // .msg.MailExtData ExtData = 11;
  if (this->_internal_has_extdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extdata_);
  }

  // uint64 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // int64 Ts = 5;
  if (this->_internal_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ts());
  }

  // bool IsRead = 6;
  if (this->_internal_isread() != 0) {
    total_size += 1 + 1;
  }

  // bool IsGetAward = 7;
  if (this->_internal_isgetaward() != 0) {
    total_size += 1 + 1;
  }

  // uint32 Flag = 8;
  if (this->_internal_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flag());
  }

  // int64 EndTime = 12;
  if (this->_internal_endtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_endtime());
  }

  // .msg.SOURCE AwardSource = 9;
  if (this->_internal_awardsource() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_awardsource());
  }

  // .msg.WEBOP WebOp = 30;
  if (this->_internal_webop() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_webop());
  }

  // int64 MustWaitTime = 32;
  if (this->_internal_mustwaittime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_mustwaittime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTMail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTMail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTMail::GetClassData() const { return &_class_data_; }


void CSDTMail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTMail*>(&to_msg);
  auto& from = static_cast<const CSDTMail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTMail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.awards_.MergeFrom(from._impl_.awards_);
  _this->_impl_.dict_.MergeFrom(from._impl_.dict_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_webopendata().empty()) {
    _this->_internal_set_webopendata(from._internal_webopendata());
  }
  if (from._internal_has_extdata()) {
    _this->_internal_mutable_extdata()->::msg::MailExtData::MergeFrom(
        from._internal_extdata());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_ts() != 0) {
    _this->_internal_set_ts(from._internal_ts());
  }
  if (from._internal_isread() != 0) {
    _this->_internal_set_isread(from._internal_isread());
  }
  if (from._internal_isgetaward() != 0) {
    _this->_internal_set_isgetaward(from._internal_isgetaward());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_endtime() != 0) {
    _this->_internal_set_endtime(from._internal_endtime());
  }
  if (from._internal_awardsource() != 0) {
    _this->_internal_set_awardsource(from._internal_awardsource());
  }
  if (from._internal_webop() != 0) {
    _this->_internal_set_webop(from._internal_webop());
  }
  if (from._internal_mustwaittime() != 0) {
    _this->_internal_set_mustwaittime(from._internal_mustwaittime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTMail::CopyFrom(const CSDTMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTMail::IsInitialized() const {
  return true;
}

void CSDTMail::InternalSwap(CSDTMail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.awards_.InternalSwap(&other->_impl_.awards_);
  _impl_.dict_.InternalSwap(&other->_impl_.dict_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.webopendata_, lhs_arena,
      &other->_impl_.webopendata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTMail, _impl_.mustwaittime_)
      + sizeof(CSDTMail::_impl_.mustwaittime_)
      - PROTOBUF_FIELD_OFFSET(CSDTMail, _impl_.extdata_)>(
          reinterpret_cast<char*>(&_impl_.extdata_),
          reinterpret_cast<char*>(&other->_impl_.extdata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTMail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[84]);
}

// ===================================================================

class CSDTNoticeInfo::_Internal {
 public:
};

CSDTNoticeInfo::CSDTNoticeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTNoticeInfo)
}
CSDTNoticeInfo::CSDTNoticeInfo(const CSDTNoticeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTNoticeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSDTNoticeInfo)
}

inline void CSDTNoticeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTNoticeInfo::~CSDTNoticeInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTNoticeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTNoticeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
}

void CSDTNoticeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTNoticeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTNoticeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTNoticeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.CSDTNotice Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTNoticeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTNoticeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.CSDTNotice Data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTNoticeInfo)
  return target;
}

size_t CSDTNoticeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTNoticeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTNotice Data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTNoticeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTNoticeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTNoticeInfo::GetClassData() const { return &_class_data_; }


void CSDTNoticeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTNoticeInfo*>(&to_msg);
  auto& from = static_cast<const CSDTNoticeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTNoticeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTNoticeInfo::CopyFrom(const CSDTNoticeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTNoticeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTNoticeInfo::IsInitialized() const {
  return true;
}

void CSDTNoticeInfo::InternalSwap(CSDTNoticeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTNoticeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[85]);
}

// ===================================================================

class CSDTNotice::_Internal {
 public:
};

CSDTNotice::CSDTNotice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTNotice)
}
CSDTNotice::CSDTNotice(const CSDTNotice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTNotice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.countrylist_){from._impl_.countrylist_}
    , decltype(_impl_.webcontent_){from._impl_.webcontent_}
    , decltype(_impl_.downloadlist_){from._impl_.downloadlist_}
    , decltype(_impl_.platformlist_){from._impl_.platformlist_}
    , /*decltype(_impl_._platformlist_cached_byte_size_)*/{0}
    , decltype(_impl_.apkversionlist_){from._impl_.apkversionlist_}
    , decltype(_impl_.excludedownload_){from._impl_.excludedownload_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.picurl_){}
    , decltype(_impl_.skipurl_){}
    , decltype(_impl_.skipinterface_){}
    , decltype(_impl_.coverpicurl_){}
    , decltype(_impl_.subtitle_){}
    , decltype(_impl_.pcskipurl_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.ts_){}
    , decltype(_impl_.labeltype_){}
    , decltype(_impl_.showtype_){}
    , decltype(_impl_.contenttype_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.endtime_){}
    , decltype(_impl_.noticetype_){}
    , decltype(_impl_.tap_){}
    , decltype(_impl_.skiptab_){}
    , decltype(_impl_.picjumptype_){}
    , decltype(_impl_.magnetismtype_){}
    , decltype(_impl_.jumpgoodsid_){}
    , decltype(_impl_.sort_){}
    , decltype(_impl_.starttime_){}
    , decltype(_impl_.needredpoint_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), 
      _this->GetArenaForAllocation());
  }
  _impl_.picurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.picurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_picurl().empty()) {
    _this->_impl_.picurl_.Set(from._internal_picurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.skipurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skipurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_skipurl().empty()) {
    _this->_impl_.skipurl_.Set(from._internal_skipurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.skipinterface_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skipinterface_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_skipinterface().empty()) {
    _this->_impl_.skipinterface_.Set(from._internal_skipinterface(), 
      _this->GetArenaForAllocation());
  }
  _impl_.coverpicurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coverpicurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_coverpicurl().empty()) {
    _this->_impl_.coverpicurl_.Set(from._internal_coverpicurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.subtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subtitle().empty()) {
    _this->_impl_.subtitle_.Set(from._internal_subtitle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pcskipurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pcskipurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pcskipurl().empty()) {
    _this->_impl_.pcskipurl_.Set(from._internal_pcskipurl(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.needredpoint_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.needredpoint_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTNotice)
}

inline void CSDTNotice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.countrylist_){arena}
    , decltype(_impl_.webcontent_){arena}
    , decltype(_impl_.downloadlist_){arena}
    , decltype(_impl_.platformlist_){arena}
    , /*decltype(_impl_._platformlist_cached_byte_size_)*/{0}
    , decltype(_impl_.apkversionlist_){arena}
    , decltype(_impl_.excludedownload_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.picurl_){}
    , decltype(_impl_.skipurl_){}
    , decltype(_impl_.skipinterface_){}
    , decltype(_impl_.coverpicurl_){}
    , decltype(_impl_.subtitle_){}
    , decltype(_impl_.pcskipurl_){}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.ts_){int64_t{0}}
    , decltype(_impl_.labeltype_){0}
    , decltype(_impl_.showtype_){0}
    , decltype(_impl_.contenttype_){0}
    , decltype(_impl_.flag_){0u}
    , decltype(_impl_.endtime_){int64_t{0}}
    , decltype(_impl_.noticetype_){0}
    , decltype(_impl_.tap_){0}
    , decltype(_impl_.skiptab_){0u}
    , decltype(_impl_.picjumptype_){0}
    , decltype(_impl_.magnetismtype_){0}
    , decltype(_impl_.jumpgoodsid_){0u}
    , decltype(_impl_.sort_){int64_t{0}}
    , decltype(_impl_.starttime_){int64_t{0}}
    , decltype(_impl_.needredpoint_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.picurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.picurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.skipurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skipurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.skipinterface_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skipinterface_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.coverpicurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coverpicurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.subtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pcskipurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pcskipurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTNotice::~CSDTNotice() {
  // @@protoc_insertion_point(destructor:msg.CSDTNotice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTNotice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.countrylist_.~RepeatedPtrField();
  _impl_.webcontent_.~RepeatedPtrField();
  _impl_.downloadlist_.~RepeatedPtrField();
  _impl_.platformlist_.~RepeatedField();
  _impl_.apkversionlist_.~RepeatedPtrField();
  _impl_.excludedownload_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.content_.Destroy();
  _impl_.label_.Destroy();
  _impl_.picurl_.Destroy();
  _impl_.skipurl_.Destroy();
  _impl_.skipinterface_.Destroy();
  _impl_.coverpicurl_.Destroy();
  _impl_.subtitle_.Destroy();
  _impl_.pcskipurl_.Destroy();
}

void CSDTNotice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTNotice::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTNotice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.countrylist_.Clear();
  _impl_.webcontent_.Clear();
  _impl_.downloadlist_.Clear();
  _impl_.platformlist_.Clear();
  _impl_.apkversionlist_.Clear();
  _impl_.excludedownload_.Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.label_.ClearToEmpty();
  _impl_.picurl_.ClearToEmpty();
  _impl_.skipurl_.ClearToEmpty();
  _impl_.skipinterface_.ClearToEmpty();
  _impl_.coverpicurl_.ClearToEmpty();
  _impl_.subtitle_.ClearToEmpty();
  _impl_.pcskipurl_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.needredpoint_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.needredpoint_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTNotice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTNotice.Title"));
        } else
          goto handle_unusual;
        continue;
      // string Content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTNotice.Content"));
        } else
          goto handle_unusual;
        continue;
      // string Label = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTNotice.Label"));
        } else
          goto handle_unusual;
        continue;
      // .msg.LABELTYPE LabelType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_labeltype(static_cast<::msg::LABELTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 Ts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.NOTICESHOWTYPE ShowType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_showtype(static_cast<::msg::NOTICESHOWTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.NOTICECONTENTTYPE ContentType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_contenttype(static_cast<::msg::NOTICECONTENTTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string PicUrl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_picurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTNotice.PicUrl"));
        } else
          goto handle_unusual;
        continue;
      // string SkipUrl = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_skipurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTNotice.SkipUrl"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Flag = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 EndTime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.NOTICETYPE NoticeType = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_noticetype(static_cast<::msg::NOTICETYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string CountryList = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_countrylist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTNotice.CountryList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .msg.NOTICETAP Tap = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tap(static_cast<::msg::NOTICETAP>(val));
        } else
          goto handle_unusual;
        continue;
      // string SkipInterface = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_skipinterface();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTNotice.SkipInterface"));
        } else
          goto handle_unusual;
        continue;
      // uint32 SkipTab = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.skiptab_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PICNOTICEJUMPTYPE PicJumpType = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_picjumptype(static_cast<::msg::PICNOTICEJUMPTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.GMLanguageInfo WebContent = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_webcontent(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string DownloadList = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_downloadlist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTNotice.DownloadList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.PLATFORMTYPE PlatformList = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_platformlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 168) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_platformlist(static_cast<::msg::PLATFORMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.MAGNETISMTYPE MagnetismType = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_magnetismtype(static_cast<::msg::MAGNETISMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string CoverPicUrl = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_coverpicurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTNotice.CoverPicUrl"));
        } else
          goto handle_unusual;
        continue;
      // string Subtitle = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_subtitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTNotice.Subtitle"));
        } else
          goto handle_unusual;
        continue;
      // uint32 JumpGoodsId = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.jumpgoodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ApkVersionList = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_apkversionlist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTNotice.ApkVersionList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string PCSkipUrl = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_pcskipurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTNotice.PCSkipUrl"));
        } else
          goto handle_unusual;
        continue;
      // int64 Sort = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.sort_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool NeedRedPoint = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.needredpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ExcludeDownload = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_excludedownload();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTNotice.ExcludeDownload"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 StartTime = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTNotice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTNotice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string Title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTNotice.Title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string Content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTNotice.Content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  // string Label = 4;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTNotice.Label");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_label(), target);
  }

  // .msg.LABELTYPE LabelType = 5;
  if (this->_internal_labeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_labeltype(), target);
  }

  // int64 Ts = 6;
  if (this->_internal_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_ts(), target);
  }

  // .msg.NOTICESHOWTYPE ShowType = 7;
  if (this->_internal_showtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_showtype(), target);
  }

  // .msg.NOTICECONTENTTYPE ContentType = 8;
  if (this->_internal_contenttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_contenttype(), target);
  }

  // string PicUrl = 9;
  if (!this->_internal_picurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_picurl().data(), static_cast<int>(this->_internal_picurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTNotice.PicUrl");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_picurl(), target);
  }

  // string SkipUrl = 10;
  if (!this->_internal_skipurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skipurl().data(), static_cast<int>(this->_internal_skipurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTNotice.SkipUrl");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_skipurl(), target);
  }

  // uint32 Flag = 11;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_flag(), target);
  }

  // int64 EndTime = 12;
  if (this->_internal_endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_endtime(), target);
  }

  // .msg.NOTICETYPE NoticeType = 13;
  if (this->_internal_noticetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_noticetype(), target);
  }

  // repeated string CountryList = 14;
  for (int i = 0, n = this->_internal_countrylist_size(); i < n; i++) {
    const auto& s = this->_internal_countrylist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTNotice.CountryList");
    target = stream->WriteString(14, s, target);
  }

  // .msg.NOTICETAP Tap = 15;
  if (this->_internal_tap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_tap(), target);
  }

  // string SkipInterface = 16;
  if (!this->_internal_skipinterface().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skipinterface().data(), static_cast<int>(this->_internal_skipinterface().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTNotice.SkipInterface");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_skipinterface(), target);
  }

  // uint32 SkipTab = 17;
  if (this->_internal_skiptab() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_skiptab(), target);
  }

  // .msg.PICNOTICEJUMPTYPE PicJumpType = 18;
  if (this->_internal_picjumptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_picjumptype(), target);
  }

  // repeated .msg.GMLanguageInfo WebContent = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_webcontent_size()); i < n; i++) {
    const auto& repfield = this->_internal_webcontent(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string DownloadList = 20;
  for (int i = 0, n = this->_internal_downloadlist_size(); i < n; i++) {
    const auto& s = this->_internal_downloadlist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTNotice.DownloadList");
    target = stream->WriteString(20, s, target);
  }

  // repeated .msg.PLATFORMTYPE PlatformList = 21;
  {
    int byte_size = _impl_._platformlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          21, _impl_.platformlist_, byte_size, target);
    }
  }

  // .msg.MAGNETISMTYPE MagnetismType = 22;
  if (this->_internal_magnetismtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      22, this->_internal_magnetismtype(), target);
  }

  // string CoverPicUrl = 23;
  if (!this->_internal_coverpicurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_coverpicurl().data(), static_cast<int>(this->_internal_coverpicurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTNotice.CoverPicUrl");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_coverpicurl(), target);
  }

  // string Subtitle = 24;
  if (!this->_internal_subtitle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subtitle().data(), static_cast<int>(this->_internal_subtitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTNotice.Subtitle");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_subtitle(), target);
  }

  // uint32 JumpGoodsId = 25;
  if (this->_internal_jumpgoodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_jumpgoodsid(), target);
  }

  // repeated string ApkVersionList = 26;
  for (int i = 0, n = this->_internal_apkversionlist_size(); i < n; i++) {
    const auto& s = this->_internal_apkversionlist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTNotice.ApkVersionList");
    target = stream->WriteString(26, s, target);
  }

  // string PCSkipUrl = 27;
  if (!this->_internal_pcskipurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pcskipurl().data(), static_cast<int>(this->_internal_pcskipurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTNotice.PCSkipUrl");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_pcskipurl(), target);
  }

  // int64 Sort = 28;
  if (this->_internal_sort() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(28, this->_internal_sort(), target);
  }

  // bool NeedRedPoint = 29;
  if (this->_internal_needredpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_needredpoint(), target);
  }

  // repeated string ExcludeDownload = 30;
  for (int i = 0, n = this->_internal_excludedownload_size(); i < n; i++) {
    const auto& s = this->_internal_excludedownload(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTNotice.ExcludeDownload");
    target = stream->WriteString(30, s, target);
  }

  // int64 StartTime = 31;
  if (this->_internal_starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(31, this->_internal_starttime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTNotice)
  return target;
}

size_t CSDTNotice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTNotice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string CountryList = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.countrylist_.size());
  for (int i = 0, n = _impl_.countrylist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.countrylist_.Get(i));
  }

  // repeated .msg.GMLanguageInfo WebContent = 19;
  total_size += 2UL * this->_internal_webcontent_size();
  for (const auto& msg : this->_impl_.webcontent_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string DownloadList = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.downloadlist_.size());
  for (int i = 0, n = _impl_.downloadlist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.downloadlist_.Get(i));
  }

  // repeated .msg.PLATFORMTYPE PlatformList = 21;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_platformlist_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_platformlist(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._platformlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string ApkVersionList = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.apkversionlist_.size());
  for (int i = 0, n = _impl_.apkversionlist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.apkversionlist_.Get(i));
  }

  // repeated string ExcludeDownload = 30;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.excludedownload_.size());
  for (int i = 0, n = _impl_.excludedownload_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.excludedownload_.Get(i));
  }

  // string Title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string Content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string Label = 4;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // string PicUrl = 9;
  if (!this->_internal_picurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_picurl());
  }

  // string SkipUrl = 10;
  if (!this->_internal_skipurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skipurl());
  }

  // string SkipInterface = 16;
  if (!this->_internal_skipinterface().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skipinterface());
  }

  // string CoverPicUrl = 23;
  if (!this->_internal_coverpicurl().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_coverpicurl());
  }

  // string Subtitle = 24;
  if (!this->_internal_subtitle().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subtitle());
  }

  // string PCSkipUrl = 27;
  if (!this->_internal_pcskipurl().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pcskipurl());
  }

  // int64 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 Ts = 6;
  if (this->_internal_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ts());
  }

  // .msg.LABELTYPE LabelType = 5;
  if (this->_internal_labeltype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_labeltype());
  }

  // .msg.NOTICESHOWTYPE ShowType = 7;
  if (this->_internal_showtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_showtype());
  }

  // .msg.NOTICECONTENTTYPE ContentType = 8;
  if (this->_internal_contenttype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_contenttype());
  }

  // uint32 Flag = 11;
  if (this->_internal_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flag());
  }

  // int64 EndTime = 12;
  if (this->_internal_endtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_endtime());
  }

  // .msg.NOTICETYPE NoticeType = 13;
  if (this->_internal_noticetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_noticetype());
  }

  // .msg.NOTICETAP Tap = 15;
  if (this->_internal_tap() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tap());
  }

  // uint32 SkipTab = 17;
  if (this->_internal_skiptab() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_skiptab());
  }

  // .msg.PICNOTICEJUMPTYPE PicJumpType = 18;
  if (this->_internal_picjumptype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_picjumptype());
  }

  // .msg.MAGNETISMTYPE MagnetismType = 22;
  if (this->_internal_magnetismtype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_magnetismtype());
  }

  // uint32 JumpGoodsId = 25;
  if (this->_internal_jumpgoodsid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_jumpgoodsid());
  }

  // int64 Sort = 28;
  if (this->_internal_sort() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_sort());
  }

  // int64 StartTime = 31;
  if (this->_internal_starttime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_starttime());
  }

  // bool NeedRedPoint = 29;
  if (this->_internal_needredpoint() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTNotice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTNotice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTNotice::GetClassData() const { return &_class_data_; }


void CSDTNotice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTNotice*>(&to_msg);
  auto& from = static_cast<const CSDTNotice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTNotice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.countrylist_.MergeFrom(from._impl_.countrylist_);
  _this->_impl_.webcontent_.MergeFrom(from._impl_.webcontent_);
  _this->_impl_.downloadlist_.MergeFrom(from._impl_.downloadlist_);
  _this->_impl_.platformlist_.MergeFrom(from._impl_.platformlist_);
  _this->_impl_.apkversionlist_.MergeFrom(from._impl_.apkversionlist_);
  _this->_impl_.excludedownload_.MergeFrom(from._impl_.excludedownload_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (!from._internal_picurl().empty()) {
    _this->_internal_set_picurl(from._internal_picurl());
  }
  if (!from._internal_skipurl().empty()) {
    _this->_internal_set_skipurl(from._internal_skipurl());
  }
  if (!from._internal_skipinterface().empty()) {
    _this->_internal_set_skipinterface(from._internal_skipinterface());
  }
  if (!from._internal_coverpicurl().empty()) {
    _this->_internal_set_coverpicurl(from._internal_coverpicurl());
  }
  if (!from._internal_subtitle().empty()) {
    _this->_internal_set_subtitle(from._internal_subtitle());
  }
  if (!from._internal_pcskipurl().empty()) {
    _this->_internal_set_pcskipurl(from._internal_pcskipurl());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_ts() != 0) {
    _this->_internal_set_ts(from._internal_ts());
  }
  if (from._internal_labeltype() != 0) {
    _this->_internal_set_labeltype(from._internal_labeltype());
  }
  if (from._internal_showtype() != 0) {
    _this->_internal_set_showtype(from._internal_showtype());
  }
  if (from._internal_contenttype() != 0) {
    _this->_internal_set_contenttype(from._internal_contenttype());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_endtime() != 0) {
    _this->_internal_set_endtime(from._internal_endtime());
  }
  if (from._internal_noticetype() != 0) {
    _this->_internal_set_noticetype(from._internal_noticetype());
  }
  if (from._internal_tap() != 0) {
    _this->_internal_set_tap(from._internal_tap());
  }
  if (from._internal_skiptab() != 0) {
    _this->_internal_set_skiptab(from._internal_skiptab());
  }
  if (from._internal_picjumptype() != 0) {
    _this->_internal_set_picjumptype(from._internal_picjumptype());
  }
  if (from._internal_magnetismtype() != 0) {
    _this->_internal_set_magnetismtype(from._internal_magnetismtype());
  }
  if (from._internal_jumpgoodsid() != 0) {
    _this->_internal_set_jumpgoodsid(from._internal_jumpgoodsid());
  }
  if (from._internal_sort() != 0) {
    _this->_internal_set_sort(from._internal_sort());
  }
  if (from._internal_starttime() != 0) {
    _this->_internal_set_starttime(from._internal_starttime());
  }
  if (from._internal_needredpoint() != 0) {
    _this->_internal_set_needredpoint(from._internal_needredpoint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTNotice::CopyFrom(const CSDTNotice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTNotice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTNotice::IsInitialized() const {
  return true;
}

void CSDTNotice::InternalSwap(CSDTNotice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.countrylist_.InternalSwap(&other->_impl_.countrylist_);
  _impl_.webcontent_.InternalSwap(&other->_impl_.webcontent_);
  _impl_.downloadlist_.InternalSwap(&other->_impl_.downloadlist_);
  _impl_.platformlist_.InternalSwap(&other->_impl_.platformlist_);
  _impl_.apkversionlist_.InternalSwap(&other->_impl_.apkversionlist_);
  _impl_.excludedownload_.InternalSwap(&other->_impl_.excludedownload_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_, lhs_arena,
      &other->_impl_.label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.picurl_, lhs_arena,
      &other->_impl_.picurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.skipurl_, lhs_arena,
      &other->_impl_.skipurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.skipinterface_, lhs_arena,
      &other->_impl_.skipinterface_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.coverpicurl_, lhs_arena,
      &other->_impl_.coverpicurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.subtitle_, lhs_arena,
      &other->_impl_.subtitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pcskipurl_, lhs_arena,
      &other->_impl_.pcskipurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTNotice, _impl_.needredpoint_)
      + sizeof(CSDTNotice::_impl_.needredpoint_)
      - PROTOBUF_FIELD_OFFSET(CSDTNotice, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTNotice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[86]);
}

// ===================================================================

class CSDTAdsInfo::_Internal {
 public:
};

CSDTAdsInfo::CSDTAdsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTAdsInfo)
}
CSDTAdsInfo::CSDTAdsInfo(const CSDTAdsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTAdsInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSDTAdsInfo)
}

inline void CSDTAdsInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTAdsInfo::~CSDTAdsInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTAdsInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTAdsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
}

void CSDTAdsInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTAdsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTAdsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTAdsInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.CSDTAds Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTAdsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTAdsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.CSDTAds Data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTAdsInfo)
  return target;
}

size_t CSDTAdsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTAdsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTAds Data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTAdsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTAdsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTAdsInfo::GetClassData() const { return &_class_data_; }


void CSDTAdsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTAdsInfo*>(&to_msg);
  auto& from = static_cast<const CSDTAdsInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTAdsInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTAdsInfo::CopyFrom(const CSDTAdsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTAdsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTAdsInfo::IsInitialized() const {
  return true;
}

void CSDTAdsInfo::InternalSwap(CSDTAdsInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTAdsInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[87]);
}

// ===================================================================

class CSDTAds::_Internal {
 public:
};

CSDTAds::CSDTAds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTAds)
}
CSDTAds::CSDTAds(const CSDTAds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTAds* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.countrylist_){from._impl_.countrylist_}
    , decltype(_impl_.whitelist_){from._impl_.whitelist_}
    , decltype(_impl_.downloadlist_){from._impl_.downloadlist_}
    , decltype(_impl_.platformlist_){from._impl_.platformlist_}
    , /*decltype(_impl_._platformlist_cached_byte_size_)*/{0}
    , decltype(_impl_.excludedownload_){from._impl_.excludedownload_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.starttime_){}
    , decltype(_impl_.showlimit_){}
    , decltype(_impl_.showcount_){}
    , decltype(_impl_.endtime_){}
    , decltype(_impl_.ispay_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ispay_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.ispay_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTAds)
}

inline void CSDTAds::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.countrylist_){arena}
    , decltype(_impl_.whitelist_){arena}
    , decltype(_impl_.downloadlist_){arena}
    , decltype(_impl_.platformlist_){arena}
    , /*decltype(_impl_._platformlist_cached_byte_size_)*/{0}
    , decltype(_impl_.excludedownload_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.starttime_){int64_t{0}}
    , decltype(_impl_.showlimit_){0u}
    , decltype(_impl_.showcount_){0u}
    , decltype(_impl_.endtime_){int64_t{0}}
    , decltype(_impl_.ispay_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTAds::~CSDTAds() {
  // @@protoc_insertion_point(destructor:msg.CSDTAds)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTAds::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.countrylist_.~RepeatedPtrField();
  _impl_.whitelist_.~RepeatedPtrField();
  _impl_.downloadlist_.~RepeatedPtrField();
  _impl_.platformlist_.~RepeatedField();
  _impl_.excludedownload_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.name_.Destroy();
}

void CSDTAds::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTAds::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTAds)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.countrylist_.Clear();
  _impl_.whitelist_.Clear();
  _impl_.downloadlist_.Clear();
  _impl_.platformlist_.Clear();
  _impl_.excludedownload_.Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ispay_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.ispay_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTAds::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTAds.Title"));
        } else
          goto handle_unusual;
        continue;
      // string Name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTAds.Name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 ShowLimit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.showlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 StartTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 EndTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ShowCount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.showcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.ADSPAYTYPE IsPay = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ispay(static_cast<::msg::ADSPAYTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string CountryList = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_countrylist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTAds.CountryList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string WhiteList = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_whitelist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTAds.WhiteList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string DownloadList = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_downloadlist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTAds.DownloadList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.PLATFORMTYPE PlatformList = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_platformlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 96) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_platformlist(static_cast<::msg::PLATFORMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string ExcludeDownload = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_excludedownload();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTAds.ExcludeDownload"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTAds::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTAds)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string Title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTAds.Title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string Name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTAds.Name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // uint32 ShowLimit = 4;
  if (this->_internal_showlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_showlimit(), target);
  }

  // int64 StartTime = 5;
  if (this->_internal_starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_starttime(), target);
  }

  // int64 EndTime = 6;
  if (this->_internal_endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_endtime(), target);
  }

  // uint32 ShowCount = 7;
  if (this->_internal_showcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_showcount(), target);
  }

  // .msg.ADSPAYTYPE IsPay = 8;
  if (this->_internal_ispay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_ispay(), target);
  }

  // repeated string CountryList = 9;
  for (int i = 0, n = this->_internal_countrylist_size(); i < n; i++) {
    const auto& s = this->_internal_countrylist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTAds.CountryList");
    target = stream->WriteString(9, s, target);
  }

  // repeated string WhiteList = 10;
  for (int i = 0, n = this->_internal_whitelist_size(); i < n; i++) {
    const auto& s = this->_internal_whitelist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTAds.WhiteList");
    target = stream->WriteString(10, s, target);
  }

  // repeated string DownloadList = 11;
  for (int i = 0, n = this->_internal_downloadlist_size(); i < n; i++) {
    const auto& s = this->_internal_downloadlist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTAds.DownloadList");
    target = stream->WriteString(11, s, target);
  }

  // repeated .msg.PLATFORMTYPE PlatformList = 12;
  {
    int byte_size = _impl_._platformlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          12, _impl_.platformlist_, byte_size, target);
    }
  }

  // repeated string ExcludeDownload = 13;
  for (int i = 0, n = this->_internal_excludedownload_size(); i < n; i++) {
    const auto& s = this->_internal_excludedownload(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTAds.ExcludeDownload");
    target = stream->WriteString(13, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTAds)
  return target;
}

size_t CSDTAds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTAds)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string CountryList = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.countrylist_.size());
  for (int i = 0, n = _impl_.countrylist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.countrylist_.Get(i));
  }

  // repeated string WhiteList = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.whitelist_.size());
  for (int i = 0, n = _impl_.whitelist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.whitelist_.Get(i));
  }

  // repeated string DownloadList = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.downloadlist_.size());
  for (int i = 0, n = _impl_.downloadlist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.downloadlist_.Get(i));
  }

  // repeated .msg.PLATFORMTYPE PlatformList = 12;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_platformlist_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_platformlist(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._platformlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string ExcludeDownload = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.excludedownload_.size());
  for (int i = 0, n = _impl_.excludedownload_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.excludedownload_.Get(i));
  }

  // string Title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string Name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 StartTime = 5;
  if (this->_internal_starttime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_starttime());
  }

  // uint32 ShowLimit = 4;
  if (this->_internal_showlimit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_showlimit());
  }

  // uint32 ShowCount = 7;
  if (this->_internal_showcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_showcount());
  }

  // int64 EndTime = 6;
  if (this->_internal_endtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_endtime());
  }

  // .msg.ADSPAYTYPE IsPay = 8;
  if (this->_internal_ispay() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ispay());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTAds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTAds::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTAds::GetClassData() const { return &_class_data_; }


void CSDTAds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTAds*>(&to_msg);
  auto& from = static_cast<const CSDTAds&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTAds)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.countrylist_.MergeFrom(from._impl_.countrylist_);
  _this->_impl_.whitelist_.MergeFrom(from._impl_.whitelist_);
  _this->_impl_.downloadlist_.MergeFrom(from._impl_.downloadlist_);
  _this->_impl_.platformlist_.MergeFrom(from._impl_.platformlist_);
  _this->_impl_.excludedownload_.MergeFrom(from._impl_.excludedownload_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_starttime() != 0) {
    _this->_internal_set_starttime(from._internal_starttime());
  }
  if (from._internal_showlimit() != 0) {
    _this->_internal_set_showlimit(from._internal_showlimit());
  }
  if (from._internal_showcount() != 0) {
    _this->_internal_set_showcount(from._internal_showcount());
  }
  if (from._internal_endtime() != 0) {
    _this->_internal_set_endtime(from._internal_endtime());
  }
  if (from._internal_ispay() != 0) {
    _this->_internal_set_ispay(from._internal_ispay());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTAds::CopyFrom(const CSDTAds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTAds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTAds::IsInitialized() const {
  return true;
}

void CSDTAds::InternalSwap(CSDTAds* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.countrylist_.InternalSwap(&other->_impl_.countrylist_);
  _impl_.whitelist_.InternalSwap(&other->_impl_.whitelist_);
  _impl_.downloadlist_.InternalSwap(&other->_impl_.downloadlist_);
  _impl_.platformlist_.InternalSwap(&other->_impl_.platformlist_);
  _impl_.excludedownload_.InternalSwap(&other->_impl_.excludedownload_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTAds, _impl_.ispay_)
      + sizeof(CSDTAds::_impl_.ispay_)
      - PROTOBUF_FIELD_OFFSET(CSDTAds, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTAds::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[88]);
}

// ===================================================================

class Contest::_Internal {
 public:
};

Contest::Contest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.Contest)
}
Contest::Contest(const Contest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Contest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.equip_){from._impl_.equip_}
    , /*decltype(_impl_._equip_cached_byte_size_)*/{0}
    , decltype(_impl_.chessid_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.chessmancardtag_){}
    , decltype(_impl_.race1_){}
    , decltype(_impl_.race2_){}
    , decltype(_impl_.pro1_){}
    , decltype(_impl_.skill1_){}
    , decltype(_impl_.skill2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.chessid_, &from._impl_.chessid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.skill2_) -
    reinterpret_cast<char*>(&_impl_.chessid_)) + sizeof(_impl_.skill2_));
  // @@protoc_insertion_point(copy_constructor:msg.Contest)
}

inline void Contest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.equip_){arena}
    , /*decltype(_impl_._equip_cached_byte_size_)*/{0}
    , decltype(_impl_.chessid_){0u}
    , decltype(_impl_.x_){0u}
    , decltype(_impl_.y_){0u}
    , decltype(_impl_.chessmancardtag_){0u}
    , decltype(_impl_.race1_){0u}
    , decltype(_impl_.race2_){0u}
    , decltype(_impl_.pro1_){0u}
    , decltype(_impl_.skill1_){0u}
    , decltype(_impl_.skill2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Contest::~Contest() {
  // @@protoc_insertion_point(destructor:msg.Contest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Contest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.equip_.~RepeatedField();
}

void Contest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Contest::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Contest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.equip_.Clear();
  ::memset(&_impl_.chessid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.skill2_) -
      reinterpret_cast<char*>(&_impl_.chessid_)) + sizeof(_impl_.skill2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Contest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ChessId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.chessid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 X = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 Equip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_equip(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_equip(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ChessmanCardTag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.chessmancardtag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Race1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.race1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Race2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.race2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Pro1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.pro1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Skill1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.skill1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Skill2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.skill2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Contest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Contest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ChessId = 1;
  if (this->_internal_chessid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chessid(), target);
  }

  // uint32 X = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_x(), target);
  }

  // uint32 Y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_y(), target);
  }

  // repeated uint32 Equip = 4;
  {
    int byte_size = _impl_._equip_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_equip(), byte_size, target);
    }
  }

  // uint32 ChessmanCardTag = 5;
  if (this->_internal_chessmancardtag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_chessmancardtag(), target);
  }

  // uint32 Race1 = 6;
  if (this->_internal_race1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_race1(), target);
  }

  // uint32 Race2 = 7;
  if (this->_internal_race2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_race2(), target);
  }

  // uint32 Pro1 = 8;
  if (this->_internal_pro1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_pro1(), target);
  }

  // uint32 Skill1 = 9;
  if (this->_internal_skill1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_skill1(), target);
  }

  // uint32 Skill2 = 10;
  if (this->_internal_skill2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_skill2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Contest)
  return target;
}

size_t Contest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Contest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 Equip = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.equip_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._equip_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 ChessId = 1;
  if (this->_internal_chessid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chessid());
  }

  // uint32 X = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_x());
  }

  // uint32 Y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_y());
  }

  // uint32 ChessmanCardTag = 5;
  if (this->_internal_chessmancardtag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chessmancardtag());
  }

  // uint32 Race1 = 6;
  if (this->_internal_race1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_race1());
  }

  // uint32 Race2 = 7;
  if (this->_internal_race2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_race2());
  }

  // uint32 Pro1 = 8;
  if (this->_internal_pro1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pro1());
  }

  // uint32 Skill1 = 9;
  if (this->_internal_skill1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill1());
  }

  // uint32 Skill2 = 10;
  if (this->_internal_skill2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skill2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Contest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Contest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Contest::GetClassData() const { return &_class_data_; }


void Contest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Contest*>(&to_msg);
  auto& from = static_cast<const Contest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Contest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.equip_.MergeFrom(from._impl_.equip_);
  if (from._internal_chessid() != 0) {
    _this->_internal_set_chessid(from._internal_chessid());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_chessmancardtag() != 0) {
    _this->_internal_set_chessmancardtag(from._internal_chessmancardtag());
  }
  if (from._internal_race1() != 0) {
    _this->_internal_set_race1(from._internal_race1());
  }
  if (from._internal_race2() != 0) {
    _this->_internal_set_race2(from._internal_race2());
  }
  if (from._internal_pro1() != 0) {
    _this->_internal_set_pro1(from._internal_pro1());
  }
  if (from._internal_skill1() != 0) {
    _this->_internal_set_skill1(from._internal_skill1());
  }
  if (from._internal_skill2() != 0) {
    _this->_internal_set_skill2(from._internal_skill2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Contest::CopyFrom(const Contest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Contest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contest::IsInitialized() const {
  return true;
}

void Contest::InternalSwap(Contest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.equip_.InternalSwap(&other->_impl_.equip_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Contest, _impl_.skill2_)
      + sizeof(Contest::_impl_.skill2_)
      - PROTOBUF_FIELD_OFFSET(Contest, _impl_.chessid_)>(
          reinterpret_cast<char*>(&_impl_.chessid_),
          reinterpret_cast<char*>(&other->_impl_.chessid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Contest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[89]);
}

// ===================================================================

class Effect::_Internal {
 public:
};

Effect::Effect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.Effect)
}
Effect::Effect(const Effect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Effect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.curlevel_){}
    , decltype(_impl_.maxlevel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxlevel_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.maxlevel_));
  // @@protoc_insertion_point(copy_constructor:msg.Effect)
}

inline void Effect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0u}
    , decltype(_impl_.curlevel_){0u}
    , decltype(_impl_.maxlevel_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Effect::~Effect() {
  // @@protoc_insertion_point(destructor:msg.Effect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Effect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Effect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Effect::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Effect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxlevel_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.maxlevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Effect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 CurLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.curlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MaxLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.maxlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Effect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Effect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // uint32 CurLevel = 2;
  if (this->_internal_curlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_curlevel(), target);
  }

  // uint32 MaxLevel = 3;
  if (this->_internal_maxlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxlevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Effect)
  return target;
}

size_t Effect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Effect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 CurLevel = 2;
  if (this->_internal_curlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_curlevel());
  }

  // uint32 MaxLevel = 3;
  if (this->_internal_maxlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxlevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Effect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Effect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Effect::GetClassData() const { return &_class_data_; }


void Effect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Effect*>(&to_msg);
  auto& from = static_cast<const Effect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Effect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_curlevel() != 0) {
    _this->_internal_set_curlevel(from._internal_curlevel());
  }
  if (from._internal_maxlevel() != 0) {
    _this->_internal_set_maxlevel(from._internal_maxlevel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Effect::CopyFrom(const Effect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Effect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Effect::IsInitialized() const {
  return true;
}

void Effect::InternalSwap(Effect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Effect, _impl_.maxlevel_)
      + sizeof(Effect::_impl_.maxlevel_)
      - PROTOBUF_FIELD_OFFSET(Effect, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Effect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[90]);
}

// ===================================================================

class ChessDamageStat::_Internal {
 public:
};

ChessDamageStat::ChessDamageStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ChessDamageStat)
}
ChessDamageStat::ChessDamageStat(const ChessDamageStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChessDamageStat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chessid_){}
    , decltype(_impl_.totaldamage_){}
    , decltype(_impl_.totalsuffer_){}
    , decltype(_impl_.physicaldamage_){}
    , decltype(_impl_.magicaldamage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.chessid_, &from._impl_.chessid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.magicaldamage_) -
    reinterpret_cast<char*>(&_impl_.chessid_)) + sizeof(_impl_.magicaldamage_));
  // @@protoc_insertion_point(copy_constructor:msg.ChessDamageStat)
}

inline void ChessDamageStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chessid_){0u}
    , decltype(_impl_.totaldamage_){0u}
    , decltype(_impl_.totalsuffer_){0u}
    , decltype(_impl_.physicaldamage_){0u}
    , decltype(_impl_.magicaldamage_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChessDamageStat::~ChessDamageStat() {
  // @@protoc_insertion_point(destructor:msg.ChessDamageStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChessDamageStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChessDamageStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChessDamageStat::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ChessDamageStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.chessid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.magicaldamage_) -
      reinterpret_cast<char*>(&_impl_.chessid_)) + sizeof(_impl_.magicaldamage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChessDamageStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ChessId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.chessid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TotalDamage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.totaldamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TotalSuffer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.totalsuffer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PhysicalDamage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.physicaldamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MagicalDamage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.magicaldamage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChessDamageStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ChessDamageStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ChessId = 1;
  if (this->_internal_chessid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chessid(), target);
  }

  // uint32 TotalDamage = 2;
  if (this->_internal_totaldamage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_totaldamage(), target);
  }

  // uint32 TotalSuffer = 3;
  if (this->_internal_totalsuffer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_totalsuffer(), target);
  }

  // uint32 PhysicalDamage = 4;
  if (this->_internal_physicaldamage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_physicaldamage(), target);
  }

  // uint32 MagicalDamage = 5;
  if (this->_internal_magicaldamage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_magicaldamage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ChessDamageStat)
  return target;
}

size_t ChessDamageStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ChessDamageStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ChessId = 1;
  if (this->_internal_chessid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chessid());
  }

  // uint32 TotalDamage = 2;
  if (this->_internal_totaldamage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_totaldamage());
  }

  // uint32 TotalSuffer = 3;
  if (this->_internal_totalsuffer() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_totalsuffer());
  }

  // uint32 PhysicalDamage = 4;
  if (this->_internal_physicaldamage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_physicaldamage());
  }

  // uint32 MagicalDamage = 5;
  if (this->_internal_magicaldamage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_magicaldamage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChessDamageStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChessDamageStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChessDamageStat::GetClassData() const { return &_class_data_; }


void ChessDamageStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChessDamageStat*>(&to_msg);
  auto& from = static_cast<const ChessDamageStat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ChessDamageStat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_chessid() != 0) {
    _this->_internal_set_chessid(from._internal_chessid());
  }
  if (from._internal_totaldamage() != 0) {
    _this->_internal_set_totaldamage(from._internal_totaldamage());
  }
  if (from._internal_totalsuffer() != 0) {
    _this->_internal_set_totalsuffer(from._internal_totalsuffer());
  }
  if (from._internal_physicaldamage() != 0) {
    _this->_internal_set_physicaldamage(from._internal_physicaldamage());
  }
  if (from._internal_magicaldamage() != 0) {
    _this->_internal_set_magicaldamage(from._internal_magicaldamage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChessDamageStat::CopyFrom(const ChessDamageStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ChessDamageStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessDamageStat::IsInitialized() const {
  return true;
}

void ChessDamageStat::InternalSwap(ChessDamageStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChessDamageStat, _impl_.magicaldamage_)
      + sizeof(ChessDamageStat::_impl_.magicaldamage_)
      - PROTOBUF_FIELD_OFFSET(ChessDamageStat, _impl_.chessid_)>(
          reinterpret_cast<char*>(&_impl_.chessid_),
          reinterpret_cast<char*>(&other->_impl_.chessid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChessDamageStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[91]);
}

// ===================================================================

class SelectEquip::_Internal {
 public:
};

SelectEquip::SelectEquip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.SelectEquip)
}
SelectEquip::SelectEquip(const SelectEquip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SelectEquip* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){}
    , decltype(_impl_.equipid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roundid_, &from._impl_.roundid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.equipid_) -
    reinterpret_cast<char*>(&_impl_.roundid_)) + sizeof(_impl_.equipid_));
  // @@protoc_insertion_point(copy_constructor:msg.SelectEquip)
}

inline void SelectEquip::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roundid_){0u}
    , decltype(_impl_.equipid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SelectEquip::~SelectEquip() {
  // @@protoc_insertion_point(destructor:msg.SelectEquip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectEquip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SelectEquip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.SelectEquip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roundid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.equipid_) -
      reinterpret_cast<char*>(&_impl_.roundid_)) + sizeof(_impl_.equipid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectEquip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RoundId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roundid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 EquipId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.equipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectEquip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.SelectEquip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RoundId = 1;
  if (this->_internal_roundid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_roundid(), target);
  }

  // uint32 EquipId = 2;
  if (this->_internal_equipid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_equipid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.SelectEquip)
  return target;
}

size_t SelectEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.SelectEquip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RoundId = 1;
  if (this->_internal_roundid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_roundid());
  }

  // uint32 EquipId = 2;
  if (this->_internal_equipid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_equipid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectEquip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SelectEquip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectEquip::GetClassData() const { return &_class_data_; }


void SelectEquip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SelectEquip*>(&to_msg);
  auto& from = static_cast<const SelectEquip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.SelectEquip)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roundid() != 0) {
    _this->_internal_set_roundid(from._internal_roundid());
  }
  if (from._internal_equipid() != 0) {
    _this->_internal_set_equipid(from._internal_equipid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectEquip::CopyFrom(const SelectEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.SelectEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectEquip::IsInitialized() const {
  return true;
}

void SelectEquip::InternalSwap(SelectEquip* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SelectEquip, _impl_.equipid_)
      + sizeof(SelectEquip::_impl_.equipid_)
      - PROTOBUF_FIELD_OFFSET(SelectEquip, _impl_.roundid_)>(
          reinterpret_cast<char*>(&_impl_.roundid_),
          reinterpret_cast<char*>(&other->_impl_.roundid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectEquip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[92]);
}

// ===================================================================

class Equip::_Internal {
 public:
};

Equip::Equip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.Equip)
}
Equip::Equip(const Equip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Equip* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.quality_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.quality_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.quality_));
  // @@protoc_insertion_point(copy_constructor:msg.Equip)
}

inline void Equip::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.count_){0u}
    , decltype(_impl_.quality_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Equip::~Equip() {
  // @@protoc_insertion_point(destructor:msg.Equip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Equip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Equip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Equip::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Equip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.quality_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.quality_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Equip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Quality = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Equip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Equip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 Count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // uint32 Quality = 3;
  if (this->_internal_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Equip)
  return target;
}

size_t Equip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Equip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 Count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  // uint32 Quality = 3;
  if (this->_internal_quality() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_quality());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Equip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Equip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Equip::GetClassData() const { return &_class_data_; }


void Equip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Equip*>(&to_msg);
  auto& from = static_cast<const Equip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Equip)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_quality() != 0) {
    _this->_internal_set_quality(from._internal_quality());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Equip::CopyFrom(const Equip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Equip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equip::IsInitialized() const {
  return true;
}

void Equip::InternalSwap(Equip* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Equip, _impl_.quality_)
      + sizeof(Equip::_impl_.quality_)
      - PROTOBUF_FIELD_OFFSET(Equip, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Equip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[93]);
}

// ===================================================================

CSDTRoundItem_EnemyLeftChessEntry_DoNotUse::CSDTRoundItem_EnemyLeftChessEntry_DoNotUse() {}
CSDTRoundItem_EnemyLeftChessEntry_DoNotUse::CSDTRoundItem_EnemyLeftChessEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTRoundItem_EnemyLeftChessEntry_DoNotUse::MergeFrom(const CSDTRoundItem_EnemyLeftChessEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTRoundItem_EnemyLeftChessEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[94]);
}

// ===================================================================

CSDTRoundItem_SelfLeftChessEntry_DoNotUse::CSDTRoundItem_SelfLeftChessEntry_DoNotUse() {}
CSDTRoundItem_SelfLeftChessEntry_DoNotUse::CSDTRoundItem_SelfLeftChessEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTRoundItem_SelfLeftChessEntry_DoNotUse::MergeFrom(const CSDTRoundItem_SelfLeftChessEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTRoundItem_SelfLeftChessEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[95]);
}

// ===================================================================

CSDTRoundItem_DropEquipEntry_DoNotUse::CSDTRoundItem_DropEquipEntry_DoNotUse() {}
CSDTRoundItem_DropEquipEntry_DoNotUse::CSDTRoundItem_DropEquipEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTRoundItem_DropEquipEntry_DoNotUse::MergeFrom(const CSDTRoundItem_DropEquipEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTRoundItem_DropEquipEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[96]);
}

// ===================================================================

CSDTRoundItem_SelfBattleChessEntry_DoNotUse::CSDTRoundItem_SelfBattleChessEntry_DoNotUse() {}
CSDTRoundItem_SelfBattleChessEntry_DoNotUse::CSDTRoundItem_SelfBattleChessEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTRoundItem_SelfBattleChessEntry_DoNotUse::MergeFrom(const CSDTRoundItem_SelfBattleChessEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTRoundItem_SelfBattleChessEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[97]);
}

// ===================================================================

CSDTRoundItem_EnemyBattleChessEntry_DoNotUse::CSDTRoundItem_EnemyBattleChessEntry_DoNotUse() {}
CSDTRoundItem_EnemyBattleChessEntry_DoNotUse::CSDTRoundItem_EnemyBattleChessEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTRoundItem_EnemyBattleChessEntry_DoNotUse::MergeFrom(const CSDTRoundItem_EnemyBattleChessEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTRoundItem_EnemyBattleChessEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[98]);
}

// ===================================================================

CSDTRoundItem_BuyChessListEntry_DoNotUse::CSDTRoundItem_BuyChessListEntry_DoNotUse() {}
CSDTRoundItem_BuyChessListEntry_DoNotUse::CSDTRoundItem_BuyChessListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTRoundItem_BuyChessListEntry_DoNotUse::MergeFrom(const CSDTRoundItem_BuyChessListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTRoundItem_BuyChessListEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[99]);
}

// ===================================================================

CSDTRoundItem_EquipComposeListEntry_DoNotUse::CSDTRoundItem_EquipComposeListEntry_DoNotUse() {}
CSDTRoundItem_EquipComposeListEntry_DoNotUse::CSDTRoundItem_EquipComposeListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTRoundItem_EquipComposeListEntry_DoNotUse::MergeFrom(const CSDTRoundItem_EquipComposeListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTRoundItem_EquipComposeListEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[100]);
}

// ===================================================================

CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse::CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse() {}
CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse::CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse::MergeFrom(const CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[101]);
}

// ===================================================================

CSDTRoundItem_MoneySourceListEntry_DoNotUse::CSDTRoundItem_MoneySourceListEntry_DoNotUse() {}
CSDTRoundItem_MoneySourceListEntry_DoNotUse::CSDTRoundItem_MoneySourceListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTRoundItem_MoneySourceListEntry_DoNotUse::MergeFrom(const CSDTRoundItem_MoneySourceListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTRoundItem_MoneySourceListEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[102]);
}

// ===================================================================

CSDTRoundItem_MoneyPayListEntry_DoNotUse::CSDTRoundItem_MoneyPayListEntry_DoNotUse() {}
CSDTRoundItem_MoneyPayListEntry_DoNotUse::CSDTRoundItem_MoneyPayListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTRoundItem_MoneyPayListEntry_DoNotUse::MergeFrom(const CSDTRoundItem_MoneyPayListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTRoundItem_MoneyPayListEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[103]);
}

// ===================================================================

CSDTRoundItem_SellChessListEntry_DoNotUse::CSDTRoundItem_SellChessListEntry_DoNotUse() {}
CSDTRoundItem_SellChessListEntry_DoNotUse::CSDTRoundItem_SellChessListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTRoundItem_SellChessListEntry_DoNotUse::MergeFrom(const CSDTRoundItem_SellChessListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTRoundItem_SellChessListEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[104]);
}

// ===================================================================

CSDTRoundItem_EquipComposeStructListEntry_DoNotUse::CSDTRoundItem_EquipComposeStructListEntry_DoNotUse() {}
CSDTRoundItem_EquipComposeStructListEntry_DoNotUse::CSDTRoundItem_EquipComposeStructListEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTRoundItem_EquipComposeStructListEntry_DoNotUse::MergeFrom(const CSDTRoundItem_EquipComposeStructListEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTRoundItem_EquipComposeStructListEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[105]);
}

// ===================================================================

class CSDTRoundItem::_Internal {
 public:
};

CSDTRoundItem::CSDTRoundItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTRoundItem::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTRoundItem)
}
CSDTRoundItem::CSDTRoundItem(const CSDTRoundItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTRoundItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.enemyleftchess_)*/{}
    , /*decltype(_impl_.selfleftchess_)*/{}
    , /*decltype(_impl_.dropequip_)*/{}
    , decltype(_impl_.selfcontest_){from._impl_.selfcontest_}
    , decltype(_impl_.targetcontest_){from._impl_.targetcontest_}
    , /*decltype(_impl_.selfbattlechess_)*/{}
    , /*decltype(_impl_.enemybattlechess_)*/{}
    , decltype(_impl_.roundstartcontest_){from._impl_.roundstartcontest_}
    , decltype(_impl_.battlestartcontest_){from._impl_.battlestartcontest_}
    , decltype(_impl_.chessshopfreshlist_){from._impl_.chessshopfreshlist_}
    , /*decltype(_impl_._chessshopfreshlist_cached_byte_size_)*/{0}
    , /*decltype(_impl_.buychesslist_)*/{}
    , /*decltype(_impl_.equipcomposelist_)*/{}
    , /*decltype(_impl_.upgradestarchesslist_)*/{}
    , /*decltype(_impl_.moneysourcelist_)*/{}
    , /*decltype(_impl_.moneypaylist_)*/{}
    , /*decltype(_impl_.sellchesslist_)*/{}
    , decltype(_impl_.sharedchesslist_){from._impl_.sharedchesslist_}
    , decltype(_impl_.giveequipchesslist_){from._impl_.giveequipchesslist_}
    , /*decltype(_impl_._giveequipchesslist_cached_byte_size_)*/{0}
    , decltype(_impl_.givechesslist_){from._impl_.givechesslist_}
    , decltype(_impl_.raceeffectlist_){from._impl_.raceeffectlist_}
    , decltype(_impl_.professioneffectlist_){from._impl_.professioneffectlist_}
    , decltype(_impl_.chessdamagelist_){from._impl_.chessdamagelist_}
    , decltype(_impl_.roundequipselections_){from._impl_.roundequipselections_}
    , /*decltype(_impl_._roundequipselections_cached_byte_size_)*/{0}
    , decltype(_impl_.selectequips_){from._impl_.selectequips_}
    , /*decltype(_impl_.equipcomposestructlist_)*/{}
    , decltype(_impl_.targetplayerid_){}
    , decltype(_impl_.targetopenid_){}
    , decltype(_impl_.round_){}
    , decltype(_impl_.oldhp_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.oldrank_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.wintype_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.chessshopfreshcount_){}
    , decltype(_impl_.roundstartmoney_){}
    , decltype(_impl_.battlestartmoney_){}
    , decltype(_impl_.battleendmoney_){}
    , decltype(_impl_.readchesscount_){}
    , decltype(_impl_.roundstartlvl_){}
    , decltype(_impl_.roundstartexp_){}
    , decltype(_impl_.battlestartlvl_){}
    , decltype(_impl_.battlestartexp_){}
    , decltype(_impl_.wincon_){}
    , decltype(_impl_.ismonster_){}
    , decltype(_impl_.islastround_){}
    , decltype(_impl_.losecon_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.enemyleftchess_.MergeFrom(from._impl_.enemyleftchess_);
  _this->_impl_.selfleftchess_.MergeFrom(from._impl_.selfleftchess_);
  _this->_impl_.dropequip_.MergeFrom(from._impl_.dropequip_);
  _this->_impl_.selfbattlechess_.MergeFrom(from._impl_.selfbattlechess_);
  _this->_impl_.enemybattlechess_.MergeFrom(from._impl_.enemybattlechess_);
  _this->_impl_.buychesslist_.MergeFrom(from._impl_.buychesslist_);
  _this->_impl_.equipcomposelist_.MergeFrom(from._impl_.equipcomposelist_);
  _this->_impl_.upgradestarchesslist_.MergeFrom(from._impl_.upgradestarchesslist_);
  _this->_impl_.moneysourcelist_.MergeFrom(from._impl_.moneysourcelist_);
  _this->_impl_.moneypaylist_.MergeFrom(from._impl_.moneypaylist_);
  _this->_impl_.sellchesslist_.MergeFrom(from._impl_.sellchesslist_);
  _this->_impl_.equipcomposestructlist_.MergeFrom(from._impl_.equipcomposestructlist_);
  _impl_.targetplayerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetplayerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targetplayerid().empty()) {
    _this->_impl_.targetplayerid_.Set(from._internal_targetplayerid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.targetopenid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetopenid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targetopenid().empty()) {
    _this->_impl_.targetopenid_.Set(from._internal_targetopenid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.round_, &from._impl_.round_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.losecon_) -
    reinterpret_cast<char*>(&_impl_.round_)) + sizeof(_impl_.losecon_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTRoundItem)
}

inline void CSDTRoundItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.enemyleftchess_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.selfleftchess_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.dropequip_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.selfcontest_){arena}
    , decltype(_impl_.targetcontest_){arena}
    , /*decltype(_impl_.selfbattlechess_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.enemybattlechess_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.roundstartcontest_){arena}
    , decltype(_impl_.battlestartcontest_){arena}
    , decltype(_impl_.chessshopfreshlist_){arena}
    , /*decltype(_impl_._chessshopfreshlist_cached_byte_size_)*/{0}
    , /*decltype(_impl_.buychesslist_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.equipcomposelist_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.upgradestarchesslist_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.moneysourcelist_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.moneypaylist_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.sellchesslist_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.sharedchesslist_){arena}
    , decltype(_impl_.giveequipchesslist_){arena}
    , /*decltype(_impl_._giveequipchesslist_cached_byte_size_)*/{0}
    , decltype(_impl_.givechesslist_){arena}
    , decltype(_impl_.raceeffectlist_){arena}
    , decltype(_impl_.professioneffectlist_){arena}
    , decltype(_impl_.chessdamagelist_){arena}
    , decltype(_impl_.roundequipselections_){arena}
    , /*decltype(_impl_._roundequipselections_cached_byte_size_)*/{0}
    , decltype(_impl_.selectequips_){arena}
    , /*decltype(_impl_.equipcomposestructlist_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.targetplayerid_){}
    , decltype(_impl_.targetopenid_){}
    , decltype(_impl_.round_){0u}
    , decltype(_impl_.oldhp_){0u}
    , decltype(_impl_.hp_){0u}
    , decltype(_impl_.oldrank_){0u}
    , decltype(_impl_.rank_){0u}
    , decltype(_impl_.wintype_){0}
    , decltype(_impl_.time_){0u}
    , decltype(_impl_.chessshopfreshcount_){0u}
    , decltype(_impl_.roundstartmoney_){0u}
    , decltype(_impl_.battlestartmoney_){0u}
    , decltype(_impl_.battleendmoney_){0u}
    , decltype(_impl_.readchesscount_){0u}
    , decltype(_impl_.roundstartlvl_){0u}
    , decltype(_impl_.roundstartexp_){0u}
    , decltype(_impl_.battlestartlvl_){0u}
    , decltype(_impl_.battlestartexp_){0u}
    , decltype(_impl_.wincon_){0u}
    , decltype(_impl_.ismonster_){false}
    , decltype(_impl_.islastround_){false}
    , decltype(_impl_.losecon_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.targetplayerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetplayerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.targetopenid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetopenid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTRoundItem::~CSDTRoundItem() {
  // @@protoc_insertion_point(destructor:msg.CSDTRoundItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTRoundItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.enemyleftchess_.Destruct();
  _impl_.enemyleftchess_.~MapField();
  _impl_.selfleftchess_.Destruct();
  _impl_.selfleftchess_.~MapField();
  _impl_.dropequip_.Destruct();
  _impl_.dropequip_.~MapField();
  _impl_.selfcontest_.~RepeatedPtrField();
  _impl_.targetcontest_.~RepeatedPtrField();
  _impl_.selfbattlechess_.Destruct();
  _impl_.selfbattlechess_.~MapField();
  _impl_.enemybattlechess_.Destruct();
  _impl_.enemybattlechess_.~MapField();
  _impl_.roundstartcontest_.~RepeatedPtrField();
  _impl_.battlestartcontest_.~RepeatedPtrField();
  _impl_.chessshopfreshlist_.~RepeatedField();
  _impl_.buychesslist_.Destruct();
  _impl_.buychesslist_.~MapField();
  _impl_.equipcomposelist_.Destruct();
  _impl_.equipcomposelist_.~MapField();
  _impl_.upgradestarchesslist_.Destruct();
  _impl_.upgradestarchesslist_.~MapField();
  _impl_.moneysourcelist_.Destruct();
  _impl_.moneysourcelist_.~MapField();
  _impl_.moneypaylist_.Destruct();
  _impl_.moneypaylist_.~MapField();
  _impl_.sellchesslist_.Destruct();
  _impl_.sellchesslist_.~MapField();
  _impl_.sharedchesslist_.~RepeatedPtrField();
  _impl_.giveequipchesslist_.~RepeatedField();
  _impl_.givechesslist_.~RepeatedPtrField();
  _impl_.raceeffectlist_.~RepeatedPtrField();
  _impl_.professioneffectlist_.~RepeatedPtrField();
  _impl_.chessdamagelist_.~RepeatedPtrField();
  _impl_.roundequipselections_.~RepeatedField();
  _impl_.selectequips_.~RepeatedPtrField();
  _impl_.equipcomposestructlist_.Destruct();
  _impl_.equipcomposestructlist_.~MapField();
  _impl_.targetplayerid_.Destroy();
  _impl_.targetopenid_.Destroy();
}

void CSDTRoundItem::ArenaDtor(void* object) {
  CSDTRoundItem* _this = reinterpret_cast< CSDTRoundItem* >(object);
  _this->_impl_.enemyleftchess_.Destruct();
  _this->_impl_.selfleftchess_.Destruct();
  _this->_impl_.dropequip_.Destruct();
  _this->_impl_.selfbattlechess_.Destruct();
  _this->_impl_.enemybattlechess_.Destruct();
  _this->_impl_.buychesslist_.Destruct();
  _this->_impl_.equipcomposelist_.Destruct();
  _this->_impl_.upgradestarchesslist_.Destruct();
  _this->_impl_.moneysourcelist_.Destruct();
  _this->_impl_.moneypaylist_.Destruct();
  _this->_impl_.sellchesslist_.Destruct();
  _this->_impl_.equipcomposestructlist_.Destruct();
}
void CSDTRoundItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTRoundItem::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTRoundItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enemyleftchess_.Clear();
  _impl_.selfleftchess_.Clear();
  _impl_.dropequip_.Clear();
  _impl_.selfcontest_.Clear();
  _impl_.targetcontest_.Clear();
  _impl_.selfbattlechess_.Clear();
  _impl_.enemybattlechess_.Clear();
  _impl_.roundstartcontest_.Clear();
  _impl_.battlestartcontest_.Clear();
  _impl_.chessshopfreshlist_.Clear();
  _impl_.buychesslist_.Clear();
  _impl_.equipcomposelist_.Clear();
  _impl_.upgradestarchesslist_.Clear();
  _impl_.moneysourcelist_.Clear();
  _impl_.moneypaylist_.Clear();
  _impl_.sellchesslist_.Clear();
  _impl_.sharedchesslist_.Clear();
  _impl_.giveequipchesslist_.Clear();
  _impl_.givechesslist_.Clear();
  _impl_.raceeffectlist_.Clear();
  _impl_.professioneffectlist_.Clear();
  _impl_.chessdamagelist_.Clear();
  _impl_.roundequipselections_.Clear();
  _impl_.selectequips_.Clear();
  _impl_.equipcomposestructlist_.Clear();
  _impl_.targetplayerid_.ClearToEmpty();
  _impl_.targetopenid_.ClearToEmpty();
  ::memset(&_impl_.round_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.losecon_) -
      reinterpret_cast<char*>(&_impl_.round_)) + sizeof(_impl_.losecon_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTRoundItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Round = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 OldHp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.oldhp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Hp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 OldRank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.oldrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Rank = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TargetPlayerId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_targetplayerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTRoundItem.TargetPlayerId"));
        } else
          goto handle_unusual;
        continue;
      // .msg.WINTYPE WinType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_wintype(static_cast<::msg::WINTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> EnemyLeftChess = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.enemyleftchess_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> SelfLeftChess = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.selfleftchess_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 Time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> DropEquip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.dropequip_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Contest SelfContest = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_selfcontest(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Contest TargetContest = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_targetcontest(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> SelfBattleChess = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.selfbattlechess_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> EnemyBattleChess = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.enemybattlechess_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Contest RoundStartContest = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_roundstartcontest(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Contest BattleStartContest = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_battlestartcontest(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 ChessShopFreshCount = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.chessshopfreshcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ChessShopFreshList = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_chessshopfreshlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 152) {
          _internal_add_chessshopfreshlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> BuyChessList = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.buychesslist_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> EquipComposeList = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.equipcomposelist_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> UpgradeStarChessList = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.upgradestarchesslist_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 RoundStartMoney = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.roundstartmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 BattleStartMoney = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.battlestartmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 BattleEndMoney = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.battleendmoney_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> MoneySourceList = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.moneysourcelist_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> MoneyPayList = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.moneypaylist_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 ReadChessCount = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.readchesscount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RoundStartLvl = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.roundstartlvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RoundStartExp = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.roundstartexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 BattleStartLvl = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.battlestartlvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 BattleStartExp = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.battlestartexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> SellChessList = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.sellchesslist_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool IsMonster = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ismonster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 WinCon = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.wincon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 LoseCon = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.losecon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsLastRound = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.islastround_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Contest SharedChessList = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_sharedchesslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<306>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 GiveEquipChessList = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_giveequipchesslist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_giveequipchesslist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Contest GiveChessList = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_givechesslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Effect RaceEffectList = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_raceeffectlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<330>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Effect ProfessionEffectList = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_professioneffectlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<338>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.ChessDamageStat ChessDamageList = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_chessdamagelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<346>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 RoundEquipSelections = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_roundequipselections(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 96) {
          _internal_add_roundequipselections(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.SelectEquip SelectEquips = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_selectequips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<362>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string TargetOpenId = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_targetopenid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTRoundItem.TargetOpenId"));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .msg.Equip> EquipComposeStructList = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.equipcomposestructlist_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<378>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTRoundItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTRoundItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Round = 1;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_round(), target);
  }

  // uint32 OldHp = 2;
  if (this->_internal_oldhp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_oldhp(), target);
  }

  // uint32 Hp = 3;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hp(), target);
  }

  // uint32 OldRank = 4;
  if (this->_internal_oldrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_oldrank(), target);
  }

  // uint32 Rank = 5;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rank(), target);
  }

  // string TargetPlayerId = 6;
  if (!this->_internal_targetplayerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetplayerid().data(), static_cast<int>(this->_internal_targetplayerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTRoundItem.TargetPlayerId");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_targetplayerid(), target);
  }

  // .msg.WINTYPE WinType = 7;
  if (this->_internal_wintype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_wintype(), target);
  }

  // map<uint32, uint32> EnemyLeftChess = 8;
  if (!this->_internal_enemyleftchess().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTRoundItem_EnemyLeftChessEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_enemyleftchess();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, uint32> SelfLeftChess = 9;
  if (!this->_internal_selfleftchess().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTRoundItem_SelfLeftChessEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_selfleftchess();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint32 Time = 10;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_time(), target);
  }

  // map<uint32, uint32> DropEquip = 11;
  if (!this->_internal_dropequip().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTRoundItem_DropEquipEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_dropequip();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated .msg.Contest SelfContest = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_selfcontest_size()); i < n; i++) {
    const auto& repfield = this->_internal_selfcontest(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.Contest TargetContest = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_targetcontest_size()); i < n; i++) {
    const auto& repfield = this->_internal_targetcontest(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<uint32, uint32> SelfBattleChess = 14;
  if (!this->_internal_selfbattlechess().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTRoundItem_SelfBattleChessEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_selfbattlechess();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, uint32> EnemyBattleChess = 15;
  if (!this->_internal_enemybattlechess().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTRoundItem_EnemyBattleChessEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_enemybattlechess();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(15, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated .msg.Contest RoundStartContest = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_roundstartcontest_size()); i < n; i++) {
    const auto& repfield = this->_internal_roundstartcontest(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.Contest BattleStartContest = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_battlestartcontest_size()); i < n; i++) {
    const auto& repfield = this->_internal_battlestartcontest(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 ChessShopFreshCount = 18;
  if (this->_internal_chessshopfreshcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_chessshopfreshcount(), target);
  }

  // repeated uint32 ChessShopFreshList = 19;
  {
    int byte_size = _impl_._chessshopfreshlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          19, _internal_chessshopfreshlist(), byte_size, target);
    }
  }

  // map<uint32, uint32> BuyChessList = 20;
  if (!this->_internal_buychesslist().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTRoundItem_BuyChessListEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_buychesslist();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(20, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(20, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, uint32> EquipComposeList = 21;
  if (!this->_internal_equipcomposelist().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTRoundItem_EquipComposeListEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_equipcomposelist();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(21, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(21, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, uint32> UpgradeStarChessList = 22;
  if (!this->_internal_upgradestarchesslist().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_upgradestarchesslist();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(22, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(22, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint32 RoundStartMoney = 23;
  if (this->_internal_roundstartmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_roundstartmoney(), target);
  }

  // uint32 BattleStartMoney = 24;
  if (this->_internal_battlestartmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_battlestartmoney(), target);
  }

  // uint32 BattleEndMoney = 25;
  if (this->_internal_battleendmoney() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_battleendmoney(), target);
  }

  // map<uint32, uint32> MoneySourceList = 26;
  if (!this->_internal_moneysourcelist().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTRoundItem_MoneySourceListEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_moneysourcelist();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(26, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(26, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, uint32> MoneyPayList = 27;
  if (!this->_internal_moneypaylist().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTRoundItem_MoneyPayListEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_moneypaylist();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(27, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(27, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint32 ReadChessCount = 28;
  if (this->_internal_readchesscount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_readchesscount(), target);
  }

  // uint32 RoundStartLvl = 29;
  if (this->_internal_roundstartlvl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_roundstartlvl(), target);
  }

  // uint32 RoundStartExp = 30;
  if (this->_internal_roundstartexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_roundstartexp(), target);
  }

  // uint32 BattleStartLvl = 31;
  if (this->_internal_battlestartlvl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_battlestartlvl(), target);
  }

  // uint32 BattleStartExp = 32;
  if (this->_internal_battlestartexp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(32, this->_internal_battlestartexp(), target);
  }

  // map<uint32, uint32> SellChessList = 33;
  if (!this->_internal_sellchesslist().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTRoundItem_SellChessListEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_sellchesslist();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(33, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(33, entry.first, entry.second, target, stream);
      }
    }
  }

  // bool IsMonster = 34;
  if (this->_internal_ismonster() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_ismonster(), target);
  }

  // uint32 WinCon = 35;
  if (this->_internal_wincon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(35, this->_internal_wincon(), target);
  }

  // uint32 LoseCon = 36;
  if (this->_internal_losecon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(36, this->_internal_losecon(), target);
  }

  // bool IsLastRound = 37;
  if (this->_internal_islastround() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(37, this->_internal_islastround(), target);
  }

  // repeated .msg.Contest SharedChessList = 38;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sharedchesslist_size()); i < n; i++) {
    const auto& repfield = this->_internal_sharedchesslist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(38, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 GiveEquipChessList = 39;
  {
    int byte_size = _impl_._giveequipchesslist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          39, _internal_giveequipchesslist(), byte_size, target);
    }
  }

  // repeated .msg.Contest GiveChessList = 40;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_givechesslist_size()); i < n; i++) {
    const auto& repfield = this->_internal_givechesslist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(40, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.Effect RaceEffectList = 41;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_raceeffectlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_raceeffectlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(41, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.Effect ProfessionEffectList = 42;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_professioneffectlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_professioneffectlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(42, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.ChessDamageStat ChessDamageList = 43;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chessdamagelist_size()); i < n; i++) {
    const auto& repfield = this->_internal_chessdamagelist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(43, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 RoundEquipSelections = 44;
  {
    int byte_size = _impl_._roundequipselections_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          44, _internal_roundequipselections(), byte_size, target);
    }
  }

  // repeated .msg.SelectEquip SelectEquips = 45;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_selectequips_size()); i < n; i++) {
    const auto& repfield = this->_internal_selectequips(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(45, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string TargetOpenId = 46;
  if (!this->_internal_targetopenid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetopenid().data(), static_cast<int>(this->_internal_targetopenid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTRoundItem.TargetOpenId");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_targetopenid(), target);
  }

  // map<uint32, .msg.Equip> EquipComposeStructList = 47;
  if (!this->_internal_equipcomposestructlist().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::Equip>;
    using WireHelper = CSDTRoundItem_EquipComposeStructListEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_equipcomposestructlist();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(47, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(47, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTRoundItem)
  return target;
}

size_t CSDTRoundItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTRoundItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> EnemyLeftChess = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enemyleftchess_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_enemyleftchess().begin();
      it != this->_internal_enemyleftchess().end(); ++it) {
    total_size += CSDTRoundItem_EnemyLeftChessEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> SelfLeftChess = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_selfleftchess_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_selfleftchess().begin();
      it != this->_internal_selfleftchess().end(); ++it) {
    total_size += CSDTRoundItem_SelfLeftChessEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> DropEquip = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dropequip_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_dropequip().begin();
      it != this->_internal_dropequip().end(); ++it) {
    total_size += CSDTRoundItem_DropEquipEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .msg.Contest SelfContest = 12;
  total_size += 1UL * this->_internal_selfcontest_size();
  for (const auto& msg : this->_impl_.selfcontest_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.Contest TargetContest = 13;
  total_size += 1UL * this->_internal_targetcontest_size();
  for (const auto& msg : this->_impl_.targetcontest_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<uint32, uint32> SelfBattleChess = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_selfbattlechess_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_selfbattlechess().begin();
      it != this->_internal_selfbattlechess().end(); ++it) {
    total_size += CSDTRoundItem_SelfBattleChessEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> EnemyBattleChess = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enemybattlechess_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_enemybattlechess().begin();
      it != this->_internal_enemybattlechess().end(); ++it) {
    total_size += CSDTRoundItem_EnemyBattleChessEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .msg.Contest RoundStartContest = 16;
  total_size += 2UL * this->_internal_roundstartcontest_size();
  for (const auto& msg : this->_impl_.roundstartcontest_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.Contest BattleStartContest = 17;
  total_size += 2UL * this->_internal_battlestartcontest_size();
  for (const auto& msg : this->_impl_.battlestartcontest_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 ChessShopFreshList = 19;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.chessshopfreshlist_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._chessshopfreshlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<uint32, uint32> BuyChessList = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_buychesslist_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_buychesslist().begin();
      it != this->_internal_buychesslist().end(); ++it) {
    total_size += CSDTRoundItem_BuyChessListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> EquipComposeList = 21;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_equipcomposelist_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_equipcomposelist().begin();
      it != this->_internal_equipcomposelist().end(); ++it) {
    total_size += CSDTRoundItem_EquipComposeListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> UpgradeStarChessList = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_upgradestarchesslist_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_upgradestarchesslist().begin();
      it != this->_internal_upgradestarchesslist().end(); ++it) {
    total_size += CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> MoneySourceList = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_moneysourcelist_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_moneysourcelist().begin();
      it != this->_internal_moneysourcelist().end(); ++it) {
    total_size += CSDTRoundItem_MoneySourceListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> MoneyPayList = 27;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_moneypaylist_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_moneypaylist().begin();
      it != this->_internal_moneypaylist().end(); ++it) {
    total_size += CSDTRoundItem_MoneyPayListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> SellChessList = 33;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sellchesslist_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_sellchesslist().begin();
      it != this->_internal_sellchesslist().end(); ++it) {
    total_size += CSDTRoundItem_SellChessListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .msg.Contest SharedChessList = 38;
  total_size += 2UL * this->_internal_sharedchesslist_size();
  for (const auto& msg : this->_impl_.sharedchesslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 GiveEquipChessList = 39;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.giveequipchesslist_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._giveequipchesslist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .msg.Contest GiveChessList = 40;
  total_size += 2UL * this->_internal_givechesslist_size();
  for (const auto& msg : this->_impl_.givechesslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.Effect RaceEffectList = 41;
  total_size += 2UL * this->_internal_raceeffectlist_size();
  for (const auto& msg : this->_impl_.raceeffectlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.Effect ProfessionEffectList = 42;
  total_size += 2UL * this->_internal_professioneffectlist_size();
  for (const auto& msg : this->_impl_.professioneffectlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.ChessDamageStat ChessDamageList = 43;
  total_size += 2UL * this->_internal_chessdamagelist_size();
  for (const auto& msg : this->_impl_.chessdamagelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 RoundEquipSelections = 44;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.roundequipselections_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._roundequipselections_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .msg.SelectEquip SelectEquips = 45;
  total_size += 2UL * this->_internal_selectequips_size();
  for (const auto& msg : this->_impl_.selectequips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<uint32, .msg.Equip> EquipComposeStructList = 47;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_equipcomposestructlist_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::Equip >::const_iterator
      it = this->_internal_equipcomposestructlist().begin();
      it != this->_internal_equipcomposestructlist().end(); ++it) {
    total_size += CSDTRoundItem_EquipComposeStructListEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string TargetPlayerId = 6;
  if (!this->_internal_targetplayerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetplayerid());
  }

  // string TargetOpenId = 46;
  if (!this->_internal_targetopenid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetopenid());
  }

  // uint32 Round = 1;
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_round());
  }

  // uint32 OldHp = 2;
  if (this->_internal_oldhp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_oldhp());
  }

  // uint32 Hp = 3;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hp());
  }

  // uint32 OldRank = 4;
  if (this->_internal_oldrank() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_oldrank());
  }

  // uint32 Rank = 5;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank());
  }

  // .msg.WINTYPE WinType = 7;
  if (this->_internal_wintype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_wintype());
  }

  // uint32 Time = 10;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
  }

  // uint32 ChessShopFreshCount = 18;
  if (this->_internal_chessshopfreshcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_chessshopfreshcount());
  }

  // uint32 RoundStartMoney = 23;
  if (this->_internal_roundstartmoney() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_roundstartmoney());
  }

  // uint32 BattleStartMoney = 24;
  if (this->_internal_battlestartmoney() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_battlestartmoney());
  }

  // uint32 BattleEndMoney = 25;
  if (this->_internal_battleendmoney() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_battleendmoney());
  }

  // uint32 ReadChessCount = 28;
  if (this->_internal_readchesscount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_readchesscount());
  }

  // uint32 RoundStartLvl = 29;
  if (this->_internal_roundstartlvl() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_roundstartlvl());
  }

  // uint32 RoundStartExp = 30;
  if (this->_internal_roundstartexp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_roundstartexp());
  }

  // uint32 BattleStartLvl = 31;
  if (this->_internal_battlestartlvl() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_battlestartlvl());
  }

  // uint32 BattleStartExp = 32;
  if (this->_internal_battlestartexp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_battlestartexp());
  }

  // uint32 WinCon = 35;
  if (this->_internal_wincon() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_wincon());
  }

  // bool IsMonster = 34;
  if (this->_internal_ismonster() != 0) {
    total_size += 2 + 1;
  }

  // bool IsLastRound = 37;
  if (this->_internal_islastround() != 0) {
    total_size += 2 + 1;
  }

  // uint32 LoseCon = 36;
  if (this->_internal_losecon() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_losecon());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTRoundItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTRoundItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTRoundItem::GetClassData() const { return &_class_data_; }


void CSDTRoundItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTRoundItem*>(&to_msg);
  auto& from = static_cast<const CSDTRoundItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTRoundItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.enemyleftchess_.MergeFrom(from._impl_.enemyleftchess_);
  _this->_impl_.selfleftchess_.MergeFrom(from._impl_.selfleftchess_);
  _this->_impl_.dropequip_.MergeFrom(from._impl_.dropequip_);
  _this->_impl_.selfcontest_.MergeFrom(from._impl_.selfcontest_);
  _this->_impl_.targetcontest_.MergeFrom(from._impl_.targetcontest_);
  _this->_impl_.selfbattlechess_.MergeFrom(from._impl_.selfbattlechess_);
  _this->_impl_.enemybattlechess_.MergeFrom(from._impl_.enemybattlechess_);
  _this->_impl_.roundstartcontest_.MergeFrom(from._impl_.roundstartcontest_);
  _this->_impl_.battlestartcontest_.MergeFrom(from._impl_.battlestartcontest_);
  _this->_impl_.chessshopfreshlist_.MergeFrom(from._impl_.chessshopfreshlist_);
  _this->_impl_.buychesslist_.MergeFrom(from._impl_.buychesslist_);
  _this->_impl_.equipcomposelist_.MergeFrom(from._impl_.equipcomposelist_);
  _this->_impl_.upgradestarchesslist_.MergeFrom(from._impl_.upgradestarchesslist_);
  _this->_impl_.moneysourcelist_.MergeFrom(from._impl_.moneysourcelist_);
  _this->_impl_.moneypaylist_.MergeFrom(from._impl_.moneypaylist_);
  _this->_impl_.sellchesslist_.MergeFrom(from._impl_.sellchesslist_);
  _this->_impl_.sharedchesslist_.MergeFrom(from._impl_.sharedchesslist_);
  _this->_impl_.giveequipchesslist_.MergeFrom(from._impl_.giveequipchesslist_);
  _this->_impl_.givechesslist_.MergeFrom(from._impl_.givechesslist_);
  _this->_impl_.raceeffectlist_.MergeFrom(from._impl_.raceeffectlist_);
  _this->_impl_.professioneffectlist_.MergeFrom(from._impl_.professioneffectlist_);
  _this->_impl_.chessdamagelist_.MergeFrom(from._impl_.chessdamagelist_);
  _this->_impl_.roundequipselections_.MergeFrom(from._impl_.roundequipselections_);
  _this->_impl_.selectequips_.MergeFrom(from._impl_.selectequips_);
  _this->_impl_.equipcomposestructlist_.MergeFrom(from._impl_.equipcomposestructlist_);
  if (!from._internal_targetplayerid().empty()) {
    _this->_internal_set_targetplayerid(from._internal_targetplayerid());
  }
  if (!from._internal_targetopenid().empty()) {
    _this->_internal_set_targetopenid(from._internal_targetopenid());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  if (from._internal_oldhp() != 0) {
    _this->_internal_set_oldhp(from._internal_oldhp());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_oldrank() != 0) {
    _this->_internal_set_oldrank(from._internal_oldrank());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  if (from._internal_wintype() != 0) {
    _this->_internal_set_wintype(from._internal_wintype());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_chessshopfreshcount() != 0) {
    _this->_internal_set_chessshopfreshcount(from._internal_chessshopfreshcount());
  }
  if (from._internal_roundstartmoney() != 0) {
    _this->_internal_set_roundstartmoney(from._internal_roundstartmoney());
  }
  if (from._internal_battlestartmoney() != 0) {
    _this->_internal_set_battlestartmoney(from._internal_battlestartmoney());
  }
  if (from._internal_battleendmoney() != 0) {
    _this->_internal_set_battleendmoney(from._internal_battleendmoney());
  }
  if (from._internal_readchesscount() != 0) {
    _this->_internal_set_readchesscount(from._internal_readchesscount());
  }
  if (from._internal_roundstartlvl() != 0) {
    _this->_internal_set_roundstartlvl(from._internal_roundstartlvl());
  }
  if (from._internal_roundstartexp() != 0) {
    _this->_internal_set_roundstartexp(from._internal_roundstartexp());
  }
  if (from._internal_battlestartlvl() != 0) {
    _this->_internal_set_battlestartlvl(from._internal_battlestartlvl());
  }
  if (from._internal_battlestartexp() != 0) {
    _this->_internal_set_battlestartexp(from._internal_battlestartexp());
  }
  if (from._internal_wincon() != 0) {
    _this->_internal_set_wincon(from._internal_wincon());
  }
  if (from._internal_ismonster() != 0) {
    _this->_internal_set_ismonster(from._internal_ismonster());
  }
  if (from._internal_islastround() != 0) {
    _this->_internal_set_islastround(from._internal_islastround());
  }
  if (from._internal_losecon() != 0) {
    _this->_internal_set_losecon(from._internal_losecon());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTRoundItem::CopyFrom(const CSDTRoundItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTRoundItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTRoundItem::IsInitialized() const {
  return true;
}

void CSDTRoundItem::InternalSwap(CSDTRoundItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.enemyleftchess_.InternalSwap(&other->_impl_.enemyleftchess_);
  _impl_.selfleftchess_.InternalSwap(&other->_impl_.selfleftchess_);
  _impl_.dropequip_.InternalSwap(&other->_impl_.dropequip_);
  _impl_.selfcontest_.InternalSwap(&other->_impl_.selfcontest_);
  _impl_.targetcontest_.InternalSwap(&other->_impl_.targetcontest_);
  _impl_.selfbattlechess_.InternalSwap(&other->_impl_.selfbattlechess_);
  _impl_.enemybattlechess_.InternalSwap(&other->_impl_.enemybattlechess_);
  _impl_.roundstartcontest_.InternalSwap(&other->_impl_.roundstartcontest_);
  _impl_.battlestartcontest_.InternalSwap(&other->_impl_.battlestartcontest_);
  _impl_.chessshopfreshlist_.InternalSwap(&other->_impl_.chessshopfreshlist_);
  _impl_.buychesslist_.InternalSwap(&other->_impl_.buychesslist_);
  _impl_.equipcomposelist_.InternalSwap(&other->_impl_.equipcomposelist_);
  _impl_.upgradestarchesslist_.InternalSwap(&other->_impl_.upgradestarchesslist_);
  _impl_.moneysourcelist_.InternalSwap(&other->_impl_.moneysourcelist_);
  _impl_.moneypaylist_.InternalSwap(&other->_impl_.moneypaylist_);
  _impl_.sellchesslist_.InternalSwap(&other->_impl_.sellchesslist_);
  _impl_.sharedchesslist_.InternalSwap(&other->_impl_.sharedchesslist_);
  _impl_.giveequipchesslist_.InternalSwap(&other->_impl_.giveequipchesslist_);
  _impl_.givechesslist_.InternalSwap(&other->_impl_.givechesslist_);
  _impl_.raceeffectlist_.InternalSwap(&other->_impl_.raceeffectlist_);
  _impl_.professioneffectlist_.InternalSwap(&other->_impl_.professioneffectlist_);
  _impl_.chessdamagelist_.InternalSwap(&other->_impl_.chessdamagelist_);
  _impl_.roundequipselections_.InternalSwap(&other->_impl_.roundequipselections_);
  _impl_.selectequips_.InternalSwap(&other->_impl_.selectequips_);
  _impl_.equipcomposestructlist_.InternalSwap(&other->_impl_.equipcomposestructlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targetplayerid_, lhs_arena,
      &other->_impl_.targetplayerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targetopenid_, lhs_arena,
      &other->_impl_.targetopenid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTRoundItem, _impl_.losecon_)
      + sizeof(CSDTRoundItem::_impl_.losecon_)
      - PROTOBUF_FIELD_OFFSET(CSDTRoundItem, _impl_.round_)>(
          reinterpret_cast<char*>(&_impl_.round_),
          reinterpret_cast<char*>(&other->_impl_.round_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTRoundItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[106]);
}

// ===================================================================

class CSDTRound::_Internal {
 public:
};

CSDTRound::CSDTRound(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTRound)
}
CSDTRound::CSDTRound(const CSDTRound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTRound* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSDTRound)
}

inline void CSDTRound::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTRound::~CSDTRound() {
  // @@protoc_insertion_point(destructor:msg.CSDTRound)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTRound::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
}

void CSDTRound::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTRound::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTRound)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTRound::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.CSDTRoundItem List = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTRound::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTRound)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.CSDTRoundItem List = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTRound)
  return target;
}

size_t CSDTRound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTRound)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTRoundItem List = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_impl_.list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTRound::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTRound::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTRound::GetClassData() const { return &_class_data_; }


void CSDTRound::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTRound*>(&to_msg);
  auto& from = static_cast<const CSDTRound&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTRound)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTRound::CopyFrom(const CSDTRound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTRound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTRound::IsInitialized() const {
  return true;
}

void CSDTRound::InternalSwap(CSDTRound* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTRound::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[107]);
}

// ===================================================================

class CSDTRoundEnd::_Internal {
 public:
  static const ::msg::CSDTRoundItem& rounitem(const CSDTRoundEnd* msg);
};

const ::msg::CSDTRoundItem&
CSDTRoundEnd::_Internal::rounitem(const CSDTRoundEnd* msg) {
  return *msg->_impl_.rounitem_;
}
CSDTRoundEnd::CSDTRoundEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTRoundEnd)
}
CSDTRoundEnd::CSDTRoundEnd(const CSDTRoundEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTRoundEnd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.rounitem_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_rounitem()) {
    _this->_impl_.rounitem_ = new ::msg::CSDTRoundItem(*from._impl_.rounitem_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.CSDTRoundEnd)
}

inline void CSDTRoundEnd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.rounitem_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTRoundEnd::~CSDTRoundEnd() {
  // @@protoc_insertion_point(destructor:msg.CSDTRoundEnd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTRoundEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.rounitem_;
}

void CSDTRoundEnd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTRoundEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTRoundEnd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.rounitem_ != nullptr) {
    delete _impl_.rounitem_;
  }
  _impl_.rounitem_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTRoundEnd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTRoundEnd.Id"));
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTRoundItem RounItem = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rounitem(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTRoundEnd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTRoundEnd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTRoundEnd.Id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .msg.CSDTRoundItem RounItem = 2;
  if (this->_internal_has_rounitem()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rounitem(this),
        _Internal::rounitem(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTRoundEnd)
  return target;
}

size_t CSDTRoundEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTRoundEnd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .msg.CSDTRoundItem RounItem = 2;
  if (this->_internal_has_rounitem()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rounitem_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTRoundEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTRoundEnd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTRoundEnd::GetClassData() const { return &_class_data_; }


void CSDTRoundEnd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTRoundEnd*>(&to_msg);
  auto& from = static_cast<const CSDTRoundEnd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTRoundEnd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_rounitem()) {
    _this->_internal_mutable_rounitem()->::msg::CSDTRoundItem::MergeFrom(
        from._internal_rounitem());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTRoundEnd::CopyFrom(const CSDTRoundEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTRoundEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTRoundEnd::IsInitialized() const {
  return true;
}

void CSDTRoundEnd::InternalSwap(CSDTRoundEnd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.rounitem_, other->_impl_.rounitem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTRoundEnd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[108]);
}

// ===================================================================

CSDTPvpStat_PlayerRoundEntry_DoNotUse::CSDTPvpStat_PlayerRoundEntry_DoNotUse() {}
CSDTPvpStat_PlayerRoundEntry_DoNotUse::CSDTPvpStat_PlayerRoundEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTPvpStat_PlayerRoundEntry_DoNotUse::MergeFrom(const CSDTPvpStat_PlayerRoundEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTPvpStat_PlayerRoundEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[109]);
}

// ===================================================================

class CSDTPvpStat::_Internal {
 public:
};

CSDTPvpStat::CSDTPvpStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTPvpStat::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPvpStat)
}
CSDTPvpStat::CSDTPvpStat(const CSDTPvpStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPvpStat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.winrolestat_){from._impl_.winrolestat_}
    , decltype(_impl_.failrolestat_){from._impl_.failrolestat_}
    , decltype(_impl_.drawrolestat_){from._impl_.drawrolestat_}
    , decltype(_impl_.mvpskills_){from._impl_.mvpskills_}
    , /*decltype(_impl_._mvpskills_cached_byte_size_)*/{0}
    , /*decltype(_impl_.playerround_)*/{}
    , decltype(_impl_.deathnum_){}
    , decltype(_impl_.killnum_){}
    , decltype(_impl_.waterdeathnum_){}
    , decltype(_impl_.hurtgrounddeathnum_){}
    , decltype(_impl_.mvproleid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerround_.MergeFrom(from._impl_.playerround_);
  ::memcpy(&_impl_.deathnum_, &from._impl_.deathnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mvproleid_) -
    reinterpret_cast<char*>(&_impl_.deathnum_)) + sizeof(_impl_.mvproleid_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPvpStat)
}

inline void CSDTPvpStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.winrolestat_){arena}
    , decltype(_impl_.failrolestat_){arena}
    , decltype(_impl_.drawrolestat_){arena}
    , decltype(_impl_.mvpskills_){arena}
    , /*decltype(_impl_._mvpskills_cached_byte_size_)*/{0}
    , /*decltype(_impl_.playerround_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.deathnum_){0u}
    , decltype(_impl_.killnum_){0u}
    , decltype(_impl_.waterdeathnum_){0u}
    , decltype(_impl_.hurtgrounddeathnum_){0u}
    , decltype(_impl_.mvproleid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTPvpStat::~CSDTPvpStat() {
  // @@protoc_insertion_point(destructor:msg.CSDTPvpStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTPvpStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.winrolestat_.~RepeatedPtrField();
  _impl_.failrolestat_.~RepeatedPtrField();
  _impl_.drawrolestat_.~RepeatedPtrField();
  _impl_.mvpskills_.~RepeatedField();
  _impl_.playerround_.Destruct();
  _impl_.playerround_.~MapField();
}

void CSDTPvpStat::ArenaDtor(void* object) {
  CSDTPvpStat* _this = reinterpret_cast< CSDTPvpStat* >(object);
  _this->_impl_.playerround_.Destruct();
}
void CSDTPvpStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPvpStat::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPvpStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.winrolestat_.Clear();
  _impl_.failrolestat_.Clear();
  _impl_.drawrolestat_.Clear();
  _impl_.mvpskills_.Clear();
  _impl_.playerround_.Clear();
  ::memset(&_impl_.deathnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mvproleid_) -
      reinterpret_cast<char*>(&_impl_.deathnum_)) + sizeof(_impl_.mvproleid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPvpStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 DeathNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.deathnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 KillNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.killnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 WaterDeathNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.waterdeathnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 HurtGroundDeathNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.hurtgrounddeathnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CSDTRoleStat WinRoleStat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_winrolestat(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CSDTRoleStat FailRoleStat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_failrolestat(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CSDTRoleStat DrawRoleStat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawrolestat(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 MvpRoleId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.mvproleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 MvpSkills = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mvpskills(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_mvpskills(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .msg.CSDTRound> PlayerRound = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.playerround_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPvpStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPvpStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 DeathNum = 1;
  if (this->_internal_deathnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_deathnum(), target);
  }

  // uint32 KillNum = 2;
  if (this->_internal_killnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_killnum(), target);
  }

  // uint32 WaterDeathNum = 3;
  if (this->_internal_waterdeathnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_waterdeathnum(), target);
  }

  // uint32 HurtGroundDeathNum = 4;
  if (this->_internal_hurtgrounddeathnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hurtgrounddeathnum(), target);
  }

  // repeated .msg.CSDTRoleStat WinRoleStat = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_winrolestat_size()); i < n; i++) {
    const auto& repfield = this->_internal_winrolestat(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.CSDTRoleStat FailRoleStat = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_failrolestat_size()); i < n; i++) {
    const auto& repfield = this->_internal_failrolestat(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.CSDTRoleStat DrawRoleStat = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drawrolestat_size()); i < n; i++) {
    const auto& repfield = this->_internal_drawrolestat(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 MvpRoleId = 8;
  if (this->_internal_mvproleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_mvproleid(), target);
  }

  // repeated uint32 MvpSkills = 9;
  {
    int byte_size = _impl_._mvpskills_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          9, _internal_mvpskills(), byte_size, target);
    }
  }

  // map<string, .msg.CSDTRound> PlayerRound = 10;
  if (!this->_internal_playerround().empty()) {
    using MapType = ::_pb::Map<std::string, ::msg::CSDTRound>;
    using WireHelper = CSDTPvpStat_PlayerRoundEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_playerround();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.CSDTPvpStat.PlayerRoundEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPvpStat)
  return target;
}

size_t CSDTPvpStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPvpStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTRoleStat WinRoleStat = 5;
  total_size += 1UL * this->_internal_winrolestat_size();
  for (const auto& msg : this->_impl_.winrolestat_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.CSDTRoleStat FailRoleStat = 6;
  total_size += 1UL * this->_internal_failrolestat_size();
  for (const auto& msg : this->_impl_.failrolestat_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.CSDTRoleStat DrawRoleStat = 7;
  total_size += 1UL * this->_internal_drawrolestat_size();
  for (const auto& msg : this->_impl_.drawrolestat_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 MvpSkills = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.mvpskills_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._mvpskills_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, .msg.CSDTRound> PlayerRound = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_playerround_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRound >::const_iterator
      it = this->_internal_playerround().begin();
      it != this->_internal_playerround().end(); ++it) {
    total_size += CSDTPvpStat_PlayerRoundEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint32 DeathNum = 1;
  if (this->_internal_deathnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deathnum());
  }

  // uint32 KillNum = 2;
  if (this->_internal_killnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_killnum());
  }

  // uint32 WaterDeathNum = 3;
  if (this->_internal_waterdeathnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_waterdeathnum());
  }

  // uint32 HurtGroundDeathNum = 4;
  if (this->_internal_hurtgrounddeathnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hurtgrounddeathnum());
  }

  // uint32 MvpRoleId = 8;
  if (this->_internal_mvproleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mvproleid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPvpStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPvpStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPvpStat::GetClassData() const { return &_class_data_; }


void CSDTPvpStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPvpStat*>(&to_msg);
  auto& from = static_cast<const CSDTPvpStat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPvpStat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.winrolestat_.MergeFrom(from._impl_.winrolestat_);
  _this->_impl_.failrolestat_.MergeFrom(from._impl_.failrolestat_);
  _this->_impl_.drawrolestat_.MergeFrom(from._impl_.drawrolestat_);
  _this->_impl_.mvpskills_.MergeFrom(from._impl_.mvpskills_);
  _this->_impl_.playerround_.MergeFrom(from._impl_.playerround_);
  if (from._internal_deathnum() != 0) {
    _this->_internal_set_deathnum(from._internal_deathnum());
  }
  if (from._internal_killnum() != 0) {
    _this->_internal_set_killnum(from._internal_killnum());
  }
  if (from._internal_waterdeathnum() != 0) {
    _this->_internal_set_waterdeathnum(from._internal_waterdeathnum());
  }
  if (from._internal_hurtgrounddeathnum() != 0) {
    _this->_internal_set_hurtgrounddeathnum(from._internal_hurtgrounddeathnum());
  }
  if (from._internal_mvproleid() != 0) {
    _this->_internal_set_mvproleid(from._internal_mvproleid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPvpStat::CopyFrom(const CSDTPvpStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPvpStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPvpStat::IsInitialized() const {
  return true;
}

void CSDTPvpStat::InternalSwap(CSDTPvpStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.winrolestat_.InternalSwap(&other->_impl_.winrolestat_);
  _impl_.failrolestat_.InternalSwap(&other->_impl_.failrolestat_);
  _impl_.drawrolestat_.InternalSwap(&other->_impl_.drawrolestat_);
  _impl_.mvpskills_.InternalSwap(&other->_impl_.mvpskills_);
  _impl_.playerround_.InternalSwap(&other->_impl_.playerround_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTPvpStat, _impl_.mvproleid_)
      + sizeof(CSDTPvpStat::_impl_.mvproleid_)
      - PROTOBUF_FIELD_OFFSET(CSDTPvpStat, _impl_.deathnum_)>(
          reinterpret_cast<char*>(&_impl_.deathnum_),
          reinterpret_cast<char*>(&other->_impl_.deathnum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPvpStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[110]);
}

// ===================================================================

class CSDTPvpCampResult::_Internal {
 public:
};

CSDTPvpCampResult::CSDTPvpCampResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPvpCampResult)
}
CSDTPvpCampResult::CSDTPvpCampResult(const CSDTPvpCampResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPvpCampResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.camp_){from._impl_.camp_}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.camp1score_){}
    , decltype(_impl_.camp2score_){}
    , decltype(_impl_.currencyid_){}
    , decltype(_impl_.currencycnt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rank_, &from._impl_.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.currencycnt_) -
    reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.currencycnt_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPvpCampResult)
}

inline void CSDTPvpCampResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.camp_){arena}
    , decltype(_impl_.rank_){0u}
    , decltype(_impl_.camp1score_){0u}
    , decltype(_impl_.camp2score_){0u}
    , decltype(_impl_.currencyid_){0}
    , decltype(_impl_.currencycnt_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTPvpCampResult::~CSDTPvpCampResult() {
  // @@protoc_insertion_point(destructor:msg.CSDTPvpCampResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTPvpCampResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camp_.~RepeatedPtrField();
}

void CSDTPvpCampResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPvpCampResult::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPvpCampResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.camp_.Clear();
  ::memset(&_impl_.rank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.currencycnt_) -
      reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.currencycnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPvpCampResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.CSDTCampData Camp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 Rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Camp1Score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.camp1score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Camp2Score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.camp2score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CurrencyID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.currencyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CurrencyCnt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.currencycnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPvpCampResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPvpCampResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.CSDTCampData Camp = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_camp_size()); i < n; i++) {
    const auto& repfield = this->_internal_camp(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 Rank = 2;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rank(), target);
  }

  // uint32 Camp1Score = 3;
  if (this->_internal_camp1score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_camp1score(), target);
  }

  // uint32 Camp2Score = 4;
  if (this->_internal_camp2score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_camp2score(), target);
  }

  // int32 CurrencyID = 5;
  if (this->_internal_currencyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_currencyid(), target);
  }

  // int32 CurrencyCnt = 6;
  if (this->_internal_currencycnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_currencycnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPvpCampResult)
  return target;
}

size_t CSDTPvpCampResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPvpCampResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTCampData Camp = 1;
  total_size += 1UL * this->_internal_camp_size();
  for (const auto& msg : this->_impl_.camp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 Rank = 2;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank());
  }

  // uint32 Camp1Score = 3;
  if (this->_internal_camp1score() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_camp1score());
  }

  // uint32 Camp2Score = 4;
  if (this->_internal_camp2score() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_camp2score());
  }

  // int32 CurrencyID = 5;
  if (this->_internal_currencyid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currencyid());
  }

  // int32 CurrencyCnt = 6;
  if (this->_internal_currencycnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currencycnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPvpCampResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPvpCampResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPvpCampResult::GetClassData() const { return &_class_data_; }


void CSDTPvpCampResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPvpCampResult*>(&to_msg);
  auto& from = static_cast<const CSDTPvpCampResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPvpCampResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.camp_.MergeFrom(from._impl_.camp_);
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  if (from._internal_camp1score() != 0) {
    _this->_internal_set_camp1score(from._internal_camp1score());
  }
  if (from._internal_camp2score() != 0) {
    _this->_internal_set_camp2score(from._internal_camp2score());
  }
  if (from._internal_currencyid() != 0) {
    _this->_internal_set_currencyid(from._internal_currencyid());
  }
  if (from._internal_currencycnt() != 0) {
    _this->_internal_set_currencycnt(from._internal_currencycnt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPvpCampResult::CopyFrom(const CSDTPvpCampResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPvpCampResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPvpCampResult::IsInitialized() const {
  return true;
}

void CSDTPvpCampResult::InternalSwap(CSDTPvpCampResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.camp_.InternalSwap(&other->_impl_.camp_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTPvpCampResult, _impl_.currencycnt_)
      + sizeof(CSDTPvpCampResult::_impl_.currencycnt_)
      - PROTOBUF_FIELD_OFFSET(CSDTPvpCampResult, _impl_.rank_)>(
          reinterpret_cast<char*>(&_impl_.rank_),
          reinterpret_cast<char*>(&other->_impl_.rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPvpCampResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[111]);
}

// ===================================================================

class CSDTCampData::_Internal {
 public:
};

CSDTCampData::CSDTCampData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTCampData)
}
CSDTCampData::CSDTCampData(const CSDTCampData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTCampData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerstat_){from._impl_.playerstat_}
    , decltype(_impl_.camp_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.wintype_){}
    , decltype(_impl_.surrender_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.camp_, &from._impl_.camp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.surrender_) -
    reinterpret_cast<char*>(&_impl_.camp_)) + sizeof(_impl_.surrender_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTCampData)
}

inline void CSDTCampData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerstat_){arena}
    , decltype(_impl_.camp_){0u}
    , decltype(_impl_.rank_){0u}
    , decltype(_impl_.wintype_){0}
    , decltype(_impl_.surrender_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTCampData::~CSDTCampData() {
  // @@protoc_insertion_point(destructor:msg.CSDTCampData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTCampData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playerstat_.~RepeatedPtrField();
}

void CSDTCampData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTCampData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTCampData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerstat_.Clear();
  ::memset(&_impl_.camp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.surrender_) -
      reinterpret_cast<char*>(&_impl_.camp_)) + sizeof(_impl_.surrender_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTCampData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Camp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.camp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.WINTYPE WinType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_wintype(static_cast<::msg::WINTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CSDTPvpPlayerStat PlayerStat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerstat(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool Surrender = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.surrender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTCampData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTCampData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Camp = 1;
  if (this->_internal_camp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_camp(), target);
  }

  // uint32 Rank = 2;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rank(), target);
  }

  // .msg.WINTYPE WinType = 3;
  if (this->_internal_wintype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_wintype(), target);
  }

  // repeated .msg.CSDTPvpPlayerStat PlayerStat = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_playerstat_size()); i < n; i++) {
    const auto& repfield = this->_internal_playerstat(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool Surrender = 5;
  if (this->_internal_surrender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_surrender(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTCampData)
  return target;
}

size_t CSDTCampData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTCampData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTPvpPlayerStat PlayerStat = 4;
  total_size += 1UL * this->_internal_playerstat_size();
  for (const auto& msg : this->_impl_.playerstat_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 Camp = 1;
  if (this->_internal_camp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_camp());
  }

  // uint32 Rank = 2;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank());
  }

  // .msg.WINTYPE WinType = 3;
  if (this->_internal_wintype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_wintype());
  }

  // bool Surrender = 5;
  if (this->_internal_surrender() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTCampData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTCampData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTCampData::GetClassData() const { return &_class_data_; }


void CSDTCampData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTCampData*>(&to_msg);
  auto& from = static_cast<const CSDTCampData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTCampData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.playerstat_.MergeFrom(from._impl_.playerstat_);
  if (from._internal_camp() != 0) {
    _this->_internal_set_camp(from._internal_camp());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  if (from._internal_wintype() != 0) {
    _this->_internal_set_wintype(from._internal_wintype());
  }
  if (from._internal_surrender() != 0) {
    _this->_internal_set_surrender(from._internal_surrender());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTCampData::CopyFrom(const CSDTCampData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTCampData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTCampData::IsInitialized() const {
  return true;
}

void CSDTCampData::InternalSwap(CSDTCampData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.playerstat_.InternalSwap(&other->_impl_.playerstat_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTCampData, _impl_.surrender_)
      + sizeof(CSDTCampData::_impl_.surrender_)
      - PROTOBUF_FIELD_OFFSET(CSDTCampData, _impl_.camp_)>(
          reinterpret_cast<char*>(&_impl_.camp_),
          reinterpret_cast<char*>(&other->_impl_.camp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTCampData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[112]);
}

// ===================================================================

class CSDTRoleStat::_Internal {
 public:
};

CSDTRoleStat::CSDTRoleStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTRoleStat)
}
CSDTRoleStat::CSDTRoleStat(const CSDTRoleStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTRoleStat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.talents_){from._impl_.talents_}
    , /*decltype(_impl_._talents_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){}
    , decltype(_impl_.usetime_){}
    , decltype(_impl_.killcnt_){}
    , decltype(_impl_.assistkillcnt_){}
    , decltype(_impl_.deathcnt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.deathcnt_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.deathcnt_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTRoleStat)
}

inline void CSDTRoleStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.talents_){arena}
    , /*decltype(_impl_._talents_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.usetime_){0u}
    , decltype(_impl_.killcnt_){0u}
    , decltype(_impl_.assistkillcnt_){0u}
    , decltype(_impl_.deathcnt_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTRoleStat::~CSDTRoleStat() {
  // @@protoc_insertion_point(destructor:msg.CSDTRoleStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTRoleStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.talents_.~RepeatedField();
}

void CSDTRoleStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTRoleStat::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTRoleStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.talents_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.deathcnt_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.deathcnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTRoleStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 UseTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.usetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 KillCnt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.killcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 AssistKillCnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.assistkillcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 DeathCnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.deathcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 Talents = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_talents(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_talents(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTRoleStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTRoleStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 UseTime = 2;
  if (this->_internal_usetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_usetime(), target);
  }

  // uint32 KillCnt = 3;
  if (this->_internal_killcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_killcnt(), target);
  }

  // uint32 AssistKillCnt = 4;
  if (this->_internal_assistkillcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_assistkillcnt(), target);
  }

  // uint32 DeathCnt = 5;
  if (this->_internal_deathcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_deathcnt(), target);
  }

  // repeated uint32 Talents = 6;
  {
    int byte_size = _impl_._talents_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_talents(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTRoleStat)
  return target;
}

size_t CSDTRoleStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTRoleStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 Talents = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.talents_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._talents_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 UseTime = 2;
  if (this->_internal_usetime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_usetime());
  }

  // uint32 KillCnt = 3;
  if (this->_internal_killcnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_killcnt());
  }

  // uint32 AssistKillCnt = 4;
  if (this->_internal_assistkillcnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_assistkillcnt());
  }

  // uint32 DeathCnt = 5;
  if (this->_internal_deathcnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deathcnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTRoleStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTRoleStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTRoleStat::GetClassData() const { return &_class_data_; }


void CSDTRoleStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTRoleStat*>(&to_msg);
  auto& from = static_cast<const CSDTRoleStat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTRoleStat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.talents_.MergeFrom(from._impl_.talents_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_usetime() != 0) {
    _this->_internal_set_usetime(from._internal_usetime());
  }
  if (from._internal_killcnt() != 0) {
    _this->_internal_set_killcnt(from._internal_killcnt());
  }
  if (from._internal_assistkillcnt() != 0) {
    _this->_internal_set_assistkillcnt(from._internal_assistkillcnt());
  }
  if (from._internal_deathcnt() != 0) {
    _this->_internal_set_deathcnt(from._internal_deathcnt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTRoleStat::CopyFrom(const CSDTRoleStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTRoleStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTRoleStat::IsInitialized() const {
  return true;
}

void CSDTRoleStat::InternalSwap(CSDTRoleStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.talents_.InternalSwap(&other->_impl_.talents_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTRoleStat, _impl_.deathcnt_)
      + sizeof(CSDTRoleStat::_impl_.deathcnt_)
      - PROTOBUF_FIELD_OFFSET(CSDTRoleStat, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTRoleStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[113]);
}

// ===================================================================

class CSDTPvpMvp::_Internal {
 public:
};

CSDTPvpMvp::CSDTPvpMvp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPvpMvp)
}
CSDTPvpMvp::CSDTPvpMvp(const CSDTPvpMvp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPvpMvp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hurtmax_){}
    , decltype(_impl_.bearhurtmax_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hurtmax_, &from._impl_.hurtmax_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bearhurtmax_) -
    reinterpret_cast<char*>(&_impl_.hurtmax_)) + sizeof(_impl_.bearhurtmax_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPvpMvp)
}

inline void CSDTPvpMvp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hurtmax_){0u}
    , decltype(_impl_.bearhurtmax_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTPvpMvp::~CSDTPvpMvp() {
  // @@protoc_insertion_point(destructor:msg.CSDTPvpMvp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTPvpMvp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDTPvpMvp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPvpMvp::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPvpMvp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.hurtmax_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bearhurtmax_) -
      reinterpret_cast<char*>(&_impl_.hurtmax_)) + sizeof(_impl_.bearhurtmax_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPvpMvp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 HurtMax = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hurtmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 BearHurtMax = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bearhurtmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPvpMvp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPvpMvp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 HurtMax = 1;
  if (this->_internal_hurtmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hurtmax(), target);
  }

  // uint32 BearHurtMax = 2;
  if (this->_internal_bearhurtmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bearhurtmax(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPvpMvp)
  return target;
}

size_t CSDTPvpMvp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPvpMvp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 HurtMax = 1;
  if (this->_internal_hurtmax() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hurtmax());
  }

  // uint32 BearHurtMax = 2;
  if (this->_internal_bearhurtmax() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bearhurtmax());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPvpMvp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPvpMvp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPvpMvp::GetClassData() const { return &_class_data_; }


void CSDTPvpMvp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPvpMvp*>(&to_msg);
  auto& from = static_cast<const CSDTPvpMvp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPvpMvp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hurtmax() != 0) {
    _this->_internal_set_hurtmax(from._internal_hurtmax());
  }
  if (from._internal_bearhurtmax() != 0) {
    _this->_internal_set_bearhurtmax(from._internal_bearhurtmax());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPvpMvp::CopyFrom(const CSDTPvpMvp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPvpMvp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPvpMvp::IsInitialized() const {
  return true;
}

void CSDTPvpMvp::InternalSwap(CSDTPvpMvp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTPvpMvp, _impl_.bearhurtmax_)
      + sizeof(CSDTPvpMvp::_impl_.bearhurtmax_)
      - PROTOBUF_FIELD_OFFSET(CSDTPvpMvp, _impl_.hurtmax_)>(
          reinterpret_cast<char*>(&_impl_.hurtmax_),
          reinterpret_cast<char*>(&other->_impl_.hurtmax_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPvpMvp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[114]);
}

// ===================================================================

CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse::CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse() {}
CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse::CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse::MergeFrom(const CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[115]);
}

// ===================================================================

CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse::CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse() {}
CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse::CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse::MergeFrom(const CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[116]);
}

// ===================================================================

CSDTPvpPlayerStat_ChessProEntry_DoNotUse::CSDTPvpPlayerStat_ChessProEntry_DoNotUse() {}
CSDTPvpPlayerStat_ChessProEntry_DoNotUse::CSDTPvpPlayerStat_ChessProEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTPvpPlayerStat_ChessProEntry_DoNotUse::MergeFrom(const CSDTPvpPlayerStat_ChessProEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTPvpPlayerStat_ChessProEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[117]);
}

// ===================================================================

CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse::CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse() {}
CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse::CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse::MergeFrom(const CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[118]);
}

// ===================================================================

CSDTPvpPlayerStat_PveItemsEntry_DoNotUse::CSDTPvpPlayerStat_PveItemsEntry_DoNotUse() {}
CSDTPvpPlayerStat_PveItemsEntry_DoNotUse::CSDTPvpPlayerStat_PveItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTPvpPlayerStat_PveItemsEntry_DoNotUse::MergeFrom(const CSDTPvpPlayerStat_PveItemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTPvpPlayerStat_PveItemsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[119]);
}

// ===================================================================

class CSDTPvpPlayerStat::_Internal {
 public:
  static const ::msg::CSDTPvpMvp& pvpmvp(const CSDTPvpPlayerStat* msg);
};

const ::msg::CSDTPvpMvp&
CSDTPvpPlayerStat::_Internal::pvpmvp(const CSDTPvpPlayerStat* msg) {
  return *msg->_impl_.pvpmvp_;
}
CSDTPvpPlayerStat::CSDTPvpPlayerStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTPvpPlayerStat::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPvpPlayerStat)
}
CSDTPvpPlayerStat::CSDTPvpPlayerStat(const CSDTPvpPlayerStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPvpPlayerStat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chesslist_){from._impl_.chesslist_}
    , /*decltype(_impl_._chesslist_cached_byte_size_)*/{0}
    , /*decltype(_impl_.curshowitems_)*/{}
    , /*decltype(_impl_.chessrace_)*/{}
    , /*decltype(_impl_.chesspro_)*/{}
    , decltype(_impl_.sharechesslist_){from._impl_.sharechesslist_}
    , /*decltype(_impl_._sharechesslist_cached_byte_size_)*/{0}
    , decltype(_impl_.fetters_){from._impl_.fetters_}
    , decltype(_impl_.showchesslist_){from._impl_.showchesslist_}
    , /*decltype(_impl_.unlockedchess_)*/{}
    , decltype(_impl_.passporttypeids_){from._impl_.passporttypeids_}
    , /*decltype(_impl_._passporttypeids_cached_byte_size_)*/{0}
    , decltype(_impl_.chosecardgroup_){from._impl_.chosecardgroup_}
    , /*decltype(_impl_._chosecardgroup_cached_byte_size_)*/{0}
    , /*decltype(_impl_.pveitems_)*/{}
    , decltype(_impl_.allchosecardgroup_){from._impl_.allchosecardgroup_}
    , /*decltype(_impl_._allchosecardgroup_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){}
    , decltype(_impl_.usrname_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.pvpmvp_){nullptr}
    , decltype(_impl_.headpic_){}
    , decltype(_impl_.mmr_){}
    , decltype(_impl_.chessplayer_){}
    , decltype(_impl_.round_){}
    , decltype(_impl_.winround_){}
    , decltype(_impl_.failround_){}
    , decltype(_impl_.drawround_){}
    , decltype(_impl_.killnum_){}
    , decltype(_impl_.isrobot_){}
    , decltype(_impl_.ishook_){}
    , decltype(_impl_.isdeath_){}
    , decltype(_impl_.leaveinadvance_){}
    , decltype(_impl_.deathnum_){}
    , decltype(_impl_.survivetime_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.chessplayerlvl_){}
    , decltype(_impl_.asyn_){}
    , decltype(_impl_.teamid_){}
    , decltype(_impl_.teamplayernum_){}
    , decltype(_impl_.money_){}
    , decltype(_impl_.totalvalue_){}
    , decltype(_impl_.afktime_){}
    , decltype(_impl_.province_){}
    , decltype(_impl_.group_){}
    , decltype(_impl_.playerindex_){}
    , decltype(_impl_.currencyid_){}
    , decltype(_impl_.surpluscurrency_){}
    , decltype(_impl_.income_){}
    , decltype(_impl_.channeltype_){}
    , decltype(_impl_.restricttype_){}
    , decltype(_impl_.playerrank_){}
    , decltype(_impl_.moneycost_){}
    , decltype(_impl_.moneyincome_){}
    , decltype(_impl_.score_){}
    , decltype(_impl_.exchangestate_){}
    , decltype(_impl_.taskid_){}
    , decltype(_impl_.istaskcomplete_){}
    , decltype(_impl_.curtaskprogress_){}
    , decltype(_impl_.maxtaskprogress_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.curshowitems_.MergeFrom(from._impl_.curshowitems_);
  _this->_impl_.chessrace_.MergeFrom(from._impl_.chessrace_);
  _this->_impl_.chesspro_.MergeFrom(from._impl_.chesspro_);
  _this->_impl_.unlockedchess_.MergeFrom(from._impl_.unlockedchess_);
  _this->_impl_.pveitems_.MergeFrom(from._impl_.pveitems_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.usrname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.usrname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_usrname().empty()) {
    _this->_impl_.usrname_.Set(from._internal_usrname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channelusrid().empty()) {
    _this->_impl_.channelusrid_.Set(from._internal_channelusrid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pvpmvp()) {
    _this->_impl_.pvpmvp_ = new ::msg::CSDTPvpMvp(*from._impl_.pvpmvp_);
  }
  ::memcpy(&_impl_.headpic_, &from._impl_.headpic_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxtaskprogress_) -
    reinterpret_cast<char*>(&_impl_.headpic_)) + sizeof(_impl_.maxtaskprogress_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPvpPlayerStat)
}

inline void CSDTPvpPlayerStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chesslist_){arena}
    , /*decltype(_impl_._chesslist_cached_byte_size_)*/{0}
    , /*decltype(_impl_.curshowitems_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.chessrace_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.chesspro_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.sharechesslist_){arena}
    , /*decltype(_impl_._sharechesslist_cached_byte_size_)*/{0}
    , decltype(_impl_.fetters_){arena}
    , decltype(_impl_.showchesslist_){arena}
    , /*decltype(_impl_.unlockedchess_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.passporttypeids_){arena}
    , /*decltype(_impl_._passporttypeids_cached_byte_size_)*/{0}
    , decltype(_impl_.chosecardgroup_){arena}
    , /*decltype(_impl_._chosecardgroup_cached_byte_size_)*/{0}
    , /*decltype(_impl_.pveitems_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.allchosecardgroup_){arena}
    , /*decltype(_impl_._allchosecardgroup_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){}
    , decltype(_impl_.usrname_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.pvpmvp_){nullptr}
    , decltype(_impl_.headpic_){0u}
    , decltype(_impl_.mmr_){0u}
    , decltype(_impl_.chessplayer_){0u}
    , decltype(_impl_.round_){0u}
    , decltype(_impl_.winround_){0u}
    , decltype(_impl_.failround_){0u}
    , decltype(_impl_.drawround_){0u}
    , decltype(_impl_.killnum_){0u}
    , decltype(_impl_.isrobot_){false}
    , decltype(_impl_.ishook_){false}
    , decltype(_impl_.isdeath_){false}
    , decltype(_impl_.leaveinadvance_){false}
    , decltype(_impl_.deathnum_){0u}
    , decltype(_impl_.survivetime_){0u}
    , decltype(_impl_.hp_){0u}
    , decltype(_impl_.chessplayerlvl_){0u}
    , decltype(_impl_.asyn_){0u}
    , decltype(_impl_.teamid_){0u}
    , decltype(_impl_.teamplayernum_){0u}
    , decltype(_impl_.money_){0u}
    , decltype(_impl_.totalvalue_){0u}
    , decltype(_impl_.afktime_){0u}
    , decltype(_impl_.province_){0u}
    , decltype(_impl_.group_){0}
    , decltype(_impl_.playerindex_){0u}
    , decltype(_impl_.currencyid_){0}
    , decltype(_impl_.surpluscurrency_){0}
    , decltype(_impl_.income_){0}
    , decltype(_impl_.channeltype_){0}
    , decltype(_impl_.restricttype_){0}
    , decltype(_impl_.playerrank_){0u}
    , decltype(_impl_.moneycost_){0}
    , decltype(_impl_.moneyincome_){0}
    , decltype(_impl_.score_){0u}
    , decltype(_impl_.exchangestate_){0}
    , decltype(_impl_.taskid_){0}
    , decltype(_impl_.istaskcomplete_){false}
    , decltype(_impl_.curtaskprogress_){0}
    , decltype(_impl_.maxtaskprogress_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.usrname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.usrname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTPvpPlayerStat::~CSDTPvpPlayerStat() {
  // @@protoc_insertion_point(destructor:msg.CSDTPvpPlayerStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTPvpPlayerStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chesslist_.~RepeatedField();
  _impl_.curshowitems_.Destruct();
  _impl_.curshowitems_.~MapField();
  _impl_.chessrace_.Destruct();
  _impl_.chessrace_.~MapField();
  _impl_.chesspro_.Destruct();
  _impl_.chesspro_.~MapField();
  _impl_.sharechesslist_.~RepeatedField();
  _impl_.fetters_.~RepeatedPtrField();
  _impl_.showchesslist_.~RepeatedPtrField();
  _impl_.unlockedchess_.Destruct();
  _impl_.unlockedchess_.~MapField();
  _impl_.passporttypeids_.~RepeatedField();
  _impl_.chosecardgroup_.~RepeatedField();
  _impl_.pveitems_.Destruct();
  _impl_.pveitems_.~MapField();
  _impl_.allchosecardgroup_.~RepeatedField();
  _impl_.id_.Destroy();
  _impl_.usrname_.Destroy();
  _impl_.country_.Destroy();
  _impl_.channelusrid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pvpmvp_;
}

void CSDTPvpPlayerStat::ArenaDtor(void* object) {
  CSDTPvpPlayerStat* _this = reinterpret_cast< CSDTPvpPlayerStat* >(object);
  _this->_impl_.curshowitems_.Destruct();
  _this->_impl_.chessrace_.Destruct();
  _this->_impl_.chesspro_.Destruct();
  _this->_impl_.unlockedchess_.Destruct();
  _this->_impl_.pveitems_.Destruct();
}
void CSDTPvpPlayerStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPvpPlayerStat::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPvpPlayerStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chesslist_.Clear();
  _impl_.curshowitems_.Clear();
  _impl_.chessrace_.Clear();
  _impl_.chesspro_.Clear();
  _impl_.sharechesslist_.Clear();
  _impl_.fetters_.Clear();
  _impl_.showchesslist_.Clear();
  _impl_.unlockedchess_.Clear();
  _impl_.passporttypeids_.Clear();
  _impl_.chosecardgroup_.Clear();
  _impl_.pveitems_.Clear();
  _impl_.allchosecardgroup_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.usrname_.ClearToEmpty();
  _impl_.country_.ClearToEmpty();
  _impl_.channelusrid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pvpmvp_ != nullptr) {
    delete _impl_.pvpmvp_;
  }
  _impl_.pvpmvp_ = nullptr;
  ::memset(&_impl_.headpic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxtaskprogress_) -
      reinterpret_cast<char*>(&_impl_.headpic_)) + sizeof(_impl_.maxtaskprogress_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPvpPlayerStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool IsRobot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isrobot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsHook = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ishook_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPvpPlayerStat.Id"));
        } else
          goto handle_unusual;
        continue;
      // string UsrName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_usrname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPvpPlayerStat.UsrName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.headpic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MMR = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ChessPlayer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.chessplayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ChessList = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_chesslist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_chesslist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Round = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 WinRound = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.winround_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 FailRound = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.failround_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 DrawRound = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.drawround_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 KillNum = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.killnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 DeathNum = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.deathnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SurviveTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.survivetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Hp = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ChessPlayerLvl = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.chessplayerlvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Asyn = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.asyn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsDeath = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.isdeath_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TeamId = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TeamPlayerNum = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.teamplayernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Money = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> CurShowItems = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.curshowitems_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> ChessRace = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.chessrace_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> ChessPro = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.chesspro_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 TotalValue = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.totalvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ShareChessList = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sharechesslist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 216) {
          _internal_add_sharechesslist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CSDTFetters Fetters = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_fetters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Contest ShowChessList = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_showchesslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTPvpMvp PvpMvp = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_pvpmvp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Country = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPvpPlayerStat.Country"));
        } else
          goto handle_unusual;
        continue;
      // bool LeaveInAdvance = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.leaveinadvance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 AFKTime = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.afktime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Province = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.province_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TEAMGROUP Group = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_group(static_cast<::msg::TEAMGROUP>(val));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> UnlockedChess = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.unlockedchess_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<290>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 PassportTypeIds = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_passporttypeids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_passporttypeids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PlayerIndex = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CurrencyID = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.currencyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SurplusCurrency = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.surpluscurrency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Income = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.income_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CHANELTYPE ChannelType = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channeltype(static_cast<::msg::CHANELTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string channelUsrId = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_channelusrid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPvpPlayerStat.channelUsrId"));
        } else
          goto handle_unusual;
        continue;
      // .msg.UserRestrictType RestrictType = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_restricttype(static_cast<::msg::UserRestrictType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 PlayerRank = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.playerrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MoneyCost = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.moneycost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MoneyIncome = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.moneyincome_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Score = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ChoseCardGroup = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_chosecardgroup(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 136) {
          _internal_add_chosecardgroup(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .msg.KernelItem> PveItems = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.pveitems_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<402>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 AllChoseCardGroup = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_allchosecardgroup(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 152) {
          _internal_add_allchosecardgroup(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.EXCHANGESTATE ExchangeState = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_exchangestate(static_cast<::msg::EXCHANGESTATE>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 TaskId = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsTaskComplete = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.istaskcomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CurTaskProgress = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.curtaskprogress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MaxTaskProgress = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.maxtaskprogress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPvpPlayerStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPvpPlayerStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsRobot = 1;
  if (this->_internal_isrobot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isrobot(), target);
  }

  // bool IsHook = 2;
  if (this->_internal_ishook() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ishook(), target);
  }

  // string Id = 3;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPvpPlayerStat.Id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // string UsrName = 4;
  if (!this->_internal_usrname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usrname().data(), static_cast<int>(this->_internal_usrname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPvpPlayerStat.UsrName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_usrname(), target);
  }

  // uint32 HeadPic = 5;
  if (this->_internal_headpic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_headpic(), target);
  }

  // uint32 MMR = 6;
  if (this->_internal_mmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_mmr(), target);
  }

  // uint32 ChessPlayer = 7;
  if (this->_internal_chessplayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_chessplayer(), target);
  }

  // repeated uint32 ChessList = 8;
  {
    int byte_size = _impl_._chesslist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          8, _internal_chesslist(), byte_size, target);
    }
  }

  // uint32 Round = 9;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_round(), target);
  }

  // uint32 WinRound = 10;
  if (this->_internal_winround() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_winround(), target);
  }

  // uint32 FailRound = 11;
  if (this->_internal_failround() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_failround(), target);
  }

  // uint32 DrawRound = 12;
  if (this->_internal_drawround() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_drawround(), target);
  }

  // uint32 KillNum = 13;
  if (this->_internal_killnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_killnum(), target);
  }

  // uint32 DeathNum = 14;
  if (this->_internal_deathnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_deathnum(), target);
  }

  // uint32 SurviveTime = 15;
  if (this->_internal_survivetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_survivetime(), target);
  }

  // uint32 Hp = 16;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_hp(), target);
  }

  // uint32 ChessPlayerLvl = 17;
  if (this->_internal_chessplayerlvl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_chessplayerlvl(), target);
  }

  // uint32 Asyn = 18;
  if (this->_internal_asyn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_asyn(), target);
  }

  // bool IsDeath = 19;
  if (this->_internal_isdeath() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_isdeath(), target);
  }

  // uint32 TeamId = 20;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_teamid(), target);
  }

  // uint32 TeamPlayerNum = 21;
  if (this->_internal_teamplayernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_teamplayernum(), target);
  }

  // uint32 Money = 22;
  if (this->_internal_money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_money(), target);
  }

  // map<uint32, uint32> CurShowItems = 23;
  if (!this->_internal_curshowitems().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_curshowitems();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(23, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(23, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, uint32> ChessRace = 24;
  if (!this->_internal_chessrace().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_chessrace();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(24, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(24, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, uint32> ChessPro = 25;
  if (!this->_internal_chesspro().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTPvpPlayerStat_ChessProEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_chesspro();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(25, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(25, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint32 TotalValue = 26;
  if (this->_internal_totalvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_totalvalue(), target);
  }

  // repeated uint32 ShareChessList = 27;
  {
    int byte_size = _impl_._sharechesslist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          27, _internal_sharechesslist(), byte_size, target);
    }
  }

  // repeated .msg.CSDTFetters Fetters = 28;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fetters_size()); i < n; i++) {
    const auto& repfield = this->_internal_fetters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(28, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.Contest ShowChessList = 29;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_showchesslist_size()); i < n; i++) {
    const auto& repfield = this->_internal_showchesslist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(29, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .msg.CSDTPvpMvp PvpMvp = 30;
  if (this->_internal_has_pvpmvp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::pvpmvp(this),
        _Internal::pvpmvp(this).GetCachedSize(), target, stream);
  }

  // string Country = 31;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPvpPlayerStat.Country");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_country(), target);
  }

  // bool LeaveInAdvance = 32;
  if (this->_internal_leaveinadvance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(32, this->_internal_leaveinadvance(), target);
  }

  // uint32 AFKTime = 33;
  if (this->_internal_afktime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(33, this->_internal_afktime(), target);
  }

  // uint32 Province = 34;
  if (this->_internal_province() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(34, this->_internal_province(), target);
  }

  // .msg.TEAMGROUP Group = 35;
  if (this->_internal_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      35, this->_internal_group(), target);
  }

  // map<uint32, uint32> UnlockedChess = 36;
  if (!this->_internal_unlockedchess().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_unlockedchess();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(36, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(36, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated uint32 PassportTypeIds = 37;
  {
    int byte_size = _impl_._passporttypeids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          37, _internal_passporttypeids(), byte_size, target);
    }
  }

  // uint32 PlayerIndex = 38;
  if (this->_internal_playerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(38, this->_internal_playerindex(), target);
  }

  // int32 CurrencyID = 39;
  if (this->_internal_currencyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(39, this->_internal_currencyid(), target);
  }

  // int32 SurplusCurrency = 40;
  if (this->_internal_surpluscurrency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(40, this->_internal_surpluscurrency(), target);
  }

  // int32 Income = 41;
  if (this->_internal_income() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(41, this->_internal_income(), target);
  }

  // .msg.CHANELTYPE ChannelType = 42;
  if (this->_internal_channeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      42, this->_internal_channeltype(), target);
  }

  // string channelUsrId = 43;
  if (!this->_internal_channelusrid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelusrid().data(), static_cast<int>(this->_internal_channelusrid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPvpPlayerStat.channelUsrId");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_channelusrid(), target);
  }

  // .msg.UserRestrictType RestrictType = 44;
  if (this->_internal_restricttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      44, this->_internal_restricttype(), target);
  }

  // uint32 PlayerRank = 45;
  if (this->_internal_playerrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(45, this->_internal_playerrank(), target);
  }

  // int32 MoneyCost = 46;
  if (this->_internal_moneycost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(46, this->_internal_moneycost(), target);
  }

  // int32 MoneyIncome = 47;
  if (this->_internal_moneyincome() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(47, this->_internal_moneyincome(), target);
  }

  // uint32 Score = 48;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(48, this->_internal_score(), target);
  }

  // repeated uint32 ChoseCardGroup = 49;
  {
    int byte_size = _impl_._chosecardgroup_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          49, _internal_chosecardgroup(), byte_size, target);
    }
  }

  // map<uint32, .msg.KernelItem> PveItems = 50;
  if (!this->_internal_pveitems().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::KernelItem>;
    using WireHelper = CSDTPvpPlayerStat_PveItemsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_pveitems();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(50, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(50, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated uint32 AllChoseCardGroup = 51;
  {
    int byte_size = _impl_._allchosecardgroup_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          51, _internal_allchosecardgroup(), byte_size, target);
    }
  }

  // .msg.EXCHANGESTATE ExchangeState = 52;
  if (this->_internal_exchangestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      52, this->_internal_exchangestate(), target);
  }

  // int32 TaskId = 53;
  if (this->_internal_taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(53, this->_internal_taskid(), target);
  }

  // bool IsTaskComplete = 54;
  if (this->_internal_istaskcomplete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(54, this->_internal_istaskcomplete(), target);
  }

  // int32 CurTaskProgress = 55;
  if (this->_internal_curtaskprogress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(55, this->_internal_curtaskprogress(), target);
  }

  // int32 MaxTaskProgress = 56;
  if (this->_internal_maxtaskprogress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(56, this->_internal_maxtaskprogress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPvpPlayerStat)
  return target;
}

size_t CSDTPvpPlayerStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPvpPlayerStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ChessList = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.chesslist_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._chesslist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<uint32, uint32> CurShowItems = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_curshowitems_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_curshowitems().begin();
      it != this->_internal_curshowitems().end(); ++it) {
    total_size += CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> ChessRace = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_chessrace_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_chessrace().begin();
      it != this->_internal_chessrace().end(); ++it) {
    total_size += CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> ChessPro = 25;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_chesspro_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_chesspro().begin();
      it != this->_internal_chesspro().end(); ++it) {
    total_size += CSDTPvpPlayerStat_ChessProEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated uint32 ShareChessList = 27;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.sharechesslist_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._sharechesslist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .msg.CSDTFetters Fetters = 28;
  total_size += 2UL * this->_internal_fetters_size();
  for (const auto& msg : this->_impl_.fetters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.Contest ShowChessList = 29;
  total_size += 2UL * this->_internal_showchesslist_size();
  for (const auto& msg : this->_impl_.showchesslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<uint32, uint32> UnlockedChess = 36;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unlockedchess_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_unlockedchess().begin();
      it != this->_internal_unlockedchess().end(); ++it) {
    total_size += CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated uint32 PassportTypeIds = 37;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.passporttypeids_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._passporttypeids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 ChoseCardGroup = 49;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.chosecardgroup_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._chosecardgroup_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<uint32, .msg.KernelItem> PveItems = 50;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pveitems_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::KernelItem >::const_iterator
      it = this->_internal_pveitems().begin();
      it != this->_internal_pveitems().end(); ++it) {
    total_size += CSDTPvpPlayerStat_PveItemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated uint32 AllChoseCardGroup = 51;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.allchosecardgroup_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._allchosecardgroup_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string Id = 3;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string UsrName = 4;
  if (!this->_internal_usrname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usrname());
  }

  // string Country = 31;
  if (!this->_internal_country().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string channelUsrId = 43;
  if (!this->_internal_channelusrid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelusrid());
  }

  // .msg.CSDTPvpMvp PvpMvp = 30;
  if (this->_internal_has_pvpmvp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pvpmvp_);
  }

  // uint32 HeadPic = 5;
  if (this->_internal_headpic() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpic());
  }

  // uint32 MMR = 6;
  if (this->_internal_mmr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mmr());
  }

  // uint32 ChessPlayer = 7;
  if (this->_internal_chessplayer() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chessplayer());
  }

  // uint32 Round = 9;
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_round());
  }

  // uint32 WinRound = 10;
  if (this->_internal_winround() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_winround());
  }

  // uint32 FailRound = 11;
  if (this->_internal_failround() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_failround());
  }

  // uint32 DrawRound = 12;
  if (this->_internal_drawround() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_drawround());
  }

  // uint32 KillNum = 13;
  if (this->_internal_killnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_killnum());
  }

  // bool IsRobot = 1;
  if (this->_internal_isrobot() != 0) {
    total_size += 1 + 1;
  }

  // bool IsHook = 2;
  if (this->_internal_ishook() != 0) {
    total_size += 1 + 1;
  }

  // bool IsDeath = 19;
  if (this->_internal_isdeath() != 0) {
    total_size += 2 + 1;
  }

  // bool LeaveInAdvance = 32;
  if (this->_internal_leaveinadvance() != 0) {
    total_size += 2 + 1;
  }

  // uint32 DeathNum = 14;
  if (this->_internal_deathnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deathnum());
  }

  // uint32 SurviveTime = 15;
  if (this->_internal_survivetime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_survivetime());
  }

  // uint32 Hp = 16;
  if (this->_internal_hp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_hp());
  }

  // uint32 ChessPlayerLvl = 17;
  if (this->_internal_chessplayerlvl() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_chessplayerlvl());
  }

  // uint32 Asyn = 18;
  if (this->_internal_asyn() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_asyn());
  }

  // uint32 TeamId = 20;
  if (this->_internal_teamid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_teamid());
  }

  // uint32 TeamPlayerNum = 21;
  if (this->_internal_teamplayernum() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_teamplayernum());
  }

  // uint32 Money = 22;
  if (this->_internal_money() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_money());
  }

  // uint32 TotalValue = 26;
  if (this->_internal_totalvalue() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_totalvalue());
  }

  // uint32 AFKTime = 33;
  if (this->_internal_afktime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_afktime());
  }

  // uint32 Province = 34;
  if (this->_internal_province() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_province());
  }

  // .msg.TEAMGROUP Group = 35;
  if (this->_internal_group() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_group());
  }

  // uint32 PlayerIndex = 38;
  if (this->_internal_playerindex() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_playerindex());
  }

  // int32 CurrencyID = 39;
  if (this->_internal_currencyid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_currencyid());
  }

  // int32 SurplusCurrency = 40;
  if (this->_internal_surpluscurrency() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_surpluscurrency());
  }

  // int32 Income = 41;
  if (this->_internal_income() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_income());
  }

  // .msg.CHANELTYPE ChannelType = 42;
  if (this->_internal_channeltype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_channeltype());
  }

  // .msg.UserRestrictType RestrictType = 44;
  if (this->_internal_restricttype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_restricttype());
  }

  // uint32 PlayerRank = 45;
  if (this->_internal_playerrank() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_playerrank());
  }

  // int32 MoneyCost = 46;
  if (this->_internal_moneycost() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_moneycost());
  }

  // int32 MoneyIncome = 47;
  if (this->_internal_moneyincome() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_moneyincome());
  }

  // uint32 Score = 48;
  if (this->_internal_score() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_score());
  }

  // .msg.EXCHANGESTATE ExchangeState = 52;
  if (this->_internal_exchangestate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_exchangestate());
  }

  // int32 TaskId = 53;
  if (this->_internal_taskid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  // bool IsTaskComplete = 54;
  if (this->_internal_istaskcomplete() != 0) {
    total_size += 2 + 1;
  }

  // int32 CurTaskProgress = 55;
  if (this->_internal_curtaskprogress() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_curtaskprogress());
  }

  // int32 MaxTaskProgress = 56;
  if (this->_internal_maxtaskprogress() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_maxtaskprogress());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPvpPlayerStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPvpPlayerStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPvpPlayerStat::GetClassData() const { return &_class_data_; }


void CSDTPvpPlayerStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPvpPlayerStat*>(&to_msg);
  auto& from = static_cast<const CSDTPvpPlayerStat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPvpPlayerStat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chesslist_.MergeFrom(from._impl_.chesslist_);
  _this->_impl_.curshowitems_.MergeFrom(from._impl_.curshowitems_);
  _this->_impl_.chessrace_.MergeFrom(from._impl_.chessrace_);
  _this->_impl_.chesspro_.MergeFrom(from._impl_.chesspro_);
  _this->_impl_.sharechesslist_.MergeFrom(from._impl_.sharechesslist_);
  _this->_impl_.fetters_.MergeFrom(from._impl_.fetters_);
  _this->_impl_.showchesslist_.MergeFrom(from._impl_.showchesslist_);
  _this->_impl_.unlockedchess_.MergeFrom(from._impl_.unlockedchess_);
  _this->_impl_.passporttypeids_.MergeFrom(from._impl_.passporttypeids_);
  _this->_impl_.chosecardgroup_.MergeFrom(from._impl_.chosecardgroup_);
  _this->_impl_.pveitems_.MergeFrom(from._impl_.pveitems_);
  _this->_impl_.allchosecardgroup_.MergeFrom(from._impl_.allchosecardgroup_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_usrname().empty()) {
    _this->_internal_set_usrname(from._internal_usrname());
  }
  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (!from._internal_channelusrid().empty()) {
    _this->_internal_set_channelusrid(from._internal_channelusrid());
  }
  if (from._internal_has_pvpmvp()) {
    _this->_internal_mutable_pvpmvp()->::msg::CSDTPvpMvp::MergeFrom(
        from._internal_pvpmvp());
  }
  if (from._internal_headpic() != 0) {
    _this->_internal_set_headpic(from._internal_headpic());
  }
  if (from._internal_mmr() != 0) {
    _this->_internal_set_mmr(from._internal_mmr());
  }
  if (from._internal_chessplayer() != 0) {
    _this->_internal_set_chessplayer(from._internal_chessplayer());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  if (from._internal_winround() != 0) {
    _this->_internal_set_winround(from._internal_winround());
  }
  if (from._internal_failround() != 0) {
    _this->_internal_set_failround(from._internal_failround());
  }
  if (from._internal_drawround() != 0) {
    _this->_internal_set_drawround(from._internal_drawround());
  }
  if (from._internal_killnum() != 0) {
    _this->_internal_set_killnum(from._internal_killnum());
  }
  if (from._internal_isrobot() != 0) {
    _this->_internal_set_isrobot(from._internal_isrobot());
  }
  if (from._internal_ishook() != 0) {
    _this->_internal_set_ishook(from._internal_ishook());
  }
  if (from._internal_isdeath() != 0) {
    _this->_internal_set_isdeath(from._internal_isdeath());
  }
  if (from._internal_leaveinadvance() != 0) {
    _this->_internal_set_leaveinadvance(from._internal_leaveinadvance());
  }
  if (from._internal_deathnum() != 0) {
    _this->_internal_set_deathnum(from._internal_deathnum());
  }
  if (from._internal_survivetime() != 0) {
    _this->_internal_set_survivetime(from._internal_survivetime());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_chessplayerlvl() != 0) {
    _this->_internal_set_chessplayerlvl(from._internal_chessplayerlvl());
  }
  if (from._internal_asyn() != 0) {
    _this->_internal_set_asyn(from._internal_asyn());
  }
  if (from._internal_teamid() != 0) {
    _this->_internal_set_teamid(from._internal_teamid());
  }
  if (from._internal_teamplayernum() != 0) {
    _this->_internal_set_teamplayernum(from._internal_teamplayernum());
  }
  if (from._internal_money() != 0) {
    _this->_internal_set_money(from._internal_money());
  }
  if (from._internal_totalvalue() != 0) {
    _this->_internal_set_totalvalue(from._internal_totalvalue());
  }
  if (from._internal_afktime() != 0) {
    _this->_internal_set_afktime(from._internal_afktime());
  }
  if (from._internal_province() != 0) {
    _this->_internal_set_province(from._internal_province());
  }
  if (from._internal_group() != 0) {
    _this->_internal_set_group(from._internal_group());
  }
  if (from._internal_playerindex() != 0) {
    _this->_internal_set_playerindex(from._internal_playerindex());
  }
  if (from._internal_currencyid() != 0) {
    _this->_internal_set_currencyid(from._internal_currencyid());
  }
  if (from._internal_surpluscurrency() != 0) {
    _this->_internal_set_surpluscurrency(from._internal_surpluscurrency());
  }
  if (from._internal_income() != 0) {
    _this->_internal_set_income(from._internal_income());
  }
  if (from._internal_channeltype() != 0) {
    _this->_internal_set_channeltype(from._internal_channeltype());
  }
  if (from._internal_restricttype() != 0) {
    _this->_internal_set_restricttype(from._internal_restricttype());
  }
  if (from._internal_playerrank() != 0) {
    _this->_internal_set_playerrank(from._internal_playerrank());
  }
  if (from._internal_moneycost() != 0) {
    _this->_internal_set_moneycost(from._internal_moneycost());
  }
  if (from._internal_moneyincome() != 0) {
    _this->_internal_set_moneyincome(from._internal_moneyincome());
  }
  if (from._internal_score() != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  if (from._internal_exchangestate() != 0) {
    _this->_internal_set_exchangestate(from._internal_exchangestate());
  }
  if (from._internal_taskid() != 0) {
    _this->_internal_set_taskid(from._internal_taskid());
  }
  if (from._internal_istaskcomplete() != 0) {
    _this->_internal_set_istaskcomplete(from._internal_istaskcomplete());
  }
  if (from._internal_curtaskprogress() != 0) {
    _this->_internal_set_curtaskprogress(from._internal_curtaskprogress());
  }
  if (from._internal_maxtaskprogress() != 0) {
    _this->_internal_set_maxtaskprogress(from._internal_maxtaskprogress());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPvpPlayerStat::CopyFrom(const CSDTPvpPlayerStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPvpPlayerStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPvpPlayerStat::IsInitialized() const {
  return true;
}

void CSDTPvpPlayerStat::InternalSwap(CSDTPvpPlayerStat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chesslist_.InternalSwap(&other->_impl_.chesslist_);
  _impl_.curshowitems_.InternalSwap(&other->_impl_.curshowitems_);
  _impl_.chessrace_.InternalSwap(&other->_impl_.chessrace_);
  _impl_.chesspro_.InternalSwap(&other->_impl_.chesspro_);
  _impl_.sharechesslist_.InternalSwap(&other->_impl_.sharechesslist_);
  _impl_.fetters_.InternalSwap(&other->_impl_.fetters_);
  _impl_.showchesslist_.InternalSwap(&other->_impl_.showchesslist_);
  _impl_.unlockedchess_.InternalSwap(&other->_impl_.unlockedchess_);
  _impl_.passporttypeids_.InternalSwap(&other->_impl_.passporttypeids_);
  _impl_.chosecardgroup_.InternalSwap(&other->_impl_.chosecardgroup_);
  _impl_.pveitems_.InternalSwap(&other->_impl_.pveitems_);
  _impl_.allchosecardgroup_.InternalSwap(&other->_impl_.allchosecardgroup_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.usrname_, lhs_arena,
      &other->_impl_.usrname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channelusrid_, lhs_arena,
      &other->_impl_.channelusrid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTPvpPlayerStat, _impl_.maxtaskprogress_)
      + sizeof(CSDTPvpPlayerStat::_impl_.maxtaskprogress_)
      - PROTOBUF_FIELD_OFFSET(CSDTPvpPlayerStat, _impl_.pvpmvp_)>(
          reinterpret_cast<char*>(&_impl_.pvpmvp_),
          reinterpret_cast<char*>(&other->_impl_.pvpmvp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPvpPlayerStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[120]);
}

// ===================================================================

class KernelItem::_Internal {
 public:
};

KernelItem::KernelItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.KernelItem)
}
KernelItem::KernelItem(const KernelItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KernelItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:msg.KernelItem)
}

inline void KernelItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KernelItem::~KernelItem() {
  // @@protoc_insertion_point(destructor:msg.KernelItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KernelItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KernelItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KernelItem::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.KernelItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KernelItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KernelItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.KernelItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 Count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.KernelItem)
  return target;
}

size_t KernelItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.KernelItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 Count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KernelItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KernelItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KernelItem::GetClassData() const { return &_class_data_; }


void KernelItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KernelItem*>(&to_msg);
  auto& from = static_cast<const KernelItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.KernelItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KernelItem::CopyFrom(const KernelItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.KernelItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KernelItem::IsInitialized() const {
  return true;
}

void KernelItem::InternalSwap(KernelItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KernelItem, _impl_.count_)
      + sizeof(KernelItem::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(KernelItem, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KernelItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[121]);
}

// ===================================================================

class CSDTFetters::_Internal {
 public:
};

CSDTFetters::CSDTFetters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTFetters)
}
CSDTFetters::CSDTFetters(const CSDTFetters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTFetters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resid_){}
    , decltype(_impl_.effectnum_){}
    , decltype(_impl_.maxeffectnum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.resid_, &from._impl_.resid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.maxeffectnum_) -
    reinterpret_cast<char*>(&_impl_.resid_)) + sizeof(_impl_.maxeffectnum_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTFetters)
}

inline void CSDTFetters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resid_){0u}
    , decltype(_impl_.effectnum_){0u}
    , decltype(_impl_.maxeffectnum_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTFetters::~CSDTFetters() {
  // @@protoc_insertion_point(destructor:msg.CSDTFetters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTFetters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDTFetters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTFetters::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTFetters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.resid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.maxeffectnum_) -
      reinterpret_cast<char*>(&_impl_.resid_)) + sizeof(_impl_.maxeffectnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTFetters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ResId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.resid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 EffectNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.effectnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MaxEffectNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.maxeffectnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTFetters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTFetters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ResId = 1;
  if (this->_internal_resid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_resid(), target);
  }

  // uint32 EffectNum = 2;
  if (this->_internal_effectnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_effectnum(), target);
  }

  // uint32 MaxEffectNum = 3;
  if (this->_internal_maxeffectnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_maxeffectnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTFetters)
  return target;
}

size_t CSDTFetters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTFetters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ResId = 1;
  if (this->_internal_resid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_resid());
  }

  // uint32 EffectNum = 2;
  if (this->_internal_effectnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_effectnum());
  }

  // uint32 MaxEffectNum = 3;
  if (this->_internal_maxeffectnum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxeffectnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTFetters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTFetters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTFetters::GetClassData() const { return &_class_data_; }


void CSDTFetters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTFetters*>(&to_msg);
  auto& from = static_cast<const CSDTFetters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTFetters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_resid() != 0) {
    _this->_internal_set_resid(from._internal_resid());
  }
  if (from._internal_effectnum() != 0) {
    _this->_internal_set_effectnum(from._internal_effectnum());
  }
  if (from._internal_maxeffectnum() != 0) {
    _this->_internal_set_maxeffectnum(from._internal_maxeffectnum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTFetters::CopyFrom(const CSDTFetters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTFetters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTFetters::IsInitialized() const {
  return true;
}

void CSDTFetters::InternalSwap(CSDTFetters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTFetters, _impl_.maxeffectnum_)
      + sizeof(CSDTFetters::_impl_.maxeffectnum_)
      - PROTOBUF_FIELD_OFFSET(CSDTFetters, _impl_.resid_)>(
          reinterpret_cast<char*>(&_impl_.resid_),
          reinterpret_cast<char*>(&other->_impl_.resid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTFetters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[122]);
}

// ===================================================================

class CSDTPlayerFinish::_Internal {
 public:
  static const ::msg::CSDTPvpCampResult& campresult(const CSDTPlayerFinish* msg);
  static const ::msg::CSDTPvpStat& stat(const CSDTPlayerFinish* msg);
};

const ::msg::CSDTPvpCampResult&
CSDTPlayerFinish::_Internal::campresult(const CSDTPlayerFinish* msg) {
  return *msg->_impl_.campresult_;
}
const ::msg::CSDTPvpStat&
CSDTPlayerFinish::_Internal::stat(const CSDTPlayerFinish* msg) {
  return *msg->_impl_.stat_;
}
CSDTPlayerFinish::CSDTPlayerFinish(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPlayerFinish)
}
CSDTPlayerFinish::CSDTPlayerFinish(const CSDTPlayerFinish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPlayerFinish* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.campresult_){nullptr}
    , decltype(_impl_.stat_){nullptr}
    , decltype(_impl_.playerindex_){}
    , decltype(_impl_.deathindex_){}
    , decltype(_impl_.frameindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_campresult()) {
    _this->_impl_.campresult_ = new ::msg::CSDTPvpCampResult(*from._impl_.campresult_);
  }
  if (from._internal_has_stat()) {
    _this->_impl_.stat_ = new ::msg::CSDTPvpStat(*from._impl_.stat_);
  }
  ::memcpy(&_impl_.playerindex_, &from._impl_.playerindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.frameindex_) -
    reinterpret_cast<char*>(&_impl_.playerindex_)) + sizeof(_impl_.frameindex_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPlayerFinish)
}

inline void CSDTPlayerFinish::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.campresult_){nullptr}
    , decltype(_impl_.stat_){nullptr}
    , decltype(_impl_.playerindex_){0u}
    , decltype(_impl_.deathindex_){0u}
    , decltype(_impl_.frameindex_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTPlayerFinish::~CSDTPlayerFinish() {
  // @@protoc_insertion_point(destructor:msg.CSDTPlayerFinish)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTPlayerFinish::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.campresult_;
  if (this != internal_default_instance()) delete _impl_.stat_;
}

void CSDTPlayerFinish::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPlayerFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPlayerFinish)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.campresult_ != nullptr) {
    delete _impl_.campresult_;
  }
  _impl_.campresult_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.stat_ != nullptr) {
    delete _impl_.stat_;
  }
  _impl_.stat_ = nullptr;
  ::memset(&_impl_.playerindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.frameindex_) -
      reinterpret_cast<char*>(&_impl_.playerindex_)) + sizeof(_impl_.frameindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPlayerFinish::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 PlayerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 DeathIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.deathindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 FrameIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.frameindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTPvpCampResult CampResult = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_campresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTPvpStat Stat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPlayerFinish::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPlayerFinish)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 PlayerIndex = 1;
  if (this->_internal_playerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_playerindex(), target);
  }

  // uint32 DeathIndex = 2;
  if (this->_internal_deathindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_deathindex(), target);
  }

  // uint32 FrameIndex = 3;
  if (this->_internal_frameindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_frameindex(), target);
  }

  // .msg.CSDTPvpCampResult CampResult = 4;
  if (this->_internal_has_campresult()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::campresult(this),
        _Internal::campresult(this).GetCachedSize(), target, stream);
  }

  // .msg.CSDTPvpStat Stat = 5;
  if (this->_internal_has_stat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::stat(this),
        _Internal::stat(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPlayerFinish)
  return target;
}

size_t CSDTPlayerFinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPlayerFinish)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.CSDTPvpCampResult CampResult = 4;
  if (this->_internal_has_campresult()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.campresult_);
  }

  // .msg.CSDTPvpStat Stat = 5;
  if (this->_internal_has_stat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stat_);
  }

  // uint32 PlayerIndex = 1;
  if (this->_internal_playerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_playerindex());
  }

  // uint32 DeathIndex = 2;
  if (this->_internal_deathindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deathindex());
  }

  // uint32 FrameIndex = 3;
  if (this->_internal_frameindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frameindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPlayerFinish::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPlayerFinish::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPlayerFinish::GetClassData() const { return &_class_data_; }


void CSDTPlayerFinish::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPlayerFinish*>(&to_msg);
  auto& from = static_cast<const CSDTPlayerFinish&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPlayerFinish)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_campresult()) {
    _this->_internal_mutable_campresult()->::msg::CSDTPvpCampResult::MergeFrom(
        from._internal_campresult());
  }
  if (from._internal_has_stat()) {
    _this->_internal_mutable_stat()->::msg::CSDTPvpStat::MergeFrom(
        from._internal_stat());
  }
  if (from._internal_playerindex() != 0) {
    _this->_internal_set_playerindex(from._internal_playerindex());
  }
  if (from._internal_deathindex() != 0) {
    _this->_internal_set_deathindex(from._internal_deathindex());
  }
  if (from._internal_frameindex() != 0) {
    _this->_internal_set_frameindex(from._internal_frameindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPlayerFinish::CopyFrom(const CSDTPlayerFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPlayerFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPlayerFinish::IsInitialized() const {
  return true;
}

void CSDTPlayerFinish::InternalSwap(CSDTPlayerFinish* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTPlayerFinish, _impl_.frameindex_)
      + sizeof(CSDTPlayerFinish::_impl_.frameindex_)
      - PROTOBUF_FIELD_OFFSET(CSDTPlayerFinish, _impl_.campresult_)>(
          reinterpret_cast<char*>(&_impl_.campresult_),
          reinterpret_cast<char*>(&other->_impl_.campresult_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPlayerFinish::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[123]);
}

// ===================================================================

class CSDTMarqueeItem::_Internal {
 public:
};

CSDTMarqueeItem::CSDTMarqueeItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTMarqueeItem)
}
CSDTMarqueeItem::CSDTMarqueeItem(const CSDTMarqueeItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTMarqueeItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.starttime_){}
    , decltype(_impl_.endtime_){}
    , decltype(_impl_.frequency_){}
    , decltype(_impl_.flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flag_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flag_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTMarqueeItem)
}

inline void CSDTMarqueeItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.starttime_){int64_t{0}}
    , decltype(_impl_.endtime_){int64_t{0}}
    , decltype(_impl_.frequency_){0u}
    , decltype(_impl_.flag_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTMarqueeItem::~CSDTMarqueeItem() {
  // @@protoc_insertion_point(destructor:msg.CSDTMarqueeItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTMarqueeItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
}

void CSDTMarqueeItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTMarqueeItem::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTMarqueeItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flag_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTMarqueeItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTMarqueeItem.Content"));
        } else
          goto handle_unusual;
        continue;
      // int64 StartTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 EndTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Frequency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTMarqueeItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTMarqueeItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string Content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTMarqueeItem.Content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // int64 StartTime = 3;
  if (this->_internal_starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_starttime(), target);
  }

  // int64 EndTime = 4;
  if (this->_internal_endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_endtime(), target);
  }

  // uint32 Frequency = 5;
  if (this->_internal_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_frequency(), target);
  }

  // uint32 Flag = 6;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTMarqueeItem)
  return target;
}

size_t CSDTMarqueeItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTMarqueeItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int64 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 StartTime = 3;
  if (this->_internal_starttime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_starttime());
  }

  // int64 EndTime = 4;
  if (this->_internal_endtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_endtime());
  }

  // uint32 Frequency = 5;
  if (this->_internal_frequency() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frequency());
  }

  // uint32 Flag = 6;
  if (this->_internal_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTMarqueeItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTMarqueeItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTMarqueeItem::GetClassData() const { return &_class_data_; }


void CSDTMarqueeItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTMarqueeItem*>(&to_msg);
  auto& from = static_cast<const CSDTMarqueeItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTMarqueeItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_starttime() != 0) {
    _this->_internal_set_starttime(from._internal_starttime());
  }
  if (from._internal_endtime() != 0) {
    _this->_internal_set_endtime(from._internal_endtime());
  }
  if (from._internal_frequency() != 0) {
    _this->_internal_set_frequency(from._internal_frequency());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTMarqueeItem::CopyFrom(const CSDTMarqueeItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTMarqueeItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTMarqueeItem::IsInitialized() const {
  return true;
}

void CSDTMarqueeItem::InternalSwap(CSDTMarqueeItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTMarqueeItem, _impl_.flag_)
      + sizeof(CSDTMarqueeItem::_impl_.flag_)
      - PROTOBUF_FIELD_OFFSET(CSDTMarqueeItem, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTMarqueeItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[124]);
}

// ===================================================================

class CSDTMarquee::_Internal {
 public:
};

CSDTMarquee::CSDTMarquee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTMarquee)
}
CSDTMarquee::CSDTMarquee(const CSDTMarquee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTMarquee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSDTMarquee)
}

inline void CSDTMarquee::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTMarquee::~CSDTMarquee() {
  // @@protoc_insertion_point(destructor:msg.CSDTMarquee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTMarquee::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void CSDTMarquee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTMarquee::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTMarquee)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTMarquee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.CSDTMarqueeItem Items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTMarquee::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTMarquee)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.CSDTMarqueeItem Items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTMarquee)
  return target;
}

size_t CSDTMarquee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTMarquee)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTMarqueeItem Items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTMarquee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTMarquee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTMarquee::GetClassData() const { return &_class_data_; }


void CSDTMarquee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTMarquee*>(&to_msg);
  auto& from = static_cast<const CSDTMarquee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTMarquee)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTMarquee::CopyFrom(const CSDTMarquee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTMarquee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTMarquee::IsInitialized() const {
  return true;
}

void CSDTMarquee::InternalSwap(CSDTMarquee* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTMarquee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[125]);
}

// ===================================================================

class Cond::_Internal {
 public:
};

Cond::Cond(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.Cond)
}
Cond::Cond(const Cond& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Cond* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.para_){from._impl_.para_}
    , /*decltype(_impl_._para_cached_byte_size_)*/{0}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mode().empty()) {
    _this->_impl_.mode_.Set(from._internal_mode(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:msg.Cond)
}

inline void Cond::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.para_){arena}
    , /*decltype(_impl_._para_cached_byte_size_)*/{0}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Cond::~Cond() {
  // @@protoc_insertion_point(destructor:msg.Cond)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Cond::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.para_.~RepeatedField();
  _impl_.mode_.Destroy();
}

void Cond::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Cond::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Cond)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.para_.Clear();
  _impl_.mode_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cond::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.CONDTYPE Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::CONDTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 Para = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_para(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_para(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.Cond.Mode"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Cond::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Cond)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.CONDTYPE Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated int32 Para = 2;
  {
    int byte_size = _impl_._para_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_para(), byte_size, target);
    }
  }

  // string Mode = 3;
  if (!this->_internal_mode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.Cond.Mode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Cond)
  return target;
}

size_t Cond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Cond)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Para = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.para_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._para_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string Mode = 3;
  if (!this->_internal_mode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode());
  }

  // .msg.CONDTYPE Type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cond::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Cond::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cond::GetClassData() const { return &_class_data_; }


void Cond::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Cond*>(&to_msg);
  auto& from = static_cast<const Cond&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Cond)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.para_.MergeFrom(from._impl_.para_);
  if (!from._internal_mode().empty()) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cond::CopyFrom(const Cond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Cond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cond::IsInitialized() const {
  return true;
}

void Cond::InternalSwap(Cond* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.para_.InternalSwap(&other->_impl_.para_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mode_, lhs_arena,
      &other->_impl_.mode_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Cond::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[126]);
}

// ===================================================================

class CSDTChessPlayerEquip::_Internal {
 public:
};

CSDTChessPlayerEquip::CSDTChessPlayerEquip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTChessPlayerEquip)
}
CSDTChessPlayerEquip::CSDTChessPlayerEquip(const CSDTChessPlayerEquip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTChessPlayerEquip* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instanceid_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instanceid().empty()) {
    _this->_impl_.instanceid_.Set(from._internal_instanceid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:msg.CSDTChessPlayerEquip)
}

inline void CSDTChessPlayerEquip::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instanceid_){}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTChessPlayerEquip::~CSDTChessPlayerEquip() {
  // @@protoc_insertion_point(destructor:msg.CSDTChessPlayerEquip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTChessPlayerEquip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instanceid_.Destroy();
}

void CSDTChessPlayerEquip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTChessPlayerEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTChessPlayerEquip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instanceid_.ClearToEmpty();
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTChessPlayerEquip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string InstanceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instanceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTChessPlayerEquip.InstanceId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTChessPlayerEquip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTChessPlayerEquip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string InstanceId = 2;
  if (!this->_internal_instanceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instanceid().data(), static_cast<int>(this->_internal_instanceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTChessPlayerEquip.InstanceId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instanceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTChessPlayerEquip)
  return target;
}

size_t CSDTChessPlayerEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTChessPlayerEquip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string InstanceId = 2;
  if (!this->_internal_instanceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instanceid());
  }

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTChessPlayerEquip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTChessPlayerEquip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTChessPlayerEquip::GetClassData() const { return &_class_data_; }


void CSDTChessPlayerEquip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTChessPlayerEquip*>(&to_msg);
  auto& from = static_cast<const CSDTChessPlayerEquip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTChessPlayerEquip)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instanceid().empty()) {
    _this->_internal_set_instanceid(from._internal_instanceid());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTChessPlayerEquip::CopyFrom(const CSDTChessPlayerEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTChessPlayerEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTChessPlayerEquip::IsInitialized() const {
  return true;
}

void CSDTChessPlayerEquip::InternalSwap(CSDTChessPlayerEquip* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instanceid_, lhs_arena,
      &other->_impl_.instanceid_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTChessPlayerEquip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[127]);
}

// ===================================================================

CSDTChessPlayer_EquipsEntry_DoNotUse::CSDTChessPlayer_EquipsEntry_DoNotUse() {}
CSDTChessPlayer_EquipsEntry_DoNotUse::CSDTChessPlayer_EquipsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTChessPlayer_EquipsEntry_DoNotUse::MergeFrom(const CSDTChessPlayer_EquipsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTChessPlayer_EquipsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[128]);
}

// ===================================================================

CSDTChessPlayer_EquipEntry_DoNotUse::CSDTChessPlayer_EquipEntry_DoNotUse() {}
CSDTChessPlayer_EquipEntry_DoNotUse::CSDTChessPlayer_EquipEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTChessPlayer_EquipEntry_DoNotUse::MergeFrom(const CSDTChessPlayer_EquipEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTChessPlayer_EquipEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[129]);
}

// ===================================================================

class CSDTChessPlayer::_Internal {
 public:
};

CSDTChessPlayer::CSDTChessPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTChessPlayer::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTChessPlayer)
}
CSDTChessPlayer::CSDTChessPlayer(const CSDTChessPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTChessPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.equips_)*/{}
    , /*decltype(_impl_.equip_)*/{}
    , decltype(_impl_.instanceid_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.skin_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.picture_){}
    , decltype(_impl_.voice_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.equips_.MergeFrom(from._impl_.equips_);
  _this->_impl_.equip_.MergeFrom(from._impl_.equip_);
  _impl_.instanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instanceid().empty()) {
    _this->_impl_.instanceid_.Set(from._internal_instanceid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.voice_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.voice_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTChessPlayer)
}

inline void CSDTChessPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.equips_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.equip_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.instanceid_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.skin_){0u}
    , decltype(_impl_.action_){0u}
    , decltype(_impl_.picture_){0u}
    , decltype(_impl_.voice_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTChessPlayer::~CSDTChessPlayer() {
  // @@protoc_insertion_point(destructor:msg.CSDTChessPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTChessPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.equips_.Destruct();
  _impl_.equips_.~MapField();
  _impl_.equip_.Destruct();
  _impl_.equip_.~MapField();
  _impl_.instanceid_.Destroy();
}

void CSDTChessPlayer::ArenaDtor(void* object) {
  CSDTChessPlayer* _this = reinterpret_cast< CSDTChessPlayer* >(object);
  _this->_impl_.equips_.Destruct();
  _this->_impl_.equip_.Destruct();
}
void CSDTChessPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTChessPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTChessPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.equips_.Clear();
  _impl_.equip_.Clear();
  _impl_.instanceid_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.voice_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.voice_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTChessPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Skin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.skin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Picture = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.picture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Voice = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.voice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> Equips = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.equips_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .msg.CSDTChessPlayerEquip> Equip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.equip_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string InstanceId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_instanceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTChessPlayer.InstanceId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTChessPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTChessPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 Skin = 2;
  if (this->_internal_skin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_skin(), target);
  }

  // uint32 Action = 3;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_action(), target);
  }

  // uint32 Picture = 4;
  if (this->_internal_picture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_picture(), target);
  }

  // uint32 Voice = 5;
  if (this->_internal_voice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_voice(), target);
  }

  // map<uint32, uint32> Equips = 10;
  if (!this->_internal_equips().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTChessPlayer_EquipsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_equips();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .msg.CSDTChessPlayerEquip> Equip = 11;
  if (!this->_internal_equip().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::CSDTChessPlayerEquip>;
    using WireHelper = CSDTChessPlayer_EquipEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_equip();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
      }
    }
  }

  // string InstanceId = 12;
  if (!this->_internal_instanceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instanceid().data(), static_cast<int>(this->_internal_instanceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTChessPlayer.InstanceId");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_instanceid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTChessPlayer)
  return target;
}

size_t CSDTChessPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTChessPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> Equips = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_equips_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_equips().begin();
      it != this->_internal_equips().end(); ++it) {
    total_size += CSDTChessPlayer_EquipsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .msg.CSDTChessPlayerEquip> Equip = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_equip_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTChessPlayerEquip >::const_iterator
      it = this->_internal_equip().begin();
      it != this->_internal_equip().end(); ++it) {
    total_size += CSDTChessPlayer_EquipEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string InstanceId = 12;
  if (!this->_internal_instanceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instanceid());
  }

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 Skin = 2;
  if (this->_internal_skin() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skin());
  }

  // uint32 Action = 3;
  if (this->_internal_action() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_action());
  }

  // uint32 Picture = 4;
  if (this->_internal_picture() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_picture());
  }

  // uint32 Voice = 5;
  if (this->_internal_voice() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voice());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTChessPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTChessPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTChessPlayer::GetClassData() const { return &_class_data_; }


void CSDTChessPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTChessPlayer*>(&to_msg);
  auto& from = static_cast<const CSDTChessPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTChessPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.equips_.MergeFrom(from._impl_.equips_);
  _this->_impl_.equip_.MergeFrom(from._impl_.equip_);
  if (!from._internal_instanceid().empty()) {
    _this->_internal_set_instanceid(from._internal_instanceid());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_skin() != 0) {
    _this->_internal_set_skin(from._internal_skin());
  }
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_picture() != 0) {
    _this->_internal_set_picture(from._internal_picture());
  }
  if (from._internal_voice() != 0) {
    _this->_internal_set_voice(from._internal_voice());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTChessPlayer::CopyFrom(const CSDTChessPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTChessPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTChessPlayer::IsInitialized() const {
  return true;
}

void CSDTChessPlayer::InternalSwap(CSDTChessPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.equips_.InternalSwap(&other->_impl_.equips_);
  _impl_.equip_.InternalSwap(&other->_impl_.equip_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instanceid_, lhs_arena,
      &other->_impl_.instanceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTChessPlayer, _impl_.voice_)
      + sizeof(CSDTChessPlayer::_impl_.voice_)
      - PROTOBUF_FIELD_OFFSET(CSDTChessPlayer, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTChessPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[130]);
}

// ===================================================================

class CSDTTelBook::_Internal {
 public:
};

CSDTTelBook::CSDTTelBook(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTTelBook)
}
CSDTTelBook::CSDTTelBook(const CSDTTelBook& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTTelBook* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.tel_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.mmr_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tel().empty()) {
    _this->_impl_.tel_.Set(from._internal_tel(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.mmr_ = from._impl_.mmr_;
  // @@protoc_insertion_point(copy_constructor:msg.CSDTTelBook)
}

inline void CSDTTelBook::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.tel_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.mmr_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTTelBook::~CSDTTelBook() {
  // @@protoc_insertion_point(destructor:msg.CSDTTelBook)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTTelBook::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.tel_.Destroy();
  _impl_.name_.Destroy();
}

void CSDTTelBook::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTTelBook::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTTelBook)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.tel_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.mmr_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTTelBook::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTTelBook.Id"));
        } else
          goto handle_unusual;
        continue;
      // string Tel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTTelBook.Tel"));
        } else
          goto handle_unusual;
        continue;
      // string Name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTTelBook.Name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Mmr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTTelBook::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTTelBook)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTTelBook.Id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string Tel = 2;
  if (!this->_internal_tel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tel().data(), static_cast<int>(this->_internal_tel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTTelBook.Tel");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tel(), target);
  }

  // string Name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTTelBook.Name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // uint32 Mmr = 4;
  if (this->_internal_mmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mmr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTTelBook)
  return target;
}

size_t CSDTTelBook::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTTelBook)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string Tel = 2;
  if (!this->_internal_tel().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tel());
  }

  // string Name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 Mmr = 4;
  if (this->_internal_mmr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mmr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTTelBook::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTTelBook::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTTelBook::GetClassData() const { return &_class_data_; }


void CSDTTelBook::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTTelBook*>(&to_msg);
  auto& from = static_cast<const CSDTTelBook&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTTelBook)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_tel().empty()) {
    _this->_internal_set_tel(from._internal_tel());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_mmr() != 0) {
    _this->_internal_set_mmr(from._internal_mmr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTTelBook::CopyFrom(const CSDTTelBook& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTTelBook)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTTelBook::IsInitialized() const {
  return true;
}

void CSDTTelBook::InternalSwap(CSDTTelBook* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tel_, lhs_arena,
      &other->_impl_.tel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.mmr_, other->_impl_.mmr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTTelBook::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[131]);
}

// ===================================================================

class LanguageData::_Internal {
 public:
};

LanguageData::LanguageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.LanguageData)
}
LanguageData::LanguageData(const LanguageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LanguageData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.languages_){from._impl_.languages_}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.LanguageData)
}

inline void LanguageData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.languages_){arena}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LanguageData::~LanguageData() {
  // @@protoc_insertion_point(destructor:msg.LanguageData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LanguageData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.languages_.~RepeatedPtrField();
  _impl_.key_.Destroy();
}

void LanguageData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LanguageData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.LanguageData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.languages_.Clear();
  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LanguageData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.LanguageData.Key"));
        } else
          goto handle_unusual;
        continue;
      // repeated string Languages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_languages();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.LanguageData.Languages"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LanguageData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.LanguageData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.LanguageData.Key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // repeated string Languages = 2;
  for (int i = 0, n = this->_internal_languages_size(); i < n; i++) {
    const auto& s = this->_internal_languages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.LanguageData.Languages");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.LanguageData)
  return target;
}

size_t LanguageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.LanguageData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Languages = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.languages_.size());
  for (int i = 0, n = _impl_.languages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.languages_.Get(i));
  }

  // string Key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LanguageData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LanguageData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LanguageData::GetClassData() const { return &_class_data_; }


void LanguageData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LanguageData*>(&to_msg);
  auto& from = static_cast<const LanguageData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.LanguageData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.languages_.MergeFrom(from._impl_.languages_);
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LanguageData::CopyFrom(const LanguageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.LanguageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanguageData::IsInitialized() const {
  return true;
}

void LanguageData::InternalSwap(LanguageData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.languages_.InternalSwap(&other->_impl_.languages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LanguageData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[132]);
}

// ===================================================================

GMLanguageData_LanguagesEntry_DoNotUse::GMLanguageData_LanguagesEntry_DoNotUse() {}
GMLanguageData_LanguagesEntry_DoNotUse::GMLanguageData_LanguagesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GMLanguageData_LanguagesEntry_DoNotUse::MergeFrom(const GMLanguageData_LanguagesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GMLanguageData_LanguagesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[133]);
}

// ===================================================================

class GMLanguageData::_Internal {
 public:
};

GMLanguageData::GMLanguageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &GMLanguageData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.GMLanguageData)
}
GMLanguageData::GMLanguageData(const GMLanguageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GMLanguageData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.languages_)*/{}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.languages_.MergeFrom(from._impl_.languages_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.GMLanguageData)
}

inline void GMLanguageData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.languages_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GMLanguageData::~GMLanguageData() {
  // @@protoc_insertion_point(destructor:msg.GMLanguageData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void GMLanguageData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.languages_.Destruct();
  _impl_.languages_.~MapField();
  _impl_.key_.Destroy();
}

void GMLanguageData::ArenaDtor(void* object) {
  GMLanguageData* _this = reinterpret_cast< GMLanguageData* >(object);
  _this->_impl_.languages_.Destruct();
}
void GMLanguageData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GMLanguageData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GMLanguageData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.languages_.Clear();
  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GMLanguageData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GMLanguageData.Key"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> Languages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.languages_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GMLanguageData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GMLanguageData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GMLanguageData.Key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // map<string, string> Languages = 2;
  if (!this->_internal_languages().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = GMLanguageData_LanguagesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_languages();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.GMLanguageData.LanguagesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.GMLanguageData.LanguagesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GMLanguageData)
  return target;
}

size_t GMLanguageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GMLanguageData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> Languages = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_languages_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_languages().begin();
      it != this->_internal_languages().end(); ++it) {
    total_size += GMLanguageData_LanguagesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string Key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GMLanguageData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GMLanguageData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GMLanguageData::GetClassData() const { return &_class_data_; }


void GMLanguageData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GMLanguageData*>(&to_msg);
  auto& from = static_cast<const GMLanguageData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.GMLanguageData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.languages_.MergeFrom(from._impl_.languages_);
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GMLanguageData::CopyFrom(const GMLanguageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GMLanguageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMLanguageData::IsInitialized() const {
  return true;
}

void GMLanguageData::InternalSwap(GMLanguageData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.languages_.InternalSwap(&other->_impl_.languages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GMLanguageData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[134]);
}

// ===================================================================

class CommonKVString::_Internal {
 public:
};

CommonKVString::CommonKVString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CommonKVString)
}
CommonKVString::CommonKVString(const CommonKVString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommonKVString* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.CommonKVString)
}

inline void CommonKVString::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommonKVString::~CommonKVString() {
  // @@protoc_insertion_point(destructor:msg.CommonKVString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommonKVString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void CommonKVString::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommonKVString::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CommonKVString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonKVString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CommonKVString.Key"));
        } else
          goto handle_unusual;
        continue;
      // string Value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CommonKVString.Value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommonKVString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CommonKVString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CommonKVString.Key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string Value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CommonKVString.Value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CommonKVString)
  return target;
}

size_t CommonKVString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CommonKVString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string Value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonKVString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommonKVString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonKVString::GetClassData() const { return &_class_data_; }


void CommonKVString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommonKVString*>(&to_msg);
  auto& from = static_cast<const CommonKVString&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CommonKVString)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonKVString::CopyFrom(const CommonKVString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CommonKVString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonKVString::IsInitialized() const {
  return true;
}

void CommonKVString::InternalSwap(CommonKVString* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonKVString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[135]);
}

// ===================================================================

class CDNLanguageData::_Internal {
 public:
};

CDNLanguageData::CDNLanguageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CDNLanguageData)
}
CDNLanguageData::CDNLanguageData(const CDNLanguageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDNLanguageData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.languages_){from._impl_.languages_}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.CDNLanguageData)
}

inline void CDNLanguageData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.languages_){arena}
    , decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CDNLanguageData::~CDNLanguageData() {
  // @@protoc_insertion_point(destructor:msg.CDNLanguageData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDNLanguageData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.languages_.~RepeatedPtrField();
  _impl_.key_.Destroy();
}

void CDNLanguageData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDNLanguageData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CDNLanguageData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.languages_.Clear();
  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDNLanguageData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CDNLanguageData.Key"));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CommonKVString Languages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_languages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDNLanguageData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CDNLanguageData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CDNLanguageData.Key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // repeated .msg.CommonKVString Languages = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_languages_size()); i < n; i++) {
    const auto& repfield = this->_internal_languages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CDNLanguageData)
  return target;
}

size_t CDNLanguageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CDNLanguageData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CommonKVString Languages = 2;
  total_size += 1UL * this->_internal_languages_size();
  for (const auto& msg : this->_impl_.languages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDNLanguageData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDNLanguageData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDNLanguageData::GetClassData() const { return &_class_data_; }


void CDNLanguageData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDNLanguageData*>(&to_msg);
  auto& from = static_cast<const CDNLanguageData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CDNLanguageData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.languages_.MergeFrom(from._impl_.languages_);
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDNLanguageData::CopyFrom(const CDNLanguageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CDNLanguageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDNLanguageData::IsInitialized() const {
  return true;
}

void CDNLanguageData::InternalSwap(CDNLanguageData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.languages_.InternalSwap(&other->_impl_.languages_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CDNLanguageData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[136]);
}

// ===================================================================

class CSDTSeason::_Internal {
 public:
};

CSDTSeason::CSDTSeason(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTSeason)
}
CSDTSeason::CSDTSeason(const CSDTSeason& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTSeason* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.currankseason_){}
    , decltype(_impl_.seasonawarded_){}
    , decltype(_impl_.seasontaskprogress_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.currankseason_, &from._impl_.currankseason_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.seasontaskprogress_) -
    reinterpret_cast<char*>(&_impl_.currankseason_)) + sizeof(_impl_.seasontaskprogress_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTSeason)
}

inline void CSDTSeason::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.currankseason_){0u}
    , decltype(_impl_.seasonawarded_){false}
    , decltype(_impl_.seasontaskprogress_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTSeason::~CSDTSeason() {
  // @@protoc_insertion_point(destructor:msg.CSDTSeason)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTSeason::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDTSeason::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTSeason::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTSeason)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.currankseason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.seasontaskprogress_) -
      reinterpret_cast<char*>(&_impl_.currankseason_)) + sizeof(_impl_.seasontaskprogress_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTSeason::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 CurRankSeason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.currankseason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool SeasonAwarded = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.seasonawarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SeasonTaskProgress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.seasontaskprogress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTSeason::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTSeason)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 CurRankSeason = 1;
  if (this->_internal_currankseason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_currankseason(), target);
  }

  // bool SeasonAwarded = 2;
  if (this->_internal_seasonawarded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_seasonawarded(), target);
  }

  // uint32 SeasonTaskProgress = 3;
  if (this->_internal_seasontaskprogress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seasontaskprogress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTSeason)
  return target;
}

size_t CSDTSeason::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTSeason)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 CurRankSeason = 1;
  if (this->_internal_currankseason() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_currankseason());
  }

  // bool SeasonAwarded = 2;
  if (this->_internal_seasonawarded() != 0) {
    total_size += 1 + 1;
  }

  // uint32 SeasonTaskProgress = 3;
  if (this->_internal_seasontaskprogress() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seasontaskprogress());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTSeason::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTSeason::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTSeason::GetClassData() const { return &_class_data_; }


void CSDTSeason::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTSeason*>(&to_msg);
  auto& from = static_cast<const CSDTSeason&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTSeason)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_currankseason() != 0) {
    _this->_internal_set_currankseason(from._internal_currankseason());
  }
  if (from._internal_seasonawarded() != 0) {
    _this->_internal_set_seasonawarded(from._internal_seasonawarded());
  }
  if (from._internal_seasontaskprogress() != 0) {
    _this->_internal_set_seasontaskprogress(from._internal_seasontaskprogress());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTSeason::CopyFrom(const CSDTSeason& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTSeason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTSeason::IsInitialized() const {
  return true;
}

void CSDTSeason::InternalSwap(CSDTSeason* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTSeason, _impl_.seasontaskprogress_)
      + sizeof(CSDTSeason::_impl_.seasontaskprogress_)
      - PROTOBUF_FIELD_OFFSET(CSDTSeason, _impl_.currankseason_)>(
          reinterpret_cast<char*>(&_impl_.currankseason_),
          reinterpret_cast<char*>(&other->_impl_.currankseason_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTSeason::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[137]);
}

// ===================================================================

CSDTActivity_GroupsEntry_DoNotUse::CSDTActivity_GroupsEntry_DoNotUse() {}
CSDTActivity_GroupsEntry_DoNotUse::CSDTActivity_GroupsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTActivity_GroupsEntry_DoNotUse::MergeFrom(const CSDTActivity_GroupsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTActivity_GroupsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[138]);
}

// ===================================================================

class CSDTActivity::_Internal {
 public:
};

CSDTActivity::CSDTActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTActivity::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTActivity)
}
CSDTActivity::CSDTActivity(const CSDTActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTActivity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.groups_)*/{}
    , decltype(_impl_.questionnaires_){from._impl_.questionnaires_}
    , /*decltype(_impl_._questionnaires_cached_byte_size_)*/{0}
    , decltype(_impl_.useexcelconf_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.groups_.MergeFrom(from._impl_.groups_);
  _this->_impl_.useexcelconf_ = from._impl_.useexcelconf_;
  // @@protoc_insertion_point(copy_constructor:msg.CSDTActivity)
}

inline void CSDTActivity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.groups_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.questionnaires_){arena}
    , /*decltype(_impl_._questionnaires_cached_byte_size_)*/{0}
    , decltype(_impl_.useexcelconf_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTActivity::~CSDTActivity() {
  // @@protoc_insertion_point(destructor:msg.CSDTActivity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTActivity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groups_.Destruct();
  _impl_.groups_.~MapField();
  _impl_.questionnaires_.~RepeatedField();
}

void CSDTActivity::ArenaDtor(void* object) {
  CSDTActivity* _this = reinterpret_cast< CSDTActivity* >(object);
  _this->_impl_.groups_.Destruct();
}
void CSDTActivity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTActivity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.groups_.Clear();
  _impl_.questionnaires_.Clear();
  _impl_.useexcelconf_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTActivity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, .msg.CSDTActivityGroup> Groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.groups_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 Questionnaires = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_questionnaires(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_questionnaires(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool UseExcelConf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.useexcelconf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTActivity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTActivity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .msg.CSDTActivityGroup> Groups = 1;
  if (!this->_internal_groups().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::CSDTActivityGroup>;
    using WireHelper = CSDTActivity_GroupsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_groups();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated uint32 Questionnaires = 2;
  {
    int byte_size = _impl_._questionnaires_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_questionnaires(), byte_size, target);
    }
  }

  // bool UseExcelConf = 3;
  if (this->_internal_useexcelconf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_useexcelconf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTActivity)
  return target;
}

size_t CSDTActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTActivity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .msg.CSDTActivityGroup> Groups = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_groups_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActivityGroup >::const_iterator
      it = this->_internal_groups().begin();
      it != this->_internal_groups().end(); ++it) {
    total_size += CSDTActivity_GroupsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated uint32 Questionnaires = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.questionnaires_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._questionnaires_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool UseExcelConf = 3;
  if (this->_internal_useexcelconf() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTActivity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTActivity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTActivity::GetClassData() const { return &_class_data_; }


void CSDTActivity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTActivity*>(&to_msg);
  auto& from = static_cast<const CSDTActivity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTActivity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.groups_.MergeFrom(from._impl_.groups_);
  _this->_impl_.questionnaires_.MergeFrom(from._impl_.questionnaires_);
  if (from._internal_useexcelconf() != 0) {
    _this->_internal_set_useexcelconf(from._internal_useexcelconf());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTActivity::CopyFrom(const CSDTActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTActivity::IsInitialized() const {
  return true;
}

void CSDTActivity::InternalSwap(CSDTActivity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.groups_.InternalSwap(&other->_impl_.groups_);
  _impl_.questionnaires_.InternalSwap(&other->_impl_.questionnaires_);
  swap(_impl_.useexcelconf_, other->_impl_.useexcelconf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTActivity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[139]);
}

// ===================================================================

CSDTActivityGroup_ActivitiesEntry_DoNotUse::CSDTActivityGroup_ActivitiesEntry_DoNotUse() {}
CSDTActivityGroup_ActivitiesEntry_DoNotUse::CSDTActivityGroup_ActivitiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTActivityGroup_ActivitiesEntry_DoNotUse::MergeFrom(const CSDTActivityGroup_ActivitiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTActivityGroup_ActivitiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[140]);
}

// ===================================================================

class CSDTActivityGroup::_Internal {
 public:
  static const ::msg::CSDTActivityRecord& record(const CSDTActivityGroup* msg);
};

const ::msg::CSDTActivityRecord&
CSDTActivityGroup::_Internal::record(const CSDTActivityGroup* msg) {
  return *msg->_impl_.record_;
}
CSDTActivityGroup::CSDTActivityGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTActivityGroup::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTActivityGroup)
}
CSDTActivityGroup::CSDTActivityGroup(const CSDTActivityGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTActivityGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.activities_)*/{}
    , decltype(_impl_.md5sum_){}
    , decltype(_impl_.record_){nullptr}
    , decltype(_impl_.begintime_){}
    , decltype(_impl_.logindays_){}
    , decltype(_impl_.chestlevel_){}
    , decltype(_impl_.endtime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.activities_.MergeFrom(from._impl_.activities_);
  _impl_.md5sum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.md5sum_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_md5sum().empty()) {
    _this->_impl_.md5sum_.Set(from._internal_md5sum(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_record()) {
    _this->_impl_.record_ = new ::msg::CSDTActivityRecord(*from._impl_.record_);
  }
  ::memcpy(&_impl_.begintime_, &from._impl_.begintime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.endtime_) -
    reinterpret_cast<char*>(&_impl_.begintime_)) + sizeof(_impl_.endtime_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTActivityGroup)
}

inline void CSDTActivityGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.activities_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.md5sum_){}
    , decltype(_impl_.record_){nullptr}
    , decltype(_impl_.begintime_){int64_t{0}}
    , decltype(_impl_.logindays_){0u}
    , decltype(_impl_.chestlevel_){0}
    , decltype(_impl_.endtime_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.md5sum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.md5sum_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTActivityGroup::~CSDTActivityGroup() {
  // @@protoc_insertion_point(destructor:msg.CSDTActivityGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTActivityGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.activities_.Destruct();
  _impl_.activities_.~MapField();
  _impl_.md5sum_.Destroy();
  if (this != internal_default_instance()) delete _impl_.record_;
}

void CSDTActivityGroup::ArenaDtor(void* object) {
  CSDTActivityGroup* _this = reinterpret_cast< CSDTActivityGroup* >(object);
  _this->_impl_.activities_.Destruct();
}
void CSDTActivityGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTActivityGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTActivityGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.activities_.Clear();
  _impl_.md5sum_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.record_ != nullptr) {
    delete _impl_.record_;
  }
  _impl_.record_ = nullptr;
  ::memset(&_impl_.begintime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.endtime_) -
      reinterpret_cast<char*>(&_impl_.begintime_)) + sizeof(_impl_.endtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTActivityGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, .msg.CSDTActivityDetail> Activities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.activities_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string Md5Sum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_md5sum();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTActivityGroup.Md5Sum"));
        } else
          goto handle_unusual;
        continue;
      // int64 BeginTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.begintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTActivityRecord Record = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_record(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 LoginDays = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.logindays_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ChestLevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.chestlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 EndTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTActivityGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTActivityGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .msg.CSDTActivityDetail> Activities = 1;
  if (!this->_internal_activities().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::CSDTActivityDetail>;
    using WireHelper = CSDTActivityGroup_ActivitiesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_activities();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  // string Md5Sum = 2;
  if (!this->_internal_md5sum().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_md5sum().data(), static_cast<int>(this->_internal_md5sum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTActivityGroup.Md5Sum");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_md5sum(), target);
  }

  // int64 BeginTime = 3;
  if (this->_internal_begintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_begintime(), target);
  }

  // .msg.CSDTActivityRecord Record = 4;
  if (this->_internal_has_record()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::record(this),
        _Internal::record(this).GetCachedSize(), target, stream);
  }

  // uint32 LoginDays = 5;
  if (this->_internal_logindays() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_logindays(), target);
  }

  // int32 ChestLevel = 6;
  if (this->_internal_chestlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_chestlevel(), target);
  }

  // int64 EndTime = 7;
  if (this->_internal_endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_endtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTActivityGroup)
  return target;
}

size_t CSDTActivityGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTActivityGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .msg.CSDTActivityDetail> Activities = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_activities_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActivityDetail >::const_iterator
      it = this->_internal_activities().begin();
      it != this->_internal_activities().end(); ++it) {
    total_size += CSDTActivityGroup_ActivitiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string Md5Sum = 2;
  if (!this->_internal_md5sum().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_md5sum());
  }

  // .msg.CSDTActivityRecord Record = 4;
  if (this->_internal_has_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.record_);
  }

  // int64 BeginTime = 3;
  if (this->_internal_begintime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_begintime());
  }

  // uint32 LoginDays = 5;
  if (this->_internal_logindays() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_logindays());
  }

  // int32 ChestLevel = 6;
  if (this->_internal_chestlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chestlevel());
  }

  // int64 EndTime = 7;
  if (this->_internal_endtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_endtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTActivityGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTActivityGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTActivityGroup::GetClassData() const { return &_class_data_; }


void CSDTActivityGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTActivityGroup*>(&to_msg);
  auto& from = static_cast<const CSDTActivityGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTActivityGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.activities_.MergeFrom(from._impl_.activities_);
  if (!from._internal_md5sum().empty()) {
    _this->_internal_set_md5sum(from._internal_md5sum());
  }
  if (from._internal_has_record()) {
    _this->_internal_mutable_record()->::msg::CSDTActivityRecord::MergeFrom(
        from._internal_record());
  }
  if (from._internal_begintime() != 0) {
    _this->_internal_set_begintime(from._internal_begintime());
  }
  if (from._internal_logindays() != 0) {
    _this->_internal_set_logindays(from._internal_logindays());
  }
  if (from._internal_chestlevel() != 0) {
    _this->_internal_set_chestlevel(from._internal_chestlevel());
  }
  if (from._internal_endtime() != 0) {
    _this->_internal_set_endtime(from._internal_endtime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTActivityGroup::CopyFrom(const CSDTActivityGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTActivityGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTActivityGroup::IsInitialized() const {
  return true;
}

void CSDTActivityGroup::InternalSwap(CSDTActivityGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.activities_.InternalSwap(&other->_impl_.activities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.md5sum_, lhs_arena,
      &other->_impl_.md5sum_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTActivityGroup, _impl_.endtime_)
      + sizeof(CSDTActivityGroup::_impl_.endtime_)
      - PROTOBUF_FIELD_OFFSET(CSDTActivityGroup, _impl_.record_)>(
          reinterpret_cast<char*>(&_impl_.record_),
          reinterpret_cast<char*>(&other->_impl_.record_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTActivityGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[141]);
}

// ===================================================================

class CSDTActivityDetail::_Internal {
 public:
};

CSDTActivityDetail::CSDTActivityDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTActivityDetail)
}
CSDTActivityDetail::CSDTActivityDetail(const CSDTActivityDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTActivityDetail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.md5sum_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.getaward_){}
    , decltype(_impl_.unlock_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.md5sum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.md5sum_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_md5sum().empty()) {
    _this->_impl_.md5sum_.Set(from._internal_md5sum(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unlock_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.unlock_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTActivityDetail)
}

inline void CSDTActivityDetail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.md5sum_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.progress_){0u}
    , decltype(_impl_.getaward_){false}
    , decltype(_impl_.unlock_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.md5sum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.md5sum_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTActivityDetail::~CSDTActivityDetail() {
  // @@protoc_insertion_point(destructor:msg.CSDTActivityDetail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTActivityDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.md5sum_.Destroy();
}

void CSDTActivityDetail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTActivityDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTActivityDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.md5sum_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.unlock_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.unlock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTActivityDetail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool GetAward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.getaward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Md5Sum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_md5sum();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTActivityDetail.Md5Sum"));
        } else
          goto handle_unusual;
        continue;
      // bool Unlock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.unlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTActivityDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTActivityDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 Progress = 2;
  if (this->_internal_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_progress(), target);
  }

  // bool GetAward = 3;
  if (this->_internal_getaward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_getaward(), target);
  }

  // string Md5Sum = 4;
  if (!this->_internal_md5sum().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_md5sum().data(), static_cast<int>(this->_internal_md5sum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTActivityDetail.Md5Sum");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_md5sum(), target);
  }

  // bool Unlock = 5;
  if (this->_internal_unlock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_unlock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTActivityDetail)
  return target;
}

size_t CSDTActivityDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTActivityDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Md5Sum = 4;
  if (!this->_internal_md5sum().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_md5sum());
  }

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 Progress = 2;
  if (this->_internal_progress() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_progress());
  }

  // bool GetAward = 3;
  if (this->_internal_getaward() != 0) {
    total_size += 1 + 1;
  }

  // bool Unlock = 5;
  if (this->_internal_unlock() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTActivityDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTActivityDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTActivityDetail::GetClassData() const { return &_class_data_; }


void CSDTActivityDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTActivityDetail*>(&to_msg);
  auto& from = static_cast<const CSDTActivityDetail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTActivityDetail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_md5sum().empty()) {
    _this->_internal_set_md5sum(from._internal_md5sum());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_progress() != 0) {
    _this->_internal_set_progress(from._internal_progress());
  }
  if (from._internal_getaward() != 0) {
    _this->_internal_set_getaward(from._internal_getaward());
  }
  if (from._internal_unlock() != 0) {
    _this->_internal_set_unlock(from._internal_unlock());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTActivityDetail::CopyFrom(const CSDTActivityDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTActivityDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTActivityDetail::IsInitialized() const {
  return true;
}

void CSDTActivityDetail::InternalSwap(CSDTActivityDetail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.md5sum_, lhs_arena,
      &other->_impl_.md5sum_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTActivityDetail, _impl_.unlock_)
      + sizeof(CSDTActivityDetail::_impl_.unlock_)
      - PROTOBUF_FIELD_OFFSET(CSDTActivityDetail, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTActivityDetail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[142]);
}

// ===================================================================

CSDTActivityRecord_ProcessEntry_DoNotUse::CSDTActivityRecord_ProcessEntry_DoNotUse() {}
CSDTActivityRecord_ProcessEntry_DoNotUse::CSDTActivityRecord_ProcessEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTActivityRecord_ProcessEntry_DoNotUse::MergeFrom(const CSDTActivityRecord_ProcessEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTActivityRecord_ProcessEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[143]);
}

// ===================================================================

CSDTActivityRecord_RewardEntry_DoNotUse::CSDTActivityRecord_RewardEntry_DoNotUse() {}
CSDTActivityRecord_RewardEntry_DoNotUse::CSDTActivityRecord_RewardEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTActivityRecord_RewardEntry_DoNotUse::MergeFrom(const CSDTActivityRecord_RewardEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTActivityRecord_RewardEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[144]);
}

// ===================================================================

class CSDTActivityRecord::_Internal {
 public:
};

CSDTActivityRecord::CSDTActivityRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTActivityRecord::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTActivityRecord)
}
CSDTActivityRecord::CSDTActivityRecord(const CSDTActivityRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTActivityRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.process_)*/{}
    , /*decltype(_impl_.reward_)*/{}
    , decltype(_impl_.params_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.process_.MergeFrom(from._impl_.process_);
  _this->_impl_.reward_.MergeFrom(from._impl_.reward_);
  _impl_.params_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.params_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_params().empty()) {
    _this->_impl_.params_.Set(from._internal_params(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.CSDTActivityRecord)
}

inline void CSDTActivityRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.process_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.reward_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.params_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.params_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.params_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTActivityRecord::~CSDTActivityRecord() {
  // @@protoc_insertion_point(destructor:msg.CSDTActivityRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTActivityRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.process_.Destruct();
  _impl_.process_.~MapField();
  _impl_.reward_.Destruct();
  _impl_.reward_.~MapField();
  _impl_.params_.Destroy();
}

void CSDTActivityRecord::ArenaDtor(void* object) {
  CSDTActivityRecord* _this = reinterpret_cast< CSDTActivityRecord* >(object);
  _this->_impl_.process_.Destruct();
  _this->_impl_.reward_.Destruct();
}
void CSDTActivityRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTActivityRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTActivityRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.process_.Clear();
  _impl_.reward_.Clear();
  _impl_.params_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTActivityRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, uint32> Process = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.process_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> Reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.reward_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes Params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_params();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTActivityRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTActivityRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> Process = 1;
  if (!this->_internal_process().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTActivityRecord_ProcessEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_process();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, uint32> Reward = 2;
  if (!this->_internal_reward().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTActivityRecord_RewardEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_reward();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  // bytes Params = 3;
  if (!this->_internal_params().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_params(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTActivityRecord)
  return target;
}

size_t CSDTActivityRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTActivityRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> Process = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_process_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_process().begin();
      it != this->_internal_process().end(); ++it) {
    total_size += CSDTActivityRecord_ProcessEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> Reward = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_reward_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_reward().begin();
      it != this->_internal_reward().end(); ++it) {
    total_size += CSDTActivityRecord_RewardEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes Params = 3;
  if (!this->_internal_params().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_params());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTActivityRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTActivityRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTActivityRecord::GetClassData() const { return &_class_data_; }


void CSDTActivityRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTActivityRecord*>(&to_msg);
  auto& from = static_cast<const CSDTActivityRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTActivityRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.process_.MergeFrom(from._impl_.process_);
  _this->_impl_.reward_.MergeFrom(from._impl_.reward_);
  if (!from._internal_params().empty()) {
    _this->_internal_set_params(from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTActivityRecord::CopyFrom(const CSDTActivityRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTActivityRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTActivityRecord::IsInitialized() const {
  return true;
}

void CSDTActivityRecord::InternalSwap(CSDTActivityRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.process_.InternalSwap(&other->_impl_.process_);
  _impl_.reward_.InternalSwap(&other->_impl_.reward_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.params_, lhs_arena,
      &other->_impl_.params_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTActivityRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[145]);
}

// ===================================================================

CSDTRecruitData_IsRecruitedEntry_DoNotUse::CSDTRecruitData_IsRecruitedEntry_DoNotUse() {}
CSDTRecruitData_IsRecruitedEntry_DoNotUse::CSDTRecruitData_IsRecruitedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTRecruitData_IsRecruitedEntry_DoNotUse::MergeFrom(const CSDTRecruitData_IsRecruitedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTRecruitData_IsRecruitedEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[146]);
}

// ===================================================================

class CSDTRecruitData::_Internal {
 public:
};

CSDTRecruitData::CSDTRecruitData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTRecruitData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTRecruitData)
}
CSDTRecruitData::CSDTRecruitData(const CSDTRecruitData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTRecruitData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.isrecruited_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.isrecruited_.MergeFrom(from._impl_.isrecruited_);
  // @@protoc_insertion_point(copy_constructor:msg.CSDTRecruitData)
}

inline void CSDTRecruitData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.isrecruited_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTRecruitData::~CSDTRecruitData() {
  // @@protoc_insertion_point(destructor:msg.CSDTRecruitData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTRecruitData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.isrecruited_.Destruct();
  _impl_.isrecruited_.~MapField();
}

void CSDTRecruitData::ArenaDtor(void* object) {
  CSDTRecruitData* _this = reinterpret_cast< CSDTRecruitData* >(object);
  _this->_impl_.isrecruited_.Destruct();
}
void CSDTRecruitData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTRecruitData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTRecruitData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.isrecruited_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTRecruitData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, bool> IsRecruited = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.isrecruited_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTRecruitData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTRecruitData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, bool> IsRecruited = 1;
  if (!this->_internal_isrecruited().empty()) {
    using MapType = ::_pb::Map<uint32_t, bool>;
    using WireHelper = CSDTRecruitData_IsRecruitedEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_isrecruited();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTRecruitData)
  return target;
}

size_t CSDTRecruitData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTRecruitData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, bool> IsRecruited = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_isrecruited_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >::const_iterator
      it = this->_internal_isrecruited().begin();
      it != this->_internal_isrecruited().end(); ++it) {
    total_size += CSDTRecruitData_IsRecruitedEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTRecruitData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTRecruitData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTRecruitData::GetClassData() const { return &_class_data_; }


void CSDTRecruitData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTRecruitData*>(&to_msg);
  auto& from = static_cast<const CSDTRecruitData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTRecruitData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.isrecruited_.MergeFrom(from._impl_.isrecruited_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTRecruitData::CopyFrom(const CSDTRecruitData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTRecruitData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTRecruitData::IsInitialized() const {
  return true;
}

void CSDTRecruitData::InternalSwap(CSDTRecruitData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.isrecruited_.InternalSwap(&other->_impl_.isrecruited_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTRecruitData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[147]);
}

// ===================================================================

class CSDTRecruitPlayer::_Internal {
 public:
};

CSDTRecruitPlayer::CSDTRecruitPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTRecruitPlayer)
}
CSDTRecruitPlayer::CSDTRecruitPlayer(const CSDTRecruitPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTRecruitPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , decltype(_impl_.battlecount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.battlecount_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.battlecount_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTRecruitPlayer)
}

inline void CSDTRecruitPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , decltype(_impl_.battlecount_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTRecruitPlayer::~CSDTRecruitPlayer() {
  // @@protoc_insertion_point(destructor:msg.CSDTRecruitPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTRecruitPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDTRecruitPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTRecruitPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTRecruitPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.battlecount_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.battlecount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTRecruitPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.PlayerRecruitStatus Status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::msg::PlayerRecruitStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 BattleCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.battlecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTRecruitPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTRecruitPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.PlayerRecruitStatus Status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // uint32 BattleCount = 2;
  if (this->_internal_battlecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_battlecount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTRecruitPlayer)
  return target;
}

size_t CSDTRecruitPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTRecruitPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PlayerRecruitStatus Status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // uint32 BattleCount = 2;
  if (this->_internal_battlecount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_battlecount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTRecruitPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTRecruitPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTRecruitPlayer::GetClassData() const { return &_class_data_; }


void CSDTRecruitPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTRecruitPlayer*>(&to_msg);
  auto& from = static_cast<const CSDTRecruitPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTRecruitPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_battlecount() != 0) {
    _this->_internal_set_battlecount(from._internal_battlecount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTRecruitPlayer::CopyFrom(const CSDTRecruitPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTRecruitPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTRecruitPlayer::IsInitialized() const {
  return true;
}

void CSDTRecruitPlayer::InternalSwap(CSDTRecruitPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTRecruitPlayer, _impl_.battlecount_)
      + sizeof(CSDTRecruitPlayer::_impl_.battlecount_)
      - PROTOBUF_FIELD_OFFSET(CSDTRecruitPlayer, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTRecruitPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[148]);
}

// ===================================================================

CSDTActivityRecruit_PlayersEntry_DoNotUse::CSDTActivityRecruit_PlayersEntry_DoNotUse() {}
CSDTActivityRecruit_PlayersEntry_DoNotUse::CSDTActivityRecruit_PlayersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTActivityRecruit_PlayersEntry_DoNotUse::MergeFrom(const CSDTActivityRecruit_PlayersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTActivityRecruit_PlayersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[149]);
}

// ===================================================================

class CSDTActivityRecruit::_Internal {
 public:
};

CSDTActivityRecruit::CSDTActivityRecruit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTActivityRecruit::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTActivityRecruit)
}
CSDTActivityRecruit::CSDTActivityRecruit(const CSDTActivityRecruit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTActivityRecruit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.players_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  // @@protoc_insertion_point(copy_constructor:msg.CSDTActivityRecruit)
}

inline void CSDTActivityRecruit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.players_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTActivityRecruit::~CSDTActivityRecruit() {
  // @@protoc_insertion_point(destructor:msg.CSDTActivityRecruit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTActivityRecruit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.Destruct();
  _impl_.players_.~MapField();
}

void CSDTActivityRecruit::ArenaDtor(void* object) {
  CSDTActivityRecruit* _this = reinterpret_cast< CSDTActivityRecruit* >(object);
  _this->_impl_.players_.Destruct();
}
void CSDTActivityRecruit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTActivityRecruit::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTActivityRecruit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTActivityRecruit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .msg.CSDTRecruitPlayer> Players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.players_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTActivityRecruit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTActivityRecruit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .msg.CSDTRecruitPlayer> Players = 1;
  if (!this->_internal_players().empty()) {
    using MapType = ::_pb::Map<std::string, ::msg::CSDTRecruitPlayer>;
    using WireHelper = CSDTActivityRecruit_PlayersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_players();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.CSDTActivityRecruit.PlayersEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTActivityRecruit)
  return target;
}

size_t CSDTActivityRecruit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTActivityRecruit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .msg.CSDTRecruitPlayer> Players = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_players_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRecruitPlayer >::const_iterator
      it = this->_internal_players().begin();
      it != this->_internal_players().end(); ++it) {
    total_size += CSDTActivityRecruit_PlayersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTActivityRecruit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTActivityRecruit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTActivityRecruit::GetClassData() const { return &_class_data_; }


void CSDTActivityRecruit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTActivityRecruit*>(&to_msg);
  auto& from = static_cast<const CSDTActivityRecruit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTActivityRecruit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTActivityRecruit::CopyFrom(const CSDTActivityRecruit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTActivityRecruit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTActivityRecruit::IsInitialized() const {
  return true;
}

void CSDTActivityRecruit::InternalSwap(CSDTActivityRecruit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTActivityRecruit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[150]);
}

// ===================================================================

CSDTActGroupBuy_ProcessEntry_DoNotUse::CSDTActGroupBuy_ProcessEntry_DoNotUse() {}
CSDTActGroupBuy_ProcessEntry_DoNotUse::CSDTActGroupBuy_ProcessEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTActGroupBuy_ProcessEntry_DoNotUse::MergeFrom(const CSDTActGroupBuy_ProcessEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTActGroupBuy_ProcessEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[151]);
}

// ===================================================================

CSDTActGroupBuy_RewardEntry_DoNotUse::CSDTActGroupBuy_RewardEntry_DoNotUse() {}
CSDTActGroupBuy_RewardEntry_DoNotUse::CSDTActGroupBuy_RewardEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTActGroupBuy_RewardEntry_DoNotUse::MergeFrom(const CSDTActGroupBuy_RewardEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTActGroupBuy_RewardEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[152]);
}

// ===================================================================

class CSDTActGroupBuy::_Internal {
 public:
};

CSDTActGroupBuy::CSDTActGroupBuy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTActGroupBuy::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTActGroupBuy)
}
CSDTActGroupBuy::CSDTActGroupBuy(const CSDTActGroupBuy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTActGroupBuy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.process_)*/{}
    , /*decltype(_impl_.reward_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.process_.MergeFrom(from._impl_.process_);
  _this->_impl_.reward_.MergeFrom(from._impl_.reward_);
  // @@protoc_insertion_point(copy_constructor:msg.CSDTActGroupBuy)
}

inline void CSDTActGroupBuy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.process_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.reward_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTActGroupBuy::~CSDTActGroupBuy() {
  // @@protoc_insertion_point(destructor:msg.CSDTActGroupBuy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTActGroupBuy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.process_.Destruct();
  _impl_.process_.~MapField();
  _impl_.reward_.Destruct();
  _impl_.reward_.~MapField();
}

void CSDTActGroupBuy::ArenaDtor(void* object) {
  CSDTActGroupBuy* _this = reinterpret_cast< CSDTActGroupBuy* >(object);
  _this->_impl_.process_.Destruct();
  _this->_impl_.reward_.Destruct();
}
void CSDTActGroupBuy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTActGroupBuy::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTActGroupBuy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.process_.Clear();
  _impl_.reward_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTActGroupBuy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, uint32> Process = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.process_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .msg.CSDTActGroupBuyRwd> Reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.reward_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTActGroupBuy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTActGroupBuy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, uint32> Process = 1;
  if (!this->_internal_process().empty()) {
    using MapType = ::_pb::Map<std::string, uint32_t>;
    using WireHelper = CSDTActGroupBuy_ProcessEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_process();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.CSDTActGroupBuy.ProcessEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .msg.CSDTActGroupBuyRwd> Reward = 2;
  if (!this->_internal_reward().empty()) {
    using MapType = ::_pb::Map<std::string, ::msg::CSDTActGroupBuyRwd>;
    using WireHelper = CSDTActGroupBuy_RewardEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_reward();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.CSDTActGroupBuy.RewardEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTActGroupBuy)
  return target;
}

size_t CSDTActGroupBuy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTActGroupBuy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, uint32> Process = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_process_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >::const_iterator
      it = this->_internal_process().begin();
      it != this->_internal_process().end(); ++it) {
    total_size += CSDTActGroupBuy_ProcessEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .msg.CSDTActGroupBuyRwd> Reward = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_reward_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTActGroupBuyRwd >::const_iterator
      it = this->_internal_reward().begin();
      it != this->_internal_reward().end(); ++it) {
    total_size += CSDTActGroupBuy_RewardEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTActGroupBuy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTActGroupBuy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTActGroupBuy::GetClassData() const { return &_class_data_; }


void CSDTActGroupBuy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTActGroupBuy*>(&to_msg);
  auto& from = static_cast<const CSDTActGroupBuy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTActGroupBuy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.process_.MergeFrom(from._impl_.process_);
  _this->_impl_.reward_.MergeFrom(from._impl_.reward_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTActGroupBuy::CopyFrom(const CSDTActGroupBuy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTActGroupBuy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTActGroupBuy::IsInitialized() const {
  return true;
}

void CSDTActGroupBuy::InternalSwap(CSDTActGroupBuy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.process_.InternalSwap(&other->_impl_.process_);
  _impl_.reward_.InternalSwap(&other->_impl_.reward_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTActGroupBuy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[153]);
}

// ===================================================================

CSDTActGroupBuyRwd_RewardsEntry_DoNotUse::CSDTActGroupBuyRwd_RewardsEntry_DoNotUse() {}
CSDTActGroupBuyRwd_RewardsEntry_DoNotUse::CSDTActGroupBuyRwd_RewardsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTActGroupBuyRwd_RewardsEntry_DoNotUse::MergeFrom(const CSDTActGroupBuyRwd_RewardsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTActGroupBuyRwd_RewardsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[154]);
}

// ===================================================================

class CSDTActGroupBuyRwd::_Internal {
 public:
};

CSDTActGroupBuyRwd::CSDTActGroupBuyRwd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTActGroupBuyRwd::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTActGroupBuyRwd)
}
CSDTActGroupBuyRwd::CSDTActGroupBuyRwd(const CSDTActGroupBuyRwd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTActGroupBuyRwd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.rewards_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.rewards_.MergeFrom(from._impl_.rewards_);
  // @@protoc_insertion_point(copy_constructor:msg.CSDTActGroupBuyRwd)
}

inline void CSDTActGroupBuyRwd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.rewards_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTActGroupBuyRwd::~CSDTActGroupBuyRwd() {
  // @@protoc_insertion_point(destructor:msg.CSDTActGroupBuyRwd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTActGroupBuyRwd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rewards_.Destruct();
  _impl_.rewards_.~MapField();
}

void CSDTActGroupBuyRwd::ArenaDtor(void* object) {
  CSDTActGroupBuyRwd* _this = reinterpret_cast< CSDTActGroupBuyRwd* >(object);
  _this->_impl_.rewards_.Destruct();
}
void CSDTActGroupBuyRwd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTActGroupBuyRwd::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTActGroupBuyRwd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rewards_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTActGroupBuyRwd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, uint32> Rewards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.rewards_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTActGroupBuyRwd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTActGroupBuyRwd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, uint32> Rewards = 1;
  if (!this->_internal_rewards().empty()) {
    using MapType = ::_pb::Map<std::string, uint32_t>;
    using WireHelper = CSDTActGroupBuyRwd_RewardsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_rewards();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.CSDTActGroupBuyRwd.RewardsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTActGroupBuyRwd)
  return target;
}

size_t CSDTActGroupBuyRwd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTActGroupBuyRwd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, uint32> Rewards = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rewards_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >::const_iterator
      it = this->_internal_rewards().begin();
      it != this->_internal_rewards().end(); ++it) {
    total_size += CSDTActGroupBuyRwd_RewardsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTActGroupBuyRwd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTActGroupBuyRwd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTActGroupBuyRwd::GetClassData() const { return &_class_data_; }


void CSDTActGroupBuyRwd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTActGroupBuyRwd*>(&to_msg);
  auto& from = static_cast<const CSDTActGroupBuyRwd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTActGroupBuyRwd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rewards_.MergeFrom(from._impl_.rewards_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTActGroupBuyRwd::CopyFrom(const CSDTActGroupBuyRwd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTActGroupBuyRwd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTActGroupBuyRwd::IsInitialized() const {
  return true;
}

void CSDTActGroupBuyRwd::InternalSwap(CSDTActGroupBuyRwd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rewards_.InternalSwap(&other->_impl_.rewards_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTActGroupBuyRwd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[155]);
}

// ===================================================================

CSDTActRecruitData_PlayersEntry_DoNotUse::CSDTActRecruitData_PlayersEntry_DoNotUse() {}
CSDTActRecruitData_PlayersEntry_DoNotUse::CSDTActRecruitData_PlayersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTActRecruitData_PlayersEntry_DoNotUse::MergeFrom(const CSDTActRecruitData_PlayersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTActRecruitData_PlayersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[156]);
}

// ===================================================================

class CSDTActRecruitData::_Internal {
 public:
};

CSDTActRecruitData::CSDTActRecruitData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTActRecruitData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTActRecruitData)
}
CSDTActRecruitData::CSDTActRecruitData(const CSDTActRecruitData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTActRecruitData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.players_)*/{}
    , decltype(_impl_.inviter_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _impl_.inviter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inviter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_inviter().empty()) {
    _this->_impl_.inviter_.Set(from._internal_inviter(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.CSDTActRecruitData)
}

inline void CSDTActRecruitData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.players_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.inviter_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.inviter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.inviter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTActRecruitData::~CSDTActRecruitData() {
  // @@protoc_insertion_point(destructor:msg.CSDTActRecruitData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTActRecruitData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.Destruct();
  _impl_.players_.~MapField();
  _impl_.inviter_.Destroy();
}

void CSDTActRecruitData::ArenaDtor(void* object) {
  CSDTActRecruitData* _this = reinterpret_cast< CSDTActRecruitData* >(object);
  _this->_impl_.players_.Destruct();
}
void CSDTActRecruitData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTActRecruitData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTActRecruitData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.inviter_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTActRecruitData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Inviter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_inviter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTActRecruitData.Inviter"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .msg.CSDTRecruitPlayer> Players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.players_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTActRecruitData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTActRecruitData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Inviter = 1;
  if (!this->_internal_inviter().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inviter().data(), static_cast<int>(this->_internal_inviter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTActRecruitData.Inviter");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_inviter(), target);
  }

  // map<string, .msg.CSDTRecruitPlayer> Players = 2;
  if (!this->_internal_players().empty()) {
    using MapType = ::_pb::Map<std::string, ::msg::CSDTRecruitPlayer>;
    using WireHelper = CSDTActRecruitData_PlayersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_players();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.CSDTActRecruitData.PlayersEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTActRecruitData)
  return target;
}

size_t CSDTActRecruitData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTActRecruitData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .msg.CSDTRecruitPlayer> Players = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_players_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::CSDTRecruitPlayer >::const_iterator
      it = this->_internal_players().begin();
      it != this->_internal_players().end(); ++it) {
    total_size += CSDTActRecruitData_PlayersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string Inviter = 1;
  if (!this->_internal_inviter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inviter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTActRecruitData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTActRecruitData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTActRecruitData::GetClassData() const { return &_class_data_; }


void CSDTActRecruitData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTActRecruitData*>(&to_msg);
  auto& from = static_cast<const CSDTActRecruitData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTActRecruitData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (!from._internal_inviter().empty()) {
    _this->_internal_set_inviter(from._internal_inviter());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTActRecruitData::CopyFrom(const CSDTActRecruitData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTActRecruitData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTActRecruitData::IsInitialized() const {
  return true;
}

void CSDTActRecruitData::InternalSwap(CSDTActRecruitData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.inviter_, lhs_arena,
      &other->_impl_.inviter_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTActRecruitData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[157]);
}

// ===================================================================

class CSDTActLuckMallData::_Internal {
 public:
};

CSDTActLuckMallData::CSDTActLuckMallData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTActLuckMallData)
}
CSDTActLuckMallData::CSDTActLuckMallData(const CSDTActLuckMallData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTActLuckMallData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mallgoods_){from._impl_.mallgoods_}
    , /*decltype(_impl_._mallgoods_cached_byte_size_)*/{0}
    , decltype(_impl_.tabid_){}
    , decltype(_impl_.discount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tabid_, &from._impl_.tabid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.discount_) -
    reinterpret_cast<char*>(&_impl_.tabid_)) + sizeof(_impl_.discount_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTActLuckMallData)
}

inline void CSDTActLuckMallData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mallgoods_){arena}
    , /*decltype(_impl_._mallgoods_cached_byte_size_)*/{0}
    , decltype(_impl_.tabid_){0}
    , decltype(_impl_.discount_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTActLuckMallData::~CSDTActLuckMallData() {
  // @@protoc_insertion_point(destructor:msg.CSDTActLuckMallData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTActLuckMallData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mallgoods_.~RepeatedField();
}

void CSDTActLuckMallData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTActLuckMallData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTActLuckMallData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mallgoods_.Clear();
  ::memset(&_impl_.tabid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.discount_) -
      reinterpret_cast<char*>(&_impl_.tabid_)) + sizeof(_impl_.discount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTActLuckMallData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 MallGoods = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mallgoods(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_mallgoods(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TabId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tabid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Discount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.discount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTActLuckMallData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTActLuckMallData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 MallGoods = 1;
  {
    int byte_size = _impl_._mallgoods_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_mallgoods(), byte_size, target);
    }
  }

  // int32 TabId = 2;
  if (this->_internal_tabid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tabid(), target);
  }

  // uint32 Discount = 3;
  if (this->_internal_discount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_discount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTActLuckMallData)
  return target;
}

size_t CSDTActLuckMallData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTActLuckMallData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 MallGoods = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.mallgoods_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._mallgoods_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 TabId = 2;
  if (this->_internal_tabid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tabid());
  }

  // uint32 Discount = 3;
  if (this->_internal_discount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_discount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTActLuckMallData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTActLuckMallData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTActLuckMallData::GetClassData() const { return &_class_data_; }


void CSDTActLuckMallData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTActLuckMallData*>(&to_msg);
  auto& from = static_cast<const CSDTActLuckMallData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTActLuckMallData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mallgoods_.MergeFrom(from._impl_.mallgoods_);
  if (from._internal_tabid() != 0) {
    _this->_internal_set_tabid(from._internal_tabid());
  }
  if (from._internal_discount() != 0) {
    _this->_internal_set_discount(from._internal_discount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTActLuckMallData::CopyFrom(const CSDTActLuckMallData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTActLuckMallData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTActLuckMallData::IsInitialized() const {
  return true;
}

void CSDTActLuckMallData::InternalSwap(CSDTActLuckMallData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mallgoods_.InternalSwap(&other->_impl_.mallgoods_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTActLuckMallData, _impl_.discount_)
      + sizeof(CSDTActLuckMallData::_impl_.discount_)
      - PROTOBUF_FIELD_OFFSET(CSDTActLuckMallData, _impl_.tabid_)>(
          reinterpret_cast<char*>(&_impl_.tabid_),
          reinterpret_cast<char*>(&other->_impl_.tabid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTActLuckMallData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[158]);
}

// ===================================================================

class CSDTMelee::_Internal {
 public:
};

CSDTMelee::CSDTMelee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTMelee)
}
CSDTMelee::CSDTMelee(const CSDTMelee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTMelee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.progress_){}
    , decltype(_impl_.getaward_){}
    , decltype(_impl_.meleebegintime_){}
    , decltype(_impl_.meleeendtime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.progress_, &from._impl_.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.meleeendtime_) -
    reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.meleeendtime_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTMelee)
}

inline void CSDTMelee::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.progress_){0u}
    , decltype(_impl_.getaward_){false}
    , decltype(_impl_.meleebegintime_){int64_t{0}}
    , decltype(_impl_.meleeendtime_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTMelee::~CSDTMelee() {
  // @@protoc_insertion_point(destructor:msg.CSDTMelee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTMelee::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDTMelee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTMelee::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTMelee)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.meleeendtime_) -
      reinterpret_cast<char*>(&_impl_.progress_)) + sizeof(_impl_.meleeendtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTMelee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Progress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool GetAward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.getaward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 MeleeBeginTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.meleebegintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 MeleeEndTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.meleeendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTMelee::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTMelee)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Progress = 1;
  if (this->_internal_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_progress(), target);
  }

  // bool GetAward = 2;
  if (this->_internal_getaward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_getaward(), target);
  }

  // int64 MeleeBeginTime = 3;
  if (this->_internal_meleebegintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_meleebegintime(), target);
  }

  // int64 MeleeEndTime = 4;
  if (this->_internal_meleeendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_meleeendtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTMelee)
  return target;
}

size_t CSDTMelee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTMelee)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Progress = 1;
  if (this->_internal_progress() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_progress());
  }

  // bool GetAward = 2;
  if (this->_internal_getaward() != 0) {
    total_size += 1 + 1;
  }

  // int64 MeleeBeginTime = 3;
  if (this->_internal_meleebegintime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_meleebegintime());
  }

  // int64 MeleeEndTime = 4;
  if (this->_internal_meleeendtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_meleeendtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTMelee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTMelee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTMelee::GetClassData() const { return &_class_data_; }


void CSDTMelee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTMelee*>(&to_msg);
  auto& from = static_cast<const CSDTMelee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTMelee)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_progress() != 0) {
    _this->_internal_set_progress(from._internal_progress());
  }
  if (from._internal_getaward() != 0) {
    _this->_internal_set_getaward(from._internal_getaward());
  }
  if (from._internal_meleebegintime() != 0) {
    _this->_internal_set_meleebegintime(from._internal_meleebegintime());
  }
  if (from._internal_meleeendtime() != 0) {
    _this->_internal_set_meleeendtime(from._internal_meleeendtime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTMelee::CopyFrom(const CSDTMelee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTMelee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTMelee::IsInitialized() const {
  return true;
}

void CSDTMelee::InternalSwap(CSDTMelee* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTMelee, _impl_.meleeendtime_)
      + sizeof(CSDTMelee::_impl_.meleeendtime_)
      - PROTOBUF_FIELD_OFFSET(CSDTMelee, _impl_.progress_)>(
          reinterpret_cast<char*>(&_impl_.progress_),
          reinterpret_cast<char*>(&other->_impl_.progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTMelee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[159]);
}

// ===================================================================

class CSDTTeamSlotPlayer::_Internal {
 public:
};

CSDTTeamSlotPlayer::CSDTTeamSlotPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTTeamSlotPlayer)
}
CSDTTeamSlotPlayer::CSDTTeamSlotPlayer(const CSDTTeamSlotPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTTeamSlotPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.usrname_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.isai_){}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.group_){}
    , decltype(_impl_.headpic_){}
    , decltype(_impl_.province_){}
    , decltype(_impl_.headpicframe_){}
    , decltype(_impl_.lvl_){}
    , decltype(_impl_.cup_){}
    , decltype(_impl_.platformtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.usrname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.usrname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_usrname().empty()) {
    _this->_impl_.usrname_.Set(from._internal_usrname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.isai_, &from._impl_.isai_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.platformtype_) -
    reinterpret_cast<char*>(&_impl_.isai_)) + sizeof(_impl_.platformtype_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTTeamSlotPlayer)
}

inline void CSDTTeamSlotPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.usrname_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.isai_){false}
    , decltype(_impl_.slot_){0u}
    , decltype(_impl_.group_){0}
    , decltype(_impl_.headpic_){0u}
    , decltype(_impl_.province_){0u}
    , decltype(_impl_.headpicframe_){0u}
    , decltype(_impl_.lvl_){0u}
    , decltype(_impl_.cup_){0u}
    , decltype(_impl_.platformtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.usrname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.usrname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTTeamSlotPlayer::~CSDTTeamSlotPlayer() {
  // @@protoc_insertion_point(destructor:msg.CSDTTeamSlotPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTTeamSlotPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.usrname_.Destroy();
  _impl_.region_.Destroy();
  _impl_.country_.Destroy();
}

void CSDTTeamSlotPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTTeamSlotPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTTeamSlotPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.usrname_.ClearToEmpty();
  _impl_.region_.ClearToEmpty();
  _impl_.country_.ClearToEmpty();
  ::memset(&_impl_.isai_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.platformtype_) -
      reinterpret_cast<char*>(&_impl_.isai_)) + sizeof(_impl_.platformtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTTeamSlotPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTTeamSlotPlayer.Id"));
        } else
          goto handle_unusual;
        continue;
      // bool IsAI = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.isai_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TEAMGROUP Group = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_group(static_cast<::msg::TEAMGROUP>(val));
        } else
          goto handle_unusual;
        continue;
      // string UsrName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_usrname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTTeamSlotPlayer.UsrName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPic = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.headpic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Region = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTTeamSlotPlayer.Region"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Province = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.province_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPicFrame = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.headpicframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Lvl = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.lvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Cup = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.cup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PLATFORMTYPE PlatformType = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platformtype(static_cast<::msg::PLATFORMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string Country = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTTeamSlotPlayer.Country"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTTeamSlotPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTTeamSlotPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTTeamSlotPlayer.Id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bool IsAI = 2;
  if (this->_internal_isai() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_isai(), target);
  }

  // uint32 Slot = 3;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_slot(), target);
  }

  // .msg.TEAMGROUP Group = 4;
  if (this->_internal_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_group(), target);
  }

  // string UsrName = 5;
  if (!this->_internal_usrname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usrname().data(), static_cast<int>(this->_internal_usrname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTTeamSlotPlayer.UsrName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_usrname(), target);
  }

  // uint32 HeadPic = 6;
  if (this->_internal_headpic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_headpic(), target);
  }

  // string Region = 7;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTTeamSlotPlayer.Region");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_region(), target);
  }

  // uint32 Province = 8;
  if (this->_internal_province() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_province(), target);
  }

  // uint32 HeadPicFrame = 9;
  if (this->_internal_headpicframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_headpicframe(), target);
  }

  // uint32 Lvl = 10;
  if (this->_internal_lvl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_lvl(), target);
  }

  // uint32 Cup = 11;
  if (this->_internal_cup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_cup(), target);
  }

  // .msg.PLATFORMTYPE PlatformType = 12;
  if (this->_internal_platformtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_platformtype(), target);
  }

  // string Country = 13;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTTeamSlotPlayer.Country");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_country(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTTeamSlotPlayer)
  return target;
}

size_t CSDTTeamSlotPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTTeamSlotPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string UsrName = 5;
  if (!this->_internal_usrname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usrname());
  }

  // string Region = 7;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string Country = 13;
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // bool IsAI = 2;
  if (this->_internal_isai() != 0) {
    total_size += 1 + 1;
  }

  // uint32 Slot = 3;
  if (this->_internal_slot() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot());
  }

  // .msg.TEAMGROUP Group = 4;
  if (this->_internal_group() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_group());
  }

  // uint32 HeadPic = 6;
  if (this->_internal_headpic() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpic());
  }

  // uint32 Province = 8;
  if (this->_internal_province() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_province());
  }

  // uint32 HeadPicFrame = 9;
  if (this->_internal_headpicframe() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpicframe());
  }

  // uint32 Lvl = 10;
  if (this->_internal_lvl() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lvl());
  }

  // uint32 Cup = 11;
  if (this->_internal_cup() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cup());
  }

  // .msg.PLATFORMTYPE PlatformType = 12;
  if (this->_internal_platformtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_platformtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTTeamSlotPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTTeamSlotPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTTeamSlotPlayer::GetClassData() const { return &_class_data_; }


void CSDTTeamSlotPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTTeamSlotPlayer*>(&to_msg);
  auto& from = static_cast<const CSDTTeamSlotPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTTeamSlotPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_usrname().empty()) {
    _this->_internal_set_usrname(from._internal_usrname());
  }
  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (from._internal_isai() != 0) {
    _this->_internal_set_isai(from._internal_isai());
  }
  if (from._internal_slot() != 0) {
    _this->_internal_set_slot(from._internal_slot());
  }
  if (from._internal_group() != 0) {
    _this->_internal_set_group(from._internal_group());
  }
  if (from._internal_headpic() != 0) {
    _this->_internal_set_headpic(from._internal_headpic());
  }
  if (from._internal_province() != 0) {
    _this->_internal_set_province(from._internal_province());
  }
  if (from._internal_headpicframe() != 0) {
    _this->_internal_set_headpicframe(from._internal_headpicframe());
  }
  if (from._internal_lvl() != 0) {
    _this->_internal_set_lvl(from._internal_lvl());
  }
  if (from._internal_cup() != 0) {
    _this->_internal_set_cup(from._internal_cup());
  }
  if (from._internal_platformtype() != 0) {
    _this->_internal_set_platformtype(from._internal_platformtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTTeamSlotPlayer::CopyFrom(const CSDTTeamSlotPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTTeamSlotPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTTeamSlotPlayer::IsInitialized() const {
  return true;
}

void CSDTTeamSlotPlayer::InternalSwap(CSDTTeamSlotPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.usrname_, lhs_arena,
      &other->_impl_.usrname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTTeamSlotPlayer, _impl_.platformtype_)
      + sizeof(CSDTTeamSlotPlayer::_impl_.platformtype_)
      - PROTOBUF_FIELD_OFFSET(CSDTTeamSlotPlayer, _impl_.isai_)>(
          reinterpret_cast<char*>(&_impl_.isai_),
          reinterpret_cast<char*>(&other->_impl_.isai_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTTeamSlotPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[160]);
}

// ===================================================================

class CSDTTeamVoicePlayer::_Internal {
 public:
};

CSDTTeamVoicePlayer::CSDTTeamVoicePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTTeamVoicePlayer)
}
CSDTTeamVoicePlayer::CSDTTeamVoicePlayer(const CSDTTeamVoicePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTTeamVoicePlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.voiceid_){}
    , decltype(_impl_.voiceuserid_){}
    , decltype(_impl_.voicememid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.voiceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.voiceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_voiceid().empty()) {
    _this->_impl_.voiceid_.Set(from._internal_voiceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.voiceuserid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.voiceuserid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_voiceuserid().empty()) {
    _this->_impl_.voiceuserid_.Set(from._internal_voiceuserid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.voicememid_ = from._impl_.voicememid_;
  // @@protoc_insertion_point(copy_constructor:msg.CSDTTeamVoicePlayer)
}

inline void CSDTTeamVoicePlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.voiceid_){}
    , decltype(_impl_.voiceuserid_){}
    , decltype(_impl_.voicememid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.voiceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.voiceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.voiceuserid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.voiceuserid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTTeamVoicePlayer::~CSDTTeamVoicePlayer() {
  // @@protoc_insertion_point(destructor:msg.CSDTTeamVoicePlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTTeamVoicePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.voiceid_.Destroy();
  _impl_.voiceuserid_.Destroy();
}

void CSDTTeamVoicePlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTTeamVoicePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTTeamVoicePlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.voiceid_.ClearToEmpty();
  _impl_.voiceuserid_.ClearToEmpty();
  _impl_.voicememid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTTeamVoicePlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTTeamVoicePlayer.Id"));
        } else
          goto handle_unusual;
        continue;
      // string VoiceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_voiceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTTeamVoicePlayer.VoiceId"));
        } else
          goto handle_unusual;
        continue;
      // uint32 VoiceMemId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.voicememid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string VoiceUserId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_voiceuserid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTTeamVoicePlayer.VoiceUserId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTTeamVoicePlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTTeamVoicePlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTTeamVoicePlayer.Id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string VoiceId = 2;
  if (!this->_internal_voiceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_voiceid().data(), static_cast<int>(this->_internal_voiceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTTeamVoicePlayer.VoiceId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_voiceid(), target);
  }

  // uint32 VoiceMemId = 3;
  if (this->_internal_voicememid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_voicememid(), target);
  }

  // string VoiceUserId = 4;
  if (!this->_internal_voiceuserid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_voiceuserid().data(), static_cast<int>(this->_internal_voiceuserid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTTeamVoicePlayer.VoiceUserId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_voiceuserid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTTeamVoicePlayer)
  return target;
}

size_t CSDTTeamVoicePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTTeamVoicePlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string VoiceId = 2;
  if (!this->_internal_voiceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_voiceid());
  }

  // string VoiceUserId = 4;
  if (!this->_internal_voiceuserid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_voiceuserid());
  }

  // uint32 VoiceMemId = 3;
  if (this->_internal_voicememid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voicememid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTTeamVoicePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTTeamVoicePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTTeamVoicePlayer::GetClassData() const { return &_class_data_; }


void CSDTTeamVoicePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTTeamVoicePlayer*>(&to_msg);
  auto& from = static_cast<const CSDTTeamVoicePlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTTeamVoicePlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_voiceid().empty()) {
    _this->_internal_set_voiceid(from._internal_voiceid());
  }
  if (!from._internal_voiceuserid().empty()) {
    _this->_internal_set_voiceuserid(from._internal_voiceuserid());
  }
  if (from._internal_voicememid() != 0) {
    _this->_internal_set_voicememid(from._internal_voicememid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTTeamVoicePlayer::CopyFrom(const CSDTTeamVoicePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTTeamVoicePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTTeamVoicePlayer::IsInitialized() const {
  return true;
}

void CSDTTeamVoicePlayer::InternalSwap(CSDTTeamVoicePlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.voiceid_, lhs_arena,
      &other->_impl_.voiceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.voiceuserid_, lhs_arena,
      &other->_impl_.voiceuserid_, rhs_arena
  );
  swap(_impl_.voicememid_, other->_impl_.voicememid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTTeamVoicePlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[161]);
}

// ===================================================================

class ActivityGroupData::_Internal {
 public:
};

ActivityGroupData::ActivityGroupData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ActivityGroupData)
}
ActivityGroupData::ActivityGroupData(const ActivityGroupData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityGroupData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buffeffects_){from._impl_.buffeffects_}
    , decltype(_impl_.modes_){from._impl_.modes_}
    , /*decltype(_impl_._modes_cached_byte_size_)*/{0}
    , decltype(_impl_.channels_){from._impl_.channels_}
    , decltype(_impl_.tabname_){}
    , decltype(_impl_.tabicon_){}
    , decltype(_impl_.beginshowtime_){}
    , decltype(_impl_.begintime_){}
    , decltype(_impl_.endtime_){}
    , decltype(_impl_.endshowtime_){}
    , decltype(_impl_.showparam_){}
    , decltype(_impl_.picname_){}
    , decltype(_impl_.effectweekday_){}
    , decltype(_impl_.takeeffectdate_){}
    , decltype(_impl_.takeeffecttime_){}
    , decltype(_impl_.takeeffectrank_){}
    , decltype(_impl_.takeeffectmode_){}
    , decltype(_impl_.zone_){}
    , decltype(_impl_.takeeffectlevel_){}
    , decltype(_impl_.platformclose_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.privatedata_){}
    , decltype(_impl_.activityid_){}
    , decltype(_impl_.repeattype_){}
    , decltype(_impl_.open_){}
    , decltype(_impl_.picopen_){}
    , decltype(_impl_.pagetype_){}
    , decltype(_impl_.subscripttype_){}
    , decltype(_impl_.orderid_){}
    , decltype(_impl_.picinterval_){}
    , decltype(_impl_.picswitchopen_){}
    , decltype(_impl_.effecttimetype_){}
    , decltype(_impl_.teamstate_){}
    , decltype(_impl_.uistylephone_){}
    , decltype(_impl_.uistylepc_){}
    , decltype(_impl_.leastmach_){}
    , decltype(_impl_.makeup_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tabname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tabname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tabname().empty()) {
    _this->_impl_.tabname_.Set(from._internal_tabname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tabicon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tabicon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tabicon().empty()) {
    _this->_impl_.tabicon_.Set(from._internal_tabicon(), 
      _this->GetArenaForAllocation());
  }
  _impl_.beginshowtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.beginshowtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_beginshowtime().empty()) {
    _this->_impl_.beginshowtime_.Set(from._internal_beginshowtime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.begintime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.begintime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_begintime().empty()) {
    _this->_impl_.begintime_.Set(from._internal_begintime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.endtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_endtime().empty()) {
    _this->_impl_.endtime_.Set(from._internal_endtime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.endshowtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endshowtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_endshowtime().empty()) {
    _this->_impl_.endshowtime_.Set(from._internal_endshowtime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.showparam_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.showparam_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_showparam().empty()) {
    _this->_impl_.showparam_.Set(from._internal_showparam(), 
      _this->GetArenaForAllocation());
  }
  _impl_.picname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.picname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_picname().empty()) {
    _this->_impl_.picname_.Set(from._internal_picname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.effectweekday_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.effectweekday_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_effectweekday().empty()) {
    _this->_impl_.effectweekday_.Set(from._internal_effectweekday(), 
      _this->GetArenaForAllocation());
  }
  _impl_.takeeffectdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.takeeffectdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_takeeffectdate().empty()) {
    _this->_impl_.takeeffectdate_.Set(from._internal_takeeffectdate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.takeeffecttime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.takeeffecttime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_takeeffecttime().empty()) {
    _this->_impl_.takeeffecttime_.Set(from._internal_takeeffecttime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.takeeffectrank_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.takeeffectrank_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_takeeffectrank().empty()) {
    _this->_impl_.takeeffectrank_.Set(from._internal_takeeffectrank(), 
      _this->GetArenaForAllocation());
  }
  _impl_.takeeffectmode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.takeeffectmode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_takeeffectmode().empty()) {
    _this->_impl_.takeeffectmode_.Set(from._internal_takeeffectmode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.zone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.zone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_zone().empty()) {
    _this->_impl_.zone_.Set(from._internal_zone(), 
      _this->GetArenaForAllocation());
  }
  _impl_.takeeffectlevel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.takeeffectlevel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_takeeffectlevel().empty()) {
    _this->_impl_.takeeffectlevel_.Set(from._internal_takeeffectlevel(), 
      _this->GetArenaForAllocation());
  }
  _impl_.platformclose_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.platformclose_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_platformclose().empty()) {
    _this->_impl_.platformclose_.Set(from._internal_platformclose(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.makeup_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.makeup_));
  // @@protoc_insertion_point(copy_constructor:msg.ActivityGroupData)
}

inline void ActivityGroupData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buffeffects_){arena}
    , decltype(_impl_.modes_){arena}
    , /*decltype(_impl_._modes_cached_byte_size_)*/{0}
    , decltype(_impl_.channels_){arena}
    , decltype(_impl_.tabname_){}
    , decltype(_impl_.tabicon_){}
    , decltype(_impl_.beginshowtime_){}
    , decltype(_impl_.begintime_){}
    , decltype(_impl_.endtime_){}
    , decltype(_impl_.endshowtime_){}
    , decltype(_impl_.showparam_){}
    , decltype(_impl_.picname_){}
    , decltype(_impl_.effectweekday_){}
    , decltype(_impl_.takeeffectdate_){}
    , decltype(_impl_.takeeffecttime_){}
    , decltype(_impl_.takeeffectrank_){}
    , decltype(_impl_.takeeffectmode_){}
    , decltype(_impl_.zone_){}
    , decltype(_impl_.takeeffectlevel_){}
    , decltype(_impl_.platformclose_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.duration_){0u}
    , decltype(_impl_.privatedata_){0u}
    , decltype(_impl_.activityid_){0u}
    , decltype(_impl_.repeattype_){0u}
    , decltype(_impl_.open_){false}
    , decltype(_impl_.picopen_){false}
    , decltype(_impl_.pagetype_){0u}
    , decltype(_impl_.subscripttype_){0u}
    , decltype(_impl_.orderid_){0u}
    , decltype(_impl_.picinterval_){0u}
    , decltype(_impl_.picswitchopen_){0u}
    , decltype(_impl_.effecttimetype_){0}
    , decltype(_impl_.teamstate_){0}
    , decltype(_impl_.uistylephone_){0u}
    , decltype(_impl_.uistylepc_){0u}
    , decltype(_impl_.leastmach_){int64_t{0}}
    , decltype(_impl_.makeup_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tabname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tabname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tabicon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tabicon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.beginshowtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.beginshowtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.begintime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.begintime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.endtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.endshowtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.endshowtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.showparam_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.showparam_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.picname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.picname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.effectweekday_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.effectweekday_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.takeeffectdate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.takeeffectdate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.takeeffecttime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.takeeffecttime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.takeeffectrank_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.takeeffectrank_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.takeeffectmode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.takeeffectmode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.zone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.takeeffectlevel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.takeeffectlevel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.platformclose_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.platformclose_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ActivityGroupData::~ActivityGroupData() {
  // @@protoc_insertion_point(destructor:msg.ActivityGroupData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityGroupData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buffeffects_.~RepeatedPtrField();
  _impl_.modes_.~RepeatedField();
  _impl_.channels_.~RepeatedPtrField();
  _impl_.tabname_.Destroy();
  _impl_.tabicon_.Destroy();
  _impl_.beginshowtime_.Destroy();
  _impl_.begintime_.Destroy();
  _impl_.endtime_.Destroy();
  _impl_.endshowtime_.Destroy();
  _impl_.showparam_.Destroy();
  _impl_.picname_.Destroy();
  _impl_.effectweekday_.Destroy();
  _impl_.takeeffectdate_.Destroy();
  _impl_.takeeffecttime_.Destroy();
  _impl_.takeeffectrank_.Destroy();
  _impl_.takeeffectmode_.Destroy();
  _impl_.zone_.Destroy();
  _impl_.takeeffectlevel_.Destroy();
  _impl_.platformclose_.Destroy();
}

void ActivityGroupData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityGroupData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ActivityGroupData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buffeffects_.Clear();
  _impl_.modes_.Clear();
  _impl_.channels_.Clear();
  _impl_.tabname_.ClearToEmpty();
  _impl_.tabicon_.ClearToEmpty();
  _impl_.beginshowtime_.ClearToEmpty();
  _impl_.begintime_.ClearToEmpty();
  _impl_.endtime_.ClearToEmpty();
  _impl_.endshowtime_.ClearToEmpty();
  _impl_.showparam_.ClearToEmpty();
  _impl_.picname_.ClearToEmpty();
  _impl_.effectweekday_.ClearToEmpty();
  _impl_.takeeffectdate_.ClearToEmpty();
  _impl_.takeeffecttime_.ClearToEmpty();
  _impl_.takeeffectrank_.ClearToEmpty();
  _impl_.takeeffectmode_.ClearToEmpty();
  _impl_.zone_.ClearToEmpty();
  _impl_.takeeffectlevel_.ClearToEmpty();
  _impl_.platformclose_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.makeup_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.makeup_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityGroupData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.ACTIVITYTYPE Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::ACTIVITYTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string TabName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tabname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityGroupData.TabName"));
        } else
          goto handle_unusual;
        continue;
      // string TabIcon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tabicon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityGroupData.TabIcon"));
        } else
          goto handle_unusual;
        continue;
      // string BeginShowTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_beginshowtime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityGroupData.BeginShowTime"));
        } else
          goto handle_unusual;
        continue;
      // string BeginTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_begintime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityGroupData.BeginTime"));
        } else
          goto handle_unusual;
        continue;
      // string EndTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_endtime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityGroupData.EndTime"));
        } else
          goto handle_unusual;
        continue;
      // string EndShowTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_endshowtime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityGroupData.EndShowTime"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Duration = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PrivateData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.privatedata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Open = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ActivityId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.activityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RepeatType = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.repeattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ShowParam = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_showparam();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityGroupData.ShowParam"));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.BuffEffect BuffEffects = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buffeffects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 Modes = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_modes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 128) {
          _internal_add_modes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PageType = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.pagetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string PicName = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_picname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityGroupData.PicName"));
        } else
          goto handle_unusual;
        continue;
      // bool PicOpen = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.picopen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SubscriptType = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.subscripttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 OrderID = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.orderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PicInterval = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.picinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PicSwitchOpen = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.picswitchopen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.EFFECTTIMETYPE EffectTimeType = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_effecttimetype(static_cast<::msg::EFFECTTIMETYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string EffectWeekday = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_effectweekday();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityGroupData.EffectWeekday"));
        } else
          goto handle_unusual;
        continue;
      // string TakeEffectDate = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_takeeffectdate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityGroupData.TakeEffectDate"));
        } else
          goto handle_unusual;
        continue;
      // string TakeEffectTime = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_takeeffecttime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityGroupData.TakeEffectTime"));
        } else
          goto handle_unusual;
        continue;
      // string TakeEffectRank = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_takeeffectrank();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityGroupData.TakeEffectRank"));
        } else
          goto handle_unusual;
        continue;
      // string TakeEffectMode = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_takeeffectmode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityGroupData.TakeEffectMode"));
        } else
          goto handle_unusual;
        continue;
      // .msg.ACTIVITYTEAMSTATE TeamState = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_teamstate(static_cast<::msg::ACTIVITYTEAMSTATE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 UIStylePhone = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.uistylephone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 UIStylePC = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.uistylepc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Zone = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_zone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityGroupData.Zone"));
        } else
          goto handle_unusual;
        continue;
      // repeated string Channels = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_channels();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityGroupData.Channels"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string TakeEffectLevel = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_takeeffectlevel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityGroupData.TakeEffectLevel"));
        } else
          goto handle_unusual;
        continue;
      // int32 MakeUp = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.makeup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LeastMach = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.leastmach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string PlatformClose = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_platformclose();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityGroupData.PlatformClose"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityGroupData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ActivityGroupData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .msg.ACTIVITYTYPE Type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string TabName = 3;
  if (!this->_internal_tabname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tabname().data(), static_cast<int>(this->_internal_tabname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityGroupData.TabName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tabname(), target);
  }

  // string TabIcon = 4;
  if (!this->_internal_tabicon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tabicon().data(), static_cast<int>(this->_internal_tabicon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityGroupData.TabIcon");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tabicon(), target);
  }

  // string BeginShowTime = 5;
  if (!this->_internal_beginshowtime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_beginshowtime().data(), static_cast<int>(this->_internal_beginshowtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityGroupData.BeginShowTime");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_beginshowtime(), target);
  }

  // string BeginTime = 6;
  if (!this->_internal_begintime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_begintime().data(), static_cast<int>(this->_internal_begintime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityGroupData.BeginTime");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_begintime(), target);
  }

  // string EndTime = 7;
  if (!this->_internal_endtime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endtime().data(), static_cast<int>(this->_internal_endtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityGroupData.EndTime");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_endtime(), target);
  }

  // string EndShowTime = 8;
  if (!this->_internal_endshowtime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endshowtime().data(), static_cast<int>(this->_internal_endshowtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityGroupData.EndShowTime");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_endshowtime(), target);
  }

  // uint32 Duration = 9;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_duration(), target);
  }

  // uint32 PrivateData = 10;
  if (this->_internal_privatedata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_privatedata(), target);
  }

  // bool Open = 11;
  if (this->_internal_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_open(), target);
  }

  // uint32 ActivityId = 12;
  if (this->_internal_activityid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_activityid(), target);
  }

  // uint32 RepeatType = 13;
  if (this->_internal_repeattype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_repeattype(), target);
  }

  // string ShowParam = 14;
  if (!this->_internal_showparam().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_showparam().data(), static_cast<int>(this->_internal_showparam().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityGroupData.ShowParam");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_showparam(), target);
  }

  // repeated .msg.BuffEffect BuffEffects = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buffeffects_size()); i < n; i++) {
    const auto& repfield = this->_internal_buffeffects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 Modes = 16;
  {
    int byte_size = _impl_._modes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          16, _internal_modes(), byte_size, target);
    }
  }

  // uint32 PageType = 17;
  if (this->_internal_pagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_pagetype(), target);
  }

  // string PicName = 18;
  if (!this->_internal_picname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_picname().data(), static_cast<int>(this->_internal_picname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityGroupData.PicName");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_picname(), target);
  }

  // bool PicOpen = 19;
  if (this->_internal_picopen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_picopen(), target);
  }

  // uint32 SubscriptType = 20;
  if (this->_internal_subscripttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_subscripttype(), target);
  }

  // uint32 OrderID = 21;
  if (this->_internal_orderid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_orderid(), target);
  }

  // uint32 PicInterval = 22;
  if (this->_internal_picinterval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_picinterval(), target);
  }

  // uint32 PicSwitchOpen = 23;
  if (this->_internal_picswitchopen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_picswitchopen(), target);
  }

  // .msg.EFFECTTIMETYPE EffectTimeType = 24;
  if (this->_internal_effecttimetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      24, this->_internal_effecttimetype(), target);
  }

  // string EffectWeekday = 25;
  if (!this->_internal_effectweekday().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_effectweekday().data(), static_cast<int>(this->_internal_effectweekday().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityGroupData.EffectWeekday");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_effectweekday(), target);
  }

  // string TakeEffectDate = 26;
  if (!this->_internal_takeeffectdate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_takeeffectdate().data(), static_cast<int>(this->_internal_takeeffectdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityGroupData.TakeEffectDate");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_takeeffectdate(), target);
  }

  // string TakeEffectTime = 27;
  if (!this->_internal_takeeffecttime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_takeeffecttime().data(), static_cast<int>(this->_internal_takeeffecttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityGroupData.TakeEffectTime");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_takeeffecttime(), target);
  }

  // string TakeEffectRank = 28;
  if (!this->_internal_takeeffectrank().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_takeeffectrank().data(), static_cast<int>(this->_internal_takeeffectrank().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityGroupData.TakeEffectRank");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_takeeffectrank(), target);
  }

  // string TakeEffectMode = 29;
  if (!this->_internal_takeeffectmode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_takeeffectmode().data(), static_cast<int>(this->_internal_takeeffectmode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityGroupData.TakeEffectMode");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_takeeffectmode(), target);
  }

  // .msg.ACTIVITYTEAMSTATE TeamState = 30;
  if (this->_internal_teamstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      30, this->_internal_teamstate(), target);
  }

  // uint32 UIStylePhone = 31;
  if (this->_internal_uistylephone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_uistylephone(), target);
  }

  // uint32 UIStylePC = 32;
  if (this->_internal_uistylepc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(32, this->_internal_uistylepc(), target);
  }

  // string Zone = 33;
  if (!this->_internal_zone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_zone().data(), static_cast<int>(this->_internal_zone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityGroupData.Zone");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_zone(), target);
  }

  // repeated string Channels = 34;
  for (int i = 0, n = this->_internal_channels_size(); i < n; i++) {
    const auto& s = this->_internal_channels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityGroupData.Channels");
    target = stream->WriteString(34, s, target);
  }

  // string TakeEffectLevel = 35;
  if (!this->_internal_takeeffectlevel().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_takeeffectlevel().data(), static_cast<int>(this->_internal_takeeffectlevel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityGroupData.TakeEffectLevel");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_takeeffectlevel(), target);
  }

  // int32 MakeUp = 36;
  if (this->_internal_makeup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(36, this->_internal_makeup(), target);
  }

  // int64 LeastMach = 37;
  if (this->_internal_leastmach() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(37, this->_internal_leastmach(), target);
  }

  // string PlatformClose = 38;
  if (!this->_internal_platformclose().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platformclose().data(), static_cast<int>(this->_internal_platformclose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityGroupData.PlatformClose");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_platformclose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ActivityGroupData)
  return target;
}

size_t ActivityGroupData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ActivityGroupData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.BuffEffect BuffEffects = 15;
  total_size += 1UL * this->_internal_buffeffects_size();
  for (const auto& msg : this->_impl_.buffeffects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 Modes = 16;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.modes_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._modes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string Channels = 34;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.channels_.size());
  for (int i = 0, n = _impl_.channels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.channels_.Get(i));
  }

  // string TabName = 3;
  if (!this->_internal_tabname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tabname());
  }

  // string TabIcon = 4;
  if (!this->_internal_tabicon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tabicon());
  }

  // string BeginShowTime = 5;
  if (!this->_internal_beginshowtime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_beginshowtime());
  }

  // string BeginTime = 6;
  if (!this->_internal_begintime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_begintime());
  }

  // string EndTime = 7;
  if (!this->_internal_endtime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endtime());
  }

  // string EndShowTime = 8;
  if (!this->_internal_endshowtime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endshowtime());
  }

  // string ShowParam = 14;
  if (!this->_internal_showparam().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_showparam());
  }

  // string PicName = 18;
  if (!this->_internal_picname().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_picname());
  }

  // string EffectWeekday = 25;
  if (!this->_internal_effectweekday().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effectweekday());
  }

  // string TakeEffectDate = 26;
  if (!this->_internal_takeeffectdate().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_takeeffectdate());
  }

  // string TakeEffectTime = 27;
  if (!this->_internal_takeeffecttime().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_takeeffecttime());
  }

  // string TakeEffectRank = 28;
  if (!this->_internal_takeeffectrank().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_takeeffectrank());
  }

  // string TakeEffectMode = 29;
  if (!this->_internal_takeeffectmode().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_takeeffectmode());
  }

  // string Zone = 33;
  if (!this->_internal_zone().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_zone());
  }

  // string TakeEffectLevel = 35;
  if (!this->_internal_takeeffectlevel().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_takeeffectlevel());
  }

  // string PlatformClose = 38;
  if (!this->_internal_platformclose().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platformclose());
  }

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // .msg.ACTIVITYTYPE Type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 Duration = 9;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
  }

  // uint32 PrivateData = 10;
  if (this->_internal_privatedata() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_privatedata());
  }

  // uint32 ActivityId = 12;
  if (this->_internal_activityid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_activityid());
  }

  // uint32 RepeatType = 13;
  if (this->_internal_repeattype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_repeattype());
  }

  // bool Open = 11;
  if (this->_internal_open() != 0) {
    total_size += 1 + 1;
  }

  // bool PicOpen = 19;
  if (this->_internal_picopen() != 0) {
    total_size += 2 + 1;
  }

  // uint32 PageType = 17;
  if (this->_internal_pagetype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_pagetype());
  }

  // uint32 SubscriptType = 20;
  if (this->_internal_subscripttype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_subscripttype());
  }

  // uint32 OrderID = 21;
  if (this->_internal_orderid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_orderid());
  }

  // uint32 PicInterval = 22;
  if (this->_internal_picinterval() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_picinterval());
  }

  // uint32 PicSwitchOpen = 23;
  if (this->_internal_picswitchopen() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_picswitchopen());
  }

  // .msg.EFFECTTIMETYPE EffectTimeType = 24;
  if (this->_internal_effecttimetype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_effecttimetype());
  }

  // .msg.ACTIVITYTEAMSTATE TeamState = 30;
  if (this->_internal_teamstate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_teamstate());
  }

  // uint32 UIStylePhone = 31;
  if (this->_internal_uistylephone() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_uistylephone());
  }

  // uint32 UIStylePC = 32;
  if (this->_internal_uistylepc() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_uistylepc());
  }

  // int64 LeastMach = 37;
  if (this->_internal_leastmach() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_leastmach());
  }

  // int32 MakeUp = 36;
  if (this->_internal_makeup() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_makeup());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityGroupData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityGroupData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityGroupData::GetClassData() const { return &_class_data_; }


void ActivityGroupData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityGroupData*>(&to_msg);
  auto& from = static_cast<const ActivityGroupData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ActivityGroupData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buffeffects_.MergeFrom(from._impl_.buffeffects_);
  _this->_impl_.modes_.MergeFrom(from._impl_.modes_);
  _this->_impl_.channels_.MergeFrom(from._impl_.channels_);
  if (!from._internal_tabname().empty()) {
    _this->_internal_set_tabname(from._internal_tabname());
  }
  if (!from._internal_tabicon().empty()) {
    _this->_internal_set_tabicon(from._internal_tabicon());
  }
  if (!from._internal_beginshowtime().empty()) {
    _this->_internal_set_beginshowtime(from._internal_beginshowtime());
  }
  if (!from._internal_begintime().empty()) {
    _this->_internal_set_begintime(from._internal_begintime());
  }
  if (!from._internal_endtime().empty()) {
    _this->_internal_set_endtime(from._internal_endtime());
  }
  if (!from._internal_endshowtime().empty()) {
    _this->_internal_set_endshowtime(from._internal_endshowtime());
  }
  if (!from._internal_showparam().empty()) {
    _this->_internal_set_showparam(from._internal_showparam());
  }
  if (!from._internal_picname().empty()) {
    _this->_internal_set_picname(from._internal_picname());
  }
  if (!from._internal_effectweekday().empty()) {
    _this->_internal_set_effectweekday(from._internal_effectweekday());
  }
  if (!from._internal_takeeffectdate().empty()) {
    _this->_internal_set_takeeffectdate(from._internal_takeeffectdate());
  }
  if (!from._internal_takeeffecttime().empty()) {
    _this->_internal_set_takeeffecttime(from._internal_takeeffecttime());
  }
  if (!from._internal_takeeffectrank().empty()) {
    _this->_internal_set_takeeffectrank(from._internal_takeeffectrank());
  }
  if (!from._internal_takeeffectmode().empty()) {
    _this->_internal_set_takeeffectmode(from._internal_takeeffectmode());
  }
  if (!from._internal_zone().empty()) {
    _this->_internal_set_zone(from._internal_zone());
  }
  if (!from._internal_takeeffectlevel().empty()) {
    _this->_internal_set_takeeffectlevel(from._internal_takeeffectlevel());
  }
  if (!from._internal_platformclose().empty()) {
    _this->_internal_set_platformclose(from._internal_platformclose());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  if (from._internal_privatedata() != 0) {
    _this->_internal_set_privatedata(from._internal_privatedata());
  }
  if (from._internal_activityid() != 0) {
    _this->_internal_set_activityid(from._internal_activityid());
  }
  if (from._internal_repeattype() != 0) {
    _this->_internal_set_repeattype(from._internal_repeattype());
  }
  if (from._internal_open() != 0) {
    _this->_internal_set_open(from._internal_open());
  }
  if (from._internal_picopen() != 0) {
    _this->_internal_set_picopen(from._internal_picopen());
  }
  if (from._internal_pagetype() != 0) {
    _this->_internal_set_pagetype(from._internal_pagetype());
  }
  if (from._internal_subscripttype() != 0) {
    _this->_internal_set_subscripttype(from._internal_subscripttype());
  }
  if (from._internal_orderid() != 0) {
    _this->_internal_set_orderid(from._internal_orderid());
  }
  if (from._internal_picinterval() != 0) {
    _this->_internal_set_picinterval(from._internal_picinterval());
  }
  if (from._internal_picswitchopen() != 0) {
    _this->_internal_set_picswitchopen(from._internal_picswitchopen());
  }
  if (from._internal_effecttimetype() != 0) {
    _this->_internal_set_effecttimetype(from._internal_effecttimetype());
  }
  if (from._internal_teamstate() != 0) {
    _this->_internal_set_teamstate(from._internal_teamstate());
  }
  if (from._internal_uistylephone() != 0) {
    _this->_internal_set_uistylephone(from._internal_uistylephone());
  }
  if (from._internal_uistylepc() != 0) {
    _this->_internal_set_uistylepc(from._internal_uistylepc());
  }
  if (from._internal_leastmach() != 0) {
    _this->_internal_set_leastmach(from._internal_leastmach());
  }
  if (from._internal_makeup() != 0) {
    _this->_internal_set_makeup(from._internal_makeup());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityGroupData::CopyFrom(const ActivityGroupData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ActivityGroupData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityGroupData::IsInitialized() const {
  return true;
}

void ActivityGroupData::InternalSwap(ActivityGroupData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.buffeffects_.InternalSwap(&other->_impl_.buffeffects_);
  _impl_.modes_.InternalSwap(&other->_impl_.modes_);
  _impl_.channels_.InternalSwap(&other->_impl_.channels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tabname_, lhs_arena,
      &other->_impl_.tabname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tabicon_, lhs_arena,
      &other->_impl_.tabicon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.beginshowtime_, lhs_arena,
      &other->_impl_.beginshowtime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.begintime_, lhs_arena,
      &other->_impl_.begintime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.endtime_, lhs_arena,
      &other->_impl_.endtime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.endshowtime_, lhs_arena,
      &other->_impl_.endshowtime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.showparam_, lhs_arena,
      &other->_impl_.showparam_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.picname_, lhs_arena,
      &other->_impl_.picname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.effectweekday_, lhs_arena,
      &other->_impl_.effectweekday_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.takeeffectdate_, lhs_arena,
      &other->_impl_.takeeffectdate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.takeeffecttime_, lhs_arena,
      &other->_impl_.takeeffecttime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.takeeffectrank_, lhs_arena,
      &other->_impl_.takeeffectrank_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.takeeffectmode_, lhs_arena,
      &other->_impl_.takeeffectmode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.zone_, lhs_arena,
      &other->_impl_.zone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.takeeffectlevel_, lhs_arena,
      &other->_impl_.takeeffectlevel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.platformclose_, lhs_arena,
      &other->_impl_.platformclose_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityGroupData, _impl_.makeup_)
      + sizeof(ActivityGroupData::_impl_.makeup_)
      - PROTOBUF_FIELD_OFFSET(ActivityGroupData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityGroupData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[162]);
}

// ===================================================================

class ActivityData::_Internal {
 public:
  static const ::msg::Cond& cond(const ActivityData* msg);
};

const ::msg::Cond&
ActivityData::_Internal::cond(const ActivityData* msg) {
  return *msg->_impl_.cond_;
}
ActivityData::ActivityData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ActivityData)
}
ActivityData::ActivityData(const ActivityData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.awards_){from._impl_.awards_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.skipinterface_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.showgiftpic_){}
    , decltype(_impl_.cond_){nullptr}
    , decltype(_impl_.groupid_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.unit_){}
    , decltype(_impl_.condgroup_){}
    , decltype(_impl_.precondgroup_){}
    , decltype(_impl_.skiptab_){}
    , decltype(_impl_.day_){}
    , decltype(_impl_.showquality_){}
    , decltype(_impl_.resettype_){}
    , decltype(_impl_.isrecruiter_){}
    , decltype(_impl_.progressinherit_){}
    , decltype(_impl_.showorder_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.skipinterface_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skipinterface_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_skipinterface().empty()) {
    _this->_impl_.skipinterface_.Set(from._internal_skipinterface(), 
      _this->GetArenaForAllocation());
  }
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    _this->_impl_.desc_.Set(from._internal_desc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.showgiftpic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.showgiftpic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_showgiftpic().empty()) {
    _this->_impl_.showgiftpic_.Set(from._internal_showgiftpic(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_cond()) {
    _this->_impl_.cond_ = new ::msg::Cond(*from._impl_.cond_);
  }
  ::memcpy(&_impl_.groupid_, &from._impl_.groupid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.showorder_) -
    reinterpret_cast<char*>(&_impl_.groupid_)) + sizeof(_impl_.showorder_));
  // @@protoc_insertion_point(copy_constructor:msg.ActivityData)
}

inline void ActivityData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.awards_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.skipinterface_){}
    , decltype(_impl_.desc_){}
    , decltype(_impl_.showgiftpic_){}
    , decltype(_impl_.cond_){nullptr}
    , decltype(_impl_.groupid_){0u}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.unit_){0u}
    , decltype(_impl_.condgroup_){0u}
    , decltype(_impl_.precondgroup_){0u}
    , decltype(_impl_.skiptab_){0u}
    , decltype(_impl_.day_){0u}
    , decltype(_impl_.showquality_){0u}
    , decltype(_impl_.resettype_){0}
    , decltype(_impl_.isrecruiter_){false}
    , decltype(_impl_.progressinherit_){0u}
    , decltype(_impl_.showorder_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.skipinterface_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skipinterface_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.showgiftpic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.showgiftpic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ActivityData::~ActivityData() {
  // @@protoc_insertion_point(destructor:msg.ActivityData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.awards_.~RepeatedPtrField();
  _impl_.title_.Destroy();
  _impl_.skipinterface_.Destroy();
  _impl_.desc_.Destroy();
  _impl_.showgiftpic_.Destroy();
  if (this != internal_default_instance()) delete _impl_.cond_;
}

void ActivityData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ActivityData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.awards_.Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.skipinterface_.ClearToEmpty();
  _impl_.desc_.ClearToEmpty();
  _impl_.showgiftpic_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.cond_ != nullptr) {
    delete _impl_.cond_;
  }
  _impl_.cond_ = nullptr;
  ::memset(&_impl_.groupid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.showorder_) -
      reinterpret_cast<char*>(&_impl_.groupid_)) + sizeof(_impl_.showorder_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 GroupId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityData.Title"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Unit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.Cond Cond = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cond(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Award Awards = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_awards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 CondGroup = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.condgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PreCondGroup = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.precondgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SkipInterface = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_skipinterface();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityData.SkipInterface"));
        } else
          goto handle_unusual;
        continue;
      // uint32 SkipTab = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.skiptab_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Day = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Desc = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityData.Desc"));
        } else
          goto handle_unusual;
        continue;
      // uint32 ShowQuality = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.showquality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ShowGiftPic = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_showgiftpic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ActivityData.ShowGiftPic"));
        } else
          goto handle_unusual;
        continue;
      // .msg.ActivityResetType ResetType = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resettype(static_cast<::msg::ActivityResetType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool IsRecruiter = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.isrecruiter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ProgressInherit = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.progressinherit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ShowOrder = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.showorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ActivityData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 GroupId = 1;
  if (this->_internal_groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_groupid(), target);
  }

  // uint32 Id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // string Title = 3;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityData.Title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // uint32 Unit = 4;
  if (this->_internal_unit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_unit(), target);
  }

  // .msg.Cond Cond = 5;
  if (this->_internal_has_cond()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cond(this),
        _Internal::cond(this).GetCachedSize(), target, stream);
  }

  // repeated .msg.Award Awards = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_awards_size()); i < n; i++) {
    const auto& repfield = this->_internal_awards(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 CondGroup = 7;
  if (this->_internal_condgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_condgroup(), target);
  }

  // uint32 PreCondGroup = 8;
  if (this->_internal_precondgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_precondgroup(), target);
  }

  // string SkipInterface = 9;
  if (!this->_internal_skipinterface().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skipinterface().data(), static_cast<int>(this->_internal_skipinterface().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityData.SkipInterface");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_skipinterface(), target);
  }

  // uint32 SkipTab = 10;
  if (this->_internal_skiptab() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_skiptab(), target);
  }

  // uint32 Day = 11;
  if (this->_internal_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_day(), target);
  }

  // string Desc = 12;
  if (!this->_internal_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityData.Desc");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_desc(), target);
  }

  // uint32 ShowQuality = 13;
  if (this->_internal_showquality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_showquality(), target);
  }

  // string ShowGiftPic = 14;
  if (!this->_internal_showgiftpic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_showgiftpic().data(), static_cast<int>(this->_internal_showgiftpic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ActivityData.ShowGiftPic");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_showgiftpic(), target);
  }

  // .msg.ActivityResetType ResetType = 15;
  if (this->_internal_resettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_resettype(), target);
  }

  // bool IsRecruiter = 16;
  if (this->_internal_isrecruiter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_isrecruiter(), target);
  }

  // uint32 ProgressInherit = 17;
  if (this->_internal_progressinherit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_progressinherit(), target);
  }

  // uint32 ShowOrder = 18;
  if (this->_internal_showorder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_showorder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ActivityData)
  return target;
}

size_t ActivityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ActivityData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.Award Awards = 6;
  total_size += 1UL * this->_internal_awards_size();
  for (const auto& msg : this->_impl_.awards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Title = 3;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string SkipInterface = 9;
  if (!this->_internal_skipinterface().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skipinterface());
  }

  // string Desc = 12;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // string ShowGiftPic = 14;
  if (!this->_internal_showgiftpic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_showgiftpic());
  }

  // .msg.Cond Cond = 5;
  if (this->_internal_has_cond()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cond_);
  }

  // uint32 GroupId = 1;
  if (this->_internal_groupid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_groupid());
  }

  // uint32 Id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 Unit = 4;
  if (this->_internal_unit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unit());
  }

  // uint32 CondGroup = 7;
  if (this->_internal_condgroup() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_condgroup());
  }

  // uint32 PreCondGroup = 8;
  if (this->_internal_precondgroup() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_precondgroup());
  }

  // uint32 SkipTab = 10;
  if (this->_internal_skiptab() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skiptab());
  }

  // uint32 Day = 11;
  if (this->_internal_day() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_day());
  }

  // uint32 ShowQuality = 13;
  if (this->_internal_showquality() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_showquality());
  }

  // .msg.ActivityResetType ResetType = 15;
  if (this->_internal_resettype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_resettype());
  }

  // bool IsRecruiter = 16;
  if (this->_internal_isrecruiter() != 0) {
    total_size += 2 + 1;
  }

  // uint32 ProgressInherit = 17;
  if (this->_internal_progressinherit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_progressinherit());
  }

  // uint32 ShowOrder = 18;
  if (this->_internal_showorder() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_showorder());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityData::GetClassData() const { return &_class_data_; }


void ActivityData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityData*>(&to_msg);
  auto& from = static_cast<const ActivityData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ActivityData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.awards_.MergeFrom(from._impl_.awards_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_skipinterface().empty()) {
    _this->_internal_set_skipinterface(from._internal_skipinterface());
  }
  if (!from._internal_desc().empty()) {
    _this->_internal_set_desc(from._internal_desc());
  }
  if (!from._internal_showgiftpic().empty()) {
    _this->_internal_set_showgiftpic(from._internal_showgiftpic());
  }
  if (from._internal_has_cond()) {
    _this->_internal_mutable_cond()->::msg::Cond::MergeFrom(
        from._internal_cond());
  }
  if (from._internal_groupid() != 0) {
    _this->_internal_set_groupid(from._internal_groupid());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_unit() != 0) {
    _this->_internal_set_unit(from._internal_unit());
  }
  if (from._internal_condgroup() != 0) {
    _this->_internal_set_condgroup(from._internal_condgroup());
  }
  if (from._internal_precondgroup() != 0) {
    _this->_internal_set_precondgroup(from._internal_precondgroup());
  }
  if (from._internal_skiptab() != 0) {
    _this->_internal_set_skiptab(from._internal_skiptab());
  }
  if (from._internal_day() != 0) {
    _this->_internal_set_day(from._internal_day());
  }
  if (from._internal_showquality() != 0) {
    _this->_internal_set_showquality(from._internal_showquality());
  }
  if (from._internal_resettype() != 0) {
    _this->_internal_set_resettype(from._internal_resettype());
  }
  if (from._internal_isrecruiter() != 0) {
    _this->_internal_set_isrecruiter(from._internal_isrecruiter());
  }
  if (from._internal_progressinherit() != 0) {
    _this->_internal_set_progressinherit(from._internal_progressinherit());
  }
  if (from._internal_showorder() != 0) {
    _this->_internal_set_showorder(from._internal_showorder());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityData::CopyFrom(const ActivityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ActivityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityData::IsInitialized() const {
  return true;
}

void ActivityData::InternalSwap(ActivityData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.awards_.InternalSwap(&other->_impl_.awards_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.skipinterface_, lhs_arena,
      &other->_impl_.skipinterface_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.desc_, lhs_arena,
      &other->_impl_.desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.showgiftpic_, lhs_arena,
      &other->_impl_.showgiftpic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityData, _impl_.showorder_)
      + sizeof(ActivityData::_impl_.showorder_)
      - PROTOBUF_FIELD_OFFSET(ActivityData, _impl_.cond_)>(
          reinterpret_cast<char*>(&_impl_.cond_),
          reinterpret_cast<char*>(&other->_impl_.cond_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[163]);
}

// ===================================================================

class ActivityAttrData::_Internal {
 public:
};

ActivityAttrData::ActivityAttrData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ActivityAttrData)
}
ActivityAttrData::ActivityAttrData(const ActivityAttrData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityAttrData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.abtesttype_){}
    , decltype(_impl_.abtestvalue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.abtestvalue_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.abtestvalue_));
  // @@protoc_insertion_point(copy_constructor:msg.ActivityAttrData)
}

inline void ActivityAttrData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.abtesttype_){0}
    , decltype(_impl_.abtestvalue_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ActivityAttrData::~ActivityAttrData() {
  // @@protoc_insertion_point(destructor:msg.ActivityAttrData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityAttrData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActivityAttrData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityAttrData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ActivityAttrData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.abtestvalue_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.abtestvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityAttrData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.ABTESTTYPE ABTestType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_abtesttype(static_cast<::msg::ABTESTTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 ABTestValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.abtestvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityAttrData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ActivityAttrData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .msg.ABTESTTYPE ABTestType = 2;
  if (this->_internal_abtesttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_abtesttype(), target);
  }

  // uint32 ABTestValue = 3;
  if (this->_internal_abtestvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_abtestvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ActivityAttrData)
  return target;
}

size_t ActivityAttrData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ActivityAttrData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // .msg.ABTESTTYPE ABTestType = 2;
  if (this->_internal_abtesttype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_abtesttype());
  }

  // uint32 ABTestValue = 3;
  if (this->_internal_abtestvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_abtestvalue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityAttrData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityAttrData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityAttrData::GetClassData() const { return &_class_data_; }


void ActivityAttrData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityAttrData*>(&to_msg);
  auto& from = static_cast<const ActivityAttrData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ActivityAttrData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_abtesttype() != 0) {
    _this->_internal_set_abtesttype(from._internal_abtesttype());
  }
  if (from._internal_abtestvalue() != 0) {
    _this->_internal_set_abtestvalue(from._internal_abtestvalue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityAttrData::CopyFrom(const ActivityAttrData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ActivityAttrData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityAttrData::IsInitialized() const {
  return true;
}

void ActivityAttrData::InternalSwap(ActivityAttrData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityAttrData, _impl_.abtestvalue_)
      + sizeof(ActivityAttrData::_impl_.abtestvalue_)
      - PROTOBUF_FIELD_OFFSET(ActivityAttrData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityAttrData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[164]);
}

// ===================================================================

class GMLanguageInfo::_Internal {
 public:
};

GMLanguageInfo::GMLanguageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.GMLanguageInfo)
}
GMLanguageInfo::GMLanguageInfo(const GMLanguageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GMLanguageInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.languagetype_){}
    , decltype(_impl_.translate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.languagetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.languagetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_languagetype().empty()) {
    _this->_impl_.languagetype_.Set(from._internal_languagetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.translate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.translate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_translate().empty()) {
    _this->_impl_.translate_.Set(from._internal_translate(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.GMLanguageInfo)
}

inline void GMLanguageInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.languagetype_){}
    , decltype(_impl_.translate_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.languagetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.languagetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.translate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.translate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GMLanguageInfo::~GMLanguageInfo() {
  // @@protoc_insertion_point(destructor:msg.GMLanguageInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GMLanguageInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.languagetype_.Destroy();
  _impl_.translate_.Destroy();
}

void GMLanguageInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GMLanguageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GMLanguageInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.languagetype_.ClearToEmpty();
  _impl_.translate_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GMLanguageInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string LanguageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_languagetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GMLanguageInfo.LanguageType"));
        } else
          goto handle_unusual;
        continue;
      // string Translate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_translate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GMLanguageInfo.Translate"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GMLanguageInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GMLanguageInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string LanguageType = 1;
  if (!this->_internal_languagetype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_languagetype().data(), static_cast<int>(this->_internal_languagetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GMLanguageInfo.LanguageType");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_languagetype(), target);
  }

  // string Translate = 2;
  if (!this->_internal_translate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_translate().data(), static_cast<int>(this->_internal_translate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GMLanguageInfo.Translate");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_translate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GMLanguageInfo)
  return target;
}

size_t GMLanguageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GMLanguageInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string LanguageType = 1;
  if (!this->_internal_languagetype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_languagetype());
  }

  // string Translate = 2;
  if (!this->_internal_translate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_translate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GMLanguageInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GMLanguageInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GMLanguageInfo::GetClassData() const { return &_class_data_; }


void GMLanguageInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GMLanguageInfo*>(&to_msg);
  auto& from = static_cast<const GMLanguageInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.GMLanguageInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_languagetype().empty()) {
    _this->_internal_set_languagetype(from._internal_languagetype());
  }
  if (!from._internal_translate().empty()) {
    _this->_internal_set_translate(from._internal_translate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GMLanguageInfo::CopyFrom(const GMLanguageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GMLanguageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMLanguageInfo::IsInitialized() const {
  return true;
}

void GMLanguageInfo::InternalSwap(GMLanguageInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.languagetype_, lhs_arena,
      &other->_impl_.languagetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.translate_, lhs_arena,
      &other->_impl_.translate_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GMLanguageInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[165]);
}

// ===================================================================

class PlayLimit::_Internal {
 public:
};

PlayLimit::PlayLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PlayLimit)
}
PlayLimit::PlayLimit(const PlayLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayLimit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.age_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.age_, &from._impl_.age_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.age_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:msg.PlayLimit)
}

inline void PlayLimit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.age_){0u}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayLimit::~PlayLimit() {
  // @@protoc_insertion_point(destructor:msg.PlayLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayLimit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.age_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.age_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Age = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayLimit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayLimit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Age = 1;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_age(), target);
  }

  // uint32 Count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayLimit)
  return target;
}

size_t PlayLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayLimit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Age = 1;
  if (this->_internal_age() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_age());
  }

  // uint32 Count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayLimit::GetClassData() const { return &_class_data_; }


void PlayLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayLimit*>(&to_msg);
  auto& from = static_cast<const PlayLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayLimit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_age() != 0) {
    _this->_internal_set_age(from._internal_age());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayLimit::CopyFrom(const PlayLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayLimit::IsInitialized() const {
  return true;
}

void PlayLimit::InternalSwap(PlayLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayLimit, _impl_.count_)
      + sizeof(PlayLimit::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(PlayLimit, _impl_.age_)>(
          reinterpret_cast<char*>(&_impl_.age_),
          reinterpret_cast<char*>(&other->_impl_.age_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[166]);
}

// ===================================================================

class ChannelFunctionData::_Internal {
 public:
};

ChannelFunctionData::ChannelFunctionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ChannelFunctionData)
}
ChannelFunctionData::ChannelFunctionData(const ChannelFunctionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChannelFunctionData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playlimits_){from._impl_.playlimits_}
    , decltype(_impl_.channelid_){}
    , decltype(_impl_.forbiddenlogo_){}
    , decltype(_impl_.agejudge_){}
    , decltype(_impl_.informationinput_){}
    , decltype(_impl_.gamerestrict_){}
    , decltype(_impl_.forbiddenage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channelid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channelid().empty()) {
    _this->_impl_.channelid_.Set(from._internal_channelid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.forbiddenlogo_, &from._impl_.forbiddenlogo_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.forbiddenage_) -
    reinterpret_cast<char*>(&_impl_.forbiddenlogo_)) + sizeof(_impl_.forbiddenage_));
  // @@protoc_insertion_point(copy_constructor:msg.ChannelFunctionData)
}

inline void ChannelFunctionData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playlimits_){arena}
    , decltype(_impl_.channelid_){}
    , decltype(_impl_.forbiddenlogo_){false}
    , decltype(_impl_.agejudge_){false}
    , decltype(_impl_.informationinput_){false}
    , decltype(_impl_.gamerestrict_){false}
    , decltype(_impl_.forbiddenage_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channelid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChannelFunctionData::~ChannelFunctionData() {
  // @@protoc_insertion_point(destructor:msg.ChannelFunctionData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelFunctionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playlimits_.~RepeatedPtrField();
  _impl_.channelid_.Destroy();
}

void ChannelFunctionData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelFunctionData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ChannelFunctionData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playlimits_.Clear();
  _impl_.channelid_.ClearToEmpty();
  ::memset(&_impl_.forbiddenlogo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.forbiddenage_) -
      reinterpret_cast<char*>(&_impl_.forbiddenlogo_)) + sizeof(_impl_.forbiddenage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelFunctionData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ChannelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_channelid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ChannelFunctionData.ChannelId"));
        } else
          goto handle_unusual;
        continue;
      // bool ForbiddenLogo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.forbiddenlogo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool AgeJudge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.agejudge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool InformationInput = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.informationinput_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool GameRestrict = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.gamerestrict_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ForbiddenAge = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.forbiddenage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.PlayLimit PlayLimits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playlimits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelFunctionData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ChannelFunctionData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ChannelId = 1;
  if (!this->_internal_channelid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ChannelFunctionData.ChannelId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channelid(), target);
  }

  // bool ForbiddenLogo = 2;
  if (this->_internal_forbiddenlogo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_forbiddenlogo(), target);
  }

  // bool AgeJudge = 3;
  if (this->_internal_agejudge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_agejudge(), target);
  }

  // bool InformationInput = 4;
  if (this->_internal_informationinput() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_informationinput(), target);
  }

  // bool GameRestrict = 5;
  if (this->_internal_gamerestrict() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_gamerestrict(), target);
  }

  // uint32 ForbiddenAge = 6;
  if (this->_internal_forbiddenage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_forbiddenage(), target);
  }

  // repeated .msg.PlayLimit PlayLimits = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_playlimits_size()); i < n; i++) {
    const auto& repfield = this->_internal_playlimits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ChannelFunctionData)
  return target;
}

size_t ChannelFunctionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ChannelFunctionData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.PlayLimit PlayLimits = 7;
  total_size += 1UL * this->_internal_playlimits_size();
  for (const auto& msg : this->_impl_.playlimits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ChannelId = 1;
  if (!this->_internal_channelid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  // bool ForbiddenLogo = 2;
  if (this->_internal_forbiddenlogo() != 0) {
    total_size += 1 + 1;
  }

  // bool AgeJudge = 3;
  if (this->_internal_agejudge() != 0) {
    total_size += 1 + 1;
  }

  // bool InformationInput = 4;
  if (this->_internal_informationinput() != 0) {
    total_size += 1 + 1;
  }

  // bool GameRestrict = 5;
  if (this->_internal_gamerestrict() != 0) {
    total_size += 1 + 1;
  }

  // uint32 ForbiddenAge = 6;
  if (this->_internal_forbiddenage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_forbiddenage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelFunctionData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChannelFunctionData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelFunctionData::GetClassData() const { return &_class_data_; }


void ChannelFunctionData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChannelFunctionData*>(&to_msg);
  auto& from = static_cast<const ChannelFunctionData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ChannelFunctionData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.playlimits_.MergeFrom(from._impl_.playlimits_);
  if (!from._internal_channelid().empty()) {
    _this->_internal_set_channelid(from._internal_channelid());
  }
  if (from._internal_forbiddenlogo() != 0) {
    _this->_internal_set_forbiddenlogo(from._internal_forbiddenlogo());
  }
  if (from._internal_agejudge() != 0) {
    _this->_internal_set_agejudge(from._internal_agejudge());
  }
  if (from._internal_informationinput() != 0) {
    _this->_internal_set_informationinput(from._internal_informationinput());
  }
  if (from._internal_gamerestrict() != 0) {
    _this->_internal_set_gamerestrict(from._internal_gamerestrict());
  }
  if (from._internal_forbiddenage() != 0) {
    _this->_internal_set_forbiddenage(from._internal_forbiddenage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelFunctionData::CopyFrom(const ChannelFunctionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ChannelFunctionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelFunctionData::IsInitialized() const {
  return true;
}

void ChannelFunctionData::InternalSwap(ChannelFunctionData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.playlimits_.InternalSwap(&other->_impl_.playlimits_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channelid_, lhs_arena,
      &other->_impl_.channelid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelFunctionData, _impl_.forbiddenage_)
      + sizeof(ChannelFunctionData::_impl_.forbiddenage_)
      - PROTOBUF_FIELD_OFFSET(ChannelFunctionData, _impl_.forbiddenlogo_)>(
          reinterpret_cast<char*>(&_impl_.forbiddenlogo_),
          reinterpret_cast<char*>(&other->_impl_.forbiddenlogo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelFunctionData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[167]);
}

// ===================================================================

class PvpHistoryData::_Internal {
 public:
  static const ::msg::CSDTPvpCampResult& campresult(const PvpHistoryData* msg);
  static const ::msg::PvpTeachResult& teachresult(const PvpHistoryData* msg);
  static const ::msg::PvpExtData& extdata(const PvpHistoryData* msg);
  static const ::msg::PlayerExtMap& playerextdata(const PvpHistoryData* msg);
  static const ::msg::BattleExtData& battleext(const PvpHistoryData* msg);
};

const ::msg::CSDTPvpCampResult&
PvpHistoryData::_Internal::campresult(const PvpHistoryData* msg) {
  return *msg->_impl_.campresult_;
}
const ::msg::PvpTeachResult&
PvpHistoryData::_Internal::teachresult(const PvpHistoryData* msg) {
  return *msg->_impl_.teachresult_;
}
const ::msg::PvpExtData&
PvpHistoryData::_Internal::extdata(const PvpHistoryData* msg) {
  return *msg->_impl_.extdata_;
}
const ::msg::PlayerExtMap&
PvpHistoryData::_Internal::playerextdata(const PvpHistoryData* msg) {
  return *msg->_impl_.playerextdata_;
}
const ::msg::BattleExtData&
PvpHistoryData::_Internal::battleext(const PvpHistoryData* msg) {
  return *msg->_impl_.battleext_;
}
PvpHistoryData::PvpHistoryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PvpHistoryData)
}
PvpHistoryData::PvpHistoryData(const PvpHistoryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PvpHistoryData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.campresult_){nullptr}
    , decltype(_impl_.teachresult_){nullptr}
    , decltype(_impl_.extdata_){nullptr}
    , decltype(_impl_.playerextdata_){nullptr}
    , decltype(_impl_.battleext_){nullptr}
    , decltype(_impl_.pvpid_){}
    , decltype(_impl_.createtime_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.meleerule_){}
    , decltype(_impl_.tournamentid_){}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.customsubmode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_campresult()) {
    _this->_impl_.campresult_ = new ::msg::CSDTPvpCampResult(*from._impl_.campresult_);
  }
  if (from._internal_has_teachresult()) {
    _this->_impl_.teachresult_ = new ::msg::PvpTeachResult(*from._impl_.teachresult_);
  }
  if (from._internal_has_extdata()) {
    _this->_impl_.extdata_ = new ::msg::PvpExtData(*from._impl_.extdata_);
  }
  if (from._internal_has_playerextdata()) {
    _this->_impl_.playerextdata_ = new ::msg::PlayerExtMap(*from._impl_.playerextdata_);
  }
  if (from._internal_has_battleext()) {
    _this->_impl_.battleext_ = new ::msg::BattleExtData(*from._impl_.battleext_);
  }
  ::memcpy(&_impl_.pvpid_, &from._impl_.pvpid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.customsubmode_) -
    reinterpret_cast<char*>(&_impl_.pvpid_)) + sizeof(_impl_.customsubmode_));
  // @@protoc_insertion_point(copy_constructor:msg.PvpHistoryData)
}

inline void PvpHistoryData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.campresult_){nullptr}
    , decltype(_impl_.teachresult_){nullptr}
    , decltype(_impl_.extdata_){nullptr}
    , decltype(_impl_.playerextdata_){nullptr}
    , decltype(_impl_.battleext_){nullptr}
    , decltype(_impl_.pvpid_){uint64_t{0u}}
    , decltype(_impl_.createtime_){int64_t{0}}
    , decltype(_impl_.mode_){0}
    , decltype(_impl_.meleerule_){0u}
    , decltype(_impl_.tournamentid_){uint64_t{0u}}
    , decltype(_impl_.gameid_){uint64_t{0u}}
    , decltype(_impl_.customsubmode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PvpHistoryData::~PvpHistoryData() {
  // @@protoc_insertion_point(destructor:msg.PvpHistoryData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PvpHistoryData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.campresult_;
  if (this != internal_default_instance()) delete _impl_.teachresult_;
  if (this != internal_default_instance()) delete _impl_.extdata_;
  if (this != internal_default_instance()) delete _impl_.playerextdata_;
  if (this != internal_default_instance()) delete _impl_.battleext_;
}

void PvpHistoryData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PvpHistoryData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PvpHistoryData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.campresult_ != nullptr) {
    delete _impl_.campresult_;
  }
  _impl_.campresult_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.teachresult_ != nullptr) {
    delete _impl_.teachresult_;
  }
  _impl_.teachresult_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.extdata_ != nullptr) {
    delete _impl_.extdata_;
  }
  _impl_.extdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.playerextdata_ != nullptr) {
    delete _impl_.playerextdata_;
  }
  _impl_.playerextdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.battleext_ != nullptr) {
    delete _impl_.battleext_;
  }
  _impl_.battleext_ = nullptr;
  ::memset(&_impl_.pvpid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.customsubmode_) -
      reinterpret_cast<char*>(&_impl_.pvpid_)) + sizeof(_impl_.customsubmode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PvpHistoryData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 PvpId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pvpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 CreateTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PVPMODE Mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::msg::PVPMODE>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.CSDTPvpCampResult CampResult = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_campresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MeleeRule = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.meleerule_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 CustomSubMode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.customsubmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 TournamentId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.tournamentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 GameId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PvpTeachResult TeachResult = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_teachresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PvpExtData ExtData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_extdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PlayerExtMap PlayerExtData = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerextdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.BattleExtData BattleExt = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_battleext(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PvpHistoryData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PvpHistoryData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 PvpId = 1;
  if (this->_internal_pvpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pvpid(), target);
  }

  // int64 CreateTime = 2;
  if (this->_internal_createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_createtime(), target);
  }

  // .msg.PVPMODE Mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mode(), target);
  }

  // .msg.CSDTPvpCampResult CampResult = 4;
  if (this->_internal_has_campresult()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::campresult(this),
        _Internal::campresult(this).GetCachedSize(), target, stream);
  }

  // uint32 MeleeRule = 5;
  if (this->_internal_meleerule() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_meleerule(), target);
  }

  // uint32 CustomSubMode = 6;
  if (this->_internal_customsubmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_customsubmode(), target);
  }

  // uint64 TournamentId = 7;
  if (this->_internal_tournamentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_tournamentid(), target);
  }

  // uint64 GameId = 8;
  if (this->_internal_gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_gameid(), target);
  }

  // .msg.PvpTeachResult TeachResult = 9;
  if (this->_internal_has_teachresult()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::teachresult(this),
        _Internal::teachresult(this).GetCachedSize(), target, stream);
  }

  // .msg.PvpExtData ExtData = 10;
  if (this->_internal_has_extdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::extdata(this),
        _Internal::extdata(this).GetCachedSize(), target, stream);
  }

  // .msg.PlayerExtMap PlayerExtData = 11;
  if (this->_internal_has_playerextdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::playerextdata(this),
        _Internal::playerextdata(this).GetCachedSize(), target, stream);
  }

  // .msg.BattleExtData BattleExt = 12;
  if (this->_internal_has_battleext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::battleext(this),
        _Internal::battleext(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PvpHistoryData)
  return target;
}

size_t PvpHistoryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PvpHistoryData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.CSDTPvpCampResult CampResult = 4;
  if (this->_internal_has_campresult()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.campresult_);
  }

  // .msg.PvpTeachResult TeachResult = 9;
  if (this->_internal_has_teachresult()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.teachresult_);
  }

  // .msg.PvpExtData ExtData = 10;
  if (this->_internal_has_extdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extdata_);
  }

  // .msg.PlayerExtMap PlayerExtData = 11;
  if (this->_internal_has_playerextdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerextdata_);
  }

  // .msg.BattleExtData BattleExt = 12;
  if (this->_internal_has_battleext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.battleext_);
  }

  // uint64 PvpId = 1;
  if (this->_internal_pvpid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pvpid());
  }

  // int64 CreateTime = 2;
  if (this->_internal_createtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_createtime());
  }

  // .msg.PVPMODE Mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // uint32 MeleeRule = 5;
  if (this->_internal_meleerule() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_meleerule());
  }

  // uint64 TournamentId = 7;
  if (this->_internal_tournamentid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tournamentid());
  }

  // uint64 GameId = 8;
  if (this->_internal_gameid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gameid());
  }

  // uint32 CustomSubMode = 6;
  if (this->_internal_customsubmode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_customsubmode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PvpHistoryData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PvpHistoryData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PvpHistoryData::GetClassData() const { return &_class_data_; }


void PvpHistoryData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PvpHistoryData*>(&to_msg);
  auto& from = static_cast<const PvpHistoryData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PvpHistoryData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_campresult()) {
    _this->_internal_mutable_campresult()->::msg::CSDTPvpCampResult::MergeFrom(
        from._internal_campresult());
  }
  if (from._internal_has_teachresult()) {
    _this->_internal_mutable_teachresult()->::msg::PvpTeachResult::MergeFrom(
        from._internal_teachresult());
  }
  if (from._internal_has_extdata()) {
    _this->_internal_mutable_extdata()->::msg::PvpExtData::MergeFrom(
        from._internal_extdata());
  }
  if (from._internal_has_playerextdata()) {
    _this->_internal_mutable_playerextdata()->::msg::PlayerExtMap::MergeFrom(
        from._internal_playerextdata());
  }
  if (from._internal_has_battleext()) {
    _this->_internal_mutable_battleext()->::msg::BattleExtData::MergeFrom(
        from._internal_battleext());
  }
  if (from._internal_pvpid() != 0) {
    _this->_internal_set_pvpid(from._internal_pvpid());
  }
  if (from._internal_createtime() != 0) {
    _this->_internal_set_createtime(from._internal_createtime());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_meleerule() != 0) {
    _this->_internal_set_meleerule(from._internal_meleerule());
  }
  if (from._internal_tournamentid() != 0) {
    _this->_internal_set_tournamentid(from._internal_tournamentid());
  }
  if (from._internal_gameid() != 0) {
    _this->_internal_set_gameid(from._internal_gameid());
  }
  if (from._internal_customsubmode() != 0) {
    _this->_internal_set_customsubmode(from._internal_customsubmode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PvpHistoryData::CopyFrom(const PvpHistoryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PvpHistoryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpHistoryData::IsInitialized() const {
  return true;
}

void PvpHistoryData::InternalSwap(PvpHistoryData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PvpHistoryData, _impl_.customsubmode_)
      + sizeof(PvpHistoryData::_impl_.customsubmode_)
      - PROTOBUF_FIELD_OFFSET(PvpHistoryData, _impl_.campresult_)>(
          reinterpret_cast<char*>(&_impl_.campresult_),
          reinterpret_cast<char*>(&other->_impl_.campresult_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PvpHistoryData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[168]);
}

// ===================================================================

class CSDTGuide::_Internal {
 public:
};

CSDTGuide::CSDTGuide(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTGuide)
}
CSDTGuide::CSDTGuide(const CSDTGuide& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTGuide* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guidename_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.guideid_){}
    , decltype(_impl_.sequence_){}
    , decltype(_impl_.lastseq_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.guidename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guidename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_guidename().empty()) {
    _this->_impl_.guidename_.Set(from._internal_guidename(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lastseq_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.lastseq_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTGuide)
}

inline void CSDTGuide::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guidename_){}
    , decltype(_impl_.status_){0u}
    , decltype(_impl_.guideid_){0u}
    , decltype(_impl_.sequence_){0u}
    , decltype(_impl_.lastseq_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.guidename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guidename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTGuide::~CSDTGuide() {
  // @@protoc_insertion_point(destructor:msg.CSDTGuide)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTGuide::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.guidename_.Destroy();
}

void CSDTGuide::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTGuide::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTGuide)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.guidename_.ClearToEmpty();
  ::memset(&_impl_.status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lastseq_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.lastseq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTGuide::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string GuideName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_guidename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTGuide.GuideName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 GuideID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.guideid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 LastSeq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.lastseq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTGuide::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTGuide)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string GuideName = 1;
  if (!this->_internal_guidename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guidename().data(), static_cast<int>(this->_internal_guidename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTGuide.GuideName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_guidename(), target);
  }

  // uint32 Status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_status(), target);
  }

  // uint32 GuideID = 3;
  if (this->_internal_guideid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_guideid(), target);
  }

  // uint32 Sequence = 4;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sequence(), target);
  }

  // uint32 LastSeq = 5;
  if (this->_internal_lastseq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_lastseq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTGuide)
  return target;
}

size_t CSDTGuide::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTGuide)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string GuideName = 1;
  if (!this->_internal_guidename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guidename());
  }

  // uint32 Status = 2;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
  }

  // uint32 GuideID = 3;
  if (this->_internal_guideid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guideid());
  }

  // uint32 Sequence = 4;
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence());
  }

  // uint32 LastSeq = 5;
  if (this->_internal_lastseq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lastseq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTGuide::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTGuide::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTGuide::GetClassData() const { return &_class_data_; }


void CSDTGuide::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTGuide*>(&to_msg);
  auto& from = static_cast<const CSDTGuide&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTGuide)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_guidename().empty()) {
    _this->_internal_set_guidename(from._internal_guidename());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_guideid() != 0) {
    _this->_internal_set_guideid(from._internal_guideid());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_lastseq() != 0) {
    _this->_internal_set_lastseq(from._internal_lastseq());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTGuide::CopyFrom(const CSDTGuide& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTGuide)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTGuide::IsInitialized() const {
  return true;
}

void CSDTGuide::InternalSwap(CSDTGuide* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.guidename_, lhs_arena,
      &other->_impl_.guidename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTGuide, _impl_.lastseq_)
      + sizeof(CSDTGuide::_impl_.lastseq_)
      - PROTOBUF_FIELD_OFFSET(CSDTGuide, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTGuide::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[169]);
}

// ===================================================================

class CSDTChat::_Internal {
 public:
};

CSDTChat::CSDTChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTChat)
}
CSDTChat::CSDTChat(const CSDTChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTChat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.senderid_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.emotionid_){}
    , decltype(_impl_.channeltype_){}
    , decltype(_impl_.ps4only_){}
    , decltype(_impl_.sourcetype_){}
    , decltype(_impl_.restricttype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.senderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.senderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_senderid().empty()) {
    _this->_impl_.senderid_.Set(from._internal_senderid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channelusrid().empty()) {
    _this->_impl_.channelusrid_.Set(from._internal_channelusrid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.emotionid_, &from._impl_.emotionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.restricttype_) -
    reinterpret_cast<char*>(&_impl_.emotionid_)) + sizeof(_impl_.restricttype_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTChat)
}

inline void CSDTChat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.senderid_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.emotionid_){0u}
    , decltype(_impl_.channeltype_){0}
    , decltype(_impl_.ps4only_){false}
    , decltype(_impl_.sourcetype_){0}
    , decltype(_impl_.restricttype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.senderid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.senderid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTChat::~CSDTChat() {
  // @@protoc_insertion_point(destructor:msg.CSDTChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.senderid_.Destroy();
  _impl_.content_.Destroy();
  _impl_.channelusrid_.Destroy();
}

void CSDTChat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTChat::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.senderid_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.channelusrid_.ClearToEmpty();
  ::memset(&_impl_.emotionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.restricttype_) -
      reinterpret_cast<char*>(&_impl_.emotionid_)) + sizeof(_impl_.restricttype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 EmotionId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.emotionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SenderId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_senderid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTChat.SenderId"));
        } else
          goto handle_unusual;
        continue;
      // string Content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTChat.Content"));
        } else
          goto handle_unusual;
        continue;
      // .msg.CHANELTYPE ChannelType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channeltype(static_cast<::msg::CHANELTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string ChannelUsrId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_channelusrid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTChat.ChannelUsrId"));
        } else
          goto handle_unusual;
        continue;
      // bool PS4Only = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.ps4only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CHATSOURCETYPE SourceType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sourcetype(static_cast<::msg::CHATSOURCETYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.UserRestrictType RestrictType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_restricttype(static_cast<::msg::UserRestrictType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 EmotionId = 1;
  if (this->_internal_emotionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_emotionid(), target);
  }

  // string SenderId = 2;
  if (!this->_internal_senderid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_senderid().data(), static_cast<int>(this->_internal_senderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTChat.SenderId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_senderid(), target);
  }

  // string Content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTChat.Content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  // .msg.CHANELTYPE ChannelType = 4;
  if (this->_internal_channeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_channeltype(), target);
  }

  // string ChannelUsrId = 5;
  if (!this->_internal_channelusrid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelusrid().data(), static_cast<int>(this->_internal_channelusrid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTChat.ChannelUsrId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_channelusrid(), target);
  }

  // bool PS4Only = 6;
  if (this->_internal_ps4only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_ps4only(), target);
  }

  // .msg.CHATSOURCETYPE SourceType = 7;
  if (this->_internal_sourcetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_sourcetype(), target);
  }

  // .msg.UserRestrictType RestrictType = 8;
  if (this->_internal_restricttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_restricttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTChat)
  return target;
}

size_t CSDTChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SenderId = 2;
  if (!this->_internal_senderid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_senderid());
  }

  // string Content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string ChannelUsrId = 5;
  if (!this->_internal_channelusrid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelusrid());
  }

  // uint32 EmotionId = 1;
  if (this->_internal_emotionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_emotionid());
  }

  // .msg.CHANELTYPE ChannelType = 4;
  if (this->_internal_channeltype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_channeltype());
  }

  // bool PS4Only = 6;
  if (this->_internal_ps4only() != 0) {
    total_size += 1 + 1;
  }

  // .msg.CHATSOURCETYPE SourceType = 7;
  if (this->_internal_sourcetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sourcetype());
  }

  // .msg.UserRestrictType RestrictType = 8;
  if (this->_internal_restricttype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_restricttype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTChat::GetClassData() const { return &_class_data_; }


void CSDTChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTChat*>(&to_msg);
  auto& from = static_cast<const CSDTChat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTChat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_senderid().empty()) {
    _this->_internal_set_senderid(from._internal_senderid());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_channelusrid().empty()) {
    _this->_internal_set_channelusrid(from._internal_channelusrid());
  }
  if (from._internal_emotionid() != 0) {
    _this->_internal_set_emotionid(from._internal_emotionid());
  }
  if (from._internal_channeltype() != 0) {
    _this->_internal_set_channeltype(from._internal_channeltype());
  }
  if (from._internal_ps4only() != 0) {
    _this->_internal_set_ps4only(from._internal_ps4only());
  }
  if (from._internal_sourcetype() != 0) {
    _this->_internal_set_sourcetype(from._internal_sourcetype());
  }
  if (from._internal_restricttype() != 0) {
    _this->_internal_set_restricttype(from._internal_restricttype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTChat::CopyFrom(const CSDTChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTChat::IsInitialized() const {
  return true;
}

void CSDTChat::InternalSwap(CSDTChat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.senderid_, lhs_arena,
      &other->_impl_.senderid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channelusrid_, lhs_arena,
      &other->_impl_.channelusrid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTChat, _impl_.restricttype_)
      + sizeof(CSDTChat::_impl_.restricttype_)
      - PROTOBUF_FIELD_OFFSET(CSDTChat, _impl_.emotionid_)>(
          reinterpret_cast<char*>(&_impl_.emotionid_),
          reinterpret_cast<char*>(&other->_impl_.emotionid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[170]);
}

// ===================================================================

class CSDTGoods::_Internal {
 public:
};

CSDTGoods::CSDTGoods(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTGoods)
}
CSDTGoods::CSDTGoods(const CSDTGoods& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTGoods* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.uid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.uid_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.uid_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTGoods)
}

inline void CSDTGoods::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.count_){0u}
    , decltype(_impl_.uid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTGoods::~CSDTGoods() {
  // @@protoc_insertion_point(destructor:msg.CSDTGoods)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTGoods::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDTGoods::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTGoods::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTGoods)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.uid_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.uid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTGoods::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTGoods::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTGoods)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 Count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // uint32 Uid = 3;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTGoods)
  return target;
}

size_t CSDTGoods::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTGoods)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 Count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  // uint32 Uid = 3;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTGoods::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTGoods::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTGoods::GetClassData() const { return &_class_data_; }


void CSDTGoods::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTGoods*>(&to_msg);
  auto& from = static_cast<const CSDTGoods&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTGoods)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_uid() != 0) {
    _this->_internal_set_uid(from._internal_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTGoods::CopyFrom(const CSDTGoods& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTGoods::IsInitialized() const {
  return true;
}

void CSDTGoods::InternalSwap(CSDTGoods* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTGoods, _impl_.uid_)
      + sizeof(CSDTGoods::_impl_.uid_)
      - PROTOBUF_FIELD_OFFSET(CSDTGoods, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTGoods::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[171]);
}

// ===================================================================

class CSDTGoodsInfo::_Internal {
 public:
};

CSDTGoodsInfo::CSDTGoodsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTGoodsInfo)
}
CSDTGoodsInfo::CSDTGoodsInfo(const CSDTGoodsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTGoodsInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.goodsinfo_){from._impl_.goodsinfo_}
    , decltype(_impl_.refreshtime_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.refreshtime_, &from._impl_.refreshtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.refreshtime_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTGoodsInfo)
}

inline void CSDTGoodsInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.goodsinfo_){arena}
    , decltype(_impl_.refreshtime_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTGoodsInfo::~CSDTGoodsInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTGoodsInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTGoodsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.goodsinfo_.~RepeatedPtrField();
}

void CSDTGoodsInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTGoodsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTGoodsInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.goodsinfo_.Clear();
  ::memset(&_impl_.refreshtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.refreshtime_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTGoodsInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.SHOPTYPE Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::SHOPTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CSDTGoods GoodsInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_goodsinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 RefreshTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.refreshtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTGoodsInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTGoodsInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.SHOPTYPE Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated .msg.CSDTGoods GoodsInfo = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_goodsinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_goodsinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 RefreshTime = 3;
  if (this->_internal_refreshtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_refreshtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTGoodsInfo)
  return target;
}

size_t CSDTGoodsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTGoodsInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTGoods GoodsInfo = 2;
  total_size += 1UL * this->_internal_goodsinfo_size();
  for (const auto& msg : this->_impl_.goodsinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 RefreshTime = 3;
  if (this->_internal_refreshtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_refreshtime());
  }

  // .msg.SHOPTYPE Type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTGoodsInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTGoodsInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTGoodsInfo::GetClassData() const { return &_class_data_; }


void CSDTGoodsInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTGoodsInfo*>(&to_msg);
  auto& from = static_cast<const CSDTGoodsInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTGoodsInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.goodsinfo_.MergeFrom(from._impl_.goodsinfo_);
  if (from._internal_refreshtime() != 0) {
    _this->_internal_set_refreshtime(from._internal_refreshtime());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTGoodsInfo::CopyFrom(const CSDTGoodsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTGoodsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTGoodsInfo::IsInitialized() const {
  return true;
}

void CSDTGoodsInfo::InternalSwap(CSDTGoodsInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.goodsinfo_.InternalSwap(&other->_impl_.goodsinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTGoodsInfo, _impl_.type_)
      + sizeof(CSDTGoodsInfo::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(CSDTGoodsInfo, _impl_.refreshtime_)>(
          reinterpret_cast<char*>(&_impl_.refreshtime_),
          reinterpret_cast<char*>(&other->_impl_.refreshtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTGoodsInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[172]);
}

// ===================================================================

class MallTabData::_Internal {
 public:
};

MallTabData::MallTabData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.MallTabData)
}
MallTabData::MallTabData(const MallTabData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MallTabData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.sort_){}
    , decltype(_impl_.skips_interface_pc_){}
    , decltype(_impl_.itemtypepage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.itemtypepage_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.itemtypepage_));
  // @@protoc_insertion_point(copy_constructor:msg.MallTabData)
}

inline void MallTabData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.sort_){0u}
    , decltype(_impl_.skips_interface_pc_){0u}
    , decltype(_impl_.itemtypepage_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MallTabData::~MallTabData() {
  // @@protoc_insertion_point(destructor:msg.MallTabData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MallTabData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
}

void MallTabData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MallTabData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MallTabData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.itemtypepage_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.itemtypepage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MallTabData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.MallTabData.Title"));
        } else
          goto handle_unusual;
        continue;
      // .msg.MALLTABTYPE Type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::MALLTABTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 Sort = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.sort_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Skips_Interface_pc = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.skips_interface_pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ItemTypePage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.itemtypepage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MallTabData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MallTabData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string Title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MallTabData.Title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // .msg.MALLTABTYPE Type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // uint32 Sort = 6;
  if (this->_internal_sort() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_sort(), target);
  }

  // uint32 Skips_Interface_pc = 11;
  if (this->_internal_skips_interface_pc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_skips_interface_pc(), target);
  }

  // uint32 ItemTypePage = 12;
  if (this->_internal_itemtypepage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_itemtypepage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MallTabData)
  return target;
}

size_t MallTabData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MallTabData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // .msg.MALLTABTYPE Type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 Sort = 6;
  if (this->_internal_sort() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sort());
  }

  // uint32 Skips_Interface_pc = 11;
  if (this->_internal_skips_interface_pc() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skips_interface_pc());
  }

  // uint32 ItemTypePage = 12;
  if (this->_internal_itemtypepage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_itemtypepage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MallTabData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MallTabData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MallTabData::GetClassData() const { return &_class_data_; }


void MallTabData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MallTabData*>(&to_msg);
  auto& from = static_cast<const MallTabData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.MallTabData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_sort() != 0) {
    _this->_internal_set_sort(from._internal_sort());
  }
  if (from._internal_skips_interface_pc() != 0) {
    _this->_internal_set_skips_interface_pc(from._internal_skips_interface_pc());
  }
  if (from._internal_itemtypepage() != 0) {
    _this->_internal_set_itemtypepage(from._internal_itemtypepage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MallTabData::CopyFrom(const MallTabData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MallTabData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallTabData::IsInitialized() const {
  return true;
}

void MallTabData::InternalSwap(MallTabData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MallTabData, _impl_.itemtypepage_)
      + sizeof(MallTabData::_impl_.itemtypepage_)
      - PROTOBUF_FIELD_OFFSET(MallTabData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MallTabData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[173]);
}

// ===================================================================

class Skip::_Internal {
 public:
};

Skip::Skip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.Skip)
}
Skip::Skip(const Skip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Skip* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.interface_){}
    , decltype(_impl_.tab_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.interface_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_interface().empty()) {
    _this->_impl_.interface_.Set(from._internal_interface(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.tab_ = from._impl_.tab_;
  // @@protoc_insertion_point(copy_constructor:msg.Skip)
}

inline void Skip::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.interface_){}
    , decltype(_impl_.tab_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.interface_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.interface_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Skip::~Skip() {
  // @@protoc_insertion_point(destructor:msg.Skip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Skip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.interface_.Destroy();
}

void Skip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Skip::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Skip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interface_.ClearToEmpty();
  _impl_.tab_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Skip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_interface();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.Skip.Interface"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Tab = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tab_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Skip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Skip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Interface = 1;
  if (!this->_internal_interface().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface().data(), static_cast<int>(this->_internal_interface().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.Skip.Interface");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interface(), target);
  }

  // uint32 Tab = 2;
  if (this->_internal_tab() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tab(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Skip)
  return target;
}

size_t Skip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Skip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Interface = 1;
  if (!this->_internal_interface().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface());
  }

  // uint32 Tab = 2;
  if (this->_internal_tab() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tab());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Skip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Skip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Skip::GetClassData() const { return &_class_data_; }


void Skip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Skip*>(&to_msg);
  auto& from = static_cast<const Skip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Skip)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_interface().empty()) {
    _this->_internal_set_interface(from._internal_interface());
  }
  if (from._internal_tab() != 0) {
    _this->_internal_set_tab(from._internal_tab());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Skip::CopyFrom(const Skip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Skip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skip::IsInitialized() const {
  return true;
}

void Skip::InternalSwap(Skip* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.interface_, lhs_arena,
      &other->_impl_.interface_, rhs_arena
  );
  swap(_impl_.tab_, other->_impl_.tab_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Skip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[174]);
}

// ===================================================================

class MallGoodsData::_Internal {
 public:
};

MallGoodsData::MallGoodsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.MallGoodsData)
}
MallGoodsData::MallGoodsData(const MallGoodsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MallGoodsData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contents_){from._impl_.contents_}
    , decltype(_impl_.consumes_){from._impl_.consumes_}
    , decltype(_impl_.downloadlist_){from._impl_.downloadlist_}
    , decltype(_impl_.platformlist_){from._impl_.platformlist_}
    , /*decltype(_impl_._platformlist_cached_byte_size_)*/{0}
    , decltype(_impl_.consumes2nd_){from._impl_.consumes2nd_}
    , decltype(_impl_.excludedownload_){from._impl_.excludedownload_}
    , decltype(_impl_.countrylist_){from._impl_.countrylist_}
    , decltype(_impl_.gifts_){from._impl_.gifts_}
    , decltype(_impl_.consumeinc_){from._impl_.consumeinc_}
    , decltype(_impl_.version_){}
    , decltype(_impl_.videourl_){}
    , decltype(_impl_.consumesurlweb_){}
    , decltype(_impl_.consumesurlapp_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.sellcountlimit_){}
    , decltype(_impl_.onsalebegintime_){}
    , decltype(_impl_.onsaleendtime_){}
    , decltype(_impl_.sellcountresetinterval_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.recommend_){}
    , decltype(_impl_.sort_){}
    , decltype(_impl_.malltabid_){}
    , decltype(_impl_.groupid_){}
    , decltype(_impl_.showbegintime_){}
    , decltype(_impl_.showendtime_){}
    , decltype(_impl_.bulkbuying_){}
    , decltype(_impl_.groupshowfirst_){}
    , decltype(_impl_.showresource_){}
    , decltype(_impl_.repeatedbuy_){}
    , decltype(_impl_.chargeprivatepara_){}
    , decltype(_impl_.sellcountstarttime_){}
    , decltype(_impl_.skips_interface_pc_){}
    , decltype(_impl_.moneyoffcount_){}
    , decltype(_impl_.moneyoff_){}
    , decltype(_impl_.recommend2nd_){}
    , decltype(_impl_.recommend3rd_){}
    , decltype(_impl_.zone_){}
    , decltype(_impl_.onsale2ndbegintime_){}
    , decltype(_impl_.onsale2ndendtime_){}
    , decltype(_impl_.moneyoff2ndcount_){}
    , decltype(_impl_.moneyoff2nd_){}
    , decltype(_impl_.recommendbegintime_){}
    , decltype(_impl_.recommendendtime_){}
    , decltype(_impl_.recommend2ndbegintime_){}
    , decltype(_impl_.recommend2ndendtime_){}
    , decltype(_impl_.disablededuction_){}
    , decltype(_impl_.consumesurl_){}
    , decltype(_impl_.consumeincrefresh_){}
    , decltype(_impl_.recommend3rdbegintime_){}
    , decltype(_impl_.recommend3rdendtime_){}
    , decltype(_impl_.series_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.videourl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.videourl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_videourl().empty()) {
    _this->_impl_.videourl_.Set(from._internal_videourl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.consumesurlweb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consumesurlweb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_consumesurlweb().empty()) {
    _this->_impl_.consumesurlweb_.Set(from._internal_consumesurlweb(), 
      _this->GetArenaForAllocation());
  }
  _impl_.consumesurlapp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consumesurlapp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_consumesurlapp().empty()) {
    _this->_impl_.consumesurlapp_.Set(from._internal_consumesurlapp(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.series_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.series_));
  // @@protoc_insertion_point(copy_constructor:msg.MallGoodsData)
}

inline void MallGoodsData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.contents_){arena}
    , decltype(_impl_.consumes_){arena}
    , decltype(_impl_.downloadlist_){arena}
    , decltype(_impl_.platformlist_){arena}
    , /*decltype(_impl_._platformlist_cached_byte_size_)*/{0}
    , decltype(_impl_.consumes2nd_){arena}
    , decltype(_impl_.excludedownload_){arena}
    , decltype(_impl_.countrylist_){arena}
    , decltype(_impl_.gifts_){arena}
    , decltype(_impl_.consumeinc_){arena}
    , decltype(_impl_.version_){}
    , decltype(_impl_.videourl_){}
    , decltype(_impl_.consumesurlweb_){}
    , decltype(_impl_.consumesurlapp_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.sellcountlimit_){0u}
    , decltype(_impl_.onsalebegintime_){int64_t{0}}
    , decltype(_impl_.onsaleendtime_){int64_t{0}}
    , decltype(_impl_.sellcountresetinterval_){0u}
    , decltype(_impl_.flag_){0}
    , decltype(_impl_.recommend_){0u}
    , decltype(_impl_.sort_){0u}
    , decltype(_impl_.malltabid_){0u}
    , decltype(_impl_.groupid_){0u}
    , decltype(_impl_.showbegintime_){int64_t{0}}
    , decltype(_impl_.showendtime_){int64_t{0}}
    , decltype(_impl_.bulkbuying_){false}
    , decltype(_impl_.groupshowfirst_){false}
    , decltype(_impl_.showresource_){false}
    , decltype(_impl_.repeatedbuy_){false}
    , decltype(_impl_.chargeprivatepara_){0u}
    , decltype(_impl_.sellcountstarttime_){int64_t{0}}
    , decltype(_impl_.skips_interface_pc_){0}
    , decltype(_impl_.moneyoffcount_){0u}
    , decltype(_impl_.moneyoff_){0u}
    , decltype(_impl_.recommend2nd_){0u}
    , decltype(_impl_.recommend3rd_){0u}
    , decltype(_impl_.zone_){0u}
    , decltype(_impl_.onsale2ndbegintime_){int64_t{0}}
    , decltype(_impl_.onsale2ndendtime_){int64_t{0}}
    , decltype(_impl_.moneyoff2ndcount_){0u}
    , decltype(_impl_.moneyoff2nd_){0u}
    , decltype(_impl_.recommendbegintime_){int64_t{0}}
    , decltype(_impl_.recommendendtime_){int64_t{0}}
    , decltype(_impl_.recommend2ndbegintime_){int64_t{0}}
    , decltype(_impl_.recommend2ndendtime_){int64_t{0}}
    , decltype(_impl_.disablededuction_){false}
    , decltype(_impl_.consumesurl_){false}
    , decltype(_impl_.consumeincrefresh_){0}
    , decltype(_impl_.recommend3rdbegintime_){int64_t{0}}
    , decltype(_impl_.recommend3rdendtime_){int64_t{0}}
    , decltype(_impl_.series_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.videourl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.videourl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.consumesurlweb_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consumesurlweb_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.consumesurlapp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.consumesurlapp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MallGoodsData::~MallGoodsData() {
  // @@protoc_insertion_point(destructor:msg.MallGoodsData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MallGoodsData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contents_.~RepeatedPtrField();
  _impl_.consumes_.~RepeatedPtrField();
  _impl_.downloadlist_.~RepeatedPtrField();
  _impl_.platformlist_.~RepeatedField();
  _impl_.consumes2nd_.~RepeatedPtrField();
  _impl_.excludedownload_.~RepeatedPtrField();
  _impl_.countrylist_.~RepeatedPtrField();
  _impl_.gifts_.~RepeatedPtrField();
  _impl_.consumeinc_.~RepeatedPtrField();
  _impl_.version_.Destroy();
  _impl_.videourl_.Destroy();
  _impl_.consumesurlweb_.Destroy();
  _impl_.consumesurlapp_.Destroy();
}

void MallGoodsData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MallGoodsData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MallGoodsData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contents_.Clear();
  _impl_.consumes_.Clear();
  _impl_.downloadlist_.Clear();
  _impl_.platformlist_.Clear();
  _impl_.consumes2nd_.Clear();
  _impl_.excludedownload_.Clear();
  _impl_.countrylist_.Clear();
  _impl_.gifts_.Clear();
  _impl_.consumeinc_.Clear();
  _impl_.version_.ClearToEmpty();
  _impl_.videourl_.ClearToEmpty();
  _impl_.consumesurlweb_.ClearToEmpty();
  _impl_.consumesurlapp_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.series_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.series_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MallGoodsData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Award Contents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Consume Consumes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_consumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 OnSaleBeginTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.onsalebegintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OnSaleEndTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.onsaleendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SellCountLimit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.sellcountlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SellCountResetInterval = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.sellcountresetinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.MALL_GOODS_FLAG Flag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flag(static_cast<::msg::MALL_GOODS_FLAG>(val));
        } else
          goto handle_unusual;
        continue;
      // bool BulkBuying = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.bulkbuying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Recommend = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.recommend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Sort = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.sort_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MallTabId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.malltabid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ShowBeginTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.showbegintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ShowEndTime = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.showendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 GroupId = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool GroupShowFirst = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.groupshowfirst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ShowResource = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.showresource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ChargePrivatePara = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.chargeprivatepara_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 SellCountStartTime = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.sellcountstarttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Skips_Interface_pc = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.skips_interface_pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MoneyOffCount = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.moneyoffcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MoneyOff = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.moneyoff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Recommend2Nd = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.recommend2nd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Recommend3Rd = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.recommend3rd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Zone = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.zone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool RepeatedBuy = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.repeatedbuy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string DownloadList = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_downloadlist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.MallGoodsData.DownloadList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.PLATFORMTYPE PlatformList = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_platformlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 240) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_platformlist(static_cast<::msg::PLATFORMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Consume Consumes2Nd = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_consumes2nd(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 OnSale2NdBeginTime = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.onsale2ndbegintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 OnSale2NdEndTime = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.onsale2ndendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MoneyOff2NdCount = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.moneyoff2ndcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MoneyOff2Nd = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.moneyoff2nd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Version = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.MallGoodsData.Version"));
        } else
          goto handle_unusual;
        continue;
      // repeated string ExcludeDownload = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_excludedownload();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.MallGoodsData.ExcludeDownload"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<298>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string CountryList = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_countrylist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.MallGoodsData.CountryList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<306>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool DisableDeduction = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.disablededuction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string VideoUrl = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_videourl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.MallGoodsData.VideoUrl"));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Award Gifts = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_gifts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<330>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 RecommendBeginTime = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.recommendbegintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 RecommendEndTime = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.recommendendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Recommend2NdBeginTime = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.recommend2ndbegintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Recommend2NdEndTime = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.recommend2ndendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Recommend3RdBeginTime = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.recommend3rdbegintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Recommend3RdEndTime = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.recommend3rdendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.ConsumeIncrease ConsumeInc = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_consumeinc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<394>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .msg.ConsumeIncreaseRefresh ConsumeIncRefresh = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_consumeincrefresh(static_cast<::msg::ConsumeIncreaseRefresh>(val));
        } else
          goto handle_unusual;
        continue;
      // bool ConsumesUrl = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.consumesurl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ConsumesUrlWeb = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_consumesurlweb();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.MallGoodsData.ConsumesUrlWeb"));
        } else
          goto handle_unusual;
        continue;
      // string ConsumesUrlApp = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_consumesurlapp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.MallGoodsData.ConsumesUrlApp"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Series = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.series_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MallGoodsData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MallGoodsData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .msg.Award Contents = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contents_size()); i < n; i++) {
    const auto& repfield = this->_internal_contents(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.Consume Consumes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_consumes_size()); i < n; i++) {
    const auto& repfield = this->_internal_consumes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 OnSaleBeginTime = 4;
  if (this->_internal_onsalebegintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_onsalebegintime(), target);
  }

  // int64 OnSaleEndTime = 5;
  if (this->_internal_onsaleendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_onsaleendtime(), target);
  }

  // uint32 SellCountLimit = 6;
  if (this->_internal_sellcountlimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_sellcountlimit(), target);
  }

  // uint32 SellCountResetInterval = 7;
  if (this->_internal_sellcountresetinterval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_sellcountresetinterval(), target);
  }

  // .msg.MALL_GOODS_FLAG Flag = 8;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_flag(), target);
  }

  // bool BulkBuying = 9;
  if (this->_internal_bulkbuying() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_bulkbuying(), target);
  }

  // uint32 Recommend = 10;
  if (this->_internal_recommend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_recommend(), target);
  }

  // uint32 Sort = 11;
  if (this->_internal_sort() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_sort(), target);
  }

  // uint32 MallTabId = 12;
  if (this->_internal_malltabid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_malltabid(), target);
  }

  // int64 ShowBeginTime = 15;
  if (this->_internal_showbegintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_showbegintime(), target);
  }

  // int64 ShowEndTime = 16;
  if (this->_internal_showendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_showendtime(), target);
  }

  // uint32 GroupId = 17;
  if (this->_internal_groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_groupid(), target);
  }

  // bool GroupShowFirst = 18;
  if (this->_internal_groupshowfirst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_groupshowfirst(), target);
  }

  // bool ShowResource = 19;
  if (this->_internal_showresource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_showresource(), target);
  }

  // uint32 ChargePrivatePara = 20;
  if (this->_internal_chargeprivatepara() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_chargeprivatepara(), target);
  }

  // int64 SellCountStartTime = 21;
  if (this->_internal_sellcountstarttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_sellcountstarttime(), target);
  }

  // int32 Skips_Interface_pc = 22;
  if (this->_internal_skips_interface_pc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_skips_interface_pc(), target);
  }

  // uint32 MoneyOffCount = 23;
  if (this->_internal_moneyoffcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_moneyoffcount(), target);
  }

  // uint32 MoneyOff = 24;
  if (this->_internal_moneyoff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_moneyoff(), target);
  }

  // uint32 Recommend2Nd = 25;
  if (this->_internal_recommend2nd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_recommend2nd(), target);
  }

  // uint32 Recommend3Rd = 26;
  if (this->_internal_recommend3rd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_recommend3rd(), target);
  }

  // uint32 Zone = 27;
  if (this->_internal_zone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_zone(), target);
  }

  // bool RepeatedBuy = 28;
  if (this->_internal_repeatedbuy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_repeatedbuy(), target);
  }

  // repeated string DownloadList = 29;
  for (int i = 0, n = this->_internal_downloadlist_size(); i < n; i++) {
    const auto& s = this->_internal_downloadlist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MallGoodsData.DownloadList");
    target = stream->WriteString(29, s, target);
  }

  // repeated .msg.PLATFORMTYPE PlatformList = 30;
  {
    int byte_size = _impl_._platformlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          30, _impl_.platformlist_, byte_size, target);
    }
  }

  // repeated .msg.Consume Consumes2Nd = 31;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_consumes2nd_size()); i < n; i++) {
    const auto& repfield = this->_internal_consumes2nd(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(31, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 OnSale2NdBeginTime = 32;
  if (this->_internal_onsale2ndbegintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(32, this->_internal_onsale2ndbegintime(), target);
  }

  // int64 OnSale2NdEndTime = 33;
  if (this->_internal_onsale2ndendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(33, this->_internal_onsale2ndendtime(), target);
  }

  // uint32 MoneyOff2NdCount = 34;
  if (this->_internal_moneyoff2ndcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(34, this->_internal_moneyoff2ndcount(), target);
  }

  // uint32 MoneyOff2Nd = 35;
  if (this->_internal_moneyoff2nd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(35, this->_internal_moneyoff2nd(), target);
  }

  // string Version = 36;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MallGoodsData.Version");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_version(), target);
  }

  // repeated string ExcludeDownload = 37;
  for (int i = 0, n = this->_internal_excludedownload_size(); i < n; i++) {
    const auto& s = this->_internal_excludedownload(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MallGoodsData.ExcludeDownload");
    target = stream->WriteString(37, s, target);
  }

  // repeated string CountryList = 38;
  for (int i = 0, n = this->_internal_countrylist_size(); i < n; i++) {
    const auto& s = this->_internal_countrylist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MallGoodsData.CountryList");
    target = stream->WriteString(38, s, target);
  }

  // bool DisableDeduction = 39;
  if (this->_internal_disablededuction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(39, this->_internal_disablededuction(), target);
  }

  // string VideoUrl = 40;
  if (!this->_internal_videourl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_videourl().data(), static_cast<int>(this->_internal_videourl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MallGoodsData.VideoUrl");
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_videourl(), target);
  }

  // repeated .msg.Award Gifts = 41;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gifts_size()); i < n; i++) {
    const auto& repfield = this->_internal_gifts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(41, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 RecommendBeginTime = 42;
  if (this->_internal_recommendbegintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(42, this->_internal_recommendbegintime(), target);
  }

  // int64 RecommendEndTime = 43;
  if (this->_internal_recommendendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(43, this->_internal_recommendendtime(), target);
  }

  // int64 Recommend2NdBeginTime = 44;
  if (this->_internal_recommend2ndbegintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(44, this->_internal_recommend2ndbegintime(), target);
  }

  // int64 Recommend2NdEndTime = 46;
  if (this->_internal_recommend2ndendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(46, this->_internal_recommend2ndendtime(), target);
  }

  // int64 Recommend3RdBeginTime = 47;
  if (this->_internal_recommend3rdbegintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(47, this->_internal_recommend3rdbegintime(), target);
  }

  // int64 Recommend3RdEndTime = 48;
  if (this->_internal_recommend3rdendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(48, this->_internal_recommend3rdendtime(), target);
  }

  // repeated .msg.ConsumeIncrease ConsumeInc = 49;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_consumeinc_size()); i < n; i++) {
    const auto& repfield = this->_internal_consumeinc(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(49, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .msg.ConsumeIncreaseRefresh ConsumeIncRefresh = 50;
  if (this->_internal_consumeincrefresh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      50, this->_internal_consumeincrefresh(), target);
  }

  // bool ConsumesUrl = 51;
  if (this->_internal_consumesurl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(51, this->_internal_consumesurl(), target);
  }

  // string ConsumesUrlWeb = 52;
  if (!this->_internal_consumesurlweb().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consumesurlweb().data(), static_cast<int>(this->_internal_consumesurlweb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MallGoodsData.ConsumesUrlWeb");
    target = stream->WriteStringMaybeAliased(
        52, this->_internal_consumesurlweb(), target);
  }

  // string ConsumesUrlApp = 53;
  if (!this->_internal_consumesurlapp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consumesurlapp().data(), static_cast<int>(this->_internal_consumesurlapp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MallGoodsData.ConsumesUrlApp");
    target = stream->WriteStringMaybeAliased(
        53, this->_internal_consumesurlapp(), target);
  }

  // uint32 Series = 54;
  if (this->_internal_series() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(54, this->_internal_series(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MallGoodsData)
  return target;
}

size_t MallGoodsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MallGoodsData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.Award Contents = 2;
  total_size += 1UL * this->_internal_contents_size();
  for (const auto& msg : this->_impl_.contents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.Consume Consumes = 3;
  total_size += 1UL * this->_internal_consumes_size();
  for (const auto& msg : this->_impl_.consumes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string DownloadList = 29;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.downloadlist_.size());
  for (int i = 0, n = _impl_.downloadlist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.downloadlist_.Get(i));
  }

  // repeated .msg.PLATFORMTYPE PlatformList = 30;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_platformlist_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_platformlist(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._platformlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .msg.Consume Consumes2Nd = 31;
  total_size += 2UL * this->_internal_consumes2nd_size();
  for (const auto& msg : this->_impl_.consumes2nd_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string ExcludeDownload = 37;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.excludedownload_.size());
  for (int i = 0, n = _impl_.excludedownload_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.excludedownload_.Get(i));
  }

  // repeated string CountryList = 38;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.countrylist_.size());
  for (int i = 0, n = _impl_.countrylist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.countrylist_.Get(i));
  }

  // repeated .msg.Award Gifts = 41;
  total_size += 2UL * this->_internal_gifts_size();
  for (const auto& msg : this->_impl_.gifts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.ConsumeIncrease ConsumeInc = 49;
  total_size += 2UL * this->_internal_consumeinc_size();
  for (const auto& msg : this->_impl_.consumeinc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Version = 36;
  if (!this->_internal_version().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string VideoUrl = 40;
  if (!this->_internal_videourl().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_videourl());
  }

  // string ConsumesUrlWeb = 52;
  if (!this->_internal_consumesurlweb().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consumesurlweb());
  }

  // string ConsumesUrlApp = 53;
  if (!this->_internal_consumesurlapp().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consumesurlapp());
  }

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 SellCountLimit = 6;
  if (this->_internal_sellcountlimit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sellcountlimit());
  }

  // int64 OnSaleBeginTime = 4;
  if (this->_internal_onsalebegintime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_onsalebegintime());
  }

  // int64 OnSaleEndTime = 5;
  if (this->_internal_onsaleendtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_onsaleendtime());
  }

  // uint32 SellCountResetInterval = 7;
  if (this->_internal_sellcountresetinterval() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sellcountresetinterval());
  }

  // .msg.MALL_GOODS_FLAG Flag = 8;
  if (this->_internal_flag() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_flag());
  }

  // uint32 Recommend = 10;
  if (this->_internal_recommend() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_recommend());
  }

  // uint32 Sort = 11;
  if (this->_internal_sort() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sort());
  }

  // uint32 MallTabId = 12;
  if (this->_internal_malltabid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_malltabid());
  }

  // uint32 GroupId = 17;
  if (this->_internal_groupid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_groupid());
  }

  // int64 ShowBeginTime = 15;
  if (this->_internal_showbegintime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_showbegintime());
  }

  // int64 ShowEndTime = 16;
  if (this->_internal_showendtime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_showendtime());
  }

  // bool BulkBuying = 9;
  if (this->_internal_bulkbuying() != 0) {
    total_size += 1 + 1;
  }

  // bool GroupShowFirst = 18;
  if (this->_internal_groupshowfirst() != 0) {
    total_size += 2 + 1;
  }

  // bool ShowResource = 19;
  if (this->_internal_showresource() != 0) {
    total_size += 2 + 1;
  }

  // bool RepeatedBuy = 28;
  if (this->_internal_repeatedbuy() != 0) {
    total_size += 2 + 1;
  }

  // uint32 ChargePrivatePara = 20;
  if (this->_internal_chargeprivatepara() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_chargeprivatepara());
  }

  // int64 SellCountStartTime = 21;
  if (this->_internal_sellcountstarttime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_sellcountstarttime());
  }

  // int32 Skips_Interface_pc = 22;
  if (this->_internal_skips_interface_pc() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_skips_interface_pc());
  }

  // uint32 MoneyOffCount = 23;
  if (this->_internal_moneyoffcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_moneyoffcount());
  }

  // uint32 MoneyOff = 24;
  if (this->_internal_moneyoff() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_moneyoff());
  }

  // uint32 Recommend2Nd = 25;
  if (this->_internal_recommend2nd() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_recommend2nd());
  }

  // uint32 Recommend3Rd = 26;
  if (this->_internal_recommend3rd() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_recommend3rd());
  }

  // uint32 Zone = 27;
  if (this->_internal_zone() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_zone());
  }

  // int64 OnSale2NdBeginTime = 32;
  if (this->_internal_onsale2ndbegintime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_onsale2ndbegintime());
  }

  // int64 OnSale2NdEndTime = 33;
  if (this->_internal_onsale2ndendtime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_onsale2ndendtime());
  }

  // uint32 MoneyOff2NdCount = 34;
  if (this->_internal_moneyoff2ndcount() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_moneyoff2ndcount());
  }

  // uint32 MoneyOff2Nd = 35;
  if (this->_internal_moneyoff2nd() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_moneyoff2nd());
  }

  // int64 RecommendBeginTime = 42;
  if (this->_internal_recommendbegintime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_recommendbegintime());
  }

  // int64 RecommendEndTime = 43;
  if (this->_internal_recommendendtime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_recommendendtime());
  }

  // int64 Recommend2NdBeginTime = 44;
  if (this->_internal_recommend2ndbegintime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_recommend2ndbegintime());
  }

  // int64 Recommend2NdEndTime = 46;
  if (this->_internal_recommend2ndendtime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_recommend2ndendtime());
  }

  // bool DisableDeduction = 39;
  if (this->_internal_disablededuction() != 0) {
    total_size += 2 + 1;
  }

  // bool ConsumesUrl = 51;
  if (this->_internal_consumesurl() != 0) {
    total_size += 2 + 1;
  }

  // .msg.ConsumeIncreaseRefresh ConsumeIncRefresh = 50;
  if (this->_internal_consumeincrefresh() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_consumeincrefresh());
  }

  // int64 Recommend3RdBeginTime = 47;
  if (this->_internal_recommend3rdbegintime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_recommend3rdbegintime());
  }

  // int64 Recommend3RdEndTime = 48;
  if (this->_internal_recommend3rdendtime() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_recommend3rdendtime());
  }

  // uint32 Series = 54;
  if (this->_internal_series() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_series());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MallGoodsData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MallGoodsData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MallGoodsData::GetClassData() const { return &_class_data_; }


void MallGoodsData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MallGoodsData*>(&to_msg);
  auto& from = static_cast<const MallGoodsData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.MallGoodsData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.contents_.MergeFrom(from._impl_.contents_);
  _this->_impl_.consumes_.MergeFrom(from._impl_.consumes_);
  _this->_impl_.downloadlist_.MergeFrom(from._impl_.downloadlist_);
  _this->_impl_.platformlist_.MergeFrom(from._impl_.platformlist_);
  _this->_impl_.consumes2nd_.MergeFrom(from._impl_.consumes2nd_);
  _this->_impl_.excludedownload_.MergeFrom(from._impl_.excludedownload_);
  _this->_impl_.countrylist_.MergeFrom(from._impl_.countrylist_);
  _this->_impl_.gifts_.MergeFrom(from._impl_.gifts_);
  _this->_impl_.consumeinc_.MergeFrom(from._impl_.consumeinc_);
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_videourl().empty()) {
    _this->_internal_set_videourl(from._internal_videourl());
  }
  if (!from._internal_consumesurlweb().empty()) {
    _this->_internal_set_consumesurlweb(from._internal_consumesurlweb());
  }
  if (!from._internal_consumesurlapp().empty()) {
    _this->_internal_set_consumesurlapp(from._internal_consumesurlapp());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_sellcountlimit() != 0) {
    _this->_internal_set_sellcountlimit(from._internal_sellcountlimit());
  }
  if (from._internal_onsalebegintime() != 0) {
    _this->_internal_set_onsalebegintime(from._internal_onsalebegintime());
  }
  if (from._internal_onsaleendtime() != 0) {
    _this->_internal_set_onsaleendtime(from._internal_onsaleendtime());
  }
  if (from._internal_sellcountresetinterval() != 0) {
    _this->_internal_set_sellcountresetinterval(from._internal_sellcountresetinterval());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_recommend() != 0) {
    _this->_internal_set_recommend(from._internal_recommend());
  }
  if (from._internal_sort() != 0) {
    _this->_internal_set_sort(from._internal_sort());
  }
  if (from._internal_malltabid() != 0) {
    _this->_internal_set_malltabid(from._internal_malltabid());
  }
  if (from._internal_groupid() != 0) {
    _this->_internal_set_groupid(from._internal_groupid());
  }
  if (from._internal_showbegintime() != 0) {
    _this->_internal_set_showbegintime(from._internal_showbegintime());
  }
  if (from._internal_showendtime() != 0) {
    _this->_internal_set_showendtime(from._internal_showendtime());
  }
  if (from._internal_bulkbuying() != 0) {
    _this->_internal_set_bulkbuying(from._internal_bulkbuying());
  }
  if (from._internal_groupshowfirst() != 0) {
    _this->_internal_set_groupshowfirst(from._internal_groupshowfirst());
  }
  if (from._internal_showresource() != 0) {
    _this->_internal_set_showresource(from._internal_showresource());
  }
  if (from._internal_repeatedbuy() != 0) {
    _this->_internal_set_repeatedbuy(from._internal_repeatedbuy());
  }
  if (from._internal_chargeprivatepara() != 0) {
    _this->_internal_set_chargeprivatepara(from._internal_chargeprivatepara());
  }
  if (from._internal_sellcountstarttime() != 0) {
    _this->_internal_set_sellcountstarttime(from._internal_sellcountstarttime());
  }
  if (from._internal_skips_interface_pc() != 0) {
    _this->_internal_set_skips_interface_pc(from._internal_skips_interface_pc());
  }
  if (from._internal_moneyoffcount() != 0) {
    _this->_internal_set_moneyoffcount(from._internal_moneyoffcount());
  }
  if (from._internal_moneyoff() != 0) {
    _this->_internal_set_moneyoff(from._internal_moneyoff());
  }
  if (from._internal_recommend2nd() != 0) {
    _this->_internal_set_recommend2nd(from._internal_recommend2nd());
  }
  if (from._internal_recommend3rd() != 0) {
    _this->_internal_set_recommend3rd(from._internal_recommend3rd());
  }
  if (from._internal_zone() != 0) {
    _this->_internal_set_zone(from._internal_zone());
  }
  if (from._internal_onsale2ndbegintime() != 0) {
    _this->_internal_set_onsale2ndbegintime(from._internal_onsale2ndbegintime());
  }
  if (from._internal_onsale2ndendtime() != 0) {
    _this->_internal_set_onsale2ndendtime(from._internal_onsale2ndendtime());
  }
  if (from._internal_moneyoff2ndcount() != 0) {
    _this->_internal_set_moneyoff2ndcount(from._internal_moneyoff2ndcount());
  }
  if (from._internal_moneyoff2nd() != 0) {
    _this->_internal_set_moneyoff2nd(from._internal_moneyoff2nd());
  }
  if (from._internal_recommendbegintime() != 0) {
    _this->_internal_set_recommendbegintime(from._internal_recommendbegintime());
  }
  if (from._internal_recommendendtime() != 0) {
    _this->_internal_set_recommendendtime(from._internal_recommendendtime());
  }
  if (from._internal_recommend2ndbegintime() != 0) {
    _this->_internal_set_recommend2ndbegintime(from._internal_recommend2ndbegintime());
  }
  if (from._internal_recommend2ndendtime() != 0) {
    _this->_internal_set_recommend2ndendtime(from._internal_recommend2ndendtime());
  }
  if (from._internal_disablededuction() != 0) {
    _this->_internal_set_disablededuction(from._internal_disablededuction());
  }
  if (from._internal_consumesurl() != 0) {
    _this->_internal_set_consumesurl(from._internal_consumesurl());
  }
  if (from._internal_consumeincrefresh() != 0) {
    _this->_internal_set_consumeincrefresh(from._internal_consumeincrefresh());
  }
  if (from._internal_recommend3rdbegintime() != 0) {
    _this->_internal_set_recommend3rdbegintime(from._internal_recommend3rdbegintime());
  }
  if (from._internal_recommend3rdendtime() != 0) {
    _this->_internal_set_recommend3rdendtime(from._internal_recommend3rdendtime());
  }
  if (from._internal_series() != 0) {
    _this->_internal_set_series(from._internal_series());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MallGoodsData::CopyFrom(const MallGoodsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MallGoodsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallGoodsData::IsInitialized() const {
  return true;
}

void MallGoodsData::InternalSwap(MallGoodsData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.contents_.InternalSwap(&other->_impl_.contents_);
  _impl_.consumes_.InternalSwap(&other->_impl_.consumes_);
  _impl_.downloadlist_.InternalSwap(&other->_impl_.downloadlist_);
  _impl_.platformlist_.InternalSwap(&other->_impl_.platformlist_);
  _impl_.consumes2nd_.InternalSwap(&other->_impl_.consumes2nd_);
  _impl_.excludedownload_.InternalSwap(&other->_impl_.excludedownload_);
  _impl_.countrylist_.InternalSwap(&other->_impl_.countrylist_);
  _impl_.gifts_.InternalSwap(&other->_impl_.gifts_);
  _impl_.consumeinc_.InternalSwap(&other->_impl_.consumeinc_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.videourl_, lhs_arena,
      &other->_impl_.videourl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.consumesurlweb_, lhs_arena,
      &other->_impl_.consumesurlweb_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.consumesurlapp_, lhs_arena,
      &other->_impl_.consumesurlapp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MallGoodsData, _impl_.series_)
      + sizeof(MallGoodsData::_impl_.series_)
      - PROTOBUF_FIELD_OFFSET(MallGoodsData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MallGoodsData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[175]);
}

// ===================================================================

class ConsumeIncrease::_Internal {
 public:
};

ConsumeIncrease::ConsumeIncrease(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ConsumeIncrease)
}
ConsumeIncrease::ConsumeIncrease(const ConsumeIncrease& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConsumeIncrease* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:msg.ConsumeIncrease)
}

inline void ConsumeIncrease::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConsumeIncrease::~ConsumeIncrease() {
  // @@protoc_insertion_point(destructor:msg.ConsumeIncrease)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConsumeIncrease::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConsumeIncrease::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConsumeIncrease::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ConsumeIncrease)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsumeIncrease::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConsumeIncrease::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ConsumeIncrease)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ConsumeIncrease)
  return target;
}

size_t ConsumeIncrease::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ConsumeIncrease)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Count = 1;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConsumeIncrease::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConsumeIncrease::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConsumeIncrease::GetClassData() const { return &_class_data_; }


void ConsumeIncrease::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConsumeIncrease*>(&to_msg);
  auto& from = static_cast<const ConsumeIncrease&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ConsumeIncrease)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConsumeIncrease::CopyFrom(const ConsumeIncrease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ConsumeIncrease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsumeIncrease::IsInitialized() const {
  return true;
}

void ConsumeIncrease::InternalSwap(ConsumeIncrease* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsumeIncrease::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[176]);
}

// ===================================================================

class CSDTMallGoodsData::_Internal {
 public:
  static const ::msg::MallGoodsData& mallgoods(const CSDTMallGoodsData* msg);
};

const ::msg::MallGoodsData&
CSDTMallGoodsData::_Internal::mallgoods(const CSDTMallGoodsData* msg) {
  return *msg->_impl_.mallgoods_;
}
CSDTMallGoodsData::CSDTMallGoodsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTMallGoodsData)
}
CSDTMallGoodsData::CSDTMallGoodsData(const CSDTMallGoodsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTMallGoodsData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mallgoods_){nullptr}
    , decltype(_impl_.lastresettime_){}
    , decltype(_impl_.buycount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mallgoods()) {
    _this->_impl_.mallgoods_ = new ::msg::MallGoodsData(*from._impl_.mallgoods_);
  }
  ::memcpy(&_impl_.lastresettime_, &from._impl_.lastresettime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.buycount_) -
    reinterpret_cast<char*>(&_impl_.lastresettime_)) + sizeof(_impl_.buycount_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTMallGoodsData)
}

inline void CSDTMallGoodsData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mallgoods_){nullptr}
    , decltype(_impl_.lastresettime_){int64_t{0}}
    , decltype(_impl_.buycount_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTMallGoodsData::~CSDTMallGoodsData() {
  // @@protoc_insertion_point(destructor:msg.CSDTMallGoodsData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTMallGoodsData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mallgoods_;
}

void CSDTMallGoodsData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTMallGoodsData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTMallGoodsData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.mallgoods_ != nullptr) {
    delete _impl_.mallgoods_;
  }
  _impl_.mallgoods_ = nullptr;
  ::memset(&_impl_.lastresettime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.buycount_) -
      reinterpret_cast<char*>(&_impl_.lastresettime_)) + sizeof(_impl_.buycount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTMallGoodsData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.MallGoodsData MallGoods = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mallgoods(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 BuyCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.buycount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastResetTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.lastresettime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTMallGoodsData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTMallGoodsData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.MallGoodsData MallGoods = 1;
  if (this->_internal_has_mallgoods()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mallgoods(this),
        _Internal::mallgoods(this).GetCachedSize(), target, stream);
  }

  // uint32 BuyCount = 2;
  if (this->_internal_buycount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_buycount(), target);
  }

  // int64 LastResetTime = 3;
  if (this->_internal_lastresettime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_lastresettime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTMallGoodsData)
  return target;
}

size_t CSDTMallGoodsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTMallGoodsData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.MallGoodsData MallGoods = 1;
  if (this->_internal_has_mallgoods()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mallgoods_);
  }

  // int64 LastResetTime = 3;
  if (this->_internal_lastresettime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastresettime());
  }

  // uint32 BuyCount = 2;
  if (this->_internal_buycount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_buycount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTMallGoodsData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTMallGoodsData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTMallGoodsData::GetClassData() const { return &_class_data_; }


void CSDTMallGoodsData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTMallGoodsData*>(&to_msg);
  auto& from = static_cast<const CSDTMallGoodsData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTMallGoodsData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mallgoods()) {
    _this->_internal_mutable_mallgoods()->::msg::MallGoodsData::MergeFrom(
        from._internal_mallgoods());
  }
  if (from._internal_lastresettime() != 0) {
    _this->_internal_set_lastresettime(from._internal_lastresettime());
  }
  if (from._internal_buycount() != 0) {
    _this->_internal_set_buycount(from._internal_buycount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTMallGoodsData::CopyFrom(const CSDTMallGoodsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTMallGoodsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTMallGoodsData::IsInitialized() const {
  return true;
}

void CSDTMallGoodsData::InternalSwap(CSDTMallGoodsData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTMallGoodsData, _impl_.buycount_)
      + sizeof(CSDTMallGoodsData::_impl_.buycount_)
      - PROTOBUF_FIELD_OFFSET(CSDTMallGoodsData, _impl_.mallgoods_)>(
          reinterpret_cast<char*>(&_impl_.mallgoods_),
          reinterpret_cast<char*>(&other->_impl_.mallgoods_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTMallGoodsData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[177]);
}

// ===================================================================

class CSDTMallGoods::_Internal {
 public:
};

CSDTMallGoods::CSDTMallGoods(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTMallGoods)
}
CSDTMallGoods::CSDTMallGoods(const CSDTMallGoods& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTMallGoods* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mallgoods_){from._impl_.mallgoods_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSDTMallGoods)
}

inline void CSDTMallGoods::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mallgoods_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTMallGoods::~CSDTMallGoods() {
  // @@protoc_insertion_point(destructor:msg.CSDTMallGoods)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTMallGoods::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mallgoods_.~RepeatedPtrField();
}

void CSDTMallGoods::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTMallGoods::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTMallGoods)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mallgoods_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTMallGoods::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.CSDTMallGoodsData MallGoods = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mallgoods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTMallGoods::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTMallGoods)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.CSDTMallGoodsData MallGoods = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mallgoods_size()); i < n; i++) {
    const auto& repfield = this->_internal_mallgoods(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTMallGoods)
  return target;
}

size_t CSDTMallGoods::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTMallGoods)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTMallGoodsData MallGoods = 1;
  total_size += 1UL * this->_internal_mallgoods_size();
  for (const auto& msg : this->_impl_.mallgoods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTMallGoods::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTMallGoods::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTMallGoods::GetClassData() const { return &_class_data_; }


void CSDTMallGoods::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTMallGoods*>(&to_msg);
  auto& from = static_cast<const CSDTMallGoods&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTMallGoods)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mallgoods_.MergeFrom(from._impl_.mallgoods_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTMallGoods::CopyFrom(const CSDTMallGoods& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTMallGoods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTMallGoods::IsInitialized() const {
  return true;
}

void CSDTMallGoods::InternalSwap(CSDTMallGoods* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mallgoods_.InternalSwap(&other->_impl_.mallgoods_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTMallGoods::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[178]);
}

// ===================================================================

class CSDTMallBuyCountData::_Internal {
 public:
};

CSDTMallBuyCountData::CSDTMallBuyCountData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTMallBuyCountData)
}
CSDTMallBuyCountData::CSDTMallBuyCountData(const CSDTMallBuyCountData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTMallBuyCountData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.buycount_){}
    , decltype(_impl_.lastresettime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lastresettime_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.lastresettime_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTMallBuyCountData)
}

inline void CSDTMallBuyCountData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.buycount_){0u}
    , decltype(_impl_.lastresettime_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTMallBuyCountData::~CSDTMallBuyCountData() {
  // @@protoc_insertion_point(destructor:msg.CSDTMallBuyCountData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTMallBuyCountData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDTMallBuyCountData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTMallBuyCountData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTMallBuyCountData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lastresettime_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.lastresettime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTMallBuyCountData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 BuyCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.buycount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 LastResetTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.lastresettime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTMallBuyCountData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTMallBuyCountData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 BuyCount = 2;
  if (this->_internal_buycount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_buycount(), target);
  }

  // int64 LastResetTime = 3;
  if (this->_internal_lastresettime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_lastresettime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTMallBuyCountData)
  return target;
}

size_t CSDTMallBuyCountData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTMallBuyCountData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 BuyCount = 2;
  if (this->_internal_buycount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_buycount());
  }

  // int64 LastResetTime = 3;
  if (this->_internal_lastresettime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastresettime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTMallBuyCountData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTMallBuyCountData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTMallBuyCountData::GetClassData() const { return &_class_data_; }


void CSDTMallBuyCountData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTMallBuyCountData*>(&to_msg);
  auto& from = static_cast<const CSDTMallBuyCountData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTMallBuyCountData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_buycount() != 0) {
    _this->_internal_set_buycount(from._internal_buycount());
  }
  if (from._internal_lastresettime() != 0) {
    _this->_internal_set_lastresettime(from._internal_lastresettime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTMallBuyCountData::CopyFrom(const CSDTMallBuyCountData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTMallBuyCountData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTMallBuyCountData::IsInitialized() const {
  return true;
}

void CSDTMallBuyCountData::InternalSwap(CSDTMallBuyCountData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTMallBuyCountData, _impl_.lastresettime_)
      + sizeof(CSDTMallBuyCountData::_impl_.lastresettime_)
      - PROTOBUF_FIELD_OFFSET(CSDTMallBuyCountData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTMallBuyCountData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[179]);
}

// ===================================================================

class CSDTMallBuyCount::_Internal {
 public:
};

CSDTMallBuyCount::CSDTMallBuyCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTMallBuyCount)
}
CSDTMallBuyCount::CSDTMallBuyCount(const CSDTMallBuyCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTMallBuyCount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mallgoods_){from._impl_.mallgoods_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSDTMallBuyCount)
}

inline void CSDTMallBuyCount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mallgoods_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTMallBuyCount::~CSDTMallBuyCount() {
  // @@protoc_insertion_point(destructor:msg.CSDTMallBuyCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTMallBuyCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mallgoods_.~RepeatedPtrField();
}

void CSDTMallBuyCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTMallBuyCount::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTMallBuyCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mallgoods_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTMallBuyCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.CSDTMallBuyCountData MallGoods = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mallgoods(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTMallBuyCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTMallBuyCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.CSDTMallBuyCountData MallGoods = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mallgoods_size()); i < n; i++) {
    const auto& repfield = this->_internal_mallgoods(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTMallBuyCount)
  return target;
}

size_t CSDTMallBuyCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTMallBuyCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTMallBuyCountData MallGoods = 1;
  total_size += 1UL * this->_internal_mallgoods_size();
  for (const auto& msg : this->_impl_.mallgoods_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTMallBuyCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTMallBuyCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTMallBuyCount::GetClassData() const { return &_class_data_; }


void CSDTMallBuyCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTMallBuyCount*>(&to_msg);
  auto& from = static_cast<const CSDTMallBuyCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTMallBuyCount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mallgoods_.MergeFrom(from._impl_.mallgoods_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTMallBuyCount::CopyFrom(const CSDTMallBuyCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTMallBuyCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTMallBuyCount::IsInitialized() const {
  return true;
}

void CSDTMallBuyCount::InternalSwap(CSDTMallBuyCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mallgoods_.InternalSwap(&other->_impl_.mallgoods_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTMallBuyCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[180]);
}

// ===================================================================

class MallNoticeData::_Internal {
 public:
};

MallNoticeData::MallNoticeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.MallNoticeData)
}
MallNoticeData::MallNoticeData(const MallNoticeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MallNoticeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.picname_){}
    , decltype(_impl_.skipname_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.showbegintime_){}
    , decltype(_impl_.showendtime_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.sortid_){}
    , decltype(_impl_.skiptype_){}
    , decltype(_impl_.skiptap_){}
    , decltype(_impl_.mallgoodsid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.picname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.picname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_picname().empty()) {
    _this->_impl_.picname_.Set(from._internal_picname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.skipname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skipname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_skipname().empty()) {
    _this->_impl_.skipname_.Set(from._internal_skipname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.showbegintime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.showbegintime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_showbegintime().empty()) {
    _this->_impl_.showbegintime_.Set(from._internal_showbegintime(), 
      _this->GetArenaForAllocation());
  }
  _impl_.showendtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.showendtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_showendtime().empty()) {
    _this->_impl_.showendtime_.Set(from._internal_showendtime(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mallgoodsid_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.mallgoodsid_));
  // @@protoc_insertion_point(copy_constructor:msg.MallNoticeData)
}

inline void MallNoticeData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.picname_){}
    , decltype(_impl_.skipname_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.showbegintime_){}
    , decltype(_impl_.showendtime_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.sortid_){0u}
    , decltype(_impl_.skiptype_){0}
    , decltype(_impl_.skiptap_){0u}
    , decltype(_impl_.mallgoodsid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.picname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.picname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.skipname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skipname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.showbegintime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.showbegintime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.showendtime_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.showendtime_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MallNoticeData::~MallNoticeData() {
  // @@protoc_insertion_point(destructor:msg.MallNoticeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MallNoticeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.picname_.Destroy();
  _impl_.skipname_.Destroy();
  _impl_.country_.Destroy();
  _impl_.showbegintime_.Destroy();
  _impl_.showendtime_.Destroy();
}

void MallNoticeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MallNoticeData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MallNoticeData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.picname_.ClearToEmpty();
  _impl_.skipname_.ClearToEmpty();
  _impl_.country_.ClearToEmpty();
  _impl_.showbegintime_.ClearToEmpty();
  _impl_.showendtime_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mallgoodsid_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.mallgoodsid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MallNoticeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string PicName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_picname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.MallNoticeData.PicName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 SortId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sortid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.SKIPTYPE SkipType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_skiptype(static_cast<::msg::SKIPTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string SkipName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_skipname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.MallNoticeData.SkipName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 SkipTap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.skiptap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MallGoodsId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.mallgoodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Country = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.MallNoticeData.Country"));
        } else
          goto handle_unusual;
        continue;
      // string ShowBeginTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_showbegintime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.MallNoticeData.ShowBeginTime"));
        } else
          goto handle_unusual;
        continue;
      // string ShowEndTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_showendtime();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.MallNoticeData.ShowEndTime"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MallNoticeData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MallNoticeData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string PicName = 2;
  if (!this->_internal_picname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_picname().data(), static_cast<int>(this->_internal_picname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MallNoticeData.PicName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_picname(), target);
  }

  // uint32 SortId = 3;
  if (this->_internal_sortid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sortid(), target);
  }

  // .msg.SKIPTYPE SkipType = 4;
  if (this->_internal_skiptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_skiptype(), target);
  }

  // string SkipName = 5;
  if (!this->_internal_skipname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skipname().data(), static_cast<int>(this->_internal_skipname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MallNoticeData.SkipName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_skipname(), target);
  }

  // uint32 SkipTap = 6;
  if (this->_internal_skiptap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_skiptap(), target);
  }

  // uint32 MallGoodsId = 7;
  if (this->_internal_mallgoodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_mallgoodsid(), target);
  }

  // string Country = 8;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MallNoticeData.Country");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_country(), target);
  }

  // string ShowBeginTime = 9;
  if (!this->_internal_showbegintime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_showbegintime().data(), static_cast<int>(this->_internal_showbegintime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MallNoticeData.ShowBeginTime");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_showbegintime(), target);
  }

  // string ShowEndTime = 10;
  if (!this->_internal_showendtime().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_showendtime().data(), static_cast<int>(this->_internal_showendtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MallNoticeData.ShowEndTime");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_showendtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MallNoticeData)
  return target;
}

size_t MallNoticeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MallNoticeData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string PicName = 2;
  if (!this->_internal_picname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_picname());
  }

  // string SkipName = 5;
  if (!this->_internal_skipname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skipname());
  }

  // string Country = 8;
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string ShowBeginTime = 9;
  if (!this->_internal_showbegintime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_showbegintime());
  }

  // string ShowEndTime = 10;
  if (!this->_internal_showendtime().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_showendtime());
  }

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 SortId = 3;
  if (this->_internal_sortid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sortid());
  }

  // .msg.SKIPTYPE SkipType = 4;
  if (this->_internal_skiptype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_skiptype());
  }

  // uint32 SkipTap = 6;
  if (this->_internal_skiptap() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skiptap());
  }

  // uint32 MallGoodsId = 7;
  if (this->_internal_mallgoodsid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mallgoodsid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MallNoticeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MallNoticeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MallNoticeData::GetClassData() const { return &_class_data_; }


void MallNoticeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MallNoticeData*>(&to_msg);
  auto& from = static_cast<const MallNoticeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.MallNoticeData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_picname().empty()) {
    _this->_internal_set_picname(from._internal_picname());
  }
  if (!from._internal_skipname().empty()) {
    _this->_internal_set_skipname(from._internal_skipname());
  }
  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (!from._internal_showbegintime().empty()) {
    _this->_internal_set_showbegintime(from._internal_showbegintime());
  }
  if (!from._internal_showendtime().empty()) {
    _this->_internal_set_showendtime(from._internal_showendtime());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_sortid() != 0) {
    _this->_internal_set_sortid(from._internal_sortid());
  }
  if (from._internal_skiptype() != 0) {
    _this->_internal_set_skiptype(from._internal_skiptype());
  }
  if (from._internal_skiptap() != 0) {
    _this->_internal_set_skiptap(from._internal_skiptap());
  }
  if (from._internal_mallgoodsid() != 0) {
    _this->_internal_set_mallgoodsid(from._internal_mallgoodsid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MallNoticeData::CopyFrom(const MallNoticeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MallNoticeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallNoticeData::IsInitialized() const {
  return true;
}

void MallNoticeData::InternalSwap(MallNoticeData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.picname_, lhs_arena,
      &other->_impl_.picname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.skipname_, lhs_arena,
      &other->_impl_.skipname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.showbegintime_, lhs_arena,
      &other->_impl_.showbegintime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.showendtime_, lhs_arena,
      &other->_impl_.showendtime_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MallNoticeData, _impl_.mallgoodsid_)
      + sizeof(MallNoticeData::_impl_.mallgoodsid_)
      - PROTOBUF_FIELD_OFFSET(MallNoticeData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MallNoticeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[181]);
}

// ===================================================================

class CSDTCommonRandList::_Internal {
 public:
};

CSDTCommonRandList::CSDTCommonRandList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTCommonRandList)
}
CSDTCommonRandList::CSDTCommonRandList(const CSDTCommonRandList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTCommonRandList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , /*decltype(_impl_._list_cached_byte_size_)*/{0}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:msg.CSDTCommonRandList)
}

inline void CSDTCommonRandList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , /*decltype(_impl_._list_cached_byte_size_)*/{0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTCommonRandList::~CSDTCommonRandList() {
  // @@protoc_insertion_point(destructor:msg.CSDTCommonRandList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTCommonRandList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedField();
}

void CSDTCommonRandList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTCommonRandList::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTCommonRandList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTCommonRandList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.ITEMTYPE Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::ITEMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 List = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTCommonRandList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTCommonRandList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.ITEMTYPE Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated uint32 List = 2;
  {
    int byte_size = _impl_._list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTCommonRandList)
  return target;
}

size_t CSDTCommonRandList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTCommonRandList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 List = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .msg.ITEMTYPE Type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTCommonRandList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTCommonRandList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTCommonRandList::GetClassData() const { return &_class_data_; }


void CSDTCommonRandList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTCommonRandList*>(&to_msg);
  auto& from = static_cast<const CSDTCommonRandList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTCommonRandList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTCommonRandList::CopyFrom(const CSDTCommonRandList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTCommonRandList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTCommonRandList::IsInitialized() const {
  return true;
}

void CSDTCommonRandList::InternalSwap(CSDTCommonRandList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTCommonRandList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[182]);
}

// ===================================================================

class Sign::_Internal {
 public:
};

Sign::Sign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.Sign)
}
Sign::Sign(const Sign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Sign* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.day_){}
    , decltype(_impl_.awardday_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.day_, &from._impl_.day_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.awardday_) -
    reinterpret_cast<char*>(&_impl_.day_)) + sizeof(_impl_.awardday_));
  // @@protoc_insertion_point(copy_constructor:msg.Sign)
}

inline void Sign::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.day_){0u}
    , decltype(_impl_.awardday_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Sign::~Sign() {
  // @@protoc_insertion_point(destructor:msg.Sign)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Sign::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Sign::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Sign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.awardday_) -
      reinterpret_cast<char*>(&_impl_.day_)) + sizeof(_impl_.awardday_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sign::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Day = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 AwardDay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.awardday_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Sign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Day = 1;
  if (this->_internal_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_day(), target);
  }

  // uint32 AwardDay = 2;
  if (this->_internal_awardday() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_awardday(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Sign)
  return target;
}

size_t Sign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Sign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Day = 1;
  if (this->_internal_day() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_day());
  }

  // uint32 AwardDay = 2;
  if (this->_internal_awardday() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_awardday());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Sign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sign::GetClassData() const { return &_class_data_; }


void Sign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Sign*>(&to_msg);
  auto& from = static_cast<const Sign&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Sign)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_day() != 0) {
    _this->_internal_set_day(from._internal_day());
  }
  if (from._internal_awardday() != 0) {
    _this->_internal_set_awardday(from._internal_awardday());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sign::CopyFrom(const Sign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Sign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sign::IsInitialized() const {
  return true;
}

void Sign::InternalSwap(Sign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sign, _impl_.awardday_)
      + sizeof(Sign::_impl_.awardday_)
      - PROTOBUF_FIELD_OFFSET(Sign, _impl_.day_)>(
          reinterpret_cast<char*>(&_impl_.day_),
          reinterpret_cast<char*>(&other->_impl_.day_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sign::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[183]);
}

// ===================================================================

class CSDTSignData::_Internal {
 public:
};

CSDTSignData::CSDTSignData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTSignData)
}
CSDTSignData::CSDTSignData(const CSDTSignData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTSignData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signlist_){from._impl_.signlist_}
    , decltype(_impl_.shareaward_){from._impl_.shareaward_}
    , /*decltype(_impl_._shareaward_cached_byte_size_)*/{0}
    , decltype(_impl_.fit_){from._impl_.fit_}
    , /*decltype(_impl_._fit_cached_byte_size_)*/{0}
    , decltype(_impl_.avoid_){from._impl_.avoid_}
    , /*decltype(_impl_._avoid_cached_byte_size_)*/{0}
    , decltype(_impl_.todayawardday_){}
    , decltype(_impl_.sharecount_){}
    , decltype(_impl_.luckychess_){}
    , decltype(_impl_.fortuneproverb_){}
    , decltype(_impl_.fitavoid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.todayawardday_, &from._impl_.todayawardday_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fitavoid_) -
    reinterpret_cast<char*>(&_impl_.todayawardday_)) + sizeof(_impl_.fitavoid_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTSignData)
}

inline void CSDTSignData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.signlist_){arena}
    , decltype(_impl_.shareaward_){arena}
    , /*decltype(_impl_._shareaward_cached_byte_size_)*/{0}
    , decltype(_impl_.fit_){arena}
    , /*decltype(_impl_._fit_cached_byte_size_)*/{0}
    , decltype(_impl_.avoid_){arena}
    , /*decltype(_impl_._avoid_cached_byte_size_)*/{0}
    , decltype(_impl_.todayawardday_){0u}
    , decltype(_impl_.sharecount_){0u}
    , decltype(_impl_.luckychess_){0u}
    , decltype(_impl_.fortuneproverb_){0u}
    , decltype(_impl_.fitavoid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTSignData::~CSDTSignData() {
  // @@protoc_insertion_point(destructor:msg.CSDTSignData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTSignData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signlist_.~RepeatedPtrField();
  _impl_.shareaward_.~RepeatedField();
  _impl_.fit_.~RepeatedField();
  _impl_.avoid_.~RepeatedField();
}

void CSDTSignData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTSignData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTSignData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signlist_.Clear();
  _impl_.shareaward_.Clear();
  _impl_.fit_.Clear();
  _impl_.avoid_.Clear();
  ::memset(&_impl_.todayawardday_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fitavoid_) -
      reinterpret_cast<char*>(&_impl_.todayawardday_)) + sizeof(_impl_.fitavoid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTSignData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.Sign SignList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 TodayAwardDay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.todayawardday_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ShareCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sharecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ShareAward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_shareaward(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_shareaward(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 Fit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_fit(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_fit(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 Avoid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_avoid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_avoid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 LuckyChess = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.luckychess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 FortuneProverb = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.fortuneproverb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 FitAvoid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.fitavoid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTSignData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTSignData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.Sign SignList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_signlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 TodayAwardDay = 2;
  if (this->_internal_todayawardday() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_todayawardday(), target);
  }

  // uint32 ShareCount = 3;
  if (this->_internal_sharecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sharecount(), target);
  }

  // repeated uint32 ShareAward = 4;
  {
    int byte_size = _impl_._shareaward_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_shareaward(), byte_size, target);
    }
  }

  // repeated uint32 Fit = 5;
  {
    int byte_size = _impl_._fit_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_fit(), byte_size, target);
    }
  }

  // repeated uint32 Avoid = 6;
  {
    int byte_size = _impl_._avoid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_avoid(), byte_size, target);
    }
  }

  // uint32 LuckyChess = 7;
  if (this->_internal_luckychess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_luckychess(), target);
  }

  // uint32 FortuneProverb = 8;
  if (this->_internal_fortuneproverb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_fortuneproverb(), target);
  }

  // uint32 FitAvoid = 9;
  if (this->_internal_fitavoid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_fitavoid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTSignData)
  return target;
}

size_t CSDTSignData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTSignData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.Sign SignList = 1;
  total_size += 1UL * this->_internal_signlist_size();
  for (const auto& msg : this->_impl_.signlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 ShareAward = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.shareaward_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._shareaward_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 Fit = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.fit_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._fit_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 Avoid = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.avoid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._avoid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 TodayAwardDay = 2;
  if (this->_internal_todayawardday() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_todayawardday());
  }

  // uint32 ShareCount = 3;
  if (this->_internal_sharecount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sharecount());
  }

  // uint32 LuckyChess = 7;
  if (this->_internal_luckychess() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_luckychess());
  }

  // uint32 FortuneProverb = 8;
  if (this->_internal_fortuneproverb() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fortuneproverb());
  }

  // uint32 FitAvoid = 9;
  if (this->_internal_fitavoid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fitavoid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTSignData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTSignData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTSignData::GetClassData() const { return &_class_data_; }


void CSDTSignData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTSignData*>(&to_msg);
  auto& from = static_cast<const CSDTSignData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTSignData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.signlist_.MergeFrom(from._impl_.signlist_);
  _this->_impl_.shareaward_.MergeFrom(from._impl_.shareaward_);
  _this->_impl_.fit_.MergeFrom(from._impl_.fit_);
  _this->_impl_.avoid_.MergeFrom(from._impl_.avoid_);
  if (from._internal_todayawardday() != 0) {
    _this->_internal_set_todayawardday(from._internal_todayawardday());
  }
  if (from._internal_sharecount() != 0) {
    _this->_internal_set_sharecount(from._internal_sharecount());
  }
  if (from._internal_luckychess() != 0) {
    _this->_internal_set_luckychess(from._internal_luckychess());
  }
  if (from._internal_fortuneproverb() != 0) {
    _this->_internal_set_fortuneproverb(from._internal_fortuneproverb());
  }
  if (from._internal_fitavoid() != 0) {
    _this->_internal_set_fitavoid(from._internal_fitavoid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTSignData::CopyFrom(const CSDTSignData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTSignData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTSignData::IsInitialized() const {
  return true;
}

void CSDTSignData::InternalSwap(CSDTSignData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signlist_.InternalSwap(&other->_impl_.signlist_);
  _impl_.shareaward_.InternalSwap(&other->_impl_.shareaward_);
  _impl_.fit_.InternalSwap(&other->_impl_.fit_);
  _impl_.avoid_.InternalSwap(&other->_impl_.avoid_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTSignData, _impl_.fitavoid_)
      + sizeof(CSDTSignData::_impl_.fitavoid_)
      - PROTOBUF_FIELD_OFFSET(CSDTSignData, _impl_.todayawardday_)>(
          reinterpret_cast<char*>(&_impl_.todayawardday_),
          reinterpret_cast<char*>(&other->_impl_.todayawardday_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTSignData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[184]);
}

// ===================================================================

class MatchTeamData::_Internal {
 public:
};

MatchTeamData::MatchTeamData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.MatchTeamData)
}
MatchTeamData::MatchTeamData(const MatchTeamData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatchTeamData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.endtime_){}
    , decltype(_impl_.startteamid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.startteamid_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.startteamid_));
  // @@protoc_insertion_point(copy_constructor:msg.MatchTeamData)
}

inline void MatchTeamData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , decltype(_impl_.count_){0}
    , decltype(_impl_.endtime_){int64_t{0}}
    , decltype(_impl_.startteamid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MatchTeamData::~MatchTeamData() {
  // @@protoc_insertion_point(destructor:msg.MatchTeamData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchTeamData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MatchTeamData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatchTeamData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MatchTeamData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.startteamid_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.startteamid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchTeamData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 StartTeamId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.startteamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 EndTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchTeamData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MatchTeamData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 Count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // uint32 StartTeamId = 3;
  if (this->_internal_startteamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_startteamid(), target);
  }

  // int64 EndTime = 4;
  if (this->_internal_endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_endtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MatchTeamData)
  return target;
}

size_t MatchTeamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MatchTeamData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 Count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  // int64 EndTime = 4;
  if (this->_internal_endtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_endtime());
  }

  // uint32 StartTeamId = 3;
  if (this->_internal_startteamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_startteamid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchTeamData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatchTeamData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchTeamData::GetClassData() const { return &_class_data_; }


void MatchTeamData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatchTeamData*>(&to_msg);
  auto& from = static_cast<const MatchTeamData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.MatchTeamData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_endtime() != 0) {
    _this->_internal_set_endtime(from._internal_endtime());
  }
  if (from._internal_startteamid() != 0) {
    _this->_internal_set_startteamid(from._internal_startteamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchTeamData::CopyFrom(const MatchTeamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MatchTeamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchTeamData::IsInitialized() const {
  return true;
}

void MatchTeamData::InternalSwap(MatchTeamData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchTeamData, _impl_.startteamid_)
      + sizeof(MatchTeamData::_impl_.startteamid_)
      - PROTOBUF_FIELD_OFFSET(MatchTeamData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchTeamData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[185]);
}

// ===================================================================

class CSDTRecommendPlayer::_Internal {
 public:
};

CSDTRecommendPlayer::CSDTRecommendPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTRecommendPlayer)
}
CSDTRecommendPlayer::CSDTRecommendPlayer(const CSDTRecommendPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTRecommendPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.cup_){}
    , decltype(_impl_.headpic_){}
    , decltype(_impl_.scene_){}
    , decltype(_impl_.chessplayer_){}
    , decltype(_impl_.recommendscore_){}
    , decltype(_impl_.headpicframe_){}
    , decltype(_impl_.observeprivilege_){}
    , decltype(_impl_.platformtype_){}
    , decltype(_impl_.ps4only_){}
    , decltype(_impl_.restricttype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cup_, &from._impl_.cup_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.restricttype_) -
    reinterpret_cast<char*>(&_impl_.cup_)) + sizeof(_impl_.restricttype_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTRecommendPlayer)
}

inline void CSDTRecommendPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.cup_){0u}
    , decltype(_impl_.headpic_){0u}
    , decltype(_impl_.scene_){0u}
    , decltype(_impl_.chessplayer_){0u}
    , decltype(_impl_.recommendscore_){0u}
    , decltype(_impl_.headpicframe_){0u}
    , decltype(_impl_.observeprivilege_){0}
    , decltype(_impl_.platformtype_){0}
    , decltype(_impl_.ps4only_){false}
    , decltype(_impl_.restricttype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTRecommendPlayer::~CSDTRecommendPlayer() {
  // @@protoc_insertion_point(destructor:msg.CSDTRecommendPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTRecommendPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
}

void CSDTRecommendPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTRecommendPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTRecommendPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.cup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.restricttype_) -
      reinterpret_cast<char*>(&_impl_.cup_)) + sizeof(_impl_.restricttype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTRecommendPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTRecommendPlayer.Id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Cup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.headpic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTRecommendPlayer.Name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Scene = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.scene_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ChessPlayer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.chessplayer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 RecommendScore = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.recommendscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPicFrame = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.headpicframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.OBSERVEPRIVILEGE ObservePrivilege = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_observeprivilege(static_cast<::msg::OBSERVEPRIVILEGE>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.PLATFORMTYPE PlatFormType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platformtype(static_cast<::msg::PLATFORMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // bool Ps4Only = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.ps4only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.UserRestrictType RestrictType = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_restricttype(static_cast<::msg::UserRestrictType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTRecommendPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTRecommendPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTRecommendPlayer.Id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 Cup = 2;
  if (this->_internal_cup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cup(), target);
  }

  // uint32 HeadPic = 3;
  if (this->_internal_headpic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_headpic(), target);
  }

  // string Name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTRecommendPlayer.Name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // uint32 Scene = 5;
  if (this->_internal_scene() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_scene(), target);
  }

  // uint32 ChessPlayer = 6;
  if (this->_internal_chessplayer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_chessplayer(), target);
  }

  // uint32 RecommendScore = 7;
  if (this->_internal_recommendscore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_recommendscore(), target);
  }

  // uint32 HeadPicFrame = 8;
  if (this->_internal_headpicframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_headpicframe(), target);
  }

  // .msg.OBSERVEPRIVILEGE ObservePrivilege = 9;
  if (this->_internal_observeprivilege() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_observeprivilege(), target);
  }

  // .msg.PLATFORMTYPE PlatFormType = 10;
  if (this->_internal_platformtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_platformtype(), target);
  }

  // bool Ps4Only = 11;
  if (this->_internal_ps4only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_ps4only(), target);
  }

  // .msg.UserRestrictType RestrictType = 12;
  if (this->_internal_restricttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_restricttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTRecommendPlayer)
  return target;
}

size_t CSDTRecommendPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTRecommendPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string Name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 Cup = 2;
  if (this->_internal_cup() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cup());
  }

  // uint32 HeadPic = 3;
  if (this->_internal_headpic() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpic());
  }

  // uint32 Scene = 5;
  if (this->_internal_scene() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_scene());
  }

  // uint32 ChessPlayer = 6;
  if (this->_internal_chessplayer() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chessplayer());
  }

  // uint32 RecommendScore = 7;
  if (this->_internal_recommendscore() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_recommendscore());
  }

  // uint32 HeadPicFrame = 8;
  if (this->_internal_headpicframe() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpicframe());
  }

  // .msg.OBSERVEPRIVILEGE ObservePrivilege = 9;
  if (this->_internal_observeprivilege() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_observeprivilege());
  }

  // .msg.PLATFORMTYPE PlatFormType = 10;
  if (this->_internal_platformtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_platformtype());
  }

  // bool Ps4Only = 11;
  if (this->_internal_ps4only() != 0) {
    total_size += 1 + 1;
  }

  // .msg.UserRestrictType RestrictType = 12;
  if (this->_internal_restricttype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_restricttype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTRecommendPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTRecommendPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTRecommendPlayer::GetClassData() const { return &_class_data_; }


void CSDTRecommendPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTRecommendPlayer*>(&to_msg);
  auto& from = static_cast<const CSDTRecommendPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTRecommendPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_cup() != 0) {
    _this->_internal_set_cup(from._internal_cup());
  }
  if (from._internal_headpic() != 0) {
    _this->_internal_set_headpic(from._internal_headpic());
  }
  if (from._internal_scene() != 0) {
    _this->_internal_set_scene(from._internal_scene());
  }
  if (from._internal_chessplayer() != 0) {
    _this->_internal_set_chessplayer(from._internal_chessplayer());
  }
  if (from._internal_recommendscore() != 0) {
    _this->_internal_set_recommendscore(from._internal_recommendscore());
  }
  if (from._internal_headpicframe() != 0) {
    _this->_internal_set_headpicframe(from._internal_headpicframe());
  }
  if (from._internal_observeprivilege() != 0) {
    _this->_internal_set_observeprivilege(from._internal_observeprivilege());
  }
  if (from._internal_platformtype() != 0) {
    _this->_internal_set_platformtype(from._internal_platformtype());
  }
  if (from._internal_ps4only() != 0) {
    _this->_internal_set_ps4only(from._internal_ps4only());
  }
  if (from._internal_restricttype() != 0) {
    _this->_internal_set_restricttype(from._internal_restricttype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTRecommendPlayer::CopyFrom(const CSDTRecommendPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTRecommendPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTRecommendPlayer::IsInitialized() const {
  return true;
}

void CSDTRecommendPlayer::InternalSwap(CSDTRecommendPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTRecommendPlayer, _impl_.restricttype_)
      + sizeof(CSDTRecommendPlayer::_impl_.restricttype_)
      - PROTOBUF_FIELD_OFFSET(CSDTRecommendPlayer, _impl_.cup_)>(
          reinterpret_cast<char*>(&_impl_.cup_),
          reinterpret_cast<char*>(&other->_impl_.cup_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTRecommendPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[186]);
}

// ===================================================================

class CSDTThirdPvpInfo::_Internal {
 public:
};

CSDTThirdPvpInfo::CSDTThirdPvpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTThirdPvpInfo)
}
CSDTThirdPvpInfo::CSDTThirdPvpInfo(const CSDTThirdPvpInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTThirdPvpInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.bigpic_){}
    , decltype(_impl_.smallpic_){}
    , decltype(_impl_.recommendicon_){}
    , decltype(_impl_.preshowpic_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.pvpstarttime_){}
    , decltype(_impl_.pvpendtime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bigpic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bigpic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bigpic().empty()) {
    _this->_impl_.bigpic_.Set(from._internal_bigpic(), 
      _this->GetArenaForAllocation());
  }
  _impl_.smallpic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.smallpic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_smallpic().empty()) {
    _this->_impl_.smallpic_.Set(from._internal_smallpic(), 
      _this->GetArenaForAllocation());
  }
  _impl_.recommendicon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recommendicon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recommendicon().empty()) {
    _this->_impl_.recommendicon_.Set(from._internal_recommendicon(), 
      _this->GetArenaForAllocation());
  }
  _impl_.preshowpic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preshowpic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_preshowpic().empty()) {
    _this->_impl_.preshowpic_.Set(from._internal_preshowpic(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pvpendtime_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.pvpendtime_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTThirdPvpInfo)
}

inline void CSDTThirdPvpInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.bigpic_){}
    , decltype(_impl_.smallpic_){}
    , decltype(_impl_.recommendicon_){}
    , decltype(_impl_.preshowpic_){}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.pvpstarttime_){int64_t{0}}
    , decltype(_impl_.pvpendtime_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bigpic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bigpic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.smallpic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.smallpic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recommendicon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recommendicon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.preshowpic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preshowpic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTThirdPvpInfo::~CSDTThirdPvpInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTThirdPvpInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTThirdPvpInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.content_.Destroy();
  _impl_.bigpic_.Destroy();
  _impl_.smallpic_.Destroy();
  _impl_.recommendicon_.Destroy();
  _impl_.preshowpic_.Destroy();
}

void CSDTThirdPvpInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTThirdPvpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTThirdPvpInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.bigpic_.ClearToEmpty();
  _impl_.smallpic_.ClearToEmpty();
  _impl_.recommendicon_.ClearToEmpty();
  _impl_.preshowpic_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pvpendtime_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.pvpendtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTThirdPvpInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTThirdPvpInfo.Title"));
        } else
          goto handle_unusual;
        continue;
      // string Content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTThirdPvpInfo.Content"));
        } else
          goto handle_unusual;
        continue;
      // string BigPic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_bigpic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTThirdPvpInfo.BigPic"));
        } else
          goto handle_unusual;
        continue;
      // string SmallPic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_smallpic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTThirdPvpInfo.SmallPic"));
        } else
          goto handle_unusual;
        continue;
      // string RecommendIcon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_recommendicon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTThirdPvpInfo.RecommendIcon"));
        } else
          goto handle_unusual;
        continue;
      // int64 PvpStartTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.pvpstarttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PvpEndTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.pvpendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string PreShowPic = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_preshowpic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTThirdPvpInfo.PreShowPic"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTThirdPvpInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTThirdPvpInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string Title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTThirdPvpInfo.Title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string Content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTThirdPvpInfo.Content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  // string BigPic = 4;
  if (!this->_internal_bigpic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bigpic().data(), static_cast<int>(this->_internal_bigpic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTThirdPvpInfo.BigPic");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_bigpic(), target);
  }

  // string SmallPic = 5;
  if (!this->_internal_smallpic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_smallpic().data(), static_cast<int>(this->_internal_smallpic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTThirdPvpInfo.SmallPic");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_smallpic(), target);
  }

  // string RecommendIcon = 6;
  if (!this->_internal_recommendicon().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recommendicon().data(), static_cast<int>(this->_internal_recommendicon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTThirdPvpInfo.RecommendIcon");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_recommendicon(), target);
  }

  // int64 PvpStartTime = 7;
  if (this->_internal_pvpstarttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_pvpstarttime(), target);
  }

  // int64 PvpEndTime = 8;
  if (this->_internal_pvpendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_pvpendtime(), target);
  }

  // string PreShowPic = 9;
  if (!this->_internal_preshowpic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_preshowpic().data(), static_cast<int>(this->_internal_preshowpic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTThirdPvpInfo.PreShowPic");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_preshowpic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTThirdPvpInfo)
  return target;
}

size_t CSDTThirdPvpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTThirdPvpInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string Content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string BigPic = 4;
  if (!this->_internal_bigpic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bigpic());
  }

  // string SmallPic = 5;
  if (!this->_internal_smallpic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_smallpic());
  }

  // string RecommendIcon = 6;
  if (!this->_internal_recommendicon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recommendicon());
  }

  // string PreShowPic = 9;
  if (!this->_internal_preshowpic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preshowpic());
  }

  // uint64 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // int64 PvpStartTime = 7;
  if (this->_internal_pvpstarttime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_pvpstarttime());
  }

  // int64 PvpEndTime = 8;
  if (this->_internal_pvpendtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_pvpendtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTThirdPvpInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTThirdPvpInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTThirdPvpInfo::GetClassData() const { return &_class_data_; }


void CSDTThirdPvpInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTThirdPvpInfo*>(&to_msg);
  auto& from = static_cast<const CSDTThirdPvpInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTThirdPvpInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_bigpic().empty()) {
    _this->_internal_set_bigpic(from._internal_bigpic());
  }
  if (!from._internal_smallpic().empty()) {
    _this->_internal_set_smallpic(from._internal_smallpic());
  }
  if (!from._internal_recommendicon().empty()) {
    _this->_internal_set_recommendicon(from._internal_recommendicon());
  }
  if (!from._internal_preshowpic().empty()) {
    _this->_internal_set_preshowpic(from._internal_preshowpic());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_pvpstarttime() != 0) {
    _this->_internal_set_pvpstarttime(from._internal_pvpstarttime());
  }
  if (from._internal_pvpendtime() != 0) {
    _this->_internal_set_pvpendtime(from._internal_pvpendtime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTThirdPvpInfo::CopyFrom(const CSDTThirdPvpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTThirdPvpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTThirdPvpInfo::IsInitialized() const {
  return true;
}

void CSDTThirdPvpInfo::InternalSwap(CSDTThirdPvpInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bigpic_, lhs_arena,
      &other->_impl_.bigpic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.smallpic_, lhs_arena,
      &other->_impl_.smallpic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recommendicon_, lhs_arena,
      &other->_impl_.recommendicon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preshowpic_, lhs_arena,
      &other->_impl_.preshowpic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTThirdPvpInfo, _impl_.pvpendtime_)
      + sizeof(CSDTThirdPvpInfo::_impl_.pvpendtime_)
      - PROTOBUF_FIELD_OFFSET(CSDTThirdPvpInfo, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTThirdPvpInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[187]);
}

// ===================================================================

class CSDTRecommendPvpInfo::_Internal {
 public:
  static const ::msg::CSDTRecommendPlayer& playerinfo(const CSDTRecommendPvpInfo* msg);
  static const ::msg::TournamentDesc& tournament(const CSDTRecommendPvpInfo* msg);
  static const ::msg::Authority& authoritydata(const CSDTRecommendPvpInfo* msg);
};

const ::msg::CSDTRecommendPlayer&
CSDTRecommendPvpInfo::_Internal::playerinfo(const CSDTRecommendPvpInfo* msg) {
  return *msg->_impl_.playerinfo_;
}
const ::msg::TournamentDesc&
CSDTRecommendPvpInfo::_Internal::tournament(const CSDTRecommendPvpInfo* msg) {
  return *msg->_impl_.tournament_;
}
const ::msg::Authority&
CSDTRecommendPvpInfo::_Internal::authoritydata(const CSDTRecommendPvpInfo* msg) {
  return *msg->_impl_.authoritydata_;
}
CSDTRecommendPvpInfo::CSDTRecommendPvpInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTRecommendPvpInfo)
}
CSDTRecommendPvpInfo::CSDTRecommendPvpInfo(const CSDTRecommendPvpInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTRecommendPvpInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerinfo_){nullptr}
    , decltype(_impl_.tournament_){nullptr}
    , decltype(_impl_.authoritydata_){nullptr}
    , decltype(_impl_.pvpid_){}
    , decltype(_impl_.starttime_){}
    , decltype(_impl_.observecount_){}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.thirdpvpid_){}
    , decltype(_impl_.submode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_playerinfo()) {
    _this->_impl_.playerinfo_ = new ::msg::CSDTRecommendPlayer(*from._impl_.playerinfo_);
  }
  if (from._internal_has_tournament()) {
    _this->_impl_.tournament_ = new ::msg::TournamentDesc(*from._impl_.tournament_);
  }
  if (from._internal_has_authoritydata()) {
    _this->_impl_.authoritydata_ = new ::msg::Authority(*from._impl_.authoritydata_);
  }
  ::memcpy(&_impl_.pvpid_, &from._impl_.pvpid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.submode_) -
    reinterpret_cast<char*>(&_impl_.pvpid_)) + sizeof(_impl_.submode_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTRecommendPvpInfo)
}

inline void CSDTRecommendPvpInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerinfo_){nullptr}
    , decltype(_impl_.tournament_){nullptr}
    , decltype(_impl_.authoritydata_){nullptr}
    , decltype(_impl_.pvpid_){uint64_t{0u}}
    , decltype(_impl_.starttime_){int64_t{0}}
    , decltype(_impl_.observecount_){0u}
    , decltype(_impl_.mode_){0}
    , decltype(_impl_.thirdpvpid_){uint64_t{0u}}
    , decltype(_impl_.submode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTRecommendPvpInfo::~CSDTRecommendPvpInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTRecommendPvpInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTRecommendPvpInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.playerinfo_;
  if (this != internal_default_instance()) delete _impl_.tournament_;
  if (this != internal_default_instance()) delete _impl_.authoritydata_;
}

void CSDTRecommendPvpInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTRecommendPvpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTRecommendPvpInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tournament_ != nullptr) {
    delete _impl_.tournament_;
  }
  _impl_.tournament_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.authoritydata_ != nullptr) {
    delete _impl_.authoritydata_;
  }
  _impl_.authoritydata_ = nullptr;
  ::memset(&_impl_.pvpid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.submode_) -
      reinterpret_cast<char*>(&_impl_.pvpid_)) + sizeof(_impl_.submode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTRecommendPvpInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.CSDTRecommendPlayer PlayerInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_playerinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 PvpId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pvpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ObserveCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.observecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 StartTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PVPMODE Mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::msg::PVPMODE>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.TournamentDesc Tournament = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tournament(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ThirdPvpID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.thirdpvpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SubMode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.submode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.Authority AuthorityData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_authoritydata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTRecommendPvpInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTRecommendPvpInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.CSDTRecommendPlayer PlayerInfo = 1;
  if (this->_internal_has_playerinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::playerinfo(this),
        _Internal::playerinfo(this).GetCachedSize(), target, stream);
  }

  // uint64 PvpId = 2;
  if (this->_internal_pvpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pvpid(), target);
  }

  // uint32 ObserveCount = 3;
  if (this->_internal_observecount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_observecount(), target);
  }

  // int64 StartTime = 4;
  if (this->_internal_starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_starttime(), target);
  }

  // .msg.PVPMODE Mode = 5;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_mode(), target);
  }

  // .msg.TournamentDesc Tournament = 6;
  if (this->_internal_has_tournament()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tournament(this),
        _Internal::tournament(this).GetCachedSize(), target, stream);
  }

  // uint64 ThirdPvpID = 7;
  if (this->_internal_thirdpvpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_thirdpvpid(), target);
  }

  // uint32 SubMode = 8;
  if (this->_internal_submode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_submode(), target);
  }

  // .msg.Authority AuthorityData = 9;
  if (this->_internal_has_authoritydata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::authoritydata(this),
        _Internal::authoritydata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTRecommendPvpInfo)
  return target;
}

size_t CSDTRecommendPvpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTRecommendPvpInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.CSDTRecommendPlayer PlayerInfo = 1;
  if (this->_internal_has_playerinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.playerinfo_);
  }

  // .msg.TournamentDesc Tournament = 6;
  if (this->_internal_has_tournament()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tournament_);
  }

  // .msg.Authority AuthorityData = 9;
  if (this->_internal_has_authoritydata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.authoritydata_);
  }

  // uint64 PvpId = 2;
  if (this->_internal_pvpid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pvpid());
  }

  // int64 StartTime = 4;
  if (this->_internal_starttime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_starttime());
  }

  // uint32 ObserveCount = 3;
  if (this->_internal_observecount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_observecount());
  }

  // .msg.PVPMODE Mode = 5;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // uint64 ThirdPvpID = 7;
  if (this->_internal_thirdpvpid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_thirdpvpid());
  }

  // uint32 SubMode = 8;
  if (this->_internal_submode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_submode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTRecommendPvpInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTRecommendPvpInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTRecommendPvpInfo::GetClassData() const { return &_class_data_; }


void CSDTRecommendPvpInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTRecommendPvpInfo*>(&to_msg);
  auto& from = static_cast<const CSDTRecommendPvpInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTRecommendPvpInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_playerinfo()) {
    _this->_internal_mutable_playerinfo()->::msg::CSDTRecommendPlayer::MergeFrom(
        from._internal_playerinfo());
  }
  if (from._internal_has_tournament()) {
    _this->_internal_mutable_tournament()->::msg::TournamentDesc::MergeFrom(
        from._internal_tournament());
  }
  if (from._internal_has_authoritydata()) {
    _this->_internal_mutable_authoritydata()->::msg::Authority::MergeFrom(
        from._internal_authoritydata());
  }
  if (from._internal_pvpid() != 0) {
    _this->_internal_set_pvpid(from._internal_pvpid());
  }
  if (from._internal_starttime() != 0) {
    _this->_internal_set_starttime(from._internal_starttime());
  }
  if (from._internal_observecount() != 0) {
    _this->_internal_set_observecount(from._internal_observecount());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_thirdpvpid() != 0) {
    _this->_internal_set_thirdpvpid(from._internal_thirdpvpid());
  }
  if (from._internal_submode() != 0) {
    _this->_internal_set_submode(from._internal_submode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTRecommendPvpInfo::CopyFrom(const CSDTRecommendPvpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTRecommendPvpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTRecommendPvpInfo::IsInitialized() const {
  return true;
}

void CSDTRecommendPvpInfo::InternalSwap(CSDTRecommendPvpInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTRecommendPvpInfo, _impl_.submode_)
      + sizeof(CSDTRecommendPvpInfo::_impl_.submode_)
      - PROTOBUF_FIELD_OFFSET(CSDTRecommendPvpInfo, _impl_.playerinfo_)>(
          reinterpret_cast<char*>(&_impl_.playerinfo_),
          reinterpret_cast<char*>(&other->_impl_.playerinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTRecommendPvpInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[188]);
}

// ===================================================================

class WxVVipData::_Internal {
 public:
};

WxVVipData::WxVVipData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.WxVVipData)
}
WxVVipData::WxVVipData(const WxVVipData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WxVVipData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.weeklytawardt_){}
    , decltype(_impl_.dailyvawardt_){}
    , decltype(_impl_.dailyawardt_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.weeklytawardt_, &from._impl_.weeklytawardt_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.weeklytawardt_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:msg.WxVVipData)
}

inline void WxVVipData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.weeklytawardt_){int64_t{0}}
    , decltype(_impl_.dailyvawardt_){int64_t{0}}
    , decltype(_impl_.dailyawardt_){int64_t{0}}
    , decltype(_impl_.level_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WxVVipData::~WxVVipData() {
  // @@protoc_insertion_point(destructor:msg.WxVVipData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WxVVipData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WxVVipData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WxVVipData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.WxVVipData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.weeklytawardt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.weeklytawardt_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WxVVipData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 WeeklyTAwardT = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.weeklytawardt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DailyVAwardT = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.dailyvawardt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 DailyAwardT = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.dailyawardt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WxVVipData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.WxVVipData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_level(), target);
  }

  // int64 WeeklyTAwardT = 2;
  if (this->_internal_weeklytawardt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_weeklytawardt(), target);
  }

  // int64 DailyVAwardT = 3;
  if (this->_internal_dailyvawardt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_dailyvawardt(), target);
  }

  // int64 DailyAwardT = 4;
  if (this->_internal_dailyawardt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_dailyawardt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.WxVVipData)
  return target;
}

size_t WxVVipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.WxVVipData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 WeeklyTAwardT = 2;
  if (this->_internal_weeklytawardt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_weeklytawardt());
  }

  // int64 DailyVAwardT = 3;
  if (this->_internal_dailyvawardt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dailyvawardt());
  }

  // int64 DailyAwardT = 4;
  if (this->_internal_dailyawardt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dailyawardt());
  }

  // uint32 Level = 1;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WxVVipData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WxVVipData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WxVVipData::GetClassData() const { return &_class_data_; }


void WxVVipData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WxVVipData*>(&to_msg);
  auto& from = static_cast<const WxVVipData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.WxVVipData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_weeklytawardt() != 0) {
    _this->_internal_set_weeklytawardt(from._internal_weeklytawardt());
  }
  if (from._internal_dailyvawardt() != 0) {
    _this->_internal_set_dailyvawardt(from._internal_dailyvawardt());
  }
  if (from._internal_dailyawardt() != 0) {
    _this->_internal_set_dailyawardt(from._internal_dailyawardt());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WxVVipData::CopyFrom(const WxVVipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.WxVVipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WxVVipData::IsInitialized() const {
  return true;
}

void WxVVipData::InternalSwap(WxVVipData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WxVVipData, _impl_.level_)
      + sizeof(WxVVipData::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(WxVVipData, _impl_.weeklytawardt_)>(
          reinterpret_cast<char*>(&_impl_.weeklytawardt_),
          reinterpret_cast<char*>(&other->_impl_.weeklytawardt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WxVVipData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[189]);
}

// ===================================================================

class CSDTWxRedPktItem::_Internal {
 public:
};

CSDTWxRedPktItem::CSDTWxRedPktItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTWxRedPktItem)
}
CSDTWxRedPktItem::CSDTWxRedPktItem(const CSDTWxRedPktItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTWxRedPktItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.redpktidx_){}
    , decltype(_impl_.redpktid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.redpktidx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redpktidx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redpktidx().empty()) {
    _this->_impl_.redpktidx_.Set(from._internal_redpktidx(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.redpktid_ = from._impl_.redpktid_;
  // @@protoc_insertion_point(copy_constructor:msg.CSDTWxRedPktItem)
}

inline void CSDTWxRedPktItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.redpktidx_){}
    , decltype(_impl_.redpktid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.redpktidx_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redpktidx_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTWxRedPktItem::~CSDTWxRedPktItem() {
  // @@protoc_insertion_point(destructor:msg.CSDTWxRedPktItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTWxRedPktItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.redpktidx_.Destroy();
}

void CSDTWxRedPktItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTWxRedPktItem::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTWxRedPktItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.redpktidx_.ClearToEmpty();
  _impl_.redpktid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTWxRedPktItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string RedPktIdx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_redpktidx();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTWxRedPktItem.RedPktIdx"));
        } else
          goto handle_unusual;
        continue;
      // uint32 RedPktId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.redpktid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTWxRedPktItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTWxRedPktItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string RedPktIdx = 1;
  if (!this->_internal_redpktidx().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redpktidx().data(), static_cast<int>(this->_internal_redpktidx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTWxRedPktItem.RedPktIdx");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_redpktidx(), target);
  }

  // uint32 RedPktId = 2;
  if (this->_internal_redpktid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_redpktid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTWxRedPktItem)
  return target;
}

size_t CSDTWxRedPktItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTWxRedPktItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string RedPktIdx = 1;
  if (!this->_internal_redpktidx().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redpktidx());
  }

  // uint32 RedPktId = 2;
  if (this->_internal_redpktid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_redpktid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTWxRedPktItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTWxRedPktItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTWxRedPktItem::GetClassData() const { return &_class_data_; }


void CSDTWxRedPktItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTWxRedPktItem*>(&to_msg);
  auto& from = static_cast<const CSDTWxRedPktItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTWxRedPktItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_redpktidx().empty()) {
    _this->_internal_set_redpktidx(from._internal_redpktidx());
  }
  if (from._internal_redpktid() != 0) {
    _this->_internal_set_redpktid(from._internal_redpktid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTWxRedPktItem::CopyFrom(const CSDTWxRedPktItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTWxRedPktItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTWxRedPktItem::IsInitialized() const {
  return true;
}

void CSDTWxRedPktItem::InternalSwap(CSDTWxRedPktItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.redpktidx_, lhs_arena,
      &other->_impl_.redpktidx_, rhs_arena
  );
  swap(_impl_.redpktid_, other->_impl_.redpktid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTWxRedPktItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[190]);
}

// ===================================================================

class CSDTWxRedPktProfile::_Internal {
 public:
};

CSDTWxRedPktProfile::CSDTWxRedPktProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTWxRedPktProfile)
}
CSDTWxRedPktProfile::CSDTWxRedPktProfile(const CSDTWxRedPktProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTWxRedPktProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.selfrank_){}
    , decltype(_impl_.selflike_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.selfrank_, &from._impl_.selfrank_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.selflike_) -
    reinterpret_cast<char*>(&_impl_.selfrank_)) + sizeof(_impl_.selflike_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTWxRedPktProfile)
}

inline void CSDTWxRedPktProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.selfrank_){0u}
    , decltype(_impl_.selflike_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTWxRedPktProfile::~CSDTWxRedPktProfile() {
  // @@protoc_insertion_point(destructor:msg.CSDTWxRedPktProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTWxRedPktProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDTWxRedPktProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTWxRedPktProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTWxRedPktProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.selfrank_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.selflike_) -
      reinterpret_cast<char*>(&_impl_.selfrank_)) + sizeof(_impl_.selflike_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTWxRedPktProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 SelfRank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.selfrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SelfLike = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.selflike_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTWxRedPktProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTWxRedPktProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SelfRank = 1;
  if (this->_internal_selfrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_selfrank(), target);
  }

  // uint32 SelfLike = 2;
  if (this->_internal_selflike() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_selflike(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTWxRedPktProfile)
  return target;
}

size_t CSDTWxRedPktProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTWxRedPktProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 SelfRank = 1;
  if (this->_internal_selfrank() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_selfrank());
  }

  // uint32 SelfLike = 2;
  if (this->_internal_selflike() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_selflike());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTWxRedPktProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTWxRedPktProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTWxRedPktProfile::GetClassData() const { return &_class_data_; }


void CSDTWxRedPktProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTWxRedPktProfile*>(&to_msg);
  auto& from = static_cast<const CSDTWxRedPktProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTWxRedPktProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_selfrank() != 0) {
    _this->_internal_set_selfrank(from._internal_selfrank());
  }
  if (from._internal_selflike() != 0) {
    _this->_internal_set_selflike(from._internal_selflike());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTWxRedPktProfile::CopyFrom(const CSDTWxRedPktProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTWxRedPktProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTWxRedPktProfile::IsInitialized() const {
  return true;
}

void CSDTWxRedPktProfile::InternalSwap(CSDTWxRedPktProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTWxRedPktProfile, _impl_.selflike_)
      + sizeof(CSDTWxRedPktProfile::_impl_.selflike_)
      - PROTOBUF_FIELD_OFFSET(CSDTWxRedPktProfile, _impl_.selfrank_)>(
          reinterpret_cast<char*>(&_impl_.selfrank_),
          reinterpret_cast<char*>(&other->_impl_.selfrank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTWxRedPktProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[191]);
}

// ===================================================================

class CSDTWxVVipRankItem::_Internal {
 public:
};

CSDTWxVVipRankItem::CSDTWxVVipRankItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTWxVVipRankItem)
}
CSDTWxVVipRankItem::CSDTWxVVipRankItem(const CSDTWxVVipRankItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTWxVVipRankItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.vlvl_){}
    , decltype(_impl_.likes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.vlvl_, &from._impl_.vlvl_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.likes_) -
    reinterpret_cast<char*>(&_impl_.vlvl_)) + sizeof(_impl_.likes_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTWxVVipRankItem)
}

inline void CSDTWxVVipRankItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.vlvl_){0u}
    , decltype(_impl_.likes_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTWxVVipRankItem::~CSDTWxVVipRankItem() {
  // @@protoc_insertion_point(destructor:msg.CSDTWxVVipRankItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTWxVVipRankItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.name_.Destroy();
}

void CSDTWxVVipRankItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTWxVVipRankItem::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTWxVVipRankItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.vlvl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.likes_) -
      reinterpret_cast<char*>(&_impl_.vlvl_)) + sizeof(_impl_.likes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTWxVVipRankItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string UId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTWxVVipRankItem.UId"));
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTWxVVipRankItem.Name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 VLvl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.vlvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Likes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.likes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTWxVVipRankItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTWxVVipRankItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string UId = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTWxVVipRankItem.UId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTWxVVipRankItem.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 VLvl = 3;
  if (this->_internal_vlvl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_vlvl(), target);
  }

  // uint32 Likes = 4;
  if (this->_internal_likes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_likes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTWxVVipRankItem)
  return target;
}

size_t CSDTWxVVipRankItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTWxVVipRankItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string UId = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 VLvl = 3;
  if (this->_internal_vlvl() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vlvl());
  }

  // uint32 Likes = 4;
  if (this->_internal_likes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_likes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTWxVVipRankItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTWxVVipRankItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTWxVVipRankItem::GetClassData() const { return &_class_data_; }


void CSDTWxVVipRankItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTWxVVipRankItem*>(&to_msg);
  auto& from = static_cast<const CSDTWxVVipRankItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTWxVVipRankItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_vlvl() != 0) {
    _this->_internal_set_vlvl(from._internal_vlvl());
  }
  if (from._internal_likes() != 0) {
    _this->_internal_set_likes(from._internal_likes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTWxVVipRankItem::CopyFrom(const CSDTWxVVipRankItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTWxVVipRankItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTWxVVipRankItem::IsInitialized() const {
  return true;
}

void CSDTWxVVipRankItem::InternalSwap(CSDTWxVVipRankItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTWxVVipRankItem, _impl_.likes_)
      + sizeof(CSDTWxVVipRankItem::_impl_.likes_)
      - PROTOBUF_FIELD_OFFSET(CSDTWxVVipRankItem, _impl_.vlvl_)>(
          reinterpret_cast<char*>(&_impl_.vlvl_),
          reinterpret_cast<char*>(&other->_impl_.vlvl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTWxVVipRankItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[192]);
}

// ===================================================================

class CSDTSlotInfo::_Internal {
 public:
};

CSDTSlotInfo::CSDTSlotInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTSlotInfo)
}
CSDTSlotInfo::CSDTSlotInfo(const CSDTSlotInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTSlotInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.slot_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.slot_ = from._impl_.slot_;
  // @@protoc_insertion_point(copy_constructor:msg.CSDTSlotInfo)
}

inline void CSDTSlotInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.slot_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTSlotInfo::~CSDTSlotInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTSlotInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTSlotInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void CSDTSlotInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTSlotInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTSlotInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.slot_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTSlotInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTSlotInfo.Id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTSlotInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTSlotInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTSlotInfo.Id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 Slot = 2;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTSlotInfo)
  return target;
}

size_t CSDTSlotInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTSlotInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint32 Slot = 2;
  if (this->_internal_slot() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTSlotInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTSlotInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTSlotInfo::GetClassData() const { return &_class_data_; }


void CSDTSlotInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTSlotInfo*>(&to_msg);
  auto& from = static_cast<const CSDTSlotInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTSlotInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_slot() != 0) {
    _this->_internal_set_slot(from._internal_slot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTSlotInfo::CopyFrom(const CSDTSlotInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTSlotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTSlotInfo::IsInitialized() const {
  return true;
}

void CSDTSlotInfo::InternalSwap(CSDTSlotInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.slot_, other->_impl_.slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTSlotInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[193]);
}

// ===================================================================

class CSDTRedPktData::_Internal {
 public:
};

CSDTRedPktData::CSDTRedPktData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTRedPktData)
}
CSDTRedPktData::CSDTRedPktData(const CSDTRedPktData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTRedPktData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.award_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    _this->_impl_.uid_.Set(from._internal_uid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.award_ = from._impl_.award_;
  // @@protoc_insertion_point(copy_constructor:msg.CSDTRedPktData)
}

inline void CSDTRedPktData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.award_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTRedPktData::~CSDTRedPktData() {
  // @@protoc_insertion_point(destructor:msg.CSDTRedPktData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTRedPktData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.Destroy();
  _impl_.name_.Destroy();
}

void CSDTRedPktData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTRedPktData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTRedPktData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.award_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTRedPktData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string UId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTRedPktData.UId"));
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTRedPktData.Name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Award = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.award_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTRedPktData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTRedPktData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string UId = 1;
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTRedPktData.UId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uid(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTRedPktData.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 Award = 3;
  if (this->_internal_award() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_award(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTRedPktData)
  return target;
}

size_t CSDTRedPktData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTRedPktData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string UId = 1;
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 Award = 3;
  if (this->_internal_award() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_award());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTRedPktData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTRedPktData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTRedPktData::GetClassData() const { return &_class_data_; }


void CSDTRedPktData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTRedPktData*>(&to_msg);
  auto& from = static_cast<const CSDTRedPktData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTRedPktData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_award() != 0) {
    _this->_internal_set_award(from._internal_award());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTRedPktData::CopyFrom(const CSDTRedPktData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTRedPktData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTRedPktData::IsInitialized() const {
  return true;
}

void CSDTRedPktData::InternalSwap(CSDTRedPktData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uid_, lhs_arena,
      &other->_impl_.uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.award_, other->_impl_.award_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTRedPktData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[194]);
}

// ===================================================================

class CSDTRedPktInfo::_Internal {
 public:
};

CSDTRedPktInfo::CSDTRedPktInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTRedPktInfo)
}
CSDTRedPktInfo::CSDTRedPktInfo(const CSDTRedPktInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTRedPktInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rank_){from._impl_.rank_}
    , decltype(_impl_.rankver_){}
    , decltype(_impl_.redpktid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rankver_, &from._impl_.rankver_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.redpktid_) -
    reinterpret_cast<char*>(&_impl_.rankver_)) + sizeof(_impl_.redpktid_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTRedPktInfo)
}

inline void CSDTRedPktInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rank_){arena}
    , decltype(_impl_.rankver_){int64_t{0}}
    , decltype(_impl_.redpktid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTRedPktInfo::~CSDTRedPktInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTRedPktInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTRedPktInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rank_.~RepeatedPtrField();
}

void CSDTRedPktInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTRedPktInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTRedPktInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rank_.Clear();
  ::memset(&_impl_.rankver_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.redpktid_) -
      reinterpret_cast<char*>(&_impl_.rankver_)) + sizeof(_impl_.redpktid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTRedPktInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RedPktId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.redpktid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 RankVer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rankver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CSDTRedPktData Rank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rank(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTRedPktInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTRedPktInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RedPktId = 1;
  if (this->_internal_redpktid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_redpktid(), target);
  }

  // int64 RankVer = 2;
  if (this->_internal_rankver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_rankver(), target);
  }

  // repeated .msg.CSDTRedPktData Rank = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rank_size()); i < n; i++) {
    const auto& repfield = this->_internal_rank(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTRedPktInfo)
  return target;
}

size_t CSDTRedPktInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTRedPktInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTRedPktData Rank = 3;
  total_size += 1UL * this->_internal_rank_size();
  for (const auto& msg : this->_impl_.rank_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 RankVer = 2;
  if (this->_internal_rankver() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_rankver());
  }

  // uint32 RedPktId = 1;
  if (this->_internal_redpktid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_redpktid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTRedPktInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTRedPktInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTRedPktInfo::GetClassData() const { return &_class_data_; }


void CSDTRedPktInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTRedPktInfo*>(&to_msg);
  auto& from = static_cast<const CSDTRedPktInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTRedPktInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rank_.MergeFrom(from._impl_.rank_);
  if (from._internal_rankver() != 0) {
    _this->_internal_set_rankver(from._internal_rankver());
  }
  if (from._internal_redpktid() != 0) {
    _this->_internal_set_redpktid(from._internal_redpktid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTRedPktInfo::CopyFrom(const CSDTRedPktInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTRedPktInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTRedPktInfo::IsInitialized() const {
  return true;
}

void CSDTRedPktInfo::InternalSwap(CSDTRedPktInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rank_.InternalSwap(&other->_impl_.rank_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTRedPktInfo, _impl_.redpktid_)
      + sizeof(CSDTRedPktInfo::_impl_.redpktid_)
      - PROTOBUF_FIELD_OFFSET(CSDTRedPktInfo, _impl_.rankver_)>(
          reinterpret_cast<char*>(&_impl_.rankver_),
          reinterpret_cast<char*>(&other->_impl_.rankver_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTRedPktInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[195]);
}

// ===================================================================

class SwitchItem::_Internal {
 public:
};

SwitchItem::SwitchItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.SwitchItem)
}
SwitchItem::SwitchItem(const SwitchItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwitchItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.switchtype_){}
    , decltype(_impl_.forbid_){}
    , decltype(_impl_.endtime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.switchtype_, &from._impl_.switchtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.endtime_) -
    reinterpret_cast<char*>(&_impl_.switchtype_)) + sizeof(_impl_.endtime_));
  // @@protoc_insertion_point(copy_constructor:msg.SwitchItem)
}

inline void SwitchItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.switchtype_){0}
    , decltype(_impl_.forbid_){false}
    , decltype(_impl_.endtime_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SwitchItem::~SwitchItem() {
  // @@protoc_insertion_point(destructor:msg.SwitchItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwitchItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SwitchItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwitchItem::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.SwitchItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.switchtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.endtime_) -
      reinterpret_cast<char*>(&_impl_.switchtype_)) + sizeof(_impl_.endtime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwitchItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.SWITCHTYPE SwitchType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_switchtype(static_cast<::msg::SWITCHTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // bool Forbid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.forbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 EndTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SwitchItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.SwitchItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.SWITCHTYPE SwitchType = 1;
  if (this->_internal_switchtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_switchtype(), target);
  }

  // bool Forbid = 2;
  if (this->_internal_forbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_forbid(), target);
  }

  // int64 EndTime = 3;
  if (this->_internal_endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_endtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.SwitchItem)
  return target;
}

size_t SwitchItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.SwitchItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.SWITCHTYPE SwitchType = 1;
  if (this->_internal_switchtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_switchtype());
  }

  // bool Forbid = 2;
  if (this->_internal_forbid() != 0) {
    total_size += 1 + 1;
  }

  // int64 EndTime = 3;
  if (this->_internal_endtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_endtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwitchItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwitchItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwitchItem::GetClassData() const { return &_class_data_; }


void SwitchItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwitchItem*>(&to_msg);
  auto& from = static_cast<const SwitchItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.SwitchItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_switchtype() != 0) {
    _this->_internal_set_switchtype(from._internal_switchtype());
  }
  if (from._internal_forbid() != 0) {
    _this->_internal_set_forbid(from._internal_forbid());
  }
  if (from._internal_endtime() != 0) {
    _this->_internal_set_endtime(from._internal_endtime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwitchItem::CopyFrom(const SwitchItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.SwitchItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchItem::IsInitialized() const {
  return true;
}

void SwitchItem::InternalSwap(SwitchItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwitchItem, _impl_.endtime_)
      + sizeof(SwitchItem::_impl_.endtime_)
      - PROTOBUF_FIELD_OFFSET(SwitchItem, _impl_.switchtype_)>(
          reinterpret_cast<char*>(&_impl_.switchtype_),
          reinterpret_cast<char*>(&other->_impl_.switchtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwitchItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[196]);
}

// ===================================================================

class CreditCfgItem::_Internal {
 public:
};

CreditCfgItem::CreditCfgItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CreditCfgItem)
}
CreditCfgItem::CreditCfgItem(const CreditCfgItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreditCfgItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.actid_){}
    , decltype(_impl_.thresholdhi_){}
    , decltype(_impl_.thresholdlo_){}
    , decltype(_impl_.limitlv_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.actid_, &from._impl_.actid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.limitlv_) -
    reinterpret_cast<char*>(&_impl_.actid_)) + sizeof(_impl_.limitlv_));
  // @@protoc_insertion_point(copy_constructor:msg.CreditCfgItem)
}

inline void CreditCfgItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.actid_){0}
    , decltype(_impl_.thresholdhi_){0}
    , decltype(_impl_.thresholdlo_){0}
    , decltype(_impl_.limitlv_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreditCfgItem::~CreditCfgItem() {
  // @@protoc_insertion_point(destructor:msg.CreditCfgItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreditCfgItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreditCfgItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreditCfgItem::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CreditCfgItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.actid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.limitlv_) -
      reinterpret_cast<char*>(&_impl_.actid_)) + sizeof(_impl_.limitlv_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreditCfgItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ActId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.actid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ThresholdHi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.thresholdhi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ThresholdLo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.thresholdlo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LimitLv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.limitlv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreditCfgItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CreditCfgItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ActId = 1;
  if (this->_internal_actid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_actid(), target);
  }

  // int32 ThresholdHi = 2;
  if (this->_internal_thresholdhi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_thresholdhi(), target);
  }

  // int32 ThresholdLo = 3;
  if (this->_internal_thresholdlo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_thresholdlo(), target);
  }

  // int32 LimitLv = 4;
  if (this->_internal_limitlv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_limitlv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CreditCfgItem)
  return target;
}

size_t CreditCfgItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CreditCfgItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ActId = 1;
  if (this->_internal_actid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_actid());
  }

  // int32 ThresholdHi = 2;
  if (this->_internal_thresholdhi() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_thresholdhi());
  }

  // int32 ThresholdLo = 3;
  if (this->_internal_thresholdlo() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_thresholdlo());
  }

  // int32 LimitLv = 4;
  if (this->_internal_limitlv() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_limitlv());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreditCfgItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreditCfgItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreditCfgItem::GetClassData() const { return &_class_data_; }


void CreditCfgItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreditCfgItem*>(&to_msg);
  auto& from = static_cast<const CreditCfgItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CreditCfgItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_actid() != 0) {
    _this->_internal_set_actid(from._internal_actid());
  }
  if (from._internal_thresholdhi() != 0) {
    _this->_internal_set_thresholdhi(from._internal_thresholdhi());
  }
  if (from._internal_thresholdlo() != 0) {
    _this->_internal_set_thresholdlo(from._internal_thresholdlo());
  }
  if (from._internal_limitlv() != 0) {
    _this->_internal_set_limitlv(from._internal_limitlv());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreditCfgItem::CopyFrom(const CreditCfgItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CreditCfgItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreditCfgItem::IsInitialized() const {
  return true;
}

void CreditCfgItem::InternalSwap(CreditCfgItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreditCfgItem, _impl_.limitlv_)
      + sizeof(CreditCfgItem::_impl_.limitlv_)
      - PROTOBUF_FIELD_OFFSET(CreditCfgItem, _impl_.actid_)>(
          reinterpret_cast<char*>(&_impl_.actid_),
          reinterpret_cast<char*>(&other->_impl_.actid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreditCfgItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[197]);
}

// ===================================================================

class CSDTPunishment::_Internal {
 public:
};

CSDTPunishment::CSDTPunishment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPunishment)
}
CSDTPunishment::CSDTPunishment(const CSDTPunishment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPunishment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.types_){from._impl_.types_}
    , /*decltype(_impl_._types_cached_byte_size_)*/{0}
    , decltype(_impl_.triggers_){from._impl_.triggers_}
    , /*decltype(_impl_._triggers_cached_byte_size_)*/{0}
    , decltype(_impl_.executedeadline_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.executedeadline_, &from._impl_.executedeadline_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.executedeadline_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPunishment)
}

inline void CSDTPunishment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.types_){arena}
    , /*decltype(_impl_._types_cached_byte_size_)*/{0}
    , decltype(_impl_.triggers_){arena}
    , /*decltype(_impl_._triggers_cached_byte_size_)*/{0}
    , decltype(_impl_.executedeadline_){int64_t{0}}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTPunishment::~CSDTPunishment() {
  // @@protoc_insertion_point(destructor:msg.CSDTPunishment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTPunishment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.types_.~RepeatedField();
  _impl_.triggers_.~RepeatedField();
}

void CSDTPunishment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPunishment::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPunishment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.types_.Clear();
  _impl_.triggers_.Clear();
  ::memset(&_impl_.executedeadline_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.executedeadline_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPunishment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.PUNISHMENTTYPE Types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_types(static_cast<::msg::PUNISHMENTTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 ExecuteDeadline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.executedeadline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.PUNISHMENTBEHAVIOR Triggers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_triggers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_triggers(static_cast<::msg::PUNISHMENTBEHAVIOR>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPunishment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPunishment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .msg.PUNISHMENTTYPE Types = 2;
  {
    int byte_size = _impl_._types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, _impl_.types_, byte_size, target);
    }
  }

  // int64 ExecuteDeadline = 3;
  if (this->_internal_executedeadline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_executedeadline(), target);
  }

  // repeated .msg.PUNISHMENTBEHAVIOR Triggers = 4;
  {
    int byte_size = _impl_._triggers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          4, _impl_.triggers_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPunishment)
  return target;
}

size_t CSDTPunishment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPunishment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.PUNISHMENTTYPE Types = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .msg.PUNISHMENTBEHAVIOR Triggers = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_triggers_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_triggers(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._triggers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 ExecuteDeadline = 3;
  if (this->_internal_executedeadline() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_executedeadline());
  }

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPunishment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPunishment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPunishment::GetClassData() const { return &_class_data_; }


void CSDTPunishment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPunishment*>(&to_msg);
  auto& from = static_cast<const CSDTPunishment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPunishment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.types_.MergeFrom(from._impl_.types_);
  _this->_impl_.triggers_.MergeFrom(from._impl_.triggers_);
  if (from._internal_executedeadline() != 0) {
    _this->_internal_set_executedeadline(from._internal_executedeadline());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPunishment::CopyFrom(const CSDTPunishment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPunishment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPunishment::IsInitialized() const {
  return true;
}

void CSDTPunishment::InternalSwap(CSDTPunishment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.types_.InternalSwap(&other->_impl_.types_);
  _impl_.triggers_.InternalSwap(&other->_impl_.triggers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTPunishment, _impl_.id_)
      + sizeof(CSDTPunishment::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(CSDTPunishment, _impl_.executedeadline_)>(
          reinterpret_cast<char*>(&_impl_.executedeadline_),
          reinterpret_cast<char*>(&other->_impl_.executedeadline_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPunishment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[198]);
}

// ===================================================================

class CSDTPlayer::_Internal {
 public:
};

CSDTPlayer::CSDTPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPlayer)
}
CSDTPlayer::CSDTPlayer(const CSDTPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.username_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.playerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playerid().empty()) {
    _this->_impl_.playerid_.Set(from._internal_playerid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPlayer)
}

inline void CSDTPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.username_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.playerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTPlayer::~CSDTPlayer() {
  // @@protoc_insertion_point(destructor:msg.CSDTPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playerid_.Destroy();
  _impl_.username_.Destroy();
}

void CSDTPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerid_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string PlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPlayer.PlayerId"));
        } else
          goto handle_unusual;
        continue;
      // string UserName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTPlayer.UserName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string PlayerId = 1;
  if (!this->_internal_playerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPlayer.PlayerId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playerid(), target);
  }

  // string UserName = 2;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTPlayer.UserName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPlayer)
  return target;
}

size_t CSDTPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string PlayerId = 1;
  if (!this->_internal_playerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playerid());
  }

  // string UserName = 2;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPlayer::GetClassData() const { return &_class_data_; }


void CSDTPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPlayer*>(&to_msg);
  auto& from = static_cast<const CSDTPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_playerid().empty()) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPlayer::CopyFrom(const CSDTPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPlayer::IsInitialized() const {
  return true;
}

void CSDTPlayer::InternalSwap(CSDTPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playerid_, lhs_arena,
      &other->_impl_.playerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[199]);
}

// ===================================================================

class CSDTBriefPunishment::_Internal {
 public:
};

CSDTBriefPunishment::CSDTBriefPunishment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTBriefPunishment)
}
CSDTBriefPunishment::CSDTBriefPunishment(const CSDTBriefPunishment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTBriefPunishment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){from._impl_.username_}
    , decltype(_impl_.punishmentdeadline_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.punishmentdeadline_ = from._impl_.punishmentdeadline_;
  // @@protoc_insertion_point(copy_constructor:msg.CSDTBriefPunishment)
}

inline void CSDTBriefPunishment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){arena}
    , decltype(_impl_.punishmentdeadline_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTBriefPunishment::~CSDTBriefPunishment() {
  // @@protoc_insertion_point(destructor:msg.CSDTBriefPunishment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTBriefPunishment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.~RepeatedPtrField();
}

void CSDTBriefPunishment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTBriefPunishment::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTBriefPunishment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.Clear();
  _impl_.punishmentdeadline_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTBriefPunishment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.CSDTPlayer UserName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_username(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 PunishmentDeadline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.punishmentdeadline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTBriefPunishment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTBriefPunishment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.CSDTPlayer UserName = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_username_size()); i < n; i++) {
    const auto& repfield = this->_internal_username(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 PunishmentDeadline = 2;
  if (this->_internal_punishmentdeadline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_punishmentdeadline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTBriefPunishment)
  return target;
}

size_t CSDTBriefPunishment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTBriefPunishment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTPlayer UserName = 1;
  total_size += 1UL * this->_internal_username_size();
  for (const auto& msg : this->_impl_.username_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 PunishmentDeadline = 2;
  if (this->_internal_punishmentdeadline() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_punishmentdeadline());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTBriefPunishment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTBriefPunishment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTBriefPunishment::GetClassData() const { return &_class_data_; }


void CSDTBriefPunishment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTBriefPunishment*>(&to_msg);
  auto& from = static_cast<const CSDTBriefPunishment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTBriefPunishment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.username_.MergeFrom(from._impl_.username_);
  if (from._internal_punishmentdeadline() != 0) {
    _this->_internal_set_punishmentdeadline(from._internal_punishmentdeadline());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTBriefPunishment::CopyFrom(const CSDTBriefPunishment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTBriefPunishment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTBriefPunishment::IsInitialized() const {
  return true;
}

void CSDTBriefPunishment::InternalSwap(CSDTBriefPunishment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.username_.InternalSwap(&other->_impl_.username_);
  swap(_impl_.punishmentdeadline_, other->_impl_.punishmentdeadline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTBriefPunishment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[200]);
}

// ===================================================================

class PlayerConfirmInfo::_Internal {
 public:
};

PlayerConfirmInfo::PlayerConfirmInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PlayerConfirmInfo)
}
PlayerConfirmInfo::PlayerConfirmInfo(const PlayerConfirmInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerConfirmInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.headpic_){}
    , decltype(_impl_.headpicframe_){}
    , decltype(_impl_.isrobot_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.playerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playerid().empty()) {
    _this->_impl_.playerid_.Set(from._internal_playerid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.headpic_, &from._impl_.headpic_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isrobot_) -
    reinterpret_cast<char*>(&_impl_.headpic_)) + sizeof(_impl_.isrobot_));
  // @@protoc_insertion_point(copy_constructor:msg.PlayerConfirmInfo)
}

inline void PlayerConfirmInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.headpic_){0u}
    , decltype(_impl_.headpicframe_){0u}
    , decltype(_impl_.isrobot_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.playerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerConfirmInfo::~PlayerConfirmInfo() {
  // @@protoc_insertion_point(destructor:msg.PlayerConfirmInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerConfirmInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playerid_.Destroy();
  _impl_.username_.Destroy();
}

void PlayerConfirmInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerConfirmInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayerConfirmInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerid_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  ::memset(&_impl_.headpic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isrobot_) -
      reinterpret_cast<char*>(&_impl_.headpic_)) + sizeof(_impl_.isrobot_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerConfirmInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string PlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PlayerConfirmInfo.PlayerId"));
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.headpic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPicFrame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.headpicframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string UserName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PlayerConfirmInfo.UserName"));
        } else
          goto handle_unusual;
        continue;
      // bool IsRobot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.isrobot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerConfirmInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerConfirmInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string PlayerId = 1;
  if (!this->_internal_playerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PlayerConfirmInfo.PlayerId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playerid(), target);
  }

  // uint32 HeadPic = 2;
  if (this->_internal_headpic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_headpic(), target);
  }

  // uint32 HeadPicFrame = 3;
  if (this->_internal_headpicframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_headpicframe(), target);
  }

  // string UserName = 4;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PlayerConfirmInfo.UserName");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_username(), target);
  }

  // bool IsRobot = 5;
  if (this->_internal_isrobot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_isrobot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerConfirmInfo)
  return target;
}

size_t PlayerConfirmInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayerConfirmInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string PlayerId = 1;
  if (!this->_internal_playerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playerid());
  }

  // string UserName = 4;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // uint32 HeadPic = 2;
  if (this->_internal_headpic() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpic());
  }

  // uint32 HeadPicFrame = 3;
  if (this->_internal_headpicframe() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpicframe());
  }

  // bool IsRobot = 5;
  if (this->_internal_isrobot() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerConfirmInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerConfirmInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerConfirmInfo::GetClassData() const { return &_class_data_; }


void PlayerConfirmInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerConfirmInfo*>(&to_msg);
  auto& from = static_cast<const PlayerConfirmInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayerConfirmInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_playerid().empty()) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (from._internal_headpic() != 0) {
    _this->_internal_set_headpic(from._internal_headpic());
  }
  if (from._internal_headpicframe() != 0) {
    _this->_internal_set_headpicframe(from._internal_headpicframe());
  }
  if (from._internal_isrobot() != 0) {
    _this->_internal_set_isrobot(from._internal_isrobot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerConfirmInfo::CopyFrom(const PlayerConfirmInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayerConfirmInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerConfirmInfo::IsInitialized() const {
  return true;
}

void PlayerConfirmInfo::InternalSwap(PlayerConfirmInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playerid_, lhs_arena,
      &other->_impl_.playerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerConfirmInfo, _impl_.isrobot_)
      + sizeof(PlayerConfirmInfo::_impl_.isrobot_)
      - PROTOBUF_FIELD_OFFSET(PlayerConfirmInfo, _impl_.headpic_)>(
          reinterpret_cast<char*>(&_impl_.headpic_),
          reinterpret_cast<char*>(&other->_impl_.headpic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerConfirmInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[201]);
}

// ===================================================================

class AnswerData::_Internal {
 public:
};

AnswerData::AnswerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.AnswerData)
}
AnswerData::AnswerData(const AnswerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnswerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contents_){from._impl_.contents_}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:msg.AnswerData)
}

inline void AnswerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.contents_){arena}
    , decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AnswerData::~AnswerData() {
  // @@protoc_insertion_point(destructor:msg.AnswerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnswerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contents_.~RepeatedPtrField();
}

void AnswerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnswerData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.AnswerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contents_.Clear();
  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnswerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string Contents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_contents();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.AnswerData.Contents"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnswerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.AnswerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  // repeated string Contents = 2;
  for (int i = 0, n = this->_internal_contents_size(); i < n; i++) {
    const auto& s = this->_internal_contents(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.AnswerData.Contents");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.AnswerData)
  return target;
}

size_t AnswerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.AnswerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Contents = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.contents_.size());
  for (int i = 0, n = _impl_.contents_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.contents_.Get(i));
  }

  // uint32 Index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnswerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnswerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnswerData::GetClassData() const { return &_class_data_; }


void AnswerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnswerData*>(&to_msg);
  auto& from = static_cast<const AnswerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.AnswerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.contents_.MergeFrom(from._impl_.contents_);
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnswerData::CopyFrom(const AnswerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.AnswerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerData::IsInitialized() const {
  return true;
}

void AnswerData::InternalSwap(AnswerData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.contents_.InternalSwap(&other->_impl_.contents_);
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnswerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[202]);
}

// ===================================================================

class VideoInfo::_Internal {
 public:
};

VideoInfo::VideoInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.VideoInfo)
}
VideoInfo::VideoInfo(const VideoInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VideoInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.picurl_){}
    , decltype(_impl_.contenturl_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.languagekey_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.picurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.picurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_picurl().empty()) {
    _this->_impl_.picurl_.Set(from._internal_picurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.contenturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contenturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contenturl().empty()) {
    _this->_impl_.contenturl_.Set(from._internal_contenturl(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.languagekey_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.languagekey_));
  // @@protoc_insertion_point(copy_constructor:msg.VideoInfo)
}

inline void VideoInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.picurl_){}
    , decltype(_impl_.contenturl_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.languagekey_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.picurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.picurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contenturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contenturl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoInfo::~VideoInfo() {
  // @@protoc_insertion_point(destructor:msg.VideoInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.picurl_.Destroy();
  _impl_.contenturl_.Destroy();
}

void VideoInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.VideoInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.picurl_.ClearToEmpty();
  _impl_.contenturl_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.languagekey_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.languagekey_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.VideoInfo.Name"));
        } else
          goto handle_unusual;
        continue;
      // .msg.VIDEO_TYPE Type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::VIDEO_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string PicUrl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_picurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.VideoInfo.PicUrl"));
        } else
          goto handle_unusual;
        continue;
      // string ContentUrl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_contenturl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.VideoInfo.ContentUrl"));
        } else
          goto handle_unusual;
        continue;
      // bool LanguageKey = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.languagekey_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.VideoInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.VideoInfo.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .msg.VIDEO_TYPE Type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // string PicUrl = 4;
  if (!this->_internal_picurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_picurl().data(), static_cast<int>(this->_internal_picurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.VideoInfo.PicUrl");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_picurl(), target);
  }

  // string ContentUrl = 5;
  if (!this->_internal_contenturl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contenturl().data(), static_cast<int>(this->_internal_contenturl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.VideoInfo.ContentUrl");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_contenturl(), target);
  }

  // bool LanguageKey = 6;
  if (this->_internal_languagekey() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_languagekey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.VideoInfo)
  return target;
}

size_t VideoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.VideoInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string PicUrl = 4;
  if (!this->_internal_picurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_picurl());
  }

  // string ContentUrl = 5;
  if (!this->_internal_contenturl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contenturl());
  }

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // .msg.VIDEO_TYPE Type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool LanguageKey = 6;
  if (this->_internal_languagekey() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VideoInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoInfo::GetClassData() const { return &_class_data_; }


void VideoInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VideoInfo*>(&to_msg);
  auto& from = static_cast<const VideoInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.VideoInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_picurl().empty()) {
    _this->_internal_set_picurl(from._internal_picurl());
  }
  if (!from._internal_contenturl().empty()) {
    _this->_internal_set_contenturl(from._internal_contenturl());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_languagekey() != 0) {
    _this->_internal_set_languagekey(from._internal_languagekey());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoInfo::CopyFrom(const VideoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.VideoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoInfo::IsInitialized() const {
  return true;
}

void VideoInfo::InternalSwap(VideoInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.picurl_, lhs_arena,
      &other->_impl_.picurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contenturl_, lhs_arena,
      &other->_impl_.contenturl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoInfo, _impl_.languagekey_)
      + sizeof(VideoInfo::_impl_.languagekey_)
      - PROTOBUF_FIELD_OFFSET(VideoInfo, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[203]);
}

// ===================================================================

class CSDTAddictionInfo::_Internal {
 public:
};

CSDTAddictionInfo::CSDTAddictionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTAddictionInfo)
}
CSDTAddictionInfo::CSDTAddictionInfo(const CSDTAddictionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTAddictionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.authaddictiontoken_){}
    , decltype(_impl_.isauthaddiction_){}
    , decltype(_impl_.isverified_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.authaddictiontoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authaddictiontoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_authaddictiontoken().empty()) {
    _this->_impl_.authaddictiontoken_.Set(from._internal_authaddictiontoken(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.isauthaddiction_, &from._impl_.isauthaddiction_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isverified_) -
    reinterpret_cast<char*>(&_impl_.isauthaddiction_)) + sizeof(_impl_.isverified_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTAddictionInfo)
}

inline void CSDTAddictionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.authaddictiontoken_){}
    , decltype(_impl_.isauthaddiction_){false}
    , decltype(_impl_.isverified_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.authaddictiontoken_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authaddictiontoken_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTAddictionInfo::~CSDTAddictionInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTAddictionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTAddictionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.authaddictiontoken_.Destroy();
}

void CSDTAddictionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTAddictionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTAddictionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.authaddictiontoken_.ClearToEmpty();
  ::memset(&_impl_.isauthaddiction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isverified_) -
      reinterpret_cast<char*>(&_impl_.isauthaddiction_)) + sizeof(_impl_.isverified_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTAddictionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool IsAuthAddiction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isauthaddiction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string AuthAddictionToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_authaddictiontoken();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTAddictionInfo.AuthAddictionToken"));
        } else
          goto handle_unusual;
        continue;
      // bool IsVerified = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.isverified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTAddictionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTAddictionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsAuthAddiction = 1;
  if (this->_internal_isauthaddiction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isauthaddiction(), target);
  }

  // string AuthAddictionToken = 2;
  if (!this->_internal_authaddictiontoken().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_authaddictiontoken().data(), static_cast<int>(this->_internal_authaddictiontoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTAddictionInfo.AuthAddictionToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_authaddictiontoken(), target);
  }

  // bool IsVerified = 3;
  if (this->_internal_isverified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_isverified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTAddictionInfo)
  return target;
}

size_t CSDTAddictionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTAddictionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string AuthAddictionToken = 2;
  if (!this->_internal_authaddictiontoken().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_authaddictiontoken());
  }

  // bool IsAuthAddiction = 1;
  if (this->_internal_isauthaddiction() != 0) {
    total_size += 1 + 1;
  }

  // bool IsVerified = 3;
  if (this->_internal_isverified() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTAddictionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTAddictionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTAddictionInfo::GetClassData() const { return &_class_data_; }


void CSDTAddictionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTAddictionInfo*>(&to_msg);
  auto& from = static_cast<const CSDTAddictionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTAddictionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_authaddictiontoken().empty()) {
    _this->_internal_set_authaddictiontoken(from._internal_authaddictiontoken());
  }
  if (from._internal_isauthaddiction() != 0) {
    _this->_internal_set_isauthaddiction(from._internal_isauthaddiction());
  }
  if (from._internal_isverified() != 0) {
    _this->_internal_set_isverified(from._internal_isverified());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTAddictionInfo::CopyFrom(const CSDTAddictionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTAddictionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTAddictionInfo::IsInitialized() const {
  return true;
}

void CSDTAddictionInfo::InternalSwap(CSDTAddictionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.authaddictiontoken_, lhs_arena,
      &other->_impl_.authaddictiontoken_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTAddictionInfo, _impl_.isverified_)
      + sizeof(CSDTAddictionInfo::_impl_.isverified_)
      - PROTOBUF_FIELD_OFFSET(CSDTAddictionInfo, _impl_.isauthaddiction_)>(
          reinterpret_cast<char*>(&_impl_.isauthaddiction_),
          reinterpret_cast<char*>(&other->_impl_.isauthaddiction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTAddictionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[204]);
}

// ===================================================================

class KrAddictionInfo::_Internal {
 public:
};

KrAddictionInfo::KrAddictionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.KrAddictionInfo)
}
KrAddictionInfo::KrAddictionInfo(const KrAddictionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KrAddictionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logintime_){}
    , decltype(_impl_.startlimittime_){}
    , decltype(_impl_.endlimittime_){}
    , decltype(_impl_.countdown1_){}
    , decltype(_impl_.countdown2_){}
    , decltype(_impl_.durantion_){}
    , decltype(_impl_.ischeckaddic_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.logintime_, &from._impl_.logintime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ischeckaddic_) -
    reinterpret_cast<char*>(&_impl_.logintime_)) + sizeof(_impl_.ischeckaddic_));
  // @@protoc_insertion_point(copy_constructor:msg.KrAddictionInfo)
}

inline void KrAddictionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.logintime_){int64_t{0}}
    , decltype(_impl_.startlimittime_){int64_t{0}}
    , decltype(_impl_.endlimittime_){int64_t{0}}
    , decltype(_impl_.countdown1_){int64_t{0}}
    , decltype(_impl_.countdown2_){int64_t{0}}
    , decltype(_impl_.durantion_){int64_t{0}}
    , decltype(_impl_.ischeckaddic_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KrAddictionInfo::~KrAddictionInfo() {
  // @@protoc_insertion_point(destructor:msg.KrAddictionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KrAddictionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KrAddictionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KrAddictionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.KrAddictionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.logintime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ischeckaddic_) -
      reinterpret_cast<char*>(&_impl_.logintime_)) + sizeof(_impl_.ischeckaddic_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KrAddictionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 LoginTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.logintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsCheckAddic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ischeckaddic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 StartLimitTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.startlimittime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 EndLimitTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.endlimittime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Countdown1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.countdown1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Countdown2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.countdown2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 durantion = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.durantion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KrAddictionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.KrAddictionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 LoginTime = 1;
  if (this->_internal_logintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_logintime(), target);
  }

  // bool IsCheckAddic = 2;
  if (this->_internal_ischeckaddic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ischeckaddic(), target);
  }

  // int64 StartLimitTime = 3;
  if (this->_internal_startlimittime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_startlimittime(), target);
  }

  // int64 EndLimitTime = 4;
  if (this->_internal_endlimittime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_endlimittime(), target);
  }

  // int64 Countdown1 = 5;
  if (this->_internal_countdown1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_countdown1(), target);
  }

  // int64 Countdown2 = 6;
  if (this->_internal_countdown2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_countdown2(), target);
  }

  // int64 durantion = 7;
  if (this->_internal_durantion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_durantion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.KrAddictionInfo)
  return target;
}

size_t KrAddictionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.KrAddictionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 LoginTime = 1;
  if (this->_internal_logintime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_logintime());
  }

  // int64 StartLimitTime = 3;
  if (this->_internal_startlimittime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_startlimittime());
  }

  // int64 EndLimitTime = 4;
  if (this->_internal_endlimittime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_endlimittime());
  }

  // int64 Countdown1 = 5;
  if (this->_internal_countdown1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_countdown1());
  }

  // int64 Countdown2 = 6;
  if (this->_internal_countdown2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_countdown2());
  }

  // int64 durantion = 7;
  if (this->_internal_durantion() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_durantion());
  }

  // bool IsCheckAddic = 2;
  if (this->_internal_ischeckaddic() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KrAddictionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KrAddictionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KrAddictionInfo::GetClassData() const { return &_class_data_; }


void KrAddictionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KrAddictionInfo*>(&to_msg);
  auto& from = static_cast<const KrAddictionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.KrAddictionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_logintime() != 0) {
    _this->_internal_set_logintime(from._internal_logintime());
  }
  if (from._internal_startlimittime() != 0) {
    _this->_internal_set_startlimittime(from._internal_startlimittime());
  }
  if (from._internal_endlimittime() != 0) {
    _this->_internal_set_endlimittime(from._internal_endlimittime());
  }
  if (from._internal_countdown1() != 0) {
    _this->_internal_set_countdown1(from._internal_countdown1());
  }
  if (from._internal_countdown2() != 0) {
    _this->_internal_set_countdown2(from._internal_countdown2());
  }
  if (from._internal_durantion() != 0) {
    _this->_internal_set_durantion(from._internal_durantion());
  }
  if (from._internal_ischeckaddic() != 0) {
    _this->_internal_set_ischeckaddic(from._internal_ischeckaddic());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KrAddictionInfo::CopyFrom(const KrAddictionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.KrAddictionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KrAddictionInfo::IsInitialized() const {
  return true;
}

void KrAddictionInfo::InternalSwap(KrAddictionInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KrAddictionInfo, _impl_.ischeckaddic_)
      + sizeof(KrAddictionInfo::_impl_.ischeckaddic_)
      - PROTOBUF_FIELD_OFFSET(KrAddictionInfo, _impl_.logintime_)>(
          reinterpret_cast<char*>(&_impl_.logintime_),
          reinterpret_cast<char*>(&other->_impl_.logintime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KrAddictionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[205]);
}

// ===================================================================

class MultiPlayer::_Internal {
 public:
};

MultiPlayer::MultiPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.MultiPlayer)
}
MultiPlayer::MultiPlayer(const MultiPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MultiPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.headpic_){}
    , decltype(_impl_.headpicframe_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.mmr_){}
    , decltype(_impl_.diamond_){}
    , decltype(_impl_.money_){}
    , decltype(_impl_.passportlevel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region().empty()) {
    _this->_impl_.region_.Set(from._internal_region(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.headpic_, &from._impl_.headpic_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.passportlevel_) -
    reinterpret_cast<char*>(&_impl_.headpic_)) + sizeof(_impl_.passportlevel_));
  // @@protoc_insertion_point(copy_constructor:msg.MultiPlayer)
}

inline void MultiPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.headpic_){0u}
    , decltype(_impl_.headpicframe_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.mmr_){0u}
    , decltype(_impl_.diamond_){0u}
    , decltype(_impl_.money_){0u}
    , decltype(_impl_.passportlevel_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.region_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.region_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MultiPlayer::~MultiPlayer() {
  // @@protoc_insertion_point(destructor:msg.MultiPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.region_.Destroy();
}

void MultiPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MultiPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.region_.ClearToEmpty();
  ::memset(&_impl_.headpic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.passportlevel_) -
      reinterpret_cast<char*>(&_impl_.headpic_)) + sizeof(_impl_.passportlevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.MultiPlayer.Id"));
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.MultiPlayer.Name"));
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.headpic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPicFrame = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.headpicframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MMR = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Diamond = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.diamond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Region = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_region();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.MultiPlayer.Region"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Money = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PassportLevel = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.passportlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MultiPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MultiPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MultiPlayer.Id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MultiPlayer.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 HeadPic = 3;
  if (this->_internal_headpic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_headpic(), target);
  }

  // uint32 HeadPicFrame = 4;
  if (this->_internal_headpicframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_headpicframe(), target);
  }

  // uint32 Level = 5;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_level(), target);
  }

  // uint32 MMR = 6;
  if (this->_internal_mmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_mmr(), target);
  }

  // uint32 Diamond = 7;
  if (this->_internal_diamond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_diamond(), target);
  }

  // string Region = 8;
  if (!this->_internal_region().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MultiPlayer.Region");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_region(), target);
  }

  // uint32 Money = 9;
  if (this->_internal_money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_money(), target);
  }

  // uint32 PassportLevel = 10;
  if (this->_internal_passportlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_passportlevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MultiPlayer)
  return target;
}

size_t MultiPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MultiPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Region = 8;
  if (!this->_internal_region().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // uint32 HeadPic = 3;
  if (this->_internal_headpic() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpic());
  }

  // uint32 HeadPicFrame = 4;
  if (this->_internal_headpicframe() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpicframe());
  }

  // uint32 Level = 5;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 MMR = 6;
  if (this->_internal_mmr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mmr());
  }

  // uint32 Diamond = 7;
  if (this->_internal_diamond() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_diamond());
  }

  // uint32 Money = 9;
  if (this->_internal_money() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_money());
  }

  // uint32 PassportLevel = 10;
  if (this->_internal_passportlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_passportlevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MultiPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MultiPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MultiPlayer::GetClassData() const { return &_class_data_; }


void MultiPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MultiPlayer*>(&to_msg);
  auto& from = static_cast<const MultiPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.MultiPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (from._internal_headpic() != 0) {
    _this->_internal_set_headpic(from._internal_headpic());
  }
  if (from._internal_headpicframe() != 0) {
    _this->_internal_set_headpicframe(from._internal_headpicframe());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_mmr() != 0) {
    _this->_internal_set_mmr(from._internal_mmr());
  }
  if (from._internal_diamond() != 0) {
    _this->_internal_set_diamond(from._internal_diamond());
  }
  if (from._internal_money() != 0) {
    _this->_internal_set_money(from._internal_money());
  }
  if (from._internal_passportlevel() != 0) {
    _this->_internal_set_passportlevel(from._internal_passportlevel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MultiPlayer::CopyFrom(const MultiPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MultiPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiPlayer::IsInitialized() const {
  return true;
}

void MultiPlayer::InternalSwap(MultiPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.region_, lhs_arena,
      &other->_impl_.region_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MultiPlayer, _impl_.passportlevel_)
      + sizeof(MultiPlayer::_impl_.passportlevel_)
      - PROTOBUF_FIELD_OFFSET(MultiPlayer, _impl_.headpic_)>(
          reinterpret_cast<char*>(&_impl_.headpic_),
          reinterpret_cast<char*>(&other->_impl_.headpic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[206]);
}

// ===================================================================

class CSDTBannerInfo::_Internal {
 public:
};

CSDTBannerInfo::CSDTBannerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTBannerInfo)
}
CSDTBannerInfo::CSDTBannerInfo(const CSDTBannerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTBannerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSDTBannerInfo)
}

inline void CSDTBannerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTBannerInfo::~CSDTBannerInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTBannerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTBannerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
}

void CSDTBannerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTBannerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTBannerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTBannerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.CSDTBanner Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTBannerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTBannerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.CSDTBanner Data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTBannerInfo)
  return target;
}

size_t CSDTBannerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTBannerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTBanner Data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->_impl_.data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTBannerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTBannerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTBannerInfo::GetClassData() const { return &_class_data_; }


void CSDTBannerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTBannerInfo*>(&to_msg);
  auto& from = static_cast<const CSDTBannerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTBannerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTBannerInfo::CopyFrom(const CSDTBannerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTBannerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTBannerInfo::IsInitialized() const {
  return true;
}

void CSDTBannerInfo::InternalSwap(CSDTBannerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTBannerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[207]);
}

// ===================================================================

class CSDTBanner::_Internal {
 public:
};

CSDTBanner::CSDTBanner(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTBanner)
}
CSDTBanner::CSDTBanner(const CSDTBanner& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTBanner* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.countrylist_){from._impl_.countrylist_}
    , decltype(_impl_.zoneid_){from._impl_.zoneid_}
    , /*decltype(_impl_._zoneid_cached_byte_size_)*/{0}
    , decltype(_impl_.downloadlist_){from._impl_.downloadlist_}
    , decltype(_impl_.platformlist_){from._impl_.platformlist_}
    , /*decltype(_impl_._platformlist_cached_byte_size_)*/{0}
    , decltype(_impl_.hallmodelist_){from._impl_.hallmodelist_}
    , /*decltype(_impl_._hallmodelist_cached_byte_size_)*/{0}
    , decltype(_impl_.excludedownload_){from._impl_.excludedownload_}
    , decltype(_impl_.picurl_){}
    , decltype(_impl_.skipname_){}
    , decltype(_impl_.pcskipurl_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.bannertype_){}
    , decltype(_impl_.skiptype_){}
    , decltype(_impl_.skiptap_){}
    , decltype(_impl_.mallgoodsid_){}
    , decltype(_impl_.showbegintime_){}
    , decltype(_impl_.showendtime_){}
    , decltype(_impl_.sort_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.picurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.picurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_picurl().empty()) {
    _this->_impl_.picurl_.Set(from._internal_picurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.skipname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skipname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_skipname().empty()) {
    _this->_impl_.skipname_.Set(from._internal_skipname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pcskipurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pcskipurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pcskipurl().empty()) {
    _this->_impl_.pcskipurl_.Set(from._internal_pcskipurl(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sort_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sort_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTBanner)
}

inline void CSDTBanner::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.countrylist_){arena}
    , decltype(_impl_.zoneid_){arena}
    , /*decltype(_impl_._zoneid_cached_byte_size_)*/{0}
    , decltype(_impl_.downloadlist_){arena}
    , decltype(_impl_.platformlist_){arena}
    , /*decltype(_impl_._platformlist_cached_byte_size_)*/{0}
    , decltype(_impl_.hallmodelist_){arena}
    , /*decltype(_impl_._hallmodelist_cached_byte_size_)*/{0}
    , decltype(_impl_.excludedownload_){arena}
    , decltype(_impl_.picurl_){}
    , decltype(_impl_.skipname_){}
    , decltype(_impl_.pcskipurl_){}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.bannertype_){0}
    , decltype(_impl_.skiptype_){0}
    , decltype(_impl_.skiptap_){0u}
    , decltype(_impl_.mallgoodsid_){0u}
    , decltype(_impl_.showbegintime_){int64_t{0}}
    , decltype(_impl_.showendtime_){int64_t{0}}
    , decltype(_impl_.sort_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.picurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.picurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.skipname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skipname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pcskipurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pcskipurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTBanner::~CSDTBanner() {
  // @@protoc_insertion_point(destructor:msg.CSDTBanner)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTBanner::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.countrylist_.~RepeatedPtrField();
  _impl_.zoneid_.~RepeatedField();
  _impl_.downloadlist_.~RepeatedPtrField();
  _impl_.platformlist_.~RepeatedField();
  _impl_.hallmodelist_.~RepeatedField();
  _impl_.excludedownload_.~RepeatedPtrField();
  _impl_.picurl_.Destroy();
  _impl_.skipname_.Destroy();
  _impl_.pcskipurl_.Destroy();
}

void CSDTBanner::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTBanner::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTBanner)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.countrylist_.Clear();
  _impl_.zoneid_.Clear();
  _impl_.downloadlist_.Clear();
  _impl_.platformlist_.Clear();
  _impl_.hallmodelist_.Clear();
  _impl_.excludedownload_.Clear();
  _impl_.picurl_.ClearToEmpty();
  _impl_.skipname_.ClearToEmpty();
  _impl_.pcskipurl_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sort_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sort_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTBanner::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string PicUrl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_picurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTBanner.PicUrl"));
        } else
          goto handle_unusual;
        continue;
      // .msg.BANNERTYPE BannerType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_bannertype(static_cast<::msg::BANNERTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.SKIPTYPE SkipType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_skiptype(static_cast<::msg::SKIPTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string SkipName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_skipname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTBanner.SkipName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 SkipTap = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.skiptap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MallGoodsId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.mallgoodsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string CountryList = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_countrylist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTBanner.CountryList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 ShowBeginTime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.showbegintime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ShowEndTime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.showendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ZoneId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_zoneid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_zoneid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string DownloadList = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_downloadlist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTBanner.DownloadList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.PLATFORMTYPE PlatformList = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_platformlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 104) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_platformlist(static_cast<::msg::PLATFORMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string PCSkipUrl = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_pcskipurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTBanner.PCSkipUrl"));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 HallModeList = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hallmodelist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 120) {
          _internal_add_hallmodelist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Sort = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.sort_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ExcludeDownload = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_excludedownload();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTBanner.ExcludeDownload"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTBanner::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTBanner)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string PicUrl = 2;
  if (!this->_internal_picurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_picurl().data(), static_cast<int>(this->_internal_picurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTBanner.PicUrl");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_picurl(), target);
  }

  // .msg.BANNERTYPE BannerType = 3;
  if (this->_internal_bannertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_bannertype(), target);
  }

  // .msg.SKIPTYPE SkipType = 4;
  if (this->_internal_skiptype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_skiptype(), target);
  }

  // string SkipName = 5;
  if (!this->_internal_skipname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skipname().data(), static_cast<int>(this->_internal_skipname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTBanner.SkipName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_skipname(), target);
  }

  // uint32 SkipTap = 6;
  if (this->_internal_skiptap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_skiptap(), target);
  }

  // uint32 MallGoodsId = 7;
  if (this->_internal_mallgoodsid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_mallgoodsid(), target);
  }

  // repeated string CountryList = 8;
  for (int i = 0, n = this->_internal_countrylist_size(); i < n; i++) {
    const auto& s = this->_internal_countrylist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTBanner.CountryList");
    target = stream->WriteString(8, s, target);
  }

  // int64 ShowBeginTime = 9;
  if (this->_internal_showbegintime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_showbegintime(), target);
  }

  // int64 ShowEndTime = 10;
  if (this->_internal_showendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_showendtime(), target);
  }

  // repeated uint32 ZoneId = 11;
  {
    int byte_size = _impl_._zoneid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          11, _internal_zoneid(), byte_size, target);
    }
  }

  // repeated string DownloadList = 12;
  for (int i = 0, n = this->_internal_downloadlist_size(); i < n; i++) {
    const auto& s = this->_internal_downloadlist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTBanner.DownloadList");
    target = stream->WriteString(12, s, target);
  }

  // repeated .msg.PLATFORMTYPE PlatformList = 13;
  {
    int byte_size = _impl_._platformlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          13, _impl_.platformlist_, byte_size, target);
    }
  }

  // string PCSkipUrl = 14;
  if (!this->_internal_pcskipurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pcskipurl().data(), static_cast<int>(this->_internal_pcskipurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTBanner.PCSkipUrl");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_pcskipurl(), target);
  }

  // repeated uint32 HallModeList = 15;
  {
    int byte_size = _impl_._hallmodelist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          15, _internal_hallmodelist(), byte_size, target);
    }
  }

  // int64 Sort = 16;
  if (this->_internal_sort() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_sort(), target);
  }

  // repeated string ExcludeDownload = 17;
  for (int i = 0, n = this->_internal_excludedownload_size(); i < n; i++) {
    const auto& s = this->_internal_excludedownload(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTBanner.ExcludeDownload");
    target = stream->WriteString(17, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTBanner)
  return target;
}

size_t CSDTBanner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTBanner)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string CountryList = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.countrylist_.size());
  for (int i = 0, n = _impl_.countrylist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.countrylist_.Get(i));
  }

  // repeated uint32 ZoneId = 11;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.zoneid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._zoneid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string DownloadList = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.downloadlist_.size());
  for (int i = 0, n = _impl_.downloadlist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.downloadlist_.Get(i));
  }

  // repeated .msg.PLATFORMTYPE PlatformList = 13;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_platformlist_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_platformlist(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._platformlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 HallModeList = 15;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.hallmodelist_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._hallmodelist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string ExcludeDownload = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.excludedownload_.size());
  for (int i = 0, n = _impl_.excludedownload_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.excludedownload_.Get(i));
  }

  // string PicUrl = 2;
  if (!this->_internal_picurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_picurl());
  }

  // string SkipName = 5;
  if (!this->_internal_skipname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skipname());
  }

  // string PCSkipUrl = 14;
  if (!this->_internal_pcskipurl().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pcskipurl());
  }

  // int64 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // .msg.BANNERTYPE BannerType = 3;
  if (this->_internal_bannertype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_bannertype());
  }

  // .msg.SKIPTYPE SkipType = 4;
  if (this->_internal_skiptype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_skiptype());
  }

  // uint32 SkipTap = 6;
  if (this->_internal_skiptap() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skiptap());
  }

  // uint32 MallGoodsId = 7;
  if (this->_internal_mallgoodsid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mallgoodsid());
  }

  // int64 ShowBeginTime = 9;
  if (this->_internal_showbegintime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_showbegintime());
  }

  // int64 ShowEndTime = 10;
  if (this->_internal_showendtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_showendtime());
  }

  // int64 Sort = 16;
  if (this->_internal_sort() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_sort());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTBanner::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTBanner::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTBanner::GetClassData() const { return &_class_data_; }


void CSDTBanner::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTBanner*>(&to_msg);
  auto& from = static_cast<const CSDTBanner&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTBanner)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.countrylist_.MergeFrom(from._impl_.countrylist_);
  _this->_impl_.zoneid_.MergeFrom(from._impl_.zoneid_);
  _this->_impl_.downloadlist_.MergeFrom(from._impl_.downloadlist_);
  _this->_impl_.platformlist_.MergeFrom(from._impl_.platformlist_);
  _this->_impl_.hallmodelist_.MergeFrom(from._impl_.hallmodelist_);
  _this->_impl_.excludedownload_.MergeFrom(from._impl_.excludedownload_);
  if (!from._internal_picurl().empty()) {
    _this->_internal_set_picurl(from._internal_picurl());
  }
  if (!from._internal_skipname().empty()) {
    _this->_internal_set_skipname(from._internal_skipname());
  }
  if (!from._internal_pcskipurl().empty()) {
    _this->_internal_set_pcskipurl(from._internal_pcskipurl());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_bannertype() != 0) {
    _this->_internal_set_bannertype(from._internal_bannertype());
  }
  if (from._internal_skiptype() != 0) {
    _this->_internal_set_skiptype(from._internal_skiptype());
  }
  if (from._internal_skiptap() != 0) {
    _this->_internal_set_skiptap(from._internal_skiptap());
  }
  if (from._internal_mallgoodsid() != 0) {
    _this->_internal_set_mallgoodsid(from._internal_mallgoodsid());
  }
  if (from._internal_showbegintime() != 0) {
    _this->_internal_set_showbegintime(from._internal_showbegintime());
  }
  if (from._internal_showendtime() != 0) {
    _this->_internal_set_showendtime(from._internal_showendtime());
  }
  if (from._internal_sort() != 0) {
    _this->_internal_set_sort(from._internal_sort());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTBanner::CopyFrom(const CSDTBanner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTBanner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTBanner::IsInitialized() const {
  return true;
}

void CSDTBanner::InternalSwap(CSDTBanner* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.countrylist_.InternalSwap(&other->_impl_.countrylist_);
  _impl_.zoneid_.InternalSwap(&other->_impl_.zoneid_);
  _impl_.downloadlist_.InternalSwap(&other->_impl_.downloadlist_);
  _impl_.platformlist_.InternalSwap(&other->_impl_.platformlist_);
  _impl_.hallmodelist_.InternalSwap(&other->_impl_.hallmodelist_);
  _impl_.excludedownload_.InternalSwap(&other->_impl_.excludedownload_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.picurl_, lhs_arena,
      &other->_impl_.picurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.skipname_, lhs_arena,
      &other->_impl_.skipname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pcskipurl_, lhs_arena,
      &other->_impl_.pcskipurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTBanner, _impl_.sort_)
      + sizeof(CSDTBanner::_impl_.sort_)
      - PROTOBUF_FIELD_OFFSET(CSDTBanner, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTBanner::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[208]);
}

// ===================================================================

CSDTTournament_RankInfoEntry_DoNotUse::CSDTTournament_RankInfoEntry_DoNotUse() {}
CSDTTournament_RankInfoEntry_DoNotUse::CSDTTournament_RankInfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTTournament_RankInfoEntry_DoNotUse::MergeFrom(const CSDTTournament_RankInfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTTournament_RankInfoEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[209]);
}

// ===================================================================

CSDTTournament_PointsEntry_DoNotUse::CSDTTournament_PointsEntry_DoNotUse() {}
CSDTTournament_PointsEntry_DoNotUse::CSDTTournament_PointsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTTournament_PointsEntry_DoNotUse::MergeFrom(const CSDTTournament_PointsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTTournament_PointsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[210]);
}

// ===================================================================

CSDTTournament_RoundPointsEntry_DoNotUse::CSDTTournament_RoundPointsEntry_DoNotUse() {}
CSDTTournament_RoundPointsEntry_DoNotUse::CSDTTournament_RoundPointsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTTournament_RoundPointsEntry_DoNotUse::MergeFrom(const CSDTTournament_RoundPointsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTTournament_RoundPointsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[211]);
}

// ===================================================================

class CSDTTournament::_Internal {
 public:
};

CSDTTournament::CSDTTournament(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTTournament::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTTournament)
}
CSDTTournament::CSDTTournament(const CSDTTournament& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTTournament* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.classes_){from._impl_.classes_}
    , /*decltype(_impl_.rankinfo_)*/{}
    , decltype(_impl_.pointawardget_){from._impl_.pointawardget_}
    , /*decltype(_impl_._pointawardget_cached_byte_size_)*/{0}
    , /*decltype(_impl_.points_)*/{}
    , /*decltype(_impl_.roundpoints_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.enrollcount_){}
    , decltype(_impl_.joincount_){}
    , decltype(_impl_.round_){}
    , decltype(_impl_.lastgameid_){}
    , decltype(_impl_.enrollclass_){}
    , decltype(_impl_.enroll_){}
    , decltype(_impl_.out_){}
    , decltype(_impl_.battle_){}
    , decltype(_impl_.challengeagain_){}
    , decltype(_impl_.groupidx_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.rankinfo_.MergeFrom(from._impl_.rankinfo_);
  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_impl_.roundpoints_.MergeFrom(from._impl_.roundpoints_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTTournament)
}

inline void CSDTTournament::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.classes_){arena}
    , /*decltype(_impl_.rankinfo_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.pointawardget_){arena}
    , /*decltype(_impl_._pointawardget_cached_byte_size_)*/{0}
    , /*decltype(_impl_.points_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.roundpoints_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.enrollcount_){0u}
    , decltype(_impl_.joincount_){0u}
    , decltype(_impl_.round_){uint64_t{0u}}
    , decltype(_impl_.lastgameid_){uint64_t{0u}}
    , decltype(_impl_.enrollclass_){uint64_t{0u}}
    , decltype(_impl_.enroll_){false}
    , decltype(_impl_.out_){false}
    , decltype(_impl_.battle_){false}
    , decltype(_impl_.challengeagain_){false}
    , decltype(_impl_.groupidx_){0}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTTournament::~CSDTTournament() {
  // @@protoc_insertion_point(destructor:msg.CSDTTournament)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTTournament::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.classes_.~RepeatedPtrField();
  _impl_.rankinfo_.Destruct();
  _impl_.rankinfo_.~MapField();
  _impl_.pointawardget_.~RepeatedField();
  _impl_.points_.Destruct();
  _impl_.points_.~MapField();
  _impl_.roundpoints_.Destruct();
  _impl_.roundpoints_.~MapField();
}

void CSDTTournament::ArenaDtor(void* object) {
  CSDTTournament* _this = reinterpret_cast< CSDTTournament* >(object);
  _this->_impl_.rankinfo_.Destruct();
  _this->_impl_.points_.Destruct();
  _this->_impl_.roundpoints_.Destruct();
}
void CSDTTournament::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTTournament::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTTournament)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.classes_.Clear();
  _impl_.rankinfo_.Clear();
  _impl_.pointawardget_.Clear();
  _impl_.points_.Clear();
  _impl_.roundpoints_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTTournament::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 EnrollCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.enrollcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Enroll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.enroll_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Out = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 JoinCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.joincount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CSDTTournamentClass Classes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 Round = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 LastGameId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.lastgameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 EnrollClass = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.enrollclass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 GroupIdx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.groupidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint64, uint32> RankInfo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.rankinfo_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 PointAwardGet = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_pointawardget(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 96) {
          _internal_add_pointawardget(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Battle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.battle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> Points = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.points_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool ChallengeAgain = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.challengeagain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint64, uint32> RoundPoints = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.roundpoints_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .msg.TOURNAMENTSTATUS Status = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::msg::TOURNAMENTSTATUS>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTTournament::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTTournament)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint32 EnrollCount = 2;
  if (this->_internal_enrollcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_enrollcount(), target);
  }

  // bool Enroll = 3;
  if (this->_internal_enroll() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_enroll(), target);
  }

  // bool Out = 4;
  if (this->_internal_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_out(), target);
  }

  // uint32 JoinCount = 5;
  if (this->_internal_joincount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_joincount(), target);
  }

  // repeated .msg.CSDTTournamentClass Classes = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_classes_size()); i < n; i++) {
    const auto& repfield = this->_internal_classes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 Round = 7;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_round(), target);
  }

  // uint64 LastGameId = 8;
  if (this->_internal_lastgameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_lastgameid(), target);
  }

  // uint64 EnrollClass = 9;
  if (this->_internal_enrollclass() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_enrollclass(), target);
  }

  // int32 GroupIdx = 10;
  if (this->_internal_groupidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_groupidx(), target);
  }

  // map<uint64, uint32> RankInfo = 11;
  if (!this->_internal_rankinfo().empty()) {
    using MapType = ::_pb::Map<uint64_t, uint32_t>;
    using WireHelper = CSDTTournament_RankInfoEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_rankinfo();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated uint32 PointAwardGet = 12;
  {
    int byte_size = _impl_._pointawardget_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          12, _internal_pointawardget(), byte_size, target);
    }
  }

  // bool Battle = 13;
  if (this->_internal_battle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_battle(), target);
  }

  // map<uint32, uint32> Points = 14;
  if (!this->_internal_points().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSDTTournament_PointsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_points();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
      }
    }
  }

  // bool ChallengeAgain = 15;
  if (this->_internal_challengeagain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_challengeagain(), target);
  }

  // map<uint64, uint32> RoundPoints = 16;
  if (!this->_internal_roundpoints().empty()) {
    using MapType = ::_pb::Map<uint64_t, uint32_t>;
    using WireHelper = CSDTTournament_RoundPointsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_roundpoints();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(16, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(16, entry.first, entry.second, target, stream);
      }
    }
  }

  // .msg.TOURNAMENTSTATUS Status = 17;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTTournament)
  return target;
}

size_t CSDTTournament::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTTournament)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTTournamentClass Classes = 6;
  total_size += 1UL * this->_internal_classes_size();
  for (const auto& msg : this->_impl_.classes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<uint64, uint32> RankInfo = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rankinfo_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >::const_iterator
      it = this->_internal_rankinfo().begin();
      it != this->_internal_rankinfo().end(); ++it) {
    total_size += CSDTTournament_RankInfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated uint32 PointAwardGet = 12;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.pointawardget_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._pointawardget_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<uint32, uint32> Points = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_points_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_points().begin();
      it != this->_internal_points().end(); ++it) {
    total_size += CSDTTournament_PointsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, uint32> RoundPoints = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_roundpoints_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >::const_iterator
      it = this->_internal_roundpoints().begin();
      it != this->_internal_roundpoints().end(); ++it) {
    total_size += CSDTTournament_RoundPointsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint32 EnrollCount = 2;
  if (this->_internal_enrollcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_enrollcount());
  }

  // uint32 JoinCount = 5;
  if (this->_internal_joincount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_joincount());
  }

  // uint64 Round = 7;
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_round());
  }

  // uint64 LastGameId = 8;
  if (this->_internal_lastgameid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lastgameid());
  }

  // uint64 EnrollClass = 9;
  if (this->_internal_enrollclass() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_enrollclass());
  }

  // bool Enroll = 3;
  if (this->_internal_enroll() != 0) {
    total_size += 1 + 1;
  }

  // bool Out = 4;
  if (this->_internal_out() != 0) {
    total_size += 1 + 1;
  }

  // bool Battle = 13;
  if (this->_internal_battle() != 0) {
    total_size += 1 + 1;
  }

  // bool ChallengeAgain = 15;
  if (this->_internal_challengeagain() != 0) {
    total_size += 1 + 1;
  }

  // int32 GroupIdx = 10;
  if (this->_internal_groupidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_groupidx());
  }

  // .msg.TOURNAMENTSTATUS Status = 17;
  if (this->_internal_status() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTTournament::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTTournament::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTTournament::GetClassData() const { return &_class_data_; }


void CSDTTournament::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTTournament*>(&to_msg);
  auto& from = static_cast<const CSDTTournament&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTTournament)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.classes_.MergeFrom(from._impl_.classes_);
  _this->_impl_.rankinfo_.MergeFrom(from._impl_.rankinfo_);
  _this->_impl_.pointawardget_.MergeFrom(from._impl_.pointawardget_);
  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_impl_.roundpoints_.MergeFrom(from._impl_.roundpoints_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_enrollcount() != 0) {
    _this->_internal_set_enrollcount(from._internal_enrollcount());
  }
  if (from._internal_joincount() != 0) {
    _this->_internal_set_joincount(from._internal_joincount());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  if (from._internal_lastgameid() != 0) {
    _this->_internal_set_lastgameid(from._internal_lastgameid());
  }
  if (from._internal_enrollclass() != 0) {
    _this->_internal_set_enrollclass(from._internal_enrollclass());
  }
  if (from._internal_enroll() != 0) {
    _this->_internal_set_enroll(from._internal_enroll());
  }
  if (from._internal_out() != 0) {
    _this->_internal_set_out(from._internal_out());
  }
  if (from._internal_battle() != 0) {
    _this->_internal_set_battle(from._internal_battle());
  }
  if (from._internal_challengeagain() != 0) {
    _this->_internal_set_challengeagain(from._internal_challengeagain());
  }
  if (from._internal_groupidx() != 0) {
    _this->_internal_set_groupidx(from._internal_groupidx());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTTournament::CopyFrom(const CSDTTournament& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTTournament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTTournament::IsInitialized() const {
  return true;
}

void CSDTTournament::InternalSwap(CSDTTournament* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.classes_.InternalSwap(&other->_impl_.classes_);
  _impl_.rankinfo_.InternalSwap(&other->_impl_.rankinfo_);
  _impl_.pointawardget_.InternalSwap(&other->_impl_.pointawardget_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  _impl_.roundpoints_.InternalSwap(&other->_impl_.roundpoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTTournament, _impl_.status_)
      + sizeof(CSDTTournament::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(CSDTTournament, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTTournament::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[212]);
}

// ===================================================================

CSDTActDaySign_SignDayEntry_DoNotUse::CSDTActDaySign_SignDayEntry_DoNotUse() {}
CSDTActDaySign_SignDayEntry_DoNotUse::CSDTActDaySign_SignDayEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTActDaySign_SignDayEntry_DoNotUse::MergeFrom(const CSDTActDaySign_SignDayEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTActDaySign_SignDayEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[213]);
}

// ===================================================================

class CSDTActDaySign::_Internal {
 public:
};

CSDTActDaySign::CSDTActDaySign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTActDaySign::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTActDaySign)
}
CSDTActDaySign::CSDTActDaySign(const CSDTActDaySign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTActDaySign* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.signday_)*/{}
    , decltype(_impl_.loop_){}
    , decltype(_impl_.day_){}
    , decltype(_impl_.resigntimes_){}
    , decltype(_impl_.cansign_){}
    , decltype(_impl_.cangetspecialaward_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.signday_.MergeFrom(from._impl_.signday_);
  ::memcpy(&_impl_.loop_, &from._impl_.loop_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cangetspecialaward_) -
    reinterpret_cast<char*>(&_impl_.loop_)) + sizeof(_impl_.cangetspecialaward_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTActDaySign)
}

inline void CSDTActDaySign::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.signday_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.loop_){0u}
    , decltype(_impl_.day_){0u}
    , decltype(_impl_.resigntimes_){0u}
    , decltype(_impl_.cansign_){false}
    , decltype(_impl_.cangetspecialaward_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTActDaySign::~CSDTActDaySign() {
  // @@protoc_insertion_point(destructor:msg.CSDTActDaySign)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTActDaySign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signday_.Destruct();
  _impl_.signday_.~MapField();
}

void CSDTActDaySign::ArenaDtor(void* object) {
  CSDTActDaySign* _this = reinterpret_cast< CSDTActDaySign* >(object);
  _this->_impl_.signday_.Destruct();
}
void CSDTActDaySign::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTActDaySign::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTActDaySign)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signday_.Clear();
  ::memset(&_impl_.loop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cangetspecialaward_) -
      reinterpret_cast<char*>(&_impl_.loop_)) + sizeof(_impl_.cangetspecialaward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTActDaySign::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, .msg.CSDTActDaySignDetail> SignDay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.signday_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 Loop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.loop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Day = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ReSignTimes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.resigntimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool CanSign = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.cansign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool CanGetSpecialAward = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.cangetspecialaward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTActDaySign::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTActDaySign)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .msg.CSDTActDaySignDetail> SignDay = 1;
  if (!this->_internal_signday().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::CSDTActDaySignDetail>;
    using WireHelper = CSDTActDaySign_SignDayEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_signday();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint32 Loop = 2;
  if (this->_internal_loop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_loop(), target);
  }

  // uint32 Day = 3;
  if (this->_internal_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_day(), target);
  }

  // uint32 ReSignTimes = 4;
  if (this->_internal_resigntimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_resigntimes(), target);
  }

  // bool CanSign = 5;
  if (this->_internal_cansign() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_cansign(), target);
  }

  // bool CanGetSpecialAward = 6;
  if (this->_internal_cangetspecialaward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_cangetspecialaward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTActDaySign)
  return target;
}

size_t CSDTActDaySign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTActDaySign)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .msg.CSDTActDaySignDetail> SignDay = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_signday_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTActDaySignDetail >::const_iterator
      it = this->_internal_signday().begin();
      it != this->_internal_signday().end(); ++it) {
    total_size += CSDTActDaySign_SignDayEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint32 Loop = 2;
  if (this->_internal_loop() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_loop());
  }

  // uint32 Day = 3;
  if (this->_internal_day() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_day());
  }

  // uint32 ReSignTimes = 4;
  if (this->_internal_resigntimes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_resigntimes());
  }

  // bool CanSign = 5;
  if (this->_internal_cansign() != 0) {
    total_size += 1 + 1;
  }

  // bool CanGetSpecialAward = 6;
  if (this->_internal_cangetspecialaward() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTActDaySign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTActDaySign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTActDaySign::GetClassData() const { return &_class_data_; }


void CSDTActDaySign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTActDaySign*>(&to_msg);
  auto& from = static_cast<const CSDTActDaySign&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTActDaySign)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.signday_.MergeFrom(from._impl_.signday_);
  if (from._internal_loop() != 0) {
    _this->_internal_set_loop(from._internal_loop());
  }
  if (from._internal_day() != 0) {
    _this->_internal_set_day(from._internal_day());
  }
  if (from._internal_resigntimes() != 0) {
    _this->_internal_set_resigntimes(from._internal_resigntimes());
  }
  if (from._internal_cansign() != 0) {
    _this->_internal_set_cansign(from._internal_cansign());
  }
  if (from._internal_cangetspecialaward() != 0) {
    _this->_internal_set_cangetspecialaward(from._internal_cangetspecialaward());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTActDaySign::CopyFrom(const CSDTActDaySign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTActDaySign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTActDaySign::IsInitialized() const {
  return true;
}

void CSDTActDaySign::InternalSwap(CSDTActDaySign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.signday_.InternalSwap(&other->_impl_.signday_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTActDaySign, _impl_.cangetspecialaward_)
      + sizeof(CSDTActDaySign::_impl_.cangetspecialaward_)
      - PROTOBUF_FIELD_OFFSET(CSDTActDaySign, _impl_.loop_)>(
          reinterpret_cast<char*>(&_impl_.loop_),
          reinterpret_cast<char*>(&other->_impl_.loop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTActDaySign::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[214]);
}

// ===================================================================

class CSDTActDaySignDetail::_Internal {
 public:
};

CSDTActDaySignDetail::CSDTActDaySignDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTActDaySignDetail)
}
CSDTActDaySignDetail::CSDTActDaySignDetail(const CSDTActDaySignDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTActDaySignDetail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTActDaySignDetail)
}

inline void CSDTActDaySignDetail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTActDaySignDetail::~CSDTActDaySignDetail() {
  // @@protoc_insertion_point(destructor:msg.CSDTActDaySignDetail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTActDaySignDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDTActDaySignDetail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTActDaySignDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTActDaySignDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTActDaySignDetail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.ActSignType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::ActSignType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 Time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTActDaySignDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTActDaySignDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.ActSignType Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int64 Time = 2;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTActDaySignDetail)
  return target;
}

size_t CSDTActDaySignDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTActDaySignDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Time = 2;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // .msg.ActSignType Type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTActDaySignDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTActDaySignDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTActDaySignDetail::GetClassData() const { return &_class_data_; }


void CSDTActDaySignDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTActDaySignDetail*>(&to_msg);
  auto& from = static_cast<const CSDTActDaySignDetail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTActDaySignDetail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTActDaySignDetail::CopyFrom(const CSDTActDaySignDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTActDaySignDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTActDaySignDetail::IsInitialized() const {
  return true;
}

void CSDTActDaySignDetail::InternalSwap(CSDTActDaySignDetail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTActDaySignDetail, _impl_.type_)
      + sizeof(CSDTActDaySignDetail::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(CSDTActDaySignDetail, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTActDaySignDetail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[215]);
}

// ===================================================================

class CSDTGDCommonBin::_Internal {
 public:
};

CSDTGDCommonBin::CSDTGDCommonBin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTGDCommonBin)
}
CSDTGDCommonBin::CSDTGDCommonBin(const CSDTGDCommonBin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTGDCommonBin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.md5sum_){}
    , decltype(_impl_.datas_){}
    , decltype(_impl_.conftyp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.md5sum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.md5sum_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_md5sum().empty()) {
    _this->_impl_.md5sum_.Set(from._internal_md5sum(), 
      _this->GetArenaForAllocation());
  }
  _impl_.datas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.datas_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_datas().empty()) {
    _this->_impl_.datas_.Set(from._internal_datas(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.conftyp_ = from._impl_.conftyp_;
  // @@protoc_insertion_point(copy_constructor:msg.CSDTGDCommonBin)
}

inline void CSDTGDCommonBin::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.md5sum_){}
    , decltype(_impl_.datas_){}
    , decltype(_impl_.conftyp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.md5sum_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.md5sum_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.datas_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.datas_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTGDCommonBin::~CSDTGDCommonBin() {
  // @@protoc_insertion_point(destructor:msg.CSDTGDCommonBin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTGDCommonBin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.md5sum_.Destroy();
  _impl_.datas_.Destroy();
}

void CSDTGDCommonBin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTGDCommonBin::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTGDCommonBin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.md5sum_.ClearToEmpty();
  _impl_.datas_.ClearToEmpty();
  _impl_.conftyp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTGDCommonBin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTGDCommonBin.Name"));
        } else
          goto handle_unusual;
        continue;
      // string Md5sum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_md5sum();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTGDCommonBin.Md5sum"));
        } else
          goto handle_unusual;
        continue;
      // .msg.GDBinType ConfTyp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_conftyp(static_cast<::msg::GDBinType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes Datas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_datas();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTGDCommonBin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTGDCommonBin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTGDCommonBin.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string Md5sum = 2;
  if (!this->_internal_md5sum().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_md5sum().data(), static_cast<int>(this->_internal_md5sum().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTGDCommonBin.Md5sum");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_md5sum(), target);
  }

  // .msg.GDBinType ConfTyp = 3;
  if (this->_internal_conftyp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_conftyp(), target);
  }

  // bytes Datas = 4;
  if (!this->_internal_datas().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_datas(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTGDCommonBin)
  return target;
}

size_t CSDTGDCommonBin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTGDCommonBin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Md5sum = 2;
  if (!this->_internal_md5sum().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_md5sum());
  }

  // bytes Datas = 4;
  if (!this->_internal_datas().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_datas());
  }

  // .msg.GDBinType ConfTyp = 3;
  if (this->_internal_conftyp() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_conftyp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTGDCommonBin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTGDCommonBin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTGDCommonBin::GetClassData() const { return &_class_data_; }


void CSDTGDCommonBin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTGDCommonBin*>(&to_msg);
  auto& from = static_cast<const CSDTGDCommonBin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTGDCommonBin)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_md5sum().empty()) {
    _this->_internal_set_md5sum(from._internal_md5sum());
  }
  if (!from._internal_datas().empty()) {
    _this->_internal_set_datas(from._internal_datas());
  }
  if (from._internal_conftyp() != 0) {
    _this->_internal_set_conftyp(from._internal_conftyp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTGDCommonBin::CopyFrom(const CSDTGDCommonBin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTGDCommonBin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTGDCommonBin::IsInitialized() const {
  return true;
}

void CSDTGDCommonBin::InternalSwap(CSDTGDCommonBin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.md5sum_, lhs_arena,
      &other->_impl_.md5sum_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.datas_, lhs_arena,
      &other->_impl_.datas_, rhs_arena
  );
  swap(_impl_.conftyp_, other->_impl_.conftyp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTGDCommonBin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[216]);
}

// ===================================================================

CSDTTournamentClass_GroupsEntry_DoNotUse::CSDTTournamentClass_GroupsEntry_DoNotUse() {}
CSDTTournamentClass_GroupsEntry_DoNotUse::CSDTTournamentClass_GroupsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTTournamentClass_GroupsEntry_DoNotUse::MergeFrom(const CSDTTournamentClass_GroupsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTTournamentClass_GroupsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[217]);
}

// ===================================================================

class CSDTTournamentClass::_Internal {
 public:
};

CSDTTournamentClass::CSDTTournamentClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTTournamentClass::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTTournamentClass)
}
CSDTTournamentClass::CSDTTournamentClass(const CSDTTournamentClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTTournamentClass* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.groups_)*/{}
    , decltype(_impl_.classid_){}
    , decltype(_impl_.maxplayercount_){}
    , decltype(_impl_.cancel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.groups_.MergeFrom(from._impl_.groups_);
  ::memcpy(&_impl_.classid_, &from._impl_.classid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cancel_) -
    reinterpret_cast<char*>(&_impl_.classid_)) + sizeof(_impl_.cancel_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTTournamentClass)
}

inline void CSDTTournamentClass::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.groups_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.classid_){uint64_t{0u}}
    , decltype(_impl_.maxplayercount_){0}
    , decltype(_impl_.cancel_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTTournamentClass::~CSDTTournamentClass() {
  // @@protoc_insertion_point(destructor:msg.CSDTTournamentClass)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTTournamentClass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groups_.Destruct();
  _impl_.groups_.~MapField();
}

void CSDTTournamentClass::ArenaDtor(void* object) {
  CSDTTournamentClass* _this = reinterpret_cast< CSDTTournamentClass* >(object);
  _this->_impl_.groups_.Destruct();
}
void CSDTTournamentClass::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTTournamentClass::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTTournamentClass)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.groups_.Clear();
  ::memset(&_impl_.classid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cancel_) -
      reinterpret_cast<char*>(&_impl_.classid_)) + sizeof(_impl_.cancel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTTournamentClass::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ClassId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.classid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .msg.CSDTBattleGroup> Groups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.groups_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 MaxPlayerCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.maxplayercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Cancel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.cancel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTTournamentClass::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTTournamentClass)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ClassId = 1;
  if (this->_internal_classid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_classid(), target);
  }

  // map<uint32, .msg.CSDTBattleGroup> Groups = 2;
  if (!this->_internal_groups().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::CSDTBattleGroup>;
    using WireHelper = CSDTTournamentClass_GroupsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_groups();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  // int32 MaxPlayerCount = 3;
  if (this->_internal_maxplayercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_maxplayercount(), target);
  }

  // bool Cancel = 4;
  if (this->_internal_cancel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_cancel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTTournamentClass)
  return target;
}

size_t CSDTTournamentClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTTournamentClass)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .msg.CSDTBattleGroup> Groups = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_groups_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTBattleGroup >::const_iterator
      it = this->_internal_groups().begin();
      it != this->_internal_groups().end(); ++it) {
    total_size += CSDTTournamentClass_GroupsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 ClassId = 1;
  if (this->_internal_classid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_classid());
  }

  // int32 MaxPlayerCount = 3;
  if (this->_internal_maxplayercount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxplayercount());
  }

  // bool Cancel = 4;
  if (this->_internal_cancel() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTTournamentClass::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTTournamentClass::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTTournamentClass::GetClassData() const { return &_class_data_; }


void CSDTTournamentClass::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTTournamentClass*>(&to_msg);
  auto& from = static_cast<const CSDTTournamentClass&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTTournamentClass)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.groups_.MergeFrom(from._impl_.groups_);
  if (from._internal_classid() != 0) {
    _this->_internal_set_classid(from._internal_classid());
  }
  if (from._internal_maxplayercount() != 0) {
    _this->_internal_set_maxplayercount(from._internal_maxplayercount());
  }
  if (from._internal_cancel() != 0) {
    _this->_internal_set_cancel(from._internal_cancel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTTournamentClass::CopyFrom(const CSDTTournamentClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTTournamentClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTTournamentClass::IsInitialized() const {
  return true;
}

void CSDTTournamentClass::InternalSwap(CSDTTournamentClass* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.groups_.InternalSwap(&other->_impl_.groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTTournamentClass, _impl_.cancel_)
      + sizeof(CSDTTournamentClass::_impl_.cancel_)
      - PROTOBUF_FIELD_OFFSET(CSDTTournamentClass, _impl_.classid_)>(
          reinterpret_cast<char*>(&_impl_.classid_),
          reinterpret_cast<char*>(&other->_impl_.classid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTTournamentClass::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[218]);
}

// ===================================================================

CSDTBattleGroup_PlayersEntry_DoNotUse::CSDTBattleGroup_PlayersEntry_DoNotUse() {}
CSDTBattleGroup_PlayersEntry_DoNotUse::CSDTBattleGroup_PlayersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTBattleGroup_PlayersEntry_DoNotUse::MergeFrom(const CSDTBattleGroup_PlayersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTBattleGroup_PlayersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[219]);
}

// ===================================================================

CSDTBattleGroup_GameIDsEntry_DoNotUse::CSDTBattleGroup_GameIDsEntry_DoNotUse() {}
CSDTBattleGroup_GameIDsEntry_DoNotUse::CSDTBattleGroup_GameIDsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTBattleGroup_GameIDsEntry_DoNotUse::MergeFrom(const CSDTBattleGroup_GameIDsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTBattleGroup_GameIDsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[220]);
}

// ===================================================================

class CSDTBattleGroup::_Internal {
 public:
};

CSDTBattleGroup::CSDTBattleGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTBattleGroup::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTBattleGroup)
}
CSDTBattleGroup::CSDTBattleGroup(const CSDTBattleGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTBattleGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.players_)*/{}
    , /*decltype(_impl_.gameids_)*/{}
    , decltype(_impl_.lastpvpendtime_){}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.roundid_){}
    , decltype(_impl_.isfighting_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_impl_.gameids_.MergeFrom(from._impl_.gameids_);
  ::memcpy(&_impl_.lastpvpendtime_, &from._impl_.lastpvpendtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isfighting_) -
    reinterpret_cast<char*>(&_impl_.lastpvpendtime_)) + sizeof(_impl_.isfighting_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTBattleGroup)
}

inline void CSDTBattleGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.players_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.gameids_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.lastpvpendtime_){int64_t{0}}
    , decltype(_impl_.gameid_){uint64_t{0u}}
    , decltype(_impl_.roundid_){uint64_t{0u}}
    , decltype(_impl_.isfighting_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTBattleGroup::~CSDTBattleGroup() {
  // @@protoc_insertion_point(destructor:msg.CSDTBattleGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTBattleGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.Destruct();
  _impl_.players_.~MapField();
  _impl_.gameids_.Destruct();
  _impl_.gameids_.~MapField();
}

void CSDTBattleGroup::ArenaDtor(void* object) {
  CSDTBattleGroup* _this = reinterpret_cast< CSDTBattleGroup* >(object);
  _this->_impl_.players_.Destruct();
  _this->_impl_.gameids_.Destruct();
}
void CSDTBattleGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTBattleGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTBattleGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.gameids_.Clear();
  ::memset(&_impl_.lastpvpendtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.isfighting_) -
      reinterpret_cast<char*>(&_impl_.lastpvpendtime_)) + sizeof(_impl_.isfighting_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTBattleGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, uint64> Players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.players_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 LastPvpEndTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.lastpvpendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 GameID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsFighting = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.isfighting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 RoundID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.roundid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, uint64> GameIDs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.gameids_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTBattleGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTBattleGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, uint64> Players = 1;
  if (!this->_internal_players().empty()) {
    using MapType = ::_pb::Map<std::string, uint64_t>;
    using WireHelper = CSDTBattleGroup_PlayersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_players();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.CSDTBattleGroup.PlayersEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // int64 LastPvpEndTime = 2;
  if (this->_internal_lastpvpendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_lastpvpendtime(), target);
  }

  // uint64 GameID = 3;
  if (this->_internal_gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_gameid(), target);
  }

  // bool IsFighting = 4;
  if (this->_internal_isfighting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_isfighting(), target);
  }

  // uint64 RoundID = 5;
  if (this->_internal_roundid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_roundid(), target);
  }

  // map<string, uint64> GameIDs = 6;
  if (!this->_internal_gameids().empty()) {
    using MapType = ::_pb::Map<std::string, uint64_t>;
    using WireHelper = CSDTBattleGroup_GameIDsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_gameids();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.CSDTBattleGroup.GameIDsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTBattleGroup)
  return target;
}

size_t CSDTBattleGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTBattleGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, uint64> Players = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_players_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >::const_iterator
      it = this->_internal_players().begin();
      it != this->_internal_players().end(); ++it) {
    total_size += CSDTBattleGroup_PlayersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, uint64> GameIDs = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_gameids_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >::const_iterator
      it = this->_internal_gameids().begin();
      it != this->_internal_gameids().end(); ++it) {
    total_size += CSDTBattleGroup_GameIDsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 LastPvpEndTime = 2;
  if (this->_internal_lastpvpendtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lastpvpendtime());
  }

  // uint64 GameID = 3;
  if (this->_internal_gameid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gameid());
  }

  // uint64 RoundID = 5;
  if (this->_internal_roundid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roundid());
  }

  // bool IsFighting = 4;
  if (this->_internal_isfighting() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTBattleGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTBattleGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTBattleGroup::GetClassData() const { return &_class_data_; }


void CSDTBattleGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTBattleGroup*>(&to_msg);
  auto& from = static_cast<const CSDTBattleGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTBattleGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_impl_.gameids_.MergeFrom(from._impl_.gameids_);
  if (from._internal_lastpvpendtime() != 0) {
    _this->_internal_set_lastpvpendtime(from._internal_lastpvpendtime());
  }
  if (from._internal_gameid() != 0) {
    _this->_internal_set_gameid(from._internal_gameid());
  }
  if (from._internal_roundid() != 0) {
    _this->_internal_set_roundid(from._internal_roundid());
  }
  if (from._internal_isfighting() != 0) {
    _this->_internal_set_isfighting(from._internal_isfighting());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTBattleGroup::CopyFrom(const CSDTBattleGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTBattleGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTBattleGroup::IsInitialized() const {
  return true;
}

void CSDTBattleGroup::InternalSwap(CSDTBattleGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  _impl_.gameids_.InternalSwap(&other->_impl_.gameids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTBattleGroup, _impl_.isfighting_)
      + sizeof(CSDTBattleGroup::_impl_.isfighting_)
      - PROTOBUF_FIELD_OFFSET(CSDTBattleGroup, _impl_.lastpvpendtime_)>(
          reinterpret_cast<char*>(&_impl_.lastpvpendtime_),
          reinterpret_cast<char*>(&other->_impl_.lastpvpendtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTBattleGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[221]);
}

// ===================================================================

class CSDTEnrollEnd::_Internal {
 public:
};

CSDTEnrollEnd::CSDTEnrollEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTEnrollEnd)
}
CSDTEnrollEnd::CSDTEnrollEnd(const CSDTEnrollEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTEnrollEnd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cancelclasses_){from._impl_.cancelclasses_}
    , /*decltype(_impl_._cancelclasses_cached_byte_size_)*/{0}
    , decltype(_impl_.classgroups_){from._impl_.classgroups_}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:msg.CSDTEnrollEnd)
}

inline void CSDTEnrollEnd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cancelclasses_){arena}
    , /*decltype(_impl_._cancelclasses_cached_byte_size_)*/{0}
    , decltype(_impl_.classgroups_){arena}
    , decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTEnrollEnd::~CSDTEnrollEnd() {
  // @@protoc_insertion_point(destructor:msg.CSDTEnrollEnd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTEnrollEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cancelclasses_.~RepeatedField();
  _impl_.classgroups_.~RepeatedPtrField();
}

void CSDTEnrollEnd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTEnrollEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTEnrollEnd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cancelclasses_.Clear();
  _impl_.classgroups_.Clear();
  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTEnrollEnd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 CancelClasses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_cancelclasses(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_cancelclasses(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CSDTTournamentClass ClassGroups = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classgroups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTEnrollEnd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTEnrollEnd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // repeated uint64 CancelClasses = 2;
  {
    int byte_size = _impl_._cancelclasses_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_cancelclasses(), byte_size, target);
    }
  }

  // repeated .msg.CSDTTournamentClass ClassGroups = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_classgroups_size()); i < n; i++) {
    const auto& repfield = this->_internal_classgroups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTEnrollEnd)
  return target;
}

size_t CSDTEnrollEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTEnrollEnd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 CancelClasses = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.cancelclasses_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._cancelclasses_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .msg.CSDTTournamentClass ClassGroups = 3;
  total_size += 1UL * this->_internal_classgroups_size();
  for (const auto& msg : this->_impl_.classgroups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTEnrollEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTEnrollEnd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTEnrollEnd::GetClassData() const { return &_class_data_; }


void CSDTEnrollEnd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTEnrollEnd*>(&to_msg);
  auto& from = static_cast<const CSDTEnrollEnd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTEnrollEnd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cancelclasses_.MergeFrom(from._impl_.cancelclasses_);
  _this->_impl_.classgroups_.MergeFrom(from._impl_.classgroups_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTEnrollEnd::CopyFrom(const CSDTEnrollEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTEnrollEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTEnrollEnd::IsInitialized() const {
  return true;
}

void CSDTEnrollEnd::InternalSwap(CSDTEnrollEnd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cancelclasses_.InternalSwap(&other->_impl_.cancelclasses_);
  _impl_.classgroups_.InternalSwap(&other->_impl_.classgroups_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTEnrollEnd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[222]);
}

// ===================================================================

CSDTNewTournament_ClassesEntry_DoNotUse::CSDTNewTournament_ClassesEntry_DoNotUse() {}
CSDTNewTournament_ClassesEntry_DoNotUse::CSDTNewTournament_ClassesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTNewTournament_ClassesEntry_DoNotUse::MergeFrom(const CSDTNewTournament_ClassesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTNewTournament_ClassesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[223]);
}

// ===================================================================

class CSDTNewTournament::_Internal {
 public:
};

CSDTNewTournament::CSDTNewTournament(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTNewTournament::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTNewTournament)
}
CSDTNewTournament::CSDTNewTournament(const CSDTNewTournament& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTNewTournament* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.classes_)*/{}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.classes_.MergeFrom(from._impl_.classes_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:msg.CSDTNewTournament)
}

inline void CSDTNewTournament::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.classes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTNewTournament::~CSDTNewTournament() {
  // @@protoc_insertion_point(destructor:msg.CSDTNewTournament)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTNewTournament::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.classes_.Destruct();
  _impl_.classes_.~MapField();
}

void CSDTNewTournament::ArenaDtor(void* object) {
  CSDTNewTournament* _this = reinterpret_cast< CSDTNewTournament* >(object);
  _this->_impl_.classes_.Destruct();
}
void CSDTNewTournament::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTNewTournament::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTNewTournament)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.classes_.Clear();
  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTNewTournament::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint64, int32> Classes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.classes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTNewTournament::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTNewTournament)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // map<uint64, int32> Classes = 2;
  if (!this->_internal_classes().empty()) {
    using MapType = ::_pb::Map<uint64_t, int32_t>;
    using WireHelper = CSDTNewTournament_ClassesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_classes();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTNewTournament)
  return target;
}

size_t CSDTNewTournament::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTNewTournament)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, int32> Classes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_classes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >::const_iterator
      it = this->_internal_classes().begin();
      it != this->_internal_classes().end(); ++it) {
    total_size += CSDTNewTournament_ClassesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTNewTournament::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTNewTournament::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTNewTournament::GetClassData() const { return &_class_data_; }


void CSDTNewTournament::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTNewTournament*>(&to_msg);
  auto& from = static_cast<const CSDTNewTournament&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTNewTournament)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.classes_.MergeFrom(from._impl_.classes_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTNewTournament::CopyFrom(const CSDTNewTournament& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTNewTournament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTNewTournament::IsInitialized() const {
  return true;
}

void CSDTNewTournament::InternalSwap(CSDTNewTournament* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.classes_.InternalSwap(&other->_impl_.classes_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTNewTournament::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[224]);
}

// ===================================================================

class TournamentDesc::_Internal {
 public:
};

TournamentDesc::TournamentDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TournamentDesc)
}
TournamentDesc::TournamentDesc(const TournamentDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TournamentDesc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tournamentid_){}
    , decltype(_impl_.tnclass_){}
    , decltype(_impl_.tnclassround_){}
    , decltype(_impl_.groupindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tournamentid_, &from._impl_.tournamentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.groupindex_) -
    reinterpret_cast<char*>(&_impl_.tournamentid_)) + sizeof(_impl_.groupindex_));
  // @@protoc_insertion_point(copy_constructor:msg.TournamentDesc)
}

inline void TournamentDesc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tournamentid_){uint64_t{0u}}
    , decltype(_impl_.tnclass_){uint64_t{0u}}
    , decltype(_impl_.tnclassround_){uint64_t{0u}}
    , decltype(_impl_.groupindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TournamentDesc::~TournamentDesc() {
  // @@protoc_insertion_point(destructor:msg.TournamentDesc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TournamentDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TournamentDesc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TournamentDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TournamentDesc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.tournamentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.groupindex_) -
      reinterpret_cast<char*>(&_impl_.tournamentid_)) + sizeof(_impl_.groupindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TournamentDesc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 TournamentID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tournamentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 TNClass = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tnclass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 GroupIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.groupindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 TNClassRound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.tnclassround_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TournamentDesc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TournamentDesc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 TournamentID = 1;
  if (this->_internal_tournamentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tournamentid(), target);
  }

  // uint64 TNClass = 2;
  if (this->_internal_tnclass() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tnclass(), target);
  }

  // int32 GroupIndex = 3;
  if (this->_internal_groupindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_groupindex(), target);
  }

  // uint64 TNClassRound = 4;
  if (this->_internal_tnclassround() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_tnclassround(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TournamentDesc)
  return target;
}

size_t TournamentDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TournamentDesc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 TournamentID = 1;
  if (this->_internal_tournamentid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tournamentid());
  }

  // uint64 TNClass = 2;
  if (this->_internal_tnclass() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tnclass());
  }

  // uint64 TNClassRound = 4;
  if (this->_internal_tnclassround() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tnclassround());
  }

  // int32 GroupIndex = 3;
  if (this->_internal_groupindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_groupindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TournamentDesc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TournamentDesc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TournamentDesc::GetClassData() const { return &_class_data_; }


void TournamentDesc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TournamentDesc*>(&to_msg);
  auto& from = static_cast<const TournamentDesc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TournamentDesc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tournamentid() != 0) {
    _this->_internal_set_tournamentid(from._internal_tournamentid());
  }
  if (from._internal_tnclass() != 0) {
    _this->_internal_set_tnclass(from._internal_tnclass());
  }
  if (from._internal_tnclassround() != 0) {
    _this->_internal_set_tnclassround(from._internal_tnclassround());
  }
  if (from._internal_groupindex() != 0) {
    _this->_internal_set_groupindex(from._internal_groupindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TournamentDesc::CopyFrom(const TournamentDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TournamentDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentDesc::IsInitialized() const {
  return true;
}

void TournamentDesc::InternalSwap(TournamentDesc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TournamentDesc, _impl_.groupindex_)
      + sizeof(TournamentDesc::_impl_.groupindex_)
      - PROTOBUF_FIELD_OFFSET(TournamentDesc, _impl_.tournamentid_)>(
          reinterpret_cast<char*>(&_impl_.tournamentid_),
          reinterpret_cast<char*>(&other->_impl_.tournamentid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TournamentDesc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[225]);
}

// ===================================================================

class TournamentRoom::_Internal {
 public:
};

TournamentRoom::TournamentRoom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TournamentRoom)
}
TournamentRoom::TournamentRoom(const TournamentRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TournamentRoom* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.readyids_){from._impl_.readyids_}
    , decltype(_impl_.playerdatas_){from._impl_.playerdatas_}
    , decltype(_impl_.gamestarttime_){}
    , decltype(_impl_.selfslot_){}
    , decltype(_impl_.maxplayercount_){}
    , decltype(_impl_.tournamentid_){}
    , decltype(_impl_.classid_){}
    , decltype(_impl_.roundid_){}
    , decltype(_impl_.groupindex_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gamestarttime_, &from._impl_.gamestarttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.gamestarttime_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:msg.TournamentRoom)
}

inline void TournamentRoom::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.readyids_){arena}
    , decltype(_impl_.playerdatas_){arena}
    , decltype(_impl_.gamestarttime_){uint64_t{0u}}
    , decltype(_impl_.selfslot_){0u}
    , decltype(_impl_.maxplayercount_){0}
    , decltype(_impl_.tournamentid_){uint64_t{0u}}
    , decltype(_impl_.classid_){uint64_t{0u}}
    , decltype(_impl_.roundid_){uint64_t{0u}}
    , decltype(_impl_.groupindex_){0}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TournamentRoom::~TournamentRoom() {
  // @@protoc_insertion_point(destructor:msg.TournamentRoom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TournamentRoom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.readyids_.~RepeatedPtrField();
  _impl_.playerdatas_.~RepeatedPtrField();
}

void TournamentRoom::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TournamentRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TournamentRoom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.readyids_.Clear();
  _impl_.playerdatas_.Clear();
  ::memset(&_impl_.gamestarttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.gamestarttime_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TournamentRoom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 GameStartTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gamestarttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string ReadyIds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_readyids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.TournamentRoom.ReadyIds"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 SelfSlot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.selfslot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.PvpPlayerData PlayerDatas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_playerdatas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 MaxPlayerCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.maxplayercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 TournamentID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.tournamentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ClassID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.classid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 RoundID = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.roundid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 GroupIndex = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.groupindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TeamState Status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::msg::TeamState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TournamentRoom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TournamentRoom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 GameStartTime = 1;
  if (this->_internal_gamestarttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gamestarttime(), target);
  }

  // repeated string ReadyIds = 2;
  for (int i = 0, n = this->_internal_readyids_size(); i < n; i++) {
    const auto& s = this->_internal_readyids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TournamentRoom.ReadyIds");
    target = stream->WriteString(2, s, target);
  }

  // uint32 SelfSlot = 3;
  if (this->_internal_selfslot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_selfslot(), target);
  }

  // repeated .msg.PvpPlayerData PlayerDatas = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_playerdatas_size()); i < n; i++) {
    const auto& repfield = this->_internal_playerdatas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 MaxPlayerCount = 5;
  if (this->_internal_maxplayercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_maxplayercount(), target);
  }

  // uint64 TournamentID = 6;
  if (this->_internal_tournamentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_tournamentid(), target);
  }

  // uint64 ClassID = 7;
  if (this->_internal_classid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_classid(), target);
  }

  // uint64 RoundID = 8;
  if (this->_internal_roundid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_roundid(), target);
  }

  // int32 GroupIndex = 9;
  if (this->_internal_groupindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_groupindex(), target);
  }

  // .msg.TeamState Status = 10;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TournamentRoom)
  return target;
}

size_t TournamentRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TournamentRoom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ReadyIds = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.readyids_.size());
  for (int i = 0, n = _impl_.readyids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.readyids_.Get(i));
  }

  // repeated .msg.PvpPlayerData PlayerDatas = 4;
  total_size += 1UL * this->_internal_playerdatas_size();
  for (const auto& msg : this->_impl_.playerdatas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 GameStartTime = 1;
  if (this->_internal_gamestarttime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gamestarttime());
  }

  // uint32 SelfSlot = 3;
  if (this->_internal_selfslot() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_selfslot());
  }

  // int32 MaxPlayerCount = 5;
  if (this->_internal_maxplayercount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxplayercount());
  }

  // uint64 TournamentID = 6;
  if (this->_internal_tournamentid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tournamentid());
  }

  // uint64 ClassID = 7;
  if (this->_internal_classid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_classid());
  }

  // uint64 RoundID = 8;
  if (this->_internal_roundid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roundid());
  }

  // int32 GroupIndex = 9;
  if (this->_internal_groupindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_groupindex());
  }

  // .msg.TeamState Status = 10;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TournamentRoom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TournamentRoom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TournamentRoom::GetClassData() const { return &_class_data_; }


void TournamentRoom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TournamentRoom*>(&to_msg);
  auto& from = static_cast<const TournamentRoom&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TournamentRoom)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.readyids_.MergeFrom(from._impl_.readyids_);
  _this->_impl_.playerdatas_.MergeFrom(from._impl_.playerdatas_);
  if (from._internal_gamestarttime() != 0) {
    _this->_internal_set_gamestarttime(from._internal_gamestarttime());
  }
  if (from._internal_selfslot() != 0) {
    _this->_internal_set_selfslot(from._internal_selfslot());
  }
  if (from._internal_maxplayercount() != 0) {
    _this->_internal_set_maxplayercount(from._internal_maxplayercount());
  }
  if (from._internal_tournamentid() != 0) {
    _this->_internal_set_tournamentid(from._internal_tournamentid());
  }
  if (from._internal_classid() != 0) {
    _this->_internal_set_classid(from._internal_classid());
  }
  if (from._internal_roundid() != 0) {
    _this->_internal_set_roundid(from._internal_roundid());
  }
  if (from._internal_groupindex() != 0) {
    _this->_internal_set_groupindex(from._internal_groupindex());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TournamentRoom::CopyFrom(const TournamentRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TournamentRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentRoom::IsInitialized() const {
  return true;
}

void TournamentRoom::InternalSwap(TournamentRoom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.readyids_.InternalSwap(&other->_impl_.readyids_);
  _impl_.playerdatas_.InternalSwap(&other->_impl_.playerdatas_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TournamentRoom, _impl_.status_)
      + sizeof(TournamentRoom::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(TournamentRoom, _impl_.gamestarttime_)>(
          reinterpret_cast<char*>(&_impl_.gamestarttime_),
          reinterpret_cast<char*>(&other->_impl_.gamestarttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TournamentRoom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[226]);
}

// ===================================================================

PlayerTournament_DataEntry_DoNotUse::PlayerTournament_DataEntry_DoNotUse() {}
PlayerTournament_DataEntry_DoNotUse::PlayerTournament_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PlayerTournament_DataEntry_DoNotUse::MergeFrom(const PlayerTournament_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PlayerTournament_DataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[227]);
}

// ===================================================================

PlayerTournament_PointsEntry_DoNotUse::PlayerTournament_PointsEntry_DoNotUse() {}
PlayerTournament_PointsEntry_DoNotUse::PlayerTournament_PointsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PlayerTournament_PointsEntry_DoNotUse::MergeFrom(const PlayerTournament_PointsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PlayerTournament_PointsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[228]);
}

// ===================================================================

PlayerTournament_EnrollCountEntry_DoNotUse::PlayerTournament_EnrollCountEntry_DoNotUse() {}
PlayerTournament_EnrollCountEntry_DoNotUse::PlayerTournament_EnrollCountEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PlayerTournament_EnrollCountEntry_DoNotUse::MergeFrom(const PlayerTournament_EnrollCountEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PlayerTournament_EnrollCountEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[229]);
}

// ===================================================================

class PlayerTournament::_Internal {
 public:
};

PlayerTournament::PlayerTournament(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PlayerTournament::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.PlayerTournament)
}
PlayerTournament::PlayerTournament(const PlayerTournament& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerTournament* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.data_)*/{}
    , /*decltype(_impl_.points_)*/{}
    , /*decltype(_impl_.enrollcount_)*/{}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_impl_.enrollcount_.MergeFrom(from._impl_.enrollcount_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.PlayerTournament)
}

inline void PlayerTournament::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.data_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.points_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.enrollcount_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerTournament::~PlayerTournament() {
  // @@protoc_insertion_point(destructor:msg.PlayerTournament)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PlayerTournament::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destruct();
  _impl_.data_.~MapField();
  _impl_.points_.Destruct();
  _impl_.points_.~MapField();
  _impl_.enrollcount_.Destruct();
  _impl_.enrollcount_.~MapField();
  _impl_.id_.Destroy();
}

void PlayerTournament::ArenaDtor(void* object) {
  PlayerTournament* _this = reinterpret_cast< PlayerTournament* >(object);
  _this->_impl_.data_.Destruct();
  _this->_impl_.points_.Destruct();
  _this->_impl_.enrollcount_.Destruct();
}
void PlayerTournament::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerTournament::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayerTournament)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.points_.Clear();
  _impl_.enrollcount_.Clear();
  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerTournament::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PlayerTournament.Id"));
        } else
          goto handle_unusual;
        continue;
      // map<uint64, .msg.PlayerTournamentData> Data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> Points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.points_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint64, uint32> EnrollCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.enrollcount_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerTournament::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerTournament)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PlayerTournament.Id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // map<uint64, .msg.PlayerTournamentData> Data = 2;
  if (!this->_internal_data().empty()) {
    using MapType = ::_pb::Map<uint64_t, ::msg::PlayerTournamentData>;
    using WireHelper = PlayerTournament_DataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_data();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, uint32> Points = 3;
  if (!this->_internal_points().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = PlayerTournament_PointsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_points();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint64, uint32> EnrollCount = 4;
  if (!this->_internal_enrollcount().empty()) {
    using MapType = ::_pb::Map<uint64_t, uint32_t>;
    using WireHelper = PlayerTournament_EnrollCountEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_enrollcount();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerTournament)
  return target;
}

size_t PlayerTournament::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayerTournament)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .msg.PlayerTournamentData> Data = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::msg::PlayerTournamentData >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += PlayerTournament_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> Points = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_points_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_points().begin();
      it != this->_internal_points().end(); ++it) {
    total_size += PlayerTournament_PointsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, uint32> EnrollCount = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_enrollcount_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint32_t >::const_iterator
      it = this->_internal_enrollcount().begin();
      it != this->_internal_enrollcount().end(); ++it) {
    total_size += PlayerTournament_EnrollCountEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerTournament::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerTournament::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerTournament::GetClassData() const { return &_class_data_; }


void PlayerTournament::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerTournament*>(&to_msg);
  auto& from = static_cast<const PlayerTournament&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayerTournament)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_impl_.enrollcount_.MergeFrom(from._impl_.enrollcount_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerTournament::CopyFrom(const PlayerTournament& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayerTournament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTournament::IsInitialized() const {
  return true;
}

void PlayerTournament::InternalSwap(PlayerTournament* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  _impl_.enrollcount_.InternalSwap(&other->_impl_.enrollcount_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerTournament::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[230]);
}

// ===================================================================

PlayerTournamentData_GetRewardEntry_DoNotUse::PlayerTournamentData_GetRewardEntry_DoNotUse() {}
PlayerTournamentData_GetRewardEntry_DoNotUse::PlayerTournamentData_GetRewardEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PlayerTournamentData_GetRewardEntry_DoNotUse::MergeFrom(const PlayerTournamentData_GetRewardEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PlayerTournamentData_GetRewardEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[231]);
}

// ===================================================================

PlayerTournamentData_PointsEntry_DoNotUse::PlayerTournamentData_PointsEntry_DoNotUse() {}
PlayerTournamentData_PointsEntry_DoNotUse::PlayerTournamentData_PointsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PlayerTournamentData_PointsEntry_DoNotUse::MergeFrom(const PlayerTournamentData_PointsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PlayerTournamentData_PointsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[232]);
}

// ===================================================================

PlayerTournamentData_DataEntry_DoNotUse::PlayerTournamentData_DataEntry_DoNotUse() {}
PlayerTournamentData_DataEntry_DoNotUse::PlayerTournamentData_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PlayerTournamentData_DataEntry_DoNotUse::MergeFrom(const PlayerTournamentData_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PlayerTournamentData_DataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[233]);
}

// ===================================================================

class PlayerTournamentData::_Internal {
 public:
};

PlayerTournamentData::PlayerTournamentData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PlayerTournamentData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.PlayerTournamentData)
}
PlayerTournamentData::PlayerTournamentData(const PlayerTournamentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerTournamentData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.getreward_)*/{}
    , /*decltype(_impl_.points_)*/{}
    , /*decltype(_impl_.data_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.classid_){}
    , decltype(_impl_.curround_){}
    , decltype(_impl_.gameid_){}
    , decltype(_impl_.signuptime_){}
    , decltype(_impl_.pvpid_){}
    , decltype(_impl_.pvpendtime_){}
    , decltype(_impl_.out_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.getreward_.MergeFrom(from._impl_.getreward_);
  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.out_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.out_));
  // @@protoc_insertion_point(copy_constructor:msg.PlayerTournamentData)
}

inline void PlayerTournamentData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.getreward_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.points_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.data_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.classid_){uint64_t{0u}}
    , decltype(_impl_.curround_){uint64_t{0u}}
    , decltype(_impl_.gameid_){uint64_t{0u}}
    , decltype(_impl_.signuptime_){int64_t{0}}
    , decltype(_impl_.pvpid_){uint64_t{0u}}
    , decltype(_impl_.pvpendtime_){int64_t{0}}
    , decltype(_impl_.out_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerTournamentData::~PlayerTournamentData() {
  // @@protoc_insertion_point(destructor:msg.PlayerTournamentData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PlayerTournamentData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.getreward_.Destruct();
  _impl_.getreward_.~MapField();
  _impl_.points_.Destruct();
  _impl_.points_.~MapField();
  _impl_.data_.Destruct();
  _impl_.data_.~MapField();
}

void PlayerTournamentData::ArenaDtor(void* object) {
  PlayerTournamentData* _this = reinterpret_cast< PlayerTournamentData* >(object);
  _this->_impl_.getreward_.Destruct();
  _this->_impl_.points_.Destruct();
  _this->_impl_.data_.Destruct();
}
void PlayerTournamentData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerTournamentData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayerTournamentData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.getreward_.Clear();
  _impl_.points_.Clear();
  _impl_.data_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.out_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.out_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerTournamentData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ClassId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.classid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, bool> GetReward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.getreward_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> Points = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.points_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 CurRound = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.curround_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 GameId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Out = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 SignUpTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.signuptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint64, .msg.RoundData> Data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 PvpId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.pvpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PvpEndTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.pvpendtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerTournamentData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerTournamentData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 ClassId = 2;
  if (this->_internal_classid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_classid(), target);
  }

  // map<uint32, bool> GetReward = 3;
  if (!this->_internal_getreward().empty()) {
    using MapType = ::_pb::Map<uint32_t, bool>;
    using WireHelper = PlayerTournamentData_GetRewardEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_getreward();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, uint32> Points = 4;
  if (!this->_internal_points().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = PlayerTournamentData_PointsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_points();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint64 CurRound = 5;
  if (this->_internal_curround() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_curround(), target);
  }

  // uint64 GameId = 6;
  if (this->_internal_gameid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_gameid(), target);
  }

  // bool Out = 7;
  if (this->_internal_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_out(), target);
  }

  // int64 SignUpTime = 8;
  if (this->_internal_signuptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_signuptime(), target);
  }

  // map<uint64, .msg.RoundData> Data = 9;
  if (!this->_internal_data().empty()) {
    using MapType = ::_pb::Map<uint64_t, ::msg::RoundData>;
    using WireHelper = PlayerTournamentData_DataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_data();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint64 PvpId = 10;
  if (this->_internal_pvpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_pvpid(), target);
  }

  // int64 PvpEndTime = 11;
  if (this->_internal_pvpendtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_pvpendtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerTournamentData)
  return target;
}

size_t PlayerTournamentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayerTournamentData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, bool> GetReward = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_getreward_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >::const_iterator
      it = this->_internal_getreward().begin();
      it != this->_internal_getreward().end(); ++it) {
    total_size += PlayerTournamentData_GetRewardEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> Points = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_points_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_points().begin();
      it != this->_internal_points().end(); ++it) {
    total_size += PlayerTournamentData_PointsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint64, .msg.RoundData> Data = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::msg::RoundData >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += PlayerTournamentData_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint64 ClassId = 2;
  if (this->_internal_classid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_classid());
  }

  // uint64 CurRound = 5;
  if (this->_internal_curround() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_curround());
  }

  // uint64 GameId = 6;
  if (this->_internal_gameid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gameid());
  }

  // int64 SignUpTime = 8;
  if (this->_internal_signuptime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_signuptime());
  }

  // uint64 PvpId = 10;
  if (this->_internal_pvpid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pvpid());
  }

  // int64 PvpEndTime = 11;
  if (this->_internal_pvpendtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_pvpendtime());
  }

  // bool Out = 7;
  if (this->_internal_out() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerTournamentData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerTournamentData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerTournamentData::GetClassData() const { return &_class_data_; }


void PlayerTournamentData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerTournamentData*>(&to_msg);
  auto& from = static_cast<const PlayerTournamentData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayerTournamentData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.getreward_.MergeFrom(from._impl_.getreward_);
  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_classid() != 0) {
    _this->_internal_set_classid(from._internal_classid());
  }
  if (from._internal_curround() != 0) {
    _this->_internal_set_curround(from._internal_curround());
  }
  if (from._internal_gameid() != 0) {
    _this->_internal_set_gameid(from._internal_gameid());
  }
  if (from._internal_signuptime() != 0) {
    _this->_internal_set_signuptime(from._internal_signuptime());
  }
  if (from._internal_pvpid() != 0) {
    _this->_internal_set_pvpid(from._internal_pvpid());
  }
  if (from._internal_pvpendtime() != 0) {
    _this->_internal_set_pvpendtime(from._internal_pvpendtime());
  }
  if (from._internal_out() != 0) {
    _this->_internal_set_out(from._internal_out());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerTournamentData::CopyFrom(const PlayerTournamentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayerTournamentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTournamentData::IsInitialized() const {
  return true;
}

void PlayerTournamentData::InternalSwap(PlayerTournamentData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.getreward_.InternalSwap(&other->_impl_.getreward_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerTournamentData, _impl_.out_)
      + sizeof(PlayerTournamentData::_impl_.out_)
      - PROTOBUF_FIELD_OFFSET(PlayerTournamentData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerTournamentData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[234]);
}

// ===================================================================

RoundData_PointsEntry_DoNotUse::RoundData_PointsEntry_DoNotUse() {}
RoundData_PointsEntry_DoNotUse::RoundData_PointsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RoundData_PointsEntry_DoNotUse::MergeFrom(const RoundData_PointsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RoundData_PointsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[235]);
}

// ===================================================================

class RoundData::_Internal {
 public:
};

RoundData::RoundData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &RoundData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.RoundData)
}
RoundData::RoundData(const RoundData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoundData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.points_)*/{}
    , decltype(_impl_.round_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.fighttimes_){}
    , decltype(_impl_.totalrank_){}
    , decltype(_impl_.topcnt_){}
    , decltype(_impl_.secondcnt_){}
    , decltype(_impl_.thirdcnt_){}
    , decltype(_impl_.wintimes_){}
    , decltype(_impl_.lostblood_){}
    , decltype(_impl_.damage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  ::memcpy(&_impl_.round_, &from._impl_.round_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.damage_) -
    reinterpret_cast<char*>(&_impl_.round_)) + sizeof(_impl_.damage_));
  // @@protoc_insertion_point(copy_constructor:msg.RoundData)
}

inline void RoundData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.points_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.round_){uint64_t{0u}}
    , decltype(_impl_.rank_){0u}
    , decltype(_impl_.fighttimes_){0u}
    , decltype(_impl_.totalrank_){0u}
    , decltype(_impl_.topcnt_){0u}
    , decltype(_impl_.secondcnt_){0u}
    , decltype(_impl_.thirdcnt_){0u}
    , decltype(_impl_.wintimes_){0u}
    , decltype(_impl_.lostblood_){0u}
    , decltype(_impl_.damage_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoundData::~RoundData() {
  // @@protoc_insertion_point(destructor:msg.RoundData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void RoundData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.Destruct();
  _impl_.points_.~MapField();
}

void RoundData::ArenaDtor(void* object) {
  RoundData* _this = reinterpret_cast< RoundData* >(object);
  _this->_impl_.points_.Destruct();
}
void RoundData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoundData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.RoundData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  ::memset(&_impl_.round_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.damage_) -
      reinterpret_cast<char*>(&_impl_.round_)) + sizeof(_impl_.damage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoundData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 Round = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> Points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.points_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 FightTimes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.fighttimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TotalRank = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.totalrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TopCnt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.topcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SecondCnt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.secondcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ThirdCnt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.thirdcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 WinTimes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.wintimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 LostBlood = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.lostblood_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Damage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoundData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.RoundData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 Round = 1;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_round(), target);
  }

  // uint32 Rank = 2;
  if (this->_internal_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rank(), target);
  }

  // map<uint32, uint32> Points = 3;
  if (!this->_internal_points().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = RoundData_PointsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_points();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint32 FightTimes = 4;
  if (this->_internal_fighttimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_fighttimes(), target);
  }

  // uint32 TotalRank = 5;
  if (this->_internal_totalrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_totalrank(), target);
  }

  // uint32 TopCnt = 6;
  if (this->_internal_topcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_topcnt(), target);
  }

  // uint32 SecondCnt = 7;
  if (this->_internal_secondcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_secondcnt(), target);
  }

  // uint32 ThirdCnt = 8;
  if (this->_internal_thirdcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_thirdcnt(), target);
  }

  // uint32 WinTimes = 9;
  if (this->_internal_wintimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_wintimes(), target);
  }

  // uint32 LostBlood = 10;
  if (this->_internal_lostblood() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_lostblood(), target);
  }

  // uint32 Damage = 11;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.RoundData)
  return target;
}

size_t RoundData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.RoundData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> Points = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_points_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_points().begin();
      it != this->_internal_points().end(); ++it) {
    total_size += RoundData_PointsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 Round = 1;
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_round());
  }

  // uint32 Rank = 2;
  if (this->_internal_rank() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank());
  }

  // uint32 FightTimes = 4;
  if (this->_internal_fighttimes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fighttimes());
  }

  // uint32 TotalRank = 5;
  if (this->_internal_totalrank() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_totalrank());
  }

  // uint32 TopCnt = 6;
  if (this->_internal_topcnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_topcnt());
  }

  // uint32 SecondCnt = 7;
  if (this->_internal_secondcnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_secondcnt());
  }

  // uint32 ThirdCnt = 8;
  if (this->_internal_thirdcnt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_thirdcnt());
  }

  // uint32 WinTimes = 9;
  if (this->_internal_wintimes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wintimes());
  }

  // uint32 LostBlood = 10;
  if (this->_internal_lostblood() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lostblood());
  }

  // uint32 Damage = 11;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_damage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoundData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoundData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoundData::GetClassData() const { return &_class_data_; }


void RoundData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoundData*>(&to_msg);
  auto& from = static_cast<const RoundData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.RoundData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  if (from._internal_rank() != 0) {
    _this->_internal_set_rank(from._internal_rank());
  }
  if (from._internal_fighttimes() != 0) {
    _this->_internal_set_fighttimes(from._internal_fighttimes());
  }
  if (from._internal_totalrank() != 0) {
    _this->_internal_set_totalrank(from._internal_totalrank());
  }
  if (from._internal_topcnt() != 0) {
    _this->_internal_set_topcnt(from._internal_topcnt());
  }
  if (from._internal_secondcnt() != 0) {
    _this->_internal_set_secondcnt(from._internal_secondcnt());
  }
  if (from._internal_thirdcnt() != 0) {
    _this->_internal_set_thirdcnt(from._internal_thirdcnt());
  }
  if (from._internal_wintimes() != 0) {
    _this->_internal_set_wintimes(from._internal_wintimes());
  }
  if (from._internal_lostblood() != 0) {
    _this->_internal_set_lostblood(from._internal_lostblood());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoundData::CopyFrom(const RoundData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.RoundData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoundData::IsInitialized() const {
  return true;
}

void RoundData::InternalSwap(RoundData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoundData, _impl_.damage_)
      + sizeof(RoundData::_impl_.damage_)
      - PROTOBUF_FIELD_OFFSET(RoundData, _impl_.round_)>(
          reinterpret_cast<char*>(&_impl_.round_),
          reinterpret_cast<char*>(&other->_impl_.round_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoundData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[236]);
}

// ===================================================================

class GuildBaseInfo::_Internal {
 public:
};

GuildBaseInfo::GuildBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.GuildBaseInfo)
}
GuildBaseInfo::GuildBaseInfo(const GuildBaseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GuildBaseInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){from._impl_.tags_}
    , /*decltype(_impl_._tags_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.notice_){}
    , decltype(_impl_.recruitnotice_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.owner_){}
    , decltype(_impl_.ownername_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.requirepermit_){}
    , decltype(_impl_.requirecup_){}
    , decltype(_impl_.membercount_){}
    , decltype(_impl_.province_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.exp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.notice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notice().empty()) {
    _this->_impl_.notice_.Set(from._internal_notice(), 
      _this->GetArenaForAllocation());
  }
  _impl_.recruitnotice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recruitnotice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recruitnotice().empty()) {
    _this->_impl_.recruitnotice_.Set(from._internal_recruitnotice(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    _this->_impl_.owner_.Set(from._internal_owner(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ownername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ownername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ownername().empty()) {
    _this->_impl_.ownername_.Set(from._internal_ownername(), 
      _this->GetArenaForAllocation());
  }
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channelusrid().empty()) {
    _this->_impl_.channelusrid_.Set(from._internal_channelusrid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sign_, &from._impl_.sign_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.exp_) -
    reinterpret_cast<char*>(&_impl_.sign_)) + sizeof(_impl_.exp_));
  // @@protoc_insertion_point(copy_constructor:msg.GuildBaseInfo)
}

inline void GuildBaseInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){arena}
    , /*decltype(_impl_._tags_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.notice_){}
    , decltype(_impl_.recruitnotice_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.owner_){}
    , decltype(_impl_.ownername_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.sign_){0}
    , decltype(_impl_.requirepermit_){false}
    , decltype(_impl_.requirecup_){0}
    , decltype(_impl_.membercount_){0}
    , decltype(_impl_.province_){0u}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.exp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.notice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recruitnotice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recruitnotice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ownername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ownername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GuildBaseInfo::~GuildBaseInfo() {
  // @@protoc_insertion_point(destructor:msg.GuildBaseInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GuildBaseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tags_.~RepeatedField();
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.notice_.Destroy();
  _impl_.recruitnotice_.Destroy();
  _impl_.country_.Destroy();
  _impl_.language_.Destroy();
  _impl_.owner_.Destroy();
  _impl_.ownername_.Destroy();
  _impl_.channelusrid_.Destroy();
}

void GuildBaseInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GuildBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GuildBaseInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.notice_.ClearToEmpty();
  _impl_.recruitnotice_.ClearToEmpty();
  _impl_.country_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  _impl_.owner_.ClearToEmpty();
  _impl_.ownername_.ClearToEmpty();
  _impl_.channelusrid_.ClearToEmpty();
  ::memset(&_impl_.sign_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.exp_) -
      reinterpret_cast<char*>(&_impl_.sign_)) + sizeof(_impl_.exp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuildBaseInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildBaseInfo.ID"));
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildBaseInfo.Name"));
        } else
          goto handle_unusual;
        continue;
      // int32 Sign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Notice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_notice();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildBaseInfo.Notice"));
        } else
          goto handle_unusual;
        continue;
      // string RecruitNotice = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_recruitnotice();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildBaseInfo.RecruitNotice"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 Tags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_tags(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_tags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Country = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildBaseInfo.Country"));
        } else
          goto handle_unusual;
        continue;
      // string Language = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildBaseInfo.Language"));
        } else
          goto handle_unusual;
        continue;
      // bool RequirePermit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.requirepermit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 RequireCup = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.requirecup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MemberCount = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.membercount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Province = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.province_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Owner = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildBaseInfo.Owner"));
        } else
          goto handle_unusual;
        continue;
      // string OwnerName = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_ownername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildBaseInfo.OwnerName"));
        } else
          goto handle_unusual;
        continue;
      // int32 Level = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Exp = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ChannelUsrID = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_channelusrid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildBaseInfo.ChannelUsrID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GuildBaseInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GuildBaseInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildBaseInfo.ID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildBaseInfo.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 Sign = 3;
  if (this->_internal_sign() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_sign(), target);
  }

  // string Notice = 4;
  if (!this->_internal_notice().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notice().data(), static_cast<int>(this->_internal_notice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildBaseInfo.Notice");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notice(), target);
  }

  // string RecruitNotice = 5;
  if (!this->_internal_recruitnotice().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recruitnotice().data(), static_cast<int>(this->_internal_recruitnotice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildBaseInfo.RecruitNotice");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_recruitnotice(), target);
  }

  // repeated int32 Tags = 6;
  {
    int byte_size = _impl_._tags_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_tags(), byte_size, target);
    }
  }

  // string Country = 7;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildBaseInfo.Country");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_country(), target);
  }

  // string Language = 8;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildBaseInfo.Language");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_language(), target);
  }

  // bool RequirePermit = 9;
  if (this->_internal_requirepermit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_requirepermit(), target);
  }

  // int32 RequireCup = 10;
  if (this->_internal_requirecup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_requirecup(), target);
  }

  // int32 MemberCount = 11;
  if (this->_internal_membercount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_membercount(), target);
  }

  // uint32 Province = 12;
  if (this->_internal_province() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_province(), target);
  }

  // string Owner = 13;
  if (!this->_internal_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildBaseInfo.Owner");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_owner(), target);
  }

  // string OwnerName = 14;
  if (!this->_internal_ownername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ownername().data(), static_cast<int>(this->_internal_ownername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildBaseInfo.OwnerName");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_ownername(), target);
  }

  // int32 Level = 15;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_level(), target);
  }

  // int32 Exp = 16;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_exp(), target);
  }

  // string ChannelUsrID = 17;
  if (!this->_internal_channelusrid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelusrid().data(), static_cast<int>(this->_internal_channelusrid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildBaseInfo.ChannelUsrID");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_channelusrid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GuildBaseInfo)
  return target;
}

size_t GuildBaseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GuildBaseInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Tags = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.tags_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._tags_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string ID = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Notice = 4;
  if (!this->_internal_notice().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notice());
  }

  // string RecruitNotice = 5;
  if (!this->_internal_recruitnotice().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recruitnotice());
  }

  // string Country = 7;
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string Language = 8;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string Owner = 13;
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string OwnerName = 14;
  if (!this->_internal_ownername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ownername());
  }

  // string ChannelUsrID = 17;
  if (!this->_internal_channelusrid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelusrid());
  }

  // int32 Sign = 3;
  if (this->_internal_sign() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sign());
  }

  // bool RequirePermit = 9;
  if (this->_internal_requirepermit() != 0) {
    total_size += 1 + 1;
  }

  // int32 RequireCup = 10;
  if (this->_internal_requirecup() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_requirecup());
  }

  // int32 MemberCount = 11;
  if (this->_internal_membercount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_membercount());
  }

  // uint32 Province = 12;
  if (this->_internal_province() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_province());
  }

  // int32 Level = 15;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 Exp = 16;
  if (this->_internal_exp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_exp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GuildBaseInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GuildBaseInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GuildBaseInfo::GetClassData() const { return &_class_data_; }


void GuildBaseInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GuildBaseInfo*>(&to_msg);
  auto& from = static_cast<const GuildBaseInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.GuildBaseInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_notice().empty()) {
    _this->_internal_set_notice(from._internal_notice());
  }
  if (!from._internal_recruitnotice().empty()) {
    _this->_internal_set_recruitnotice(from._internal_recruitnotice());
  }
  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (!from._internal_owner().empty()) {
    _this->_internal_set_owner(from._internal_owner());
  }
  if (!from._internal_ownername().empty()) {
    _this->_internal_set_ownername(from._internal_ownername());
  }
  if (!from._internal_channelusrid().empty()) {
    _this->_internal_set_channelusrid(from._internal_channelusrid());
  }
  if (from._internal_sign() != 0) {
    _this->_internal_set_sign(from._internal_sign());
  }
  if (from._internal_requirepermit() != 0) {
    _this->_internal_set_requirepermit(from._internal_requirepermit());
  }
  if (from._internal_requirecup() != 0) {
    _this->_internal_set_requirecup(from._internal_requirecup());
  }
  if (from._internal_membercount() != 0) {
    _this->_internal_set_membercount(from._internal_membercount());
  }
  if (from._internal_province() != 0) {
    _this->_internal_set_province(from._internal_province());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_exp() != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GuildBaseInfo::CopyFrom(const GuildBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GuildBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBaseInfo::IsInitialized() const {
  return true;
}

void GuildBaseInfo::InternalSwap(GuildBaseInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notice_, lhs_arena,
      &other->_impl_.notice_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recruitnotice_, lhs_arena,
      &other->_impl_.recruitnotice_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.owner_, lhs_arena,
      &other->_impl_.owner_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ownername_, lhs_arena,
      &other->_impl_.ownername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channelusrid_, lhs_arena,
      &other->_impl_.channelusrid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GuildBaseInfo, _impl_.exp_)
      + sizeof(GuildBaseInfo::_impl_.exp_)
      - PROTOBUF_FIELD_OFFSET(GuildBaseInfo, _impl_.sign_)>(
          reinterpret_cast<char*>(&_impl_.sign_),
          reinterpret_cast<char*>(&other->_impl_.sign_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildBaseInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[237]);
}

// ===================================================================

class GuildAttr::_Internal {
 public:
};

GuildAttr::GuildAttr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.GuildAttr)
}
GuildAttr::GuildAttr(const GuildAttr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GuildAttr* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){from._impl_.tags_}
    , /*decltype(_impl_._tags_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.notice_){}
    , decltype(_impl_.recruitnotice_){}
    , decltype(_impl_.owner_){}
    , decltype(_impl_.ownername_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.requirepermit_){}
    , decltype(_impl_.requirecup_){}
    , decltype(_impl_.province_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.notice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notice().empty()) {
    _this->_impl_.notice_.Set(from._internal_notice(), 
      _this->GetArenaForAllocation());
  }
  _impl_.recruitnotice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recruitnotice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recruitnotice().empty()) {
    _this->_impl_.recruitnotice_.Set(from._internal_recruitnotice(), 
      _this->GetArenaForAllocation());
  }
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    _this->_impl_.owner_.Set(from._internal_owner(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ownername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ownername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ownername().empty()) {
    _this->_impl_.ownername_.Set(from._internal_ownername(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sign_, &from._impl_.sign_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.province_) -
    reinterpret_cast<char*>(&_impl_.sign_)) + sizeof(_impl_.province_));
  // @@protoc_insertion_point(copy_constructor:msg.GuildAttr)
}

inline void GuildAttr::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){arena}
    , /*decltype(_impl_._tags_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.notice_){}
    , decltype(_impl_.recruitnotice_){}
    , decltype(_impl_.owner_){}
    , decltype(_impl_.ownername_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.sign_){0}
    , decltype(_impl_.requirepermit_){0}
    , decltype(_impl_.requirecup_){0}
    , decltype(_impl_.province_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.notice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recruitnotice_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.recruitnotice_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ownername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ownername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GuildAttr::~GuildAttr() {
  // @@protoc_insertion_point(destructor:msg.GuildAttr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GuildAttr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tags_.~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.notice_.Destroy();
  _impl_.recruitnotice_.Destroy();
  _impl_.owner_.Destroy();
  _impl_.ownername_.Destroy();
  _impl_.country_.Destroy();
  _impl_.language_.Destroy();
}

void GuildAttr::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GuildAttr::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GuildAttr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.notice_.ClearToEmpty();
  _impl_.recruitnotice_.ClearToEmpty();
  _impl_.owner_.ClearToEmpty();
  _impl_.ownername_.ClearToEmpty();
  _impl_.country_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  ::memset(&_impl_.sign_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.province_) -
      reinterpret_cast<char*>(&_impl_.sign_)) + sizeof(_impl_.province_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuildAttr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildAttr.Name"));
        } else
          goto handle_unusual;
        continue;
      // int32 Sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Notice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_notice();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildAttr.Notice"));
        } else
          goto handle_unusual;
        continue;
      // string RecruitNotice = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_recruitnotice();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildAttr.RecruitNotice"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 Tags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_tags(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_tags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Owner = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildAttr.Owner"));
        } else
          goto handle_unusual;
        continue;
      // string OwnerName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_ownername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildAttr.OwnerName"));
        } else
          goto handle_unusual;
        continue;
      // .msg.GUILDPERMITTYPE RequirePermit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_requirepermit(static_cast<::msg::GUILDPERMITTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 RequireCup = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.requirecup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Country = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildAttr.Country"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Province = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.province_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Language = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildAttr.Language"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GuildAttr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GuildAttr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildAttr.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 Sign = 2;
  if (this->_internal_sign() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_sign(), target);
  }

  // string Notice = 4;
  if (!this->_internal_notice().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notice().data(), static_cast<int>(this->_internal_notice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildAttr.Notice");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notice(), target);
  }

  // string RecruitNotice = 5;
  if (!this->_internal_recruitnotice().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_recruitnotice().data(), static_cast<int>(this->_internal_recruitnotice().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildAttr.RecruitNotice");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_recruitnotice(), target);
  }

  // repeated int32 Tags = 6;
  {
    int byte_size = _impl_._tags_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_tags(), byte_size, target);
    }
  }

  // string Owner = 7;
  if (!this->_internal_owner().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner().data(), static_cast<int>(this->_internal_owner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildAttr.Owner");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_owner(), target);
  }

  // string OwnerName = 8;
  if (!this->_internal_ownername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ownername().data(), static_cast<int>(this->_internal_ownername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildAttr.OwnerName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ownername(), target);
  }

  // .msg.GUILDPERMITTYPE RequirePermit = 9;
  if (this->_internal_requirepermit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_requirepermit(), target);
  }

  // int32 RequireCup = 10;
  if (this->_internal_requirecup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_requirecup(), target);
  }

  // string Country = 11;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildAttr.Country");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_country(), target);
  }

  // uint32 Province = 12;
  if (this->_internal_province() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_province(), target);
  }

  // string Language = 13;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildAttr.Language");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GuildAttr)
  return target;
}

size_t GuildAttr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GuildAttr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Tags = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.tags_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._tags_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Notice = 4;
  if (!this->_internal_notice().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notice());
  }

  // string RecruitNotice = 5;
  if (!this->_internal_recruitnotice().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_recruitnotice());
  }

  // string Owner = 7;
  if (!this->_internal_owner().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner());
  }

  // string OwnerName = 8;
  if (!this->_internal_ownername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ownername());
  }

  // string Country = 11;
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string Language = 13;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // int32 Sign = 2;
  if (this->_internal_sign() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sign());
  }

  // .msg.GUILDPERMITTYPE RequirePermit = 9;
  if (this->_internal_requirepermit() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_requirepermit());
  }

  // int32 RequireCup = 10;
  if (this->_internal_requirecup() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_requirecup());
  }

  // uint32 Province = 12;
  if (this->_internal_province() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_province());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GuildAttr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GuildAttr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GuildAttr::GetClassData() const { return &_class_data_; }


void GuildAttr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GuildAttr*>(&to_msg);
  auto& from = static_cast<const GuildAttr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.GuildAttr)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_notice().empty()) {
    _this->_internal_set_notice(from._internal_notice());
  }
  if (!from._internal_recruitnotice().empty()) {
    _this->_internal_set_recruitnotice(from._internal_recruitnotice());
  }
  if (!from._internal_owner().empty()) {
    _this->_internal_set_owner(from._internal_owner());
  }
  if (!from._internal_ownername().empty()) {
    _this->_internal_set_ownername(from._internal_ownername());
  }
  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (from._internal_sign() != 0) {
    _this->_internal_set_sign(from._internal_sign());
  }
  if (from._internal_requirepermit() != 0) {
    _this->_internal_set_requirepermit(from._internal_requirepermit());
  }
  if (from._internal_requirecup() != 0) {
    _this->_internal_set_requirecup(from._internal_requirecup());
  }
  if (from._internal_province() != 0) {
    _this->_internal_set_province(from._internal_province());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GuildAttr::CopyFrom(const GuildAttr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GuildAttr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildAttr::IsInitialized() const {
  return true;
}

void GuildAttr::InternalSwap(GuildAttr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notice_, lhs_arena,
      &other->_impl_.notice_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.recruitnotice_, lhs_arena,
      &other->_impl_.recruitnotice_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.owner_, lhs_arena,
      &other->_impl_.owner_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ownername_, lhs_arena,
      &other->_impl_.ownername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GuildAttr, _impl_.province_)
      + sizeof(GuildAttr::_impl_.province_)
      - PROTOBUF_FIELD_OFFSET(GuildAttr, _impl_.sign_)>(
          reinterpret_cast<char*>(&_impl_.sign_),
          reinterpret_cast<char*>(&other->_impl_.sign_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildAttr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[238]);
}

// ===================================================================

class GuildApplicant::_Internal {
 public:
};

GuildApplicant::GuildApplicant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.GuildApplicant)
}
GuildApplicant::GuildApplicant(const GuildApplicant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GuildApplicant* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.ts_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player().empty()) {
    _this->_impl_.player_.Set(from._internal_player(), 
      _this->GetArenaForAllocation());
  }
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channelusrid().empty()) {
    _this->_impl_.channelusrid_.Set(from._internal_channelusrid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ts_ = from._impl_.ts_;
  // @@protoc_insertion_point(copy_constructor:msg.GuildApplicant)
}

inline void GuildApplicant::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.ts_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GuildApplicant::~GuildApplicant() {
  // @@protoc_insertion_point(destructor:msg.GuildApplicant)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GuildApplicant::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_.Destroy();
  _impl_.channelusrid_.Destroy();
}

void GuildApplicant::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GuildApplicant::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GuildApplicant)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_.ClearToEmpty();
  _impl_.channelusrid_.ClearToEmpty();
  _impl_.ts_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuildApplicant::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_player();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildApplicant.Player"));
        } else
          goto handle_unusual;
        continue;
      // int64 ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ChannelUsrID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_channelusrid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildApplicant.ChannelUsrID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GuildApplicant::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GuildApplicant)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Player = 1;
  if (!this->_internal_player().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player().data(), static_cast<int>(this->_internal_player().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildApplicant.Player");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player(), target);
  }

  // int64 ts = 2;
  if (this->_internal_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_ts(), target);
  }

  // string ChannelUsrID = 3;
  if (!this->_internal_channelusrid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelusrid().data(), static_cast<int>(this->_internal_channelusrid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildApplicant.ChannelUsrID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_channelusrid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GuildApplicant)
  return target;
}

size_t GuildApplicant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GuildApplicant)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Player = 1;
  if (!this->_internal_player().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player());
  }

  // string ChannelUsrID = 3;
  if (!this->_internal_channelusrid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelusrid());
  }

  // int64 ts = 2;
  if (this->_internal_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ts());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GuildApplicant::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GuildApplicant::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GuildApplicant::GetClassData() const { return &_class_data_; }


void GuildApplicant::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GuildApplicant*>(&to_msg);
  auto& from = static_cast<const GuildApplicant&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.GuildApplicant)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player().empty()) {
    _this->_internal_set_player(from._internal_player());
  }
  if (!from._internal_channelusrid().empty()) {
    _this->_internal_set_channelusrid(from._internal_channelusrid());
  }
  if (from._internal_ts() != 0) {
    _this->_internal_set_ts(from._internal_ts());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GuildApplicant::CopyFrom(const GuildApplicant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GuildApplicant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildApplicant::IsInitialized() const {
  return true;
}

void GuildApplicant::InternalSwap(GuildApplicant* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_, lhs_arena,
      &other->_impl_.player_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channelusrid_, lhs_arena,
      &other->_impl_.channelusrid_, rhs_arena
  );
  swap(_impl_.ts_, other->_impl_.ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildApplicant::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[239]);
}

// ===================================================================

class GuildMember::_Internal {
 public:
};

GuildMember::GuildMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.GuildMember)
}
GuildMember::GuildMember(const GuildMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GuildMember* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.activescore_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player().empty()) {
    _this->_impl_.player_.Set(from._internal_player(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.role_, &from._impl_.role_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.activescore_) -
    reinterpret_cast<char*>(&_impl_.role_)) + sizeof(_impl_.activescore_));
  // @@protoc_insertion_point(copy_constructor:msg.GuildMember)
}

inline void GuildMember::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){}
    , decltype(_impl_.role_){0}
    , decltype(_impl_.activescore_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GuildMember::~GuildMember() {
  // @@protoc_insertion_point(destructor:msg.GuildMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GuildMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_.Destroy();
}

void GuildMember::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GuildMember::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GuildMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_.ClearToEmpty();
  ::memset(&_impl_.role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.activescore_) -
      reinterpret_cast<char*>(&_impl_.role_)) + sizeof(_impl_.activescore_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuildMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_player();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildMember.Player"));
        } else
          goto handle_unusual;
        continue;
      // .msg.GUILDROLETYPE Role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_role(static_cast<::msg::GUILDROLETYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 ActiveScore = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.activescore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GuildMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GuildMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Player = 1;
  if (!this->_internal_player().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player().data(), static_cast<int>(this->_internal_player().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildMember.Player");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player(), target);
  }

  // .msg.GUILDROLETYPE Role = 2;
  if (this->_internal_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_role(), target);
  }

  // int32 ActiveScore = 3;
  if (this->_internal_activescore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_activescore(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GuildMember)
  return target;
}

size_t GuildMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GuildMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Player = 1;
  if (!this->_internal_player().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player());
  }

  // .msg.GUILDROLETYPE Role = 2;
  if (this->_internal_role() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_role());
  }

  // int32 ActiveScore = 3;
  if (this->_internal_activescore() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_activescore());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GuildMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GuildMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GuildMember::GetClassData() const { return &_class_data_; }


void GuildMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GuildMember*>(&to_msg);
  auto& from = static_cast<const GuildMember&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.GuildMember)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player().empty()) {
    _this->_internal_set_player(from._internal_player());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  if (from._internal_activescore() != 0) {
    _this->_internal_set_activescore(from._internal_activescore());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GuildMember::CopyFrom(const GuildMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GuildMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMember::IsInitialized() const {
  return true;
}

void GuildMember::InternalSwap(GuildMember* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_, lhs_arena,
      &other->_impl_.player_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GuildMember, _impl_.activescore_)
      + sizeof(GuildMember::_impl_.activescore_)
      - PROTOBUF_FIELD_OFFSET(GuildMember, _impl_.role_)>(
          reinterpret_cast<char*>(&_impl_.role_),
          reinterpret_cast<char*>(&other->_impl_.role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[240]);
}

// ===================================================================

class GuildExtraInfo::_Internal {
 public:
};

GuildExtraInfo::GuildExtraInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.GuildExtraInfo)
}
GuildExtraInfo::GuildExtraInfo(const GuildExtraInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GuildExtraInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.members_){from._impl_.members_}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.logs_){from._impl_.logs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.GuildExtraInfo)
}

inline void GuildExtraInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.members_){arena}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.logs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GuildExtraInfo::~GuildExtraInfo() {
  // @@protoc_insertion_point(destructor:msg.GuildExtraInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GuildExtraInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.members_.~RepeatedPtrField();
  _impl_.players_.~RepeatedPtrField();
  _impl_.logs_.~RepeatedPtrField();
}

void GuildExtraInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GuildExtraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GuildExtraInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.members_.Clear();
  _impl_.players_.Clear();
  _impl_.logs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuildExtraInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.GuildMember Members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.GuildApplicant Players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.GuildLog Logs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GuildExtraInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GuildExtraInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.GuildMember Members = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.GuildApplicant Players = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.GuildLog Logs = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logs_size()); i < n; i++) {
    const auto& repfield = this->_internal_logs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GuildExtraInfo)
  return target;
}

size_t GuildExtraInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GuildExtraInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.GuildMember Members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_impl_.members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.GuildApplicant Players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.GuildLog Logs = 3;
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->_impl_.logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GuildExtraInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GuildExtraInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GuildExtraInfo::GetClassData() const { return &_class_data_; }


void GuildExtraInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GuildExtraInfo*>(&to_msg);
  auto& from = static_cast<const GuildExtraInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.GuildExtraInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.members_.MergeFrom(from._impl_.members_);
  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_impl_.logs_.MergeFrom(from._impl_.logs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GuildExtraInfo::CopyFrom(const GuildExtraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GuildExtraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildExtraInfo::IsInitialized() const {
  return true;
}

void GuildExtraInfo::InternalSwap(GuildExtraInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  _impl_.logs_.InternalSwap(&other->_impl_.logs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildExtraInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[241]);
}

// ===================================================================

class GuildChatInfo::_Internal {
 public:
  static const ::msg::CSDTPlayerSimpleInfo& player(const GuildChatInfo* msg);
};

const ::msg::CSDTPlayerSimpleInfo&
GuildChatInfo::_Internal::player(const GuildChatInfo* msg) {
  return *msg->_impl_.player_;
}
GuildChatInfo::GuildChatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.GuildChatInfo)
}
GuildChatInfo::GuildChatInfo(const GuildChatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GuildChatInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.emotion_){}
    , decltype(_impl_.needlocalize_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.sourcetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::msg::CSDTPlayerSimpleInfo(*from._impl_.player_);
  }
  ::memcpy(&_impl_.emotion_, &from._impl_.emotion_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sourcetype_) -
    reinterpret_cast<char*>(&_impl_.emotion_)) + sizeof(_impl_.sourcetype_));
  // @@protoc_insertion_point(copy_constructor:msg.GuildChatInfo)
}

inline void GuildChatInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.content_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.emotion_){0u}
    , decltype(_impl_.needlocalize_){false}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.sourcetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GuildChatInfo::~GuildChatInfo() {
  // @@protoc_insertion_point(destructor:msg.GuildChatInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GuildChatInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.content_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void GuildChatInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GuildChatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GuildChatInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.content_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  ::memset(&_impl_.emotion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sourcetype_) -
      reinterpret_cast<char*>(&_impl_.emotion_)) + sizeof(_impl_.sourcetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuildChatInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.CSDTPlayerSimpleInfo Player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildChatInfo.Content"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Emotion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.emotion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool NeedLocalize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.needlocalize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CHATSOURCETYPE SourceType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sourcetype(static_cast<::msg::CHATSOURCETYPE>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GuildChatInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GuildChatInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.CSDTPlayerSimpleInfo Player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // string Content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildChatInfo.Content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // uint32 Emotion = 3;
  if (this->_internal_emotion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_emotion(), target);
  }

  // bool NeedLocalize = 4;
  if (this->_internal_needlocalize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_needlocalize(), target);
  }

  // int64 Timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // .msg.CHATSOURCETYPE SourceType = 6;
  if (this->_internal_sourcetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_sourcetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GuildChatInfo)
  return target;
}

size_t GuildChatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GuildChatInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // .msg.CSDTPlayerSimpleInfo Player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // uint32 Emotion = 3;
  if (this->_internal_emotion() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_emotion());
  }

  // bool NeedLocalize = 4;
  if (this->_internal_needlocalize() != 0) {
    total_size += 1 + 1;
  }

  // int64 Timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // .msg.CHATSOURCETYPE SourceType = 6;
  if (this->_internal_sourcetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sourcetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GuildChatInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GuildChatInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GuildChatInfo::GetClassData() const { return &_class_data_; }


void GuildChatInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GuildChatInfo*>(&to_msg);
  auto& from = static_cast<const GuildChatInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.GuildChatInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::msg::CSDTPlayerSimpleInfo::MergeFrom(
        from._internal_player());
  }
  if (from._internal_emotion() != 0) {
    _this->_internal_set_emotion(from._internal_emotion());
  }
  if (from._internal_needlocalize() != 0) {
    _this->_internal_set_needlocalize(from._internal_needlocalize());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_sourcetype() != 0) {
    _this->_internal_set_sourcetype(from._internal_sourcetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GuildChatInfo::CopyFrom(const GuildChatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GuildChatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildChatInfo::IsInitialized() const {
  return true;
}

void GuildChatInfo::InternalSwap(GuildChatInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GuildChatInfo, _impl_.sourcetype_)
      + sizeof(GuildChatInfo::_impl_.sourcetype_)
      - PROTOBUF_FIELD_OFFSET(GuildChatInfo, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildChatInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[242]);
}

// ===================================================================

GuildLog_ParaEntry_DoNotUse::GuildLog_ParaEntry_DoNotUse() {}
GuildLog_ParaEntry_DoNotUse::GuildLog_ParaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GuildLog_ParaEntry_DoNotUse::MergeFrom(const GuildLog_ParaEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GuildLog_ParaEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[243]);
}

// ===================================================================

class GuildLog::_Internal {
 public:
};

GuildLog::GuildLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &GuildLog::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.GuildLog)
}
GuildLog::GuildLog(const GuildLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GuildLog* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.para_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.ts_){}
    , decltype(_impl_.ps4only_){}
    , decltype(_impl_.ps_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.para_.MergeFrom(from._impl_.para_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ts_, &from._impl_.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ps_) -
    reinterpret_cast<char*>(&_impl_.ts_)) + sizeof(_impl_.ps_));
  // @@protoc_insertion_point(copy_constructor:msg.GuildLog)
}

inline void GuildLog::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.para_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.key_){}
    , decltype(_impl_.ts_){int64_t{0}}
    , decltype(_impl_.ps4only_){false}
    , decltype(_impl_.ps_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GuildLog::~GuildLog() {
  // @@protoc_insertion_point(destructor:msg.GuildLog)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void GuildLog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.para_.Destruct();
  _impl_.para_.~MapField();
  _impl_.key_.Destroy();
}

void GuildLog::ArenaDtor(void* object) {
  GuildLog* _this = reinterpret_cast< GuildLog* >(object);
  _this->_impl_.para_.Destruct();
}
void GuildLog::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GuildLog::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GuildLog)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.para_.Clear();
  _impl_.key_.ClearToEmpty();
  ::memset(&_impl_.ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ps_) -
      reinterpret_cast<char*>(&_impl_.ts_)) + sizeof(_impl_.ps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuildLog::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildLog.Key"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> Para = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.para_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool ps4Only = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ps4only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GuildLog::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GuildLog)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildLog.Key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // map<string, string> Para = 2;
  if (!this->_internal_para().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = GuildLog_ParaEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_para();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.GuildLog.ParaEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.GuildLog.ParaEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // bool ps4Only = 3;
  if (this->_internal_ps4only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_ps4only(), target);
  }

  // bool ps = 4;
  if (this->_internal_ps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_ps(), target);
  }

  // int64 Ts = 6;
  if (this->_internal_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GuildLog)
  return target;
}

size_t GuildLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GuildLog)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> Para = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_para_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_para().begin();
      it != this->_internal_para().end(); ++it) {
    total_size += GuildLog_ParaEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string Key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // int64 Ts = 6;
  if (this->_internal_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ts());
  }

  // bool ps4Only = 3;
  if (this->_internal_ps4only() != 0) {
    total_size += 1 + 1;
  }

  // bool ps = 4;
  if (this->_internal_ps() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GuildLog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GuildLog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GuildLog::GetClassData() const { return &_class_data_; }


void GuildLog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GuildLog*>(&to_msg);
  auto& from = static_cast<const GuildLog&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.GuildLog)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.para_.MergeFrom(from._impl_.para_);
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_ts() != 0) {
    _this->_internal_set_ts(from._internal_ts());
  }
  if (from._internal_ps4only() != 0) {
    _this->_internal_set_ps4only(from._internal_ps4only());
  }
  if (from._internal_ps() != 0) {
    _this->_internal_set_ps(from._internal_ps());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GuildLog::CopyFrom(const GuildLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GuildLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildLog::IsInitialized() const {
  return true;
}

void GuildLog::InternalSwap(GuildLog* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.para_.InternalSwap(&other->_impl_.para_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GuildLog, _impl_.ps_)
      + sizeof(GuildLog::_impl_.ps_)
      - PROTOBUF_FIELD_OFFSET(GuildLog, _impl_.ts_)>(
          reinterpret_cast<char*>(&_impl_.ts_),
          reinterpret_cast<char*>(&other->_impl_.ts_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildLog::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[244]);
}

// ===================================================================

class GuildApplyInfo::_Internal {
 public:
  static const ::msg::CSDTPlayerSimpleInfo& player(const GuildApplyInfo* msg);
};

const ::msg::CSDTPlayerSimpleInfo&
GuildApplyInfo::_Internal::player(const GuildApplyInfo* msg) {
  return *msg->_impl_.player_;
}
GuildApplyInfo::GuildApplyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.GuildApplyInfo)
}
GuildApplyInfo::GuildApplyInfo(const GuildApplyInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GuildApplyInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.ts_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::msg::CSDTPlayerSimpleInfo(*from._impl_.player_);
  }
  _this->_impl_.ts_ = from._impl_.ts_;
  // @@protoc_insertion_point(copy_constructor:msg.GuildApplyInfo)
}

inline void GuildApplyInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.ts_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GuildApplyInfo::~GuildApplyInfo() {
  // @@protoc_insertion_point(destructor:msg.GuildApplyInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GuildApplyInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void GuildApplyInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GuildApplyInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GuildApplyInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.ts_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuildApplyInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.CSDTPlayerSimpleInfo Player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GuildApplyInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GuildApplyInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.CSDTPlayerSimpleInfo Player = 1;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // int64 Ts = 2;
  if (this->_internal_ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GuildApplyInfo)
  return target;
}

size_t GuildApplyInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GuildApplyInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.CSDTPlayerSimpleInfo Player = 1;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // int64 Ts = 2;
  if (this->_internal_ts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ts());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GuildApplyInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GuildApplyInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GuildApplyInfo::GetClassData() const { return &_class_data_; }


void GuildApplyInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GuildApplyInfo*>(&to_msg);
  auto& from = static_cast<const GuildApplyInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.GuildApplyInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::msg::CSDTPlayerSimpleInfo::MergeFrom(
        from._internal_player());
  }
  if (from._internal_ts() != 0) {
    _this->_internal_set_ts(from._internal_ts());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GuildApplyInfo::CopyFrom(const GuildApplyInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GuildApplyInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildApplyInfo::IsInitialized() const {
  return true;
}

void GuildApplyInfo::InternalSwap(GuildApplyInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GuildApplyInfo, _impl_.ts_)
      + sizeof(GuildApplyInfo::_impl_.ts_)
      - PROTOBUF_FIELD_OFFSET(GuildApplyInfo, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildApplyInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[245]);
}

// ===================================================================

class GuildPlayerRole::_Internal {
 public:
};

GuildPlayerRole::GuildPlayerRole(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.GuildPlayerRole)
}
GuildPlayerRole::GuildPlayerRole(const GuildPlayerRole& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GuildPlayerRole* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.active_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player().empty()) {
    _this->_impl_.player_.Set(from._internal_player(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.role_, &from._impl_.role_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.active_) -
    reinterpret_cast<char*>(&_impl_.role_)) + sizeof(_impl_.active_));
  // @@protoc_insertion_point(copy_constructor:msg.GuildPlayerRole)
}

inline void GuildPlayerRole::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){}
    , decltype(_impl_.role_){0}
    , decltype(_impl_.active_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GuildPlayerRole::~GuildPlayerRole() {
  // @@protoc_insertion_point(destructor:msg.GuildPlayerRole)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GuildPlayerRole::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_.Destroy();
}

void GuildPlayerRole::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GuildPlayerRole::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GuildPlayerRole)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_.ClearToEmpty();
  ::memset(&_impl_.role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.active_) -
      reinterpret_cast<char*>(&_impl_.role_)) + sizeof(_impl_.active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GuildPlayerRole::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_player();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GuildPlayerRole.Player"));
        } else
          goto handle_unusual;
        continue;
      // .msg.GUILDROLETYPE Role = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_role(static_cast<::msg::GUILDROLETYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 Active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GuildPlayerRole::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GuildPlayerRole)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Player = 1;
  if (!this->_internal_player().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player().data(), static_cast<int>(this->_internal_player().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GuildPlayerRole.Player");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player(), target);
  }

  // .msg.GUILDROLETYPE Role = 2;
  if (this->_internal_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_role(), target);
  }

  // uint32 Active = 3;
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GuildPlayerRole)
  return target;
}

size_t GuildPlayerRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GuildPlayerRole)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Player = 1;
  if (!this->_internal_player().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player());
  }

  // .msg.GUILDROLETYPE Role = 2;
  if (this->_internal_role() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_role());
  }

  // uint32 Active = 3;
  if (this->_internal_active() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_active());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GuildPlayerRole::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GuildPlayerRole::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GuildPlayerRole::GetClassData() const { return &_class_data_; }


void GuildPlayerRole::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GuildPlayerRole*>(&to_msg);
  auto& from = static_cast<const GuildPlayerRole&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.GuildPlayerRole)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player().empty()) {
    _this->_internal_set_player(from._internal_player());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  if (from._internal_active() != 0) {
    _this->_internal_set_active(from._internal_active());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GuildPlayerRole::CopyFrom(const GuildPlayerRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GuildPlayerRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildPlayerRole::IsInitialized() const {
  return true;
}

void GuildPlayerRole::InternalSwap(GuildPlayerRole* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_, lhs_arena,
      &other->_impl_.player_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GuildPlayerRole, _impl_.active_)
      + sizeof(GuildPlayerRole::_impl_.active_)
      - PROTOBUF_FIELD_OFFSET(GuildPlayerRole, _impl_.role_)>(
          reinterpret_cast<char*>(&_impl_.role_),
          reinterpret_cast<char*>(&other->_impl_.role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GuildPlayerRole::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[246]);
}

// ===================================================================

class ChestRecord::_Internal {
 public:
};

ChestRecord::ChestRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ChestRecord)
}
ChestRecord::ChestRecord(const ChestRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChestRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.awards_){from._impl_.awards_}
    , /*decltype(_impl_._awards_cached_byte_size_)*/{0}
    , decltype(_impl_.round_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.round_ = from._impl_.round_;
  // @@protoc_insertion_point(copy_constructor:msg.ChestRecord)
}

inline void ChestRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.awards_){arena}
    , /*decltype(_impl_._awards_cached_byte_size_)*/{0}
    , decltype(_impl_.round_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChestRecord::~ChestRecord() {
  // @@protoc_insertion_point(destructor:msg.ChestRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChestRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.awards_.~RepeatedField();
}

void ChestRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChestRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ChestRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.awards_.Clear();
  _impl_.round_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChestRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 Awards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_awards(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_awards(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Round = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChestRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ChestRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 Awards = 1;
  {
    int byte_size = _impl_._awards_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_awards(), byte_size, target);
    }
  }

  // uint32 Round = 2;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_round(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ChestRecord)
  return target;
}

size_t ChestRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ChestRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 Awards = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.awards_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._awards_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 Round = 2;
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChestRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChestRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChestRecord::GetClassData() const { return &_class_data_; }


void ChestRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChestRecord*>(&to_msg);
  auto& from = static_cast<const ChestRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ChestRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.awards_.MergeFrom(from._impl_.awards_);
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChestRecord::CopyFrom(const ChestRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ChestRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChestRecord::IsInitialized() const {
  return true;
}

void ChestRecord::InternalSwap(ChestRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.awards_.InternalSwap(&other->_impl_.awards_);
  swap(_impl_.round_, other->_impl_.round_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChestRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[247]);
}

// ===================================================================

class TeamDesc::_Internal {
 public:
  static const ::msg::TournamentDesc& groupdesc(const TeamDesc* msg);
};

const ::msg::TournamentDesc&
TeamDesc::_Internal::groupdesc(const TeamDesc* msg) {
  return *msg->_impl_.groupdesc_;
}
TeamDesc::TeamDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TeamDesc)
}
TeamDesc::TeamDesc(const TeamDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TeamDesc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groupdesc_){nullptr}
    , decltype(_impl_.teamid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_groupdesc()) {
    _this->_impl_.groupdesc_ = new ::msg::TournamentDesc(*from._impl_.groupdesc_);
  }
  _this->_impl_.teamid_ = from._impl_.teamid_;
  // @@protoc_insertion_point(copy_constructor:msg.TeamDesc)
}

inline void TeamDesc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.groupdesc_){nullptr}
    , decltype(_impl_.teamid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TeamDesc::~TeamDesc() {
  // @@protoc_insertion_point(destructor:msg.TeamDesc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeamDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.groupdesc_;
}

void TeamDesc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TeamDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TeamDesc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.groupdesc_ != nullptr) {
    delete _impl_.groupdesc_;
  }
  _impl_.groupdesc_ = nullptr;
  _impl_.teamid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeamDesc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 TeamID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.teamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TournamentDesc GroupDesc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_groupdesc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeamDesc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TeamDesc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 TeamID = 1;
  if (this->_internal_teamid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_teamid(), target);
  }

  // .msg.TournamentDesc GroupDesc = 2;
  if (this->_internal_has_groupdesc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::groupdesc(this),
        _Internal::groupdesc(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TeamDesc)
  return target;
}

size_t TeamDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TeamDesc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.TournamentDesc GroupDesc = 2;
  if (this->_internal_has_groupdesc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.groupdesc_);
  }

  // uint32 TeamID = 1;
  if (this->_internal_teamid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_teamid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeamDesc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TeamDesc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeamDesc::GetClassData() const { return &_class_data_; }


void TeamDesc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TeamDesc*>(&to_msg);
  auto& from = static_cast<const TeamDesc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TeamDesc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_groupdesc()) {
    _this->_internal_mutable_groupdesc()->::msg::TournamentDesc::MergeFrom(
        from._internal_groupdesc());
  }
  if (from._internal_teamid() != 0) {
    _this->_internal_set_teamid(from._internal_teamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeamDesc::CopyFrom(const TeamDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TeamDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamDesc::IsInitialized() const {
  return true;
}

void TeamDesc::InternalSwap(TeamDesc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeamDesc, _impl_.teamid_)
      + sizeof(TeamDesc::_impl_.teamid_)
      - PROTOBUF_FIELD_OFFSET(TeamDesc, _impl_.groupdesc_)>(
          reinterpret_cast<char*>(&_impl_.groupdesc_),
          reinterpret_cast<char*>(&other->_impl_.groupdesc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeamDesc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[248]);
}

// ===================================================================

class CSDTTaskItem::_Internal {
 public:
};

CSDTTaskItem::CSDTTaskItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTTaskItem)
}
CSDTTaskItem::CSDTTaskItem(const CSDTTaskItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTTaskItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.getaward_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.getaward_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.getaward_));
  // @@protoc_insertion_point(copy_constructor:msg.CSDTTaskItem)
}

inline void CSDTTaskItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.progress_){0u}
    , decltype(_impl_.getaward_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTTaskItem::~CSDTTaskItem() {
  // @@protoc_insertion_point(destructor:msg.CSDTTaskItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTTaskItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDTTaskItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTTaskItem::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTTaskItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.getaward_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.getaward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTTaskItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool GetAward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.getaward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTTaskItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTTaskItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 Progress = 2;
  if (this->_internal_progress() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_progress(), target);
  }

  // bool GetAward = 3;
  if (this->_internal_getaward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_getaward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTTaskItem)
  return target;
}

size_t CSDTTaskItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTTaskItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 Progress = 2;
  if (this->_internal_progress() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_progress());
  }

  // bool GetAward = 3;
  if (this->_internal_getaward() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTTaskItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTTaskItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTTaskItem::GetClassData() const { return &_class_data_; }


void CSDTTaskItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTTaskItem*>(&to_msg);
  auto& from = static_cast<const CSDTTaskItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTTaskItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_progress() != 0) {
    _this->_internal_set_progress(from._internal_progress());
  }
  if (from._internal_getaward() != 0) {
    _this->_internal_set_getaward(from._internal_getaward());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTTaskItem::CopyFrom(const CSDTTaskItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTTaskItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTTaskItem::IsInitialized() const {
  return true;
}

void CSDTTaskItem::InternalSwap(CSDTTaskItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTTaskItem, _impl_.getaward_)
      + sizeof(CSDTTaskItem::_impl_.getaward_)
      - PROTOBUF_FIELD_OFFSET(CSDTTaskItem, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTTaskItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[249]);
}

// ===================================================================

class OssPlayerData::_Internal {
 public:
};

OssPlayerData::OssPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.OssPlayerData)
}
OssPlayerData::OssPlayerData(const OssPlayerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OssPlayerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.invitecode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.invitecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invitecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_invitecode().empty()) {
    _this->_impl_.invitecode_.Set(from._internal_invitecode(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.OssPlayerData)
}

inline void OssPlayerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.invitecode_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.invitecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.invitecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OssPlayerData::~OssPlayerData() {
  // @@protoc_insertion_point(destructor:msg.OssPlayerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OssPlayerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  _impl_.invitecode_.Destroy();
}

void OssPlayerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OssPlayerData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.OssPlayerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.invitecode_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OssPlayerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.OssPlayerData.Data"));
        } else
          goto handle_unusual;
        continue;
      // string InviteCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_invitecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.OssPlayerData.InviteCode"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OssPlayerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.OssPlayerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Data = 1;
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.OssPlayerData.Data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  // string InviteCode = 2;
  if (!this->_internal_invitecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invitecode().data(), static_cast<int>(this->_internal_invitecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.OssPlayerData.InviteCode");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_invitecode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.OssPlayerData)
  return target;
}

size_t OssPlayerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.OssPlayerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // string InviteCode = 2;
  if (!this->_internal_invitecode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invitecode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OssPlayerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OssPlayerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OssPlayerData::GetClassData() const { return &_class_data_; }


void OssPlayerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OssPlayerData*>(&to_msg);
  auto& from = static_cast<const OssPlayerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.OssPlayerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_invitecode().empty()) {
    _this->_internal_set_invitecode(from._internal_invitecode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OssPlayerData::CopyFrom(const OssPlayerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.OssPlayerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OssPlayerData::IsInitialized() const {
  return true;
}

void OssPlayerData::InternalSwap(OssPlayerData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.invitecode_, lhs_arena,
      &other->_impl_.invitecode_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OssPlayerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[250]);
}

// ===================================================================

BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse::BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse() {}
BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse::BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse::MergeFrom(const BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[251]);
}

// ===================================================================

class BattleExtData::_Internal {
 public:
};

BattleExtData::BattleExtData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &BattleExtData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.BattleExtData)
}
BattleExtData::BattleExtData(const BattleExtData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BattleExtData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rankrewardlist_){from._impl_.rankrewardlist_}
    , /*decltype(_impl_._rankrewardlist_cached_byte_size_)*/{0}
    , /*decltype(_impl_.playersbetcurrencynum_)*/{}
    , decltype(_impl_.chesslist_){from._impl_.chesslist_}
    , decltype(_impl_.authorid_){}
    , decltype(_impl_.mapkey_){}
    , decltype(_impl_.ticketid_){}
    , decltype(_impl_.ticketnum_){}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.submapid_){}
    , decltype(_impl_.currencynum_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.bountybasecurrencynum_){}
    , decltype(_impl_.syspercent_){}
    , decltype(_impl_.sysdrawauthorpercent_){}
    , decltype(_impl_.authorpercent_){}
    , decltype(_impl_.customcardflag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playersbetcurrencynum_.MergeFrom(from._impl_.playersbetcurrencynum_);
  _impl_.authorid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authorid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_authorid().empty()) {
    _this->_impl_.authorid_.Set(from._internal_authorid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mapkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapkey().empty()) {
    _this->_impl_.mapkey_.Set(from._internal_mapkey(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ticketid_, &from._impl_.ticketid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.customcardflag_) -
    reinterpret_cast<char*>(&_impl_.ticketid_)) + sizeof(_impl_.customcardflag_));
  // @@protoc_insertion_point(copy_constructor:msg.BattleExtData)
}

inline void BattleExtData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rankrewardlist_){arena}
    , /*decltype(_impl_._rankrewardlist_cached_byte_size_)*/{0}
    , /*decltype(_impl_.playersbetcurrencynum_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.chesslist_){arena}
    , decltype(_impl_.authorid_){}
    , decltype(_impl_.mapkey_){}
    , decltype(_impl_.ticketid_){0}
    , decltype(_impl_.ticketnum_){0}
    , decltype(_impl_.mapid_){0u}
    , decltype(_impl_.submapid_){0u}
    , decltype(_impl_.currencynum_){0}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.bountybasecurrencynum_){0}
    , decltype(_impl_.syspercent_){0}
    , decltype(_impl_.sysdrawauthorpercent_){0}
    , decltype(_impl_.authorpercent_){0}
    , decltype(_impl_.customcardflag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.authorid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authorid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mapkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BattleExtData::~BattleExtData() {
  // @@protoc_insertion_point(destructor:msg.BattleExtData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void BattleExtData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rankrewardlist_.~RepeatedField();
  _impl_.playersbetcurrencynum_.Destruct();
  _impl_.playersbetcurrencynum_.~MapField();
  _impl_.chesslist_.~RepeatedPtrField();
  _impl_.authorid_.Destroy();
  _impl_.mapkey_.Destroy();
}

void BattleExtData::ArenaDtor(void* object) {
  BattleExtData* _this = reinterpret_cast< BattleExtData* >(object);
  _this->_impl_.playersbetcurrencynum_.Destruct();
}
void BattleExtData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BattleExtData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.BattleExtData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rankrewardlist_.Clear();
  _impl_.playersbetcurrencynum_.Clear();
  _impl_.chesslist_.Clear();
  _impl_.authorid_.ClearToEmpty();
  _impl_.mapkey_.ClearToEmpty();
  ::memset(&_impl_.ticketid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.customcardflag_) -
      reinterpret_cast<char*>(&_impl_.ticketid_)) + sizeof(_impl_.customcardflag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleExtData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 TicketID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ticketid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TicketNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ticketnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 RankRewardList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rankrewardlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_rankrewardlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MapID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SubMapID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.submapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CurrencyNum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.currencynum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BountyBaseCurrencyNum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.bountybasecurrencynum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> PlayersBetCurrencyNum = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.playersbetcurrencynum_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string AuthorId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_authorid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.BattleExtData.AuthorId"));
        } else
          goto handle_unusual;
        continue;
      // int32 sysPercent = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.syspercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sysDrawAuthorPercent = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.sysdrawauthorpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 authorPercent = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.authorpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.KernelChessInfo ChessList = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chesslist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool CustomCardFlag = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.customcardflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string MapKey = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_mapkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.BattleExtData.MapKey"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BattleExtData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.BattleExtData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TicketID = 1;
  if (this->_internal_ticketid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ticketid(), target);
  }

  // int32 TicketNum = 2;
  if (this->_internal_ticketnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ticketnum(), target);
  }

  // repeated int32 RankRewardList = 3;
  {
    int byte_size = _impl_._rankrewardlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_rankrewardlist(), byte_size, target);
    }
  }

  // uint32 MapID = 4;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mapid(), target);
  }

  // uint32 SubMapID = 5;
  if (this->_internal_submapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_submapid(), target);
  }

  // int32 CurrencyNum = 6;
  if (this->_internal_currencynum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_currencynum(), target);
  }

  // int32 Version = 7;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_version(), target);
  }

  // int32 BountyBaseCurrencyNum = 8;
  if (this->_internal_bountybasecurrencynum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_bountybasecurrencynum(), target);
  }

  // map<string, int32> PlayersBetCurrencyNum = 9;
  if (!this->_internal_playersbetcurrencynum().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_playersbetcurrencynum();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.BattleExtData.PlayersBetCurrencyNumEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string AuthorId = 10;
  if (!this->_internal_authorid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_authorid().data(), static_cast<int>(this->_internal_authorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.BattleExtData.AuthorId");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_authorid(), target);
  }

  // int32 sysPercent = 11;
  if (this->_internal_syspercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_syspercent(), target);
  }

  // int32 sysDrawAuthorPercent = 12;
  if (this->_internal_sysdrawauthorpercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_sysdrawauthorpercent(), target);
  }

  // int32 authorPercent = 13;
  if (this->_internal_authorpercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_authorpercent(), target);
  }

  // repeated .msg.KernelChessInfo ChessList = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chesslist_size()); i < n; i++) {
    const auto& repfield = this->_internal_chesslist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool CustomCardFlag = 15;
  if (this->_internal_customcardflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_customcardflag(), target);
  }

  // string MapKey = 16;
  if (!this->_internal_mapkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapkey().data(), static_cast<int>(this->_internal_mapkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.BattleExtData.MapKey");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_mapkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.BattleExtData)
  return target;
}

size_t BattleExtData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.BattleExtData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 RankRewardList = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.rankrewardlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._rankrewardlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, int32> PlayersBetCurrencyNum = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_playersbetcurrencynum_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_playersbetcurrencynum().begin();
      it != this->_internal_playersbetcurrencynum().end(); ++it) {
    total_size += BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .msg.KernelChessInfo ChessList = 14;
  total_size += 1UL * this->_internal_chesslist_size();
  for (const auto& msg : this->_impl_.chesslist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string AuthorId = 10;
  if (!this->_internal_authorid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_authorid());
  }

  // string MapKey = 16;
  if (!this->_internal_mapkey().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapkey());
  }

  // int32 TicketID = 1;
  if (this->_internal_ticketid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ticketid());
  }

  // int32 TicketNum = 2;
  if (this->_internal_ticketnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ticketnum());
  }

  // uint32 MapID = 4;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mapid());
  }

  // uint32 SubMapID = 5;
  if (this->_internal_submapid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_submapid());
  }

  // int32 CurrencyNum = 6;
  if (this->_internal_currencynum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_currencynum());
  }

  // int32 Version = 7;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  // int32 BountyBaseCurrencyNum = 8;
  if (this->_internal_bountybasecurrencynum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bountybasecurrencynum());
  }

  // int32 sysPercent = 11;
  if (this->_internal_syspercent() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_syspercent());
  }

  // int32 sysDrawAuthorPercent = 12;
  if (this->_internal_sysdrawauthorpercent() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sysdrawauthorpercent());
  }

  // int32 authorPercent = 13;
  if (this->_internal_authorpercent() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_authorpercent());
  }

  // bool CustomCardFlag = 15;
  if (this->_internal_customcardflag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BattleExtData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BattleExtData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BattleExtData::GetClassData() const { return &_class_data_; }


void BattleExtData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BattleExtData*>(&to_msg);
  auto& from = static_cast<const BattleExtData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.BattleExtData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rankrewardlist_.MergeFrom(from._impl_.rankrewardlist_);
  _this->_impl_.playersbetcurrencynum_.MergeFrom(from._impl_.playersbetcurrencynum_);
  _this->_impl_.chesslist_.MergeFrom(from._impl_.chesslist_);
  if (!from._internal_authorid().empty()) {
    _this->_internal_set_authorid(from._internal_authorid());
  }
  if (!from._internal_mapkey().empty()) {
    _this->_internal_set_mapkey(from._internal_mapkey());
  }
  if (from._internal_ticketid() != 0) {
    _this->_internal_set_ticketid(from._internal_ticketid());
  }
  if (from._internal_ticketnum() != 0) {
    _this->_internal_set_ticketnum(from._internal_ticketnum());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_submapid() != 0) {
    _this->_internal_set_submapid(from._internal_submapid());
  }
  if (from._internal_currencynum() != 0) {
    _this->_internal_set_currencynum(from._internal_currencynum());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_bountybasecurrencynum() != 0) {
    _this->_internal_set_bountybasecurrencynum(from._internal_bountybasecurrencynum());
  }
  if (from._internal_syspercent() != 0) {
    _this->_internal_set_syspercent(from._internal_syspercent());
  }
  if (from._internal_sysdrawauthorpercent() != 0) {
    _this->_internal_set_sysdrawauthorpercent(from._internal_sysdrawauthorpercent());
  }
  if (from._internal_authorpercent() != 0) {
    _this->_internal_set_authorpercent(from._internal_authorpercent());
  }
  if (from._internal_customcardflag() != 0) {
    _this->_internal_set_customcardflag(from._internal_customcardflag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BattleExtData::CopyFrom(const BattleExtData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.BattleExtData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleExtData::IsInitialized() const {
  return true;
}

void BattleExtData::InternalSwap(BattleExtData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rankrewardlist_.InternalSwap(&other->_impl_.rankrewardlist_);
  _impl_.playersbetcurrencynum_.InternalSwap(&other->_impl_.playersbetcurrencynum_);
  _impl_.chesslist_.InternalSwap(&other->_impl_.chesslist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.authorid_, lhs_arena,
      &other->_impl_.authorid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapkey_, lhs_arena,
      &other->_impl_.mapkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleExtData, _impl_.customcardflag_)
      + sizeof(BattleExtData::_impl_.customcardflag_)
      - PROTOBUF_FIELD_OFFSET(BattleExtData, _impl_.ticketid_)>(
          reinterpret_cast<char*>(&_impl_.ticketid_),
          reinterpret_cast<char*>(&other->_impl_.ticketid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleExtData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[252]);
}

// ===================================================================

class PvpExtData::_Internal {
 public:
  static const ::msg::PvpBigWinnerData& bigwinner(const PvpExtData* msg);
};

const ::msg::PvpBigWinnerData&
PvpExtData::_Internal::bigwinner(const PvpExtData* msg) {
  return *msg->_impl_.bigwinner_;
}
PvpExtData::PvpExtData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PvpExtData)
}
PvpExtData::PvpExtData(const PvpExtData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PvpExtData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pvedebuff_){from._impl_.pvedebuff_}
    , /*decltype(_impl_._pvedebuff_cached_byte_size_)*/{0}
    , decltype(_impl_.mapkey_){}
    , decltype(_impl_.captain_){}
    , decltype(_impl_.bigwinner_){nullptr}
    , decltype(_impl_.submode_){}
    , decltype(_impl_.pvpchestviplevel_){}
    , decltype(_impl_.iscardgroup_){}
    , decltype(_impl_.tdstage_){}
    , decltype(_impl_.pvechallengemode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mapkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapkey().empty()) {
    _this->_impl_.mapkey_.Set(from._internal_mapkey(), 
      _this->GetArenaForAllocation());
  }
  _impl_.captain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.captain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_captain().empty()) {
    _this->_impl_.captain_.Set(from._internal_captain(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_bigwinner()) {
    _this->_impl_.bigwinner_ = new ::msg::PvpBigWinnerData(*from._impl_.bigwinner_);
  }
  ::memcpy(&_impl_.submode_, &from._impl_.submode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pvechallengemode_) -
    reinterpret_cast<char*>(&_impl_.submode_)) + sizeof(_impl_.pvechallengemode_));
  // @@protoc_insertion_point(copy_constructor:msg.PvpExtData)
}

inline void PvpExtData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pvedebuff_){arena}
    , /*decltype(_impl_._pvedebuff_cached_byte_size_)*/{0}
    , decltype(_impl_.mapkey_){}
    , decltype(_impl_.captain_){}
    , decltype(_impl_.bigwinner_){nullptr}
    , decltype(_impl_.submode_){0u}
    , decltype(_impl_.pvpchestviplevel_){0u}
    , decltype(_impl_.iscardgroup_){false}
    , decltype(_impl_.tdstage_){0}
    , decltype(_impl_.pvechallengemode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mapkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.captain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.captain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PvpExtData::~PvpExtData() {
  // @@protoc_insertion_point(destructor:msg.PvpExtData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PvpExtData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pvedebuff_.~RepeatedField();
  _impl_.mapkey_.Destroy();
  _impl_.captain_.Destroy();
  if (this != internal_default_instance()) delete _impl_.bigwinner_;
}

void PvpExtData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PvpExtData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PvpExtData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pvedebuff_.Clear();
  _impl_.mapkey_.ClearToEmpty();
  _impl_.captain_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.bigwinner_ != nullptr) {
    delete _impl_.bigwinner_;
  }
  _impl_.bigwinner_ = nullptr;
  ::memset(&_impl_.submode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pvechallengemode_) -
      reinterpret_cast<char*>(&_impl_.submode_)) + sizeof(_impl_.pvechallengemode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PvpExtData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.PvpBigWinnerData BigWinner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bigwinner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Submode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.submode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 PvpChestVipLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pvpchestviplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 PveDebuff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_pvedebuff(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_pvedebuff(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string MapKey = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mapkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpExtData.MapKey"));
        } else
          goto handle_unusual;
        continue;
      // string Captain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_captain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpExtData.Captain"));
        } else
          goto handle_unusual;
        continue;
      // bool IsCardGroup = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.iscardgroup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TDStage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.tdstage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PveMode PveChallengeMode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pvechallengemode(static_cast<::msg::PveMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PvpExtData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PvpExtData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.PvpBigWinnerData BigWinner = 1;
  if (this->_internal_has_bigwinner()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bigwinner(this),
        _Internal::bigwinner(this).GetCachedSize(), target, stream);
  }

  // uint32 Submode = 2;
  if (this->_internal_submode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_submode(), target);
  }

  // uint32 PvpChestVipLevel = 3;
  if (this->_internal_pvpchestviplevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pvpchestviplevel(), target);
  }

  // repeated uint32 PveDebuff = 4;
  {
    int byte_size = _impl_._pvedebuff_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_pvedebuff(), byte_size, target);
    }
  }

  // string MapKey = 5;
  if (!this->_internal_mapkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapkey().data(), static_cast<int>(this->_internal_mapkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpExtData.MapKey");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mapkey(), target);
  }

  // string Captain = 6;
  if (!this->_internal_captain().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_captain().data(), static_cast<int>(this->_internal_captain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpExtData.Captain");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_captain(), target);
  }

  // bool IsCardGroup = 7;
  if (this->_internal_iscardgroup() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_iscardgroup(), target);
  }

  // int32 TDStage = 8;
  if (this->_internal_tdstage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_tdstage(), target);
  }

  // .msg.PveMode PveChallengeMode = 9;
  if (this->_internal_pvechallengemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_pvechallengemode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PvpExtData)
  return target;
}

size_t PvpExtData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PvpExtData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 PveDebuff = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.pvedebuff_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._pvedebuff_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string MapKey = 5;
  if (!this->_internal_mapkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapkey());
  }

  // string Captain = 6;
  if (!this->_internal_captain().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_captain());
  }

  // .msg.PvpBigWinnerData BigWinner = 1;
  if (this->_internal_has_bigwinner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bigwinner_);
  }

  // uint32 Submode = 2;
  if (this->_internal_submode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_submode());
  }

  // uint32 PvpChestVipLevel = 3;
  if (this->_internal_pvpchestviplevel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pvpchestviplevel());
  }

  // bool IsCardGroup = 7;
  if (this->_internal_iscardgroup() != 0) {
    total_size += 1 + 1;
  }

  // int32 TDStage = 8;
  if (this->_internal_tdstage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tdstage());
  }

  // .msg.PveMode PveChallengeMode = 9;
  if (this->_internal_pvechallengemode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_pvechallengemode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PvpExtData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PvpExtData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PvpExtData::GetClassData() const { return &_class_data_; }


void PvpExtData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PvpExtData*>(&to_msg);
  auto& from = static_cast<const PvpExtData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PvpExtData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pvedebuff_.MergeFrom(from._impl_.pvedebuff_);
  if (!from._internal_mapkey().empty()) {
    _this->_internal_set_mapkey(from._internal_mapkey());
  }
  if (!from._internal_captain().empty()) {
    _this->_internal_set_captain(from._internal_captain());
  }
  if (from._internal_has_bigwinner()) {
    _this->_internal_mutable_bigwinner()->::msg::PvpBigWinnerData::MergeFrom(
        from._internal_bigwinner());
  }
  if (from._internal_submode() != 0) {
    _this->_internal_set_submode(from._internal_submode());
  }
  if (from._internal_pvpchestviplevel() != 0) {
    _this->_internal_set_pvpchestviplevel(from._internal_pvpchestviplevel());
  }
  if (from._internal_iscardgroup() != 0) {
    _this->_internal_set_iscardgroup(from._internal_iscardgroup());
  }
  if (from._internal_tdstage() != 0) {
    _this->_internal_set_tdstage(from._internal_tdstage());
  }
  if (from._internal_pvechallengemode() != 0) {
    _this->_internal_set_pvechallengemode(from._internal_pvechallengemode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PvpExtData::CopyFrom(const PvpExtData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PvpExtData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpExtData::IsInitialized() const {
  return true;
}

void PvpExtData::InternalSwap(PvpExtData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pvedebuff_.InternalSwap(&other->_impl_.pvedebuff_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapkey_, lhs_arena,
      &other->_impl_.mapkey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.captain_, lhs_arena,
      &other->_impl_.captain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PvpExtData, _impl_.pvechallengemode_)
      + sizeof(PvpExtData::_impl_.pvechallengemode_)
      - PROTOBUF_FIELD_OFFSET(PvpExtData, _impl_.bigwinner_)>(
          reinterpret_cast<char*>(&_impl_.bigwinner_),
          reinterpret_cast<char*>(&other->_impl_.bigwinner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PvpExtData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[253]);
}

// ===================================================================

PlayerExtMap_AssistantMapEntry_DoNotUse::PlayerExtMap_AssistantMapEntry_DoNotUse() {}
PlayerExtMap_AssistantMapEntry_DoNotUse::PlayerExtMap_AssistantMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PlayerExtMap_AssistantMapEntry_DoNotUse::MergeFrom(const PlayerExtMap_AssistantMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PlayerExtMap_AssistantMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[254]);
}

// ===================================================================

PlayerExtMap_BattleTimeMapEntry_DoNotUse::PlayerExtMap_BattleTimeMapEntry_DoNotUse() {}
PlayerExtMap_BattleTimeMapEntry_DoNotUse::PlayerExtMap_BattleTimeMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PlayerExtMap_BattleTimeMapEntry_DoNotUse::MergeFrom(const PlayerExtMap_BattleTimeMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PlayerExtMap_BattleTimeMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[255]);
}

// ===================================================================

PlayerExtMap_PveBuffEntry_DoNotUse::PlayerExtMap_PveBuffEntry_DoNotUse() {}
PlayerExtMap_PveBuffEntry_DoNotUse::PlayerExtMap_PveBuffEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PlayerExtMap_PveBuffEntry_DoNotUse::MergeFrom(const PlayerExtMap_PveBuffEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PlayerExtMap_PveBuffEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[256]);
}

// ===================================================================

PlayerExtMap_MsRelationEntry_DoNotUse::PlayerExtMap_MsRelationEntry_DoNotUse() {}
PlayerExtMap_MsRelationEntry_DoNotUse::PlayerExtMap_MsRelationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PlayerExtMap_MsRelationEntry_DoNotUse::MergeFrom(const PlayerExtMap_MsRelationEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PlayerExtMap_MsRelationEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[257]);
}

// ===================================================================

PlayerExtMap_PvpPlayerGroupEntry_DoNotUse::PlayerExtMap_PvpPlayerGroupEntry_DoNotUse() {}
PlayerExtMap_PvpPlayerGroupEntry_DoNotUse::PlayerExtMap_PvpPlayerGroupEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PlayerExtMap_PvpPlayerGroupEntry_DoNotUse::MergeFrom(const PlayerExtMap_PvpPlayerGroupEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PlayerExtMap_PvpPlayerGroupEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[258]);
}

// ===================================================================

class PlayerExtMap::_Internal {
 public:
};

PlayerExtMap::PlayerExtMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PlayerExtMap::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.PlayerExtMap)
}
PlayerExtMap::PlayerExtMap(const PlayerExtMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerExtMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.assistantmap_)*/{}
    , /*decltype(_impl_.battletimemap_)*/{}
    , /*decltype(_impl_.pvebuff_)*/{}
    , /*decltype(_impl_.msrelation_)*/{}
    , /*decltype(_impl_.pvpplayergroup_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.assistantmap_.MergeFrom(from._impl_.assistantmap_);
  _this->_impl_.battletimemap_.MergeFrom(from._impl_.battletimemap_);
  _this->_impl_.pvebuff_.MergeFrom(from._impl_.pvebuff_);
  _this->_impl_.msrelation_.MergeFrom(from._impl_.msrelation_);
  _this->_impl_.pvpplayergroup_.MergeFrom(from._impl_.pvpplayergroup_);
  // @@protoc_insertion_point(copy_constructor:msg.PlayerExtMap)
}

inline void PlayerExtMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.assistantmap_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.battletimemap_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.pvebuff_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.msrelation_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.pvpplayergroup_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerExtMap::~PlayerExtMap() {
  // @@protoc_insertion_point(destructor:msg.PlayerExtMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PlayerExtMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.assistantmap_.Destruct();
  _impl_.assistantmap_.~MapField();
  _impl_.battletimemap_.Destruct();
  _impl_.battletimemap_.~MapField();
  _impl_.pvebuff_.Destruct();
  _impl_.pvebuff_.~MapField();
  _impl_.msrelation_.Destruct();
  _impl_.msrelation_.~MapField();
  _impl_.pvpplayergroup_.Destruct();
  _impl_.pvpplayergroup_.~MapField();
}

void PlayerExtMap::ArenaDtor(void* object) {
  PlayerExtMap* _this = reinterpret_cast< PlayerExtMap* >(object);
  _this->_impl_.assistantmap_.Destruct();
  _this->_impl_.battletimemap_.Destruct();
  _this->_impl_.pvebuff_.Destruct();
  _this->_impl_.msrelation_.Destruct();
  _this->_impl_.pvpplayergroup_.Destruct();
}
void PlayerExtMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerExtMap::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayerExtMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.assistantmap_.Clear();
  _impl_.battletimemap_.Clear();
  _impl_.pvebuff_.Clear();
  _impl_.msrelation_.Clear();
  _impl_.pvpplayergroup_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerExtMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, int32> AssistantMap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.assistantmap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, uint32> BattleTimeMap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.battletimemap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .msg.Buffs> PveBuff = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.pvebuff_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> MsRelation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.msrelation_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .msg.TEAMGROUP> PvpPlayerGroup = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.pvpplayergroup_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerExtMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerExtMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int32> AssistantMap = 1;
  if (!this->_internal_assistantmap().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = PlayerExtMap_AssistantMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_assistantmap();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.PlayerExtMap.AssistantMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, uint32> BattleTimeMap = 2;
  if (!this->_internal_battletimemap().empty()) {
    using MapType = ::_pb::Map<std::string, uint32_t>;
    using WireHelper = PlayerExtMap_BattleTimeMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_battletimemap();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.PlayerExtMap.BattleTimeMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .msg.Buffs> PveBuff = 3;
  if (!this->_internal_pvebuff().empty()) {
    using MapType = ::_pb::Map<std::string, ::msg::Buffs>;
    using WireHelper = PlayerExtMap_PveBuffEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_pvebuff();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.PlayerExtMap.PveBuffEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, string> MsRelation = 4;
  if (!this->_internal_msrelation().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = PlayerExtMap_MsRelationEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_msrelation();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.PlayerExtMap.MsRelationEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.PlayerExtMap.MsRelationEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .msg.TEAMGROUP> PvpPlayerGroup = 5;
  if (!this->_internal_pvpplayergroup().empty()) {
    using MapType = ::_pb::Map<std::string, ::msg::TEAMGROUP>;
    using WireHelper = PlayerExtMap_PvpPlayerGroupEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_pvpplayergroup();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.PlayerExtMap.PvpPlayerGroupEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerExtMap)
  return target;
}

size_t PlayerExtMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayerExtMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> AssistantMap = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_assistantmap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_assistantmap().begin();
      it != this->_internal_assistantmap().end(); ++it) {
    total_size += PlayerExtMap_AssistantMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, uint32> BattleTimeMap = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_battletimemap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >::const_iterator
      it = this->_internal_battletimemap().begin();
      it != this->_internal_battletimemap().end(); ++it) {
    total_size += PlayerExtMap_BattleTimeMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .msg.Buffs> PveBuff = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pvebuff_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::Buffs >::const_iterator
      it = this->_internal_pvebuff().begin();
      it != this->_internal_pvebuff().end(); ++it) {
    total_size += PlayerExtMap_PveBuffEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> MsRelation = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_msrelation_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_msrelation().begin();
      it != this->_internal_msrelation().end(); ++it) {
    total_size += PlayerExtMap_MsRelationEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .msg.TEAMGROUP> PvpPlayerGroup = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_pvpplayergroup_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::TEAMGROUP >::const_iterator
      it = this->_internal_pvpplayergroup().begin();
      it != this->_internal_pvpplayergroup().end(); ++it) {
    total_size += PlayerExtMap_PvpPlayerGroupEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerExtMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerExtMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerExtMap::GetClassData() const { return &_class_data_; }


void PlayerExtMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerExtMap*>(&to_msg);
  auto& from = static_cast<const PlayerExtMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayerExtMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.assistantmap_.MergeFrom(from._impl_.assistantmap_);
  _this->_impl_.battletimemap_.MergeFrom(from._impl_.battletimemap_);
  _this->_impl_.pvebuff_.MergeFrom(from._impl_.pvebuff_);
  _this->_impl_.msrelation_.MergeFrom(from._impl_.msrelation_);
  _this->_impl_.pvpplayergroup_.MergeFrom(from._impl_.pvpplayergroup_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerExtMap::CopyFrom(const PlayerExtMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayerExtMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerExtMap::IsInitialized() const {
  return true;
}

void PlayerExtMap::InternalSwap(PlayerExtMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.assistantmap_.InternalSwap(&other->_impl_.assistantmap_);
  _impl_.battletimemap_.InternalSwap(&other->_impl_.battletimemap_);
  _impl_.pvebuff_.InternalSwap(&other->_impl_.pvebuff_);
  _impl_.msrelation_.InternalSwap(&other->_impl_.msrelation_);
  _impl_.pvpplayergroup_.InternalSwap(&other->_impl_.pvpplayergroup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerExtMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[259]);
}

// ===================================================================

class Buffs::_Internal {
 public:
};

Buffs::Buffs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.Buffs)
}
Buffs::Buffs(const Buffs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Buffs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.Buffs)
}

inline void Buffs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Buffs::~Buffs() {
  // @@protoc_insertion_point(destructor:msg.Buffs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Buffs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
}

void Buffs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Buffs::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Buffs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Buffs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Buffs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Buffs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 Data = 1;
  {
    int byte_size = _impl_._data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Buffs)
  return target;
}

size_t Buffs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Buffs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 Data = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.data_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Buffs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Buffs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Buffs::GetClassData() const { return &_class_data_; }


void Buffs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Buffs*>(&to_msg);
  auto& from = static_cast<const Buffs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Buffs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Buffs::CopyFrom(const Buffs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Buffs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Buffs::IsInitialized() const {
  return true;
}

void Buffs::InternalSwap(Buffs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Buffs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[260]);
}

// ===================================================================

class ActivityGroup::_Internal {
 public:
  static const ::msg::ActivityGroupData& group(const ActivityGroup* msg);
};

const ::msg::ActivityGroupData&
ActivityGroup::_Internal::group(const ActivityGroup* msg) {
  return *msg->_impl_.group_;
}
ActivityGroup::ActivityGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ActivityGroup)
}
ActivityGroup::ActivityGroup(const ActivityGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActivityGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.activities_){from._impl_.activities_}
    , decltype(_impl_.group_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group()) {
    _this->_impl_.group_ = new ::msg::ActivityGroupData(*from._impl_.group_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.ActivityGroup)
}

inline void ActivityGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.activities_){arena}
    , decltype(_impl_.group_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ActivityGroup::~ActivityGroup() {
  // @@protoc_insertion_point(destructor:msg.ActivityGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActivityGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.activities_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.group_;
}

void ActivityGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActivityGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ActivityGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.activities_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.group_ != nullptr) {
    delete _impl_.group_;
  }
  _impl_.group_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.ActivityGroupData Group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.ActivityData Activities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ActivityGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.ActivityGroupData Group = 1;
  if (this->_internal_has_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::group(this),
        _Internal::group(this).GetCachedSize(), target, stream);
  }

  // repeated .msg.ActivityData Activities = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_activities_size()); i < n; i++) {
    const auto& repfield = this->_internal_activities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ActivityGroup)
  return target;
}

size_t ActivityGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ActivityGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.ActivityData Activities = 2;
  total_size += 1UL * this->_internal_activities_size();
  for (const auto& msg : this->_impl_.activities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .msg.ActivityGroupData Group = 1;
  if (this->_internal_has_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActivityGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityGroup::GetClassData() const { return &_class_data_; }


void ActivityGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActivityGroup*>(&to_msg);
  auto& from = static_cast<const ActivityGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ActivityGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.activities_.MergeFrom(from._impl_.activities_);
  if (from._internal_has_group()) {
    _this->_internal_mutable_group()->::msg::ActivityGroupData::MergeFrom(
        from._internal_group());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityGroup::CopyFrom(const ActivityGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ActivityGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityGroup::IsInitialized() const {
  return true;
}

void ActivityGroup::InternalSwap(ActivityGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.activities_.InternalSwap(&other->_impl_.activities_);
  swap(_impl_.group_, other->_impl_.group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[261]);
}

// ===================================================================

class ScoredMap::_Internal {
 public:
};

ScoredMap::ScoredMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ScoredMap)
}
ScoredMap::ScoredMap(const ScoredMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScoredMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mapid_){}
    , decltype(_impl_.islike_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mapid_, &from._impl_.mapid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.islike_) -
    reinterpret_cast<char*>(&_impl_.mapid_)) + sizeof(_impl_.islike_));
  // @@protoc_insertion_point(copy_constructor:msg.ScoredMap)
}

inline void ScoredMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mapid_){0u}
    , decltype(_impl_.islike_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ScoredMap::~ScoredMap() {
  // @@protoc_insertion_point(destructor:msg.ScoredMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScoredMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScoredMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScoredMap::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ScoredMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.mapid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.islike_) -
      reinterpret_cast<char*>(&_impl_.mapid_)) + sizeof(_impl_.islike_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScoredMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 MapID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsLike = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.islike_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScoredMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ScoredMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 MapID = 1;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mapid(), target);
  }

  // bool IsLike = 2;
  if (this->_internal_islike() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_islike(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ScoredMap)
  return target;
}

size_t ScoredMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ScoredMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 MapID = 1;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mapid());
  }

  // bool IsLike = 2;
  if (this->_internal_islike() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScoredMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScoredMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScoredMap::GetClassData() const { return &_class_data_; }


void ScoredMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScoredMap*>(&to_msg);
  auto& from = static_cast<const ScoredMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ScoredMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_islike() != 0) {
    _this->_internal_set_islike(from._internal_islike());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScoredMap::CopyFrom(const ScoredMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ScoredMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoredMap::IsInitialized() const {
  return true;
}

void ScoredMap::InternalSwap(ScoredMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScoredMap, _impl_.islike_)
      + sizeof(ScoredMap::_impl_.islike_)
      - PROTOBUF_FIELD_OFFSET(ScoredMap, _impl_.mapid_)>(
          reinterpret_cast<char*>(&_impl_.mapid_),
          reinterpret_cast<char*>(&other->_impl_.mapid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScoredMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[262]);
}

// ===================================================================

class TransferEvent::_Internal {
 public:
};

TransferEvent::TransferEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TransferEvent)
}
TransferEvent::TransferEvent(const TransferEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransferEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payee_){}
    , decltype(_impl_.redhsetfield_){}
    , decltype(_impl_.etype_){}
    , decltype(_impl_.tokenid_){}
    , decltype(_impl_.tokencount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payee_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payee().empty()) {
    _this->_impl_.payee_.Set(from._internal_payee(), 
      _this->GetArenaForAllocation());
  }
  _impl_.redhsetfield_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redhsetfield_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_redhsetfield().empty()) {
    _this->_impl_.redhsetfield_.Set(from._internal_redhsetfield(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.etype_, &from._impl_.etype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tokencount_) -
    reinterpret_cast<char*>(&_impl_.etype_)) + sizeof(_impl_.tokencount_));
  // @@protoc_insertion_point(copy_constructor:msg.TransferEvent)
}

inline void TransferEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payee_){}
    , decltype(_impl_.redhsetfield_){}
    , decltype(_impl_.etype_){0}
    , decltype(_impl_.tokenid_){0}
    , decltype(_impl_.tokencount_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payee_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.redhsetfield_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.redhsetfield_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransferEvent::~TransferEvent() {
  // @@protoc_insertion_point(destructor:msg.TransferEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransferEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payee_.Destroy();
  _impl_.redhsetfield_.Destroy();
}

void TransferEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransferEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TransferEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payee_.ClearToEmpty();
  _impl_.redhsetfield_.ClearToEmpty();
  ::memset(&_impl_.etype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tokencount_) -
      reinterpret_cast<char*>(&_impl_.etype_)) + sizeof(_impl_.tokencount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.TransferEventType EType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_etype(static_cast<::msg::TransferEventType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 TokenID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tokenid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TokenCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tokencount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Payee = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_payee();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TransferEvent.Payee"));
        } else
          goto handle_unusual;
        continue;
      // string RedHSetField = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_redhsetfield();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TransferEvent.RedHSetField"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransferEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TransferEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.TransferEventType EType = 1;
  if (this->_internal_etype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_etype(), target);
  }

  // int32 TokenID = 2;
  if (this->_internal_tokenid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tokenid(), target);
  }

  // int32 TokenCount = 3;
  if (this->_internal_tokencount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_tokencount(), target);
  }

  // string Payee = 4;
  if (!this->_internal_payee().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payee().data(), static_cast<int>(this->_internal_payee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TransferEvent.Payee");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_payee(), target);
  }

  // string RedHSetField = 5;
  if (!this->_internal_redhsetfield().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_redhsetfield().data(), static_cast<int>(this->_internal_redhsetfield().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TransferEvent.RedHSetField");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_redhsetfield(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TransferEvent)
  return target;
}

size_t TransferEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TransferEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Payee = 4;
  if (!this->_internal_payee().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payee());
  }

  // string RedHSetField = 5;
  if (!this->_internal_redhsetfield().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_redhsetfield());
  }

  // .msg.TransferEventType EType = 1;
  if (this->_internal_etype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_etype());
  }

  // int32 TokenID = 2;
  if (this->_internal_tokenid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tokenid());
  }

  // int32 TokenCount = 3;
  if (this->_internal_tokencount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tokencount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransferEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferEvent::GetClassData() const { return &_class_data_; }


void TransferEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransferEvent*>(&to_msg);
  auto& from = static_cast<const TransferEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TransferEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payee().empty()) {
    _this->_internal_set_payee(from._internal_payee());
  }
  if (!from._internal_redhsetfield().empty()) {
    _this->_internal_set_redhsetfield(from._internal_redhsetfield());
  }
  if (from._internal_etype() != 0) {
    _this->_internal_set_etype(from._internal_etype());
  }
  if (from._internal_tokenid() != 0) {
    _this->_internal_set_tokenid(from._internal_tokenid());
  }
  if (from._internal_tokencount() != 0) {
    _this->_internal_set_tokencount(from._internal_tokencount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferEvent::CopyFrom(const TransferEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TransferEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferEvent::IsInitialized() const {
  return true;
}

void TransferEvent::InternalSwap(TransferEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payee_, lhs_arena,
      &other->_impl_.payee_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.redhsetfield_, lhs_arena,
      &other->_impl_.redhsetfield_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferEvent, _impl_.tokencount_)
      + sizeof(TransferEvent::_impl_.tokencount_)
      - PROTOBUF_FIELD_OFFSET(TransferEvent, _impl_.etype_)>(
          reinterpret_cast<char*>(&_impl_.etype_),
          reinterpret_cast<char*>(&other->_impl_.etype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[263]);
}

// ===================================================================

class TransferOP::_Internal {
 public:
};

TransferOP::TransferOP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TransferOP)
}
TransferOP::TransferOP(const TransferOP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransferOP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payeeid_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.tokenid_){}
    , decltype(_impl_.change_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payeeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payeeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payeeid().empty()) {
    _this->_impl_.payeeid_.Set(from._internal_payeeid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tokenid_, &from._impl_.tokenid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.change_) -
    reinterpret_cast<char*>(&_impl_.tokenid_)) + sizeof(_impl_.change_));
  // @@protoc_insertion_point(copy_constructor:msg.TransferOP)
}

inline void TransferOP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payeeid_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.tokenid_){0u}
    , decltype(_impl_.change_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payeeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payeeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransferOP::~TransferOP() {
  // @@protoc_insertion_point(destructor:msg.TransferOP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransferOP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payeeid_.Destroy();
  _impl_.uuid_.Destroy();
}

void TransferOP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransferOP::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TransferOP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payeeid_.ClearToEmpty();
  _impl_.uuid_.ClearToEmpty();
  ::memset(&_impl_.tokenid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.change_) -
      reinterpret_cast<char*>(&_impl_.tokenid_)) + sizeof(_impl_.change_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferOP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string PayeeID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payeeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TransferOP.PayeeID"));
        } else
          goto handle_unusual;
        continue;
      // uint32 TokenID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tokenid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Change = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string UUID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.TransferOP.UUID"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransferOP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TransferOP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string PayeeID = 1;
  if (!this->_internal_payeeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payeeid().data(), static_cast<int>(this->_internal_payeeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TransferOP.PayeeID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_payeeid(), target);
  }

  // uint32 TokenID = 2;
  if (this->_internal_tokenid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tokenid(), target);
  }

  // int32 Change = 3;
  if (this->_internal_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_change(), target);
  }

  // string UUID = 4;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TransferOP.UUID");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TransferOP)
  return target;
}

size_t TransferOP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TransferOP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string PayeeID = 1;
  if (!this->_internal_payeeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payeeid());
  }

  // string UUID = 4;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // uint32 TokenID = 2;
  if (this->_internal_tokenid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tokenid());
  }

  // int32 Change = 3;
  if (this->_internal_change() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_change());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferOP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransferOP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferOP::GetClassData() const { return &_class_data_; }


void TransferOP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransferOP*>(&to_msg);
  auto& from = static_cast<const TransferOP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TransferOP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payeeid().empty()) {
    _this->_internal_set_payeeid(from._internal_payeeid());
  }
  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_tokenid() != 0) {
    _this->_internal_set_tokenid(from._internal_tokenid());
  }
  if (from._internal_change() != 0) {
    _this->_internal_set_change(from._internal_change());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferOP::CopyFrom(const TransferOP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TransferOP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferOP::IsInitialized() const {
  return true;
}

void TransferOP::InternalSwap(TransferOP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payeeid_, lhs_arena,
      &other->_impl_.payeeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferOP, _impl_.change_)
      + sizeof(TransferOP::_impl_.change_)
      - PROTOBUF_FIELD_OFFSET(TransferOP, _impl_.tokenid_)>(
          reinterpret_cast<char*>(&_impl_.tokenid_),
          reinterpret_cast<char*>(&other->_impl_.tokenid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferOP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[264]);
}

// ===================================================================

CSDTBetData_BetFromPlayersEntry_DoNotUse::CSDTBetData_BetFromPlayersEntry_DoNotUse() {}
CSDTBetData_BetFromPlayersEntry_DoNotUse::CSDTBetData_BetFromPlayersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSDTBetData_BetFromPlayersEntry_DoNotUse::MergeFrom(const CSDTBetData_BetFromPlayersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSDTBetData_BetFromPlayersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[265]);
}

// ===================================================================

class CSDTBetData::_Internal {
 public:
};

CSDTBetData::CSDTBetData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSDTBetData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSDTBetData)
}
CSDTBetData::CSDTBetData(const CSDTBetData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTBetData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.betfromplayers_)*/{}
    , decltype(_impl_.authorid_){}
    , decltype(_impl_.betfromauthor_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.betfromplayers_.MergeFrom(from._impl_.betfromplayers_);
  _impl_.authorid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authorid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_authorid().empty()) {
    _this->_impl_.authorid_.Set(from._internal_authorid(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.betfromauthor_ = from._impl_.betfromauthor_;
  // @@protoc_insertion_point(copy_constructor:msg.CSDTBetData)
}

inline void CSDTBetData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.betfromplayers_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.authorid_){}
    , decltype(_impl_.betfromauthor_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.authorid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.authorid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTBetData::~CSDTBetData() {
  // @@protoc_insertion_point(destructor:msg.CSDTBetData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSDTBetData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.betfromplayers_.Destruct();
  _impl_.betfromplayers_.~MapField();
  _impl_.authorid_.Destroy();
}

void CSDTBetData::ArenaDtor(void* object) {
  CSDTBetData* _this = reinterpret_cast< CSDTBetData* >(object);
  _this->_impl_.betfromplayers_.Destruct();
}
void CSDTBetData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTBetData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTBetData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.betfromplayers_.Clear();
  _impl_.authorid_.ClearToEmpty();
  _impl_.betfromauthor_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTBetData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 BetFromAuthor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.betfromauthor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string AuthorId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_authorid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTBetData.AuthorId"));
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> BetFromPlayers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.betfromplayers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTBetData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTBetData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 BetFromAuthor = 1;
  if (this->_internal_betfromauthor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_betfromauthor(), target);
  }

  // string AuthorId = 2;
  if (!this->_internal_authorid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_authorid().data(), static_cast<int>(this->_internal_authorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTBetData.AuthorId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_authorid(), target);
  }

  // map<string, int32> BetFromPlayers = 3;
  if (!this->_internal_betfromplayers().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = CSDTBetData_BetFromPlayersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_betfromplayers();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.CSDTBetData.BetFromPlayersEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTBetData)
  return target;
}

size_t CSDTBetData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTBetData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> BetFromPlayers = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_betfromplayers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_betfromplayers().begin();
      it != this->_internal_betfromplayers().end(); ++it) {
    total_size += CSDTBetData_BetFromPlayersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string AuthorId = 2;
  if (!this->_internal_authorid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_authorid());
  }

  // int32 BetFromAuthor = 1;
  if (this->_internal_betfromauthor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_betfromauthor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTBetData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTBetData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTBetData::GetClassData() const { return &_class_data_; }


void CSDTBetData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTBetData*>(&to_msg);
  auto& from = static_cast<const CSDTBetData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTBetData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.betfromplayers_.MergeFrom(from._impl_.betfromplayers_);
  if (!from._internal_authorid().empty()) {
    _this->_internal_set_authorid(from._internal_authorid());
  }
  if (from._internal_betfromauthor() != 0) {
    _this->_internal_set_betfromauthor(from._internal_betfromauthor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTBetData::CopyFrom(const CSDTBetData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTBetData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTBetData::IsInitialized() const {
  return true;
}

void CSDTBetData::InternalSwap(CSDTBetData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.betfromplayers_.InternalSwap(&other->_impl_.betfromplayers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.authorid_, lhs_arena,
      &other->_impl_.authorid_, rhs_arena
  );
  swap(_impl_.betfromauthor_, other->_impl_.betfromauthor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTBetData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[266]);
}

// ===================================================================

class MailExtData::_Internal {
 public:
};

MailExtData::MailExtData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.MailExtData)
}
MailExtData::MailExtData(const MailExtData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MailExtData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.MailExtData)
}

inline void MailExtData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MailExtData::~MailExtData() {
  // @@protoc_insertion_point(destructor:msg.MailExtData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MailExtData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void MailExtData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MailExtData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MailExtData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MailExtData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.ExtItem Items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MailExtData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MailExtData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.ExtItem Items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MailExtData)
  return target;
}

size_t MailExtData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MailExtData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.ExtItem Items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MailExtData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MailExtData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MailExtData::GetClassData() const { return &_class_data_; }


void MailExtData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MailExtData*>(&to_msg);
  auto& from = static_cast<const MailExtData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.MailExtData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MailExtData::CopyFrom(const MailExtData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MailExtData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailExtData::IsInitialized() const {
  return true;
}

void MailExtData::InternalSwap(MailExtData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MailExtData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[267]);
}

// ===================================================================

class ExtItem::_Internal {
 public:
};

ExtItem::ExtItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ExtItem)
}
ExtItem::ExtItem(const ExtItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.para_){from._impl_.para_}
    , /*decltype(_impl_._para_cached_byte_size_)*/{0}
    , decltype(_impl_.instanceid_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.weight_){}
    , decltype(_impl_.price_){}
    , decltype(_impl_.sourceidx_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.instanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instanceid().empty()) {
    _this->_impl_.instanceid_.Set(from._internal_instanceid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sourceidx_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sourceidx_));
  // @@protoc_insertion_point(copy_constructor:msg.ExtItem)
}

inline void ExtItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.para_){arena}
    , /*decltype(_impl_._para_cached_byte_size_)*/{0}
    , decltype(_impl_.instanceid_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.count_){0}
    , decltype(_impl_.weight_){0}
    , decltype(_impl_.price_){0}
    , decltype(_impl_.sourceidx_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.instanceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instanceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExtItem::~ExtItem() {
  // @@protoc_insertion_point(destructor:msg.ExtItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.para_.~RepeatedField();
  _impl_.instanceid_.Destroy();
}

void ExtItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtItem::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ExtItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.para_.Clear();
  _impl_.instanceid_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sourceidx_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sourceidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 Para = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_para(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_para(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string InstanceId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_instanceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ExtItem.InstanceId"));
        } else
          goto handle_unusual;
        continue;
      // int32 Weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SourceIdx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.sourceidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ExtItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 Count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated int64 Para = 3;
  {
    int byte_size = _impl_._para_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_para(), byte_size, target);
    }
  }

  // string InstanceId = 4;
  if (!this->_internal_instanceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instanceid().data(), static_cast<int>(this->_internal_instanceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ExtItem.InstanceId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_instanceid(), target);
  }

  // int32 Weight = 5;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_weight(), target);
  }

  // int32 Price = 6;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_price(), target);
  }

  // int32 SourceIdx = 7;
  if (this->_internal_sourceidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_sourceidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ExtItem)
  return target;
}

size_t ExtItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ExtItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 Para = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.para_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._para_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string InstanceId = 4;
  if (!this->_internal_instanceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instanceid());
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 Count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  // int32 Weight = 5;
  if (this->_internal_weight() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_weight());
  }

  // int32 Price = 6;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_price());
  }

  // int32 SourceIdx = 7;
  if (this->_internal_sourceidx() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sourceidx());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtItem::GetClassData() const { return &_class_data_; }


void ExtItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtItem*>(&to_msg);
  auto& from = static_cast<const ExtItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ExtItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.para_.MergeFrom(from._impl_.para_);
  if (!from._internal_instanceid().empty()) {
    _this->_internal_set_instanceid(from._internal_instanceid());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_weight() != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  if (from._internal_sourceidx() != 0) {
    _this->_internal_set_sourceidx(from._internal_sourceidx());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtItem::CopyFrom(const ExtItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ExtItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtItem::IsInitialized() const {
  return true;
}

void ExtItem::InternalSwap(ExtItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.para_.InternalSwap(&other->_impl_.para_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instanceid_, lhs_arena,
      &other->_impl_.instanceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtItem, _impl_.sourceidx_)
      + sizeof(ExtItem::_impl_.sourceidx_)
      - PROTOBUF_FIELD_OFFSET(ExtItem, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[268]);
}

// ===================================================================

class CSDTTasks::_Internal {
 public:
};

CSDTTasks::CSDTTasks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTTasks)
}
CSDTTasks::CSDTTasks(const CSDTTasks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTTasks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trophy_){from._impl_.trophy_}
    , decltype(_impl_.achieve_){from._impl_.achieve_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.CSDTTasks)
}

inline void CSDTTasks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trophy_){arena}
    , decltype(_impl_.achieve_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTTasks::~CSDTTasks() {
  // @@protoc_insertion_point(destructor:msg.CSDTTasks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTTasks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trophy_.~RepeatedPtrField();
  _impl_.achieve_.~RepeatedPtrField();
}

void CSDTTasks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTTasks::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTTasks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trophy_.Clear();
  _impl_.achieve_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTTasks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.CSDTTaskItem Trophy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trophy(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.CSDTTaskItem Achieve = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_achieve(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTTasks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTTasks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.CSDTTaskItem Trophy = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trophy_size()); i < n; i++) {
    const auto& repfield = this->_internal_trophy(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .msg.CSDTTaskItem Achieve = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_achieve_size()); i < n; i++) {
    const auto& repfield = this->_internal_achieve(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTTasks)
  return target;
}

size_t CSDTTasks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTTasks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CSDTTaskItem Trophy = 1;
  total_size += 1UL * this->_internal_trophy_size();
  for (const auto& msg : this->_impl_.trophy_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .msg.CSDTTaskItem Achieve = 2;
  total_size += 1UL * this->_internal_achieve_size();
  for (const auto& msg : this->_impl_.achieve_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTTasks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTTasks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTTasks::GetClassData() const { return &_class_data_; }


void CSDTTasks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTTasks*>(&to_msg);
  auto& from = static_cast<const CSDTTasks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTTasks)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.trophy_.MergeFrom(from._impl_.trophy_);
  _this->_impl_.achieve_.MergeFrom(from._impl_.achieve_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTTasks::CopyFrom(const CSDTTasks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTTasks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTTasks::IsInitialized() const {
  return true;
}

void CSDTTasks::InternalSwap(CSDTTasks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.trophy_.InternalSwap(&other->_impl_.trophy_);
  _impl_.achieve_.InternalSwap(&other->_impl_.achieve_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTTasks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[269]);
}

// ===================================================================

class PvpTeachResult::_Internal {
 public:
};

PvpTeachResult::PvpTeachResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PvpTeachResult)
}
PvpTeachResult::PvpTeachResult(const PvpTeachResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PvpTeachResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.passid_){}
    , decltype(_impl_.win_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.passid_, &from._impl_.passid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.win_) -
    reinterpret_cast<char*>(&_impl_.passid_)) + sizeof(_impl_.win_));
  // @@protoc_insertion_point(copy_constructor:msg.PvpTeachResult)
}

inline void PvpTeachResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.passid_){0u}
    , decltype(_impl_.win_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PvpTeachResult::~PvpTeachResult() {
  // @@protoc_insertion_point(destructor:msg.PvpTeachResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PvpTeachResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PvpTeachResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PvpTeachResult::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PvpTeachResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.passid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.win_) -
      reinterpret_cast<char*>(&_impl_.passid_)) + sizeof(_impl_.win_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PvpTeachResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 PassId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.passid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Win = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PvpTeachResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PvpTeachResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 PassId = 1;
  if (this->_internal_passid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_passid(), target);
  }

  // bool Win = 2;
  if (this->_internal_win() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_win(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PvpTeachResult)
  return target;
}

size_t PvpTeachResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PvpTeachResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 PassId = 1;
  if (this->_internal_passid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_passid());
  }

  // bool Win = 2;
  if (this->_internal_win() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PvpTeachResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PvpTeachResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PvpTeachResult::GetClassData() const { return &_class_data_; }


void PvpTeachResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PvpTeachResult*>(&to_msg);
  auto& from = static_cast<const PvpTeachResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PvpTeachResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_passid() != 0) {
    _this->_internal_set_passid(from._internal_passid());
  }
  if (from._internal_win() != 0) {
    _this->_internal_set_win(from._internal_win());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PvpTeachResult::CopyFrom(const PvpTeachResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PvpTeachResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpTeachResult::IsInitialized() const {
  return true;
}

void PvpTeachResult::InternalSwap(PvpTeachResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PvpTeachResult, _impl_.win_)
      + sizeof(PvpTeachResult::_impl_.win_)
      - PROTOBUF_FIELD_OFFSET(PvpTeachResult, _impl_.passid_)>(
          reinterpret_cast<char*>(&_impl_.passid_),
          reinterpret_cast<char*>(&other->_impl_.passid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PvpTeachResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[270]);
}

// ===================================================================

class PvpBigWinnerData::_Internal {
 public:
};

PvpBigWinnerData::PvpBigWinnerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PvpBigWinnerData)
}
PvpBigWinnerData::PvpBigWinnerData(const PvpBigWinnerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PvpBigWinnerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rankrewardlist_){from._impl_.rankrewardlist_}
    , /*decltype(_impl_._rankrewardlist_cached_byte_size_)*/{0}
    , decltype(_impl_.configname_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.mapid_){}
    , decltype(_impl_.syspercent_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.configname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.configname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_configname().empty()) {
    _this->_impl_.configname_.Set(from._internal_configname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.syspercent_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.syspercent_));
  // @@protoc_insertion_point(copy_constructor:msg.PvpBigWinnerData)
}

inline void PvpBigWinnerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rankrewardlist_){arena}
    , /*decltype(_impl_._rankrewardlist_cached_byte_size_)*/{0}
    , decltype(_impl_.configname_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.mapid_){0u}
    , decltype(_impl_.syspercent_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.configname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.configname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PvpBigWinnerData::~PvpBigWinnerData() {
  // @@protoc_insertion_point(destructor:msg.PvpBigWinnerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PvpBigWinnerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rankrewardlist_.~RepeatedField();
  _impl_.configname_.Destroy();
}

void PvpBigWinnerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PvpBigWinnerData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PvpBigWinnerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rankrewardlist_.Clear();
  _impl_.configname_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.syspercent_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.syspercent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PvpBigWinnerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 MapId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mapid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SysPercent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.syspercent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 RankRewardList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_rankrewardlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_rankrewardlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ConfigName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_configname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PvpBigWinnerData.ConfigName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PvpBigWinnerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PvpBigWinnerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 MapId = 2;
  if (this->_internal_mapid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mapid(), target);
  }

  // uint32 SysPercent = 3;
  if (this->_internal_syspercent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_syspercent(), target);
  }

  // repeated uint32 RankRewardList = 4;
  {
    int byte_size = _impl_._rankrewardlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_rankrewardlist(), byte_size, target);
    }
  }

  // string ConfigName = 5;
  if (!this->_internal_configname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_configname().data(), static_cast<int>(this->_internal_configname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PvpBigWinnerData.ConfigName");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_configname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PvpBigWinnerData)
  return target;
}

size_t PvpBigWinnerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PvpBigWinnerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 RankRewardList = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.rankrewardlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._rankrewardlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string ConfigName = 5;
  if (!this->_internal_configname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_configname());
  }

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 MapId = 2;
  if (this->_internal_mapid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mapid());
  }

  // uint32 SysPercent = 3;
  if (this->_internal_syspercent() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_syspercent());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PvpBigWinnerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PvpBigWinnerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PvpBigWinnerData::GetClassData() const { return &_class_data_; }


void PvpBigWinnerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PvpBigWinnerData*>(&to_msg);
  auto& from = static_cast<const PvpBigWinnerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PvpBigWinnerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rankrewardlist_.MergeFrom(from._impl_.rankrewardlist_);
  if (!from._internal_configname().empty()) {
    _this->_internal_set_configname(from._internal_configname());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_mapid() != 0) {
    _this->_internal_set_mapid(from._internal_mapid());
  }
  if (from._internal_syspercent() != 0) {
    _this->_internal_set_syspercent(from._internal_syspercent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PvpBigWinnerData::CopyFrom(const PvpBigWinnerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PvpBigWinnerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvpBigWinnerData::IsInitialized() const {
  return true;
}

void PvpBigWinnerData::InternalSwap(PvpBigWinnerData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rankrewardlist_.InternalSwap(&other->_impl_.rankrewardlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.configname_, lhs_arena,
      &other->_impl_.configname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PvpBigWinnerData, _impl_.syspercent_)
      + sizeof(PvpBigWinnerData::_impl_.syspercent_)
      - PROTOBUF_FIELD_OFFSET(PvpBigWinnerData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PvpBigWinnerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[271]);
}

// ===================================================================

PveExData_TalentEntry_DoNotUse::PveExData_TalentEntry_DoNotUse() {}
PveExData_TalentEntry_DoNotUse::PveExData_TalentEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PveExData_TalentEntry_DoNotUse::MergeFrom(const PveExData_TalentEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PveExData_TalentEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[272]);
}

// ===================================================================

class PveExData::_Internal {
 public:
};

PveExData::PveExData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PveExData::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.PveExData)
}
PveExData::PveExData(const PveExData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PveExData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.talent_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.talent_.MergeFrom(from._impl_.talent_);
  // @@protoc_insertion_point(copy_constructor:msg.PveExData)
}

inline void PveExData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.talent_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PveExData::~PveExData() {
  // @@protoc_insertion_point(destructor:msg.PveExData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PveExData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.talent_.Destruct();
  _impl_.talent_.~MapField();
}

void PveExData::ArenaDtor(void* object) {
  PveExData* _this = reinterpret_cast< PveExData* >(object);
  _this->_impl_.talent_.Destruct();
}
void PveExData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PveExData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PveExData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.talent_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PveExData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, int32> Talent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.talent_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PveExData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PveExData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int32> Talent = 1;
  if (!this->_internal_talent().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = PveExData_TalentEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_talent();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.PveExData.TalentEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PveExData)
  return target;
}

size_t PveExData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PveExData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> Talent = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_talent_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_talent().begin();
      it != this->_internal_talent().end(); ++it) {
    total_size += PveExData_TalentEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PveExData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PveExData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PveExData::GetClassData() const { return &_class_data_; }


void PveExData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PveExData*>(&to_msg);
  auto& from = static_cast<const PveExData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PveExData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.talent_.MergeFrom(from._impl_.talent_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PveExData::CopyFrom(const PveExData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PveExData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PveExData::IsInitialized() const {
  return true;
}

void PveExData::InternalSwap(PveExData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.talent_.InternalSwap(&other->_impl_.talent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PveExData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[273]);
}

// ===================================================================

class ChampionInfo::_Internal {
 public:
};

ChampionInfo::ChampionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ChampionInfo)
}
ChampionInfo::ChampionInfo(const ChampionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChampionInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.zone_){}
    , decltype(_impl_.period_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.zone_, &from._impl_.zone_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.period_) -
    reinterpret_cast<char*>(&_impl_.zone_)) + sizeof(_impl_.period_));
  // @@protoc_insertion_point(copy_constructor:msg.ChampionInfo)
}

inline void ChampionInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.zone_){0u}
    , decltype(_impl_.period_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChampionInfo::~ChampionInfo() {
  // @@protoc_insertion_point(destructor:msg.ChampionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChampionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void ChampionInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChampionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ChampionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  ::memset(&_impl_.zone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.period_) -
      reinterpret_cast<char*>(&_impl_.zone_)) + sizeof(_impl_.period_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChampionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Zone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.zone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Period = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.ChampionInfo.Id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChampionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ChampionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Zone = 1;
  if (this->_internal_zone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_zone(), target);
  }

  // uint32 Period = 2;
  if (this->_internal_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_period(), target);
  }

  // string Id = 3;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.ChampionInfo.Id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ChampionInfo)
  return target;
}

size_t ChampionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ChampionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Id = 3;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint32 Zone = 1;
  if (this->_internal_zone() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_zone());
  }

  // uint32 Period = 2;
  if (this->_internal_period() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChampionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChampionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChampionInfo::GetClassData() const { return &_class_data_; }


void ChampionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChampionInfo*>(&to_msg);
  auto& from = static_cast<const ChampionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ChampionInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_zone() != 0) {
    _this->_internal_set_zone(from._internal_zone());
  }
  if (from._internal_period() != 0) {
    _this->_internal_set_period(from._internal_period());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChampionInfo::CopyFrom(const ChampionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ChampionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChampionInfo::IsInitialized() const {
  return true;
}

void ChampionInfo::InternalSwap(ChampionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChampionInfo, _impl_.period_)
      + sizeof(ChampionInfo::_impl_.period_)
      - PROTOBUF_FIELD_OFFSET(ChampionInfo, _impl_.zone_)>(
          reinterpret_cast<char*>(&_impl_.zone_),
          reinterpret_cast<char*>(&other->_impl_.zone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChampionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[274]);
}

// ===================================================================

class TopRank::_Internal {
 public:
};

TopRank::TopRank(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TopRank)
}
TopRank::TopRank(const TopRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TopRank* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rank_){from._impl_.rank_}
    , decltype(_impl_.zone_){}
    , decltype(_impl_.period_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.zone_, &from._impl_.zone_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.period_) -
    reinterpret_cast<char*>(&_impl_.zone_)) + sizeof(_impl_.period_));
  // @@protoc_insertion_point(copy_constructor:msg.TopRank)
}

inline void TopRank::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rank_){arena}
    , decltype(_impl_.zone_){0u}
    , decltype(_impl_.period_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TopRank::~TopRank() {
  // @@protoc_insertion_point(destructor:msg.TopRank)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TopRank::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rank_.~RepeatedPtrField();
}

void TopRank::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TopRank::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TopRank)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rank_.Clear();
  ::memset(&_impl_.zone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.period_) -
      reinterpret_cast<char*>(&_impl_.zone_)) + sizeof(_impl_.period_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopRank::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Zone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.zone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Period = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string Rank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rank();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.TopRank.Rank"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TopRank::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TopRank)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Zone = 1;
  if (this->_internal_zone() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_zone(), target);
  }

  // uint32 Period = 2;
  if (this->_internal_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_period(), target);
  }

  // repeated string Rank = 3;
  for (int i = 0, n = this->_internal_rank_size(); i < n; i++) {
    const auto& s = this->_internal_rank(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.TopRank.Rank");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TopRank)
  return target;
}

size_t TopRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TopRank)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string Rank = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.rank_.size());
  for (int i = 0, n = _impl_.rank_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.rank_.Get(i));
  }

  // uint32 Zone = 1;
  if (this->_internal_zone() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_zone());
  }

  // uint32 Period = 2;
  if (this->_internal_period() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TopRank::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TopRank::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TopRank::GetClassData() const { return &_class_data_; }


void TopRank::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TopRank*>(&to_msg);
  auto& from = static_cast<const TopRank&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TopRank)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rank_.MergeFrom(from._impl_.rank_);
  if (from._internal_zone() != 0) {
    _this->_internal_set_zone(from._internal_zone());
  }
  if (from._internal_period() != 0) {
    _this->_internal_set_period(from._internal_period());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TopRank::CopyFrom(const TopRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TopRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopRank::IsInitialized() const {
  return true;
}

void TopRank::InternalSwap(TopRank* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rank_.InternalSwap(&other->_impl_.rank_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TopRank, _impl_.period_)
      + sizeof(TopRank::_impl_.period_)
      - PROTOBUF_FIELD_OFFSET(TopRank, _impl_.zone_)>(
          reinterpret_cast<char*>(&_impl_.zone_),
          reinterpret_cast<char*>(&other->_impl_.zone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TopRank::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[275]);
}

// ===================================================================

class ChampionInfoList::_Internal {
 public:
};

ChampionInfoList::ChampionInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ChampionInfoList)
}
ChampionInfoList::ChampionInfoList(const ChampionInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChampionInfoList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.ChampionInfoList)
}

inline void ChampionInfoList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChampionInfoList::~ChampionInfoList() {
  // @@protoc_insertion_point(destructor:msg.ChampionInfoList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChampionInfoList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
}

void ChampionInfoList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChampionInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ChampionInfoList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChampionInfoList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.ChampionInfo list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChampionInfoList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ChampionInfoList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.ChampionInfo list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ChampionInfoList)
  return target;
}

size_t ChampionInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ChampionInfoList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.ChampionInfo list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_impl_.list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChampionInfoList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChampionInfoList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChampionInfoList::GetClassData() const { return &_class_data_; }


void ChampionInfoList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChampionInfoList*>(&to_msg);
  auto& from = static_cast<const ChampionInfoList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ChampionInfoList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChampionInfoList::CopyFrom(const ChampionInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ChampionInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChampionInfoList::IsInitialized() const {
  return true;
}

void ChampionInfoList::InternalSwap(ChampionInfoList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChampionInfoList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[276]);
}

// ===================================================================

TournamentHistory_ChampionHistoryEntry_DoNotUse::TournamentHistory_ChampionHistoryEntry_DoNotUse() {}
TournamentHistory_ChampionHistoryEntry_DoNotUse::TournamentHistory_ChampionHistoryEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TournamentHistory_ChampionHistoryEntry_DoNotUse::MergeFrom(const TournamentHistory_ChampionHistoryEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TournamentHistory_ChampionHistoryEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[277]);
}

// ===================================================================

TournamentHistory_TopRankHistoryEntry_DoNotUse::TournamentHistory_TopRankHistoryEntry_DoNotUse() {}
TournamentHistory_TopRankHistoryEntry_DoNotUse::TournamentHistory_TopRankHistoryEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TournamentHistory_TopRankHistoryEntry_DoNotUse::MergeFrom(const TournamentHistory_TopRankHistoryEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TournamentHistory_TopRankHistoryEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[278]);
}

// ===================================================================

class TournamentHistory::_Internal {
 public:
};

TournamentHistory::TournamentHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TournamentHistory::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.TournamentHistory)
}
TournamentHistory::TournamentHistory(const TournamentHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TournamentHistory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.championhistory_)*/{}
    , /*decltype(_impl_.toprankhistory_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.championhistory_.MergeFrom(from._impl_.championhistory_);
  _this->_impl_.toprankhistory_.MergeFrom(from._impl_.toprankhistory_);
  // @@protoc_insertion_point(copy_constructor:msg.TournamentHistory)
}

inline void TournamentHistory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.championhistory_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.toprankhistory_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TournamentHistory::~TournamentHistory() {
  // @@protoc_insertion_point(destructor:msg.TournamentHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TournamentHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.championhistory_.Destruct();
  _impl_.championhistory_.~MapField();
  _impl_.toprankhistory_.Destruct();
  _impl_.toprankhistory_.~MapField();
}

void TournamentHistory::ArenaDtor(void* object) {
  TournamentHistory* _this = reinterpret_cast< TournamentHistory* >(object);
  _this->_impl_.championhistory_.Destruct();
  _this->_impl_.toprankhistory_.Destruct();
}
void TournamentHistory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TournamentHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TournamentHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.championhistory_.Clear();
  _impl_.toprankhistory_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TournamentHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, .msg.ChampionInfoList> ChampionHistory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.championhistory_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .msg.TopRank> TopRankHistory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.toprankhistory_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TournamentHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TournamentHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .msg.ChampionInfoList> ChampionHistory = 1;
  if (!this->_internal_championhistory().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::ChampionInfoList>;
    using WireHelper = TournamentHistory_ChampionHistoryEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_championhistory();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .msg.TopRank> TopRankHistory = 2;
  if (!this->_internal_toprankhistory().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::TopRank>;
    using WireHelper = TournamentHistory_TopRankHistoryEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_toprankhistory();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TournamentHistory)
  return target;
}

size_t TournamentHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TournamentHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .msg.ChampionInfoList> ChampionHistory = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_championhistory_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::ChampionInfoList >::const_iterator
      it = this->_internal_championhistory().begin();
      it != this->_internal_championhistory().end(); ++it) {
    total_size += TournamentHistory_ChampionHistoryEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .msg.TopRank> TopRankHistory = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_toprankhistory_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::TopRank >::const_iterator
      it = this->_internal_toprankhistory().begin();
      it != this->_internal_toprankhistory().end(); ++it) {
    total_size += TournamentHistory_TopRankHistoryEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TournamentHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TournamentHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TournamentHistory::GetClassData() const { return &_class_data_; }


void TournamentHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TournamentHistory*>(&to_msg);
  auto& from = static_cast<const TournamentHistory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TournamentHistory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.championhistory_.MergeFrom(from._impl_.championhistory_);
  _this->_impl_.toprankhistory_.MergeFrom(from._impl_.toprankhistory_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TournamentHistory::CopyFrom(const TournamentHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TournamentHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TournamentHistory::IsInitialized() const {
  return true;
}

void TournamentHistory::InternalSwap(TournamentHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.championhistory_.InternalSwap(&other->_impl_.championhistory_);
  _impl_.toprankhistory_.InternalSwap(&other->_impl_.toprankhistory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TournamentHistory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[279]);
}

// ===================================================================

CSReqLogin_AuthSDKCodeEntry_DoNotUse::CSReqLogin_AuthSDKCodeEntry_DoNotUse() {}
CSReqLogin_AuthSDKCodeEntry_DoNotUse::CSReqLogin_AuthSDKCodeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSReqLogin_AuthSDKCodeEntry_DoNotUse::MergeFrom(const CSReqLogin_AuthSDKCodeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSReqLogin_AuthSDKCodeEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[280]);
}

// ===================================================================

class CSReqLogin::_Internal {
 public:
};

CSReqLogin::CSReqLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSReqLogin::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSReqLogin)
}
CSReqLogin::CSReqLogin(const CSReqLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSReqLogin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.authsdkcode_)*/{}
    , decltype(_impl_.psblockedusers_){from._impl_.psblockedusers_}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.osversion_){}
    , decltype(_impl_.devicetype_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.lysdkdeviceid_){}
    , decltype(_impl_.channelid_){}
    , decltype(_impl_.packageid_){}
    , decltype(_impl_.apkversion_){}
    , decltype(_impl_.resolution_){}
    , decltype(_impl_.sessionid_){}
    , decltype(_impl_.channeluserid_){}
    , decltype(_impl_.pvpresourceversion_){}
    , decltype(_impl_.activecode_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.picurl_){}
    , decltype(_impl_.fengkongdeviceid_){}
    , decltype(_impl_.gamelanguage_){}
    , decltype(_impl_.advertisingid_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.platformtype_){}
    , decltype(_impl_.nettype_){}
    , decltype(_impl_.logintype_){}
    , decltype(_impl_.channeltype_){}
    , decltype(_impl_.paychannel_){}
    , decltype(_impl_.launchtype_){}
    , decltype(_impl_.gamelibversion_){}
    , decltype(_impl_.loginsource_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.authsdkcode_.MergeFrom(from._impl_.authsdkcode_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deviceid().empty()) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.osversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.osversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_osversion().empty()) {
    _this->_impl_.osversion_.Set(from._internal_osversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.devicetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_devicetype().empty()) {
    _this->_impl_.devicetype_.Set(from._internal_devicetype(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lysdkdeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lysdkdeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lysdkdeviceid().empty()) {
    _this->_impl_.lysdkdeviceid_.Set(from._internal_lysdkdeviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.channelid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channelid().empty()) {
    _this->_impl_.channelid_.Set(from._internal_channelid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.packageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_packageid().empty()) {
    _this->_impl_.packageid_.Set(from._internal_packageid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.apkversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apkversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_apkversion().empty()) {
    _this->_impl_.apkversion_.Set(from._internal_apkversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.resolution_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resolution_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resolution().empty()) {
    _this->_impl_.resolution_.Set(from._internal_resolution(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sessionid().empty()) {
    _this->_impl_.sessionid_.Set(from._internal_sessionid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.channeluserid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channeluserid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channeluserid().empty()) {
    _this->_impl_.channeluserid_.Set(from._internal_channeluserid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pvpresourceversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pvpresourceversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pvpresourceversion().empty()) {
    _this->_impl_.pvpresourceversion_.Set(from._internal_pvpresourceversion(), 
      _this->GetArenaForAllocation());
  }
  _impl_.activecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_activecode().empty()) {
    _this->_impl_.activecode_.Set(from._internal_activecode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.picurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.picurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_picurl().empty()) {
    _this->_impl_.picurl_.Set(from._internal_picurl(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fengkongdeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fengkongdeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fengkongdeviceid().empty()) {
    _this->_impl_.fengkongdeviceid_.Set(from._internal_fengkongdeviceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.gamelanguage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamelanguage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gamelanguage().empty()) {
    _this->_impl_.gamelanguage_.Set(from._internal_gamelanguage(), 
      _this->GetArenaForAllocation());
  }
  _impl_.advertisingid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.advertisingid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_advertisingid().empty()) {
    _this->_impl_.advertisingid_.Set(from._internal_advertisingid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    _this->_impl_.result_.Set(from._internal_result(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.platformtype_, &from._impl_.platformtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.loginsource_) -
    reinterpret_cast<char*>(&_impl_.platformtype_)) + sizeof(_impl_.loginsource_));
  // @@protoc_insertion_point(copy_constructor:msg.CSReqLogin)
}

inline void CSReqLogin::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.authsdkcode_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.psblockedusers_){arena}
    , decltype(_impl_.deviceid_){}
    , decltype(_impl_.osversion_){}
    , decltype(_impl_.devicetype_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.lysdkdeviceid_){}
    , decltype(_impl_.channelid_){}
    , decltype(_impl_.packageid_){}
    , decltype(_impl_.apkversion_){}
    , decltype(_impl_.resolution_){}
    , decltype(_impl_.sessionid_){}
    , decltype(_impl_.channeluserid_){}
    , decltype(_impl_.pvpresourceversion_){}
    , decltype(_impl_.activecode_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.picurl_){}
    , decltype(_impl_.fengkongdeviceid_){}
    , decltype(_impl_.gamelanguage_){}
    , decltype(_impl_.advertisingid_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.platformtype_){0}
    , decltype(_impl_.nettype_){0}
    , decltype(_impl_.logintype_){0}
    , decltype(_impl_.channeltype_){0}
    , decltype(_impl_.paychannel_){0}
    , decltype(_impl_.launchtype_){0}
    , decltype(_impl_.gamelibversion_){int64_t{0}}
    , decltype(_impl_.loginsource_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.osversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.osversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicetype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.devicetype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lysdkdeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lysdkdeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channelid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.packageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.apkversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.apkversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resolution_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resolution_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sessionid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sessionid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channeluserid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channeluserid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pvpresourceversion_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pvpresourceversion_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.activecode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.activecode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.picurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.picurl_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fengkongdeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fengkongdeviceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gamelanguage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gamelanguage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.advertisingid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.advertisingid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSReqLogin::~CSReqLogin() {
  // @@protoc_insertion_point(destructor:msg.CSReqLogin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSReqLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.authsdkcode_.Destruct();
  _impl_.authsdkcode_.~MapField();
  _impl_.psblockedusers_.~RepeatedPtrField();
  _impl_.deviceid_.Destroy();
  _impl_.osversion_.Destroy();
  _impl_.devicetype_.Destroy();
  _impl_.id_.Destroy();
  _impl_.lysdkdeviceid_.Destroy();
  _impl_.channelid_.Destroy();
  _impl_.packageid_.Destroy();
  _impl_.apkversion_.Destroy();
  _impl_.resolution_.Destroy();
  _impl_.sessionid_.Destroy();
  _impl_.channeluserid_.Destroy();
  _impl_.pvpresourceversion_.Destroy();
  _impl_.activecode_.Destroy();
  _impl_.language_.Destroy();
  _impl_.country_.Destroy();
  _impl_.ip_.Destroy();
  _impl_.picurl_.Destroy();
  _impl_.fengkongdeviceid_.Destroy();
  _impl_.gamelanguage_.Destroy();
  _impl_.advertisingid_.Destroy();
  _impl_.result_.Destroy();
}

void CSReqLogin::ArenaDtor(void* object) {
  CSReqLogin* _this = reinterpret_cast< CSReqLogin* >(object);
  _this->_impl_.authsdkcode_.Destruct();
}
void CSReqLogin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSReqLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSReqLogin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.authsdkcode_.Clear();
  _impl_.psblockedusers_.Clear();
  _impl_.deviceid_.ClearToEmpty();
  _impl_.osversion_.ClearToEmpty();
  _impl_.devicetype_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  _impl_.lysdkdeviceid_.ClearToEmpty();
  _impl_.channelid_.ClearToEmpty();
  _impl_.packageid_.ClearToEmpty();
  _impl_.apkversion_.ClearToEmpty();
  _impl_.resolution_.ClearToEmpty();
  _impl_.sessionid_.ClearToEmpty();
  _impl_.channeluserid_.ClearToEmpty();
  _impl_.pvpresourceversion_.ClearToEmpty();
  _impl_.activecode_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  _impl_.country_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _impl_.picurl_.ClearToEmpty();
  _impl_.fengkongdeviceid_.ClearToEmpty();
  _impl_.gamelanguage_.ClearToEmpty();
  _impl_.advertisingid_.ClearToEmpty();
  _impl_.result_.ClearToEmpty();
  ::memset(&_impl_.platformtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.loginsource_) -
      reinterpret_cast<char*>(&_impl_.platformtype_)) + sizeof(_impl_.loginsource_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSReqLogin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string DeviceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.DeviceId"));
        } else
          goto handle_unusual;
        continue;
      // .msg.PLATFORMTYPE PlatformType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platformtype(static_cast<::msg::PLATFORMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string OsVersion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_osversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.OsVersion"));
        } else
          goto handle_unusual;
        continue;
      // string DeviceType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_devicetype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.DeviceType"));
        } else
          goto handle_unusual;
        continue;
      // .msg.NETTYPE NetType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_nettype(static_cast<::msg::NETTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.LOGINTYPE LoginType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_logintype(static_cast<::msg::LOGINTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string Id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.Id"));
        } else
          goto handle_unusual;
        continue;
      // string LySdkDeviceId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_lysdkdeviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.LySdkDeviceId"));
        } else
          goto handle_unusual;
        continue;
      // string ChannelId = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_channelid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.ChannelId"));
        } else
          goto handle_unusual;
        continue;
      // string PackageId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_packageid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.PackageId"));
        } else
          goto handle_unusual;
        continue;
      // string ApkVersion = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_apkversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.ApkVersion"));
        } else
          goto handle_unusual;
        continue;
      // string Resolution = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_resolution();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.Resolution"));
        } else
          goto handle_unusual;
        continue;
      // .msg.CHANELTYPE ChannelType = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channeltype(static_cast<::msg::CHANELTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> AuthSDKCode = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.authsdkcode_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string SessionId = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_sessionid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.SessionId"));
        } else
          goto handle_unusual;
        continue;
      // string ChannelUserId = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_channeluserid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.ChannelUserId"));
        } else
          goto handle_unusual;
        continue;
      // string PvpResourceVersion = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_pvpresourceversion();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.PvpResourceVersion"));
        } else
          goto handle_unusual;
        continue;
      // .msg.CHANELTYPE PayChannel = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_paychannel(static_cast<::msg::CHANELTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string ActiveCode = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_activecode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.ActiveCode"));
        } else
          goto handle_unusual;
        continue;
      // string Language = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.Language"));
        } else
          goto handle_unusual;
        continue;
      // string Country = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.Country"));
        } else
          goto handle_unusual;
        continue;
      // .msg.LAUNCHTYPE LaunchType = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_launchtype(static_cast<::msg::LAUNCHTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string Ip = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.Ip"));
        } else
          goto handle_unusual;
        continue;
      // string PicUrl = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_picurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.PicUrl"));
        } else
          goto handle_unusual;
        continue;
      // string FengkongDeviceId = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_fengkongdeviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.FengkongDeviceId"));
        } else
          goto handle_unusual;
        continue;
      // string GameLanguage = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_gamelanguage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.GameLanguage"));
        } else
          goto handle_unusual;
        continue;
      // int64 GamelibVersion = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.gamelibversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string AdvertisingId = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_advertisingid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.AdvertisingId"));
        } else
          goto handle_unusual;
        continue;
      // repeated string PSBlockedUsers = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_psblockedusers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "msg.CSReqLogin.PSBlockedUsers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes Result = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.LOGINSOURCE LoginSource = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_loginsource(static_cast<::msg::LOGINSOURCE>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSReqLogin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSReqLogin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string DeviceId = 1;
  if (!this->_internal_deviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceid().data(), static_cast<int>(this->_internal_deviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.DeviceId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceid(), target);
  }

  // .msg.PLATFORMTYPE PlatformType = 2;
  if (this->_internal_platformtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_platformtype(), target);
  }

  // string OsVersion = 3;
  if (!this->_internal_osversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_osversion().data(), static_cast<int>(this->_internal_osversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.OsVersion");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_osversion(), target);
  }

  // string DeviceType = 4;
  if (!this->_internal_devicetype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devicetype().data(), static_cast<int>(this->_internal_devicetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.DeviceType");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_devicetype(), target);
  }

  // .msg.NETTYPE NetType = 5;
  if (this->_internal_nettype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_nettype(), target);
  }

  // .msg.LOGINTYPE LoginType = 6;
  if (this->_internal_logintype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_logintype(), target);
  }

  // string Id = 7;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.Id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_id(), target);
  }

  // string LySdkDeviceId = 8;
  if (!this->_internal_lysdkdeviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lysdkdeviceid().data(), static_cast<int>(this->_internal_lysdkdeviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.LySdkDeviceId");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_lysdkdeviceid(), target);
  }

  // string ChannelId = 9;
  if (!this->_internal_channelid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.ChannelId");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_channelid(), target);
  }

  // string PackageId = 10;
  if (!this->_internal_packageid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_packageid().data(), static_cast<int>(this->_internal_packageid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.PackageId");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_packageid(), target);
  }

  // string ApkVersion = 11;
  if (!this->_internal_apkversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_apkversion().data(), static_cast<int>(this->_internal_apkversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.ApkVersion");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_apkversion(), target);
  }

  // string Resolution = 12;
  if (!this->_internal_resolution().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resolution().data(), static_cast<int>(this->_internal_resolution().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.Resolution");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_resolution(), target);
  }

  // .msg.CHANELTYPE ChannelType = 13;
  if (this->_internal_channeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_channeltype(), target);
  }

  // map<string, string> AuthSDKCode = 14;
  if (!this->_internal_authsdkcode().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = CSReqLogin_AuthSDKCodeEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_authsdkcode();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.CSReqLogin.AuthSDKCodeEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.CSReqLogin.AuthSDKCodeEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(14, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string SessionId = 15;
  if (!this->_internal_sessionid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sessionid().data(), static_cast<int>(this->_internal_sessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.SessionId");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_sessionid(), target);
  }

  // string ChannelUserId = 16;
  if (!this->_internal_channeluserid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channeluserid().data(), static_cast<int>(this->_internal_channeluserid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.ChannelUserId");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_channeluserid(), target);
  }

  // string PvpResourceVersion = 17;
  if (!this->_internal_pvpresourceversion().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pvpresourceversion().data(), static_cast<int>(this->_internal_pvpresourceversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.PvpResourceVersion");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_pvpresourceversion(), target);
  }

  // .msg.CHANELTYPE PayChannel = 18;
  if (this->_internal_paychannel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      18, this->_internal_paychannel(), target);
  }

  // string ActiveCode = 19;
  if (!this->_internal_activecode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_activecode().data(), static_cast<int>(this->_internal_activecode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.ActiveCode");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_activecode(), target);
  }

  // string Language = 20;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.Language");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_language(), target);
  }

  // string Country = 21;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.Country");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_country(), target);
  }

  // .msg.LAUNCHTYPE LaunchType = 22;
  if (this->_internal_launchtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      22, this->_internal_launchtype(), target);
  }

  // string Ip = 23;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.Ip");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_ip(), target);
  }

  // string PicUrl = 24;
  if (!this->_internal_picurl().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_picurl().data(), static_cast<int>(this->_internal_picurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.PicUrl");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_picurl(), target);
  }

  // string FengkongDeviceId = 25;
  if (!this->_internal_fengkongdeviceid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fengkongdeviceid().data(), static_cast<int>(this->_internal_fengkongdeviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.FengkongDeviceId");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_fengkongdeviceid(), target);
  }

  // string GameLanguage = 26;
  if (!this->_internal_gamelanguage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gamelanguage().data(), static_cast<int>(this->_internal_gamelanguage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.GameLanguage");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_gamelanguage(), target);
  }

  // int64 GamelibVersion = 27;
  if (this->_internal_gamelibversion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(27, this->_internal_gamelibversion(), target);
  }

  // string AdvertisingId = 28;
  if (!this->_internal_advertisingid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_advertisingid().data(), static_cast<int>(this->_internal_advertisingid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.AdvertisingId");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_advertisingid(), target);
  }

  // repeated string PSBlockedUsers = 29;
  for (int i = 0, n = this->_internal_psblockedusers_size(); i < n; i++) {
    const auto& s = this->_internal_psblockedusers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSReqLogin.PSBlockedUsers");
    target = stream->WriteString(29, s, target);
  }

  // bytes Result = 30;
  if (!this->_internal_result().empty()) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_result(), target);
  }

  // .msg.LOGINSOURCE LoginSource = 31;
  if (this->_internal_loginsource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      31, this->_internal_loginsource(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSReqLogin)
  return target;
}

size_t CSReqLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSReqLogin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> AuthSDKCode = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_authsdkcode_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_authsdkcode().begin();
      it != this->_internal_authsdkcode().end(); ++it) {
    total_size += CSReqLogin_AuthSDKCodeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string PSBlockedUsers = 29;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.psblockedusers_.size());
  for (int i = 0, n = _impl_.psblockedusers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.psblockedusers_.Get(i));
  }

  // string DeviceId = 1;
  if (!this->_internal_deviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceid());
  }

  // string OsVersion = 3;
  if (!this->_internal_osversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_osversion());
  }

  // string DeviceType = 4;
  if (!this->_internal_devicetype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devicetype());
  }

  // string Id = 7;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string LySdkDeviceId = 8;
  if (!this->_internal_lysdkdeviceid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lysdkdeviceid());
  }

  // string ChannelId = 9;
  if (!this->_internal_channelid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  // string PackageId = 10;
  if (!this->_internal_packageid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_packageid());
  }

  // string ApkVersion = 11;
  if (!this->_internal_apkversion().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_apkversion());
  }

  // string Resolution = 12;
  if (!this->_internal_resolution().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resolution());
  }

  // string SessionId = 15;
  if (!this->_internal_sessionid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sessionid());
  }

  // string ChannelUserId = 16;
  if (!this->_internal_channeluserid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channeluserid());
  }

  // string PvpResourceVersion = 17;
  if (!this->_internal_pvpresourceversion().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pvpresourceversion());
  }

  // string ActiveCode = 19;
  if (!this->_internal_activecode().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_activecode());
  }

  // string Language = 20;
  if (!this->_internal_language().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // string Country = 21;
  if (!this->_internal_country().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string Ip = 23;
  if (!this->_internal_ip().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string PicUrl = 24;
  if (!this->_internal_picurl().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_picurl());
  }

  // string FengkongDeviceId = 25;
  if (!this->_internal_fengkongdeviceid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fengkongdeviceid());
  }

  // string GameLanguage = 26;
  if (!this->_internal_gamelanguage().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gamelanguage());
  }

  // string AdvertisingId = 28;
  if (!this->_internal_advertisingid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_advertisingid());
  }

  // bytes Result = 30;
  if (!this->_internal_result().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  // .msg.PLATFORMTYPE PlatformType = 2;
  if (this->_internal_platformtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_platformtype());
  }

  // .msg.NETTYPE NetType = 5;
  if (this->_internal_nettype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_nettype());
  }

  // .msg.LOGINTYPE LoginType = 6;
  if (this->_internal_logintype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_logintype());
  }

  // .msg.CHANELTYPE ChannelType = 13;
  if (this->_internal_channeltype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_channeltype());
  }

  // .msg.CHANELTYPE PayChannel = 18;
  if (this->_internal_paychannel() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_paychannel());
  }

  // .msg.LAUNCHTYPE LaunchType = 22;
  if (this->_internal_launchtype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_launchtype());
  }

  // int64 GamelibVersion = 27;
  if (this->_internal_gamelibversion() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_gamelibversion());
  }

  // .msg.LOGINSOURCE LoginSource = 31;
  if (this->_internal_loginsource() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_loginsource());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSReqLogin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSReqLogin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSReqLogin::GetClassData() const { return &_class_data_; }


void CSReqLogin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSReqLogin*>(&to_msg);
  auto& from = static_cast<const CSReqLogin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSReqLogin)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.authsdkcode_.MergeFrom(from._impl_.authsdkcode_);
  _this->_impl_.psblockedusers_.MergeFrom(from._impl_.psblockedusers_);
  if (!from._internal_deviceid().empty()) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  if (!from._internal_osversion().empty()) {
    _this->_internal_set_osversion(from._internal_osversion());
  }
  if (!from._internal_devicetype().empty()) {
    _this->_internal_set_devicetype(from._internal_devicetype());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_lysdkdeviceid().empty()) {
    _this->_internal_set_lysdkdeviceid(from._internal_lysdkdeviceid());
  }
  if (!from._internal_channelid().empty()) {
    _this->_internal_set_channelid(from._internal_channelid());
  }
  if (!from._internal_packageid().empty()) {
    _this->_internal_set_packageid(from._internal_packageid());
  }
  if (!from._internal_apkversion().empty()) {
    _this->_internal_set_apkversion(from._internal_apkversion());
  }
  if (!from._internal_resolution().empty()) {
    _this->_internal_set_resolution(from._internal_resolution());
  }
  if (!from._internal_sessionid().empty()) {
    _this->_internal_set_sessionid(from._internal_sessionid());
  }
  if (!from._internal_channeluserid().empty()) {
    _this->_internal_set_channeluserid(from._internal_channeluserid());
  }
  if (!from._internal_pvpresourceversion().empty()) {
    _this->_internal_set_pvpresourceversion(from._internal_pvpresourceversion());
  }
  if (!from._internal_activecode().empty()) {
    _this->_internal_set_activecode(from._internal_activecode());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_picurl().empty()) {
    _this->_internal_set_picurl(from._internal_picurl());
  }
  if (!from._internal_fengkongdeviceid().empty()) {
    _this->_internal_set_fengkongdeviceid(from._internal_fengkongdeviceid());
  }
  if (!from._internal_gamelanguage().empty()) {
    _this->_internal_set_gamelanguage(from._internal_gamelanguage());
  }
  if (!from._internal_advertisingid().empty()) {
    _this->_internal_set_advertisingid(from._internal_advertisingid());
  }
  if (!from._internal_result().empty()) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_platformtype() != 0) {
    _this->_internal_set_platformtype(from._internal_platformtype());
  }
  if (from._internal_nettype() != 0) {
    _this->_internal_set_nettype(from._internal_nettype());
  }
  if (from._internal_logintype() != 0) {
    _this->_internal_set_logintype(from._internal_logintype());
  }
  if (from._internal_channeltype() != 0) {
    _this->_internal_set_channeltype(from._internal_channeltype());
  }
  if (from._internal_paychannel() != 0) {
    _this->_internal_set_paychannel(from._internal_paychannel());
  }
  if (from._internal_launchtype() != 0) {
    _this->_internal_set_launchtype(from._internal_launchtype());
  }
  if (from._internal_gamelibversion() != 0) {
    _this->_internal_set_gamelibversion(from._internal_gamelibversion());
  }
  if (from._internal_loginsource() != 0) {
    _this->_internal_set_loginsource(from._internal_loginsource());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSReqLogin::CopyFrom(const CSReqLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSReqLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReqLogin::IsInitialized() const {
  return true;
}

void CSReqLogin::InternalSwap(CSReqLogin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.authsdkcode_.InternalSwap(&other->_impl_.authsdkcode_);
  _impl_.psblockedusers_.InternalSwap(&other->_impl_.psblockedusers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deviceid_, lhs_arena,
      &other->_impl_.deviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.osversion_, lhs_arena,
      &other->_impl_.osversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.devicetype_, lhs_arena,
      &other->_impl_.devicetype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lysdkdeviceid_, lhs_arena,
      &other->_impl_.lysdkdeviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channelid_, lhs_arena,
      &other->_impl_.channelid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.packageid_, lhs_arena,
      &other->_impl_.packageid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.apkversion_, lhs_arena,
      &other->_impl_.apkversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resolution_, lhs_arena,
      &other->_impl_.resolution_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sessionid_, lhs_arena,
      &other->_impl_.sessionid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channeluserid_, lhs_arena,
      &other->_impl_.channeluserid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pvpresourceversion_, lhs_arena,
      &other->_impl_.pvpresourceversion_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.activecode_, lhs_arena,
      &other->_impl_.activecode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.picurl_, lhs_arena,
      &other->_impl_.picurl_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fengkongdeviceid_, lhs_arena,
      &other->_impl_.fengkongdeviceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gamelanguage_, lhs_arena,
      &other->_impl_.gamelanguage_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.advertisingid_, lhs_arena,
      &other->_impl_.advertisingid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_, lhs_arena,
      &other->_impl_.result_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSReqLogin, _impl_.loginsource_)
      + sizeof(CSReqLogin::_impl_.loginsource_)
      - PROTOBUF_FIELD_OFFSET(CSReqLogin, _impl_.platformtype_)>(
          reinterpret_cast<char*>(&_impl_.platformtype_),
          reinterpret_cast<char*>(&other->_impl_.platformtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSReqLogin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[281]);
}

// ===================================================================

class Loc::_Internal {
 public:
};

Loc::Loc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.Loc)
}
Loc::Loc(const Loc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Loc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:msg.Loc)
}

inline void Loc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0u}
    , decltype(_impl_.y_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Loc::~Loc() {
  // @@protoc_insertion_point(destructor:msg.Loc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Loc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Loc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Loc::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Loc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Loc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Loc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Loc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 X = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // uint32 Y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Loc)
  return target;
}

size_t Loc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Loc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 X = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_x());
  }

  // uint32 Y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Loc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Loc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Loc::GetClassData() const { return &_class_data_; }


void Loc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Loc*>(&to_msg);
  auto& from = static_cast<const Loc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Loc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Loc::CopyFrom(const Loc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Loc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Loc::IsInitialized() const {
  return true;
}

void Loc::InternalSwap(Loc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Loc, _impl_.y_)
      + sizeof(Loc::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Loc, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Loc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[282]);
}

// ===================================================================

class Authority::_Internal {
 public:
};

Authority::Authority(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.Authority)
}
Authority::Authority(const Authority& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Authority* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mark_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mark_, &from._impl_.mark_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.mark_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:msg.Authority)
}

inline void Authority::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mark_){false}
    , decltype(_impl_.level_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Authority::~Authority() {
  // @@protoc_insertion_point(destructor:msg.Authority)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Authority::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Authority::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Authority::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Authority)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.mark_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.mark_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Authority::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Mark = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Authority::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Authority)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Mark = 1;
  if (this->_internal_mark() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_mark(), target);
  }

  // uint32 Level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Authority)
  return target;
}

size_t Authority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Authority)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool Mark = 1;
  if (this->_internal_mark() != 0) {
    total_size += 1 + 1;
  }

  // uint32 Level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Authority::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Authority::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Authority::GetClassData() const { return &_class_data_; }


void Authority::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Authority*>(&to_msg);
  auto& from = static_cast<const Authority&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Authority)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mark() != 0) {
    _this->_internal_set_mark(from._internal_mark());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Authority::CopyFrom(const Authority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Authority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authority::IsInitialized() const {
  return true;
}

void Authority::InternalSwap(Authority* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Authority, _impl_.level_)
      + sizeof(Authority::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(Authority, _impl_.mark_)>(
          reinterpret_cast<char*>(&_impl_.mark_),
          reinterpret_cast<char*>(&other->_impl_.mark_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Authority::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[283]);
}

// ===================================================================

class GetNumRank::_Internal {
 public:
};

GetNumRank::GetNumRank(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.GetNumRank)
}
GetNumRank::GetNumRank(const GetNumRank& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetNumRank* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.country_){}
    , decltype(_impl_.targetplayer_){}
    , decltype(_impl_.tournamentid_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.selfrank_){}
    , decltype(_impl_.classid_){}
    , decltype(_impl_.roundid_){}
    , decltype(_impl_.groupindex_){}
    , decltype(_impl_.channeltype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.targetplayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetplayer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targetplayer().empty()) {
    _this->_impl_.targetplayer_.Set(from._internal_targetplayer(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tournamentid_, &from._impl_.tournamentid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channeltype_) -
    reinterpret_cast<char*>(&_impl_.tournamentid_)) + sizeof(_impl_.channeltype_));
  // @@protoc_insertion_point(copy_constructor:msg.GetNumRank)
}

inline void GetNumRank::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.country_){}
    , decltype(_impl_.targetplayer_){}
    , decltype(_impl_.tournamentid_){uint64_t{0u}}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.selfrank_){false}
    , decltype(_impl_.classid_){uint64_t{0u}}
    , decltype(_impl_.roundid_){uint64_t{0u}}
    , decltype(_impl_.groupindex_){0u}
    , decltype(_impl_.channeltype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.targetplayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetplayer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetNumRank::~GetNumRank() {
  // @@protoc_insertion_point(destructor:msg.GetNumRank)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetNumRank::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.country_.Destroy();
  _impl_.targetplayer_.Destroy();
}

void GetNumRank::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetNumRank::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GetNumRank)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.country_.ClearToEmpty();
  _impl_.targetplayer_.ClearToEmpty();
  ::memset(&_impl_.tournamentid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.channeltype_) -
      reinterpret_cast<char*>(&_impl_.tournamentid_)) + sizeof(_impl_.channeltype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNumRank::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.RANKTYPE Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::RANKTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string Country = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GetNumRank.Country"));
        } else
          goto handle_unusual;
        continue;
      // uint64 TournamentId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tournamentid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ClassId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.classid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 RoundId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.roundid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool SelfRank = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.selfrank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 GroupIndex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.groupindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CHANELTYPE ChannelType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channeltype(static_cast<::msg::CHANELTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string TargetPlayer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_targetplayer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GetNumRank.TargetPlayer"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetNumRank::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GetNumRank)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.RANKTYPE Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string Country = 2;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GetNumRank.Country");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_country(), target);
  }

  // uint64 TournamentId = 3;
  if (this->_internal_tournamentid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tournamentid(), target);
  }

  // uint64 ClassId = 4;
  if (this->_internal_classid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_classid(), target);
  }

  // uint64 RoundId = 5;
  if (this->_internal_roundid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_roundid(), target);
  }

  // bool SelfRank = 6;
  if (this->_internal_selfrank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_selfrank(), target);
  }

  // uint32 GroupIndex = 7;
  if (this->_internal_groupindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_groupindex(), target);
  }

  // .msg.CHANELTYPE ChannelType = 8;
  if (this->_internal_channeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_channeltype(), target);
  }

  // string TargetPlayer = 9;
  if (!this->_internal_targetplayer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetplayer().data(), static_cast<int>(this->_internal_targetplayer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GetNumRank.TargetPlayer");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_targetplayer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GetNumRank)
  return target;
}

size_t GetNumRank::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GetNumRank)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Country = 2;
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string TargetPlayer = 9;
  if (!this->_internal_targetplayer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetplayer());
  }

  // uint64 TournamentId = 3;
  if (this->_internal_tournamentid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_tournamentid());
  }

  // .msg.RANKTYPE Type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool SelfRank = 6;
  if (this->_internal_selfrank() != 0) {
    total_size += 1 + 1;
  }

  // uint64 ClassId = 4;
  if (this->_internal_classid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_classid());
  }

  // uint64 RoundId = 5;
  if (this->_internal_roundid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roundid());
  }

  // uint32 GroupIndex = 7;
  if (this->_internal_groupindex() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_groupindex());
  }

  // .msg.CHANELTYPE ChannelType = 8;
  if (this->_internal_channeltype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_channeltype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNumRank::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetNumRank::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNumRank::GetClassData() const { return &_class_data_; }


void GetNumRank::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetNumRank*>(&to_msg);
  auto& from = static_cast<const GetNumRank&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.GetNumRank)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (!from._internal_targetplayer().empty()) {
    _this->_internal_set_targetplayer(from._internal_targetplayer());
  }
  if (from._internal_tournamentid() != 0) {
    _this->_internal_set_tournamentid(from._internal_tournamentid());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_selfrank() != 0) {
    _this->_internal_set_selfrank(from._internal_selfrank());
  }
  if (from._internal_classid() != 0) {
    _this->_internal_set_classid(from._internal_classid());
  }
  if (from._internal_roundid() != 0) {
    _this->_internal_set_roundid(from._internal_roundid());
  }
  if (from._internal_groupindex() != 0) {
    _this->_internal_set_groupindex(from._internal_groupindex());
  }
  if (from._internal_channeltype() != 0) {
    _this->_internal_set_channeltype(from._internal_channeltype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetNumRank::CopyFrom(const GetNumRank& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GetNumRank)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNumRank::IsInitialized() const {
  return true;
}

void GetNumRank::InternalSwap(GetNumRank* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targetplayer_, lhs_arena,
      &other->_impl_.targetplayer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetNumRank, _impl_.channeltype_)
      + sizeof(GetNumRank::_impl_.channeltype_)
      - PROTOBUF_FIELD_OFFSET(GetNumRank, _impl_.tournamentid_)>(
          reinterpret_cast<char*>(&_impl_.tournamentid_),
          reinterpret_cast<char*>(&other->_impl_.tournamentid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNumRank::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[284]);
}

// ===================================================================

class CSDTPassportCard::_Internal {
 public:
};

CSDTPassportCard::CSDTPassportCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPassportCard)
}
CSDTPassportCard::CSDTPassportCard(const CSDTPassportCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPassportCard* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.typeidlist_){from._impl_.typeidlist_}
    , /*decltype(_impl_._typeidlist_cached_byte_size_)*/{0}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.level_ = from._impl_.level_;
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPassportCard)
}

inline void CSDTPassportCard::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.typeidlist_){arena}
    , /*decltype(_impl_._typeidlist_cached_byte_size_)*/{0}
    , decltype(_impl_.level_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTPassportCard::~CSDTPassportCard() {
  // @@protoc_insertion_point(destructor:msg.CSDTPassportCard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTPassportCard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.typeidlist_.~RepeatedField();
}

void CSDTPassportCard::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPassportCard::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPassportCard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.typeidlist_.Clear();
  _impl_.level_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPassportCard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 TypeIdList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_typeidlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_typeidlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPassportCard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPassportCard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 TypeIdList = 1;
  {
    int byte_size = _impl_._typeidlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_typeidlist(), byte_size, target);
    }
  }

  // uint32 Level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPassportCard)
  return target;
}

size_t CSDTPassportCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPassportCard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 TypeIdList = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.typeidlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._typeidlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 Level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPassportCard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPassportCard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPassportCard::GetClassData() const { return &_class_data_; }


void CSDTPassportCard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPassportCard*>(&to_msg);
  auto& from = static_cast<const CSDTPassportCard&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPassportCard)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.typeidlist_.MergeFrom(from._impl_.typeidlist_);
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPassportCard::CopyFrom(const CSDTPassportCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPassportCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPassportCard::IsInitialized() const {
  return true;
}

void CSDTPassportCard::InternalSwap(CSDTPassportCard* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.typeidlist_.InternalSwap(&other->_impl_.typeidlist_);
  swap(_impl_.level_, other->_impl_.level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPassportCard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[285]);
}

// ===================================================================

PveDataInfo_DataEntry_DoNotUse::PveDataInfo_DataEntry_DoNotUse() {}
PveDataInfo_DataEntry_DoNotUse::PveDataInfo_DataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PveDataInfo_DataEntry_DoNotUse::MergeFrom(const PveDataInfo_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PveDataInfo_DataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[286]);
}

// ===================================================================

class PveDataInfo::_Internal {
 public:
};

PveDataInfo::PveDataInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PveDataInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.PveDataInfo)
}
PveDataInfo::PveDataInfo(const PveDataInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PveDataInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.data_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  // @@protoc_insertion_point(copy_constructor:msg.PveDataInfo)
}

inline void PveDataInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.data_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PveDataInfo::~PveDataInfo() {
  // @@protoc_insertion_point(destructor:msg.PveDataInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PveDataInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destruct();
  _impl_.data_.~MapField();
}

void PveDataInfo::ArenaDtor(void* object) {
  PveDataInfo* _this = reinterpret_cast< PveDataInfo* >(object);
  _this->_impl_.data_.Destruct();
}
void PveDataInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PveDataInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PveDataInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PveDataInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, .msg.Pve> Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PveDataInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PveDataInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .msg.Pve> Data = 1;
  if (!this->_internal_data().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::Pve>;
    using WireHelper = PveDataInfo_DataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_data();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PveDataInfo)
  return target;
}

size_t PveDataInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PveDataInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .msg.Pve> Data = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::Pve >::const_iterator
      it = this->_internal_data().begin();
      it != this->_internal_data().end(); ++it) {
    total_size += PveDataInfo_DataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PveDataInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PveDataInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PveDataInfo::GetClassData() const { return &_class_data_; }


void PveDataInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PveDataInfo*>(&to_msg);
  auto& from = static_cast<const PveDataInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PveDataInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PveDataInfo::CopyFrom(const PveDataInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PveDataInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PveDataInfo::IsInitialized() const {
  return true;
}

void PveDataInfo::InternalSwap(PveDataInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PveDataInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[287]);
}

// ===================================================================

Pve_ChessIdsEntry_DoNotUse::Pve_ChessIdsEntry_DoNotUse() {}
Pve_ChessIdsEntry_DoNotUse::Pve_ChessIdsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Pve_ChessIdsEntry_DoNotUse::MergeFrom(const Pve_ChessIdsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Pve_ChessIdsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[288]);
}

// ===================================================================

Pve_SkillsEntry_DoNotUse::Pve_SkillsEntry_DoNotUse() {}
Pve_SkillsEntry_DoNotUse::Pve_SkillsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Pve_SkillsEntry_DoNotUse::MergeFrom(const Pve_SkillsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Pve_SkillsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[289]);
}

// ===================================================================

Pve_BuffEntry_DoNotUse::Pve_BuffEntry_DoNotUse() {}
Pve_BuffEntry_DoNotUse::Pve_BuffEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Pve_BuffEntry_DoNotUse::MergeFrom(const Pve_BuffEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Pve_BuffEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[290]);
}

// ===================================================================

class Pve::_Internal {
 public:
};

Pve::Pve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Pve::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.Pve)
}
Pve::Pve(const Pve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pve* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.chessids_)*/{}
    , /*decltype(_impl_.skills_)*/{}
    , /*decltype(_impl_.buff_)*/{}
    , decltype(_impl_.teamname_){}
    , decltype(_impl_.score_){}
    , decltype(_impl_.rankscore_){}
    , decltype(_impl_.unlock_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.chessids_.MergeFrom(from._impl_.chessids_);
  _this->_impl_.skills_.MergeFrom(from._impl_.skills_);
  _this->_impl_.buff_.MergeFrom(from._impl_.buff_);
  _impl_.teamname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teamname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_teamname().empty()) {
    _this->_impl_.teamname_.Set(from._internal_teamname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.score_, &from._impl_.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unlock_) -
    reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.unlock_));
  // @@protoc_insertion_point(copy_constructor:msg.Pve)
}

inline void Pve::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.chessids_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.skills_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.buff_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.teamname_){}
    , decltype(_impl_.score_){0u}
    , decltype(_impl_.rankscore_){0u}
    , decltype(_impl_.unlock_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.teamname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teamname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Pve::~Pve() {
  // @@protoc_insertion_point(destructor:msg.Pve)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Pve::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chessids_.Destruct();
  _impl_.chessids_.~MapField();
  _impl_.skills_.Destruct();
  _impl_.skills_.~MapField();
  _impl_.buff_.Destruct();
  _impl_.buff_.~MapField();
  _impl_.teamname_.Destroy();
}

void Pve::ArenaDtor(void* object) {
  Pve* _this = reinterpret_cast< Pve* >(object);
  _this->_impl_.chessids_.Destruct();
  _this->_impl_.skills_.Destruct();
  _this->_impl_.buff_.Destruct();
}
void Pve::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pve::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Pve)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chessids_.Clear();
  _impl_.skills_.Clear();
  _impl_.buff_.Clear();
  _impl_.teamname_.ClearToEmpty();
  ::memset(&_impl_.score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.unlock_) -
      reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.unlock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pve::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Score = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, bool> ChessIds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.chessids_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, bool> Skills = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.skills_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .msg.PveBuff> Buff = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.buff_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 RankScore = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.rankscore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TeamName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_teamname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.Pve.TeamName"));
        } else
          goto handle_unusual;
        continue;
      // bool Unlock = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.unlock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pve::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Pve)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Score = 1;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_score(), target);
  }

  // map<uint32, bool> ChessIds = 2;
  if (!this->_internal_chessids().empty()) {
    using MapType = ::_pb::Map<uint32_t, bool>;
    using WireHelper = Pve_ChessIdsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_chessids();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, bool> Skills = 3;
  if (!this->_internal_skills().empty()) {
    using MapType = ::_pb::Map<uint32_t, bool>;
    using WireHelper = Pve_SkillsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_skills();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<uint32, .msg.PveBuff> Buff = 4;
  if (!this->_internal_buff().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::PveBuff>;
    using WireHelper = Pve_BuffEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_buff();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint32 RankScore = 5;
  if (this->_internal_rankscore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rankscore(), target);
  }

  // string TeamName = 6;
  if (!this->_internal_teamname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_teamname().data(), static_cast<int>(this->_internal_teamname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.Pve.TeamName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_teamname(), target);
  }

  // bool Unlock = 7;
  if (this->_internal_unlock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_unlock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Pve)
  return target;
}

size_t Pve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Pve)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, bool> ChessIds = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_chessids_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >::const_iterator
      it = this->_internal_chessids().begin();
      it != this->_internal_chessids().end(); ++it) {
    total_size += Pve_ChessIdsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, bool> Skills = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_skills_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, bool >::const_iterator
      it = this->_internal_skills().begin();
      it != this->_internal_skills().end(); ++it) {
    total_size += Pve_SkillsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .msg.PveBuff> Buff = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_buff_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::PveBuff >::const_iterator
      it = this->_internal_buff().begin();
      it != this->_internal_buff().end(); ++it) {
    total_size += Pve_BuffEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string TeamName = 6;
  if (!this->_internal_teamname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_teamname());
  }

  // uint32 Score = 1;
  if (this->_internal_score() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_score());
  }

  // uint32 RankScore = 5;
  if (this->_internal_rankscore() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rankscore());
  }

  // bool Unlock = 7;
  if (this->_internal_unlock() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pve::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pve::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pve::GetClassData() const { return &_class_data_; }


void Pve::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pve*>(&to_msg);
  auto& from = static_cast<const Pve&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Pve)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chessids_.MergeFrom(from._impl_.chessids_);
  _this->_impl_.skills_.MergeFrom(from._impl_.skills_);
  _this->_impl_.buff_.MergeFrom(from._impl_.buff_);
  if (!from._internal_teamname().empty()) {
    _this->_internal_set_teamname(from._internal_teamname());
  }
  if (from._internal_score() != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  if (from._internal_rankscore() != 0) {
    _this->_internal_set_rankscore(from._internal_rankscore());
  }
  if (from._internal_unlock() != 0) {
    _this->_internal_set_unlock(from._internal_unlock());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pve::CopyFrom(const Pve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Pve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pve::IsInitialized() const {
  return true;
}

void Pve::InternalSwap(Pve* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chessids_.InternalSwap(&other->_impl_.chessids_);
  _impl_.skills_.InternalSwap(&other->_impl_.skills_);
  _impl_.buff_.InternalSwap(&other->_impl_.buff_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.teamname_, lhs_arena,
      &other->_impl_.teamname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pve, _impl_.unlock_)
      + sizeof(Pve::_impl_.unlock_)
      - PROTOBUF_FIELD_OFFSET(Pve, _impl_.score_)>(
          reinterpret_cast<char*>(&_impl_.score_),
          reinterpret_cast<char*>(&other->_impl_.score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pve::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[291]);
}

// ===================================================================

class PveBuff::_Internal {
 public:
};

PveBuff::PveBuff(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PveBuff)
}
PveBuff::PveBuff(const PveBuff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PveBuff* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.etime_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.etime_, &from._impl_.etime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.etime_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:msg.PveBuff)
}

inline void PveBuff::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.etime_){int64_t{0}}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PveBuff::~PveBuff() {
  // @@protoc_insertion_point(destructor:msg.PveBuff)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PveBuff::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PveBuff::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PveBuff::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PveBuff)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.etime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.etime_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PveBuff::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Etime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.etime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PveBuff::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PveBuff)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  // int64 Etime = 2;
  if (this->_internal_etime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_etime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PveBuff)
  return target;
}

size_t PveBuff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PveBuff)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Etime = 2;
  if (this->_internal_etime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_etime());
  }

  // uint32 Count = 1;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PveBuff::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PveBuff::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PveBuff::GetClassData() const { return &_class_data_; }


void PveBuff::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PveBuff*>(&to_msg);
  auto& from = static_cast<const PveBuff&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PveBuff)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_etime() != 0) {
    _this->_internal_set_etime(from._internal_etime());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PveBuff::CopyFrom(const PveBuff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PveBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PveBuff::IsInitialized() const {
  return true;
}

void PveBuff::InternalSwap(PveBuff* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PveBuff, _impl_.count_)
      + sizeof(PveBuff::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(PveBuff, _impl_.etime_)>(
          reinterpret_cast<char*>(&_impl_.etime_),
          reinterpret_cast<char*>(&other->_impl_.etime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PveBuff::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[292]);
}

// ===================================================================

class CardGroupData::_Internal {
 public:
};

CardGroupData::CardGroupData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CardGroupData)
}
CardGroupData::CardGroupData(const CardGroupData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CardGroupData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chessids_){from._impl_.chessids_}
    , decltype(_impl_.removechessids_){from._impl_.removechessids_}
    , /*decltype(_impl_._removechessids_cached_byte_size_)*/{0}
    , decltype(_impl_.autoaddcardtimes_){}
    , decltype(_impl_.isautoaddcardkernel_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.kernelflag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.autoaddcardtimes_, &from._impl_.autoaddcardtimes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kernelflag_) -
    reinterpret_cast<char*>(&_impl_.autoaddcardtimes_)) + sizeof(_impl_.kernelflag_));
  // @@protoc_insertion_point(copy_constructor:msg.CardGroupData)
}

inline void CardGroupData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chessids_){arena}
    , decltype(_impl_.removechessids_){arena}
    , /*decltype(_impl_._removechessids_cached_byte_size_)*/{0}
    , decltype(_impl_.autoaddcardtimes_){0u}
    , decltype(_impl_.isautoaddcardkernel_){false}
    , decltype(_impl_.flag_){false}
    , decltype(_impl_.kernelflag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CardGroupData::~CardGroupData() {
  // @@protoc_insertion_point(destructor:msg.CardGroupData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CardGroupData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chessids_.~RepeatedPtrField();
  _impl_.removechessids_.~RepeatedField();
}

void CardGroupData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CardGroupData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CardGroupData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chessids_.Clear();
  _impl_.removechessids_.Clear();
  ::memset(&_impl_.autoaddcardtimes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.kernelflag_) -
      reinterpret_cast<char*>(&_impl_.autoaddcardtimes_)) + sizeof(_impl_.kernelflag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CardGroupData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .msg.CardGroupChess ChessIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chessids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 AutoAddCardTimes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.autoaddcardtimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsAutoAddCardKernel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.isautoaddcardkernel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 RemoveChessIds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_removechessids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_removechessids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool KernelFlag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.kernelflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CardGroupData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CardGroupData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .msg.CardGroupChess ChessIds = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chessids_size()); i < n; i++) {
    const auto& repfield = this->_internal_chessids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 AutoAddCardTimes = 2;
  if (this->_internal_autoaddcardtimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_autoaddcardtimes(), target);
  }

  // bool IsAutoAddCardKernel = 3;
  if (this->_internal_isautoaddcardkernel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_isautoaddcardkernel(), target);
  }

  // bool Flag = 4;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_flag(), target);
  }

  // repeated uint32 RemoveChessIds = 5;
  {
    int byte_size = _impl_._removechessids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_removechessids(), byte_size, target);
    }
  }

  // bool KernelFlag = 6;
  if (this->_internal_kernelflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_kernelflag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CardGroupData)
  return target;
}

size_t CardGroupData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CardGroupData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.CardGroupChess ChessIds = 1;
  total_size += 1UL * this->_internal_chessids_size();
  for (const auto& msg : this->_impl_.chessids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 RemoveChessIds = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.removechessids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._removechessids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 AutoAddCardTimes = 2;
  if (this->_internal_autoaddcardtimes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_autoaddcardtimes());
  }

  // bool IsAutoAddCardKernel = 3;
  if (this->_internal_isautoaddcardkernel() != 0) {
    total_size += 1 + 1;
  }

  // bool Flag = 4;
  if (this->_internal_flag() != 0) {
    total_size += 1 + 1;
  }

  // bool KernelFlag = 6;
  if (this->_internal_kernelflag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CardGroupData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CardGroupData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CardGroupData::GetClassData() const { return &_class_data_; }


void CardGroupData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CardGroupData*>(&to_msg);
  auto& from = static_cast<const CardGroupData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CardGroupData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.chessids_.MergeFrom(from._impl_.chessids_);
  _this->_impl_.removechessids_.MergeFrom(from._impl_.removechessids_);
  if (from._internal_autoaddcardtimes() != 0) {
    _this->_internal_set_autoaddcardtimes(from._internal_autoaddcardtimes());
  }
  if (from._internal_isautoaddcardkernel() != 0) {
    _this->_internal_set_isautoaddcardkernel(from._internal_isautoaddcardkernel());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_kernelflag() != 0) {
    _this->_internal_set_kernelflag(from._internal_kernelflag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CardGroupData::CopyFrom(const CardGroupData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CardGroupData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardGroupData::IsInitialized() const {
  return true;
}

void CardGroupData::InternalSwap(CardGroupData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.chessids_.InternalSwap(&other->_impl_.chessids_);
  _impl_.removechessids_.InternalSwap(&other->_impl_.removechessids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CardGroupData, _impl_.kernelflag_)
      + sizeof(CardGroupData::_impl_.kernelflag_)
      - PROTOBUF_FIELD_OFFSET(CardGroupData, _impl_.autoaddcardtimes_)>(
          reinterpret_cast<char*>(&_impl_.autoaddcardtimes_),
          reinterpret_cast<char*>(&other->_impl_.autoaddcardtimes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CardGroupData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[293]);
}

// ===================================================================

class CardGroupChess::_Internal {
 public:
};

CardGroupChess::CardGroupChess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CardGroupChess)
}
CardGroupChess::CardGroupChess(const CardGroupChess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CardGroupChess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ctime_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ctime_, &from._impl_.ctime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.ctime_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:msg.CardGroupChess)
}

inline void CardGroupChess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ctime_){int64_t{0}}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CardGroupChess::~CardGroupChess() {
  // @@protoc_insertion_point(destructor:msg.CardGroupChess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CardGroupChess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CardGroupChess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CardGroupChess::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CardGroupChess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.ctime_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CardGroupChess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Ctime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CardGroupChess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CardGroupChess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // int64 Ctime = 2;
  if (this->_internal_ctime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_ctime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CardGroupChess)
  return target;
}

size_t CardGroupChess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CardGroupChess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 Ctime = 2;
  if (this->_internal_ctime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ctime());
  }

  // uint32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CardGroupChess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CardGroupChess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CardGroupChess::GetClassData() const { return &_class_data_; }


void CardGroupChess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CardGroupChess*>(&to_msg);
  auto& from = static_cast<const CardGroupChess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CardGroupChess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ctime() != 0) {
    _this->_internal_set_ctime(from._internal_ctime());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CardGroupChess::CopyFrom(const CardGroupChess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CardGroupChess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardGroupChess::IsInitialized() const {
  return true;
}

void CardGroupChess::InternalSwap(CardGroupChess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CardGroupChess, _impl_.id_)
      + sizeof(CardGroupChess::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(CardGroupChess, _impl_.ctime_)>(
          reinterpret_cast<char*>(&_impl_.ctime_),
          reinterpret_cast<char*>(&other->_impl_.ctime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CardGroupChess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[294]);
}

// ===================================================================

class ChessIds::_Internal {
 public:
};

ChessIds::ChessIds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.ChessIds)
}
ChessIds::ChessIds(const ChessIds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChessIds* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.ChessIds)
}

inline void ChessIds::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , /*decltype(_impl_._ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChessIds::~ChessIds() {
  // @@protoc_insertion_point(destructor:msg.ChessIds)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChessIds::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedField();
}

void ChessIds::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChessIds::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.ChessIds)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChessIds::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 Ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChessIds::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.ChessIds)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 Ids = 1;
  {
    int byte_size = _impl_._ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.ChessIds)
  return target;
}

size_t ChessIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.ChessIds)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 Ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChessIds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChessIds::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChessIds::GetClassData() const { return &_class_data_; }


void ChessIds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChessIds*>(&to_msg);
  auto& from = static_cast<const ChessIds&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.ChessIds)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChessIds::CopyFrom(const ChessIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.ChessIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessIds::IsInitialized() const {
  return true;
}

void ChessIds::InternalSwap(ChessIds* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChessIds::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[295]);
}

// ===================================================================

class PveConsume::_Internal {
 public:
};

PveConsume::PveConsume(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PveConsume)
}
PveConsume::PveConsume(const PveConsume& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PveConsume* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:msg.PveConsume)
}

inline void PveConsume::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PveConsume::~PveConsume() {
  // @@protoc_insertion_point(destructor:msg.PveConsume)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PveConsume::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PveConsume::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PveConsume::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PveConsume)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PveConsume::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.PVECONSUMETYPE Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::PVECONSUMETYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 Id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PveConsume::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PveConsume)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.PVECONSUMETYPE Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 Id = 2;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // uint32 Count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PveConsume)
  return target;
}

size_t PveConsume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PveConsume)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PVECONSUMETYPE Type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 Id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 Count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PveConsume::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PveConsume::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PveConsume::GetClassData() const { return &_class_data_; }


void PveConsume::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PveConsume*>(&to_msg);
  auto& from = static_cast<const PveConsume&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PveConsume)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PveConsume::CopyFrom(const PveConsume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PveConsume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PveConsume::IsInitialized() const {
  return true;
}

void PveConsume::InternalSwap(PveConsume* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PveConsume, _impl_.count_)
      + sizeof(PveConsume::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(PveConsume, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PveConsume::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[296]);
}

// ===================================================================

class PveSetting::_Internal {
 public:
};

PveSetting::PveSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PveSetting)
}
PveSetting::PveSetting(const PveSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PveSetting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.debuffids_){from._impl_.debuffids_}
    , /*decltype(_impl_._debuffids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:msg.PveSetting)
}

inline void PveSetting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.debuffids_){arena}
    , /*decltype(_impl_._debuffids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PveSetting::~PveSetting() {
  // @@protoc_insertion_point(destructor:msg.PveSetting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PveSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.debuffids_.~RepeatedField();
}

void PveSetting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PveSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PveSetting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.debuffids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PveSetting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 DeBuffIds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_debuffids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_debuffids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PveSetting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PveSetting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 DeBuffIds = 1;
  {
    int byte_size = _impl_._debuffids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_debuffids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PveSetting)
  return target;
}

size_t PveSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PveSetting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 DeBuffIds = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.debuffids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._debuffids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PveSetting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PveSetting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PveSetting::GetClassData() const { return &_class_data_; }


void PveSetting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PveSetting*>(&to_msg);
  auto& from = static_cast<const PveSetting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PveSetting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.debuffids_.MergeFrom(from._impl_.debuffids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PveSetting::CopyFrom(const PveSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PveSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PveSetting::IsInitialized() const {
  return true;
}

void PveSetting::InternalSwap(PveSetting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.debuffids_.InternalSwap(&other->_impl_.debuffids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PveSetting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[297]);
}

// ===================================================================

class PlayerTeamInfo::_Internal {
 public:
};

PlayerTeamInfo::PlayerTeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PlayerTeamInfo)
}
PlayerTeamInfo::PlayerTeamInfo(const PlayerTeamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerTeamInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mapkey_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mapkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mapkey().empty()) {
    _this->_impl_.mapkey_.Set(from._internal_mapkey(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.PlayerTeamInfo)
}

inline void PlayerTeamInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mapkey_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mapkey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mapkey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerTeamInfo::~PlayerTeamInfo() {
  // @@protoc_insertion_point(destructor:msg.PlayerTeamInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerTeamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mapkey_.Destroy();
}

void PlayerTeamInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerTeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayerTeamInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mapkey_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerTeamInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string MapKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mapkey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PlayerTeamInfo.MapKey"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerTeamInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerTeamInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string MapKey = 1;
  if (!this->_internal_mapkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mapkey().data(), static_cast<int>(this->_internal_mapkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PlayerTeamInfo.MapKey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mapkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerTeamInfo)
  return target;
}

size_t PlayerTeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayerTeamInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string MapKey = 1;
  if (!this->_internal_mapkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mapkey());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerTeamInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerTeamInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerTeamInfo::GetClassData() const { return &_class_data_; }


void PlayerTeamInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerTeamInfo*>(&to_msg);
  auto& from = static_cast<const PlayerTeamInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayerTeamInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mapkey().empty()) {
    _this->_internal_set_mapkey(from._internal_mapkey());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerTeamInfo::CopyFrom(const PlayerTeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayerTeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTeamInfo::IsInitialized() const {
  return true;
}

void PlayerTeamInfo::InternalSwap(PlayerTeamInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mapkey_, lhs_arena,
      &other->_impl_.mapkey_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerTeamInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[298]);
}

// ===================================================================

class PveRankRedisInfo::_Internal {
 public:
};

PveRankRedisInfo::PveRankRedisInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PveRankRedisInfo)
}
PveRankRedisInfo::PveRankRedisInfo(const PveRankRedisInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PveRankRedisInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.caption_){}
    , decltype(_impl_.teamname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_caption().empty()) {
    _this->_impl_.caption_.Set(from._internal_caption(), 
      _this->GetArenaForAllocation());
  }
  _impl_.teamname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teamname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_teamname().empty()) {
    _this->_impl_.teamname_.Set(from._internal_teamname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.PveRankRedisInfo)
}

inline void PveRankRedisInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.caption_){}
    , decltype(_impl_.teamname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.caption_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.caption_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.teamname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teamname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PveRankRedisInfo::~PveRankRedisInfo() {
  // @@protoc_insertion_point(destructor:msg.PveRankRedisInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PveRankRedisInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.caption_.Destroy();
  _impl_.teamname_.Destroy();
}

void PveRankRedisInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PveRankRedisInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PveRankRedisInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.caption_.ClearToEmpty();
  _impl_.teamname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PveRankRedisInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Caption = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_caption();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PveRankRedisInfo.Caption"));
        } else
          goto handle_unusual;
        continue;
      // string TeamName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_teamname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PveRankRedisInfo.TeamName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PveRankRedisInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PveRankRedisInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Caption = 1;
  if (!this->_internal_caption().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_caption().data(), static_cast<int>(this->_internal_caption().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PveRankRedisInfo.Caption");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_caption(), target);
  }

  // string TeamName = 2;
  if (!this->_internal_teamname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_teamname().data(), static_cast<int>(this->_internal_teamname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PveRankRedisInfo.TeamName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_teamname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PveRankRedisInfo)
  return target;
}

size_t PveRankRedisInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PveRankRedisInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Caption = 1;
  if (!this->_internal_caption().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_caption());
  }

  // string TeamName = 2;
  if (!this->_internal_teamname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_teamname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PveRankRedisInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PveRankRedisInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PveRankRedisInfo::GetClassData() const { return &_class_data_; }


void PveRankRedisInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PveRankRedisInfo*>(&to_msg);
  auto& from = static_cast<const PveRankRedisInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PveRankRedisInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_caption().empty()) {
    _this->_internal_set_caption(from._internal_caption());
  }
  if (!from._internal_teamname().empty()) {
    _this->_internal_set_teamname(from._internal_teamname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PveRankRedisInfo::CopyFrom(const PveRankRedisInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PveRankRedisInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PveRankRedisInfo::IsInitialized() const {
  return true;
}

void PveRankRedisInfo::InternalSwap(PveRankRedisInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.caption_, lhs_arena,
      &other->_impl_.caption_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.teamname_, lhs_arena,
      &other->_impl_.teamname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PveRankRedisInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[299]);
}

// ===================================================================

class CSDTPlayerPvpData::_Internal {
 public:
  static const ::msg::PveDataInfo& pve(const CSDTPlayerPvpData* msg);
  static const ::msg::CardGroupData& cardgroup(const CSDTPlayerPvpData* msg);
};

const ::msg::PveDataInfo&
CSDTPlayerPvpData::_Internal::pve(const CSDTPlayerPvpData* msg) {
  return *msg->_impl_.pve_;
}
const ::msg::CardGroupData&
CSDTPlayerPvpData::_Internal::cardgroup(const CSDTPlayerPvpData* msg) {
  return *msg->_impl_.cardgroup_;
}
CSDTPlayerPvpData::CSDTPlayerPvpData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTPlayerPvpData)
}
CSDTPlayerPvpData::CSDTPlayerPvpData(const CSDTPlayerPvpData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTPlayerPvpData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pve_){nullptr}
    , decltype(_impl_.cardgroup_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pve()) {
    _this->_impl_.pve_ = new ::msg::PveDataInfo(*from._impl_.pve_);
  }
  if (from._internal_has_cardgroup()) {
    _this->_impl_.cardgroup_ = new ::msg::CardGroupData(*from._impl_.cardgroup_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.CSDTPlayerPvpData)
}

inline void CSDTPlayerPvpData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pve_){nullptr}
    , decltype(_impl_.cardgroup_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTPlayerPvpData::~CSDTPlayerPvpData() {
  // @@protoc_insertion_point(destructor:msg.CSDTPlayerPvpData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTPlayerPvpData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pve_;
  if (this != internal_default_instance()) delete _impl_.cardgroup_;
}

void CSDTPlayerPvpData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTPlayerPvpData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTPlayerPvpData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pve_ != nullptr) {
    delete _impl_.pve_;
  }
  _impl_.pve_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cardgroup_ != nullptr) {
    delete _impl_.cardgroup_;
  }
  _impl_.cardgroup_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTPlayerPvpData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.PveDataInfo Pve = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pve(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CardGroupData CardGroup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cardgroup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTPlayerPvpData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTPlayerPvpData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.PveDataInfo Pve = 1;
  if (this->_internal_has_pve()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pve(this),
        _Internal::pve(this).GetCachedSize(), target, stream);
  }

  // .msg.CardGroupData CardGroup = 2;
  if (this->_internal_has_cardgroup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cardgroup(this),
        _Internal::cardgroup(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTPlayerPvpData)
  return target;
}

size_t CSDTPlayerPvpData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTPlayerPvpData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PveDataInfo Pve = 1;
  if (this->_internal_has_pve()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pve_);
  }

  // .msg.CardGroupData CardGroup = 2;
  if (this->_internal_has_cardgroup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cardgroup_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTPlayerPvpData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTPlayerPvpData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTPlayerPvpData::GetClassData() const { return &_class_data_; }


void CSDTPlayerPvpData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTPlayerPvpData*>(&to_msg);
  auto& from = static_cast<const CSDTPlayerPvpData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTPlayerPvpData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pve()) {
    _this->_internal_mutable_pve()->::msg::PveDataInfo::MergeFrom(
        from._internal_pve());
  }
  if (from._internal_has_cardgroup()) {
    _this->_internal_mutable_cardgroup()->::msg::CardGroupData::MergeFrom(
        from._internal_cardgroup());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTPlayerPvpData::CopyFrom(const CSDTPlayerPvpData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTPlayerPvpData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTPlayerPvpData::IsInitialized() const {
  return true;
}

void CSDTPlayerPvpData::InternalSwap(CSDTPlayerPvpData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSDTPlayerPvpData, _impl_.cardgroup_)
      + sizeof(CSDTPlayerPvpData::_impl_.cardgroup_)
      - PROTOBUF_FIELD_OFFSET(CSDTPlayerPvpData, _impl_.pve_)>(
          reinterpret_cast<char*>(&_impl_.pve_),
          reinterpret_cast<char*>(&other->_impl_.pve_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTPlayerPvpData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[300]);
}

// ===================================================================

class GmBan::_Internal {
 public:
};

GmBan::GmBan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.GmBan)
}
GmBan::GmBan(const GmBan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GmBan* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.starttime_){}
    , decltype(_impl_.endtime_){}
    , decltype(_impl_.ftype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.starttime_, &from._impl_.starttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ftype_) -
    reinterpret_cast<char*>(&_impl_.starttime_)) + sizeof(_impl_.ftype_));
  // @@protoc_insertion_point(copy_constructor:msg.GmBan)
}

inline void GmBan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.starttime_){int64_t{0}}
    , decltype(_impl_.endtime_){int64_t{0}}
    , decltype(_impl_.ftype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GmBan::~GmBan() {
  // @@protoc_insertion_point(destructor:msg.GmBan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GmBan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
}

void GmBan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GmBan::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.GmBan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reason_.ClearToEmpty();
  ::memset(&_impl_.starttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ftype_) -
      reinterpret_cast<char*>(&_impl_.starttime_)) + sizeof(_impl_.ftype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GmBan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.FROZEN_TYPE FType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ftype(static_cast<::msg::FROZEN_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 StartTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 EndTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Reason = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.GmBan.Reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GmBan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.GmBan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.FROZEN_TYPE FType = 1;
  if (this->_internal_ftype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ftype(), target);
  }

  // int64 StartTime = 2;
  if (this->_internal_starttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_starttime(), target);
  }

  // int64 EndTime = 3;
  if (this->_internal_endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_endtime(), target);
  }

  // string Reason = 4;
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.GmBan.Reason");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.GmBan)
  return target;
}

size_t GmBan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.GmBan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Reason = 4;
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // int64 StartTime = 2;
  if (this->_internal_starttime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_starttime());
  }

  // int64 EndTime = 3;
  if (this->_internal_endtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_endtime());
  }

  // .msg.FROZEN_TYPE FType = 1;
  if (this->_internal_ftype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ftype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GmBan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GmBan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GmBan::GetClassData() const { return &_class_data_; }


void GmBan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GmBan*>(&to_msg);
  auto& from = static_cast<const GmBan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.GmBan)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_starttime() != 0) {
    _this->_internal_set_starttime(from._internal_starttime());
  }
  if (from._internal_endtime() != 0) {
    _this->_internal_set_endtime(from._internal_endtime());
  }
  if (from._internal_ftype() != 0) {
    _this->_internal_set_ftype(from._internal_ftype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GmBan::CopyFrom(const GmBan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.GmBan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GmBan::IsInitialized() const {
  return true;
}

void GmBan::InternalSwap(GmBan* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GmBan, _impl_.ftype_)
      + sizeof(GmBan::_impl_.ftype_)
      - PROTOBUF_FIELD_OFFSET(GmBan, _impl_.starttime_)>(
          reinterpret_cast<char*>(&_impl_.starttime_),
          reinterpret_cast<char*>(&other->_impl_.starttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GmBan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[301]);
}

// ===================================================================

class MentorInviteMsg::_Internal {
 public:
};

MentorInviteMsg::MentorInviteMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.MentorInviteMsg)
}
MentorInviteMsg::MentorInviteMsg(const MentorInviteMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MentorInviteMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.completetask_){from._impl_.completetask_}
    , /*decltype(_impl_._completetask_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.ctime_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ctime_, &from._impl_.ctime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.ctime_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:msg.MentorInviteMsg)
}

inline void MentorInviteMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.completetask_){arena}
    , /*decltype(_impl_._completetask_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.ctime_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MentorInviteMsg::~MentorInviteMsg() {
  // @@protoc_insertion_point(destructor:msg.MentorInviteMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MentorInviteMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.completetask_.~RepeatedField();
  _impl_.id_.Destroy();
  _impl_.content_.Destroy();
}

void MentorInviteMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MentorInviteMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MentorInviteMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.completetask_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  ::memset(&_impl_.ctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.ctime_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MentorInviteMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.MENTORSHIP Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::MENTORSHIP>(val));
        } else
          goto handle_unusual;
        continue;
      // string Id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.MentorInviteMsg.Id"));
        } else
          goto handle_unusual;
        continue;
      // int64 Ctime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ctime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.MentorInviteMsg.Content"));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 CompleteTask = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_completetask(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_completetask(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MentorInviteMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MentorInviteMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.MENTORSHIP Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string Id = 2;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MentorInviteMsg.Id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // int64 Ctime = 3;
  if (this->_internal_ctime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_ctime(), target);
  }

  // string Content = 4;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.MentorInviteMsg.Content");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_content(), target);
  }

  // repeated uint32 CompleteTask = 5;
  {
    int byte_size = _impl_._completetask_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_completetask(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MentorInviteMsg)
  return target;
}

size_t MentorInviteMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MentorInviteMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 CompleteTask = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.completetask_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._completetask_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string Id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string Content = 4;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // int64 Ctime = 3;
  if (this->_internal_ctime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ctime());
  }

  // .msg.MENTORSHIP Type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MentorInviteMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MentorInviteMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MentorInviteMsg::GetClassData() const { return &_class_data_; }


void MentorInviteMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MentorInviteMsg*>(&to_msg);
  auto& from = static_cast<const MentorInviteMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.MentorInviteMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.completetask_.MergeFrom(from._impl_.completetask_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_ctime() != 0) {
    _this->_internal_set_ctime(from._internal_ctime());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MentorInviteMsg::CopyFrom(const MentorInviteMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MentorInviteMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MentorInviteMsg::IsInitialized() const {
  return true;
}

void MentorInviteMsg::InternalSwap(MentorInviteMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.completetask_.InternalSwap(&other->_impl_.completetask_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MentorInviteMsg, _impl_.type_)
      + sizeof(MentorInviteMsg::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(MentorInviteMsg, _impl_.ctime_)>(
          reinterpret_cast<char*>(&_impl_.ctime_),
          reinterpret_cast<char*>(&other->_impl_.ctime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MentorInviteMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[302]);
}

// ===================================================================

MentorInfo_TasksEntry_DoNotUse::MentorInfo_TasksEntry_DoNotUse() {}
MentorInfo_TasksEntry_DoNotUse::MentorInfo_TasksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MentorInfo_TasksEntry_DoNotUse::MergeFrom(const MentorInfo_TasksEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MentorInfo_TasksEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[303]);
}

// ===================================================================

class MentorInfo::_Internal {
 public:
};

MentorInfo::MentorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &MentorInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.MentorInfo)
}
MentorInfo::MentorInfo(const MentorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MentorInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pupils_){from._impl_.pupils_}
    , decltype(_impl_.punishtime_){from._impl_.punishtime_}
    , /*decltype(_impl_._punishtime_cached_byte_size_)*/{0}
    , /*decltype(_impl_.tasks_)*/{}
    , decltype(_impl_.level_){}
    , decltype(_impl_.invitetimes_){}
    , decltype(_impl_.graduatenum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.graduatenum_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.graduatenum_));
  // @@protoc_insertion_point(copy_constructor:msg.MentorInfo)
}

inline void MentorInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pupils_){arena}
    , decltype(_impl_.punishtime_){arena}
    , /*decltype(_impl_._punishtime_cached_byte_size_)*/{0}
    , /*decltype(_impl_.tasks_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.invitetimes_){0u}
    , decltype(_impl_.graduatenum_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MentorInfo::~MentorInfo() {
  // @@protoc_insertion_point(destructor:msg.MentorInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void MentorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pupils_.~RepeatedPtrField();
  _impl_.punishtime_.~RepeatedField();
  _impl_.tasks_.Destruct();
  _impl_.tasks_.~MapField();
}

void MentorInfo::ArenaDtor(void* object) {
  MentorInfo* _this = reinterpret_cast< MentorInfo* >(object);
  _this->_impl_.tasks_.Destruct();
}
void MentorInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MentorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.MentorInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pupils_.Clear();
  _impl_.punishtime_.Clear();
  _impl_.tasks_.Clear();
  ::memset(&_impl_.level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.graduatenum_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.graduatenum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MentorInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.MENTORLEVEL Level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::msg::MENTORLEVEL>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .msg.Pupil Pupils = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pupils(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 InviteTimes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.invitetimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 PunishTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_punishtime(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_punishtime(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .msg.CSDTTaskItem> Tasks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.tasks_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 GraduateNum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.graduatenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MentorInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.MentorInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.MENTORLEVEL Level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  // repeated .msg.Pupil Pupils = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pupils_size()); i < n; i++) {
    const auto& repfield = this->_internal_pupils(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 InviteTimes = 3;
  if (this->_internal_invitetimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_invitetimes(), target);
  }

  // repeated int64 PunishTime = 4;
  {
    int byte_size = _impl_._punishtime_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_punishtime(), byte_size, target);
    }
  }

  // map<uint32, .msg.CSDTTaskItem> Tasks = 5;
  if (!this->_internal_tasks().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::CSDTTaskItem>;
    using WireHelper = MentorInfo_TasksEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_tasks();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint32 GraduateNum = 6;
  if (this->_internal_graduatenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_graduatenum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.MentorInfo)
  return target;
}

size_t MentorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.MentorInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .msg.Pupil Pupils = 2;
  total_size += 1UL * this->_internal_pupils_size();
  for (const auto& msg : this->_impl_.pupils_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 PunishTime = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.punishtime_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._punishtime_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<uint32, .msg.CSDTTaskItem> Tasks = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tasks_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >::const_iterator
      it = this->_internal_tasks().begin();
      it != this->_internal_tasks().end(); ++it) {
    total_size += MentorInfo_TasksEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .msg.MENTORLEVEL Level = 1;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  // uint32 InviteTimes = 3;
  if (this->_internal_invitetimes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_invitetimes());
  }

  // uint32 GraduateNum = 6;
  if (this->_internal_graduatenum() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_graduatenum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MentorInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MentorInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MentorInfo::GetClassData() const { return &_class_data_; }


void MentorInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MentorInfo*>(&to_msg);
  auto& from = static_cast<const MentorInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.MentorInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pupils_.MergeFrom(from._impl_.pupils_);
  _this->_impl_.punishtime_.MergeFrom(from._impl_.punishtime_);
  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_invitetimes() != 0) {
    _this->_internal_set_invitetimes(from._internal_invitetimes());
  }
  if (from._internal_graduatenum() != 0) {
    _this->_internal_set_graduatenum(from._internal_graduatenum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MentorInfo::CopyFrom(const MentorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.MentorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MentorInfo::IsInitialized() const {
  return true;
}

void MentorInfo::InternalSwap(MentorInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pupils_.InternalSwap(&other->_impl_.pupils_);
  _impl_.punishtime_.InternalSwap(&other->_impl_.punishtime_);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MentorInfo, _impl_.graduatenum_)
      + sizeof(MentorInfo::_impl_.graduatenum_)
      - PROTOBUF_FIELD_OFFSET(MentorInfo, _impl_.level_)>(
          reinterpret_cast<char*>(&_impl_.level_),
          reinterpret_cast<char*>(&other->_impl_.level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MentorInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[304]);
}

// ===================================================================

Pupil_TasksEntry_DoNotUse::Pupil_TasksEntry_DoNotUse() {}
Pupil_TasksEntry_DoNotUse::Pupil_TasksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Pupil_TasksEntry_DoNotUse::MergeFrom(const Pupil_TasksEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Pupil_TasksEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[305]);
}

// ===================================================================

class Pupil::_Internal {
 public:
};

Pupil::Pupil(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Pupil::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.Pupil)
}
Pupil::Pupil(const Pupil& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pupil* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.tasks_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.graduatetime_){}
    , decltype(_impl_.applygraduatetime_){}
    , decltype(_impl_.intimacy_){}
    , decltype(_impl_.stat_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.graduatetime_, &from._impl_.graduatetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stat_) -
    reinterpret_cast<char*>(&_impl_.graduatetime_)) + sizeof(_impl_.stat_));
  // @@protoc_insertion_point(copy_constructor:msg.Pupil)
}

inline void Pupil::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.tasks_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.graduatetime_){int64_t{0}}
    , decltype(_impl_.applygraduatetime_){int64_t{0}}
    , decltype(_impl_.intimacy_){int64_t{0}}
    , decltype(_impl_.stat_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Pupil::~Pupil() {
  // @@protoc_insertion_point(destructor:msg.Pupil)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Pupil::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tasks_.Destruct();
  _impl_.tasks_.~MapField();
  _impl_.id_.Destroy();
}

void Pupil::ArenaDtor(void* object) {
  Pupil* _this = reinterpret_cast< Pupil* >(object);
  _this->_impl_.tasks_.Destruct();
}
void Pupil::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pupil::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.Pupil)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  _impl_.id_.ClearToEmpty();
  ::memset(&_impl_.graduatetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.stat_) -
      reinterpret_cast<char*>(&_impl_.graduatetime_)) + sizeof(_impl_.stat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pupil::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, .msg.CSDTTaskItem> Tasks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.tasks_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 GraduateTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.graduatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.Pupil.Id"));
        } else
          goto handle_unusual;
        continue;
      // .msg.PUPILSTAT Stat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stat(static_cast<::msg::PUPILSTAT>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 ApplyGraduateTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.applygraduatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Intimacy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.intimacy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pupil::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.Pupil)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .msg.CSDTTaskItem> Tasks = 1;
  if (!this->_internal_tasks().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::CSDTTaskItem>;
    using WireHelper = Pupil_TasksEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_tasks();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  // int64 GraduateTime = 2;
  if (this->_internal_graduatetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_graduatetime(), target);
  }

  // string Id = 3;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.Pupil.Id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // .msg.PUPILSTAT Stat = 4;
  if (this->_internal_stat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_stat(), target);
  }

  // int64 ApplyGraduateTime = 5;
  if (this->_internal_applygraduatetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_applygraduatetime(), target);
  }

  // int64 Intimacy = 6;
  if (this->_internal_intimacy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_intimacy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.Pupil)
  return target;
}

size_t Pupil::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.Pupil)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .msg.CSDTTaskItem> Tasks = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tasks_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >::const_iterator
      it = this->_internal_tasks().begin();
      it != this->_internal_tasks().end(); ++it) {
    total_size += Pupil_TasksEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string Id = 3;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // int64 GraduateTime = 2;
  if (this->_internal_graduatetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_graduatetime());
  }

  // int64 ApplyGraduateTime = 5;
  if (this->_internal_applygraduatetime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_applygraduatetime());
  }

  // int64 Intimacy = 6;
  if (this->_internal_intimacy() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_intimacy());
  }

  // .msg.PUPILSTAT Stat = 4;
  if (this->_internal_stat() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_stat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pupil::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pupil::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pupil::GetClassData() const { return &_class_data_; }


void Pupil::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pupil*>(&to_msg);
  auto& from = static_cast<const Pupil&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.Pupil)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_graduatetime() != 0) {
    _this->_internal_set_graduatetime(from._internal_graduatetime());
  }
  if (from._internal_applygraduatetime() != 0) {
    _this->_internal_set_applygraduatetime(from._internal_applygraduatetime());
  }
  if (from._internal_intimacy() != 0) {
    _this->_internal_set_intimacy(from._internal_intimacy());
  }
  if (from._internal_stat() != 0) {
    _this->_internal_set_stat(from._internal_stat());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pupil::CopyFrom(const Pupil& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.Pupil)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pupil::IsInitialized() const {
  return true;
}

void Pupil::InternalSwap(Pupil* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pupil, _impl_.stat_)
      + sizeof(Pupil::_impl_.stat_)
      - PROTOBUF_FIELD_OFFSET(Pupil, _impl_.graduatetime_)>(
          reinterpret_cast<char*>(&_impl_.graduatetime_),
          reinterpret_cast<char*>(&other->_impl_.graduatetime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pupil::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[306]);
}

// ===================================================================

class TDUnUse::_Internal {
 public:
  static const ::msg::TDItemId& id1(const TDUnUse* msg);
  static const ::msg::TDItemId& id2(const TDUnUse* msg);
  static const ::msg::TDItemId& id3(const TDUnUse* msg);
  static const ::msg::TDItemGroup& itemgroup1(const TDUnUse* msg);
  static const ::msg::TDItemGroup& itemgroup2(const TDUnUse* msg);
};

const ::msg::TDItemId&
TDUnUse::_Internal::id1(const TDUnUse* msg) {
  return *msg->_impl_.id1_;
}
const ::msg::TDItemId&
TDUnUse::_Internal::id2(const TDUnUse* msg) {
  return *msg->_impl_.id2_;
}
const ::msg::TDItemId&
TDUnUse::_Internal::id3(const TDUnUse* msg) {
  return *msg->_impl_.id3_;
}
const ::msg::TDItemGroup&
TDUnUse::_Internal::itemgroup1(const TDUnUse* msg) {
  return *msg->_impl_.itemgroup1_;
}
const ::msg::TDItemGroup&
TDUnUse::_Internal::itemgroup2(const TDUnUse* msg) {
  return *msg->_impl_.itemgroup2_;
}
TDUnUse::TDUnUse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDUnUse)
}
TDUnUse::TDUnUse(const TDUnUse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDUnUse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id1_){nullptr}
    , decltype(_impl_.id2_){nullptr}
    , decltype(_impl_.id3_){nullptr}
    , decltype(_impl_.itemgroup1_){nullptr}
    , decltype(_impl_.itemgroup2_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id1()) {
    _this->_impl_.id1_ = new ::msg::TDItemId(*from._impl_.id1_);
  }
  if (from._internal_has_id2()) {
    _this->_impl_.id2_ = new ::msg::TDItemId(*from._impl_.id2_);
  }
  if (from._internal_has_id3()) {
    _this->_impl_.id3_ = new ::msg::TDItemId(*from._impl_.id3_);
  }
  if (from._internal_has_itemgroup1()) {
    _this->_impl_.itemgroup1_ = new ::msg::TDItemGroup(*from._impl_.itemgroup1_);
  }
  if (from._internal_has_itemgroup2()) {
    _this->_impl_.itemgroup2_ = new ::msg::TDItemGroup(*from._impl_.itemgroup2_);
  }
  // @@protoc_insertion_point(copy_constructor:msg.TDUnUse)
}

inline void TDUnUse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id1_){nullptr}
    , decltype(_impl_.id2_){nullptr}
    , decltype(_impl_.id3_){nullptr}
    , decltype(_impl_.itemgroup1_){nullptr}
    , decltype(_impl_.itemgroup2_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDUnUse::~TDUnUse() {
  // @@protoc_insertion_point(destructor:msg.TDUnUse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDUnUse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.id1_;
  if (this != internal_default_instance()) delete _impl_.id2_;
  if (this != internal_default_instance()) delete _impl_.id3_;
  if (this != internal_default_instance()) delete _impl_.itemgroup1_;
  if (this != internal_default_instance()) delete _impl_.itemgroup2_;
}

void TDUnUse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDUnUse::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDUnUse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.id1_ != nullptr) {
    delete _impl_.id1_;
  }
  _impl_.id1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.id2_ != nullptr) {
    delete _impl_.id2_;
  }
  _impl_.id2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.id3_ != nullptr) {
    delete _impl_.id3_;
  }
  _impl_.id3_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.itemgroup1_ != nullptr) {
    delete _impl_.itemgroup1_;
  }
  _impl_.itemgroup1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.itemgroup2_ != nullptr) {
    delete _impl_.itemgroup2_;
  }
  _impl_.itemgroup2_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDUnUse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.TDItemId Id1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TDItemId Id2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_id2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TDItemId Id3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_id3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TDItemGroup ItemGroup1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_itemgroup1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.TDItemGroup ItemGroup2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_itemgroup2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDUnUse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDUnUse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.TDItemId Id1 = 1;
  if (this->_internal_has_id1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id1(this),
        _Internal::id1(this).GetCachedSize(), target, stream);
  }

  // .msg.TDItemId Id2 = 2;
  if (this->_internal_has_id2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::id2(this),
        _Internal::id2(this).GetCachedSize(), target, stream);
  }

  // .msg.TDItemId Id3 = 3;
  if (this->_internal_has_id3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::id3(this),
        _Internal::id3(this).GetCachedSize(), target, stream);
  }

  // .msg.TDItemGroup ItemGroup1 = 4;
  if (this->_internal_has_itemgroup1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::itemgroup1(this),
        _Internal::itemgroup1(this).GetCachedSize(), target, stream);
  }

  // .msg.TDItemGroup ItemGroup2 = 5;
  if (this->_internal_has_itemgroup2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::itemgroup2(this),
        _Internal::itemgroup2(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDUnUse)
  return target;
}

size_t TDUnUse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDUnUse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.TDItemId Id1 = 1;
  if (this->_internal_has_id1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id1_);
  }

  // .msg.TDItemId Id2 = 2;
  if (this->_internal_has_id2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id2_);
  }

  // .msg.TDItemId Id3 = 3;
  if (this->_internal_has_id3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id3_);
  }

  // .msg.TDItemGroup ItemGroup1 = 4;
  if (this->_internal_has_itemgroup1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.itemgroup1_);
  }

  // .msg.TDItemGroup ItemGroup2 = 5;
  if (this->_internal_has_itemgroup2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.itemgroup2_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDUnUse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDUnUse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDUnUse::GetClassData() const { return &_class_data_; }


void TDUnUse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDUnUse*>(&to_msg);
  auto& from = static_cast<const TDUnUse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDUnUse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id1()) {
    _this->_internal_mutable_id1()->::msg::TDItemId::MergeFrom(
        from._internal_id1());
  }
  if (from._internal_has_id2()) {
    _this->_internal_mutable_id2()->::msg::TDItemId::MergeFrom(
        from._internal_id2());
  }
  if (from._internal_has_id3()) {
    _this->_internal_mutable_id3()->::msg::TDItemId::MergeFrom(
        from._internal_id3());
  }
  if (from._internal_has_itemgroup1()) {
    _this->_internal_mutable_itemgroup1()->::msg::TDItemGroup::MergeFrom(
        from._internal_itemgroup1());
  }
  if (from._internal_has_itemgroup2()) {
    _this->_internal_mutable_itemgroup2()->::msg::TDItemGroup::MergeFrom(
        from._internal_itemgroup2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDUnUse::CopyFrom(const TDUnUse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDUnUse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDUnUse::IsInitialized() const {
  return true;
}

void TDUnUse::InternalSwap(TDUnUse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TDUnUse, _impl_.itemgroup2_)
      + sizeof(TDUnUse::_impl_.itemgroup2_)
      - PROTOBUF_FIELD_OFFSET(TDUnUse, _impl_.id1_)>(
          reinterpret_cast<char*>(&_impl_.id1_),
          reinterpret_cast<char*>(&other->_impl_.id1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TDUnUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[307]);
}

// ===================================================================

class TDItemId::_Internal {
 public:
};

TDItemId::TDItemId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.TDItemId)
}
TDItemId::TDItemId(const TDItemId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDItemId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:msg.TDItemId)
}

inline void TDItemId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDItemId::~TDItemId() {
  // @@protoc_insertion_point(destructor:msg.TDItemId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDItemId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TDItemId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDItemId::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDItemId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDItemId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDItemId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDItemId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 Level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDItemId)
  return target;
}

size_t TDItemId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDItemId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 Level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDItemId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDItemId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDItemId::GetClassData() const { return &_class_data_; }


void TDItemId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDItemId*>(&to_msg);
  auto& from = static_cast<const TDItemId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDItemId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDItemId::CopyFrom(const TDItemId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDItemId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDItemId::IsInitialized() const {
  return true;
}

void TDItemId::InternalSwap(TDItemId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TDItemId, _impl_.level_)
      + sizeof(TDItemId::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(TDItemId, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TDItemId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[308]);
}

// ===================================================================

TDItem_EquipmentsEntry_DoNotUse::TDItem_EquipmentsEntry_DoNotUse() {}
TDItem_EquipmentsEntry_DoNotUse::TDItem_EquipmentsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TDItem_EquipmentsEntry_DoNotUse::MergeFrom(const TDItem_EquipmentsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TDItem_EquipmentsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[309]);
}

// ===================================================================

class TDItem::_Internal {
 public:
};

TDItem::TDItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TDItem::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.TDItem)
}
TDItem::TDItem(const TDItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.equipments_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.talentlevel_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.equipments_.MergeFrom(from._impl_.equipments_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:msg.TDItem)
}

inline void TDItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.equipments_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.talentlevel_){0}
    , decltype(_impl_.count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TDItem::~TDItem() {
  // @@protoc_insertion_point(destructor:msg.TDItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TDItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.equipments_.Destruct();
  _impl_.equipments_.~MapField();
}

void TDItem::ArenaDtor(void* object) {
  TDItem* _this = reinterpret_cast< TDItem* >(object);
  _this->_impl_.equipments_.Destruct();
}
void TDItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDItem::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.TDItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.equipments_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TalentLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.talentlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .msg.TDItemId> Equipments = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.equipments_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.TDItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 Level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // int32 TalentLevel = 3;
  if (this->_internal_talentlevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_talentlevel(), target);
  }

  // int32 Count = 4;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_count(), target);
  }

  // map<string, .msg.TDItemId> Equipments = 5;
  if (!this->_internal_equipments().empty()) {
    using MapType = ::_pb::Map<std::string, ::msg::TDItemId>;
    using WireHelper = TDItem_EquipmentsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_equipments();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "msg.TDItem.EquipmentsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.TDItem)
  return target;
}

size_t TDItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.TDItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .msg.TDItemId> Equipments = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_equipments_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::msg::TDItemId >::const_iterator
      it = this->_internal_equipments().begin();
      it != this->_internal_equipments().end(); ++it) {
    total_size += TDItem_EquipmentsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 Level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 TalentLevel = 3;
  if (this->_internal_talentlevel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_talentlevel());
  }

  // int32 Count = 4;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDItem::GetClassData() const { return &_class_data_; }


void TDItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDItem*>(&to_msg);
  auto& from = static_cast<const TDItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.TDItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.equipments_.MergeFrom(from._impl_.equipments_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_talentlevel() != 0) {
    _this->_internal_set_talentlevel(from._internal_talentlevel());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDItem::CopyFrom(const TDItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.TDItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDItem::IsInitialized() const {
  return true;
}

void TDItem::InternalSwap(TDItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.equipments_.InternalSwap(&other->_impl_.equipments_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TDItem, _impl_.count_)
      + sizeof(TDItem::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(TDItem, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TDItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[310]);
}

// ===================================================================

class AddRecommendData::_Internal {
 public:
};

AddRecommendData::AddRecommendData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.AddRecommendData)
}
AddRecommendData::AddRecommendData(const AddRecommendData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddRecommendData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.mmr_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.playerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playerid().empty()) {
    _this->_impl_.playerid_.Set(from._internal_playerid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mmr_, &from._impl_.mmr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.mmr_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:msg.AddRecommendData)
}

inline void AddRecommendData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.mmr_){0u}
    , decltype(_impl_.level_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.playerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddRecommendData::~AddRecommendData() {
  // @@protoc_insertion_point(destructor:msg.AddRecommendData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddRecommendData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playerid_.Destroy();
}

void AddRecommendData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddRecommendData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.AddRecommendData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerid_.ClearToEmpty();
  ::memset(&_impl_.mmr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.mmr_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddRecommendData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string PlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.AddRecommendData.PlayerId"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Mmr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddRecommendData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.AddRecommendData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string PlayerId = 1;
  if (!this->_internal_playerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.AddRecommendData.PlayerId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playerid(), target);
  }

  // uint32 Mmr = 2;
  if (this->_internal_mmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mmr(), target);
  }

  // uint32 Level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.AddRecommendData)
  return target;
}

size_t AddRecommendData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.AddRecommendData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string PlayerId = 1;
  if (!this->_internal_playerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playerid());
  }

  // uint32 Mmr = 2;
  if (this->_internal_mmr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mmr());
  }

  // uint32 Level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddRecommendData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddRecommendData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddRecommendData::GetClassData() const { return &_class_data_; }


void AddRecommendData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddRecommendData*>(&to_msg);
  auto& from = static_cast<const AddRecommendData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.AddRecommendData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_playerid().empty()) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_mmr() != 0) {
    _this->_internal_set_mmr(from._internal_mmr());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddRecommendData::CopyFrom(const AddRecommendData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.AddRecommendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRecommendData::IsInitialized() const {
  return true;
}

void AddRecommendData::InternalSwap(AddRecommendData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playerid_, lhs_arena,
      &other->_impl_.playerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddRecommendData, _impl_.level_)
      + sizeof(AddRecommendData::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(AddRecommendData, _impl_.mmr_)>(
          reinterpret_cast<char*>(&_impl_.mmr_),
          reinterpret_cast<char*>(&other->_impl_.mmr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRecommendData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[311]);
}

// ===================================================================

PlayerMentorShipInfo_TasksEntry_DoNotUse::PlayerMentorShipInfo_TasksEntry_DoNotUse() {}
PlayerMentorShipInfo_TasksEntry_DoNotUse::PlayerMentorShipInfo_TasksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PlayerMentorShipInfo_TasksEntry_DoNotUse::MergeFrom(const PlayerMentorShipInfo_TasksEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PlayerMentorShipInfo_TasksEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[312]);
}

// ===================================================================

class PlayerMentorShipInfo::_Internal {
 public:
};

PlayerMentorShipInfo::PlayerMentorShipInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PlayerMentorShipInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.PlayerMentorShipInfo)
}
PlayerMentorShipInfo::PlayerMentorShipInfo(const PlayerMentorShipInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerMentorShipInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.tasks_)*/{}
    , decltype(_impl_.mentorid_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.ismentor_){}
    , decltype(_impl_.inviteswitch_){}
    , decltype(_impl_.isgraduate_){}
    , decltype(_impl_.tag_){}
    , decltype(_impl_.punishtime_){}
    , decltype(_impl_.invitetimes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  _impl_.mentorid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mentorid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mentorid().empty()) {
    _this->_impl_.mentorid_.Set(from._internal_mentorid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sign().empty()) {
    _this->_impl_.sign_.Set(from._internal_sign(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.ismentor_, &from._impl_.ismentor_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.invitetimes_) -
    reinterpret_cast<char*>(&_impl_.ismentor_)) + sizeof(_impl_.invitetimes_));
  // @@protoc_insertion_point(copy_constructor:msg.PlayerMentorShipInfo)
}

inline void PlayerMentorShipInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.tasks_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.mentorid_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.ismentor_){false}
    , decltype(_impl_.inviteswitch_){false}
    , decltype(_impl_.isgraduate_){false}
    , decltype(_impl_.tag_){0u}
    , decltype(_impl_.punishtime_){int64_t{0}}
    , decltype(_impl_.invitetimes_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mentorid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mentorid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerMentorShipInfo::~PlayerMentorShipInfo() {
  // @@protoc_insertion_point(destructor:msg.PlayerMentorShipInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PlayerMentorShipInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tasks_.Destruct();
  _impl_.tasks_.~MapField();
  _impl_.mentorid_.Destroy();
  _impl_.sign_.Destroy();
}

void PlayerMentorShipInfo::ArenaDtor(void* object) {
  PlayerMentorShipInfo* _this = reinterpret_cast< PlayerMentorShipInfo* >(object);
  _this->_impl_.tasks_.Destruct();
}
void PlayerMentorShipInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerMentorShipInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayerMentorShipInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  _impl_.mentorid_.ClearToEmpty();
  _impl_.sign_.ClearToEmpty();
  ::memset(&_impl_.ismentor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.invitetimes_) -
      reinterpret_cast<char*>(&_impl_.ismentor_)) + sizeof(_impl_.invitetimes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerMentorShipInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool IsMentor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ismentor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string MentorId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mentorid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PlayerMentorShipInfo.MentorId"));
        } else
          goto handle_unusual;
        continue;
      // string Sign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PlayerMentorShipInfo.Sign"));
        } else
          goto handle_unusual;
        continue;
      // bool InviteSwitch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.inviteswitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 PunishTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.punishtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool IsGraduate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.isgraduate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .msg.CSDTTaskItem> Tasks = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.tasks_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 InviteTimes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.invitetimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerMentorShipInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerMentorShipInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool IsMentor = 1;
  if (this->_internal_ismentor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ismentor(), target);
  }

  // string MentorId = 2;
  if (!this->_internal_mentorid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mentorid().data(), static_cast<int>(this->_internal_mentorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PlayerMentorShipInfo.MentorId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mentorid(), target);
  }

  // string Sign = 3;
  if (!this->_internal_sign().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sign().data(), static_cast<int>(this->_internal_sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PlayerMentorShipInfo.Sign");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sign(), target);
  }

  // bool InviteSwitch = 4;
  if (this->_internal_inviteswitch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_inviteswitch(), target);
  }

  // uint32 Tag = 5;
  if (this->_internal_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tag(), target);
  }

  // int64 PunishTime = 6;
  if (this->_internal_punishtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_punishtime(), target);
  }

  // bool IsGraduate = 7;
  if (this->_internal_isgraduate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_isgraduate(), target);
  }

  // map<uint32, .msg.CSDTTaskItem> Tasks = 8;
  if (!this->_internal_tasks().empty()) {
    using MapType = ::_pb::Map<uint32_t, ::msg::CSDTTaskItem>;
    using WireHelper = PlayerMentorShipInfo_TasksEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_tasks();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint32 InviteTimes = 9;
  if (this->_internal_invitetimes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_invitetimes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerMentorShipInfo)
  return target;
}

size_t PlayerMentorShipInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayerMentorShipInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .msg.CSDTTaskItem> Tasks = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tasks_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::msg::CSDTTaskItem >::const_iterator
      it = this->_internal_tasks().begin();
      it != this->_internal_tasks().end(); ++it) {
    total_size += PlayerMentorShipInfo_TasksEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string MentorId = 2;
  if (!this->_internal_mentorid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mentorid());
  }

  // string Sign = 3;
  if (!this->_internal_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sign());
  }

  // bool IsMentor = 1;
  if (this->_internal_ismentor() != 0) {
    total_size += 1 + 1;
  }

  // bool InviteSwitch = 4;
  if (this->_internal_inviteswitch() != 0) {
    total_size += 1 + 1;
  }

  // bool IsGraduate = 7;
  if (this->_internal_isgraduate() != 0) {
    total_size += 1 + 1;
  }

  // uint32 Tag = 5;
  if (this->_internal_tag() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tag());
  }

  // int64 PunishTime = 6;
  if (this->_internal_punishtime() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_punishtime());
  }

  // uint32 InviteTimes = 9;
  if (this->_internal_invitetimes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_invitetimes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerMentorShipInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerMentorShipInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerMentorShipInfo::GetClassData() const { return &_class_data_; }


void PlayerMentorShipInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerMentorShipInfo*>(&to_msg);
  auto& from = static_cast<const PlayerMentorShipInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayerMentorShipInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  if (!from._internal_mentorid().empty()) {
    _this->_internal_set_mentorid(from._internal_mentorid());
  }
  if (!from._internal_sign().empty()) {
    _this->_internal_set_sign(from._internal_sign());
  }
  if (from._internal_ismentor() != 0) {
    _this->_internal_set_ismentor(from._internal_ismentor());
  }
  if (from._internal_inviteswitch() != 0) {
    _this->_internal_set_inviteswitch(from._internal_inviteswitch());
  }
  if (from._internal_isgraduate() != 0) {
    _this->_internal_set_isgraduate(from._internal_isgraduate());
  }
  if (from._internal_tag() != 0) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (from._internal_punishtime() != 0) {
    _this->_internal_set_punishtime(from._internal_punishtime());
  }
  if (from._internal_invitetimes() != 0) {
    _this->_internal_set_invitetimes(from._internal_invitetimes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerMentorShipInfo::CopyFrom(const PlayerMentorShipInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayerMentorShipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMentorShipInfo::IsInitialized() const {
  return true;
}

void PlayerMentorShipInfo::InternalSwap(PlayerMentorShipInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mentorid_, lhs_arena,
      &other->_impl_.mentorid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sign_, lhs_arena,
      &other->_impl_.sign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerMentorShipInfo, _impl_.invitetimes_)
      + sizeof(PlayerMentorShipInfo::_impl_.invitetimes_)
      - PROTOBUF_FIELD_OFFSET(PlayerMentorShipInfo, _impl_.ismentor_)>(
          reinterpret_cast<char*>(&_impl_.ismentor_),
          reinterpret_cast<char*>(&other->_impl_.ismentor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerMentorShipInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[313]);
}

// ===================================================================

class CSDTMentorRecommendPlayer::_Internal {
 public:
};

CSDTMentorRecommendPlayer::CSDTMentorRecommendPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTMentorRecommendPlayer)
}
CSDTMentorRecommendPlayer::CSDTMentorRecommendPlayer(const CSDTMentorRecommendPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTMentorRecommendPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.playerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_playerid().empty()) {
    _this->_impl_.playerid_.Set(from._internal_playerid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:msg.CSDTMentorRecommendPlayer)
}

inline void CSDTMentorRecommendPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.playerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.playerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSDTMentorRecommendPlayer::~CSDTMentorRecommendPlayer() {
  // @@protoc_insertion_point(destructor:msg.CSDTMentorRecommendPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTMentorRecommendPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.playerid_.Destroy();
}

void CSDTMentorRecommendPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTMentorRecommendPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTMentorRecommendPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTMentorRecommendPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string PlayerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_playerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSDTMentorRecommendPlayer.PlayerId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTMentorRecommendPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTMentorRecommendPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string PlayerId = 1;
  if (!this->_internal_playerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playerid().data(), static_cast<int>(this->_internal_playerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSDTMentorRecommendPlayer.PlayerId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTMentorRecommendPlayer)
  return target;
}

size_t CSDTMentorRecommendPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTMentorRecommendPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string PlayerId = 1;
  if (!this->_internal_playerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTMentorRecommendPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTMentorRecommendPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTMentorRecommendPlayer::GetClassData() const { return &_class_data_; }


void CSDTMentorRecommendPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTMentorRecommendPlayer*>(&to_msg);
  auto& from = static_cast<const CSDTMentorRecommendPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTMentorRecommendPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_playerid().empty()) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTMentorRecommendPlayer::CopyFrom(const CSDTMentorRecommendPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTMentorRecommendPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTMentorRecommendPlayer::IsInitialized() const {
  return true;
}

void CSDTMentorRecommendPlayer::InternalSwap(CSDTMentorRecommendPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.playerid_, lhs_arena,
      &other->_impl_.playerid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTMentorRecommendPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[314]);
}

// ===================================================================

class PFDTTaskDetail::_Internal {
 public:
};

PFDTTaskDetail::PFDTTaskDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PFDTTaskDetail)
}
PFDTTaskDetail::PFDTTaskDetail(const PFDTTaskDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PFDTTaskDetail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.para_){from._impl_.para_}
    , /*decltype(_impl_._para_cached_byte_size_)*/{0}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.condtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mode().empty()) {
    _this->_impl_.mode_.Set(from._internal_mode(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.condtype_ = from._impl_.condtype_;
  // @@protoc_insertion_point(copy_constructor:msg.PFDTTaskDetail)
}

inline void PFDTTaskDetail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.para_){arena}
    , /*decltype(_impl_._para_cached_byte_size_)*/{0}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.condtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PFDTTaskDetail::~PFDTTaskDetail() {
  // @@protoc_insertion_point(destructor:msg.PFDTTaskDetail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PFDTTaskDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.para_.~RepeatedField();
  _impl_.mode_.Destroy();
}

void PFDTTaskDetail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PFDTTaskDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PFDTTaskDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.para_.Clear();
  _impl_.mode_.ClearToEmpty();
  _impl_.condtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PFDTTaskDetail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.CONDTYPE CondType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_condtype(static_cast<::msg::CONDTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 Para = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_para(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_para(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PFDTTaskDetail.Mode"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PFDTTaskDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PFDTTaskDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.CONDTYPE CondType = 1;
  if (this->_internal_condtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_condtype(), target);
  }

  // repeated int32 Para = 2;
  {
    int byte_size = _impl_._para_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_para(), byte_size, target);
    }
  }

  // string Mode = 3;
  if (!this->_internal_mode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PFDTTaskDetail.Mode");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PFDTTaskDetail)
  return target;
}

size_t PFDTTaskDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PFDTTaskDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Para = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.para_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._para_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string Mode = 3;
  if (!this->_internal_mode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode());
  }

  // .msg.CONDTYPE CondType = 1;
  if (this->_internal_condtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_condtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PFDTTaskDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PFDTTaskDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PFDTTaskDetail::GetClassData() const { return &_class_data_; }


void PFDTTaskDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PFDTTaskDetail*>(&to_msg);
  auto& from = static_cast<const PFDTTaskDetail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PFDTTaskDetail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.para_.MergeFrom(from._impl_.para_);
  if (!from._internal_mode().empty()) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_condtype() != 0) {
    _this->_internal_set_condtype(from._internal_condtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PFDTTaskDetail::CopyFrom(const PFDTTaskDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PFDTTaskDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PFDTTaskDetail::IsInitialized() const {
  return true;
}

void PFDTTaskDetail::InternalSwap(PFDTTaskDetail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.para_.InternalSwap(&other->_impl_.para_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mode_, lhs_arena,
      &other->_impl_.mode_, rhs_arena
  );
  swap(_impl_.condtype_, other->_impl_.condtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PFDTTaskDetail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[315]);
}

// ===================================================================

class CSDTMentorInfo::_Internal {
 public:
};

CSDTMentorInfo::CSDTMentorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.CSDTMentorInfo)
}
CSDTMentorInfo::CSDTMentorInfo(const CSDTMentorInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSDTMentorInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.level_ = from._impl_.level_;
  // @@protoc_insertion_point(copy_constructor:msg.CSDTMentorInfo)
}

inline void CSDTMentorInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSDTMentorInfo::~CSDTMentorInfo() {
  // @@protoc_insertion_point(destructor:msg.CSDTMentorInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSDTMentorInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CSDTMentorInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSDTMentorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSDTMentorInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSDTMentorInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.MENTORLEVEL Level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::msg::MENTORLEVEL>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSDTMentorInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSDTMentorInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.MENTORLEVEL Level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSDTMentorInfo)
  return target;
}

size_t CSDTMentorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSDTMentorInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.MENTORLEVEL Level = 1;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSDTMentorInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSDTMentorInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSDTMentorInfo::GetClassData() const { return &_class_data_; }


void CSDTMentorInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSDTMentorInfo*>(&to_msg);
  auto& from = static_cast<const CSDTMentorInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSDTMentorInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSDTMentorInfo::CopyFrom(const CSDTMentorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSDTMentorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDTMentorInfo::IsInitialized() const {
  return true;
}

void CSDTMentorInfo::InternalSwap(CSDTMentorInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.level_, other->_impl_.level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSDTMentorInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[316]);
}

// ===================================================================

class OBPassThroughData::_Internal {
 public:
};

OBPassThroughData::OBPassThroughData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.OBPassThroughData)
}
OBPassThroughData::OBPassThroughData(const OBPassThroughData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OBPassThroughData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pvpplayerid_){}
    , decltype(_impl_.obplayerid_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.round_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pvpplayerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pvpplayerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pvpplayerid().empty()) {
    _this->_impl_.pvpplayerid_.Set(from._internal_pvpplayerid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.obplayerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obplayerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_obplayerid().empty()) {
    _this->_impl_.obplayerid_.Set(from._internal_obplayerid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.round_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.round_));
  // @@protoc_insertion_point(copy_constructor:msg.OBPassThroughData)
}

inline void OBPassThroughData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pvpplayerid_){}
    , decltype(_impl_.obplayerid_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.round_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pvpplayerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pvpplayerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.obplayerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obplayerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OBPassThroughData::~OBPassThroughData() {
  // @@protoc_insertion_point(destructor:msg.OBPassThroughData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OBPassThroughData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pvpplayerid_.Destroy();
  _impl_.obplayerid_.Destroy();
}

void OBPassThroughData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OBPassThroughData::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.OBPassThroughData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pvpplayerid_.ClearToEmpty();
  _impl_.obplayerid_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.round_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.round_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OBPassThroughData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.KERNELJSONTYPE Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::msg::KERNELJSONTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 Round = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string PvPPlayerId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pvpplayerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.OBPassThroughData.PvPPlayerId"));
        } else
          goto handle_unusual;
        continue;
      // string ObPlayerId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_obplayerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.OBPassThroughData.ObPlayerId"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OBPassThroughData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.OBPassThroughData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.KERNELJSONTYPE Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 Round = 2;
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_round(), target);
  }

  // string PvPPlayerId = 3;
  if (!this->_internal_pvpplayerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pvpplayerid().data(), static_cast<int>(this->_internal_pvpplayerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.OBPassThroughData.PvPPlayerId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pvpplayerid(), target);
  }

  // string ObPlayerId = 4;
  if (!this->_internal_obplayerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_obplayerid().data(), static_cast<int>(this->_internal_obplayerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.OBPassThroughData.ObPlayerId");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_obplayerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.OBPassThroughData)
  return target;
}

size_t OBPassThroughData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.OBPassThroughData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string PvPPlayerId = 3;
  if (!this->_internal_pvpplayerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pvpplayerid());
  }

  // string ObPlayerId = 4;
  if (!this->_internal_obplayerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_obplayerid());
  }

  // .msg.KERNELJSONTYPE Type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 Round = 2;
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OBPassThroughData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OBPassThroughData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OBPassThroughData::GetClassData() const { return &_class_data_; }


void OBPassThroughData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OBPassThroughData*>(&to_msg);
  auto& from = static_cast<const OBPassThroughData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.OBPassThroughData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pvpplayerid().empty()) {
    _this->_internal_set_pvpplayerid(from._internal_pvpplayerid());
  }
  if (!from._internal_obplayerid().empty()) {
    _this->_internal_set_obplayerid(from._internal_obplayerid());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OBPassThroughData::CopyFrom(const OBPassThroughData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.OBPassThroughData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBPassThroughData::IsInitialized() const {
  return true;
}

void OBPassThroughData::InternalSwap(OBPassThroughData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pvpplayerid_, lhs_arena,
      &other->_impl_.pvpplayerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.obplayerid_, lhs_arena,
      &other->_impl_.obplayerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OBPassThroughData, _impl_.round_)
      + sizeof(OBPassThroughData::_impl_.round_)
      - PROTOBUF_FIELD_OFFSET(OBPassThroughData, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OBPassThroughData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[317]);
}

// ===================================================================

class HistoryMaxCupMmr::_Internal {
 public:
};

HistoryMaxCupMmr::HistoryMaxCupMmr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.HistoryMaxCupMmr)
}
HistoryMaxCupMmr::HistoryMaxCupMmr(const HistoryMaxCupMmr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HistoryMaxCupMmr* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mode_){}
    , decltype(_impl_.mmr_){}
    , decltype(_impl_.period_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mode_, &from._impl_.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.period_) -
    reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.period_));
  // @@protoc_insertion_point(copy_constructor:msg.HistoryMaxCupMmr)
}

inline void HistoryMaxCupMmr::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mode_){0}
    , decltype(_impl_.mmr_){0u}
    , decltype(_impl_.period_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HistoryMaxCupMmr::~HistoryMaxCupMmr() {
  // @@protoc_insertion_point(destructor:msg.HistoryMaxCupMmr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HistoryMaxCupMmr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HistoryMaxCupMmr::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HistoryMaxCupMmr::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.HistoryMaxCupMmr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.period_) -
      reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.period_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoryMaxCupMmr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .msg.PVPMODE Mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::msg::PVPMODE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 Mmr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Period = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistoryMaxCupMmr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.HistoryMaxCupMmr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .msg.PVPMODE Mode = 1;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // uint32 Mmr = 2;
  if (this->_internal_mmr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mmr(), target);
  }

  // uint32 Period = 3;
  if (this->_internal_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.HistoryMaxCupMmr)
  return target;
}

size_t HistoryMaxCupMmr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.HistoryMaxCupMmr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .msg.PVPMODE Mode = 1;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // uint32 Mmr = 2;
  if (this->_internal_mmr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mmr());
  }

  // uint32 Period = 3;
  if (this->_internal_period() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HistoryMaxCupMmr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HistoryMaxCupMmr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HistoryMaxCupMmr::GetClassData() const { return &_class_data_; }


void HistoryMaxCupMmr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HistoryMaxCupMmr*>(&to_msg);
  auto& from = static_cast<const HistoryMaxCupMmr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.HistoryMaxCupMmr)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_mmr() != 0) {
    _this->_internal_set_mmr(from._internal_mmr());
  }
  if (from._internal_period() != 0) {
    _this->_internal_set_period(from._internal_period());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HistoryMaxCupMmr::CopyFrom(const HistoryMaxCupMmr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.HistoryMaxCupMmr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryMaxCupMmr::IsInitialized() const {
  return true;
}

void HistoryMaxCupMmr::InternalSwap(HistoryMaxCupMmr* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoryMaxCupMmr, _impl_.period_)
      + sizeof(HistoryMaxCupMmr::_impl_.period_)
      - PROTOBUF_FIELD_OFFSET(HistoryMaxCupMmr, _impl_.mode_)>(
          reinterpret_cast<char*>(&_impl_.mode_),
          reinterpret_cast<char*>(&other->_impl_.mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoryMaxCupMmr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[318]);
}

// ===================================================================

CSNtfPvpChat_ShowItemsEntry_DoNotUse::CSNtfPvpChat_ShowItemsEntry_DoNotUse() {}
CSNtfPvpChat_ShowItemsEntry_DoNotUse::CSNtfPvpChat_ShowItemsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CSNtfPvpChat_ShowItemsEntry_DoNotUse::MergeFrom(const CSNtfPvpChat_ShowItemsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CSNtfPvpChat_ShowItemsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[319]);
}

// ===================================================================

class CSNtfPvpChat::_Internal {
 public:
};

CSNtfPvpChat::CSNtfPvpChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CSNtfPvpChat::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:msg.CSNtfPvpChat)
}
CSNtfPvpChat::CSNtfPvpChat(const CSNtfPvpChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSNtfPvpChat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.showitems_)*/{}
    , decltype(_impl_.passporttypeids_){from._impl_.passporttypeids_}
    , /*decltype(_impl_._passporttypeids_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.guildname_){}
    , decltype(_impl_.emotion_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.chattype_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.quickchat_){}
    , decltype(_impl_.headpic_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.province_){}
    , decltype(_impl_.platform_){}
    , decltype(_impl_.iswatcher_){}
    , decltype(_impl_.ps4only_){}
    , decltype(_impl_.channeltype_){}
    , decltype(_impl_.restricttype_){}
    , decltype(_impl_.guildsign_){}
    , decltype(_impl_.sourcetype_){}
    , decltype(_impl_.exchangestate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.showitems_.MergeFrom(from._impl_.showitems_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country().empty()) {
    _this->_impl_.country_.Set(from._internal_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channelusrid().empty()) {
    _this->_impl_.channelusrid_.Set(from._internal_channelusrid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.guildname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guildname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_guildname().empty()) {
    _this->_impl_.guildname_.Set(from._internal_guildname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.emotion_, &from._impl_.emotion_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.exchangestate_) -
    reinterpret_cast<char*>(&_impl_.emotion_)) + sizeof(_impl_.exchangestate_));
  // @@protoc_insertion_point(copy_constructor:msg.CSNtfPvpChat)
}

inline void CSNtfPvpChat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.showitems_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.passporttypeids_){arena}
    , /*decltype(_impl_._passporttypeids_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.username_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.channelusrid_){}
    , decltype(_impl_.guildname_){}
    , decltype(_impl_.emotion_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.chattype_){0}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.quickchat_){0}
    , decltype(_impl_.headpic_){0u}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.province_){0u}
    , decltype(_impl_.platform_){0}
    , decltype(_impl_.iswatcher_){false}
    , decltype(_impl_.ps4only_){false}
    , decltype(_impl_.channeltype_){0}
    , decltype(_impl_.restricttype_){0}
    , decltype(_impl_.guildsign_){0}
    , decltype(_impl_.sourcetype_){0}
    , decltype(_impl_.exchangestate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channelusrid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.channelusrid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.guildname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guildname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSNtfPvpChat::~CSNtfPvpChat() {
  // @@protoc_insertion_point(destructor:msg.CSNtfPvpChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CSNtfPvpChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.showitems_.Destruct();
  _impl_.showitems_.~MapField();
  _impl_.passporttypeids_.~RepeatedField();
  _impl_.id_.Destroy();
  _impl_.content_.Destroy();
  _impl_.username_.Destroy();
  _impl_.country_.Destroy();
  _impl_.channelusrid_.Destroy();
  _impl_.guildname_.Destroy();
}

void CSNtfPvpChat::ArenaDtor(void* object) {
  CSNtfPvpChat* _this = reinterpret_cast< CSNtfPvpChat* >(object);
  _this->_impl_.showitems_.Destruct();
}
void CSNtfPvpChat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSNtfPvpChat::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.CSNtfPvpChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.showitems_.Clear();
  _impl_.passporttypeids_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  _impl_.country_.ClearToEmpty();
  _impl_.channelusrid_.ClearToEmpty();
  _impl_.guildname_.ClearToEmpty();
  ::memset(&_impl_.emotion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.exchangestate_) -
      reinterpret_cast<char*>(&_impl_.emotion_)) + sizeof(_impl_.exchangestate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSNtfPvpChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSNtfPvpChat.Id"));
        } else
          goto handle_unusual;
        continue;
      // string Content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSNtfPvpChat.Content"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Emotion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.emotion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CHATTYPE ChatType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chattype(static_cast<::msg::CHATTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 Index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 QuickChat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.quickchat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string UserName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSNtfPvpChat.UserName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 HeadPic = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.headpic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Country = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSNtfPvpChat.Country"));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint32> ShowItems = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.showitems_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool IsWatcher = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.iswatcher_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Province = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.province_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 Timestamp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.PLATFORMTYPE Platform = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platform(static_cast<::msg::PLATFORMTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 PassportTypeIds = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_passporttypeids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 128) {
          _internal_add_passporttypeids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CHANELTYPE ChannelType = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channeltype(static_cast<::msg::CHANELTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string ChannelUsrId = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_channelusrid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSNtfPvpChat.ChannelUsrId"));
        } else
          goto handle_unusual;
        continue;
      // bool PS4Only = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.ps4only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.UserRestrictType RestrictType = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_restricttype(static_cast<::msg::UserRestrictType>(val));
        } else
          goto handle_unusual;
        continue;
      // string GuildName = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_guildname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.CSNtfPvpChat.GuildName"));
        } else
          goto handle_unusual;
        continue;
      // int32 GuildSign = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.guildsign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .msg.CHATSOURCETYPE SourceType = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sourcetype(static_cast<::msg::CHATSOURCETYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // .msg.EXCHANGESTATE ExchangeState = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_exchangestate(static_cast<::msg::EXCHANGESTATE>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSNtfPvpChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.CSNtfPvpChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSNtfPvpChat.Id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string Content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSNtfPvpChat.Content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // uint32 Emotion = 3;
  if (this->_internal_emotion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_emotion(), target);
  }

  // uint32 Level = 4;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_level(), target);
  }

  // .msg.CHATTYPE ChatType = 5;
  if (this->_internal_chattype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_chattype(), target);
  }

  // uint32 Index = 6;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_index(), target);
  }

  // int32 QuickChat = 7;
  if (this->_internal_quickchat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_quickchat(), target);
  }

  // string UserName = 8;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSNtfPvpChat.UserName");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_username(), target);
  }

  // uint32 HeadPic = 9;
  if (this->_internal_headpic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_headpic(), target);
  }

  // string Country = 10;
  if (!this->_internal_country().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSNtfPvpChat.Country");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_country(), target);
  }

  // map<uint32, uint32> ShowItems = 11;
  if (!this->_internal_showitems().empty()) {
    using MapType = ::_pb::Map<uint32_t, uint32_t>;
    using WireHelper = CSNtfPvpChat_ShowItemsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_showitems();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
      }
    }
  }

  // bool IsWatcher = 12;
  if (this->_internal_iswatcher() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_iswatcher(), target);
  }

  // uint32 Province = 13;
  if (this->_internal_province() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_province(), target);
  }

  // int64 Timestamp = 14;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_timestamp(), target);
  }

  // .msg.PLATFORMTYPE Platform = 15;
  if (this->_internal_platform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_platform(), target);
  }

  // repeated uint32 PassportTypeIds = 16;
  {
    int byte_size = _impl_._passporttypeids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          16, _internal_passporttypeids(), byte_size, target);
    }
  }

  // .msg.CHANELTYPE ChannelType = 17;
  if (this->_internal_channeltype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      17, this->_internal_channeltype(), target);
  }

  // string ChannelUsrId = 18;
  if (!this->_internal_channelusrid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelusrid().data(), static_cast<int>(this->_internal_channelusrid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSNtfPvpChat.ChannelUsrId");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_channelusrid(), target);
  }

  // bool PS4Only = 19;
  if (this->_internal_ps4only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_ps4only(), target);
  }

  // .msg.UserRestrictType RestrictType = 20;
  if (this->_internal_restricttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      20, this->_internal_restricttype(), target);
  }

  // string GuildName = 21;
  if (!this->_internal_guildname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guildname().data(), static_cast<int>(this->_internal_guildname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.CSNtfPvpChat.GuildName");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_guildname(), target);
  }

  // int32 GuildSign = 22;
  if (this->_internal_guildsign() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_guildsign(), target);
  }

  // .msg.CHATSOURCETYPE SourceType = 23;
  if (this->_internal_sourcetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_sourcetype(), target);
  }

  // .msg.EXCHANGESTATE ExchangeState = 24;
  if (this->_internal_exchangestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      24, this->_internal_exchangestate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.CSNtfPvpChat)
  return target;
}

size_t CSNtfPvpChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.CSNtfPvpChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> ShowItems = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_showitems_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint32_t >::const_iterator
      it = this->_internal_showitems().begin();
      it != this->_internal_showitems().end(); ++it) {
    total_size += CSNtfPvpChat_ShowItemsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated uint32 PassportTypeIds = 16;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.passporttypeids_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._passporttypeids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string Id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string Content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string UserName = 8;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string Country = 10;
  if (!this->_internal_country().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string ChannelUsrId = 18;
  if (!this->_internal_channelusrid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelusrid());
  }

  // string GuildName = 21;
  if (!this->_internal_guildname().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guildname());
  }

  // uint32 Emotion = 3;
  if (this->_internal_emotion() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_emotion());
  }

  // uint32 Level = 4;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // .msg.CHATTYPE ChatType = 5;
  if (this->_internal_chattype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_chattype());
  }

  // uint32 Index = 6;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  // int32 QuickChat = 7;
  if (this->_internal_quickchat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quickchat());
  }

  // uint32 HeadPic = 9;
  if (this->_internal_headpic() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_headpic());
  }

  // int64 Timestamp = 14;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 Province = 13;
  if (this->_internal_province() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_province());
  }

  // .msg.PLATFORMTYPE Platform = 15;
  if (this->_internal_platform() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_platform());
  }

  // bool IsWatcher = 12;
  if (this->_internal_iswatcher() != 0) {
    total_size += 1 + 1;
  }

  // bool PS4Only = 19;
  if (this->_internal_ps4only() != 0) {
    total_size += 2 + 1;
  }

  // .msg.CHANELTYPE ChannelType = 17;
  if (this->_internal_channeltype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_channeltype());
  }

  // .msg.UserRestrictType RestrictType = 20;
  if (this->_internal_restricttype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_restricttype());
  }

  // int32 GuildSign = 22;
  if (this->_internal_guildsign() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_guildsign());
  }

  // .msg.CHATSOURCETYPE SourceType = 23;
  if (this->_internal_sourcetype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sourcetype());
  }

  // .msg.EXCHANGESTATE ExchangeState = 24;
  if (this->_internal_exchangestate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_exchangestate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSNtfPvpChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSNtfPvpChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSNtfPvpChat::GetClassData() const { return &_class_data_; }


void CSNtfPvpChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSNtfPvpChat*>(&to_msg);
  auto& from = static_cast<const CSNtfPvpChat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.CSNtfPvpChat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.showitems_.MergeFrom(from._impl_.showitems_);
  _this->_impl_.passporttypeids_.MergeFrom(from._impl_.passporttypeids_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (!from._internal_channelusrid().empty()) {
    _this->_internal_set_channelusrid(from._internal_channelusrid());
  }
  if (!from._internal_guildname().empty()) {
    _this->_internal_set_guildname(from._internal_guildname());
  }
  if (from._internal_emotion() != 0) {
    _this->_internal_set_emotion(from._internal_emotion());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_chattype() != 0) {
    _this->_internal_set_chattype(from._internal_chattype());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_quickchat() != 0) {
    _this->_internal_set_quickchat(from._internal_quickchat());
  }
  if (from._internal_headpic() != 0) {
    _this->_internal_set_headpic(from._internal_headpic());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_province() != 0) {
    _this->_internal_set_province(from._internal_province());
  }
  if (from._internal_platform() != 0) {
    _this->_internal_set_platform(from._internal_platform());
  }
  if (from._internal_iswatcher() != 0) {
    _this->_internal_set_iswatcher(from._internal_iswatcher());
  }
  if (from._internal_ps4only() != 0) {
    _this->_internal_set_ps4only(from._internal_ps4only());
  }
  if (from._internal_channeltype() != 0) {
    _this->_internal_set_channeltype(from._internal_channeltype());
  }
  if (from._internal_restricttype() != 0) {
    _this->_internal_set_restricttype(from._internal_restricttype());
  }
  if (from._internal_guildsign() != 0) {
    _this->_internal_set_guildsign(from._internal_guildsign());
  }
  if (from._internal_sourcetype() != 0) {
    _this->_internal_set_sourcetype(from._internal_sourcetype());
  }
  if (from._internal_exchangestate() != 0) {
    _this->_internal_set_exchangestate(from._internal_exchangestate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSNtfPvpChat::CopyFrom(const CSNtfPvpChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.CSNtfPvpChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtfPvpChat::IsInitialized() const {
  return true;
}

void CSNtfPvpChat::InternalSwap(CSNtfPvpChat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.showitems_.InternalSwap(&other->_impl_.showitems_);
  _impl_.passporttypeids_.InternalSwap(&other->_impl_.passporttypeids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_, lhs_arena,
      &other->_impl_.country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.channelusrid_, lhs_arena,
      &other->_impl_.channelusrid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.guildname_, lhs_arena,
      &other->_impl_.guildname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSNtfPvpChat, _impl_.exchangestate_)
      + sizeof(CSNtfPvpChat::_impl_.exchangestate_)
      - PROTOBUF_FIELD_OFFSET(CSNtfPvpChat, _impl_.emotion_)>(
          reinterpret_cast<char*>(&_impl_.emotion_),
          reinterpret_cast<char*>(&other->_impl_.emotion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSNtfPvpChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[320]);
}

// ===================================================================

class PlayerObServerInfo::_Internal {
 public:
};

PlayerObServerInfo::PlayerObServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:msg.PlayerObServerInfo)
}
PlayerObServerInfo::PlayerObServerInfo(const PlayerObServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerObServerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.obplayerid_){}
    , decltype(_impl_.pvpid_){}
    , decltype(_impl_.obsvrid_){}
    , decltype(_impl_.pvpsvrid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.obplayerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obplayerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_obplayerid().empty()) {
    _this->_impl_.obplayerid_.Set(from._internal_obplayerid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.pvpid_, &from._impl_.pvpid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pvpsvrid_) -
    reinterpret_cast<char*>(&_impl_.pvpid_)) + sizeof(_impl_.pvpsvrid_));
  // @@protoc_insertion_point(copy_constructor:msg.PlayerObServerInfo)
}

inline void PlayerObServerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.obplayerid_){}
    , decltype(_impl_.pvpid_){uint64_t{0u}}
    , decltype(_impl_.obsvrid_){0u}
    , decltype(_impl_.pvpsvrid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.obplayerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.obplayerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerObServerInfo::~PlayerObServerInfo() {
  // @@protoc_insertion_point(destructor:msg.PlayerObServerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerObServerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.obplayerid_.Destroy();
}

void PlayerObServerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerObServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:msg.PlayerObServerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.obplayerid_.ClearToEmpty();
  ::memset(&_impl_.pvpid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pvpsvrid_) -
      reinterpret_cast<char*>(&_impl_.pvpid_)) + sizeof(_impl_.pvpsvrid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerObServerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 PvpId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.pvpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ObSvrId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.obsvrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ObplayerId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_obplayerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "msg.PlayerObServerInfo.ObplayerId"));
        } else
          goto handle_unusual;
        continue;
      // uint32 PvpSvrId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.pvpsvrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerObServerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg.PlayerObServerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 PvpId = 1;
  if (this->_internal_pvpid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pvpid(), target);
  }

  // uint32 ObSvrId = 2;
  if (this->_internal_obsvrid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_obsvrid(), target);
  }

  // string ObplayerId = 3;
  if (!this->_internal_obplayerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_obplayerid().data(), static_cast<int>(this->_internal_obplayerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg.PlayerObServerInfo.ObplayerId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_obplayerid(), target);
  }

  // uint32 PvpSvrId = 4;
  if (this->_internal_pvpsvrid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pvpsvrid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg.PlayerObServerInfo)
  return target;
}

size_t PlayerObServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg.PlayerObServerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ObplayerId = 3;
  if (!this->_internal_obplayerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_obplayerid());
  }

  // uint64 PvpId = 1;
  if (this->_internal_pvpid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pvpid());
  }

  // uint32 ObSvrId = 2;
  if (this->_internal_obsvrid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_obsvrid());
  }

  // uint32 PvpSvrId = 4;
  if (this->_internal_pvpsvrid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pvpsvrid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerObServerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerObServerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerObServerInfo::GetClassData() const { return &_class_data_; }


void PlayerObServerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerObServerInfo*>(&to_msg);
  auto& from = static_cast<const PlayerObServerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:msg.PlayerObServerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_obplayerid().empty()) {
    _this->_internal_set_obplayerid(from._internal_obplayerid());
  }
  if (from._internal_pvpid() != 0) {
    _this->_internal_set_pvpid(from._internal_pvpid());
  }
  if (from._internal_obsvrid() != 0) {
    _this->_internal_set_obsvrid(from._internal_obsvrid());
  }
  if (from._internal_pvpsvrid() != 0) {
    _this->_internal_set_pvpsvrid(from._internal_pvpsvrid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerObServerInfo::CopyFrom(const PlayerObServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg.PlayerObServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerObServerInfo::IsInitialized() const {
  return true;
}

void PlayerObServerInfo::InternalSwap(PlayerObServerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.obplayerid_, lhs_arena,
      &other->_impl_.obplayerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerObServerInfo, _impl_.pvpsvrid_)
      + sizeof(PlayerObServerInfo::_impl_.pvpsvrid_)
      - PROTOBUF_FIELD_OFFSET(PlayerObServerInfo, _impl_.pvpid_)>(
          reinterpret_cast<char*>(&_impl_.pvpid_),
          reinterpret_cast<char*>(&other->_impl_.pvpid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerObServerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2eproto_getter, &descriptor_table_common_2eproto_once,
      file_level_metadata_common_2eproto[321]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg::BountySetting*
Arena::CreateMaybeMessage< ::msg::BountySetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::BountySetting >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TeamOPSetting*
Arena::CreateMaybeMessage< ::msg::TeamOPSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TeamOPSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::WorkshopSetting*
Arena::CreateMaybeMessage< ::msg::WorkshopSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::WorkshopSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TeamOPChangeGroup*
Arena::CreateMaybeMessage< ::msg::TeamOPChangeGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TeamOPChangeGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TeamOPSelfChangeGroup*
Arena::CreateMaybeMessage< ::msg::TeamOPSelfChangeGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TeamOPSelfChangeGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TeamOPAppointLeader*
Arena::CreateMaybeMessage< ::msg::TeamOPAppointLeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TeamOPAppointLeader >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TeamOPChangeName*
Arena::CreateMaybeMessage< ::msg::TeamOPChangeName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TeamOPChangeName >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TeamOPSwitchSlot*
Arena::CreateMaybeMessage< ::msg::TeamOPSwitchSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TeamOPSwitchSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TeamBetOnBounty*
Arena::CreateMaybeMessage< ::msg::TeamBetOnBounty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TeamBetOnBounty >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TeamOP*
Arena::CreateMaybeMessage< ::msg::TeamOP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TeamOP >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TeamBaseInfo*
Arena::CreateMaybeMessage< ::msg::TeamBaseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TeamBaseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Award_AffixsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::Award_AffixsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Award_AffixsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Award*
Arena::CreateMaybeMessage< ::msg::Award >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Award >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::UpdatePlayerData_ChessSkinDataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::UpdatePlayerData_ChessSkinDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::UpdatePlayerData_ChessSkinDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::UpdatePlayerData_ShowItemsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::UpdatePlayerData_ShowItemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::UpdatePlayerData_ShowItemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::UpdatePlayerData_SkinDataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::UpdatePlayerData_SkinDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::UpdatePlayerData_SkinDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::UpdatePlayerData*
Arena::CreateMaybeMessage< ::msg::UpdatePlayerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::UpdatePlayerData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::SkipType*
Arena::CreateMaybeMessage< ::msg::SkipType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::SkipType >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::BuffEffect*
Arena::CreateMaybeMessage< ::msg::BuffEffect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::BuffEffect >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Consume*
Arena::CreateMaybeMessage< ::msg::Consume >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Consume >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTItem_AffixsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTItem_AffixsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTItem_AffixsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTItem*
Arena::CreateMaybeMessage< ::msg::CSDTItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTItem >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ItemAffix*
Arena::CreateMaybeMessage< ::msg::ItemAffix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ItemAffix >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTItemMedal*
Arena::CreateMaybeMessage< ::msg::CSDTItemMedal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTItemMedal >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTItemID*
Arena::CreateMaybeMessage< ::msg::CSDTItemID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTItemID >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTBagPara*
Arena::CreateMaybeMessage< ::msg::CSDTBagPara >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTBagPara >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTBagItem*
Arena::CreateMaybeMessage< ::msg::CSDTBagItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTBagItem >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPlayerStatusInfo*
Arena::CreateMaybeMessage< ::msg::CSDTPlayerStatusInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPlayerStatusInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPvpWinData*
Arena::CreateMaybeMessage< ::msg::CSDTPvpWinData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPvpWinData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTChessPlrInfo_EquipsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTChessPlrInfo_EquipsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTChessPlrInfo_EquipsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTChessPlrInfo*
Arena::CreateMaybeMessage< ::msg::CSDTChessPlrInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTChessPlrInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPuzzle_ItemMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTPuzzle_ItemMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPuzzle_ItemMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPuzzle*
Arena::CreateMaybeMessage< ::msg::CSDTPuzzle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPuzzle >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ChessSkinSlotData_SlotsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::ChessSkinSlotData_SlotsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ChessSkinSlotData_SlotsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ChessSkinSlotData*
Arena::CreateMaybeMessage< ::msg::ChessSkinSlotData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ChessSkinSlotData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PvpPlayerData_ModeWinDatasEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PvpPlayerData_ModeWinDatasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PvpPlayerData_ModeWinDatasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PvpPlayerData_CurShowItemsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PvpPlayerData_CurShowItemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PvpPlayerData_CurShowItemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PvpPlayerData_SettingsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PvpPlayerData_SettingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PvpPlayerData_SettingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PvpPlayerData_SwitchItemsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PvpPlayerData_SwitchItemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PvpPlayerData_SwitchItemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PvpPlayerData_PunishmentEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PvpPlayerData_PunishmentEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PvpPlayerData_PunishmentEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PvpPlayerData_RegionDelaysEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PvpPlayerData_RegionDelaysEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PvpPlayerData_RegionDelaysEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PvpPlayerData_TicketsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PvpPlayerData_TicketsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PvpPlayerData_TicketsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PvpPlayerData_CurrencysEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PvpPlayerData_CurrencysEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PvpPlayerData_CurrencysEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PvpPlayerData_ChessSkinDataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PvpPlayerData_ChessSkinDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PvpPlayerData_ChessSkinDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PvpPlayerData_SkinDataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PvpPlayerData_SkinDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PvpPlayerData_SkinDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PvpPlayerData*
Arena::CreateMaybeMessage< ::msg::PvpPlayerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PvpPlayerData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PvpData*
Arena::CreateMaybeMessage< ::msg::PvpData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PvpData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDCardGroup*
Arena::CreateMaybeMessage< ::msg::TDCardGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDCardGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDCardGroups*
Arena::CreateMaybeMessage< ::msg::TDCardGroups >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDCardGroups >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDItemGroup_ItemsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::TDItemGroup_ItemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDItemGroup_ItemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDItemGroup*
Arena::CreateMaybeMessage< ::msg::TDItemGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDItemGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TowerDefenseData*
Arena::CreateMaybeMessage< ::msg::TowerDefenseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TowerDefenseData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::KernelCardGroup*
Arena::CreateMaybeMessage< ::msg::KernelCardGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::KernelCardGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::KernelChessInfo*
Arena::CreateMaybeMessage< ::msg::KernelChessInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::KernelChessInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ApplyWorkshopRule*
Arena::CreateMaybeMessage< ::msg::ApplyWorkshopRule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ApplyWorkshopRule >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTVisitedMap*
Arena::CreateMaybeMessage< ::msg::CSDTVisitedMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTVisitedMap >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::VisitedMaps_MapsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::VisitedMaps_MapsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::VisitedMaps_MapsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::VisitedMaps*
Arena::CreateMaybeMessage< ::msg::VisitedMaps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::VisitedMaps >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTCurShowItem*
Arena::CreateMaybeMessage< ::msg::CSDTCurShowItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTCurShowItem >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPassportHistory*
Arena::CreateMaybeMessage< ::msg::CSDTPassportHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPassportHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ExchangeRecord*
Arena::CreateMaybeMessage< ::msg::ExchangeRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ExchangeRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPlayerBaseInfo_PvpHistoryEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPlayerBaseInfo_MvpInfosEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPlayerBaseInfo_AdvancePassportEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPlayerBaseInfo_PassportCardNumEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPlayerBaseInfo*
Arena::CreateMaybeMessage< ::msg::CSDTPlayerBaseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPlayerBaseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerGuildInfo*
Arena::CreateMaybeMessage< ::msg::PlayerGuildInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerGuildInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPlayerSimpleInfo_HisToryMaxStatEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPlayerSimpleInfo*
Arena::CreateMaybeMessage< ::msg::CSDTPlayerSimpleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPlayerSimpleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPlayerRankInfo*
Arena::CreateMaybeMessage< ::msg::CSDTPlayerRankInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPlayerRankInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPlayerTournamentInfo*
Arena::CreateMaybeMessage< ::msg::CSDTPlayerTournamentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPlayerTournamentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPvpHistory*
Arena::CreateMaybeMessage< ::msg::CSDTPvpHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPvpHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPlayerPvpInfo*
Arena::CreateMaybeMessage< ::msg::CSDTPlayerPvpInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPlayerPvpInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPlayerDetailInfo*
Arena::CreateMaybeMessage< ::msg::CSDTPlayerDetailInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPlayerDetailInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPlayerItems*
Arena::CreateMaybeMessage< ::msg::CSDTPlayerItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPlayerItems >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRankSeasonData*
Arena::CreateMaybeMessage< ::msg::CSDTRankSeasonData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRankSeasonData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRankSeasonInfo_ModesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTRankSeasonInfo_ModesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRankSeasonInfo_ModesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRankSeasonInfo*
Arena::CreateMaybeMessage< ::msg::CSDTRankSeasonInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRankSeasonInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTStat_SeasonInfoEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTStat_SeasonInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTStat_SeasonInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTStat*
Arena::CreateMaybeMessage< ::msg::CSDTStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTStat >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTNumRankItem*
Arena::CreateMaybeMessage< ::msg::CSDTNumRankItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTNumRankItem >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTWorldChat*
Arena::CreateMaybeMessage< ::msg::CSDTWorldChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTWorldChat >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTBuffAct*
Arena::CreateMaybeMessage< ::msg::CSDTBuffAct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTBuffAct >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTMail_DictEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTMail_DictEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTMail_DictEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTMail*
Arena::CreateMaybeMessage< ::msg::CSDTMail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTMail >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTNoticeInfo*
Arena::CreateMaybeMessage< ::msg::CSDTNoticeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTNoticeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTNotice*
Arena::CreateMaybeMessage< ::msg::CSDTNotice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTNotice >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTAdsInfo*
Arena::CreateMaybeMessage< ::msg::CSDTAdsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTAdsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTAds*
Arena::CreateMaybeMessage< ::msg::CSDTAds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTAds >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Contest*
Arena::CreateMaybeMessage< ::msg::Contest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Contest >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Effect*
Arena::CreateMaybeMessage< ::msg::Effect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Effect >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ChessDamageStat*
Arena::CreateMaybeMessage< ::msg::ChessDamageStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ChessDamageStat >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::SelectEquip*
Arena::CreateMaybeMessage< ::msg::SelectEquip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::SelectEquip >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Equip*
Arena::CreateMaybeMessage< ::msg::Equip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Equip >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRoundItem_EnemyLeftChessEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTRoundItem_EnemyLeftChessEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRoundItem_EnemyLeftChessEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRoundItem_SelfLeftChessEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTRoundItem_SelfLeftChessEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRoundItem_SelfLeftChessEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRoundItem_DropEquipEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTRoundItem_DropEquipEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRoundItem_DropEquipEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRoundItem_SelfBattleChessEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTRoundItem_SelfBattleChessEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRoundItem_SelfBattleChessEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRoundItem_EnemyBattleChessEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTRoundItem_EnemyBattleChessEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRoundItem_EnemyBattleChessEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRoundItem_BuyChessListEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTRoundItem_BuyChessListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRoundItem_BuyChessListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRoundItem_EquipComposeListEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTRoundItem_EquipComposeListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRoundItem_EquipComposeListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRoundItem_UpgradeStarChessListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRoundItem_MoneySourceListEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTRoundItem_MoneySourceListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRoundItem_MoneySourceListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRoundItem_MoneyPayListEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTRoundItem_MoneyPayListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRoundItem_MoneyPayListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRoundItem_SellChessListEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTRoundItem_SellChessListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRoundItem_SellChessListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRoundItem_EquipComposeStructListEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTRoundItem_EquipComposeStructListEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRoundItem_EquipComposeStructListEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRoundItem*
Arena::CreateMaybeMessage< ::msg::CSDTRoundItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRoundItem >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRound*
Arena::CreateMaybeMessage< ::msg::CSDTRound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRound >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRoundEnd*
Arena::CreateMaybeMessage< ::msg::CSDTRoundEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRoundEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPvpStat_PlayerRoundEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTPvpStat_PlayerRoundEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPvpStat_PlayerRoundEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPvpStat*
Arena::CreateMaybeMessage< ::msg::CSDTPvpStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPvpStat >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPvpCampResult*
Arena::CreateMaybeMessage< ::msg::CSDTPvpCampResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPvpCampResult >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTCampData*
Arena::CreateMaybeMessage< ::msg::CSDTCampData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTCampData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRoleStat*
Arena::CreateMaybeMessage< ::msg::CSDTRoleStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRoleStat >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPvpMvp*
Arena::CreateMaybeMessage< ::msg::CSDTPvpMvp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPvpMvp >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPvpPlayerStat_CurShowItemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPvpPlayerStat_ChessRaceEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPvpPlayerStat_ChessProEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTPvpPlayerStat_ChessProEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPvpPlayerStat_ChessProEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPvpPlayerStat_UnlockedChessEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPvpPlayerStat_PveItemsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTPvpPlayerStat_PveItemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPvpPlayerStat_PveItemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPvpPlayerStat*
Arena::CreateMaybeMessage< ::msg::CSDTPvpPlayerStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPvpPlayerStat >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::KernelItem*
Arena::CreateMaybeMessage< ::msg::KernelItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::KernelItem >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTFetters*
Arena::CreateMaybeMessage< ::msg::CSDTFetters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTFetters >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPlayerFinish*
Arena::CreateMaybeMessage< ::msg::CSDTPlayerFinish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPlayerFinish >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTMarqueeItem*
Arena::CreateMaybeMessage< ::msg::CSDTMarqueeItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTMarqueeItem >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTMarquee*
Arena::CreateMaybeMessage< ::msg::CSDTMarquee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTMarquee >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Cond*
Arena::CreateMaybeMessage< ::msg::Cond >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Cond >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTChessPlayerEquip*
Arena::CreateMaybeMessage< ::msg::CSDTChessPlayerEquip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTChessPlayerEquip >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTChessPlayer_EquipsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTChessPlayer_EquipsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTChessPlayer_EquipsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTChessPlayer_EquipEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTChessPlayer_EquipEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTChessPlayer_EquipEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTChessPlayer*
Arena::CreateMaybeMessage< ::msg::CSDTChessPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTChessPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTTelBook*
Arena::CreateMaybeMessage< ::msg::CSDTTelBook >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTTelBook >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::LanguageData*
Arena::CreateMaybeMessage< ::msg::LanguageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::LanguageData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GMLanguageData_LanguagesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::GMLanguageData_LanguagesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GMLanguageData_LanguagesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GMLanguageData*
Arena::CreateMaybeMessage< ::msg::GMLanguageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GMLanguageData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CommonKVString*
Arena::CreateMaybeMessage< ::msg::CommonKVString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CommonKVString >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CDNLanguageData*
Arena::CreateMaybeMessage< ::msg::CDNLanguageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CDNLanguageData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTSeason*
Arena::CreateMaybeMessage< ::msg::CSDTSeason >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTSeason >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActivity_GroupsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTActivity_GroupsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActivity_GroupsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActivity*
Arena::CreateMaybeMessage< ::msg::CSDTActivity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActivityGroup_ActivitiesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTActivityGroup_ActivitiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActivityGroup_ActivitiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActivityGroup*
Arena::CreateMaybeMessage< ::msg::CSDTActivityGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActivityGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActivityDetail*
Arena::CreateMaybeMessage< ::msg::CSDTActivityDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActivityDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActivityRecord_ProcessEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTActivityRecord_ProcessEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActivityRecord_ProcessEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActivityRecord_RewardEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTActivityRecord_RewardEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActivityRecord_RewardEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActivityRecord*
Arena::CreateMaybeMessage< ::msg::CSDTActivityRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActivityRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRecruitData_IsRecruitedEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTRecruitData_IsRecruitedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRecruitData_IsRecruitedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRecruitData*
Arena::CreateMaybeMessage< ::msg::CSDTRecruitData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRecruitData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRecruitPlayer*
Arena::CreateMaybeMessage< ::msg::CSDTRecruitPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRecruitPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActivityRecruit_PlayersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTActivityRecruit_PlayersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActivityRecruit_PlayersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActivityRecruit*
Arena::CreateMaybeMessage< ::msg::CSDTActivityRecruit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActivityRecruit >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActGroupBuy_ProcessEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTActGroupBuy_ProcessEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActGroupBuy_ProcessEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActGroupBuy_RewardEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTActGroupBuy_RewardEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActGroupBuy_RewardEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActGroupBuy*
Arena::CreateMaybeMessage< ::msg::CSDTActGroupBuy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActGroupBuy >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActGroupBuyRwd_RewardsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTActGroupBuyRwd_RewardsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActGroupBuyRwd_RewardsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActGroupBuyRwd*
Arena::CreateMaybeMessage< ::msg::CSDTActGroupBuyRwd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActGroupBuyRwd >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActRecruitData_PlayersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTActRecruitData_PlayersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActRecruitData_PlayersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActRecruitData*
Arena::CreateMaybeMessage< ::msg::CSDTActRecruitData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActRecruitData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActLuckMallData*
Arena::CreateMaybeMessage< ::msg::CSDTActLuckMallData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActLuckMallData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTMelee*
Arena::CreateMaybeMessage< ::msg::CSDTMelee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTMelee >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTTeamSlotPlayer*
Arena::CreateMaybeMessage< ::msg::CSDTTeamSlotPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTTeamSlotPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTTeamVoicePlayer*
Arena::CreateMaybeMessage< ::msg::CSDTTeamVoicePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTTeamVoicePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ActivityGroupData*
Arena::CreateMaybeMessage< ::msg::ActivityGroupData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ActivityGroupData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ActivityData*
Arena::CreateMaybeMessage< ::msg::ActivityData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ActivityData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ActivityAttrData*
Arena::CreateMaybeMessage< ::msg::ActivityAttrData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ActivityAttrData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GMLanguageInfo*
Arena::CreateMaybeMessage< ::msg::GMLanguageInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GMLanguageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayLimit*
Arena::CreateMaybeMessage< ::msg::PlayLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ChannelFunctionData*
Arena::CreateMaybeMessage< ::msg::ChannelFunctionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ChannelFunctionData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PvpHistoryData*
Arena::CreateMaybeMessage< ::msg::PvpHistoryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PvpHistoryData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTGuide*
Arena::CreateMaybeMessage< ::msg::CSDTGuide >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTGuide >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTChat*
Arena::CreateMaybeMessage< ::msg::CSDTChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTChat >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTGoods*
Arena::CreateMaybeMessage< ::msg::CSDTGoods >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTGoods >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTGoodsInfo*
Arena::CreateMaybeMessage< ::msg::CSDTGoodsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTGoodsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MallTabData*
Arena::CreateMaybeMessage< ::msg::MallTabData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::MallTabData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Skip*
Arena::CreateMaybeMessage< ::msg::Skip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Skip >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MallGoodsData*
Arena::CreateMaybeMessage< ::msg::MallGoodsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::MallGoodsData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ConsumeIncrease*
Arena::CreateMaybeMessage< ::msg::ConsumeIncrease >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ConsumeIncrease >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTMallGoodsData*
Arena::CreateMaybeMessage< ::msg::CSDTMallGoodsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTMallGoodsData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTMallGoods*
Arena::CreateMaybeMessage< ::msg::CSDTMallGoods >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTMallGoods >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTMallBuyCountData*
Arena::CreateMaybeMessage< ::msg::CSDTMallBuyCountData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTMallBuyCountData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTMallBuyCount*
Arena::CreateMaybeMessage< ::msg::CSDTMallBuyCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTMallBuyCount >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MallNoticeData*
Arena::CreateMaybeMessage< ::msg::MallNoticeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::MallNoticeData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTCommonRandList*
Arena::CreateMaybeMessage< ::msg::CSDTCommonRandList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTCommonRandList >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Sign*
Arena::CreateMaybeMessage< ::msg::Sign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Sign >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTSignData*
Arena::CreateMaybeMessage< ::msg::CSDTSignData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTSignData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MatchTeamData*
Arena::CreateMaybeMessage< ::msg::MatchTeamData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::MatchTeamData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRecommendPlayer*
Arena::CreateMaybeMessage< ::msg::CSDTRecommendPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRecommendPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTThirdPvpInfo*
Arena::CreateMaybeMessage< ::msg::CSDTThirdPvpInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTThirdPvpInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRecommendPvpInfo*
Arena::CreateMaybeMessage< ::msg::CSDTRecommendPvpInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRecommendPvpInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::WxVVipData*
Arena::CreateMaybeMessage< ::msg::WxVVipData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::WxVVipData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTWxRedPktItem*
Arena::CreateMaybeMessage< ::msg::CSDTWxRedPktItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTWxRedPktItem >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTWxRedPktProfile*
Arena::CreateMaybeMessage< ::msg::CSDTWxRedPktProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTWxRedPktProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTWxVVipRankItem*
Arena::CreateMaybeMessage< ::msg::CSDTWxVVipRankItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTWxVVipRankItem >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTSlotInfo*
Arena::CreateMaybeMessage< ::msg::CSDTSlotInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTSlotInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRedPktData*
Arena::CreateMaybeMessage< ::msg::CSDTRedPktData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRedPktData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTRedPktInfo*
Arena::CreateMaybeMessage< ::msg::CSDTRedPktInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTRedPktInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::SwitchItem*
Arena::CreateMaybeMessage< ::msg::SwitchItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::SwitchItem >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CreditCfgItem*
Arena::CreateMaybeMessage< ::msg::CreditCfgItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CreditCfgItem >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPunishment*
Arena::CreateMaybeMessage< ::msg::CSDTPunishment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPunishment >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPlayer*
Arena::CreateMaybeMessage< ::msg::CSDTPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTBriefPunishment*
Arena::CreateMaybeMessage< ::msg::CSDTBriefPunishment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTBriefPunishment >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerConfirmInfo*
Arena::CreateMaybeMessage< ::msg::PlayerConfirmInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerConfirmInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::AnswerData*
Arena::CreateMaybeMessage< ::msg::AnswerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::AnswerData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::VideoInfo*
Arena::CreateMaybeMessage< ::msg::VideoInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::VideoInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTAddictionInfo*
Arena::CreateMaybeMessage< ::msg::CSDTAddictionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTAddictionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::KrAddictionInfo*
Arena::CreateMaybeMessage< ::msg::KrAddictionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::KrAddictionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MultiPlayer*
Arena::CreateMaybeMessage< ::msg::MultiPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::MultiPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTBannerInfo*
Arena::CreateMaybeMessage< ::msg::CSDTBannerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTBannerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTBanner*
Arena::CreateMaybeMessage< ::msg::CSDTBanner >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTBanner >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTTournament_RankInfoEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTTournament_RankInfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTTournament_RankInfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTTournament_PointsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTTournament_PointsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTTournament_PointsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTTournament_RoundPointsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTTournament_RoundPointsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTTournament_RoundPointsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTTournament*
Arena::CreateMaybeMessage< ::msg::CSDTTournament >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTTournament >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActDaySign_SignDayEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTActDaySign_SignDayEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActDaySign_SignDayEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActDaySign*
Arena::CreateMaybeMessage< ::msg::CSDTActDaySign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActDaySign >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTActDaySignDetail*
Arena::CreateMaybeMessage< ::msg::CSDTActDaySignDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTActDaySignDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTGDCommonBin*
Arena::CreateMaybeMessage< ::msg::CSDTGDCommonBin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTGDCommonBin >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTTournamentClass_GroupsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTTournamentClass_GroupsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTTournamentClass_GroupsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTTournamentClass*
Arena::CreateMaybeMessage< ::msg::CSDTTournamentClass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTTournamentClass >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTBattleGroup_PlayersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTBattleGroup_PlayersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTBattleGroup_PlayersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTBattleGroup_GameIDsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTBattleGroup_GameIDsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTBattleGroup_GameIDsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTBattleGroup*
Arena::CreateMaybeMessage< ::msg::CSDTBattleGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTBattleGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTEnrollEnd*
Arena::CreateMaybeMessage< ::msg::CSDTEnrollEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTEnrollEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTNewTournament_ClassesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTNewTournament_ClassesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTNewTournament_ClassesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTNewTournament*
Arena::CreateMaybeMessage< ::msg::CSDTNewTournament >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTNewTournament >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TournamentDesc*
Arena::CreateMaybeMessage< ::msg::TournamentDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TournamentDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TournamentRoom*
Arena::CreateMaybeMessage< ::msg::TournamentRoom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TournamentRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerTournament_DataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PlayerTournament_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerTournament_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerTournament_PointsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PlayerTournament_PointsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerTournament_PointsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerTournament_EnrollCountEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PlayerTournament_EnrollCountEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerTournament_EnrollCountEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerTournament*
Arena::CreateMaybeMessage< ::msg::PlayerTournament >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerTournament >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerTournamentData_GetRewardEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PlayerTournamentData_GetRewardEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerTournamentData_GetRewardEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerTournamentData_PointsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PlayerTournamentData_PointsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerTournamentData_PointsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerTournamentData_DataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PlayerTournamentData_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerTournamentData_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerTournamentData*
Arena::CreateMaybeMessage< ::msg::PlayerTournamentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerTournamentData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::RoundData_PointsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::RoundData_PointsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::RoundData_PointsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::RoundData*
Arena::CreateMaybeMessage< ::msg::RoundData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::RoundData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GuildBaseInfo*
Arena::CreateMaybeMessage< ::msg::GuildBaseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GuildBaseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GuildAttr*
Arena::CreateMaybeMessage< ::msg::GuildAttr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GuildAttr >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GuildApplicant*
Arena::CreateMaybeMessage< ::msg::GuildApplicant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GuildApplicant >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GuildMember*
Arena::CreateMaybeMessage< ::msg::GuildMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GuildMember >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GuildExtraInfo*
Arena::CreateMaybeMessage< ::msg::GuildExtraInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GuildExtraInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GuildChatInfo*
Arena::CreateMaybeMessage< ::msg::GuildChatInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GuildChatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GuildLog_ParaEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::GuildLog_ParaEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GuildLog_ParaEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GuildLog*
Arena::CreateMaybeMessage< ::msg::GuildLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GuildLog >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GuildApplyInfo*
Arena::CreateMaybeMessage< ::msg::GuildApplyInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GuildApplyInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GuildPlayerRole*
Arena::CreateMaybeMessage< ::msg::GuildPlayerRole >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GuildPlayerRole >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ChestRecord*
Arena::CreateMaybeMessage< ::msg::ChestRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ChestRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TeamDesc*
Arena::CreateMaybeMessage< ::msg::TeamDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TeamDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTTaskItem*
Arena::CreateMaybeMessage< ::msg::CSDTTaskItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTTaskItem >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::OssPlayerData*
Arena::CreateMaybeMessage< ::msg::OssPlayerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::OssPlayerData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::BattleExtData_PlayersBetCurrencyNumEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::BattleExtData*
Arena::CreateMaybeMessage< ::msg::BattleExtData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::BattleExtData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PvpExtData*
Arena::CreateMaybeMessage< ::msg::PvpExtData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PvpExtData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerExtMap_AssistantMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PlayerExtMap_AssistantMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerExtMap_AssistantMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerExtMap_BattleTimeMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PlayerExtMap_BattleTimeMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerExtMap_BattleTimeMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerExtMap_PveBuffEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PlayerExtMap_PveBuffEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerExtMap_PveBuffEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerExtMap_MsRelationEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PlayerExtMap_MsRelationEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerExtMap_MsRelationEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerExtMap_PvpPlayerGroupEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PlayerExtMap_PvpPlayerGroupEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerExtMap_PvpPlayerGroupEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerExtMap*
Arena::CreateMaybeMessage< ::msg::PlayerExtMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerExtMap >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Buffs*
Arena::CreateMaybeMessage< ::msg::Buffs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Buffs >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ActivityGroup*
Arena::CreateMaybeMessage< ::msg::ActivityGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ActivityGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ScoredMap*
Arena::CreateMaybeMessage< ::msg::ScoredMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ScoredMap >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TransferEvent*
Arena::CreateMaybeMessage< ::msg::TransferEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TransferEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TransferOP*
Arena::CreateMaybeMessage< ::msg::TransferOP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TransferOP >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTBetData_BetFromPlayersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSDTBetData_BetFromPlayersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTBetData_BetFromPlayersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTBetData*
Arena::CreateMaybeMessage< ::msg::CSDTBetData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTBetData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MailExtData*
Arena::CreateMaybeMessage< ::msg::MailExtData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::MailExtData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ExtItem*
Arena::CreateMaybeMessage< ::msg::ExtItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ExtItem >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTTasks*
Arena::CreateMaybeMessage< ::msg::CSDTTasks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTTasks >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PvpTeachResult*
Arena::CreateMaybeMessage< ::msg::PvpTeachResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PvpTeachResult >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PvpBigWinnerData*
Arena::CreateMaybeMessage< ::msg::PvpBigWinnerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PvpBigWinnerData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PveExData_TalentEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PveExData_TalentEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PveExData_TalentEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PveExData*
Arena::CreateMaybeMessage< ::msg::PveExData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PveExData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ChampionInfo*
Arena::CreateMaybeMessage< ::msg::ChampionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ChampionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TopRank*
Arena::CreateMaybeMessage< ::msg::TopRank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TopRank >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ChampionInfoList*
Arena::CreateMaybeMessage< ::msg::ChampionInfoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ChampionInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TournamentHistory_ChampionHistoryEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::TournamentHistory_ChampionHistoryEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TournamentHistory_ChampionHistoryEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TournamentHistory_TopRankHistoryEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::TournamentHistory_TopRankHistoryEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TournamentHistory_TopRankHistoryEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TournamentHistory*
Arena::CreateMaybeMessage< ::msg::TournamentHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TournamentHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqLogin_AuthSDKCodeEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSReqLogin_AuthSDKCodeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqLogin_AuthSDKCodeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSReqLogin*
Arena::CreateMaybeMessage< ::msg::CSReqLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSReqLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Loc*
Arena::CreateMaybeMessage< ::msg::Loc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Loc >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Authority*
Arena::CreateMaybeMessage< ::msg::Authority >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Authority >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GetNumRank*
Arena::CreateMaybeMessage< ::msg::GetNumRank >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GetNumRank >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPassportCard*
Arena::CreateMaybeMessage< ::msg::CSDTPassportCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPassportCard >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PveDataInfo_DataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PveDataInfo_DataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PveDataInfo_DataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PveDataInfo*
Arena::CreateMaybeMessage< ::msg::PveDataInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PveDataInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Pve_ChessIdsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::Pve_ChessIdsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Pve_ChessIdsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Pve_SkillsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::Pve_SkillsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Pve_SkillsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Pve_BuffEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::Pve_BuffEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Pve_BuffEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Pve*
Arena::CreateMaybeMessage< ::msg::Pve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Pve >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PveBuff*
Arena::CreateMaybeMessage< ::msg::PveBuff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PveBuff >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CardGroupData*
Arena::CreateMaybeMessage< ::msg::CardGroupData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CardGroupData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CardGroupChess*
Arena::CreateMaybeMessage< ::msg::CardGroupChess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CardGroupChess >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::ChessIds*
Arena::CreateMaybeMessage< ::msg::ChessIds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::ChessIds >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PveConsume*
Arena::CreateMaybeMessage< ::msg::PveConsume >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PveConsume >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PveSetting*
Arena::CreateMaybeMessage< ::msg::PveSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PveSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerTeamInfo*
Arena::CreateMaybeMessage< ::msg::PlayerTeamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerTeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PveRankRedisInfo*
Arena::CreateMaybeMessage< ::msg::PveRankRedisInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PveRankRedisInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTPlayerPvpData*
Arena::CreateMaybeMessage< ::msg::CSDTPlayerPvpData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTPlayerPvpData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::GmBan*
Arena::CreateMaybeMessage< ::msg::GmBan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::GmBan >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MentorInviteMsg*
Arena::CreateMaybeMessage< ::msg::MentorInviteMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::MentorInviteMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MentorInfo_TasksEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::MentorInfo_TasksEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::MentorInfo_TasksEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::MentorInfo*
Arena::CreateMaybeMessage< ::msg::MentorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::MentorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Pupil_TasksEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::Pupil_TasksEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Pupil_TasksEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::Pupil*
Arena::CreateMaybeMessage< ::msg::Pupil >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::Pupil >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDUnUse*
Arena::CreateMaybeMessage< ::msg::TDUnUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDUnUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDItemId*
Arena::CreateMaybeMessage< ::msg::TDItemId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDItemId >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDItem_EquipmentsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::TDItem_EquipmentsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDItem_EquipmentsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::TDItem*
Arena::CreateMaybeMessage< ::msg::TDItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::TDItem >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::AddRecommendData*
Arena::CreateMaybeMessage< ::msg::AddRecommendData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::AddRecommendData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerMentorShipInfo_TasksEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::PlayerMentorShipInfo_TasksEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerMentorShipInfo_TasksEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerMentorShipInfo*
Arena::CreateMaybeMessage< ::msg::PlayerMentorShipInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerMentorShipInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTMentorRecommendPlayer*
Arena::CreateMaybeMessage< ::msg::CSDTMentorRecommendPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTMentorRecommendPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PFDTTaskDetail*
Arena::CreateMaybeMessage< ::msg::PFDTTaskDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PFDTTaskDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSDTMentorInfo*
Arena::CreateMaybeMessage< ::msg::CSDTMentorInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSDTMentorInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::OBPassThroughData*
Arena::CreateMaybeMessage< ::msg::OBPassThroughData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::OBPassThroughData >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::HistoryMaxCupMmr*
Arena::CreateMaybeMessage< ::msg::HistoryMaxCupMmr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::HistoryMaxCupMmr >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfPvpChat_ShowItemsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::msg::CSNtfPvpChat_ShowItemsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfPvpChat_ShowItemsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::CSNtfPvpChat*
Arena::CreateMaybeMessage< ::msg::CSNtfPvpChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::CSNtfPvpChat >(arena);
}
template<> PROTOBUF_NOINLINE ::msg::PlayerObServerInfo*
Arena::CreateMaybeMessage< ::msg::PlayerObServerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg::PlayerObServerInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
