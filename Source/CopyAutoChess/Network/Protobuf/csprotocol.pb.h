#if PLATFORM_WINDOWS
#pragma warning(disable:4100)
#pragma warning(disable:4125)
#pragma warning(disable:4267)
#pragma warning(disable:4668)
#pragma warning(disable:4800)
#pragma warning(disable:4456)
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csprotocol.proto

#if PLATFORM_WINDOWS
#pragma warning(disable:4125)
#pragma warning(disable:4668)
#endif
#ifndef GOOGLE_PROTOBUF_INCLUDED_csprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_csprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "result.pb.h"
#include "battle.pb.h"
#include "csprotocolstruct.pb.h"
#include "towerdefense.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_csprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_csprotocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_csprotocol_2eproto;
namespace msg {
class CSHead;
struct CSHeadDefaultTypeInternal;
extern CSHeadDefaultTypeInternal _CSHead_default_instance_;
class CSNtfBody;
struct CSNtfBodyDefaultTypeInternal;
extern CSNtfBodyDefaultTypeInternal _CSNtfBody_default_instance_;
class CSReqBody;
struct CSReqBodyDefaultTypeInternal;
extern CSReqBodyDefaultTypeInternal _CSReqBody_default_instance_;
class CSRspBody;
struct CSRspBodyDefaultTypeInternal;
extern CSRspBodyDefaultTypeInternal _CSRspBody_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::CSHead* Arena::CreateMaybeMessage<::msg::CSHead>(Arena*);
template<> ::msg::CSNtfBody* Arena::CreateMaybeMessage<::msg::CSNtfBody>(Arena*);
template<> ::msg::CSReqBody* Arena::CreateMaybeMessage<::msg::CSReqBody>(Arena*);
template<> ::msg::CSRspBody* Arena::CreateMaybeMessage<::msg::CSRspBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum CSMsgID : int {
  CS_REQ_BEGIN = 0,
  REQ_HEART = 1,
  REQ_LOGIN = 2,
  REQ_VERSION_CHECK = 3,
  REQ_RESOURCE_VERSION_CHECK = 4,
  REQ_APPLY_HALL_SERVER = 5,
  REQ_GET_NUM_RANK = 6,
  REQ_WORLD_CHAT = 7,
  REQ_PLAYERS_BASE_INFO = 8,
  REQ_PLAYER_DETAIL_INFO = 9,
  REQ_READ_MAIL = 10,
  REQ_GET_MAIL_AWARD = 11,
  REQ_BUY_EGG = 12,
  REQ_USERNAME_SET = 13,
  REQ_USERNAME_RANDOM = 14,
  REQ_HEADPIC_SET = 15,
  REQ_PVP = 16,
  REQ_PVP_MATCH_CANCEL = 17,
  REQ_DRESS_CHESS_PLAYER = 18,
  REQ_DRESS_SCENE = 19,
  REQ_PVP_LOGIN = 20,
  REQ_PVP_SEQS = 21,
  REQ_PVP_PLAYER_READY = 22,
  REQ_PVP_CLIENT_READY = 23,
  REQ_REP_PVP_ACTION = 24,
  REQ_PVP_END = 25,
  REQ_PLAYER_FINISH = 26,
  REQ_PLAYER_QUIT = 27,
  REQ_SELL_ITEM = 28,
  REQ_GET_EVAL_AWARD = 29,
  REQ_USE_CHESS_PLAYER = 30,
  REQ_GUID_REPORT = 31,
  REQ_GET_CODE_AWARD = 32,
  REQ_ROUND_REPORT = 33,
  REQ_LOADING_PROGRESS = 34,
  REQ_PVP_CHAT = 35,
  REQ_CHESS_COMBINE = 36,
  REQ_EXPOSE = 37,
  REQ_APPLY_ORDER_ID = 38,
  REQ_REPORT_ORDER_INFO = 39,
  REQ_SET_ITEM = 40,
  REQ_UNSET_ITEM = 41,
  REQ_RANDOM_ITEM = 42,
  REQ_CHAT = 43,
  REQ_SET_CHESS_PLAYER = 44,
  REQ_UNSET_CHESS_PLAYER = 45,
  REQ_GET_FANS_LIST = 46,
  REQ_FOLLOW_PLAYER = 47,
  REQ_UNFOLLOW_PLAYER = 48,
  REQ_PLAYERS_STATUS_INFO = 49,
  REQ_INVITE_JOIN_TEAM = 50,
  REQ_JOIN_TEAM = 51,
  REQ_LEAVE_TEAM = 52,
  REQ_KICKOFF_TEAM_PLAYER = 53,
  REQ_TEAM_MSG = 54,
  REQ_TEAM_READY = 55,
  REQ_REJECT_JOIN_TEAM = 56,
  REQ_REPORT_PAY_RESPONSE = 57,
  REQ_SHIELD_CHAT = 58,
  REQ_BUY_PASSPORT_LEVEL = 59,
  REQ_UPGRADE_PASSPORT = 60,
  REQ_GET_PASSPORT_LEVEL_AWARD = 61,
  REQ_GET_PASSPORT_TASK_AWARD = 62,
  REQ_TEL_BOOK = 63,
  REQ_ACTIVATE_PASSPORT = 64,
  REQ_RANKSEASON_EVAL = 65,
  REQ_BIND_ACCOUNT = 66,
  REQ_INCREASE_AD_SHOW_COUNT = 67,
  REQ_USE_BONUS_CARD = 68,
  REQ_GET_SEASON_AWARD = 69,
  REQ_GET_ALPHA_ACTIVITY_AWARD = 70,
  REQ_GET_LANGUAGE_DATA = 71,
  REQ_GET_ACTIVITY_AWARD = 72,
  REQ_GET_ACTIVITY_DATA = 73,
  REQ_SEND_SMS = 74,
  REQ_GET_MELEE_AWARD = 75,
  REQ_ADD_AI_TO_TEAM = 76,
  REQ_SHARE = 77,
  REQ_SKIP_INTERFACE = 78,
  REQ_TEAM_GAME = 79,
  REQ_SET_TEAM_MODE = 80,
  REQ_SET_HITORY_PVP_SHOW_PERMISSION = 81,
  REQ_SEARCH_TEAM = 82,
  REQ_APPLY_CHAT = 83,
  REQ_CHAT_LOGIN = 84,
  REQ_PROBE_NET_DELAY = 85,
  REQ_GET_EGGS = 86,
  REQ_BUY_GOODS = 87,
  REQ_EXCHANGE_PASSPORT_GOODS = 88,
  REQ_USE_PASSPORT_TASK_CARD = 89,
  REQ_OPEN_RAND_CHEST = 90,
  REQ_EGG_LOTTERY = 91,
  REQ_QUERY_DIAMOND_BALANCE = 92,
  REQ_USE_ITEM = 93,
  REQ_USE_EXPERIENCE_CARD = 94,
  REQ_RAND_TARGET_ITEM = 95,
  REQ_ADD_BLACKLIST = 96,
  REQ_REMOVE_BLACKLIST = 97,
  REQ_REPORT_PLAYER_BIRTH = 98,
  REQ_REPORT_INFO_INPUT = 99,
  REQ_SEND_VERIFICATION_CODE = 100,
  REQ_BIND_PHONE_NUMBER = 101,
  REQ_WORLD_INVITE = 102,
  REQ_REMOVE_EXPIRE_ITEM = 103,
  REQ_GET_MALL_GOODS = 104,
  REQ_BUY_MALL_GOODS = 105,
  REQ_BIND_SHARING_CODE = 106,
  REQ_WX_BLESS_BAG = 107,
  REQ_UPDATE_FRIENDS_INGAME = 108,
  REQ_SHARE_REWARD = 109,
  REQ_ALLFIGHT_INFO = 110,
  REQ_GET_OLD_PLAYER = 111,
  REQ_BIND_OLD_PLAYER = 112,
  REQ_SEND_VERIFICATION_CODE_WITH_CHECK_REDIS = 113,
  REQ_REPORT_SETTING = 114,
  REQ_ANTI_DATA = 115,
  REQ_TLOG_DATA = 116,
  REQ_DAY_SIGN = 117,
  REQ_DAY_FIT_AVOID = 118,
  REQ_SHARE_COUNT_AWARD = 119,
  REQ_ACT_ITEM_EXCH = 120,
  REQ_REALATION_STAR = 121,
  REQ_GET_REALATION_STAR_INVITE_SUCC = 122,
  REQ_GET_REALATION_STAR = 123,
  REQ_GET_ACT_RECORD = 124,
  REQ_JOIN_VOICE_TEAM = 125,
  REQ_JOIN_VOICE_PVP = 126,
  REQ_JOIN_VOICE_CAMP = 127,
  REQ_USERCOUNTRY_SET = 128,
  REQ_OFFLINE_INVITE_JOINTEAM = 129,
  REQ_OBSERVE = 130,
  REQ_GET_RECOMMEND_PVP = 131,
  REQ_OBSERVE_LOGIN = 132,
  REQ_QUIT_OBSERVE = 133,
  REQ_GET_OBSERVE_INFO = 134,
  REQ_FREE_FLOW = 135,
  REQ_SET_PUSH_TOKEN = 136,
  REQ_TLOG_EVENT = 137,
  REQ_WXVVIP_AWARD = 138,
  REQ_GET_RELATIONSTAR_WX = 139,
  REQ_WX_REDPKT_SEND = 140,
  REQ_WX_REDPKT_RECV = 141,
  REQ_WX_REDPKT_LIKE = 142,
  REQ_WX_REDPKT_RANK = 143,
  REQ_OBSERVE_PRIVILEGE_SET = 144,
  REQ_PRESET_FAST_CHAT = 145,
  REQ_CHANGE_SLOT_TEAM = 146,
  REQ_CHANGE_SUB_MODE_TEAM = 147,
  REQ_CONFIRM_CHANGE_SLOT_TEAM = 148,
  REQ_PVP_ROUND_END = 149,
  REQ_OBSERVE_CHAT_LOGIN = 150,
  REQ_PVP_CONFIRM = 151,
  REQ_ACTIVITY_PIC_SHARE = 152,
  REQ_BIND_OLD_BUSINESS_PLAYER = 153,
  REQ_TRANSLATE = 154,
  REQ_SUBMIT_QUESTIONNAIRE = 155,
  REQ_CANCEL_CHANGESLOT = 156,
  REQ_SET_CHESS_SKIN = 157,
  REQ_UNSET_CHESS_SKIN = 158,
  REQ_COMPOSE = 159,
  REQ_VIDEO = 160,
  REQ_OFF_HELP_REDDOT = 161,
  REQ_CHANGE_LANGUAGE = 162,
  REQ_REPORT_VIDEO_PLAY = 163,
  REQ_SET_PROVINCE = 164,
  REQ_LONGYUAN_VOICE = 165,
  REQ_TOURNAMENT_ENROLL = 166,
  REQ_JOIN_TOURNAMENT_ROOM = 167,
  REQ_TOURNAMENT_POINT_AWARD = 168,
  REQ_DEAL_WEB_MAIL = 169,
  REQ_GET_ENROLL_PLAYERS = 170,
  REQ_CHALLENGE_AGAIN = 171,
  REQ_SET_FRIEND_INVISIABLE = 172,
  REQ_GET_OBSERVE_TASK_AWARD = 173,
  REQ_INVITE_OBSERVE = 174,
  REQ_REJECT_OBSERVE = 175,
  REQ_GET_TX_PLAYER = 176,
  REQ_CHOOSE_TX_PLAYER = 177,
  REQ_THIRD_PVP_INFO = 178,
  REQ_MARK_PLAYER_GUIDE = 179,
  REQ_MARK_CHESS_SKIN_CLICKED = 180,
  REQ_RECRUIT_INVITE_PLAYER = 181,
  REQ_RECRUIT_BIND_INVITER = 182,
  REQ_QUERY_PS4_ENTITLEMENTS = 183,
  REQ_ACT_DAYSIGN = 184,
  REQ_HAVE_THIRD_PVP = 185,
  REQ_ACTIVITY_MALL = 186,
  REQ_PSONLY = 187,
  REQ_CHANGE_CHANNEL_TYPE = 188,
  REQ_CUSTOM_CARD_OPT = 189,
  REQ_STATISTICS_REPORT = 190,
  REQ_CHAMPION_HISTORY = 191,
  REQ_TOURNAMENT_LAST_TOP_RANK = 192,
  REQ_BIGWINNER_EXPANDMATCH = 193,
  REQ_BIGWINNER_DAILYAWARD = 194,
  REQ_BIGWINNER_SCOREHISITORY = 195,
  REQ_SMELT_ITEM = 196,
  REQ_OAUTH_APP = 200,
  REQ_TEAM_OP = 300,
  REQ_OB_TEAM_INFO = 301,
  REQ_REPORT_HEADICONURL = 302,
  REQ_GET_PVP_SERVER_GROUP = 303,
  REQ_REPORT_PVP_INFO = 304,
  REQ_CHOOSE_PLAYER = 305,
  REQ_PING_TEST = 306,
  REQ_REPORT_REGION_INFO = 307,
  REQ_RECALLEDPLAYER = 308,
  REQ_WEB_LOGIN = 309,
  REQ_INVITECODERESET = 310,
  REQ_RECALLREWARD = 311,
  REQ_SWITCHTO_COMMONMATCH = 312,
  REQ_SWITCH_MODE_IN_TEAM = 320,
  REQ_GET_TNROOM_STATE = 321,
  REQ_WORKSHOP_MATCH = 330,
  REQ_BUY_WORKSHOP_TICKET = 331,
  REQ_FAVOURITE_WORKSHOP_MAP = 332,
  REQ_SHORTCUT_MAPS_OP = 333,
  REQ_PLAYERS_Tournament_INFO = 334,
  REQ_SCORE_WORKSHOP_MAP = 335,
  REQ_MAPS_VISITEDBY_FRIENDS = 336,
  REQ_VERIFY_REAL_NAME = 350,
  REQ_FAKE_PAY = 351,
  REQ_GUILD_CREATE = 360,
  REQ_GUILD_APPLY = 361,
  REQ_GUILD_HOME = 362,
  REQ_GUILD_INFO = 364,
  REQ_GUILD_APPROVE = 365,
  REQ_GUILD_SET_ROLE = 366,
  REQ_GUILD_MODIFY = 367,
  REQ_GUILD_KICKOFF = 368,
  REQ_GUILD_DISMISS = 369,
  REQ_GUILD_EXIT = 370,
  REQ_GUILD_CHAT = 371,
  REQ_GUILD_LIST = 372,
  REQ_GUILD_RECOMMEND_PLAYER = 373,
  REQ_GUILD_RESIGN = 374,
  REQ_GUILD_INVITE = 375,
  REQ_GUILD_INVITE_LIST = 376,
  REQ_GUILD_REJECT_INVITE = 377,
  REQ_VNG_COMMENT_AWARD = 390,
  REQ_LEVEL_UP_CHEST = 391,
  REQ_WATCH_AD = 392,
  REQ_QUERY_PS_TOURNAMENT_ROOM = 393,
  REQ_GET_AD_CUMULATE_AWARD = 394,
  REQ_CHANNEL_CHAT = 395,
  REQ_APPLY_CHANNEL_CHAT = 396,
  REQ_LEAVE_CHANNEL_CHAT = 397,
  REQ_SET_MSGR_POS = 500,
  REQ_CANCEL_RECONNECT = 520,
  REQ_RECONNECT = 522,
  REQ_PASS_THROUGH = 529,
  REQ_VISIT_PLAYER = 530,
  REQ_LEAVE_GAME_EARLY = 531,
  REQ_GDCOMMON_BIN = 532,
  REQ_GDCOMMONBIN_DATA = 533,
  REQ_HISTORY_CHAT_MSG = 534,
  REQ_BATTLE_CAMPRESULT = 535,
  REQ_AUTO_BATTLE_OP = 536,
  REQ_RESTRICT_USER = 537,
  REQ_EQUIP_SELECT_RATE = 538,
  REQ_REPORT_ABSENT = 539,
  REQ_RECOMMEND_WEEK = 600,
  REQ_RECOMMEND_OFFICIAL = 601,
  REQ_RECOMMEND_LATEST = 602,
  REQ_RECOMMEND_HISTORY = 603,
  REQ_RECOMMEND_COLLECT = 604,
  REQ_RECOMMEND_SET = 605,
  REQ_RECOMMEND_GETCOLLECTION = 606,
  REQ_RECOMMEND_EQUIP = 607,
  REQ_LOGIN_CANCEL = 608,
  REQ_CONVERT_DEBRIS = 609,
  REQ_USE_PROTECTION_CARD = 610,
  REQ_USE_PASSPORT_CARD = 611,
  REQ_SET_MEDAL = 612,
  REQ_UNSET_MEDAL = 613,
  REQ_PLAYER_MEDALS = 614,
  REQ_UPDATE_HOT_DOT = 616,
  REQ_QUERY_HOT_DOT = 617,
  REQ_SET_CACHE = 618,
  REQ_GET_CACHE = 619,
  REQ_BUY_CHALLENGE_COUNT = 620,
  REQ_GET_PVE_RANK = 621,
  REQ_AUTH_ACCOUNT = 622,
  REQ_UNBIND_ACCOUNT = 623,
  REQ_BAGTOITEM = 624,
  REQ_IDENTIFY_ITEM = 625,
  REQ_INSERT_ITEM_AFFIX = 626,
  REQ_UNSET_ITEM_AFFIX = 627,
  REQ_SET_DEFAULT_ATTRIBUTES = 628,
  REQ_CHECK_CANCEL = 629,
  REQ_CANCEL_ACCOUNT = 630,
  REQ_PVE_UP_TALENT_LEVEL = 631,
  REQ_PVE_LUCKY_AWARD = 632,
  REQ_GET_SELF_NUM_RANK_DATA = 633,
  REQ_UPDATE_CARD_GROUP = 634,
  REQ_UPDATE_CARD_GROUP_NAME = 635,
  REQ_BUY_PVE_BUFF = 636,
  REQ_SET_CARD_GROUP = 637,
  REQ_BUY_PVE_CHESS_TEMPLATE = 638,
  REQ_PVE_UNLOCK_CHESS_TEMPLATE = 639,
  REQ_PVE_SET_TEAM_DEBUFF = 640,
  REQ_CHOSE_CARD_GROUP = 641,
  REQ_REMOVE_OVERTIME_BUFF = 642,
  REQ_UPDATE_NEW_CARD_GROUP_SIGN = 643,
  REQ_TD_GET_ONHOOK_AWARD = 644,
  REQ_TD_DRAW = 645,
  REQ_TD_BUY_CARD = 646,
  REQ_TD_SET_CARD_GROUP = 647,
  REQ_TD_LEVEL_UP = 648,
  REQ_TD_EQUIP = 649,
  REQ_MENTOR_UPDATE_SETTING = 650,
  REQ_MENTOR_INVITE = 651,
  REQ_MENTOR_CONFIRM_INVITE = 652,
  REQ_MENTOR_RECOMMEND_LIST = 653,
  REQ_MENTOR_GET_TASK_AWARD = 654,
  REQ_MENTOR_GRADUATE = 655,
  REQ_MENTOR_RELIEVE_RELATION = 656,
  REQ_GET_MENTOR_INFO = 657,
  REQ_MENTOR_GET_INVITE_MSG = 658,
  REQ_UPDATE_CARD_GROUP_BETTER = 659,
  REQ_UPDATE_CARD_GROUP_SETTING = 660,
  REQ_SET_AUCTION_NAME = 661,
  REQ_SET_AUCTION_REMARK = 662,
  REQ_GET_BALANCE = 663,
  REQ_RECHARGE_BALANCE = 664,
  REQ_WITHDRAW_BALANCE = 665,
  REQ_PERSONAL_RECOMMEND_MALL = 666,
  REQ_GET_MEDAL_CHEST_AWARD = 667,
  REQ_SET_ITEM_AUTO_USE = 668,
  CS_RSP_BEGIN = 1000,
  RSP_HEART = 1001,
  RSP_LOGIN = 1002,
  RSP_VERSION_CHECK = 1003,
  RSP_RESOURCE_VERSION_CHECK = 1004,
  RSP_APPLY_HALL_SERVER = 1005,
  RSP_GET_NUM_RANK = 1006,
  RSP_WORLD_CHAT = 1007,
  RSP_PLAYERS_BASE_INFO = 1008,
  RSP_PLAYER_DETAIL_INFO = 1009,
  RSP_READ_MAIL = 1010,
  RSP_GET_MAIL_AWARD = 1011,
  RSP_BUY_EGG = 1012,
  RSP_USERNAME_SET = 1013,
  RSP_USERNAME_RANDOM = 1014,
  RSP_HEADPIC_SET = 1015,
  RSP_PVP = 1016,
  RSP_PVP_MATCH_CANCEL = 1017,
  RSP_DRESS_CHESS_PLAYER = 1018,
  RSP_DRESS_SCENE = 1019,
  RSP_PVP_LOGIN = 1020,
  RSP_PVP_SEQS = 1021,
  RSP_PVP_PLAYER_READY = 1022,
  RSP_PVP_CLIENT_READY = 1023,
  RSP_REP_PVP_ACTION = 1024,
  RSP_PVP_END = 1025,
  RSP_PLAYER_FINISH = 1026,
  RSP_PLAYER_QUIT = 1027,
  RSP_SELL_ITEM = 1028,
  RSP_GET_EVAL_AWARD = 1029,
  RSP_USE_CHESS_PLAYER = 1030,
  RSP_GUID_REPORT = 1031,
  RSP_GET_CODE_AWARD = 1032,
  RSP_ROUND_REPORT = 1033,
  RSP_LOADING_PROGRESS = 1034,
  RSP_PVP_CHAT = 1035,
  RSP_CHESS_COMBINE = 1036,
  RSP_EXPOSE = 1037,
  RSP_APPLY_ORDER_ID = 1038,
  RSP_REPORT_ORDER_INFO = 1039,
  RSP_SET_ITEM = 1040,
  RSP_UNSET_ITEM = 1041,
  RSP_RANDOM_ITEM = 1042,
  RSP_CHAT = 1043,
  RSP_SET_CHESS_PLAYER = 1044,
  RSP_UNSET_CHESS_PLAYER = 1045,
  RSP_GET_FANS_LIST = 1046,
  RSP_FOLLOW_PLAYER = 1047,
  RSP_UNFOLLOW_PLAYER = 1048,
  RSP_PLAYERS_STATUS_INFO = 1049,
  RSP_INVITE_JOIN_TEAM = 1050,
  RSP_JOIN_TEAM = 1051,
  RSP_LEAVE_TEAM = 1052,
  RSP_KICKOFF_TEAM_PLAYER = 1053,
  RSP_TEAM_MSG = 1054,
  RSP_TEAM_READY = 1055,
  RSP_REJECT_JOIN_TEAM = 1056,
  RSP_REPORT_PAY_RESPONSE = 1057,
  RSP_SHIELD_CHAT = 1058,
  RSP_BUY_PASSPORT_LEVEL = 1059,
  RSP_UPGRADE_PASSPORT = 1060,
  RSP_GET_PASSPORT_LEVEL_AWARD = 1061,
  RSP_GET_PASSPORT_TASK_AWARD = 1062,
  RSP_TEL_BOOK = 1063,
  RSP_ACTIVATE_PASSPORT = 1064,
  RSP_RANKSEASON_EVAL = 1065,
  RSP_BIND_ACCOUNT = 1066,
  RSP_INCREASE_AD_SHOW_COUNT = 1067,
  RSP_USE_BONUS_CARD = 1068,
  RSP_GET_SEASON_AWARD = 1069,
  RSP_GET_ALPHA_ACTIVITY_AWARD = 1070,
  RSP_GET_LANGUAGE_DATA = 1071,
  RSP_GET_ACTIVITY_AWARD = 1072,
  RSP_GET_ACTIVITY_DATA = 1073,
  RSP_SEND_SMS = 1074,
  RSP_GET_MELEE_AWARD = 1075,
  RSP_ADD_AI_TO_TEAM = 1076,
  RSP_SHARE = 1077,
  RSP_SKIP_INTERFACE = 1078,
  RSP_TEAM_GAME = 1079,
  RSP_SET_TEAM_MODE = 1080,
  RSP_SET_HITORY_PVP_SHOW_PERMISSION = 1081,
  RSP_SEARCH_TEAM = 1082,
  RSP_APPLY_CHAT = 1083,
  RSP_CHAT_LOGIN = 1084,
  RSP_PROBE_NET_DELAY = 1085,
  RSP_GET_EGGS = 1086,
  RSP_BUY_GOODS = 1087,
  RSP_EXCHANGE_PASSPORT_GOODS = 1088,
  RSP_USE_PASSPORT_TASK_CARD = 1089,
  RSP_OPEN_RAND_CHEST = 1090,
  RSP_EGG_LOTTERY = 1091,
  RSP_QUERY_DIAMOND_BALANCE = 1092,
  RSP_USE_ITEM = 1093,
  RSP_USE_EXPERIENCE_CARD = 1094,
  RSP_RAND_TARGET_ITEM = 1095,
  RSP_ADD_BLACKLIST = 1096,
  RSP_REMOVE_BLACKLIST = 1097,
  RSP_REPORT_PLAYER_BIRTH = 1098,
  RSP_REPORT_INFO_INPUT = 1099,
  RSP_SEND_VERIFICATION_CODE = 1100,
  RSP_BIND_PHONE_NUMBER = 1101,
  RSP_WORLD_INVITE = 1102,
  RSP_REMOVE_EXPIRE_ITEM = 1103,
  RSP_GET_MALL_GOODS = 1104,
  RSP_BUY_MALL_GOODS = 1105,
  RSP_BIND_SHARING_CODE = 1106,
  RSP_WX_BLESS_BAG = 1107,
  RSP_UPDATE_FRIENDS_INGAME = 1108,
  RSP_SHARE_REWARD = 1109,
  RSP_ALLFIGHT_INFO = 1110,
  RSP_GET_OLD_PLAYER = 1111,
  RSP_BIND_OLD_PLAYER = 1112,
  RSP_SEND_VERIFICATION_CODE_WITH_CHECK_REDIS = 1113,
  RSP_REPORT_SETTING = 1114,
  RSP_ANTI_DATA = 1115,
  RSP_TLOG_DATA = 1116,
  RSP_DAY_SIGN = 1117,
  RSP_DAY_FIT_AVOID = 1118,
  RSP_SHARE_COUNT_AWARD = 1119,
  RSP_ACT_ITEM_EXCH = 1120,
  RSP_REALATION_STAR = 1121,
  RSP_GET_REALATION_STAR_INVITE_SUCC = 1122,
  RSP_GET_REALATION_STAR = 1123,
  RSP_GET_ACT_RECORD = 1124,
  RSP_JOIN_VOICE_TEAM = 1125,
  RSP_JOIN_VOICE_PVP = 1126,
  RSP_JOIN_VOICE_CAMP = 1127,
  RSP_USERCOUNTRY_SET = 1128,
  RSP_OFFLINE_INVITE_JOINTEAM = 1129,
  RSP_OBSERVE = 1130,
  RSP_GET_RECOMMEND_PVP = 1131,
  RSP_OBSERVE_LOGIN = 1132,
  RSP_QUIT_OBSERVE = 1133,
  RSP_GET_OBSERVE_INFO = 1134,
  RSP_FREE_FLOW = 1135,
  RSP_SET_PUSH_TOKEN = 1136,
  RSP_TLOG_EVENT = 1137,
  RSP_WXVVIP_AWARD = 1138,
  RSP_GET_RELATIONSTAR_WX = 1139,
  RSP_WX_REDPKT_SEND = 1140,
  RSP_WX_REDPKT_RECV = 1141,
  RSP_WX_REDPKT_LIKE = 1142,
  RSP_WX_REDPKT_RANK = 1143,
  RSP_OBSERVE_PRIVILEGE_SET = 1144,
  RSP_PRESET_FAST_CHAT = 1145,
  RSP_CHANGE_SLOT_TEAM = 1146,
  RSP_CHANGE_SUB_MODE_TEAM = 1147,
  RSP_CONFIRM_CHANGE_SLOT_TEAM = 1148,
  RSP_PVP_ROUND_END = 1149,
  RSP_OBSERVE_CHAT_LOGIN = 1150,
  RSP_PVP_CONFIRM = 1151,
  RSP_ACTIVITY_PIC_SHARE = 1152,
  RSP_BIND_OLD_BUSINESS_PLAYER = 1153,
  RSP_TRANSLATE = 1154,
  RSP_SUBMIT_QUESTIONNAIRE = 1155,
  RSP_CANCEL_CHANGESLOT = 1156,
  RSP_SET_CHESS_SKIN = 1157,
  RSP_UNSET_CHESS_SKIN = 1158,
  RSP_COMPOSE = 1159,
  RSP_VIDEO = 1160,
  RSP_OFF_HELP_REDDOT = 1161,
  RSP_CHANGE_LANGUAGE = 1162,
  RSP_REPORT_VIDEO_PLAY = 1163,
  RSP_SET_PROVINCE = 1164,
  RSP_LONGYUAN_VOICE = 1165,
  RSP_TOURNAMENT_ENROLL = 1166,
  RSP_JOIN_TOURNAMENT_ROOM = 1167,
  RSP_TOURNAMENT_POINT_AWARD = 1168,
  RSP_DEAL_WEB_MAIL = 1169,
  RSP_GET_ENROLL_PLAYERS = 1170,
  RSP_CHALLENGE_AGAIN = 1171,
  RSP_SET_FRIEND_INVISIABLE = 1172,
  RSP_GET_OBSERVE_TASK_AWARD = 1173,
  RSP_INVITE_OBSERVE = 1174,
  RSP_REJECT_OBSERVE = 1175,
  RSP_GET_TX_PLAYER = 1176,
  RSP_CHOOSE_TX_PLAYER = 1177,
  RSP_THIRD_PVP_INFO = 1178,
  RSP_MARK_PLAYER_GUIDE = 1179,
  RSP_MARK_CHESS_SKIN_CLICKED = 1180,
  RSP_RECRUIT_INVITE_PLAYER = 1181,
  RSP_RECRUIT_BIND_INVITER = 1182,
  RSP_QUERY_PS4_ENTITLEMENTS = 1183,
  RSP_ACT_DAYSIGN = 1184,
  RSP_HAVE_THIRD_PVP = 1185,
  RSP_ACTIVITY_MALL = 1186,
  RSP_PSONLY = 1187,
  RSP_CHANGE_CHANNEL_TYPE = 1188,
  RSP_CUSTOM_CARD_OPT = 1189,
  RSP_STATISTICS_REPORT = 1190,
  RSP_CHAMPION_HISTORY = 1191,
  RSP_TOURNAMENT_LAST_TOP_RANK = 1192,
  RSP_BIGWINNER_EXPANDMATCH = 1193,
  RSP_BIGWINNER_DAILYAWARD = 1194,
  RSP_BIGWINNER_SCOREHISITORY = 1195,
  RSP_SMELT_ITEM = 1196,
  RSP_OAUTH_APP = 1200,
  RSP_TEAM_OP = 1300,
  RSP_OB_TEAM_INFO = 1301,
  RSP_GET_PVP_SERVER_GROUP = 1303,
  RSP_REPORT_PVP_INFO = 1304,
  RSP_CHOOSE_PLAYER = 1305,
  RSP_PING_TEST = 1306,
  RSP_REPORT_REGION_INFO = 1307,
  RSP_RECALLEDPLAYER = 1308,
  RSP_WEB_LOGIN = 1309,
  RSP_INVITECODERESET = 1310,
  RSP_RECALLREWARD = 1311,
  RSP_SWITCHTO_COMMONMATCH = 1312,
  RSP_SWITCH_MODE_IN_TEAM = 1320,
  RSP_GET_TNROOM_STATE = 1321,
  RSP_WORKSHOP_MATCH = 1330,
  RSP_BUY_WORKSHOP_TICKET = 1331,
  RSP_FAVOURITE_WORKSHOP_MAP = 1332,
  RSP_SHORTCUT_MAPS_OP = 1333,
  RSP_PLAYERS_Tournament_INFO = 1334,
  RSP_SCORE_WORKSHOP_MAP = 1335,
  RSP_MAPS_VISITEDBY_FRIENDS = 1336,
  RSP_VERIFY_REAL_NAME = 1350,
  RSP_FAKE_PAY = 1351,
  RSP_GUILD_CREATE = 1360,
  RSP_GUILD_APPLY = 1361,
  RSP_GUILD_HOME = 1362,
  RSP_GUILD_APPLY_LIST = 1363,
  RSP_GUILD_INFO = 1364,
  RSP_GUILD_APPROVE = 1365,
  RSP_GUILD_SET_ROLE = 1366,
  RSP_GUILD_MODIFY = 1367,
  RSP_GUILD_KICKOFF = 1368,
  RSP_GUILD_DISMISS = 1369,
  RSP_GUILD_EXIT = 1370,
  RSP_GUILD_CHAT = 1371,
  RSP_GUILD_LIST = 1372,
  RSP_GUILD_RECOMMEND_PLAYER = 1373,
  RSP_GUILD_RESIGN = 1374,
  RSP_GUILD_INVITE = 1375,
  RSP_GUILD_INVITE_LIST = 1376,
  RSP_GUILD_LOG = 1377,
  RSP_GUILD_REJECT_INVITE = 1378,
  RSP_VNG_COMMENT_AWARD = 1390,
  RSP_LEVEL_UP_CHEST = 1391,
  RSP_WATCH_AD = 1392,
  RSP_QUERY_PS_TOURNAMENT_ROOM = 1393,
  RSP_GET_AD_CUMULATE_AWARD = 1394,
  RSP_CHANNEL_CHAT = 1395,
  RSP_APPLY_CHANNEL_CHAT = 1396,
  RSP_LEAVE_CHANNEL_CHAT = 1397,
  RSP_SET_MSGR_POS = 1500,
  RSP_CANCEL_RECONNECT = 1520,
  RSP_RECONNECT = 1522,
  RSP_PASS_THROUGH = 1529,
  RSP_VISIT_PLAYER = 1530,
  RSP_LEAVE_GAME_EARLY = 1531,
  RSP_GDCOMMON_BIN = 1532,
  RSP_GDCOMMONBIN_DATA = 1533,
  RSP_HISTORY_CHAT_MSG = 1534,
  RSP_BATTLE_CAMPRESULT = 1535,
  RSP_AUTO_BATTLE_OP = 1536,
  RSP_RESTRICT_USER = 1537,
  RSP_EQUIP_SELECT_RATE = 1538,
  RSP_REPORT_ABSENT = 1539,
  RSP_RECOMMEND_WEEK = 1600,
  RSP_RECOMMEND_OFFICIAL = 1601,
  RSP_RECOMMEND_LATEST = 1602,
  RSP_RECOMMEND_HISTORY = 1603,
  RSP_RECOMMEND_COLLECT = 1604,
  RSP_RECOMMEND_SET = 1605,
  RSP_RECOMMEND_GETCOLLECTION = 1606,
  RSP_RECOMMEND_EQUIP = 1607,
  RSP_LOGIN_CANCEL = 1608,
  RSP_CONVERT_DEBRIS = 1609,
  RSP_USE_PROTECTION_CARD = 1610,
  RSP_USE_PASSPORT_CARD = 1611,
  RSP_SET_MEDAL = 1612,
  RSP_UNSET_MEDAL = 1613,
  RSP_PLAYER_MEDALS = 1614,
  RSP_UPDATE_HOT_DOT = 1616,
  RSP_QUERY_HOT_DOT = 1617,
  RSP_SET_CACHE = 1618,
  RSP_GET_CACHE = 1619,
  RSP_BUY_CHALLENGE_COUNT = 1620,
  RSP_GET_PVE_RANK = 1621,
  RSP_AUTH_ACCOUNT = 1622,
  RSP_UNBIND_ACCOUNT = 1623,
  RSP_BAGTOITEM = 1624,
  RSP_IDENTIFY_ITEM = 1625,
  RSP_INSERT_ITEM_AFFIX = 1626,
  RSP_UNSET_ITEM_AFFIX = 1627,
  RSP_SET_DEFAULT_ATTRIBUTES = 1628,
  RSP_CHECK_CANCEL = 1629,
  RSP_CANCEL_ACCOUNT = 1630,
  RSP_PVE_UP_TALENT_LEVEL = 1631,
  RSP_PVE_LUCKY_AWARD = 1632,
  RSP_GET_SELF_NUM_RANK_DATA = 1633,
  RSP_UPDATE_CARD_GROUP = 1634,
  RSP_UPDATE_CARD_GROUP_NAME = 1635,
  RSP_BUY_PVE_BUFF = 1636,
  RSP_SET_CARD_GROUP = 1637,
  RSP_BUY_PVE_CHESS_TEMPLATE = 1638,
  RSP_PVE_UNLOCK_CHESS_TEMPLATE = 1639,
  RSP_PVE_SET_TEAM_DEBUFF = 1640,
  RSP_CHOSE_CARD_GROUP = 1641,
  RSP_REMOVE_OVERTIME_BUFF = 1642,
  RSP_UPDATE_NEW_CARD_GROUP_SIGN = 1643,
  RSP_TD_GET_ONHOOK_AWARD = 1644,
  RSP_TD_DRAW = 1645,
  RSP_TD_BUY_CARD = 1646,
  RSP_TD_SET_CARD_GROUP = 1647,
  RSP_TD_LEVEL_UP = 1648,
  RSP_TD_EQUIP = 1649,
  RSP_MENTOR_UPDATE_SETTING = 1650,
  RSP_MENTOR_INVITE = 1651,
  RSP_MENTOR_CONFIRM_INVITE = 1652,
  RSP_MENTOR_RECOMMEND_LIST = 1653,
  RSP_MENTOR_GET_TASK_AWARD = 1654,
  RSP_MENTOR_GRADUATE = 1655,
  RSP_MENTOR_RELIEVE_RELATION = 1656,
  RSP_GET_MENTOR_INFO = 1657,
  RSP_MENTOR_GET_INVITE_MSG = 1658,
  RSP_UPDATE_CARD_GROUP_BETTER = 1659,
  RSP_UPDATE_CARD_GROUP_SETTING = 1660,
  RSP_SET_AUCTION_NAME = 1661,
  RSP_SET_AUCTION_REMARK = 1662,
  RSP_GET_BALANCE = 1663,
  RSP_RECHARGE_BALANCE = 1664,
  RSP_WITHDRAW_BALANCE = 1665,
  RSP_PERSONAL_RECOMMEND_MALL = 1666,
  RSP_GET_MEDAL_CHEST_AWARD = 1667,
  RSP_SET_ITEM_AUTO_USE = 1668,
  CS_NTF_BEGIN = 2000,
  NTF_KICKOFF = 2001,
  NTF_PLAYER_WAIT = 2002,
  NTF_PASS_DAY = 2003,
  NTF_PASS_WEEK = 2004,
  NTF_PASS_MONTH = 2005,
  NTF_WORLD_CHAT = 2006,
  NTF_MAILS = 2007,
  NTF_HEAD_PIC = 2008,
  NTF_PVP_MATCH = 2009,
  NTF_PVP_MATCH_CANCEL = 2010,
  NTF_PVP = 2011,
  NTF_PVP_STATUS = 2012,
  NTF_PVP_PLAYER_READY = 2013,
  NTF_PVP_BEGIN = 2014,
  NTF_PVP_SEQ = 2015,
  NTF_PLAYER_FINISH = 2016,
  NTF_PVP_END = 2017,
  NTF_MARQUEE = 2018,
  NTF_REMOVE_MARQUEE = 2019,
  NTF_LOADING_PROGRESS = 2020,
  NTF_PVP_CHAT = 2021,
  NTF_RELOAD = 2022,
  NTF_PAY = 2023,
  NTF_CHAT = 2024,
  NTF_FOLLOW_LIST = 2025,
  NTF_NEW_FOLLOWER = 2026,
  NTF_LOST_FOLLOWER = 2027,
  NTF_INVITE_JOIN_TEAM = 2028,
  NTF_PLAYER_JOIN_TEAM = 2029,
  NTF_KICKOFF_TEAM_PLAYER = 2030,
  NTF_TEAM_MSG = 2031,
  NTF_TEAM_READY = 2032,
  NTF_REJECT_JOIN_TEAM = 2033,
  NTF_PLAYER_LEAVE_TEAM = 2034,
  NTF_NOTICE = 2035,
  NTF_REMOVE_NOTICE = 2036,
  NTF_UPGRADE_BATTLE_STAGE = 2037,
  NTF_PASSPORT_TASK_PROGRESS = 2038,
  NTF_RANKSEASON_EVAL = 2039,
  NTF_BIND_ACCOUNTS = 2040,
  NTF_SEASON_TASK_PROGRESS = 2041,
  NTF_ALPHA_ACTIVITY = 2042,
  NTF_OFF_SEASON_TO_NEW_SEASON = 2043,
  NTF_LANGUAGE_MD5_LIST = 2044,
  NTF_ACTIVITY_PROGRESS = 2045,
  NTF_REMOVE_ACTIVITY = 2046,
  NTF_ACTIVITY_CONFIG = 2047,
  NTF_MELEE_TASK_PROGRESS = 2048,
  NTF_SET_TEAM_MODE = 2049,
  NTF_PASSPORT_OPEN = 2050,
  NTF_PASSPORT_CLOSE = 2051,
  NTF_WEEK_INDEX = 2052,
  NTF_NEW_PVP_HISTORY = 2053,
  NTF_TEAM_PVP_END = 2054,
  NTF_PROBE_NET_DELAY = 2055,
  NTF_REFRESH_GOODS = 2056,
  NTF_SWITCH_SYS_SET = 2058,
  NTF_SWITCH_PLAYER_SET = 2059,
  NTF_BLACKLIST = 2060,
  NTF_BIND_PHONE_NUMBER_SWITCH = 2061,
  NTF_WORLD_INVITE = 2062,
  NTF_MALL_NOTICE = 2063,
  NTF_PRIVILEGE = 2064,
  NTF_AA_REMIND = 2065,
  NTF_AA_BAN = 2066,
  NTF_AA_VERIFY = 2067,
  NTF_PHONE_NUMBER = 2068,
  NTF_ANTI_CALLBACK = 2069,
  NTF_FORTUNEBAG_TIME = 2070,
  NTF_UPDATE_ITEM = 2071,
  NTF_CREDIT_SCORE = 2072,
  NTF_BUFF_ACT = 2073,
  NTF_ACTIVITY_GROUP = 2074,
  NTF_GM_SYSMESSAGE = 2075,
  NTF_CLEAR_CHAT = 2076,
  NTF_FORBID_INFO = 2077,
  NTF_MIDAS_DIAMOND = 2078,
  NTF_JOIN_VOICE_TEAM = 2079,
  NTF_JOIN_VOICE_PVP = 2080,
  NTF_JOIN_VOICE_CAMP = 2081,
  NTF_WX_VVIP_LEVEL = 2082,
  NTF_FREE_FLOW = 2083,
  NTF_OBSERVE_STATUS = 2084,
  NTF_GAME_MARQUEE = 2085,
  NTF_WX_RED_PACKET = 2086,
  NTF_NEW_PUNISHMENT = 2087,
  NTF_TEAMSLOT = 2088,
  NTF_TEAMSUBMODE = 2089,
  NTF_TEAMSLOTSTATUS = 2099,
  NTF_PUNISHMENT_INFO = 2100,
  NTF_REMOVE_PUNISHMENT = 2101,
  NTF_PVP_CONFIRM = 2102,
  NTF_MATCH_SUCCESS = 2103,
  NTF_OLD_BUSINESS_PLAYER = 2104,
  NTF_CHANGETEAMSLOT = 2105,
  NTF_REFUSECHANGETEAMSLOT = 2106,
  NTF_CANCELCHANGESLOT = 2107,
  NTF_SHOW_CHESS_SKIN = 2108,
  NTF_ON_HELP_REDDOT = 2109,
  NTF_BAG_UPDATE = 2110,
  NTF_REFRESH_MELEE = 2111,
  NTF_CURRENT_TOURNAMENTS = 2112,
  NTF_TOURNAMENT_BEGIN = 2113,
  NTF_TOURNAMENT_END = 2114,
  NTF_ENROLL_BEGIN = 2115,
  NTF_ENROLL_END = 2116,
  NTF_JOIN_TOURNAMENT_ROOM = 2119,
  NTF_TOURNAMENT_OUT = 2120,
  NTF_ROUND_END = 2121,
  NTF_TEAM_STATUS = 2122,
  NTF_INVITE_OBSERVE = 2123,
  NTF_REJECT_OBSERVE = 2124,
  NTF_CHEST_COUNT = 2125,
  NTF_ACTIVITYTASK_UNLOCK = 2126,
  NTF_ADD_THIRDPVPINFO = 2128,
  NTF_DEL_THIRDPVPINFO = 2129,
  NTF_PS4_SERVER_ONLY = 2130,
  NTF_CHESS_LIST_ERR = 2131,
  NTF_CHEST_RECORD = 2132,
  NTF_GOA_INFO = 2133,
  NTF_MEDAL_INFO = 2134,
  NTF_MEDAL_ID = 2135,
  NTF_PVP_RESET = 2136,
  NTF_DEL_MAIL = 2137,
  NTF_ITEM_INFO = 2138,
  NTF_BAG = 2139,
  NTF_PASSPORT_NUM = 2140,
  NTF_PASSPORT_YEAR_CARD_NUM = 2141,
  NTF_TEAM_OP = 2300,
  NTF_TEAM_DISMISS = 2301,
  NTF_WEB_LOGIN = 2302,
  NTF_SINGLE_ROUND_FLOW = 2303,
  NTF_LUCK_STAR_AWARD = 2304,
  NTF_RECRUIT_INFO = 2305,
  NTF_RECRUIT_PLAYER = 2306,
  NTF_RECRUIT_PLAYER_BATTLE = 2307,
  NTF_LUCK_MALL_GOODS = 2308,
  NTF_BIGWINNER_EXPANDMATCH = 2309,
  NTF_SWITCH_MODE_IN_TEAM = 2310,
  NTF_TNGAME_END = 2311,
  NTF_PLAYER_LACK_RESOURCE = 2320,
  NTF_FAV_MAP_REMOVED = 2321,
  NTF_WORKSHOP_MATCH_RESULT = 2322,
  NTF_VERIFY_REAL_NAME = 2350,
  NTF_PLAYER_EXP_CHANGED = 2351,
  NTF_GUILD_JOIN = 2400,
  NTF_GUILD_MEMBER_CHANGE = 2401,
  NTF_GUILD_KICKOFF = 2402,
  NTF_GUILD_ROLE_CHANGE = 2403,
  NTF_GUILD_ATTR_CHANGE = 2404,
  NTF_GUILD_CHAT = 2409,
  NTF_GUILD_NEW_LOG = 2410,
  NTF_GUILD_APPLICANT_CHANGE = 2411,
  NTF_GUILD_INVITEE_CHANGE = 2412,
  NTF_GUILD_NEW_INVITE = 2413,
  NTF_GUILD_INFO = 2414,
  NTF_VNG_COMMENT_AWARD_RESET = 2420,
  NTF_AD_AWARD = 2421,
  NTF_AD_COUNT = 2422,
  NTF_UI_FORBID = 2423,
  NTF_PVP_UPDATE_MSGR_POS = 2522,
  NTF_PVP_PLAYER_LOGGED_IN = 2523,
  NTF_PASS_THROUGH = 2566,
  NTF_AA = 2570,
  NTF_PVP_RECONNECT = 2571,
  NTF_UPDATE_BATTLE_RESULT = 2572,
  NTF_VISIT_PLAYER = 2573,
  NTF_KR_IDENTITYAUTH = 2574,
  NTF_KR_ADDICTIONTIP = 2575,
  NTF_LEAVE_GAME_EARLY = 2576,
  NTF_KR_ADDICTIONCOUNTDOWN = 2577,
  NTF_ADD_BANNER = 2578,
  NTF_REMOVE_BANNER = 2579,
  NTF_HISTOY_CHAT_MSG = 2580,
  NTF_SYSTEM_GM_TIME = 2581,
  NTF_CHANGE_NAME = 2582,
  NTF_FIRST_PAY = 2583,
  NTF_BETON_BOUNTY = 2584,
  NTF_TASK_PROGRESS = 2585,
  NTF_NEW_PLAYER_GUIDE_ENDED = 2586,
  NTF_ACHIEVEMENT_TASK_PROGRESS = 2587,
  NTF_ACHIEVEMENT_TASK_INFO = 2588,
  NTF_PVP_AWARDS = 2589,
  NTF_ADD_AWARD = 2590,
  NTF_LIMIT_REFRESH = 2591,
  NTF_UPDATE_NOTICE = 2592,
  NTF_CALC_MMR = 2593,
  NTF_PVE_CHALLENGE_COUNT = 2594,
  NTF_AD_DISCOUNT = 2595,
  NTF_ITEM_ATTRIBUTES = 2596,
  NTF_PVP_AFFIX_TRIGGER = 2597,
  NTF_UPDATE_PVP_DATA = 2598,
  NTF_UPGRADE_PASSPORT = 2599,
  NTF_UODATE_TEAM_DEBUFF = 2600,
  NTF_PVE_EVAL = 2601,
  NTF_UNLOCK_CARD_GROUP = 2602,
  NTF_CUSTOM_PVE_ACTIVITY = 2603,
  NTF_GM_BAN = 2604,
  NTF_TD_PLAYER_INFO = 2605,
  NTF_MENTOR_INVITE_MSG = 2606,
  NTF_BECOME_MENTOR = 2607,
  NTF_MENTOR_RELATION = 2608,
  NTF_MENTORSHIP_TASK = 2609,
  NTF_MENTORSHIP_LEVEL = 2610,
  NTF_CUR_DRESS_UPDATE = 2611,
  NTF_CHANGE_EXCHANGE_MARK = 2612,
  NTF_REFRESH_PASSPORT = 2613,
  NTF_GM_REMOVE_MAIL = 2614,
  NTF_AUTO_USE_ITEM = 2615,
  CSMsgID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CSMsgID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CSMsgID_IsValid(int value);
constexpr CSMsgID CSMsgID_MIN = CS_REQ_BEGIN;
constexpr CSMsgID CSMsgID_MAX = NTF_AUTO_USE_ITEM;
constexpr int CSMsgID_ARRAYSIZE = CSMsgID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSMsgID_descriptor();
template<typename T>
inline const std::string& CSMsgID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CSMsgID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CSMsgID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CSMsgID_descriptor(), enum_t_value);
}
inline bool CSMsgID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CSMsgID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CSMsgID>(
    CSMsgID_descriptor(), name, value);
}
// ===================================================================

class CSHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSHead) */ {
 public:
  inline CSHead() : CSHead(nullptr) {}
  ~CSHead() override;
  explicit PROTOBUF_CONSTEXPR CSHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSHead(const CSHead& from);
  CSHead(CSHead&& from) noexcept
    : CSHead() {
    *this = ::std::move(from);
  }

  inline CSHead& operator=(const CSHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSHead& operator=(CSHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSHead* internal_default_instance() {
    return reinterpret_cast<const CSHead*>(
               &_CSHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSHead& a, CSHead& b) {
    a.Swap(&b);
  }
  inline void Swap(CSHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSHead& from) {
    CSHead::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSHead";
  }
  protected:
  explicit CSHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 1,
    kBodyLenFieldNumber = 2,
    kCompressFieldNumber = 3,
    kServerIdFieldNumber = 4,
  };
  // .msg.CSMsgID MsgId = 1;
  void clear_msgid();
  ::msg::CSMsgID msgid() const;
  void set_msgid(::msg::CSMsgID value);
  private:
  ::msg::CSMsgID _internal_msgid() const;
  void _internal_set_msgid(::msg::CSMsgID value);
  public:

  // uint32 BodyLen = 2;
  void clear_bodylen();
  uint32_t bodylen() const;
  void set_bodylen(uint32_t value);
  private:
  uint32_t _internal_bodylen() const;
  void _internal_set_bodylen(uint32_t value);
  public:

  // bool Compress = 3;
  void clear_compress();
  bool compress() const;
  void set_compress(bool value);
  private:
  bool _internal_compress() const;
  void _internal_set_compress(bool value);
  public:

  // uint32 ServerId = 4;
  void clear_serverid();
  uint32_t serverid() const;
  void set_serverid(uint32_t value);
  private:
  uint32_t _internal_serverid() const;
  void _internal_set_serverid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int msgid_;
    uint32_t bodylen_;
    bool compress_;
    uint32_t serverid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_csprotocol_2eproto;
};
// -------------------------------------------------------------------

class CSReqBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqBody) */ {
 public:
  inline CSReqBody() : CSReqBody(nullptr) {}
  ~CSReqBody() override;
  explicit PROTOBUF_CONSTEXPR CSReqBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqBody(const CSReqBody& from);
  CSReqBody(CSReqBody&& from) noexcept
    : CSReqBody() {
    *this = ::std::move(from);
  }

  inline CSReqBody& operator=(const CSReqBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqBody& operator=(CSReqBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqBody* internal_default_instance() {
    return reinterpret_cast<const CSReqBody*>(
               &_CSReqBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CSReqBody& a, CSReqBody& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqBody& from) {
    CSReqBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqBody";
  }
  protected:
  explicit CSReqBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeartFieldNumber = 2,
    kLoginFieldNumber = 3,
    kVersionCheckFieldNumber = 4,
    kResourceVersionCheckFieldNumber = 5,
    kApplyHallServerFieldNumber = 6,
    kGetNumRankFieldNumber = 7,
    kWorldChatFieldNumber = 8,
    kPlayersBaseInfoFieldNumber = 9,
    kPlayerDetailInfoFieldNumber = 10,
    kReadMailFieldNumber = 11,
    kGetMailAwardFieldNumber = 12,
    kBuyEggFieldNumber = 13,
    kUserNameSetFieldNumber = 14,
    kUserNameRandomFieldNumber = 15,
    kHeadPicSetFieldNumber = 16,
    kPvpFieldNumber = 17,
    kDressChessPlayerFieldNumber = 18,
    kDressSceneFieldNumber = 19,
    kPvpLoginFieldNumber = 20,
    kPvpEndFieldNumber = 23,
    kPlayerFinishFieldNumber = 24,
    kPlayerQuitFieldNumber = 25,
    kSellItemFieldNumber = 26,
    kGetEvalAwardFieldNumber = 27,
    kUseChessPlayerFieldNumber = 28,
    kGuidReportFieldNumber = 29,
    kGetCodeAwardFieldNumber = 30,
    kRoundReportFieldNumber = 31,
    kLoadingProgressFieldNumber = 32,
    kPvpChatFieldNumber = 33,
    kChessCombineFieldNumber = 34,
    kExposeFieldNumber = 35,
    kApplyOrderIdFieldNumber = 36,
    kReportOrderInfoFieldNumber = 37,
    kSetItemFieldNumber = 38,
    kUnsetItemFieldNumber = 39,
    kRandomItemFieldNumber = 40,
    kChatFieldNumber = 41,
    kSetChessPlayerFieldNumber = 42,
    kUnsetChessPlayerFieldNumber = 43,
    kGetFansListFieldNumber = 44,
    kFollowPlayerFieldNumber = 45,
    kUnfollowPlayerFieldNumber = 46,
    kPlayersStatusInfoFieldNumber = 47,
    kInviteJoinTeamFieldNumber = 48,
    kJoinTeamFieldNumber = 49,
    kKickOffTeamPlayerFieldNumber = 50,
    kTeamMsgFieldNumber = 51,
    kTeamReadyFieldNumber = 52,
    kReportPayResponseFieldNumber = 53,
    kRejectJoinTeamFieldNumber = 54,
    kShieldChatFieldNumber = 55,
    kBuyPassportLevelFieldNumber = 56,
    kUpgradePassportFieldNumber = 57,
    kGetPassportLevelAwardFieldNumber = 58,
    kGetPassportTaskAwardFieldNumber = 59,
    kTelBookFieldNumber = 60,
    kActivatePassportFieldNumber = 61,
    kRankSeasonEvalFieldNumber = 62,
    kBindAccountFieldNumber = 63,
    kIncAdsShowCountFieldNumber = 64,
    kUseBonusCardFieldNumber = 65,
    kGetSeasonAwardFieldNumber = 66,
    kGetAlphaActivityAwardFieldNumber = 67,
    kGetLanguageDataFieldNumber = 68,
    kGetActivityAwardFieldNumber = 69,
    kGetActivityDataFieldNumber = 70,
    kSendSmsFieldNumber = 71,
    kGetMeleeAwardFieldNumber = 72,
    kAddAiToTeamFieldNumber = 73,
    kShareFieldNumber = 74,
    kSkipInterfaceFieldNumber = 75,
    kTeamGameFieldNumber = 76,
    kSetTeamModeFieldNumber = 77,
    kHistoryPvpShowPermissionFieldNumber = 78,
    kSearchTeamFieldNumber = 79,
    kApplyChatFieldNumber = 80,
    kChatLoginFieldNumber = 81,
    kProbeNetDelayFieldNumber = 82,
    kGetEggsFieldNumber = 83,
    kBuyGoodsFieldNumber = 84,
    kExchangePassportGoodsFieldNumber = 85,
    kUsePassportTaskCardFieldNumber = 86,
    kOpenRandChestFieldNumber = 87,
    kEggLotteryFieldNumber = 88,
    kQueryDiamondBalanceFieldNumber = 89,
    kUseItemFieldNumber = 90,
    kUseExperienceCardFieldNumber = 91,
    kRandTargetItemFieldNumber = 92,
    kAddBlacklistFieldNumber = 93,
    kRemoveBlacklistFieldNumber = 94,
    kReportPlayerBirthFieldNumber = 95,
    kReportInfoInputFieldNumber = 96,
    kSendVerificationCodeFieldNumber = 97,
    kBindPhoneNumberFieldNumber = 98,
    kWorldInviteFieldNumber = 99,
    kRemoveExpireItemFieldNumber = 100,
    kGetMallGoodsFieldNumber = 101,
    kBuyMallGoodsFieldNumber = 102,
    kBindSharingCodeFieldNumber = 103,
    kWXBlessBagFieldNumber = 104,
    kUpdateFriendsInGameFieldNumber = 105,
    kShareRewardFieldNumber = 106,
    kAllFightInfoFieldNumber = 107,
    kGetOldPlayerFieldNumber = 108,
    kBindOldPlayerFieldNumber = 109,
    kSendVerificationCodeWithCheckRedisFieldNumber = 110,
    kReportSettingFieldNumber = 111,
    kAntiDataFieldNumber = 112,
    kTlogDataFieldNumber = 113,
    kDaySignFieldNumber = 114,
    kDayFitAvoidFieldNumber = 115,
    kShareCountAwardFieldNumber = 116,
    kActItemExchFieldNumber = 117,
    kRealationStarFieldNumber = 118,
    kGetRealationStarInviteSuccFieldNumber = 119,
    kGetRealationStarFieldNumber = 120,
    kReqActRecordFieldNumber = 121,
    kJoinVoiceTeamFieldNumber = 122,
    kJoinVoicePvpFieldNumber = 123,
    kJoinVoiceCampFieldNumber = 124,
    kUserCountrySetFieldNumber = 125,
    kOfflineInviteJoinTeamFieldNumber = 126,
    kObserveFieldNumber = 127,
    kGetRecommendPvpFieldNumber = 128,
    kObserveLoginFieldNumber = 129,
    kQuitObserveFieldNumber = 130,
    kGetObserveInfoFieldNumber = 131,
    kFreeFlowFieldNumber = 132,
    kSetPushTokenFieldNumber = 133,
    kTlogEventFieldNumber = 134,
    kWxVVipAwardFieldNumber = 135,
    kRelationStarWXFieldNumber = 136,
    kSendWxRedPacketFieldNumber = 137,
    kRecvWxRedPacketFieldNumber = 138,
    kWxRedPktLikeFieldNumber = 139,
    kWxRedPktRankFieldNumber = 140,
    kSetObservePrivilegeFieldNumber = 141,
    kPresetFastChatFieldNumber = 142,
    kChangeSlotTeamFieldNumber = 143,
    kChangeSubModeTeamFieldNumber = 144,
    kConfirmChangeSlotTeamFieldNumber = 145,
    kPvpRoundEndFieldNumber = 146,
    kObserveChatLoginFieldNumber = 147,
    kPvpConfirmFieldNumber = 148,
    kActivityPicShareFieldNumber = 149,
    kBindOldBusinessPlayerFieldNumber = 150,
    kTranslateFieldNumber = 151,
    kSubmitQuestionnaireFieldNumber = 152,
    kCancelChangeSlotFieldNumber = 153,
    kSetChessSkinFieldNumber = 154,
    kUnsetChessSkinFieldNumber = 155,
    kComposeFieldNumber = 156,
    kOffHelpReddotFieldNumber = 157,
    kVideoFieldNumber = 160,
    kChangeLanguageFieldNumber = 161,
    kVideoPlayFieldNumber = 162,
    kSetProvinceFieldNumber = 163,
    kLongyuanVoiceFieldNumber = 164,
    kEnrollTournamentFieldNumber = 165,
    kJoinTournamentRoomFieldNumber = 166,
    kTournamentPointAwardFieldNumber = 167,
    kDealWebMailFieldNumber = 168,
    kGetEnrollPlayersFieldNumber = 169,
    kChallengeAgainFieldNumber = 170,
    kHistoryChatFieldNumber = 171,
    kSetFriendInvisibleFieldNumber = 172,
    kGetObserveAwardFieldNumber = 173,
    kInviteObserveFieldNumber = 174,
    kRejectObserveFieldNumber = 175,
    kGetTxPlayerFieldNumber = 176,
    kChooseTxPlayerFieldNumber = 177,
    kGetThirdPvpInfoFieldNumber = 178,
    kMarkPlayerGuideFieldNumber = 179,
    kMarkChessSkinClickedFieldNumber = 180,
    kRecruitInvitePlayerFieldNumber = 181,
    kRecruitBindInviterFieldNumber = 182,
    kQueryPs4EntitlementsFieldNumber = 183,
    kActDaySignFieldNumber = 184,
    kHaveThirdPvpInfoFieldNumber = 185,
    kActivityMallFieldNumber = 186,
    kPsOnlyFieldNumber = 187,
    kChangeChannelTypeFieldNumber = 188,
    kCustomCardOptFieldNumber = 189,
    kStaticsReportFieldNumber = 190,
    kChampionHistoryFieldNumber = 191,
    kTournamentLastTopRankFieldNumber = 192,
    kBigWinnerExpandMatchFieldNumber = 193,
    kBigWinnerDailyAwardFieldNumber = 194,
    kBigWinnerScoreHistoryFieldNumber = 195,
    kSmeltItemFieldNumber = 196,
    kPVEUpTalentLevelFieldNumber = 197,
    kLuckyAwardFieldNumber = 198,
    kApplyChannelFieldNumber = 199,
    kTeamOPFieldNumber = 300,
    kOBTeamInfoFieldNumber = 301,
    kHeadIconUrlFieldNumber = 302,
    kGetPvpServerGroupFieldNumber = 303,
    kReportPvpInfoFieldNumber = 304,
    kChoosePlayerFieldNumber = 305,
    kPingTestFieldNumber = 306,
    kReportRegionInfoFieldNumber = 307,
    kRecalledPlaeyrFieldNumber = 308,
    kWebLoginFieldNumber = 309,
    kInviteCodeResetFieldNumber = 310,
    kRecallRewardFieldNumber = 311,
    kSwitchToCommonMatchFieldNumber = 312,
    kSwitchModeInTeamFieldNumber = 320,
    kGetTNRoomStateFieldNumber = 321,
    kWorkshopMatchFieldNumber = 330,
    kBuyWorkshopTicketFieldNumber = 331,
    kFavouriteWorkshopMapFieldNumber = 332,
    kShortcutMapsOPFieldNumber = 333,
    kPlayersTournamentInfoFieldNumber = 334,
    kScoreWorkshopMapFieldNumber = 335,
    kMapsVisitedByFriendsFieldNumber = 336,
    kVerifyRealNameFieldNumber = 350,
    kFakePayFieldNumber = 351,
    kGuildCreateFieldNumber = 360,
    kGuildApplyFieldNumber = 361,
    kGuildHomeFieldNumber = 362,
    kGuildInfoFieldNumber = 364,
    kGuildApproveFieldNumber = 365,
    kGuildRoleFieldNumber = 366,
    kGuildModifyFieldNumber = 367,
    kGuildKickoffFieldNumber = 368,
    kGuildDismissFieldNumber = 369,
    kGuildExitFieldNumber = 370,
    kGuildChatFieldNumber = 371,
    kGuildListFieldNumber = 372,
    kGuildRecommendPlayersFieldNumber = 373,
    kGuildInviteListFieldNumber = 374,
    kGuildInviteFieldNumber = 375,
    kGuildResignFieldNumber = 376,
    kGuildRejectInviteFieldNumber = 377,
    kGetVngCommentAwardFieldNumber = 390,
    kLevelupChestFieldNumber = 391,
    kWatchAdFieldNumber = 392,
    kPsTournamentRoomFieldNumber = 393,
    kGetAdCumulateAwardFieldNumber = 394,
    kSetMessengerPosFieldNumber = 535,
    kUpdateAntiAddictionTimeFieldNumber = 553,
    kCancelReconnectFieldNumber = 554,
    kReconnectFieldNumber = 556,
    kPassThroughFieldNumber = 563,
    kVisitPlayerFieldNumber = 564,
    kLeaveGameEarlyFieldNumber = 565,
    kGDCommonBinFieldNumber = 566,
    kGDBinDataFieldNumber = 567,
    kAutoBattleOPFieldNumber = 568,
    kRestrictUserFieldNumber = 569,
    kEquipSelectRateFieldNumber = 570,
    kReportAbsentFieldNumber = 571,
    kRecommendWeekFieldNumber = 600,
    kRecommendOfficialFieldNumber = 601,
    kRecommendLatestFieldNumber = 602,
    kRecommendHistoryFieldNumber = 603,
    kRecommendCollectFieldNumber = 604,
    kRecommendSetFieldNumber = 605,
    kRecommendGetCollectionFieldNumber = 606,
    kRecommendEquipFieldNumber = 607,
    kLoginCancelFieldNumber = 608,
    kConvertDebrisFieldNumber = 609,
    kProtectionCardFieldNumber = 610,
    kUsePassportCardFieldNumber = 611,
    kSetMedalFieldNumber = 612,
    kUnSetMedalFieldNumber = 613,
    kPlayerMedalsFieldNumber = 614,
    kUpdateHotDotFieldNumber = 615,
    kQueryHotDotFieldNumber = 616,
    kSetCacheFieldNumber = 617,
    kGetCacheFieldNumber = 618,
    kBuyChallengeCountFieldNumber = 619,
    kGetPveRankFieldNumber = 620,
    kAuthAccountFieldNumber = 621,
    kUnbindAccountFieldNumber = 622,
    kBagToItemFieldNumber = 623,
    kIdentifyItemFieldNumber = 624,
    kInsetItemAffixFieldNumber = 625,
    kUnsetItemAffixFieldNumber = 626,
    kSetDefaultAttributesFieldNumber = 627,
    kCheckCancelFieldNumber = 628,
    kCancelAccountFieldNumber = 629,
    kOAuthAppFieldNumber = 630,
    kGetSelfNumRankDataFieldNumber = 631,
    kUpdateCardGroupFieldNumber = 632,
    kUpdateCardGroupNameFieldNumber = 633,
    kBuyPveBuffFieldNumber = 634,
    kSetCardGroupFieldNumber = 635,
    kBuyPveChessTemplateFieldNumber = 636,
    kPveUnlockChessTemplateFieldNumber = 637,
    kPveSetTeamDeBuffFieldNumber = 638,
    kChoseCardGroupFieldNumber = 639,
    kRemoveOvertimeBuffFieldNumber = 640,
    kUpdateNewCardGroupSignFieldNumber = 643,
    kTDGetOnHookAwardFieldNumber = 644,
    kTDDrawFieldNumber = 645,
    kTDBuyCardFieldNumber = 646,
    kTDSetCardGroupFieldNumber = 647,
    kTDLevelUpFieldNumber = 648,
    kTDEquipFieldNumber = 649,
    kMentorUpdateSettingFieldNumber = 650,
    kMentorInviteFieldNumber = 651,
    kMentorConfirmInviteFieldNumber = 652,
    kMentorRecommendListFieldNumber = 653,
    kMentorGetTaskAwardFieldNumber = 654,
    kMentorGraduateFieldNumber = 655,
    kMentorRelieveRelationFieldNumber = 656,
    kGetMentorInfoFieldNumber = 657,
    kMentorGetInviteMsgFieldNumber = 658,
    kUpdateCardGroupBetterFieldNumber = 659,
    kUpdateCardGroupSettingFieldNumber = 660,
    kSetContentFieldNumber = 661,
    kGetBalanceFieldNumber = 662,
    kRechargeBalanceFieldNumber = 663,
    kWithdrawBalanceFieldNumber = 664,
    kPersonalRecommendMallFieldNumber = 665,
    kGetMedalChestAwardFieldNumber = 666,
    kSetItemAutoUseFieldNumber = 667,
    kSeqFieldNumber = 1,
  };
  // .msg.CSReqHeart Heart = 2;
  bool has_heart() const;
  private:
  bool _internal_has_heart() const;
  public:
  void clear_heart();
  const ::msg::CSReqHeart& heart() const;
  PROTOBUF_NODISCARD ::msg::CSReqHeart* release_heart();
  ::msg::CSReqHeart* mutable_heart();
  void set_allocated_heart(::msg::CSReqHeart* heart);
  private:
  const ::msg::CSReqHeart& _internal_heart() const;
  ::msg::CSReqHeart* _internal_mutable_heart();
  public:
  void unsafe_arena_set_allocated_heart(
      ::msg::CSReqHeart* heart);
  ::msg::CSReqHeart* unsafe_arena_release_heart();

  // .msg.CSReqLogin Login = 3;
  bool has_login() const;
  private:
  bool _internal_has_login() const;
  public:
  void clear_login();
  const ::msg::CSReqLogin& login() const;
  PROTOBUF_NODISCARD ::msg::CSReqLogin* release_login();
  ::msg::CSReqLogin* mutable_login();
  void set_allocated_login(::msg::CSReqLogin* login);
  private:
  const ::msg::CSReqLogin& _internal_login() const;
  ::msg::CSReqLogin* _internal_mutable_login();
  public:
  void unsafe_arena_set_allocated_login(
      ::msg::CSReqLogin* login);
  ::msg::CSReqLogin* unsafe_arena_release_login();

  // .msg.CSReqVersionCheck VersionCheck = 4;
  bool has_versioncheck() const;
  private:
  bool _internal_has_versioncheck() const;
  public:
  void clear_versioncheck();
  const ::msg::CSReqVersionCheck& versioncheck() const;
  PROTOBUF_NODISCARD ::msg::CSReqVersionCheck* release_versioncheck();
  ::msg::CSReqVersionCheck* mutable_versioncheck();
  void set_allocated_versioncheck(::msg::CSReqVersionCheck* versioncheck);
  private:
  const ::msg::CSReqVersionCheck& _internal_versioncheck() const;
  ::msg::CSReqVersionCheck* _internal_mutable_versioncheck();
  public:
  void unsafe_arena_set_allocated_versioncheck(
      ::msg::CSReqVersionCheck* versioncheck);
  ::msg::CSReqVersionCheck* unsafe_arena_release_versioncheck();

  // .msg.CSReqResourceVersionCheck ResourceVersionCheck = 5;
  bool has_resourceversioncheck() const;
  private:
  bool _internal_has_resourceversioncheck() const;
  public:
  void clear_resourceversioncheck();
  const ::msg::CSReqResourceVersionCheck& resourceversioncheck() const;
  PROTOBUF_NODISCARD ::msg::CSReqResourceVersionCheck* release_resourceversioncheck();
  ::msg::CSReqResourceVersionCheck* mutable_resourceversioncheck();
  void set_allocated_resourceversioncheck(::msg::CSReqResourceVersionCheck* resourceversioncheck);
  private:
  const ::msg::CSReqResourceVersionCheck& _internal_resourceversioncheck() const;
  ::msg::CSReqResourceVersionCheck* _internal_mutable_resourceversioncheck();
  public:
  void unsafe_arena_set_allocated_resourceversioncheck(
      ::msg::CSReqResourceVersionCheck* resourceversioncheck);
  ::msg::CSReqResourceVersionCheck* unsafe_arena_release_resourceversioncheck();

  // .msg.CSReqApplyHallServer ApplyHallServer = 6;
  bool has_applyhallserver() const;
  private:
  bool _internal_has_applyhallserver() const;
  public:
  void clear_applyhallserver();
  const ::msg::CSReqApplyHallServer& applyhallserver() const;
  PROTOBUF_NODISCARD ::msg::CSReqApplyHallServer* release_applyhallserver();
  ::msg::CSReqApplyHallServer* mutable_applyhallserver();
  void set_allocated_applyhallserver(::msg::CSReqApplyHallServer* applyhallserver);
  private:
  const ::msg::CSReqApplyHallServer& _internal_applyhallserver() const;
  ::msg::CSReqApplyHallServer* _internal_mutable_applyhallserver();
  public:
  void unsafe_arena_set_allocated_applyhallserver(
      ::msg::CSReqApplyHallServer* applyhallserver);
  ::msg::CSReqApplyHallServer* unsafe_arena_release_applyhallserver();

  // .msg.CSReqGetNumRank GetNumRank = 7;
  bool has_getnumrank() const;
  private:
  bool _internal_has_getnumrank() const;
  public:
  void clear_getnumrank();
  const ::msg::CSReqGetNumRank& getnumrank() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetNumRank* release_getnumrank();
  ::msg::CSReqGetNumRank* mutable_getnumrank();
  void set_allocated_getnumrank(::msg::CSReqGetNumRank* getnumrank);
  private:
  const ::msg::CSReqGetNumRank& _internal_getnumrank() const;
  ::msg::CSReqGetNumRank* _internal_mutable_getnumrank();
  public:
  void unsafe_arena_set_allocated_getnumrank(
      ::msg::CSReqGetNumRank* getnumrank);
  ::msg::CSReqGetNumRank* unsafe_arena_release_getnumrank();

  // .msg.CSReqWorldChat WorldChat = 8;
  bool has_worldchat() const;
  private:
  bool _internal_has_worldchat() const;
  public:
  void clear_worldchat();
  const ::msg::CSReqWorldChat& worldchat() const;
  PROTOBUF_NODISCARD ::msg::CSReqWorldChat* release_worldchat();
  ::msg::CSReqWorldChat* mutable_worldchat();
  void set_allocated_worldchat(::msg::CSReqWorldChat* worldchat);
  private:
  const ::msg::CSReqWorldChat& _internal_worldchat() const;
  ::msg::CSReqWorldChat* _internal_mutable_worldchat();
  public:
  void unsafe_arena_set_allocated_worldchat(
      ::msg::CSReqWorldChat* worldchat);
  ::msg::CSReqWorldChat* unsafe_arena_release_worldchat();

  // .msg.CSReqPlayersBaseInfo PlayersBaseInfo = 9;
  bool has_playersbaseinfo() const;
  private:
  bool _internal_has_playersbaseinfo() const;
  public:
  void clear_playersbaseinfo();
  const ::msg::CSReqPlayersBaseInfo& playersbaseinfo() const;
  PROTOBUF_NODISCARD ::msg::CSReqPlayersBaseInfo* release_playersbaseinfo();
  ::msg::CSReqPlayersBaseInfo* mutable_playersbaseinfo();
  void set_allocated_playersbaseinfo(::msg::CSReqPlayersBaseInfo* playersbaseinfo);
  private:
  const ::msg::CSReqPlayersBaseInfo& _internal_playersbaseinfo() const;
  ::msg::CSReqPlayersBaseInfo* _internal_mutable_playersbaseinfo();
  public:
  void unsafe_arena_set_allocated_playersbaseinfo(
      ::msg::CSReqPlayersBaseInfo* playersbaseinfo);
  ::msg::CSReqPlayersBaseInfo* unsafe_arena_release_playersbaseinfo();

  // .msg.CSReqPlayerDetailInfo PlayerDetailInfo = 10;
  bool has_playerdetailinfo() const;
  private:
  bool _internal_has_playerdetailinfo() const;
  public:
  void clear_playerdetailinfo();
  const ::msg::CSReqPlayerDetailInfo& playerdetailinfo() const;
  PROTOBUF_NODISCARD ::msg::CSReqPlayerDetailInfo* release_playerdetailinfo();
  ::msg::CSReqPlayerDetailInfo* mutable_playerdetailinfo();
  void set_allocated_playerdetailinfo(::msg::CSReqPlayerDetailInfo* playerdetailinfo);
  private:
  const ::msg::CSReqPlayerDetailInfo& _internal_playerdetailinfo() const;
  ::msg::CSReqPlayerDetailInfo* _internal_mutable_playerdetailinfo();
  public:
  void unsafe_arena_set_allocated_playerdetailinfo(
      ::msg::CSReqPlayerDetailInfo* playerdetailinfo);
  ::msg::CSReqPlayerDetailInfo* unsafe_arena_release_playerdetailinfo();

  // .msg.CSReqReadMail ReadMail = 11;
  bool has_readmail() const;
  private:
  bool _internal_has_readmail() const;
  public:
  void clear_readmail();
  const ::msg::CSReqReadMail& readmail() const;
  PROTOBUF_NODISCARD ::msg::CSReqReadMail* release_readmail();
  ::msg::CSReqReadMail* mutable_readmail();
  void set_allocated_readmail(::msg::CSReqReadMail* readmail);
  private:
  const ::msg::CSReqReadMail& _internal_readmail() const;
  ::msg::CSReqReadMail* _internal_mutable_readmail();
  public:
  void unsafe_arena_set_allocated_readmail(
      ::msg::CSReqReadMail* readmail);
  ::msg::CSReqReadMail* unsafe_arena_release_readmail();

  // .msg.CSReqGetMailAward GetMailAward = 12;
  bool has_getmailaward() const;
  private:
  bool _internal_has_getmailaward() const;
  public:
  void clear_getmailaward();
  const ::msg::CSReqGetMailAward& getmailaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetMailAward* release_getmailaward();
  ::msg::CSReqGetMailAward* mutable_getmailaward();
  void set_allocated_getmailaward(::msg::CSReqGetMailAward* getmailaward);
  private:
  const ::msg::CSReqGetMailAward& _internal_getmailaward() const;
  ::msg::CSReqGetMailAward* _internal_mutable_getmailaward();
  public:
  void unsafe_arena_set_allocated_getmailaward(
      ::msg::CSReqGetMailAward* getmailaward);
  ::msg::CSReqGetMailAward* unsafe_arena_release_getmailaward();

  // .msg.CSReqBuyEgg BuyEgg = 13;
  bool has_buyegg() const;
  private:
  bool _internal_has_buyegg() const;
  public:
  void clear_buyegg();
  const ::msg::CSReqBuyEgg& buyegg() const;
  PROTOBUF_NODISCARD ::msg::CSReqBuyEgg* release_buyegg();
  ::msg::CSReqBuyEgg* mutable_buyegg();
  void set_allocated_buyegg(::msg::CSReqBuyEgg* buyegg);
  private:
  const ::msg::CSReqBuyEgg& _internal_buyegg() const;
  ::msg::CSReqBuyEgg* _internal_mutable_buyegg();
  public:
  void unsafe_arena_set_allocated_buyegg(
      ::msg::CSReqBuyEgg* buyegg);
  ::msg::CSReqBuyEgg* unsafe_arena_release_buyegg();

  // .msg.CSReqUserNameSet UserNameSet = 14;
  bool has_usernameset() const;
  private:
  bool _internal_has_usernameset() const;
  public:
  void clear_usernameset();
  const ::msg::CSReqUserNameSet& usernameset() const;
  PROTOBUF_NODISCARD ::msg::CSReqUserNameSet* release_usernameset();
  ::msg::CSReqUserNameSet* mutable_usernameset();
  void set_allocated_usernameset(::msg::CSReqUserNameSet* usernameset);
  private:
  const ::msg::CSReqUserNameSet& _internal_usernameset() const;
  ::msg::CSReqUserNameSet* _internal_mutable_usernameset();
  public:
  void unsafe_arena_set_allocated_usernameset(
      ::msg::CSReqUserNameSet* usernameset);
  ::msg::CSReqUserNameSet* unsafe_arena_release_usernameset();

  // .msg.CSReqUserNameRandom UserNameRandom = 15;
  bool has_usernamerandom() const;
  private:
  bool _internal_has_usernamerandom() const;
  public:
  void clear_usernamerandom();
  const ::msg::CSReqUserNameRandom& usernamerandom() const;
  PROTOBUF_NODISCARD ::msg::CSReqUserNameRandom* release_usernamerandom();
  ::msg::CSReqUserNameRandom* mutable_usernamerandom();
  void set_allocated_usernamerandom(::msg::CSReqUserNameRandom* usernamerandom);
  private:
  const ::msg::CSReqUserNameRandom& _internal_usernamerandom() const;
  ::msg::CSReqUserNameRandom* _internal_mutable_usernamerandom();
  public:
  void unsafe_arena_set_allocated_usernamerandom(
      ::msg::CSReqUserNameRandom* usernamerandom);
  ::msg::CSReqUserNameRandom* unsafe_arena_release_usernamerandom();

  // .msg.CSReqHeadPicSet HeadPicSet = 16;
  bool has_headpicset() const;
  private:
  bool _internal_has_headpicset() const;
  public:
  void clear_headpicset();
  const ::msg::CSReqHeadPicSet& headpicset() const;
  PROTOBUF_NODISCARD ::msg::CSReqHeadPicSet* release_headpicset();
  ::msg::CSReqHeadPicSet* mutable_headpicset();
  void set_allocated_headpicset(::msg::CSReqHeadPicSet* headpicset);
  private:
  const ::msg::CSReqHeadPicSet& _internal_headpicset() const;
  ::msg::CSReqHeadPicSet* _internal_mutable_headpicset();
  public:
  void unsafe_arena_set_allocated_headpicset(
      ::msg::CSReqHeadPicSet* headpicset);
  ::msg::CSReqHeadPicSet* unsafe_arena_release_headpicset();

  // .msg.CSReqPvp Pvp = 17;
  bool has_pvp() const;
  private:
  bool _internal_has_pvp() const;
  public:
  void clear_pvp();
  const ::msg::CSReqPvp& pvp() const;
  PROTOBUF_NODISCARD ::msg::CSReqPvp* release_pvp();
  ::msg::CSReqPvp* mutable_pvp();
  void set_allocated_pvp(::msg::CSReqPvp* pvp);
  private:
  const ::msg::CSReqPvp& _internal_pvp() const;
  ::msg::CSReqPvp* _internal_mutable_pvp();
  public:
  void unsafe_arena_set_allocated_pvp(
      ::msg::CSReqPvp* pvp);
  ::msg::CSReqPvp* unsafe_arena_release_pvp();

  // .msg.CSReqDressChessPlayer DressChessPlayer = 18;
  bool has_dresschessplayer() const;
  private:
  bool _internal_has_dresschessplayer() const;
  public:
  void clear_dresschessplayer();
  const ::msg::CSReqDressChessPlayer& dresschessplayer() const;
  PROTOBUF_NODISCARD ::msg::CSReqDressChessPlayer* release_dresschessplayer();
  ::msg::CSReqDressChessPlayer* mutable_dresschessplayer();
  void set_allocated_dresschessplayer(::msg::CSReqDressChessPlayer* dresschessplayer);
  private:
  const ::msg::CSReqDressChessPlayer& _internal_dresschessplayer() const;
  ::msg::CSReqDressChessPlayer* _internal_mutable_dresschessplayer();
  public:
  void unsafe_arena_set_allocated_dresschessplayer(
      ::msg::CSReqDressChessPlayer* dresschessplayer);
  ::msg::CSReqDressChessPlayer* unsafe_arena_release_dresschessplayer();

  // .msg.CSReqDressScene DressScene = 19;
  bool has_dressscene() const;
  private:
  bool _internal_has_dressscene() const;
  public:
  void clear_dressscene();
  const ::msg::CSReqDressScene& dressscene() const;
  PROTOBUF_NODISCARD ::msg::CSReqDressScene* release_dressscene();
  ::msg::CSReqDressScene* mutable_dressscene();
  void set_allocated_dressscene(::msg::CSReqDressScene* dressscene);
  private:
  const ::msg::CSReqDressScene& _internal_dressscene() const;
  ::msg::CSReqDressScene* _internal_mutable_dressscene();
  public:
  void unsafe_arena_set_allocated_dressscene(
      ::msg::CSReqDressScene* dressscene);
  ::msg::CSReqDressScene* unsafe_arena_release_dressscene();

  // .msg.CSReqPvpLogin PvpLogin = 20;
  bool has_pvplogin() const;
  private:
  bool _internal_has_pvplogin() const;
  public:
  void clear_pvplogin();
  const ::msg::CSReqPvpLogin& pvplogin() const;
  PROTOBUF_NODISCARD ::msg::CSReqPvpLogin* release_pvplogin();
  ::msg::CSReqPvpLogin* mutable_pvplogin();
  void set_allocated_pvplogin(::msg::CSReqPvpLogin* pvplogin);
  private:
  const ::msg::CSReqPvpLogin& _internal_pvplogin() const;
  ::msg::CSReqPvpLogin* _internal_mutable_pvplogin();
  public:
  void unsafe_arena_set_allocated_pvplogin(
      ::msg::CSReqPvpLogin* pvplogin);
  ::msg::CSReqPvpLogin* unsafe_arena_release_pvplogin();

  // .msg.CSReqPvpEnd PvpEnd = 23;
  bool has_pvpend() const;
  private:
  bool _internal_has_pvpend() const;
  public:
  void clear_pvpend();
  const ::msg::CSReqPvpEnd& pvpend() const;
  PROTOBUF_NODISCARD ::msg::CSReqPvpEnd* release_pvpend();
  ::msg::CSReqPvpEnd* mutable_pvpend();
  void set_allocated_pvpend(::msg::CSReqPvpEnd* pvpend);
  private:
  const ::msg::CSReqPvpEnd& _internal_pvpend() const;
  ::msg::CSReqPvpEnd* _internal_mutable_pvpend();
  public:
  void unsafe_arena_set_allocated_pvpend(
      ::msg::CSReqPvpEnd* pvpend);
  ::msg::CSReqPvpEnd* unsafe_arena_release_pvpend();

  // .msg.CSReqPlayerFinish PlayerFinish = 24;
  bool has_playerfinish() const;
  private:
  bool _internal_has_playerfinish() const;
  public:
  void clear_playerfinish();
  const ::msg::CSReqPlayerFinish& playerfinish() const;
  PROTOBUF_NODISCARD ::msg::CSReqPlayerFinish* release_playerfinish();
  ::msg::CSReqPlayerFinish* mutable_playerfinish();
  void set_allocated_playerfinish(::msg::CSReqPlayerFinish* playerfinish);
  private:
  const ::msg::CSReqPlayerFinish& _internal_playerfinish() const;
  ::msg::CSReqPlayerFinish* _internal_mutable_playerfinish();
  public:
  void unsafe_arena_set_allocated_playerfinish(
      ::msg::CSReqPlayerFinish* playerfinish);
  ::msg::CSReqPlayerFinish* unsafe_arena_release_playerfinish();

  // .msg.CSReqPlayerQuit PlayerQuit = 25;
  bool has_playerquit() const;
  private:
  bool _internal_has_playerquit() const;
  public:
  void clear_playerquit();
  const ::msg::CSReqPlayerQuit& playerquit() const;
  PROTOBUF_NODISCARD ::msg::CSReqPlayerQuit* release_playerquit();
  ::msg::CSReqPlayerQuit* mutable_playerquit();
  void set_allocated_playerquit(::msg::CSReqPlayerQuit* playerquit);
  private:
  const ::msg::CSReqPlayerQuit& _internal_playerquit() const;
  ::msg::CSReqPlayerQuit* _internal_mutable_playerquit();
  public:
  void unsafe_arena_set_allocated_playerquit(
      ::msg::CSReqPlayerQuit* playerquit);
  ::msg::CSReqPlayerQuit* unsafe_arena_release_playerquit();

  // .msg.CSReqSellItem SellItem = 26;
  bool has_sellitem() const;
  private:
  bool _internal_has_sellitem() const;
  public:
  void clear_sellitem();
  const ::msg::CSReqSellItem& sellitem() const;
  PROTOBUF_NODISCARD ::msg::CSReqSellItem* release_sellitem();
  ::msg::CSReqSellItem* mutable_sellitem();
  void set_allocated_sellitem(::msg::CSReqSellItem* sellitem);
  private:
  const ::msg::CSReqSellItem& _internal_sellitem() const;
  ::msg::CSReqSellItem* _internal_mutable_sellitem();
  public:
  void unsafe_arena_set_allocated_sellitem(
      ::msg::CSReqSellItem* sellitem);
  ::msg::CSReqSellItem* unsafe_arena_release_sellitem();

  // .msg.CSReqGetEvalAward GetEvalAward = 27;
  bool has_getevalaward() const;
  private:
  bool _internal_has_getevalaward() const;
  public:
  void clear_getevalaward();
  const ::msg::CSReqGetEvalAward& getevalaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetEvalAward* release_getevalaward();
  ::msg::CSReqGetEvalAward* mutable_getevalaward();
  void set_allocated_getevalaward(::msg::CSReqGetEvalAward* getevalaward);
  private:
  const ::msg::CSReqGetEvalAward& _internal_getevalaward() const;
  ::msg::CSReqGetEvalAward* _internal_mutable_getevalaward();
  public:
  void unsafe_arena_set_allocated_getevalaward(
      ::msg::CSReqGetEvalAward* getevalaward);
  ::msg::CSReqGetEvalAward* unsafe_arena_release_getevalaward();

  // .msg.CSReqUseChessPlayer UseChessPlayer = 28;
  bool has_usechessplayer() const;
  private:
  bool _internal_has_usechessplayer() const;
  public:
  void clear_usechessplayer();
  const ::msg::CSReqUseChessPlayer& usechessplayer() const;
  PROTOBUF_NODISCARD ::msg::CSReqUseChessPlayer* release_usechessplayer();
  ::msg::CSReqUseChessPlayer* mutable_usechessplayer();
  void set_allocated_usechessplayer(::msg::CSReqUseChessPlayer* usechessplayer);
  private:
  const ::msg::CSReqUseChessPlayer& _internal_usechessplayer() const;
  ::msg::CSReqUseChessPlayer* _internal_mutable_usechessplayer();
  public:
  void unsafe_arena_set_allocated_usechessplayer(
      ::msg::CSReqUseChessPlayer* usechessplayer);
  ::msg::CSReqUseChessPlayer* unsafe_arena_release_usechessplayer();

  // .msg.CSReqGuidReport GuidReport = 29;
  bool has_guidreport() const;
  private:
  bool _internal_has_guidreport() const;
  public:
  void clear_guidreport();
  const ::msg::CSReqGuidReport& guidreport() const;
  PROTOBUF_NODISCARD ::msg::CSReqGuidReport* release_guidreport();
  ::msg::CSReqGuidReport* mutable_guidreport();
  void set_allocated_guidreport(::msg::CSReqGuidReport* guidreport);
  private:
  const ::msg::CSReqGuidReport& _internal_guidreport() const;
  ::msg::CSReqGuidReport* _internal_mutable_guidreport();
  public:
  void unsafe_arena_set_allocated_guidreport(
      ::msg::CSReqGuidReport* guidreport);
  ::msg::CSReqGuidReport* unsafe_arena_release_guidreport();

  // .msg.CSReqGetCodeAward GetCodeAward = 30;
  bool has_getcodeaward() const;
  private:
  bool _internal_has_getcodeaward() const;
  public:
  void clear_getcodeaward();
  const ::msg::CSReqGetCodeAward& getcodeaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetCodeAward* release_getcodeaward();
  ::msg::CSReqGetCodeAward* mutable_getcodeaward();
  void set_allocated_getcodeaward(::msg::CSReqGetCodeAward* getcodeaward);
  private:
  const ::msg::CSReqGetCodeAward& _internal_getcodeaward() const;
  ::msg::CSReqGetCodeAward* _internal_mutable_getcodeaward();
  public:
  void unsafe_arena_set_allocated_getcodeaward(
      ::msg::CSReqGetCodeAward* getcodeaward);
  ::msg::CSReqGetCodeAward* unsafe_arena_release_getcodeaward();

  // .msg.CSReqRoundReport RoundReport = 31;
  bool has_roundreport() const;
  private:
  bool _internal_has_roundreport() const;
  public:
  void clear_roundreport();
  const ::msg::CSReqRoundReport& roundreport() const;
  PROTOBUF_NODISCARD ::msg::CSReqRoundReport* release_roundreport();
  ::msg::CSReqRoundReport* mutable_roundreport();
  void set_allocated_roundreport(::msg::CSReqRoundReport* roundreport);
  private:
  const ::msg::CSReqRoundReport& _internal_roundreport() const;
  ::msg::CSReqRoundReport* _internal_mutable_roundreport();
  public:
  void unsafe_arena_set_allocated_roundreport(
      ::msg::CSReqRoundReport* roundreport);
  ::msg::CSReqRoundReport* unsafe_arena_release_roundreport();

  // .msg.CSReqLoadingProgress LoadingProgress = 32;
  bool has_loadingprogress() const;
  private:
  bool _internal_has_loadingprogress() const;
  public:
  void clear_loadingprogress();
  const ::msg::CSReqLoadingProgress& loadingprogress() const;
  PROTOBUF_NODISCARD ::msg::CSReqLoadingProgress* release_loadingprogress();
  ::msg::CSReqLoadingProgress* mutable_loadingprogress();
  void set_allocated_loadingprogress(::msg::CSReqLoadingProgress* loadingprogress);
  private:
  const ::msg::CSReqLoadingProgress& _internal_loadingprogress() const;
  ::msg::CSReqLoadingProgress* _internal_mutable_loadingprogress();
  public:
  void unsafe_arena_set_allocated_loadingprogress(
      ::msg::CSReqLoadingProgress* loadingprogress);
  ::msg::CSReqLoadingProgress* unsafe_arena_release_loadingprogress();

  // .msg.CSReqPvpChat PvpChat = 33;
  bool has_pvpchat() const;
  private:
  bool _internal_has_pvpchat() const;
  public:
  void clear_pvpchat();
  const ::msg::CSReqPvpChat& pvpchat() const;
  PROTOBUF_NODISCARD ::msg::CSReqPvpChat* release_pvpchat();
  ::msg::CSReqPvpChat* mutable_pvpchat();
  void set_allocated_pvpchat(::msg::CSReqPvpChat* pvpchat);
  private:
  const ::msg::CSReqPvpChat& _internal_pvpchat() const;
  ::msg::CSReqPvpChat* _internal_mutable_pvpchat();
  public:
  void unsafe_arena_set_allocated_pvpchat(
      ::msg::CSReqPvpChat* pvpchat);
  ::msg::CSReqPvpChat* unsafe_arena_release_pvpchat();

  // .msg.CSReqChessCombine ChessCombine = 34;
  bool has_chesscombine() const;
  private:
  bool _internal_has_chesscombine() const;
  public:
  void clear_chesscombine();
  const ::msg::CSReqChessCombine& chesscombine() const;
  PROTOBUF_NODISCARD ::msg::CSReqChessCombine* release_chesscombine();
  ::msg::CSReqChessCombine* mutable_chesscombine();
  void set_allocated_chesscombine(::msg::CSReqChessCombine* chesscombine);
  private:
  const ::msg::CSReqChessCombine& _internal_chesscombine() const;
  ::msg::CSReqChessCombine* _internal_mutable_chesscombine();
  public:
  void unsafe_arena_set_allocated_chesscombine(
      ::msg::CSReqChessCombine* chesscombine);
  ::msg::CSReqChessCombine* unsafe_arena_release_chesscombine();

  // .msg.CSReqExpose Expose = 35;
  bool has_expose() const;
  private:
  bool _internal_has_expose() const;
  public:
  void clear_expose();
  const ::msg::CSReqExpose& expose() const;
  PROTOBUF_NODISCARD ::msg::CSReqExpose* release_expose();
  ::msg::CSReqExpose* mutable_expose();
  void set_allocated_expose(::msg::CSReqExpose* expose);
  private:
  const ::msg::CSReqExpose& _internal_expose() const;
  ::msg::CSReqExpose* _internal_mutable_expose();
  public:
  void unsafe_arena_set_allocated_expose(
      ::msg::CSReqExpose* expose);
  ::msg::CSReqExpose* unsafe_arena_release_expose();

  // .msg.CSReqApplyOrderId ApplyOrderId = 36;
  bool has_applyorderid() const;
  private:
  bool _internal_has_applyorderid() const;
  public:
  void clear_applyorderid();
  const ::msg::CSReqApplyOrderId& applyorderid() const;
  PROTOBUF_NODISCARD ::msg::CSReqApplyOrderId* release_applyorderid();
  ::msg::CSReqApplyOrderId* mutable_applyorderid();
  void set_allocated_applyorderid(::msg::CSReqApplyOrderId* applyorderid);
  private:
  const ::msg::CSReqApplyOrderId& _internal_applyorderid() const;
  ::msg::CSReqApplyOrderId* _internal_mutable_applyorderid();
  public:
  void unsafe_arena_set_allocated_applyorderid(
      ::msg::CSReqApplyOrderId* applyorderid);
  ::msg::CSReqApplyOrderId* unsafe_arena_release_applyorderid();

  // .msg.CSReqReportOrderInfo ReportOrderInfo = 37;
  bool has_reportorderinfo() const;
  private:
  bool _internal_has_reportorderinfo() const;
  public:
  void clear_reportorderinfo();
  const ::msg::CSReqReportOrderInfo& reportorderinfo() const;
  PROTOBUF_NODISCARD ::msg::CSReqReportOrderInfo* release_reportorderinfo();
  ::msg::CSReqReportOrderInfo* mutable_reportorderinfo();
  void set_allocated_reportorderinfo(::msg::CSReqReportOrderInfo* reportorderinfo);
  private:
  const ::msg::CSReqReportOrderInfo& _internal_reportorderinfo() const;
  ::msg::CSReqReportOrderInfo* _internal_mutable_reportorderinfo();
  public:
  void unsafe_arena_set_allocated_reportorderinfo(
      ::msg::CSReqReportOrderInfo* reportorderinfo);
  ::msg::CSReqReportOrderInfo* unsafe_arena_release_reportorderinfo();

  // .msg.CSReqSetItem SetItem = 38;
  bool has_setitem() const;
  private:
  bool _internal_has_setitem() const;
  public:
  void clear_setitem();
  const ::msg::CSReqSetItem& setitem() const;
  PROTOBUF_NODISCARD ::msg::CSReqSetItem* release_setitem();
  ::msg::CSReqSetItem* mutable_setitem();
  void set_allocated_setitem(::msg::CSReqSetItem* setitem);
  private:
  const ::msg::CSReqSetItem& _internal_setitem() const;
  ::msg::CSReqSetItem* _internal_mutable_setitem();
  public:
  void unsafe_arena_set_allocated_setitem(
      ::msg::CSReqSetItem* setitem);
  ::msg::CSReqSetItem* unsafe_arena_release_setitem();

  // .msg.CSReqUnsetItem UnsetItem = 39;
  bool has_unsetitem() const;
  private:
  bool _internal_has_unsetitem() const;
  public:
  void clear_unsetitem();
  const ::msg::CSReqUnsetItem& unsetitem() const;
  PROTOBUF_NODISCARD ::msg::CSReqUnsetItem* release_unsetitem();
  ::msg::CSReqUnsetItem* mutable_unsetitem();
  void set_allocated_unsetitem(::msg::CSReqUnsetItem* unsetitem);
  private:
  const ::msg::CSReqUnsetItem& _internal_unsetitem() const;
  ::msg::CSReqUnsetItem* _internal_mutable_unsetitem();
  public:
  void unsafe_arena_set_allocated_unsetitem(
      ::msg::CSReqUnsetItem* unsetitem);
  ::msg::CSReqUnsetItem* unsafe_arena_release_unsetitem();

  // .msg.CSReqRandomItem RandomItem = 40;
  bool has_randomitem() const;
  private:
  bool _internal_has_randomitem() const;
  public:
  void clear_randomitem();
  const ::msg::CSReqRandomItem& randomitem() const;
  PROTOBUF_NODISCARD ::msg::CSReqRandomItem* release_randomitem();
  ::msg::CSReqRandomItem* mutable_randomitem();
  void set_allocated_randomitem(::msg::CSReqRandomItem* randomitem);
  private:
  const ::msg::CSReqRandomItem& _internal_randomitem() const;
  ::msg::CSReqRandomItem* _internal_mutable_randomitem();
  public:
  void unsafe_arena_set_allocated_randomitem(
      ::msg::CSReqRandomItem* randomitem);
  ::msg::CSReqRandomItem* unsafe_arena_release_randomitem();

  // .msg.CSReqChat Chat = 41;
  bool has_chat() const;
  private:
  bool _internal_has_chat() const;
  public:
  void clear_chat();
  const ::msg::CSReqChat& chat() const;
  PROTOBUF_NODISCARD ::msg::CSReqChat* release_chat();
  ::msg::CSReqChat* mutable_chat();
  void set_allocated_chat(::msg::CSReqChat* chat);
  private:
  const ::msg::CSReqChat& _internal_chat() const;
  ::msg::CSReqChat* _internal_mutable_chat();
  public:
  void unsafe_arena_set_allocated_chat(
      ::msg::CSReqChat* chat);
  ::msg::CSReqChat* unsafe_arena_release_chat();

  // .msg.CSReqSetChessPlayer SetChessPlayer = 42;
  bool has_setchessplayer() const;
  private:
  bool _internal_has_setchessplayer() const;
  public:
  void clear_setchessplayer();
  const ::msg::CSReqSetChessPlayer& setchessplayer() const;
  PROTOBUF_NODISCARD ::msg::CSReqSetChessPlayer* release_setchessplayer();
  ::msg::CSReqSetChessPlayer* mutable_setchessplayer();
  void set_allocated_setchessplayer(::msg::CSReqSetChessPlayer* setchessplayer);
  private:
  const ::msg::CSReqSetChessPlayer& _internal_setchessplayer() const;
  ::msg::CSReqSetChessPlayer* _internal_mutable_setchessplayer();
  public:
  void unsafe_arena_set_allocated_setchessplayer(
      ::msg::CSReqSetChessPlayer* setchessplayer);
  ::msg::CSReqSetChessPlayer* unsafe_arena_release_setchessplayer();

  // .msg.CSReqUnsetChessPlayer UnsetChessPlayer = 43;
  bool has_unsetchessplayer() const;
  private:
  bool _internal_has_unsetchessplayer() const;
  public:
  void clear_unsetchessplayer();
  const ::msg::CSReqUnsetChessPlayer& unsetchessplayer() const;
  PROTOBUF_NODISCARD ::msg::CSReqUnsetChessPlayer* release_unsetchessplayer();
  ::msg::CSReqUnsetChessPlayer* mutable_unsetchessplayer();
  void set_allocated_unsetchessplayer(::msg::CSReqUnsetChessPlayer* unsetchessplayer);
  private:
  const ::msg::CSReqUnsetChessPlayer& _internal_unsetchessplayer() const;
  ::msg::CSReqUnsetChessPlayer* _internal_mutable_unsetchessplayer();
  public:
  void unsafe_arena_set_allocated_unsetchessplayer(
      ::msg::CSReqUnsetChessPlayer* unsetchessplayer);
  ::msg::CSReqUnsetChessPlayer* unsafe_arena_release_unsetchessplayer();

  // .msg.CSReqGetFansList GetFansList = 44;
  bool has_getfanslist() const;
  private:
  bool _internal_has_getfanslist() const;
  public:
  void clear_getfanslist();
  const ::msg::CSReqGetFansList& getfanslist() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetFansList* release_getfanslist();
  ::msg::CSReqGetFansList* mutable_getfanslist();
  void set_allocated_getfanslist(::msg::CSReqGetFansList* getfanslist);
  private:
  const ::msg::CSReqGetFansList& _internal_getfanslist() const;
  ::msg::CSReqGetFansList* _internal_mutable_getfanslist();
  public:
  void unsafe_arena_set_allocated_getfanslist(
      ::msg::CSReqGetFansList* getfanslist);
  ::msg::CSReqGetFansList* unsafe_arena_release_getfanslist();

  // .msg.CSReqFollowPlayer FollowPlayer = 45;
  bool has_followplayer() const;
  private:
  bool _internal_has_followplayer() const;
  public:
  void clear_followplayer();
  const ::msg::CSReqFollowPlayer& followplayer() const;
  PROTOBUF_NODISCARD ::msg::CSReqFollowPlayer* release_followplayer();
  ::msg::CSReqFollowPlayer* mutable_followplayer();
  void set_allocated_followplayer(::msg::CSReqFollowPlayer* followplayer);
  private:
  const ::msg::CSReqFollowPlayer& _internal_followplayer() const;
  ::msg::CSReqFollowPlayer* _internal_mutable_followplayer();
  public:
  void unsafe_arena_set_allocated_followplayer(
      ::msg::CSReqFollowPlayer* followplayer);
  ::msg::CSReqFollowPlayer* unsafe_arena_release_followplayer();

  // .msg.CSReqUnfollowPlayer UnfollowPlayer = 46;
  bool has_unfollowplayer() const;
  private:
  bool _internal_has_unfollowplayer() const;
  public:
  void clear_unfollowplayer();
  const ::msg::CSReqUnfollowPlayer& unfollowplayer() const;
  PROTOBUF_NODISCARD ::msg::CSReqUnfollowPlayer* release_unfollowplayer();
  ::msg::CSReqUnfollowPlayer* mutable_unfollowplayer();
  void set_allocated_unfollowplayer(::msg::CSReqUnfollowPlayer* unfollowplayer);
  private:
  const ::msg::CSReqUnfollowPlayer& _internal_unfollowplayer() const;
  ::msg::CSReqUnfollowPlayer* _internal_mutable_unfollowplayer();
  public:
  void unsafe_arena_set_allocated_unfollowplayer(
      ::msg::CSReqUnfollowPlayer* unfollowplayer);
  ::msg::CSReqUnfollowPlayer* unsafe_arena_release_unfollowplayer();

  // .msg.CSReqPlayersStatusInfo PlayersStatusInfo = 47;
  bool has_playersstatusinfo() const;
  private:
  bool _internal_has_playersstatusinfo() const;
  public:
  void clear_playersstatusinfo();
  const ::msg::CSReqPlayersStatusInfo& playersstatusinfo() const;
  PROTOBUF_NODISCARD ::msg::CSReqPlayersStatusInfo* release_playersstatusinfo();
  ::msg::CSReqPlayersStatusInfo* mutable_playersstatusinfo();
  void set_allocated_playersstatusinfo(::msg::CSReqPlayersStatusInfo* playersstatusinfo);
  private:
  const ::msg::CSReqPlayersStatusInfo& _internal_playersstatusinfo() const;
  ::msg::CSReqPlayersStatusInfo* _internal_mutable_playersstatusinfo();
  public:
  void unsafe_arena_set_allocated_playersstatusinfo(
      ::msg::CSReqPlayersStatusInfo* playersstatusinfo);
  ::msg::CSReqPlayersStatusInfo* unsafe_arena_release_playersstatusinfo();

  // .msg.CSReqInviteJoinTeam InviteJoinTeam = 48;
  bool has_invitejointeam() const;
  private:
  bool _internal_has_invitejointeam() const;
  public:
  void clear_invitejointeam();
  const ::msg::CSReqInviteJoinTeam& invitejointeam() const;
  PROTOBUF_NODISCARD ::msg::CSReqInviteJoinTeam* release_invitejointeam();
  ::msg::CSReqInviteJoinTeam* mutable_invitejointeam();
  void set_allocated_invitejointeam(::msg::CSReqInviteJoinTeam* invitejointeam);
  private:
  const ::msg::CSReqInviteJoinTeam& _internal_invitejointeam() const;
  ::msg::CSReqInviteJoinTeam* _internal_mutable_invitejointeam();
  public:
  void unsafe_arena_set_allocated_invitejointeam(
      ::msg::CSReqInviteJoinTeam* invitejointeam);
  ::msg::CSReqInviteJoinTeam* unsafe_arena_release_invitejointeam();

  // .msg.CSReqJoinTeam JoinTeam = 49;
  bool has_jointeam() const;
  private:
  bool _internal_has_jointeam() const;
  public:
  void clear_jointeam();
  const ::msg::CSReqJoinTeam& jointeam() const;
  PROTOBUF_NODISCARD ::msg::CSReqJoinTeam* release_jointeam();
  ::msg::CSReqJoinTeam* mutable_jointeam();
  void set_allocated_jointeam(::msg::CSReqJoinTeam* jointeam);
  private:
  const ::msg::CSReqJoinTeam& _internal_jointeam() const;
  ::msg::CSReqJoinTeam* _internal_mutable_jointeam();
  public:
  void unsafe_arena_set_allocated_jointeam(
      ::msg::CSReqJoinTeam* jointeam);
  ::msg::CSReqJoinTeam* unsafe_arena_release_jointeam();

  // .msg.CSReqKickOffTeamPlayer KickOffTeamPlayer = 50;
  bool has_kickoffteamplayer() const;
  private:
  bool _internal_has_kickoffteamplayer() const;
  public:
  void clear_kickoffteamplayer();
  const ::msg::CSReqKickOffTeamPlayer& kickoffteamplayer() const;
  PROTOBUF_NODISCARD ::msg::CSReqKickOffTeamPlayer* release_kickoffteamplayer();
  ::msg::CSReqKickOffTeamPlayer* mutable_kickoffteamplayer();
  void set_allocated_kickoffteamplayer(::msg::CSReqKickOffTeamPlayer* kickoffteamplayer);
  private:
  const ::msg::CSReqKickOffTeamPlayer& _internal_kickoffteamplayer() const;
  ::msg::CSReqKickOffTeamPlayer* _internal_mutable_kickoffteamplayer();
  public:
  void unsafe_arena_set_allocated_kickoffteamplayer(
      ::msg::CSReqKickOffTeamPlayer* kickoffteamplayer);
  ::msg::CSReqKickOffTeamPlayer* unsafe_arena_release_kickoffteamplayer();

  // .msg.CSReqTeamMsg TeamMsg = 51;
  bool has_teammsg() const;
  private:
  bool _internal_has_teammsg() const;
  public:
  void clear_teammsg();
  const ::msg::CSReqTeamMsg& teammsg() const;
  PROTOBUF_NODISCARD ::msg::CSReqTeamMsg* release_teammsg();
  ::msg::CSReqTeamMsg* mutable_teammsg();
  void set_allocated_teammsg(::msg::CSReqTeamMsg* teammsg);
  private:
  const ::msg::CSReqTeamMsg& _internal_teammsg() const;
  ::msg::CSReqTeamMsg* _internal_mutable_teammsg();
  public:
  void unsafe_arena_set_allocated_teammsg(
      ::msg::CSReqTeamMsg* teammsg);
  ::msg::CSReqTeamMsg* unsafe_arena_release_teammsg();

  // .msg.CSReqTeamReady TeamReady = 52;
  bool has_teamready() const;
  private:
  bool _internal_has_teamready() const;
  public:
  void clear_teamready();
  const ::msg::CSReqTeamReady& teamready() const;
  PROTOBUF_NODISCARD ::msg::CSReqTeamReady* release_teamready();
  ::msg::CSReqTeamReady* mutable_teamready();
  void set_allocated_teamready(::msg::CSReqTeamReady* teamready);
  private:
  const ::msg::CSReqTeamReady& _internal_teamready() const;
  ::msg::CSReqTeamReady* _internal_mutable_teamready();
  public:
  void unsafe_arena_set_allocated_teamready(
      ::msg::CSReqTeamReady* teamready);
  ::msg::CSReqTeamReady* unsafe_arena_release_teamready();

  // .msg.CSReqReportPayResponse ReportPayResponse = 53;
  bool has_reportpayresponse() const;
  private:
  bool _internal_has_reportpayresponse() const;
  public:
  void clear_reportpayresponse();
  const ::msg::CSReqReportPayResponse& reportpayresponse() const;
  PROTOBUF_NODISCARD ::msg::CSReqReportPayResponse* release_reportpayresponse();
  ::msg::CSReqReportPayResponse* mutable_reportpayresponse();
  void set_allocated_reportpayresponse(::msg::CSReqReportPayResponse* reportpayresponse);
  private:
  const ::msg::CSReqReportPayResponse& _internal_reportpayresponse() const;
  ::msg::CSReqReportPayResponse* _internal_mutable_reportpayresponse();
  public:
  void unsafe_arena_set_allocated_reportpayresponse(
      ::msg::CSReqReportPayResponse* reportpayresponse);
  ::msg::CSReqReportPayResponse* unsafe_arena_release_reportpayresponse();

  // .msg.CSReqRejectJoinTeam RejectJoinTeam = 54;
  bool has_rejectjointeam() const;
  private:
  bool _internal_has_rejectjointeam() const;
  public:
  void clear_rejectjointeam();
  const ::msg::CSReqRejectJoinTeam& rejectjointeam() const;
  PROTOBUF_NODISCARD ::msg::CSReqRejectJoinTeam* release_rejectjointeam();
  ::msg::CSReqRejectJoinTeam* mutable_rejectjointeam();
  void set_allocated_rejectjointeam(::msg::CSReqRejectJoinTeam* rejectjointeam);
  private:
  const ::msg::CSReqRejectJoinTeam& _internal_rejectjointeam() const;
  ::msg::CSReqRejectJoinTeam* _internal_mutable_rejectjointeam();
  public:
  void unsafe_arena_set_allocated_rejectjointeam(
      ::msg::CSReqRejectJoinTeam* rejectjointeam);
  ::msg::CSReqRejectJoinTeam* unsafe_arena_release_rejectjointeam();

  // .msg.CSReqShieldChat ShieldChat = 55;
  bool has_shieldchat() const;
  private:
  bool _internal_has_shieldchat() const;
  public:
  void clear_shieldchat();
  const ::msg::CSReqShieldChat& shieldchat() const;
  PROTOBUF_NODISCARD ::msg::CSReqShieldChat* release_shieldchat();
  ::msg::CSReqShieldChat* mutable_shieldchat();
  void set_allocated_shieldchat(::msg::CSReqShieldChat* shieldchat);
  private:
  const ::msg::CSReqShieldChat& _internal_shieldchat() const;
  ::msg::CSReqShieldChat* _internal_mutable_shieldchat();
  public:
  void unsafe_arena_set_allocated_shieldchat(
      ::msg::CSReqShieldChat* shieldchat);
  ::msg::CSReqShieldChat* unsafe_arena_release_shieldchat();

  // .msg.CSReqBuyPassportLevel BuyPassportLevel = 56;
  bool has_buypassportlevel() const;
  private:
  bool _internal_has_buypassportlevel() const;
  public:
  void clear_buypassportlevel();
  const ::msg::CSReqBuyPassportLevel& buypassportlevel() const;
  PROTOBUF_NODISCARD ::msg::CSReqBuyPassportLevel* release_buypassportlevel();
  ::msg::CSReqBuyPassportLevel* mutable_buypassportlevel();
  void set_allocated_buypassportlevel(::msg::CSReqBuyPassportLevel* buypassportlevel);
  private:
  const ::msg::CSReqBuyPassportLevel& _internal_buypassportlevel() const;
  ::msg::CSReqBuyPassportLevel* _internal_mutable_buypassportlevel();
  public:
  void unsafe_arena_set_allocated_buypassportlevel(
      ::msg::CSReqBuyPassportLevel* buypassportlevel);
  ::msg::CSReqBuyPassportLevel* unsafe_arena_release_buypassportlevel();

  // .msg.CSReqUpgradePassport UpgradePassport = 57;
  bool has_upgradepassport() const;
  private:
  bool _internal_has_upgradepassport() const;
  public:
  void clear_upgradepassport();
  const ::msg::CSReqUpgradePassport& upgradepassport() const;
  PROTOBUF_NODISCARD ::msg::CSReqUpgradePassport* release_upgradepassport();
  ::msg::CSReqUpgradePassport* mutable_upgradepassport();
  void set_allocated_upgradepassport(::msg::CSReqUpgradePassport* upgradepassport);
  private:
  const ::msg::CSReqUpgradePassport& _internal_upgradepassport() const;
  ::msg::CSReqUpgradePassport* _internal_mutable_upgradepassport();
  public:
  void unsafe_arena_set_allocated_upgradepassport(
      ::msg::CSReqUpgradePassport* upgradepassport);
  ::msg::CSReqUpgradePassport* unsafe_arena_release_upgradepassport();

  // .msg.CSReqGetPassportLevelAward GetPassportLevelAward = 58;
  bool has_getpassportlevelaward() const;
  private:
  bool _internal_has_getpassportlevelaward() const;
  public:
  void clear_getpassportlevelaward();
  const ::msg::CSReqGetPassportLevelAward& getpassportlevelaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetPassportLevelAward* release_getpassportlevelaward();
  ::msg::CSReqGetPassportLevelAward* mutable_getpassportlevelaward();
  void set_allocated_getpassportlevelaward(::msg::CSReqGetPassportLevelAward* getpassportlevelaward);
  private:
  const ::msg::CSReqGetPassportLevelAward& _internal_getpassportlevelaward() const;
  ::msg::CSReqGetPassportLevelAward* _internal_mutable_getpassportlevelaward();
  public:
  void unsafe_arena_set_allocated_getpassportlevelaward(
      ::msg::CSReqGetPassportLevelAward* getpassportlevelaward);
  ::msg::CSReqGetPassportLevelAward* unsafe_arena_release_getpassportlevelaward();

  // .msg.CSReqGetPassportTaskAward GetPassportTaskAward = 59;
  bool has_getpassporttaskaward() const;
  private:
  bool _internal_has_getpassporttaskaward() const;
  public:
  void clear_getpassporttaskaward();
  const ::msg::CSReqGetPassportTaskAward& getpassporttaskaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetPassportTaskAward* release_getpassporttaskaward();
  ::msg::CSReqGetPassportTaskAward* mutable_getpassporttaskaward();
  void set_allocated_getpassporttaskaward(::msg::CSReqGetPassportTaskAward* getpassporttaskaward);
  private:
  const ::msg::CSReqGetPassportTaskAward& _internal_getpassporttaskaward() const;
  ::msg::CSReqGetPassportTaskAward* _internal_mutable_getpassporttaskaward();
  public:
  void unsafe_arena_set_allocated_getpassporttaskaward(
      ::msg::CSReqGetPassportTaskAward* getpassporttaskaward);
  ::msg::CSReqGetPassportTaskAward* unsafe_arena_release_getpassporttaskaward();

  // .msg.CSReqTelBook TelBook = 60;
  bool has_telbook() const;
  private:
  bool _internal_has_telbook() const;
  public:
  void clear_telbook();
  const ::msg::CSReqTelBook& telbook() const;
  PROTOBUF_NODISCARD ::msg::CSReqTelBook* release_telbook();
  ::msg::CSReqTelBook* mutable_telbook();
  void set_allocated_telbook(::msg::CSReqTelBook* telbook);
  private:
  const ::msg::CSReqTelBook& _internal_telbook() const;
  ::msg::CSReqTelBook* _internal_mutable_telbook();
  public:
  void unsafe_arena_set_allocated_telbook(
      ::msg::CSReqTelBook* telbook);
  ::msg::CSReqTelBook* unsafe_arena_release_telbook();

  // .msg.CSReqActivatePassport ActivatePassport = 61;
  bool has_activatepassport() const;
  private:
  bool _internal_has_activatepassport() const;
  public:
  void clear_activatepassport();
  const ::msg::CSReqActivatePassport& activatepassport() const;
  PROTOBUF_NODISCARD ::msg::CSReqActivatePassport* release_activatepassport();
  ::msg::CSReqActivatePassport* mutable_activatepassport();
  void set_allocated_activatepassport(::msg::CSReqActivatePassport* activatepassport);
  private:
  const ::msg::CSReqActivatePassport& _internal_activatepassport() const;
  ::msg::CSReqActivatePassport* _internal_mutable_activatepassport();
  public:
  void unsafe_arena_set_allocated_activatepassport(
      ::msg::CSReqActivatePassport* activatepassport);
  ::msg::CSReqActivatePassport* unsafe_arena_release_activatepassport();

  // .msg.CSReqRankSeasonEval RankSeasonEval = 62;
  bool has_rankseasoneval() const;
  private:
  bool _internal_has_rankseasoneval() const;
  public:
  void clear_rankseasoneval();
  const ::msg::CSReqRankSeasonEval& rankseasoneval() const;
  PROTOBUF_NODISCARD ::msg::CSReqRankSeasonEval* release_rankseasoneval();
  ::msg::CSReqRankSeasonEval* mutable_rankseasoneval();
  void set_allocated_rankseasoneval(::msg::CSReqRankSeasonEval* rankseasoneval);
  private:
  const ::msg::CSReqRankSeasonEval& _internal_rankseasoneval() const;
  ::msg::CSReqRankSeasonEval* _internal_mutable_rankseasoneval();
  public:
  void unsafe_arena_set_allocated_rankseasoneval(
      ::msg::CSReqRankSeasonEval* rankseasoneval);
  ::msg::CSReqRankSeasonEval* unsafe_arena_release_rankseasoneval();

  // .msg.CSReqBindAccount BindAccount = 63;
  bool has_bindaccount() const;
  private:
  bool _internal_has_bindaccount() const;
  public:
  void clear_bindaccount();
  const ::msg::CSReqBindAccount& bindaccount() const;
  PROTOBUF_NODISCARD ::msg::CSReqBindAccount* release_bindaccount();
  ::msg::CSReqBindAccount* mutable_bindaccount();
  void set_allocated_bindaccount(::msg::CSReqBindAccount* bindaccount);
  private:
  const ::msg::CSReqBindAccount& _internal_bindaccount() const;
  ::msg::CSReqBindAccount* _internal_mutable_bindaccount();
  public:
  void unsafe_arena_set_allocated_bindaccount(
      ::msg::CSReqBindAccount* bindaccount);
  ::msg::CSReqBindAccount* unsafe_arena_release_bindaccount();

  // .msg.CSReqIncAdShowCount IncAdsShowCount = 64;
  bool has_incadsshowcount() const;
  private:
  bool _internal_has_incadsshowcount() const;
  public:
  void clear_incadsshowcount();
  const ::msg::CSReqIncAdShowCount& incadsshowcount() const;
  PROTOBUF_NODISCARD ::msg::CSReqIncAdShowCount* release_incadsshowcount();
  ::msg::CSReqIncAdShowCount* mutable_incadsshowcount();
  void set_allocated_incadsshowcount(::msg::CSReqIncAdShowCount* incadsshowcount);
  private:
  const ::msg::CSReqIncAdShowCount& _internal_incadsshowcount() const;
  ::msg::CSReqIncAdShowCount* _internal_mutable_incadsshowcount();
  public:
  void unsafe_arena_set_allocated_incadsshowcount(
      ::msg::CSReqIncAdShowCount* incadsshowcount);
  ::msg::CSReqIncAdShowCount* unsafe_arena_release_incadsshowcount();

  // .msg.CSReqUseBonusCard UseBonusCard = 65;
  bool has_usebonuscard() const;
  private:
  bool _internal_has_usebonuscard() const;
  public:
  void clear_usebonuscard();
  const ::msg::CSReqUseBonusCard& usebonuscard() const;
  PROTOBUF_NODISCARD ::msg::CSReqUseBonusCard* release_usebonuscard();
  ::msg::CSReqUseBonusCard* mutable_usebonuscard();
  void set_allocated_usebonuscard(::msg::CSReqUseBonusCard* usebonuscard);
  private:
  const ::msg::CSReqUseBonusCard& _internal_usebonuscard() const;
  ::msg::CSReqUseBonusCard* _internal_mutable_usebonuscard();
  public:
  void unsafe_arena_set_allocated_usebonuscard(
      ::msg::CSReqUseBonusCard* usebonuscard);
  ::msg::CSReqUseBonusCard* unsafe_arena_release_usebonuscard();

  // .msg.CSReqGetSeasonAward GetSeasonAward = 66;
  bool has_getseasonaward() const;
  private:
  bool _internal_has_getseasonaward() const;
  public:
  void clear_getseasonaward();
  const ::msg::CSReqGetSeasonAward& getseasonaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetSeasonAward* release_getseasonaward();
  ::msg::CSReqGetSeasonAward* mutable_getseasonaward();
  void set_allocated_getseasonaward(::msg::CSReqGetSeasonAward* getseasonaward);
  private:
  const ::msg::CSReqGetSeasonAward& _internal_getseasonaward() const;
  ::msg::CSReqGetSeasonAward* _internal_mutable_getseasonaward();
  public:
  void unsafe_arena_set_allocated_getseasonaward(
      ::msg::CSReqGetSeasonAward* getseasonaward);
  ::msg::CSReqGetSeasonAward* unsafe_arena_release_getseasonaward();

  // .msg.CSReqGetAlphaActivityAward GetAlphaActivityAward = 67;
  bool has_getalphaactivityaward() const;
  private:
  bool _internal_has_getalphaactivityaward() const;
  public:
  void clear_getalphaactivityaward();
  const ::msg::CSReqGetAlphaActivityAward& getalphaactivityaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetAlphaActivityAward* release_getalphaactivityaward();
  ::msg::CSReqGetAlphaActivityAward* mutable_getalphaactivityaward();
  void set_allocated_getalphaactivityaward(::msg::CSReqGetAlphaActivityAward* getalphaactivityaward);
  private:
  const ::msg::CSReqGetAlphaActivityAward& _internal_getalphaactivityaward() const;
  ::msg::CSReqGetAlphaActivityAward* _internal_mutable_getalphaactivityaward();
  public:
  void unsafe_arena_set_allocated_getalphaactivityaward(
      ::msg::CSReqGetAlphaActivityAward* getalphaactivityaward);
  ::msg::CSReqGetAlphaActivityAward* unsafe_arena_release_getalphaactivityaward();

  // .msg.CSReqGetLanguageData GetLanguageData = 68;
  bool has_getlanguagedata() const;
  private:
  bool _internal_has_getlanguagedata() const;
  public:
  void clear_getlanguagedata();
  const ::msg::CSReqGetLanguageData& getlanguagedata() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetLanguageData* release_getlanguagedata();
  ::msg::CSReqGetLanguageData* mutable_getlanguagedata();
  void set_allocated_getlanguagedata(::msg::CSReqGetLanguageData* getlanguagedata);
  private:
  const ::msg::CSReqGetLanguageData& _internal_getlanguagedata() const;
  ::msg::CSReqGetLanguageData* _internal_mutable_getlanguagedata();
  public:
  void unsafe_arena_set_allocated_getlanguagedata(
      ::msg::CSReqGetLanguageData* getlanguagedata);
  ::msg::CSReqGetLanguageData* unsafe_arena_release_getlanguagedata();

  // .msg.CSReqGetActivityAward GetActivityAward = 69;
  bool has_getactivityaward() const;
  private:
  bool _internal_has_getactivityaward() const;
  public:
  void clear_getactivityaward();
  const ::msg::CSReqGetActivityAward& getactivityaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetActivityAward* release_getactivityaward();
  ::msg::CSReqGetActivityAward* mutable_getactivityaward();
  void set_allocated_getactivityaward(::msg::CSReqGetActivityAward* getactivityaward);
  private:
  const ::msg::CSReqGetActivityAward& _internal_getactivityaward() const;
  ::msg::CSReqGetActivityAward* _internal_mutable_getactivityaward();
  public:
  void unsafe_arena_set_allocated_getactivityaward(
      ::msg::CSReqGetActivityAward* getactivityaward);
  ::msg::CSReqGetActivityAward* unsafe_arena_release_getactivityaward();

  // .msg.CSReqGetActivityData GetActivityData = 70;
  bool has_getactivitydata() const;
  private:
  bool _internal_has_getactivitydata() const;
  public:
  void clear_getactivitydata();
  const ::msg::CSReqGetActivityData& getactivitydata() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetActivityData* release_getactivitydata();
  ::msg::CSReqGetActivityData* mutable_getactivitydata();
  void set_allocated_getactivitydata(::msg::CSReqGetActivityData* getactivitydata);
  private:
  const ::msg::CSReqGetActivityData& _internal_getactivitydata() const;
  ::msg::CSReqGetActivityData* _internal_mutable_getactivitydata();
  public:
  void unsafe_arena_set_allocated_getactivitydata(
      ::msg::CSReqGetActivityData* getactivitydata);
  ::msg::CSReqGetActivityData* unsafe_arena_release_getactivitydata();

  // .msg.CSReqSendSms SendSms = 71;
  bool has_sendsms() const;
  private:
  bool _internal_has_sendsms() const;
  public:
  void clear_sendsms();
  const ::msg::CSReqSendSms& sendsms() const;
  PROTOBUF_NODISCARD ::msg::CSReqSendSms* release_sendsms();
  ::msg::CSReqSendSms* mutable_sendsms();
  void set_allocated_sendsms(::msg::CSReqSendSms* sendsms);
  private:
  const ::msg::CSReqSendSms& _internal_sendsms() const;
  ::msg::CSReqSendSms* _internal_mutable_sendsms();
  public:
  void unsafe_arena_set_allocated_sendsms(
      ::msg::CSReqSendSms* sendsms);
  ::msg::CSReqSendSms* unsafe_arena_release_sendsms();

  // .msg.CSReqGetMeleeAward GetMeleeAward = 72;
  bool has_getmeleeaward() const;
  private:
  bool _internal_has_getmeleeaward() const;
  public:
  void clear_getmeleeaward();
  const ::msg::CSReqGetMeleeAward& getmeleeaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetMeleeAward* release_getmeleeaward();
  ::msg::CSReqGetMeleeAward* mutable_getmeleeaward();
  void set_allocated_getmeleeaward(::msg::CSReqGetMeleeAward* getmeleeaward);
  private:
  const ::msg::CSReqGetMeleeAward& _internal_getmeleeaward() const;
  ::msg::CSReqGetMeleeAward* _internal_mutable_getmeleeaward();
  public:
  void unsafe_arena_set_allocated_getmeleeaward(
      ::msg::CSReqGetMeleeAward* getmeleeaward);
  ::msg::CSReqGetMeleeAward* unsafe_arena_release_getmeleeaward();

  // .msg.CSReqAddAiToTeam AddAiToTeam = 73;
  bool has_addaitoteam() const;
  private:
  bool _internal_has_addaitoteam() const;
  public:
  void clear_addaitoteam();
  const ::msg::CSReqAddAiToTeam& addaitoteam() const;
  PROTOBUF_NODISCARD ::msg::CSReqAddAiToTeam* release_addaitoteam();
  ::msg::CSReqAddAiToTeam* mutable_addaitoteam();
  void set_allocated_addaitoteam(::msg::CSReqAddAiToTeam* addaitoteam);
  private:
  const ::msg::CSReqAddAiToTeam& _internal_addaitoteam() const;
  ::msg::CSReqAddAiToTeam* _internal_mutable_addaitoteam();
  public:
  void unsafe_arena_set_allocated_addaitoteam(
      ::msg::CSReqAddAiToTeam* addaitoteam);
  ::msg::CSReqAddAiToTeam* unsafe_arena_release_addaitoteam();

  // .msg.CSReqShare Share = 74;
  bool has_share() const;
  private:
  bool _internal_has_share() const;
  public:
  void clear_share();
  const ::msg::CSReqShare& share() const;
  PROTOBUF_NODISCARD ::msg::CSReqShare* release_share();
  ::msg::CSReqShare* mutable_share();
  void set_allocated_share(::msg::CSReqShare* share);
  private:
  const ::msg::CSReqShare& _internal_share() const;
  ::msg::CSReqShare* _internal_mutable_share();
  public:
  void unsafe_arena_set_allocated_share(
      ::msg::CSReqShare* share);
  ::msg::CSReqShare* unsafe_arena_release_share();

  // .msg.CSReqSkipInterface SkipInterface = 75;
  bool has_skipinterface() const;
  private:
  bool _internal_has_skipinterface() const;
  public:
  void clear_skipinterface();
  const ::msg::CSReqSkipInterface& skipinterface() const;
  PROTOBUF_NODISCARD ::msg::CSReqSkipInterface* release_skipinterface();
  ::msg::CSReqSkipInterface* mutable_skipinterface();
  void set_allocated_skipinterface(::msg::CSReqSkipInterface* skipinterface);
  private:
  const ::msg::CSReqSkipInterface& _internal_skipinterface() const;
  ::msg::CSReqSkipInterface* _internal_mutable_skipinterface();
  public:
  void unsafe_arena_set_allocated_skipinterface(
      ::msg::CSReqSkipInterface* skipinterface);
  ::msg::CSReqSkipInterface* unsafe_arena_release_skipinterface();

  // .msg.CSReqTeamGame TeamGame = 76;
  bool has_teamgame() const;
  private:
  bool _internal_has_teamgame() const;
  public:
  void clear_teamgame();
  const ::msg::CSReqTeamGame& teamgame() const;
  PROTOBUF_NODISCARD ::msg::CSReqTeamGame* release_teamgame();
  ::msg::CSReqTeamGame* mutable_teamgame();
  void set_allocated_teamgame(::msg::CSReqTeamGame* teamgame);
  private:
  const ::msg::CSReqTeamGame& _internal_teamgame() const;
  ::msg::CSReqTeamGame* _internal_mutable_teamgame();
  public:
  void unsafe_arena_set_allocated_teamgame(
      ::msg::CSReqTeamGame* teamgame);
  ::msg::CSReqTeamGame* unsafe_arena_release_teamgame();

  // .msg.CSReqSetTeamMode SetTeamMode = 77;
  bool has_setteammode() const;
  private:
  bool _internal_has_setteammode() const;
  public:
  void clear_setteammode();
  const ::msg::CSReqSetTeamMode& setteammode() const;
  PROTOBUF_NODISCARD ::msg::CSReqSetTeamMode* release_setteammode();
  ::msg::CSReqSetTeamMode* mutable_setteammode();
  void set_allocated_setteammode(::msg::CSReqSetTeamMode* setteammode);
  private:
  const ::msg::CSReqSetTeamMode& _internal_setteammode() const;
  ::msg::CSReqSetTeamMode* _internal_mutable_setteammode();
  public:
  void unsafe_arena_set_allocated_setteammode(
      ::msg::CSReqSetTeamMode* setteammode);
  ::msg::CSReqSetTeamMode* unsafe_arena_release_setteammode();

  // .msg.CSReqSetHistoryPvpShowPermission HistoryPvpShowPermission = 78;
  bool has_historypvpshowpermission() const;
  private:
  bool _internal_has_historypvpshowpermission() const;
  public:
  void clear_historypvpshowpermission();
  const ::msg::CSReqSetHistoryPvpShowPermission& historypvpshowpermission() const;
  PROTOBUF_NODISCARD ::msg::CSReqSetHistoryPvpShowPermission* release_historypvpshowpermission();
  ::msg::CSReqSetHistoryPvpShowPermission* mutable_historypvpshowpermission();
  void set_allocated_historypvpshowpermission(::msg::CSReqSetHistoryPvpShowPermission* historypvpshowpermission);
  private:
  const ::msg::CSReqSetHistoryPvpShowPermission& _internal_historypvpshowpermission() const;
  ::msg::CSReqSetHistoryPvpShowPermission* _internal_mutable_historypvpshowpermission();
  public:
  void unsafe_arena_set_allocated_historypvpshowpermission(
      ::msg::CSReqSetHistoryPvpShowPermission* historypvpshowpermission);
  ::msg::CSReqSetHistoryPvpShowPermission* unsafe_arena_release_historypvpshowpermission();

  // .msg.CSReqSearchTeam SearchTeam = 79;
  bool has_searchteam() const;
  private:
  bool _internal_has_searchteam() const;
  public:
  void clear_searchteam();
  const ::msg::CSReqSearchTeam& searchteam() const;
  PROTOBUF_NODISCARD ::msg::CSReqSearchTeam* release_searchteam();
  ::msg::CSReqSearchTeam* mutable_searchteam();
  void set_allocated_searchteam(::msg::CSReqSearchTeam* searchteam);
  private:
  const ::msg::CSReqSearchTeam& _internal_searchteam() const;
  ::msg::CSReqSearchTeam* _internal_mutable_searchteam();
  public:
  void unsafe_arena_set_allocated_searchteam(
      ::msg::CSReqSearchTeam* searchteam);
  ::msg::CSReqSearchTeam* unsafe_arena_release_searchteam();

  // .msg.CSReqApplyChat ApplyChat = 80;
  bool has_applychat() const;
  private:
  bool _internal_has_applychat() const;
  public:
  void clear_applychat();
  const ::msg::CSReqApplyChat& applychat() const;
  PROTOBUF_NODISCARD ::msg::CSReqApplyChat* release_applychat();
  ::msg::CSReqApplyChat* mutable_applychat();
  void set_allocated_applychat(::msg::CSReqApplyChat* applychat);
  private:
  const ::msg::CSReqApplyChat& _internal_applychat() const;
  ::msg::CSReqApplyChat* _internal_mutable_applychat();
  public:
  void unsafe_arena_set_allocated_applychat(
      ::msg::CSReqApplyChat* applychat);
  ::msg::CSReqApplyChat* unsafe_arena_release_applychat();

  // .msg.CSReqChatLogin ChatLogin = 81;
  bool has_chatlogin() const;
  private:
  bool _internal_has_chatlogin() const;
  public:
  void clear_chatlogin();
  const ::msg::CSReqChatLogin& chatlogin() const;
  PROTOBUF_NODISCARD ::msg::CSReqChatLogin* release_chatlogin();
  ::msg::CSReqChatLogin* mutable_chatlogin();
  void set_allocated_chatlogin(::msg::CSReqChatLogin* chatlogin);
  private:
  const ::msg::CSReqChatLogin& _internal_chatlogin() const;
  ::msg::CSReqChatLogin* _internal_mutable_chatlogin();
  public:
  void unsafe_arena_set_allocated_chatlogin(
      ::msg::CSReqChatLogin* chatlogin);
  ::msg::CSReqChatLogin* unsafe_arena_release_chatlogin();

  // .msg.CSReqProbeNetDelay ProbeNetDelay = 82;
  bool has_probenetdelay() const;
  private:
  bool _internal_has_probenetdelay() const;
  public:
  void clear_probenetdelay();
  const ::msg::CSReqProbeNetDelay& probenetdelay() const;
  PROTOBUF_NODISCARD ::msg::CSReqProbeNetDelay* release_probenetdelay();
  ::msg::CSReqProbeNetDelay* mutable_probenetdelay();
  void set_allocated_probenetdelay(::msg::CSReqProbeNetDelay* probenetdelay);
  private:
  const ::msg::CSReqProbeNetDelay& _internal_probenetdelay() const;
  ::msg::CSReqProbeNetDelay* _internal_mutable_probenetdelay();
  public:
  void unsafe_arena_set_allocated_probenetdelay(
      ::msg::CSReqProbeNetDelay* probenetdelay);
  ::msg::CSReqProbeNetDelay* unsafe_arena_release_probenetdelay();

  // .msg.CSReqGetEggs GetEggs = 83;
  bool has_geteggs() const;
  private:
  bool _internal_has_geteggs() const;
  public:
  void clear_geteggs();
  const ::msg::CSReqGetEggs& geteggs() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetEggs* release_geteggs();
  ::msg::CSReqGetEggs* mutable_geteggs();
  void set_allocated_geteggs(::msg::CSReqGetEggs* geteggs);
  private:
  const ::msg::CSReqGetEggs& _internal_geteggs() const;
  ::msg::CSReqGetEggs* _internal_mutable_geteggs();
  public:
  void unsafe_arena_set_allocated_geteggs(
      ::msg::CSReqGetEggs* geteggs);
  ::msg::CSReqGetEggs* unsafe_arena_release_geteggs();

  // .msg.CSReqBuyGoods BuyGoods = 84;
  bool has_buygoods() const;
  private:
  bool _internal_has_buygoods() const;
  public:
  void clear_buygoods();
  const ::msg::CSReqBuyGoods& buygoods() const;
  PROTOBUF_NODISCARD ::msg::CSReqBuyGoods* release_buygoods();
  ::msg::CSReqBuyGoods* mutable_buygoods();
  void set_allocated_buygoods(::msg::CSReqBuyGoods* buygoods);
  private:
  const ::msg::CSReqBuyGoods& _internal_buygoods() const;
  ::msg::CSReqBuyGoods* _internal_mutable_buygoods();
  public:
  void unsafe_arena_set_allocated_buygoods(
      ::msg::CSReqBuyGoods* buygoods);
  ::msg::CSReqBuyGoods* unsafe_arena_release_buygoods();

  // .msg.CSReqExchangePassportGoods ExchangePassportGoods = 85;
  bool has_exchangepassportgoods() const;
  private:
  bool _internal_has_exchangepassportgoods() const;
  public:
  void clear_exchangepassportgoods();
  const ::msg::CSReqExchangePassportGoods& exchangepassportgoods() const;
  PROTOBUF_NODISCARD ::msg::CSReqExchangePassportGoods* release_exchangepassportgoods();
  ::msg::CSReqExchangePassportGoods* mutable_exchangepassportgoods();
  void set_allocated_exchangepassportgoods(::msg::CSReqExchangePassportGoods* exchangepassportgoods);
  private:
  const ::msg::CSReqExchangePassportGoods& _internal_exchangepassportgoods() const;
  ::msg::CSReqExchangePassportGoods* _internal_mutable_exchangepassportgoods();
  public:
  void unsafe_arena_set_allocated_exchangepassportgoods(
      ::msg::CSReqExchangePassportGoods* exchangepassportgoods);
  ::msg::CSReqExchangePassportGoods* unsafe_arena_release_exchangepassportgoods();

  // .msg.CSReqUsePassportTaskCard UsePassportTaskCard = 86;
  bool has_usepassporttaskcard() const;
  private:
  bool _internal_has_usepassporttaskcard() const;
  public:
  void clear_usepassporttaskcard();
  const ::msg::CSReqUsePassportTaskCard& usepassporttaskcard() const;
  PROTOBUF_NODISCARD ::msg::CSReqUsePassportTaskCard* release_usepassporttaskcard();
  ::msg::CSReqUsePassportTaskCard* mutable_usepassporttaskcard();
  void set_allocated_usepassporttaskcard(::msg::CSReqUsePassportTaskCard* usepassporttaskcard);
  private:
  const ::msg::CSReqUsePassportTaskCard& _internal_usepassporttaskcard() const;
  ::msg::CSReqUsePassportTaskCard* _internal_mutable_usepassporttaskcard();
  public:
  void unsafe_arena_set_allocated_usepassporttaskcard(
      ::msg::CSReqUsePassportTaskCard* usepassporttaskcard);
  ::msg::CSReqUsePassportTaskCard* unsafe_arena_release_usepassporttaskcard();

  // .msg.CSReqOpenRandChest OpenRandChest = 87;
  bool has_openrandchest() const;
  private:
  bool _internal_has_openrandchest() const;
  public:
  void clear_openrandchest();
  const ::msg::CSReqOpenRandChest& openrandchest() const;
  PROTOBUF_NODISCARD ::msg::CSReqOpenRandChest* release_openrandchest();
  ::msg::CSReqOpenRandChest* mutable_openrandchest();
  void set_allocated_openrandchest(::msg::CSReqOpenRandChest* openrandchest);
  private:
  const ::msg::CSReqOpenRandChest& _internal_openrandchest() const;
  ::msg::CSReqOpenRandChest* _internal_mutable_openrandchest();
  public:
  void unsafe_arena_set_allocated_openrandchest(
      ::msg::CSReqOpenRandChest* openrandchest);
  ::msg::CSReqOpenRandChest* unsafe_arena_release_openrandchest();

  // .msg.CSReqEggLottery EggLottery = 88;
  bool has_egglottery() const;
  private:
  bool _internal_has_egglottery() const;
  public:
  void clear_egglottery();
  const ::msg::CSReqEggLottery& egglottery() const;
  PROTOBUF_NODISCARD ::msg::CSReqEggLottery* release_egglottery();
  ::msg::CSReqEggLottery* mutable_egglottery();
  void set_allocated_egglottery(::msg::CSReqEggLottery* egglottery);
  private:
  const ::msg::CSReqEggLottery& _internal_egglottery() const;
  ::msg::CSReqEggLottery* _internal_mutable_egglottery();
  public:
  void unsafe_arena_set_allocated_egglottery(
      ::msg::CSReqEggLottery* egglottery);
  ::msg::CSReqEggLottery* unsafe_arena_release_egglottery();

  // .msg.CSReqQueryDiamondBalance QueryDiamondBalance = 89;
  bool has_querydiamondbalance() const;
  private:
  bool _internal_has_querydiamondbalance() const;
  public:
  void clear_querydiamondbalance();
  const ::msg::CSReqQueryDiamondBalance& querydiamondbalance() const;
  PROTOBUF_NODISCARD ::msg::CSReqQueryDiamondBalance* release_querydiamondbalance();
  ::msg::CSReqQueryDiamondBalance* mutable_querydiamondbalance();
  void set_allocated_querydiamondbalance(::msg::CSReqQueryDiamondBalance* querydiamondbalance);
  private:
  const ::msg::CSReqQueryDiamondBalance& _internal_querydiamondbalance() const;
  ::msg::CSReqQueryDiamondBalance* _internal_mutable_querydiamondbalance();
  public:
  void unsafe_arena_set_allocated_querydiamondbalance(
      ::msg::CSReqQueryDiamondBalance* querydiamondbalance);
  ::msg::CSReqQueryDiamondBalance* unsafe_arena_release_querydiamondbalance();

  // .msg.CSReqUseItem UseItem = 90;
  bool has_useitem() const;
  private:
  bool _internal_has_useitem() const;
  public:
  void clear_useitem();
  const ::msg::CSReqUseItem& useitem() const;
  PROTOBUF_NODISCARD ::msg::CSReqUseItem* release_useitem();
  ::msg::CSReqUseItem* mutable_useitem();
  void set_allocated_useitem(::msg::CSReqUseItem* useitem);
  private:
  const ::msg::CSReqUseItem& _internal_useitem() const;
  ::msg::CSReqUseItem* _internal_mutable_useitem();
  public:
  void unsafe_arena_set_allocated_useitem(
      ::msg::CSReqUseItem* useitem);
  ::msg::CSReqUseItem* unsafe_arena_release_useitem();

  // .msg.CSReqUseExperienceCard UseExperienceCard = 91;
  bool has_useexperiencecard() const;
  private:
  bool _internal_has_useexperiencecard() const;
  public:
  void clear_useexperiencecard();
  const ::msg::CSReqUseExperienceCard& useexperiencecard() const;
  PROTOBUF_NODISCARD ::msg::CSReqUseExperienceCard* release_useexperiencecard();
  ::msg::CSReqUseExperienceCard* mutable_useexperiencecard();
  void set_allocated_useexperiencecard(::msg::CSReqUseExperienceCard* useexperiencecard);
  private:
  const ::msg::CSReqUseExperienceCard& _internal_useexperiencecard() const;
  ::msg::CSReqUseExperienceCard* _internal_mutable_useexperiencecard();
  public:
  void unsafe_arena_set_allocated_useexperiencecard(
      ::msg::CSReqUseExperienceCard* useexperiencecard);
  ::msg::CSReqUseExperienceCard* unsafe_arena_release_useexperiencecard();

  // .msg.CSReqRandTargetItem RandTargetItem = 92;
  bool has_randtargetitem() const;
  private:
  bool _internal_has_randtargetitem() const;
  public:
  void clear_randtargetitem();
  const ::msg::CSReqRandTargetItem& randtargetitem() const;
  PROTOBUF_NODISCARD ::msg::CSReqRandTargetItem* release_randtargetitem();
  ::msg::CSReqRandTargetItem* mutable_randtargetitem();
  void set_allocated_randtargetitem(::msg::CSReqRandTargetItem* randtargetitem);
  private:
  const ::msg::CSReqRandTargetItem& _internal_randtargetitem() const;
  ::msg::CSReqRandTargetItem* _internal_mutable_randtargetitem();
  public:
  void unsafe_arena_set_allocated_randtargetitem(
      ::msg::CSReqRandTargetItem* randtargetitem);
  ::msg::CSReqRandTargetItem* unsafe_arena_release_randtargetitem();

  // .msg.CSReqAddBlacklist AddBlacklist = 93;
  bool has_addblacklist() const;
  private:
  bool _internal_has_addblacklist() const;
  public:
  void clear_addblacklist();
  const ::msg::CSReqAddBlacklist& addblacklist() const;
  PROTOBUF_NODISCARD ::msg::CSReqAddBlacklist* release_addblacklist();
  ::msg::CSReqAddBlacklist* mutable_addblacklist();
  void set_allocated_addblacklist(::msg::CSReqAddBlacklist* addblacklist);
  private:
  const ::msg::CSReqAddBlacklist& _internal_addblacklist() const;
  ::msg::CSReqAddBlacklist* _internal_mutable_addblacklist();
  public:
  void unsafe_arena_set_allocated_addblacklist(
      ::msg::CSReqAddBlacklist* addblacklist);
  ::msg::CSReqAddBlacklist* unsafe_arena_release_addblacklist();

  // .msg.CSReqRemoveBlacklist RemoveBlacklist = 94;
  bool has_removeblacklist() const;
  private:
  bool _internal_has_removeblacklist() const;
  public:
  void clear_removeblacklist();
  const ::msg::CSReqRemoveBlacklist& removeblacklist() const;
  PROTOBUF_NODISCARD ::msg::CSReqRemoveBlacklist* release_removeblacklist();
  ::msg::CSReqRemoveBlacklist* mutable_removeblacklist();
  void set_allocated_removeblacklist(::msg::CSReqRemoveBlacklist* removeblacklist);
  private:
  const ::msg::CSReqRemoveBlacklist& _internal_removeblacklist() const;
  ::msg::CSReqRemoveBlacklist* _internal_mutable_removeblacklist();
  public:
  void unsafe_arena_set_allocated_removeblacklist(
      ::msg::CSReqRemoveBlacklist* removeblacklist);
  ::msg::CSReqRemoveBlacklist* unsafe_arena_release_removeblacklist();

  // .msg.CSReqReportPlayerBirth ReportPlayerBirth = 95;
  bool has_reportplayerbirth() const;
  private:
  bool _internal_has_reportplayerbirth() const;
  public:
  void clear_reportplayerbirth();
  const ::msg::CSReqReportPlayerBirth& reportplayerbirth() const;
  PROTOBUF_NODISCARD ::msg::CSReqReportPlayerBirth* release_reportplayerbirth();
  ::msg::CSReqReportPlayerBirth* mutable_reportplayerbirth();
  void set_allocated_reportplayerbirth(::msg::CSReqReportPlayerBirth* reportplayerbirth);
  private:
  const ::msg::CSReqReportPlayerBirth& _internal_reportplayerbirth() const;
  ::msg::CSReqReportPlayerBirth* _internal_mutable_reportplayerbirth();
  public:
  void unsafe_arena_set_allocated_reportplayerbirth(
      ::msg::CSReqReportPlayerBirth* reportplayerbirth);
  ::msg::CSReqReportPlayerBirth* unsafe_arena_release_reportplayerbirth();

  // .msg.CSReqReportInfoInput ReportInfoInput = 96;
  bool has_reportinfoinput() const;
  private:
  bool _internal_has_reportinfoinput() const;
  public:
  void clear_reportinfoinput();
  const ::msg::CSReqReportInfoInput& reportinfoinput() const;
  PROTOBUF_NODISCARD ::msg::CSReqReportInfoInput* release_reportinfoinput();
  ::msg::CSReqReportInfoInput* mutable_reportinfoinput();
  void set_allocated_reportinfoinput(::msg::CSReqReportInfoInput* reportinfoinput);
  private:
  const ::msg::CSReqReportInfoInput& _internal_reportinfoinput() const;
  ::msg::CSReqReportInfoInput* _internal_mutable_reportinfoinput();
  public:
  void unsafe_arena_set_allocated_reportinfoinput(
      ::msg::CSReqReportInfoInput* reportinfoinput);
  ::msg::CSReqReportInfoInput* unsafe_arena_release_reportinfoinput();

  // .msg.CSReqSendVerificationCode SendVerificationCode = 97;
  bool has_sendverificationcode() const;
  private:
  bool _internal_has_sendverificationcode() const;
  public:
  void clear_sendverificationcode();
  const ::msg::CSReqSendVerificationCode& sendverificationcode() const;
  PROTOBUF_NODISCARD ::msg::CSReqSendVerificationCode* release_sendverificationcode();
  ::msg::CSReqSendVerificationCode* mutable_sendverificationcode();
  void set_allocated_sendverificationcode(::msg::CSReqSendVerificationCode* sendverificationcode);
  private:
  const ::msg::CSReqSendVerificationCode& _internal_sendverificationcode() const;
  ::msg::CSReqSendVerificationCode* _internal_mutable_sendverificationcode();
  public:
  void unsafe_arena_set_allocated_sendverificationcode(
      ::msg::CSReqSendVerificationCode* sendverificationcode);
  ::msg::CSReqSendVerificationCode* unsafe_arena_release_sendverificationcode();

  // .msg.CSReqBindPhoneNumber BindPhoneNumber = 98;
  bool has_bindphonenumber() const;
  private:
  bool _internal_has_bindphonenumber() const;
  public:
  void clear_bindphonenumber();
  const ::msg::CSReqBindPhoneNumber& bindphonenumber() const;
  PROTOBUF_NODISCARD ::msg::CSReqBindPhoneNumber* release_bindphonenumber();
  ::msg::CSReqBindPhoneNumber* mutable_bindphonenumber();
  void set_allocated_bindphonenumber(::msg::CSReqBindPhoneNumber* bindphonenumber);
  private:
  const ::msg::CSReqBindPhoneNumber& _internal_bindphonenumber() const;
  ::msg::CSReqBindPhoneNumber* _internal_mutable_bindphonenumber();
  public:
  void unsafe_arena_set_allocated_bindphonenumber(
      ::msg::CSReqBindPhoneNumber* bindphonenumber);
  ::msg::CSReqBindPhoneNumber* unsafe_arena_release_bindphonenumber();

  // .msg.CSReqWorldInvite WorldInvite = 99;
  bool has_worldinvite() const;
  private:
  bool _internal_has_worldinvite() const;
  public:
  void clear_worldinvite();
  const ::msg::CSReqWorldInvite& worldinvite() const;
  PROTOBUF_NODISCARD ::msg::CSReqWorldInvite* release_worldinvite();
  ::msg::CSReqWorldInvite* mutable_worldinvite();
  void set_allocated_worldinvite(::msg::CSReqWorldInvite* worldinvite);
  private:
  const ::msg::CSReqWorldInvite& _internal_worldinvite() const;
  ::msg::CSReqWorldInvite* _internal_mutable_worldinvite();
  public:
  void unsafe_arena_set_allocated_worldinvite(
      ::msg::CSReqWorldInvite* worldinvite);
  ::msg::CSReqWorldInvite* unsafe_arena_release_worldinvite();

  // .msg.CSReqRemoveExpireItem RemoveExpireItem = 100;
  bool has_removeexpireitem() const;
  private:
  bool _internal_has_removeexpireitem() const;
  public:
  void clear_removeexpireitem();
  const ::msg::CSReqRemoveExpireItem& removeexpireitem() const;
  PROTOBUF_NODISCARD ::msg::CSReqRemoveExpireItem* release_removeexpireitem();
  ::msg::CSReqRemoveExpireItem* mutable_removeexpireitem();
  void set_allocated_removeexpireitem(::msg::CSReqRemoveExpireItem* removeexpireitem);
  private:
  const ::msg::CSReqRemoveExpireItem& _internal_removeexpireitem() const;
  ::msg::CSReqRemoveExpireItem* _internal_mutable_removeexpireitem();
  public:
  void unsafe_arena_set_allocated_removeexpireitem(
      ::msg::CSReqRemoveExpireItem* removeexpireitem);
  ::msg::CSReqRemoveExpireItem* unsafe_arena_release_removeexpireitem();

  // .msg.CSReqGetMallGoods GetMallGoods = 101;
  bool has_getmallgoods() const;
  private:
  bool _internal_has_getmallgoods() const;
  public:
  void clear_getmallgoods();
  const ::msg::CSReqGetMallGoods& getmallgoods() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetMallGoods* release_getmallgoods();
  ::msg::CSReqGetMallGoods* mutable_getmallgoods();
  void set_allocated_getmallgoods(::msg::CSReqGetMallGoods* getmallgoods);
  private:
  const ::msg::CSReqGetMallGoods& _internal_getmallgoods() const;
  ::msg::CSReqGetMallGoods* _internal_mutable_getmallgoods();
  public:
  void unsafe_arena_set_allocated_getmallgoods(
      ::msg::CSReqGetMallGoods* getmallgoods);
  ::msg::CSReqGetMallGoods* unsafe_arena_release_getmallgoods();

  // .msg.CSReqBuyMallGoods BuyMallGoods = 102;
  bool has_buymallgoods() const;
  private:
  bool _internal_has_buymallgoods() const;
  public:
  void clear_buymallgoods();
  const ::msg::CSReqBuyMallGoods& buymallgoods() const;
  PROTOBUF_NODISCARD ::msg::CSReqBuyMallGoods* release_buymallgoods();
  ::msg::CSReqBuyMallGoods* mutable_buymallgoods();
  void set_allocated_buymallgoods(::msg::CSReqBuyMallGoods* buymallgoods);
  private:
  const ::msg::CSReqBuyMallGoods& _internal_buymallgoods() const;
  ::msg::CSReqBuyMallGoods* _internal_mutable_buymallgoods();
  public:
  void unsafe_arena_set_allocated_buymallgoods(
      ::msg::CSReqBuyMallGoods* buymallgoods);
  ::msg::CSReqBuyMallGoods* unsafe_arena_release_buymallgoods();

  // .msg.CSReqBindSharingCode BindSharingCode = 103;
  bool has_bindsharingcode() const;
  private:
  bool _internal_has_bindsharingcode() const;
  public:
  void clear_bindsharingcode();
  const ::msg::CSReqBindSharingCode& bindsharingcode() const;
  PROTOBUF_NODISCARD ::msg::CSReqBindSharingCode* release_bindsharingcode();
  ::msg::CSReqBindSharingCode* mutable_bindsharingcode();
  void set_allocated_bindsharingcode(::msg::CSReqBindSharingCode* bindsharingcode);
  private:
  const ::msg::CSReqBindSharingCode& _internal_bindsharingcode() const;
  ::msg::CSReqBindSharingCode* _internal_mutable_bindsharingcode();
  public:
  void unsafe_arena_set_allocated_bindsharingcode(
      ::msg::CSReqBindSharingCode* bindsharingcode);
  ::msg::CSReqBindSharingCode* unsafe_arena_release_bindsharingcode();

  // .msg.CSReqWXBlessBag WXBlessBag = 104;
  bool has_wxblessbag() const;
  private:
  bool _internal_has_wxblessbag() const;
  public:
  void clear_wxblessbag();
  const ::msg::CSReqWXBlessBag& wxblessbag() const;
  PROTOBUF_NODISCARD ::msg::CSReqWXBlessBag* release_wxblessbag();
  ::msg::CSReqWXBlessBag* mutable_wxblessbag();
  void set_allocated_wxblessbag(::msg::CSReqWXBlessBag* wxblessbag);
  private:
  const ::msg::CSReqWXBlessBag& _internal_wxblessbag() const;
  ::msg::CSReqWXBlessBag* _internal_mutable_wxblessbag();
  public:
  void unsafe_arena_set_allocated_wxblessbag(
      ::msg::CSReqWXBlessBag* wxblessbag);
  ::msg::CSReqWXBlessBag* unsafe_arena_release_wxblessbag();

  // .msg.CSReqUpdateFriendsInGame UpdateFriendsInGame = 105;
  bool has_updatefriendsingame() const;
  private:
  bool _internal_has_updatefriendsingame() const;
  public:
  void clear_updatefriendsingame();
  const ::msg::CSReqUpdateFriendsInGame& updatefriendsingame() const;
  PROTOBUF_NODISCARD ::msg::CSReqUpdateFriendsInGame* release_updatefriendsingame();
  ::msg::CSReqUpdateFriendsInGame* mutable_updatefriendsingame();
  void set_allocated_updatefriendsingame(::msg::CSReqUpdateFriendsInGame* updatefriendsingame);
  private:
  const ::msg::CSReqUpdateFriendsInGame& _internal_updatefriendsingame() const;
  ::msg::CSReqUpdateFriendsInGame* _internal_mutable_updatefriendsingame();
  public:
  void unsafe_arena_set_allocated_updatefriendsingame(
      ::msg::CSReqUpdateFriendsInGame* updatefriendsingame);
  ::msg::CSReqUpdateFriendsInGame* unsafe_arena_release_updatefriendsingame();

  // .msg.CSReqShareReward ShareReward = 106;
  bool has_sharereward() const;
  private:
  bool _internal_has_sharereward() const;
  public:
  void clear_sharereward();
  const ::msg::CSReqShareReward& sharereward() const;
  PROTOBUF_NODISCARD ::msg::CSReqShareReward* release_sharereward();
  ::msg::CSReqShareReward* mutable_sharereward();
  void set_allocated_sharereward(::msg::CSReqShareReward* sharereward);
  private:
  const ::msg::CSReqShareReward& _internal_sharereward() const;
  ::msg::CSReqShareReward* _internal_mutable_sharereward();
  public:
  void unsafe_arena_set_allocated_sharereward(
      ::msg::CSReqShareReward* sharereward);
  ::msg::CSReqShareReward* unsafe_arena_release_sharereward();

  // .msg.CSReqAllFightInfo AllFightInfo = 107;
  bool has_allfightinfo() const;
  private:
  bool _internal_has_allfightinfo() const;
  public:
  void clear_allfightinfo();
  const ::msg::CSReqAllFightInfo& allfightinfo() const;
  PROTOBUF_NODISCARD ::msg::CSReqAllFightInfo* release_allfightinfo();
  ::msg::CSReqAllFightInfo* mutable_allfightinfo();
  void set_allocated_allfightinfo(::msg::CSReqAllFightInfo* allfightinfo);
  private:
  const ::msg::CSReqAllFightInfo& _internal_allfightinfo() const;
  ::msg::CSReqAllFightInfo* _internal_mutable_allfightinfo();
  public:
  void unsafe_arena_set_allocated_allfightinfo(
      ::msg::CSReqAllFightInfo* allfightinfo);
  ::msg::CSReqAllFightInfo* unsafe_arena_release_allfightinfo();

  // .msg.CSReqGetOldPlayer GetOldPlayer = 108;
  bool has_getoldplayer() const;
  private:
  bool _internal_has_getoldplayer() const;
  public:
  void clear_getoldplayer();
  const ::msg::CSReqGetOldPlayer& getoldplayer() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetOldPlayer* release_getoldplayer();
  ::msg::CSReqGetOldPlayer* mutable_getoldplayer();
  void set_allocated_getoldplayer(::msg::CSReqGetOldPlayer* getoldplayer);
  private:
  const ::msg::CSReqGetOldPlayer& _internal_getoldplayer() const;
  ::msg::CSReqGetOldPlayer* _internal_mutable_getoldplayer();
  public:
  void unsafe_arena_set_allocated_getoldplayer(
      ::msg::CSReqGetOldPlayer* getoldplayer);
  ::msg::CSReqGetOldPlayer* unsafe_arena_release_getoldplayer();

  // .msg.CSReqBindOldPlayer BindOldPlayer = 109;
  bool has_bindoldplayer() const;
  private:
  bool _internal_has_bindoldplayer() const;
  public:
  void clear_bindoldplayer();
  const ::msg::CSReqBindOldPlayer& bindoldplayer() const;
  PROTOBUF_NODISCARD ::msg::CSReqBindOldPlayer* release_bindoldplayer();
  ::msg::CSReqBindOldPlayer* mutable_bindoldplayer();
  void set_allocated_bindoldplayer(::msg::CSReqBindOldPlayer* bindoldplayer);
  private:
  const ::msg::CSReqBindOldPlayer& _internal_bindoldplayer() const;
  ::msg::CSReqBindOldPlayer* _internal_mutable_bindoldplayer();
  public:
  void unsafe_arena_set_allocated_bindoldplayer(
      ::msg::CSReqBindOldPlayer* bindoldplayer);
  ::msg::CSReqBindOldPlayer* unsafe_arena_release_bindoldplayer();

  // .msg.CSReqSendVerificationCodeWithCheckRedis SendVerificationCodeWithCheckRedis = 110;
  bool has_sendverificationcodewithcheckredis() const;
  private:
  bool _internal_has_sendverificationcodewithcheckredis() const;
  public:
  void clear_sendverificationcodewithcheckredis();
  const ::msg::CSReqSendVerificationCodeWithCheckRedis& sendverificationcodewithcheckredis() const;
  PROTOBUF_NODISCARD ::msg::CSReqSendVerificationCodeWithCheckRedis* release_sendverificationcodewithcheckredis();
  ::msg::CSReqSendVerificationCodeWithCheckRedis* mutable_sendverificationcodewithcheckredis();
  void set_allocated_sendverificationcodewithcheckredis(::msg::CSReqSendVerificationCodeWithCheckRedis* sendverificationcodewithcheckredis);
  private:
  const ::msg::CSReqSendVerificationCodeWithCheckRedis& _internal_sendverificationcodewithcheckredis() const;
  ::msg::CSReqSendVerificationCodeWithCheckRedis* _internal_mutable_sendverificationcodewithcheckredis();
  public:
  void unsafe_arena_set_allocated_sendverificationcodewithcheckredis(
      ::msg::CSReqSendVerificationCodeWithCheckRedis* sendverificationcodewithcheckredis);
  ::msg::CSReqSendVerificationCodeWithCheckRedis* unsafe_arena_release_sendverificationcodewithcheckredis();

  // .msg.CSReqReportSetting ReportSetting = 111;
  bool has_reportsetting() const;
  private:
  bool _internal_has_reportsetting() const;
  public:
  void clear_reportsetting();
  const ::msg::CSReqReportSetting& reportsetting() const;
  PROTOBUF_NODISCARD ::msg::CSReqReportSetting* release_reportsetting();
  ::msg::CSReqReportSetting* mutable_reportsetting();
  void set_allocated_reportsetting(::msg::CSReqReportSetting* reportsetting);
  private:
  const ::msg::CSReqReportSetting& _internal_reportsetting() const;
  ::msg::CSReqReportSetting* _internal_mutable_reportsetting();
  public:
  void unsafe_arena_set_allocated_reportsetting(
      ::msg::CSReqReportSetting* reportsetting);
  ::msg::CSReqReportSetting* unsafe_arena_release_reportsetting();

  // .msg.CSReqAntiData AntiData = 112;
  bool has_antidata() const;
  private:
  bool _internal_has_antidata() const;
  public:
  void clear_antidata();
  const ::msg::CSReqAntiData& antidata() const;
  PROTOBUF_NODISCARD ::msg::CSReqAntiData* release_antidata();
  ::msg::CSReqAntiData* mutable_antidata();
  void set_allocated_antidata(::msg::CSReqAntiData* antidata);
  private:
  const ::msg::CSReqAntiData& _internal_antidata() const;
  ::msg::CSReqAntiData* _internal_mutable_antidata();
  public:
  void unsafe_arena_set_allocated_antidata(
      ::msg::CSReqAntiData* antidata);
  ::msg::CSReqAntiData* unsafe_arena_release_antidata();

  // .msg.CSReqTlogData TlogData = 113;
  bool has_tlogdata() const;
  private:
  bool _internal_has_tlogdata() const;
  public:
  void clear_tlogdata();
  const ::msg::CSReqTlogData& tlogdata() const;
  PROTOBUF_NODISCARD ::msg::CSReqTlogData* release_tlogdata();
  ::msg::CSReqTlogData* mutable_tlogdata();
  void set_allocated_tlogdata(::msg::CSReqTlogData* tlogdata);
  private:
  const ::msg::CSReqTlogData& _internal_tlogdata() const;
  ::msg::CSReqTlogData* _internal_mutable_tlogdata();
  public:
  void unsafe_arena_set_allocated_tlogdata(
      ::msg::CSReqTlogData* tlogdata);
  ::msg::CSReqTlogData* unsafe_arena_release_tlogdata();

  // .msg.CSReqDaySign DaySign = 114;
  bool has_daysign() const;
  private:
  bool _internal_has_daysign() const;
  public:
  void clear_daysign();
  const ::msg::CSReqDaySign& daysign() const;
  PROTOBUF_NODISCARD ::msg::CSReqDaySign* release_daysign();
  ::msg::CSReqDaySign* mutable_daysign();
  void set_allocated_daysign(::msg::CSReqDaySign* daysign);
  private:
  const ::msg::CSReqDaySign& _internal_daysign() const;
  ::msg::CSReqDaySign* _internal_mutable_daysign();
  public:
  void unsafe_arena_set_allocated_daysign(
      ::msg::CSReqDaySign* daysign);
  ::msg::CSReqDaySign* unsafe_arena_release_daysign();

  // .msg.CSReqDayFitAvoid DayFitAvoid = 115;
  bool has_dayfitavoid() const;
  private:
  bool _internal_has_dayfitavoid() const;
  public:
  void clear_dayfitavoid();
  const ::msg::CSReqDayFitAvoid& dayfitavoid() const;
  PROTOBUF_NODISCARD ::msg::CSReqDayFitAvoid* release_dayfitavoid();
  ::msg::CSReqDayFitAvoid* mutable_dayfitavoid();
  void set_allocated_dayfitavoid(::msg::CSReqDayFitAvoid* dayfitavoid);
  private:
  const ::msg::CSReqDayFitAvoid& _internal_dayfitavoid() const;
  ::msg::CSReqDayFitAvoid* _internal_mutable_dayfitavoid();
  public:
  void unsafe_arena_set_allocated_dayfitavoid(
      ::msg::CSReqDayFitAvoid* dayfitavoid);
  ::msg::CSReqDayFitAvoid* unsafe_arena_release_dayfitavoid();

  // .msg.CSReqShareCountAward ShareCountAward = 116;
  bool has_sharecountaward() const;
  private:
  bool _internal_has_sharecountaward() const;
  public:
  void clear_sharecountaward();
  const ::msg::CSReqShareCountAward& sharecountaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqShareCountAward* release_sharecountaward();
  ::msg::CSReqShareCountAward* mutable_sharecountaward();
  void set_allocated_sharecountaward(::msg::CSReqShareCountAward* sharecountaward);
  private:
  const ::msg::CSReqShareCountAward& _internal_sharecountaward() const;
  ::msg::CSReqShareCountAward* _internal_mutable_sharecountaward();
  public:
  void unsafe_arena_set_allocated_sharecountaward(
      ::msg::CSReqShareCountAward* sharecountaward);
  ::msg::CSReqShareCountAward* unsafe_arena_release_sharecountaward();

  // .msg.CSReqActItemExch ActItemExch = 117;
  bool has_actitemexch() const;
  private:
  bool _internal_has_actitemexch() const;
  public:
  void clear_actitemexch();
  const ::msg::CSReqActItemExch& actitemexch() const;
  PROTOBUF_NODISCARD ::msg::CSReqActItemExch* release_actitemexch();
  ::msg::CSReqActItemExch* mutable_actitemexch();
  void set_allocated_actitemexch(::msg::CSReqActItemExch* actitemexch);
  private:
  const ::msg::CSReqActItemExch& _internal_actitemexch() const;
  ::msg::CSReqActItemExch* _internal_mutable_actitemexch();
  public:
  void unsafe_arena_set_allocated_actitemexch(
      ::msg::CSReqActItemExch* actitemexch);
  ::msg::CSReqActItemExch* unsafe_arena_release_actitemexch();

  // .msg.CSReqRealationStar RealationStar = 118;
  bool has_realationstar() const;
  private:
  bool _internal_has_realationstar() const;
  public:
  void clear_realationstar();
  const ::msg::CSReqRealationStar& realationstar() const;
  PROTOBUF_NODISCARD ::msg::CSReqRealationStar* release_realationstar();
  ::msg::CSReqRealationStar* mutable_realationstar();
  void set_allocated_realationstar(::msg::CSReqRealationStar* realationstar);
  private:
  const ::msg::CSReqRealationStar& _internal_realationstar() const;
  ::msg::CSReqRealationStar* _internal_mutable_realationstar();
  public:
  void unsafe_arena_set_allocated_realationstar(
      ::msg::CSReqRealationStar* realationstar);
  ::msg::CSReqRealationStar* unsafe_arena_release_realationstar();

  // .msg.CSReqGetRealationStarInviteSucc GetRealationStarInviteSucc = 119;
  bool has_getrealationstarinvitesucc() const;
  private:
  bool _internal_has_getrealationstarinvitesucc() const;
  public:
  void clear_getrealationstarinvitesucc();
  const ::msg::CSReqGetRealationStarInviteSucc& getrealationstarinvitesucc() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetRealationStarInviteSucc* release_getrealationstarinvitesucc();
  ::msg::CSReqGetRealationStarInviteSucc* mutable_getrealationstarinvitesucc();
  void set_allocated_getrealationstarinvitesucc(::msg::CSReqGetRealationStarInviteSucc* getrealationstarinvitesucc);
  private:
  const ::msg::CSReqGetRealationStarInviteSucc& _internal_getrealationstarinvitesucc() const;
  ::msg::CSReqGetRealationStarInviteSucc* _internal_mutable_getrealationstarinvitesucc();
  public:
  void unsafe_arena_set_allocated_getrealationstarinvitesucc(
      ::msg::CSReqGetRealationStarInviteSucc* getrealationstarinvitesucc);
  ::msg::CSReqGetRealationStarInviteSucc* unsafe_arena_release_getrealationstarinvitesucc();

  // .msg.CSReqGetRealationStar GetRealationStar = 120;
  bool has_getrealationstar() const;
  private:
  bool _internal_has_getrealationstar() const;
  public:
  void clear_getrealationstar();
  const ::msg::CSReqGetRealationStar& getrealationstar() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetRealationStar* release_getrealationstar();
  ::msg::CSReqGetRealationStar* mutable_getrealationstar();
  void set_allocated_getrealationstar(::msg::CSReqGetRealationStar* getrealationstar);
  private:
  const ::msg::CSReqGetRealationStar& _internal_getrealationstar() const;
  ::msg::CSReqGetRealationStar* _internal_mutable_getrealationstar();
  public:
  void unsafe_arena_set_allocated_getrealationstar(
      ::msg::CSReqGetRealationStar* getrealationstar);
  ::msg::CSReqGetRealationStar* unsafe_arena_release_getrealationstar();

  // .msg.CSReqGetActRecord ReqActRecord = 121;
  bool has_reqactrecord() const;
  private:
  bool _internal_has_reqactrecord() const;
  public:
  void clear_reqactrecord();
  const ::msg::CSReqGetActRecord& reqactrecord() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetActRecord* release_reqactrecord();
  ::msg::CSReqGetActRecord* mutable_reqactrecord();
  void set_allocated_reqactrecord(::msg::CSReqGetActRecord* reqactrecord);
  private:
  const ::msg::CSReqGetActRecord& _internal_reqactrecord() const;
  ::msg::CSReqGetActRecord* _internal_mutable_reqactrecord();
  public:
  void unsafe_arena_set_allocated_reqactrecord(
      ::msg::CSReqGetActRecord* reqactrecord);
  ::msg::CSReqGetActRecord* unsafe_arena_release_reqactrecord();

  // .msg.CSReqJoinVoiceTeam JoinVoiceTeam = 122;
  bool has_joinvoiceteam() const;
  private:
  bool _internal_has_joinvoiceteam() const;
  public:
  void clear_joinvoiceteam();
  const ::msg::CSReqJoinVoiceTeam& joinvoiceteam() const;
  PROTOBUF_NODISCARD ::msg::CSReqJoinVoiceTeam* release_joinvoiceteam();
  ::msg::CSReqJoinVoiceTeam* mutable_joinvoiceteam();
  void set_allocated_joinvoiceteam(::msg::CSReqJoinVoiceTeam* joinvoiceteam);
  private:
  const ::msg::CSReqJoinVoiceTeam& _internal_joinvoiceteam() const;
  ::msg::CSReqJoinVoiceTeam* _internal_mutable_joinvoiceteam();
  public:
  void unsafe_arena_set_allocated_joinvoiceteam(
      ::msg::CSReqJoinVoiceTeam* joinvoiceteam);
  ::msg::CSReqJoinVoiceTeam* unsafe_arena_release_joinvoiceteam();

  // .msg.CSReqJoinVoicePvp JoinVoicePvp = 123;
  bool has_joinvoicepvp() const;
  private:
  bool _internal_has_joinvoicepvp() const;
  public:
  void clear_joinvoicepvp();
  const ::msg::CSReqJoinVoicePvp& joinvoicepvp() const;
  PROTOBUF_NODISCARD ::msg::CSReqJoinVoicePvp* release_joinvoicepvp();
  ::msg::CSReqJoinVoicePvp* mutable_joinvoicepvp();
  void set_allocated_joinvoicepvp(::msg::CSReqJoinVoicePvp* joinvoicepvp);
  private:
  const ::msg::CSReqJoinVoicePvp& _internal_joinvoicepvp() const;
  ::msg::CSReqJoinVoicePvp* _internal_mutable_joinvoicepvp();
  public:
  void unsafe_arena_set_allocated_joinvoicepvp(
      ::msg::CSReqJoinVoicePvp* joinvoicepvp);
  ::msg::CSReqJoinVoicePvp* unsafe_arena_release_joinvoicepvp();

  // .msg.CSReqJoinVoiceCamp JoinVoiceCamp = 124;
  bool has_joinvoicecamp() const;
  private:
  bool _internal_has_joinvoicecamp() const;
  public:
  void clear_joinvoicecamp();
  const ::msg::CSReqJoinVoiceCamp& joinvoicecamp() const;
  PROTOBUF_NODISCARD ::msg::CSReqJoinVoiceCamp* release_joinvoicecamp();
  ::msg::CSReqJoinVoiceCamp* mutable_joinvoicecamp();
  void set_allocated_joinvoicecamp(::msg::CSReqJoinVoiceCamp* joinvoicecamp);
  private:
  const ::msg::CSReqJoinVoiceCamp& _internal_joinvoicecamp() const;
  ::msg::CSReqJoinVoiceCamp* _internal_mutable_joinvoicecamp();
  public:
  void unsafe_arena_set_allocated_joinvoicecamp(
      ::msg::CSReqJoinVoiceCamp* joinvoicecamp);
  ::msg::CSReqJoinVoiceCamp* unsafe_arena_release_joinvoicecamp();

  // .msg.CSReqUserCountrySet UserCountrySet = 125;
  bool has_usercountryset() const;
  private:
  bool _internal_has_usercountryset() const;
  public:
  void clear_usercountryset();
  const ::msg::CSReqUserCountrySet& usercountryset() const;
  PROTOBUF_NODISCARD ::msg::CSReqUserCountrySet* release_usercountryset();
  ::msg::CSReqUserCountrySet* mutable_usercountryset();
  void set_allocated_usercountryset(::msg::CSReqUserCountrySet* usercountryset);
  private:
  const ::msg::CSReqUserCountrySet& _internal_usercountryset() const;
  ::msg::CSReqUserCountrySet* _internal_mutable_usercountryset();
  public:
  void unsafe_arena_set_allocated_usercountryset(
      ::msg::CSReqUserCountrySet* usercountryset);
  ::msg::CSReqUserCountrySet* unsafe_arena_release_usercountryset();

  // .msg.CSReqOfflineInviteJoinTeam OfflineInviteJoinTeam = 126;
  bool has_offlineinvitejointeam() const;
  private:
  bool _internal_has_offlineinvitejointeam() const;
  public:
  void clear_offlineinvitejointeam();
  const ::msg::CSReqOfflineInviteJoinTeam& offlineinvitejointeam() const;
  PROTOBUF_NODISCARD ::msg::CSReqOfflineInviteJoinTeam* release_offlineinvitejointeam();
  ::msg::CSReqOfflineInviteJoinTeam* mutable_offlineinvitejointeam();
  void set_allocated_offlineinvitejointeam(::msg::CSReqOfflineInviteJoinTeam* offlineinvitejointeam);
  private:
  const ::msg::CSReqOfflineInviteJoinTeam& _internal_offlineinvitejointeam() const;
  ::msg::CSReqOfflineInviteJoinTeam* _internal_mutable_offlineinvitejointeam();
  public:
  void unsafe_arena_set_allocated_offlineinvitejointeam(
      ::msg::CSReqOfflineInviteJoinTeam* offlineinvitejointeam);
  ::msg::CSReqOfflineInviteJoinTeam* unsafe_arena_release_offlineinvitejointeam();

  // .msg.CSReqObserve Observe = 127;
  bool has_observe() const;
  private:
  bool _internal_has_observe() const;
  public:
  void clear_observe();
  const ::msg::CSReqObserve& observe() const;
  PROTOBUF_NODISCARD ::msg::CSReqObserve* release_observe();
  ::msg::CSReqObserve* mutable_observe();
  void set_allocated_observe(::msg::CSReqObserve* observe);
  private:
  const ::msg::CSReqObserve& _internal_observe() const;
  ::msg::CSReqObserve* _internal_mutable_observe();
  public:
  void unsafe_arena_set_allocated_observe(
      ::msg::CSReqObserve* observe);
  ::msg::CSReqObserve* unsafe_arena_release_observe();

  // .msg.CSReqGetRecommendPvp GetRecommendPvp = 128;
  bool has_getrecommendpvp() const;
  private:
  bool _internal_has_getrecommendpvp() const;
  public:
  void clear_getrecommendpvp();
  const ::msg::CSReqGetRecommendPvp& getrecommendpvp() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetRecommendPvp* release_getrecommendpvp();
  ::msg::CSReqGetRecommendPvp* mutable_getrecommendpvp();
  void set_allocated_getrecommendpvp(::msg::CSReqGetRecommendPvp* getrecommendpvp);
  private:
  const ::msg::CSReqGetRecommendPvp& _internal_getrecommendpvp() const;
  ::msg::CSReqGetRecommendPvp* _internal_mutable_getrecommendpvp();
  public:
  void unsafe_arena_set_allocated_getrecommendpvp(
      ::msg::CSReqGetRecommendPvp* getrecommendpvp);
  ::msg::CSReqGetRecommendPvp* unsafe_arena_release_getrecommendpvp();

  // .msg.CSReqObserveLogin ObserveLogin = 129;
  bool has_observelogin() const;
  private:
  bool _internal_has_observelogin() const;
  public:
  void clear_observelogin();
  const ::msg::CSReqObserveLogin& observelogin() const;
  PROTOBUF_NODISCARD ::msg::CSReqObserveLogin* release_observelogin();
  ::msg::CSReqObserveLogin* mutable_observelogin();
  void set_allocated_observelogin(::msg::CSReqObserveLogin* observelogin);
  private:
  const ::msg::CSReqObserveLogin& _internal_observelogin() const;
  ::msg::CSReqObserveLogin* _internal_mutable_observelogin();
  public:
  void unsafe_arena_set_allocated_observelogin(
      ::msg::CSReqObserveLogin* observelogin);
  ::msg::CSReqObserveLogin* unsafe_arena_release_observelogin();

  // .msg.CSReqQuitObserve QuitObserve = 130;
  bool has_quitobserve() const;
  private:
  bool _internal_has_quitobserve() const;
  public:
  void clear_quitobserve();
  const ::msg::CSReqQuitObserve& quitobserve() const;
  PROTOBUF_NODISCARD ::msg::CSReqQuitObserve* release_quitobserve();
  ::msg::CSReqQuitObserve* mutable_quitobserve();
  void set_allocated_quitobserve(::msg::CSReqQuitObserve* quitobserve);
  private:
  const ::msg::CSReqQuitObserve& _internal_quitobserve() const;
  ::msg::CSReqQuitObserve* _internal_mutable_quitobserve();
  public:
  void unsafe_arena_set_allocated_quitobserve(
      ::msg::CSReqQuitObserve* quitobserve);
  ::msg::CSReqQuitObserve* unsafe_arena_release_quitobserve();

  // .msg.CSReqGetObserveInfo GetObserveInfo = 131;
  bool has_getobserveinfo() const;
  private:
  bool _internal_has_getobserveinfo() const;
  public:
  void clear_getobserveinfo();
  const ::msg::CSReqGetObserveInfo& getobserveinfo() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetObserveInfo* release_getobserveinfo();
  ::msg::CSReqGetObserveInfo* mutable_getobserveinfo();
  void set_allocated_getobserveinfo(::msg::CSReqGetObserveInfo* getobserveinfo);
  private:
  const ::msg::CSReqGetObserveInfo& _internal_getobserveinfo() const;
  ::msg::CSReqGetObserveInfo* _internal_mutable_getobserveinfo();
  public:
  void unsafe_arena_set_allocated_getobserveinfo(
      ::msg::CSReqGetObserveInfo* getobserveinfo);
  ::msg::CSReqGetObserveInfo* unsafe_arena_release_getobserveinfo();

  // .msg.CSReqFreeFlow FreeFlow = 132;
  bool has_freeflow() const;
  private:
  bool _internal_has_freeflow() const;
  public:
  void clear_freeflow();
  const ::msg::CSReqFreeFlow& freeflow() const;
  PROTOBUF_NODISCARD ::msg::CSReqFreeFlow* release_freeflow();
  ::msg::CSReqFreeFlow* mutable_freeflow();
  void set_allocated_freeflow(::msg::CSReqFreeFlow* freeflow);
  private:
  const ::msg::CSReqFreeFlow& _internal_freeflow() const;
  ::msg::CSReqFreeFlow* _internal_mutable_freeflow();
  public:
  void unsafe_arena_set_allocated_freeflow(
      ::msg::CSReqFreeFlow* freeflow);
  ::msg::CSReqFreeFlow* unsafe_arena_release_freeflow();

  // .msg.CSReqSetPushToken SetPushToken = 133;
  bool has_setpushtoken() const;
  private:
  bool _internal_has_setpushtoken() const;
  public:
  void clear_setpushtoken();
  const ::msg::CSReqSetPushToken& setpushtoken() const;
  PROTOBUF_NODISCARD ::msg::CSReqSetPushToken* release_setpushtoken();
  ::msg::CSReqSetPushToken* mutable_setpushtoken();
  void set_allocated_setpushtoken(::msg::CSReqSetPushToken* setpushtoken);
  private:
  const ::msg::CSReqSetPushToken& _internal_setpushtoken() const;
  ::msg::CSReqSetPushToken* _internal_mutable_setpushtoken();
  public:
  void unsafe_arena_set_allocated_setpushtoken(
      ::msg::CSReqSetPushToken* setpushtoken);
  ::msg::CSReqSetPushToken* unsafe_arena_release_setpushtoken();

  // .msg.CSReqTlogEvent TlogEvent = 134;
  bool has_tlogevent() const;
  private:
  bool _internal_has_tlogevent() const;
  public:
  void clear_tlogevent();
  const ::msg::CSReqTlogEvent& tlogevent() const;
  PROTOBUF_NODISCARD ::msg::CSReqTlogEvent* release_tlogevent();
  ::msg::CSReqTlogEvent* mutable_tlogevent();
  void set_allocated_tlogevent(::msg::CSReqTlogEvent* tlogevent);
  private:
  const ::msg::CSReqTlogEvent& _internal_tlogevent() const;
  ::msg::CSReqTlogEvent* _internal_mutable_tlogevent();
  public:
  void unsafe_arena_set_allocated_tlogevent(
      ::msg::CSReqTlogEvent* tlogevent);
  ::msg::CSReqTlogEvent* unsafe_arena_release_tlogevent();

  // .msg.CSReqWxVVipAward WxVVipAward = 135;
  bool has_wxvvipaward() const;
  private:
  bool _internal_has_wxvvipaward() const;
  public:
  void clear_wxvvipaward();
  const ::msg::CSReqWxVVipAward& wxvvipaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqWxVVipAward* release_wxvvipaward();
  ::msg::CSReqWxVVipAward* mutable_wxvvipaward();
  void set_allocated_wxvvipaward(::msg::CSReqWxVVipAward* wxvvipaward);
  private:
  const ::msg::CSReqWxVVipAward& _internal_wxvvipaward() const;
  ::msg::CSReqWxVVipAward* _internal_mutable_wxvvipaward();
  public:
  void unsafe_arena_set_allocated_wxvvipaward(
      ::msg::CSReqWxVVipAward* wxvvipaward);
  ::msg::CSReqWxVVipAward* unsafe_arena_release_wxvvipaward();

  // .msg.CSReqGetRelationStarWX RelationStarWX = 136;
  bool has_relationstarwx() const;
  private:
  bool _internal_has_relationstarwx() const;
  public:
  void clear_relationstarwx();
  const ::msg::CSReqGetRelationStarWX& relationstarwx() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetRelationStarWX* release_relationstarwx();
  ::msg::CSReqGetRelationStarWX* mutable_relationstarwx();
  void set_allocated_relationstarwx(::msg::CSReqGetRelationStarWX* relationstarwx);
  private:
  const ::msg::CSReqGetRelationStarWX& _internal_relationstarwx() const;
  ::msg::CSReqGetRelationStarWX* _internal_mutable_relationstarwx();
  public:
  void unsafe_arena_set_allocated_relationstarwx(
      ::msg::CSReqGetRelationStarWX* relationstarwx);
  ::msg::CSReqGetRelationStarWX* unsafe_arena_release_relationstarwx();

  // .msg.CSReqSendWxRedPacket SendWxRedPacket = 137;
  bool has_sendwxredpacket() const;
  private:
  bool _internal_has_sendwxredpacket() const;
  public:
  void clear_sendwxredpacket();
  const ::msg::CSReqSendWxRedPacket& sendwxredpacket() const;
  PROTOBUF_NODISCARD ::msg::CSReqSendWxRedPacket* release_sendwxredpacket();
  ::msg::CSReqSendWxRedPacket* mutable_sendwxredpacket();
  void set_allocated_sendwxredpacket(::msg::CSReqSendWxRedPacket* sendwxredpacket);
  private:
  const ::msg::CSReqSendWxRedPacket& _internal_sendwxredpacket() const;
  ::msg::CSReqSendWxRedPacket* _internal_mutable_sendwxredpacket();
  public:
  void unsafe_arena_set_allocated_sendwxredpacket(
      ::msg::CSReqSendWxRedPacket* sendwxredpacket);
  ::msg::CSReqSendWxRedPacket* unsafe_arena_release_sendwxredpacket();

  // .msg.CSReqRecvWxRedPacket RecvWxRedPacket = 138;
  bool has_recvwxredpacket() const;
  private:
  bool _internal_has_recvwxredpacket() const;
  public:
  void clear_recvwxredpacket();
  const ::msg::CSReqRecvWxRedPacket& recvwxredpacket() const;
  PROTOBUF_NODISCARD ::msg::CSReqRecvWxRedPacket* release_recvwxredpacket();
  ::msg::CSReqRecvWxRedPacket* mutable_recvwxredpacket();
  void set_allocated_recvwxredpacket(::msg::CSReqRecvWxRedPacket* recvwxredpacket);
  private:
  const ::msg::CSReqRecvWxRedPacket& _internal_recvwxredpacket() const;
  ::msg::CSReqRecvWxRedPacket* _internal_mutable_recvwxredpacket();
  public:
  void unsafe_arena_set_allocated_recvwxredpacket(
      ::msg::CSReqRecvWxRedPacket* recvwxredpacket);
  ::msg::CSReqRecvWxRedPacket* unsafe_arena_release_recvwxredpacket();

  // .msg.CSReqWxRedPktLike WxRedPktLike = 139;
  bool has_wxredpktlike() const;
  private:
  bool _internal_has_wxredpktlike() const;
  public:
  void clear_wxredpktlike();
  const ::msg::CSReqWxRedPktLike& wxredpktlike() const;
  PROTOBUF_NODISCARD ::msg::CSReqWxRedPktLike* release_wxredpktlike();
  ::msg::CSReqWxRedPktLike* mutable_wxredpktlike();
  void set_allocated_wxredpktlike(::msg::CSReqWxRedPktLike* wxredpktlike);
  private:
  const ::msg::CSReqWxRedPktLike& _internal_wxredpktlike() const;
  ::msg::CSReqWxRedPktLike* _internal_mutable_wxredpktlike();
  public:
  void unsafe_arena_set_allocated_wxredpktlike(
      ::msg::CSReqWxRedPktLike* wxredpktlike);
  ::msg::CSReqWxRedPktLike* unsafe_arena_release_wxredpktlike();

  // .msg.CSReqWxRedPktRank WxRedPktRank = 140;
  bool has_wxredpktrank() const;
  private:
  bool _internal_has_wxredpktrank() const;
  public:
  void clear_wxredpktrank();
  const ::msg::CSReqWxRedPktRank& wxredpktrank() const;
  PROTOBUF_NODISCARD ::msg::CSReqWxRedPktRank* release_wxredpktrank();
  ::msg::CSReqWxRedPktRank* mutable_wxredpktrank();
  void set_allocated_wxredpktrank(::msg::CSReqWxRedPktRank* wxredpktrank);
  private:
  const ::msg::CSReqWxRedPktRank& _internal_wxredpktrank() const;
  ::msg::CSReqWxRedPktRank* _internal_mutable_wxredpktrank();
  public:
  void unsafe_arena_set_allocated_wxredpktrank(
      ::msg::CSReqWxRedPktRank* wxredpktrank);
  ::msg::CSReqWxRedPktRank* unsafe_arena_release_wxredpktrank();

  // .msg.CSReqObservePrivilege SetObservePrivilege = 141;
  bool has_setobserveprivilege() const;
  private:
  bool _internal_has_setobserveprivilege() const;
  public:
  void clear_setobserveprivilege();
  const ::msg::CSReqObservePrivilege& setobserveprivilege() const;
  PROTOBUF_NODISCARD ::msg::CSReqObservePrivilege* release_setobserveprivilege();
  ::msg::CSReqObservePrivilege* mutable_setobserveprivilege();
  void set_allocated_setobserveprivilege(::msg::CSReqObservePrivilege* setobserveprivilege);
  private:
  const ::msg::CSReqObservePrivilege& _internal_setobserveprivilege() const;
  ::msg::CSReqObservePrivilege* _internal_mutable_setobserveprivilege();
  public:
  void unsafe_arena_set_allocated_setobserveprivilege(
      ::msg::CSReqObservePrivilege* setobserveprivilege);
  ::msg::CSReqObservePrivilege* unsafe_arena_release_setobserveprivilege();

  // .msg.CSReqPresetFastChat PresetFastChat = 142;
  bool has_presetfastchat() const;
  private:
  bool _internal_has_presetfastchat() const;
  public:
  void clear_presetfastchat();
  const ::msg::CSReqPresetFastChat& presetfastchat() const;
  PROTOBUF_NODISCARD ::msg::CSReqPresetFastChat* release_presetfastchat();
  ::msg::CSReqPresetFastChat* mutable_presetfastchat();
  void set_allocated_presetfastchat(::msg::CSReqPresetFastChat* presetfastchat);
  private:
  const ::msg::CSReqPresetFastChat& _internal_presetfastchat() const;
  ::msg::CSReqPresetFastChat* _internal_mutable_presetfastchat();
  public:
  void unsafe_arena_set_allocated_presetfastchat(
      ::msg::CSReqPresetFastChat* presetfastchat);
  ::msg::CSReqPresetFastChat* unsafe_arena_release_presetfastchat();

  // .msg.CSReqChangeSlotTeam ChangeSlotTeam = 143;
  bool has_changeslotteam() const;
  private:
  bool _internal_has_changeslotteam() const;
  public:
  void clear_changeslotteam();
  const ::msg::CSReqChangeSlotTeam& changeslotteam() const;
  PROTOBUF_NODISCARD ::msg::CSReqChangeSlotTeam* release_changeslotteam();
  ::msg::CSReqChangeSlotTeam* mutable_changeslotteam();
  void set_allocated_changeslotteam(::msg::CSReqChangeSlotTeam* changeslotteam);
  private:
  const ::msg::CSReqChangeSlotTeam& _internal_changeslotteam() const;
  ::msg::CSReqChangeSlotTeam* _internal_mutable_changeslotteam();
  public:
  void unsafe_arena_set_allocated_changeslotteam(
      ::msg::CSReqChangeSlotTeam* changeslotteam);
  ::msg::CSReqChangeSlotTeam* unsafe_arena_release_changeslotteam();

  // .msg.CSReqChangeSubModeTeam ChangeSubModeTeam = 144;
  bool has_changesubmodeteam() const;
  private:
  bool _internal_has_changesubmodeteam() const;
  public:
  void clear_changesubmodeteam();
  const ::msg::CSReqChangeSubModeTeam& changesubmodeteam() const;
  PROTOBUF_NODISCARD ::msg::CSReqChangeSubModeTeam* release_changesubmodeteam();
  ::msg::CSReqChangeSubModeTeam* mutable_changesubmodeteam();
  void set_allocated_changesubmodeteam(::msg::CSReqChangeSubModeTeam* changesubmodeteam);
  private:
  const ::msg::CSReqChangeSubModeTeam& _internal_changesubmodeteam() const;
  ::msg::CSReqChangeSubModeTeam* _internal_mutable_changesubmodeteam();
  public:
  void unsafe_arena_set_allocated_changesubmodeteam(
      ::msg::CSReqChangeSubModeTeam* changesubmodeteam);
  ::msg::CSReqChangeSubModeTeam* unsafe_arena_release_changesubmodeteam();

  // .msg.CSReqConfirmChangeSlotTeam ConfirmChangeSlotTeam = 145;
  bool has_confirmchangeslotteam() const;
  private:
  bool _internal_has_confirmchangeslotteam() const;
  public:
  void clear_confirmchangeslotteam();
  const ::msg::CSReqConfirmChangeSlotTeam& confirmchangeslotteam() const;
  PROTOBUF_NODISCARD ::msg::CSReqConfirmChangeSlotTeam* release_confirmchangeslotteam();
  ::msg::CSReqConfirmChangeSlotTeam* mutable_confirmchangeslotteam();
  void set_allocated_confirmchangeslotteam(::msg::CSReqConfirmChangeSlotTeam* confirmchangeslotteam);
  private:
  const ::msg::CSReqConfirmChangeSlotTeam& _internal_confirmchangeslotteam() const;
  ::msg::CSReqConfirmChangeSlotTeam* _internal_mutable_confirmchangeslotteam();
  public:
  void unsafe_arena_set_allocated_confirmchangeslotteam(
      ::msg::CSReqConfirmChangeSlotTeam* confirmchangeslotteam);
  ::msg::CSReqConfirmChangeSlotTeam* unsafe_arena_release_confirmchangeslotteam();

  // .msg.CSReqPvpRoundEnd PvpRoundEnd = 146;
  bool has_pvproundend() const;
  private:
  bool _internal_has_pvproundend() const;
  public:
  void clear_pvproundend();
  const ::msg::CSReqPvpRoundEnd& pvproundend() const;
  PROTOBUF_NODISCARD ::msg::CSReqPvpRoundEnd* release_pvproundend();
  ::msg::CSReqPvpRoundEnd* mutable_pvproundend();
  void set_allocated_pvproundend(::msg::CSReqPvpRoundEnd* pvproundend);
  private:
  const ::msg::CSReqPvpRoundEnd& _internal_pvproundend() const;
  ::msg::CSReqPvpRoundEnd* _internal_mutable_pvproundend();
  public:
  void unsafe_arena_set_allocated_pvproundend(
      ::msg::CSReqPvpRoundEnd* pvproundend);
  ::msg::CSReqPvpRoundEnd* unsafe_arena_release_pvproundend();

  // .msg.CSReqObserveChatLogin ObserveChatLogin = 147;
  bool has_observechatlogin() const;
  private:
  bool _internal_has_observechatlogin() const;
  public:
  void clear_observechatlogin();
  const ::msg::CSReqObserveChatLogin& observechatlogin() const;
  PROTOBUF_NODISCARD ::msg::CSReqObserveChatLogin* release_observechatlogin();
  ::msg::CSReqObserveChatLogin* mutable_observechatlogin();
  void set_allocated_observechatlogin(::msg::CSReqObserveChatLogin* observechatlogin);
  private:
  const ::msg::CSReqObserveChatLogin& _internal_observechatlogin() const;
  ::msg::CSReqObserveChatLogin* _internal_mutable_observechatlogin();
  public:
  void unsafe_arena_set_allocated_observechatlogin(
      ::msg::CSReqObserveChatLogin* observechatlogin);
  ::msg::CSReqObserveChatLogin* unsafe_arena_release_observechatlogin();

  // .msg.CSReqPvpConfirm PvpConfirm = 148;
  bool has_pvpconfirm() const;
  private:
  bool _internal_has_pvpconfirm() const;
  public:
  void clear_pvpconfirm();
  const ::msg::CSReqPvpConfirm& pvpconfirm() const;
  PROTOBUF_NODISCARD ::msg::CSReqPvpConfirm* release_pvpconfirm();
  ::msg::CSReqPvpConfirm* mutable_pvpconfirm();
  void set_allocated_pvpconfirm(::msg::CSReqPvpConfirm* pvpconfirm);
  private:
  const ::msg::CSReqPvpConfirm& _internal_pvpconfirm() const;
  ::msg::CSReqPvpConfirm* _internal_mutable_pvpconfirm();
  public:
  void unsafe_arena_set_allocated_pvpconfirm(
      ::msg::CSReqPvpConfirm* pvpconfirm);
  ::msg::CSReqPvpConfirm* unsafe_arena_release_pvpconfirm();

  // .msg.CSReqActivityPicShare ActivityPicShare = 149;
  bool has_activitypicshare() const;
  private:
  bool _internal_has_activitypicshare() const;
  public:
  void clear_activitypicshare();
  const ::msg::CSReqActivityPicShare& activitypicshare() const;
  PROTOBUF_NODISCARD ::msg::CSReqActivityPicShare* release_activitypicshare();
  ::msg::CSReqActivityPicShare* mutable_activitypicshare();
  void set_allocated_activitypicshare(::msg::CSReqActivityPicShare* activitypicshare);
  private:
  const ::msg::CSReqActivityPicShare& _internal_activitypicshare() const;
  ::msg::CSReqActivityPicShare* _internal_mutable_activitypicshare();
  public:
  void unsafe_arena_set_allocated_activitypicshare(
      ::msg::CSReqActivityPicShare* activitypicshare);
  ::msg::CSReqActivityPicShare* unsafe_arena_release_activitypicshare();

  // .msg.CSReqBindOldBusinessPlayer BindOldBusinessPlayer = 150;
  bool has_bindoldbusinessplayer() const;
  private:
  bool _internal_has_bindoldbusinessplayer() const;
  public:
  void clear_bindoldbusinessplayer();
  const ::msg::CSReqBindOldBusinessPlayer& bindoldbusinessplayer() const;
  PROTOBUF_NODISCARD ::msg::CSReqBindOldBusinessPlayer* release_bindoldbusinessplayer();
  ::msg::CSReqBindOldBusinessPlayer* mutable_bindoldbusinessplayer();
  void set_allocated_bindoldbusinessplayer(::msg::CSReqBindOldBusinessPlayer* bindoldbusinessplayer);
  private:
  const ::msg::CSReqBindOldBusinessPlayer& _internal_bindoldbusinessplayer() const;
  ::msg::CSReqBindOldBusinessPlayer* _internal_mutable_bindoldbusinessplayer();
  public:
  void unsafe_arena_set_allocated_bindoldbusinessplayer(
      ::msg::CSReqBindOldBusinessPlayer* bindoldbusinessplayer);
  ::msg::CSReqBindOldBusinessPlayer* unsafe_arena_release_bindoldbusinessplayer();

  // .msg.CSReqTranslate Translate = 151;
  bool has_translate() const;
  private:
  bool _internal_has_translate() const;
  public:
  void clear_translate();
  const ::msg::CSReqTranslate& translate() const;
  PROTOBUF_NODISCARD ::msg::CSReqTranslate* release_translate();
  ::msg::CSReqTranslate* mutable_translate();
  void set_allocated_translate(::msg::CSReqTranslate* translate);
  private:
  const ::msg::CSReqTranslate& _internal_translate() const;
  ::msg::CSReqTranslate* _internal_mutable_translate();
  public:
  void unsafe_arena_set_allocated_translate(
      ::msg::CSReqTranslate* translate);
  ::msg::CSReqTranslate* unsafe_arena_release_translate();

  // .msg.CSReqSubmitQuestionnaire SubmitQuestionnaire = 152;
  bool has_submitquestionnaire() const;
  private:
  bool _internal_has_submitquestionnaire() const;
  public:
  void clear_submitquestionnaire();
  const ::msg::CSReqSubmitQuestionnaire& submitquestionnaire() const;
  PROTOBUF_NODISCARD ::msg::CSReqSubmitQuestionnaire* release_submitquestionnaire();
  ::msg::CSReqSubmitQuestionnaire* mutable_submitquestionnaire();
  void set_allocated_submitquestionnaire(::msg::CSReqSubmitQuestionnaire* submitquestionnaire);
  private:
  const ::msg::CSReqSubmitQuestionnaire& _internal_submitquestionnaire() const;
  ::msg::CSReqSubmitQuestionnaire* _internal_mutable_submitquestionnaire();
  public:
  void unsafe_arena_set_allocated_submitquestionnaire(
      ::msg::CSReqSubmitQuestionnaire* submitquestionnaire);
  ::msg::CSReqSubmitQuestionnaire* unsafe_arena_release_submitquestionnaire();

  // .msg.CSReqCancelChangeSlot CancelChangeSlot = 153;
  bool has_cancelchangeslot() const;
  private:
  bool _internal_has_cancelchangeslot() const;
  public:
  void clear_cancelchangeslot();
  const ::msg::CSReqCancelChangeSlot& cancelchangeslot() const;
  PROTOBUF_NODISCARD ::msg::CSReqCancelChangeSlot* release_cancelchangeslot();
  ::msg::CSReqCancelChangeSlot* mutable_cancelchangeslot();
  void set_allocated_cancelchangeslot(::msg::CSReqCancelChangeSlot* cancelchangeslot);
  private:
  const ::msg::CSReqCancelChangeSlot& _internal_cancelchangeslot() const;
  ::msg::CSReqCancelChangeSlot* _internal_mutable_cancelchangeslot();
  public:
  void unsafe_arena_set_allocated_cancelchangeslot(
      ::msg::CSReqCancelChangeSlot* cancelchangeslot);
  ::msg::CSReqCancelChangeSlot* unsafe_arena_release_cancelchangeslot();

  // .msg.CSReqSetChessSkin SetChessSkin = 154;
  bool has_setchessskin() const;
  private:
  bool _internal_has_setchessskin() const;
  public:
  void clear_setchessskin();
  const ::msg::CSReqSetChessSkin& setchessskin() const;
  PROTOBUF_NODISCARD ::msg::CSReqSetChessSkin* release_setchessskin();
  ::msg::CSReqSetChessSkin* mutable_setchessskin();
  void set_allocated_setchessskin(::msg::CSReqSetChessSkin* setchessskin);
  private:
  const ::msg::CSReqSetChessSkin& _internal_setchessskin() const;
  ::msg::CSReqSetChessSkin* _internal_mutable_setchessskin();
  public:
  void unsafe_arena_set_allocated_setchessskin(
      ::msg::CSReqSetChessSkin* setchessskin);
  ::msg::CSReqSetChessSkin* unsafe_arena_release_setchessskin();

  // .msg.CSReqUnsetChessSkin UnsetChessSkin = 155;
  bool has_unsetchessskin() const;
  private:
  bool _internal_has_unsetchessskin() const;
  public:
  void clear_unsetchessskin();
  const ::msg::CSReqUnsetChessSkin& unsetchessskin() const;
  PROTOBUF_NODISCARD ::msg::CSReqUnsetChessSkin* release_unsetchessskin();
  ::msg::CSReqUnsetChessSkin* mutable_unsetchessskin();
  void set_allocated_unsetchessskin(::msg::CSReqUnsetChessSkin* unsetchessskin);
  private:
  const ::msg::CSReqUnsetChessSkin& _internal_unsetchessskin() const;
  ::msg::CSReqUnsetChessSkin* _internal_mutable_unsetchessskin();
  public:
  void unsafe_arena_set_allocated_unsetchessskin(
      ::msg::CSReqUnsetChessSkin* unsetchessskin);
  ::msg::CSReqUnsetChessSkin* unsafe_arena_release_unsetchessskin();

  // .msg.CSReqCompose Compose = 156;
  bool has_compose() const;
  private:
  bool _internal_has_compose() const;
  public:
  void clear_compose();
  const ::msg::CSReqCompose& compose() const;
  PROTOBUF_NODISCARD ::msg::CSReqCompose* release_compose();
  ::msg::CSReqCompose* mutable_compose();
  void set_allocated_compose(::msg::CSReqCompose* compose);
  private:
  const ::msg::CSReqCompose& _internal_compose() const;
  ::msg::CSReqCompose* _internal_mutable_compose();
  public:
  void unsafe_arena_set_allocated_compose(
      ::msg::CSReqCompose* compose);
  ::msg::CSReqCompose* unsafe_arena_release_compose();

  // .msg.CSReqOffHelpReddot OffHelpReddot = 157;
  bool has_offhelpreddot() const;
  private:
  bool _internal_has_offhelpreddot() const;
  public:
  void clear_offhelpreddot();
  const ::msg::CSReqOffHelpReddot& offhelpreddot() const;
  PROTOBUF_NODISCARD ::msg::CSReqOffHelpReddot* release_offhelpreddot();
  ::msg::CSReqOffHelpReddot* mutable_offhelpreddot();
  void set_allocated_offhelpreddot(::msg::CSReqOffHelpReddot* offhelpreddot);
  private:
  const ::msg::CSReqOffHelpReddot& _internal_offhelpreddot() const;
  ::msg::CSReqOffHelpReddot* _internal_mutable_offhelpreddot();
  public:
  void unsafe_arena_set_allocated_offhelpreddot(
      ::msg::CSReqOffHelpReddot* offhelpreddot);
  ::msg::CSReqOffHelpReddot* unsafe_arena_release_offhelpreddot();

  // .msg.CSReqVideo Video = 160;
  bool has_video() const;
  private:
  bool _internal_has_video() const;
  public:
  void clear_video();
  const ::msg::CSReqVideo& video() const;
  PROTOBUF_NODISCARD ::msg::CSReqVideo* release_video();
  ::msg::CSReqVideo* mutable_video();
  void set_allocated_video(::msg::CSReqVideo* video);
  private:
  const ::msg::CSReqVideo& _internal_video() const;
  ::msg::CSReqVideo* _internal_mutable_video();
  public:
  void unsafe_arena_set_allocated_video(
      ::msg::CSReqVideo* video);
  ::msg::CSReqVideo* unsafe_arena_release_video();

  // .msg.CSReqChangeLanguage ChangeLanguage = 161;
  bool has_changelanguage() const;
  private:
  bool _internal_has_changelanguage() const;
  public:
  void clear_changelanguage();
  const ::msg::CSReqChangeLanguage& changelanguage() const;
  PROTOBUF_NODISCARD ::msg::CSReqChangeLanguage* release_changelanguage();
  ::msg::CSReqChangeLanguage* mutable_changelanguage();
  void set_allocated_changelanguage(::msg::CSReqChangeLanguage* changelanguage);
  private:
  const ::msg::CSReqChangeLanguage& _internal_changelanguage() const;
  ::msg::CSReqChangeLanguage* _internal_mutable_changelanguage();
  public:
  void unsafe_arena_set_allocated_changelanguage(
      ::msg::CSReqChangeLanguage* changelanguage);
  ::msg::CSReqChangeLanguage* unsafe_arena_release_changelanguage();

  // .msg.CSReqReportVideoPlay VideoPlay = 162;
  bool has_videoplay() const;
  private:
  bool _internal_has_videoplay() const;
  public:
  void clear_videoplay();
  const ::msg::CSReqReportVideoPlay& videoplay() const;
  PROTOBUF_NODISCARD ::msg::CSReqReportVideoPlay* release_videoplay();
  ::msg::CSReqReportVideoPlay* mutable_videoplay();
  void set_allocated_videoplay(::msg::CSReqReportVideoPlay* videoplay);
  private:
  const ::msg::CSReqReportVideoPlay& _internal_videoplay() const;
  ::msg::CSReqReportVideoPlay* _internal_mutable_videoplay();
  public:
  void unsafe_arena_set_allocated_videoplay(
      ::msg::CSReqReportVideoPlay* videoplay);
  ::msg::CSReqReportVideoPlay* unsafe_arena_release_videoplay();

  // .msg.CSReqSetProvince SetProvince = 163;
  bool has_setprovince() const;
  private:
  bool _internal_has_setprovince() const;
  public:
  void clear_setprovince();
  const ::msg::CSReqSetProvince& setprovince() const;
  PROTOBUF_NODISCARD ::msg::CSReqSetProvince* release_setprovince();
  ::msg::CSReqSetProvince* mutable_setprovince();
  void set_allocated_setprovince(::msg::CSReqSetProvince* setprovince);
  private:
  const ::msg::CSReqSetProvince& _internal_setprovince() const;
  ::msg::CSReqSetProvince* _internal_mutable_setprovince();
  public:
  void unsafe_arena_set_allocated_setprovince(
      ::msg::CSReqSetProvince* setprovince);
  ::msg::CSReqSetProvince* unsafe_arena_release_setprovince();

  // .msg.CSReqLongyuanVoice LongyuanVoice = 164;
  bool has_longyuanvoice() const;
  private:
  bool _internal_has_longyuanvoice() const;
  public:
  void clear_longyuanvoice();
  const ::msg::CSReqLongyuanVoice& longyuanvoice() const;
  PROTOBUF_NODISCARD ::msg::CSReqLongyuanVoice* release_longyuanvoice();
  ::msg::CSReqLongyuanVoice* mutable_longyuanvoice();
  void set_allocated_longyuanvoice(::msg::CSReqLongyuanVoice* longyuanvoice);
  private:
  const ::msg::CSReqLongyuanVoice& _internal_longyuanvoice() const;
  ::msg::CSReqLongyuanVoice* _internal_mutable_longyuanvoice();
  public:
  void unsafe_arena_set_allocated_longyuanvoice(
      ::msg::CSReqLongyuanVoice* longyuanvoice);
  ::msg::CSReqLongyuanVoice* unsafe_arena_release_longyuanvoice();

  // .msg.CSReqEnrollTournament EnrollTournament = 165;
  bool has_enrolltournament() const;
  private:
  bool _internal_has_enrolltournament() const;
  public:
  void clear_enrolltournament();
  const ::msg::CSReqEnrollTournament& enrolltournament() const;
  PROTOBUF_NODISCARD ::msg::CSReqEnrollTournament* release_enrolltournament();
  ::msg::CSReqEnrollTournament* mutable_enrolltournament();
  void set_allocated_enrolltournament(::msg::CSReqEnrollTournament* enrolltournament);
  private:
  const ::msg::CSReqEnrollTournament& _internal_enrolltournament() const;
  ::msg::CSReqEnrollTournament* _internal_mutable_enrolltournament();
  public:
  void unsafe_arena_set_allocated_enrolltournament(
      ::msg::CSReqEnrollTournament* enrolltournament);
  ::msg::CSReqEnrollTournament* unsafe_arena_release_enrolltournament();

  // .msg.CSReqJoinTournamentRoom JoinTournamentRoom = 166;
  bool has_jointournamentroom() const;
  private:
  bool _internal_has_jointournamentroom() const;
  public:
  void clear_jointournamentroom();
  const ::msg::CSReqJoinTournamentRoom& jointournamentroom() const;
  PROTOBUF_NODISCARD ::msg::CSReqJoinTournamentRoom* release_jointournamentroom();
  ::msg::CSReqJoinTournamentRoom* mutable_jointournamentroom();
  void set_allocated_jointournamentroom(::msg::CSReqJoinTournamentRoom* jointournamentroom);
  private:
  const ::msg::CSReqJoinTournamentRoom& _internal_jointournamentroom() const;
  ::msg::CSReqJoinTournamentRoom* _internal_mutable_jointournamentroom();
  public:
  void unsafe_arena_set_allocated_jointournamentroom(
      ::msg::CSReqJoinTournamentRoom* jointournamentroom);
  ::msg::CSReqJoinTournamentRoom* unsafe_arena_release_jointournamentroom();

  // .msg.CSReqTournamentPointAward TournamentPointAward = 167;
  bool has_tournamentpointaward() const;
  private:
  bool _internal_has_tournamentpointaward() const;
  public:
  void clear_tournamentpointaward();
  const ::msg::CSReqTournamentPointAward& tournamentpointaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqTournamentPointAward* release_tournamentpointaward();
  ::msg::CSReqTournamentPointAward* mutable_tournamentpointaward();
  void set_allocated_tournamentpointaward(::msg::CSReqTournamentPointAward* tournamentpointaward);
  private:
  const ::msg::CSReqTournamentPointAward& _internal_tournamentpointaward() const;
  ::msg::CSReqTournamentPointAward* _internal_mutable_tournamentpointaward();
  public:
  void unsafe_arena_set_allocated_tournamentpointaward(
      ::msg::CSReqTournamentPointAward* tournamentpointaward);
  ::msg::CSReqTournamentPointAward* unsafe_arena_release_tournamentpointaward();

  // .msg.CSReqDealWebMail DealWebMail = 168;
  bool has_dealwebmail() const;
  private:
  bool _internal_has_dealwebmail() const;
  public:
  void clear_dealwebmail();
  const ::msg::CSReqDealWebMail& dealwebmail() const;
  PROTOBUF_NODISCARD ::msg::CSReqDealWebMail* release_dealwebmail();
  ::msg::CSReqDealWebMail* mutable_dealwebmail();
  void set_allocated_dealwebmail(::msg::CSReqDealWebMail* dealwebmail);
  private:
  const ::msg::CSReqDealWebMail& _internal_dealwebmail() const;
  ::msg::CSReqDealWebMail* _internal_mutable_dealwebmail();
  public:
  void unsafe_arena_set_allocated_dealwebmail(
      ::msg::CSReqDealWebMail* dealwebmail);
  ::msg::CSReqDealWebMail* unsafe_arena_release_dealwebmail();

  // .msg.CSReqGetEnrollPlayers GetEnrollPlayers = 169;
  bool has_getenrollplayers() const;
  private:
  bool _internal_has_getenrollplayers() const;
  public:
  void clear_getenrollplayers();
  const ::msg::CSReqGetEnrollPlayers& getenrollplayers() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetEnrollPlayers* release_getenrollplayers();
  ::msg::CSReqGetEnrollPlayers* mutable_getenrollplayers();
  void set_allocated_getenrollplayers(::msg::CSReqGetEnrollPlayers* getenrollplayers);
  private:
  const ::msg::CSReqGetEnrollPlayers& _internal_getenrollplayers() const;
  ::msg::CSReqGetEnrollPlayers* _internal_mutable_getenrollplayers();
  public:
  void unsafe_arena_set_allocated_getenrollplayers(
      ::msg::CSReqGetEnrollPlayers* getenrollplayers);
  ::msg::CSReqGetEnrollPlayers* unsafe_arena_release_getenrollplayers();

  // .msg.CSReqChallengeAgain ChallengeAgain = 170;
  bool has_challengeagain() const;
  private:
  bool _internal_has_challengeagain() const;
  public:
  void clear_challengeagain();
  const ::msg::CSReqChallengeAgain& challengeagain() const;
  PROTOBUF_NODISCARD ::msg::CSReqChallengeAgain* release_challengeagain();
  ::msg::CSReqChallengeAgain* mutable_challengeagain();
  void set_allocated_challengeagain(::msg::CSReqChallengeAgain* challengeagain);
  private:
  const ::msg::CSReqChallengeAgain& _internal_challengeagain() const;
  ::msg::CSReqChallengeAgain* _internal_mutable_challengeagain();
  public:
  void unsafe_arena_set_allocated_challengeagain(
      ::msg::CSReqChallengeAgain* challengeagain);
  ::msg::CSReqChallengeAgain* unsafe_arena_release_challengeagain();

  // .msg.CSReqHistoryChatMsg HistoryChat = 171;
  bool has_historychat() const;
  private:
  bool _internal_has_historychat() const;
  public:
  void clear_historychat();
  const ::msg::CSReqHistoryChatMsg& historychat() const;
  PROTOBUF_NODISCARD ::msg::CSReqHistoryChatMsg* release_historychat();
  ::msg::CSReqHistoryChatMsg* mutable_historychat();
  void set_allocated_historychat(::msg::CSReqHistoryChatMsg* historychat);
  private:
  const ::msg::CSReqHistoryChatMsg& _internal_historychat() const;
  ::msg::CSReqHistoryChatMsg* _internal_mutable_historychat();
  public:
  void unsafe_arena_set_allocated_historychat(
      ::msg::CSReqHistoryChatMsg* historychat);
  ::msg::CSReqHistoryChatMsg* unsafe_arena_release_historychat();

  // .msg.CSReqSetFriendInvisible SetFriendInvisible = 172;
  bool has_setfriendinvisible() const;
  private:
  bool _internal_has_setfriendinvisible() const;
  public:
  void clear_setfriendinvisible();
  const ::msg::CSReqSetFriendInvisible& setfriendinvisible() const;
  PROTOBUF_NODISCARD ::msg::CSReqSetFriendInvisible* release_setfriendinvisible();
  ::msg::CSReqSetFriendInvisible* mutable_setfriendinvisible();
  void set_allocated_setfriendinvisible(::msg::CSReqSetFriendInvisible* setfriendinvisible);
  private:
  const ::msg::CSReqSetFriendInvisible& _internal_setfriendinvisible() const;
  ::msg::CSReqSetFriendInvisible* _internal_mutable_setfriendinvisible();
  public:
  void unsafe_arena_set_allocated_setfriendinvisible(
      ::msg::CSReqSetFriendInvisible* setfriendinvisible);
  ::msg::CSReqSetFriendInvisible* unsafe_arena_release_setfriendinvisible();

  // .msg.CSReqGetObserveAward GetObserveAward = 173;
  bool has_getobserveaward() const;
  private:
  bool _internal_has_getobserveaward() const;
  public:
  void clear_getobserveaward();
  const ::msg::CSReqGetObserveAward& getobserveaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetObserveAward* release_getobserveaward();
  ::msg::CSReqGetObserveAward* mutable_getobserveaward();
  void set_allocated_getobserveaward(::msg::CSReqGetObserveAward* getobserveaward);
  private:
  const ::msg::CSReqGetObserveAward& _internal_getobserveaward() const;
  ::msg::CSReqGetObserveAward* _internal_mutable_getobserveaward();
  public:
  void unsafe_arena_set_allocated_getobserveaward(
      ::msg::CSReqGetObserveAward* getobserveaward);
  ::msg::CSReqGetObserveAward* unsafe_arena_release_getobserveaward();

  // .msg.CSReqInviteObserve InviteObserve = 174;
  bool has_inviteobserve() const;
  private:
  bool _internal_has_inviteobserve() const;
  public:
  void clear_inviteobserve();
  const ::msg::CSReqInviteObserve& inviteobserve() const;
  PROTOBUF_NODISCARD ::msg::CSReqInviteObserve* release_inviteobserve();
  ::msg::CSReqInviteObserve* mutable_inviteobserve();
  void set_allocated_inviteobserve(::msg::CSReqInviteObserve* inviteobserve);
  private:
  const ::msg::CSReqInviteObserve& _internal_inviteobserve() const;
  ::msg::CSReqInviteObserve* _internal_mutable_inviteobserve();
  public:
  void unsafe_arena_set_allocated_inviteobserve(
      ::msg::CSReqInviteObserve* inviteobserve);
  ::msg::CSReqInviteObserve* unsafe_arena_release_inviteobserve();

  // .msg.CSReqRejectObserve RejectObserve = 175;
  bool has_rejectobserve() const;
  private:
  bool _internal_has_rejectobserve() const;
  public:
  void clear_rejectobserve();
  const ::msg::CSReqRejectObserve& rejectobserve() const;
  PROTOBUF_NODISCARD ::msg::CSReqRejectObserve* release_rejectobserve();
  ::msg::CSReqRejectObserve* mutable_rejectobserve();
  void set_allocated_rejectobserve(::msg::CSReqRejectObserve* rejectobserve);
  private:
  const ::msg::CSReqRejectObserve& _internal_rejectobserve() const;
  ::msg::CSReqRejectObserve* _internal_mutable_rejectobserve();
  public:
  void unsafe_arena_set_allocated_rejectobserve(
      ::msg::CSReqRejectObserve* rejectobserve);
  ::msg::CSReqRejectObserve* unsafe_arena_release_rejectobserve();

  // .msg.CSReqGetTxPlayer GetTxPlayer = 176;
  bool has_gettxplayer() const;
  private:
  bool _internal_has_gettxplayer() const;
  public:
  void clear_gettxplayer();
  const ::msg::CSReqGetTxPlayer& gettxplayer() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetTxPlayer* release_gettxplayer();
  ::msg::CSReqGetTxPlayer* mutable_gettxplayer();
  void set_allocated_gettxplayer(::msg::CSReqGetTxPlayer* gettxplayer);
  private:
  const ::msg::CSReqGetTxPlayer& _internal_gettxplayer() const;
  ::msg::CSReqGetTxPlayer* _internal_mutable_gettxplayer();
  public:
  void unsafe_arena_set_allocated_gettxplayer(
      ::msg::CSReqGetTxPlayer* gettxplayer);
  ::msg::CSReqGetTxPlayer* unsafe_arena_release_gettxplayer();

  // .msg.CSReqChooseTxPlayer ChooseTxPlayer = 177;
  bool has_choosetxplayer() const;
  private:
  bool _internal_has_choosetxplayer() const;
  public:
  void clear_choosetxplayer();
  const ::msg::CSReqChooseTxPlayer& choosetxplayer() const;
  PROTOBUF_NODISCARD ::msg::CSReqChooseTxPlayer* release_choosetxplayer();
  ::msg::CSReqChooseTxPlayer* mutable_choosetxplayer();
  void set_allocated_choosetxplayer(::msg::CSReqChooseTxPlayer* choosetxplayer);
  private:
  const ::msg::CSReqChooseTxPlayer& _internal_choosetxplayer() const;
  ::msg::CSReqChooseTxPlayer* _internal_mutable_choosetxplayer();
  public:
  void unsafe_arena_set_allocated_choosetxplayer(
      ::msg::CSReqChooseTxPlayer* choosetxplayer);
  ::msg::CSReqChooseTxPlayer* unsafe_arena_release_choosetxplayer();

  // .msg.CSReqGetThirdPvpInfo GetThirdPvpInfo = 178;
  bool has_getthirdpvpinfo() const;
  private:
  bool _internal_has_getthirdpvpinfo() const;
  public:
  void clear_getthirdpvpinfo();
  const ::msg::CSReqGetThirdPvpInfo& getthirdpvpinfo() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetThirdPvpInfo* release_getthirdpvpinfo();
  ::msg::CSReqGetThirdPvpInfo* mutable_getthirdpvpinfo();
  void set_allocated_getthirdpvpinfo(::msg::CSReqGetThirdPvpInfo* getthirdpvpinfo);
  private:
  const ::msg::CSReqGetThirdPvpInfo& _internal_getthirdpvpinfo() const;
  ::msg::CSReqGetThirdPvpInfo* _internal_mutable_getthirdpvpinfo();
  public:
  void unsafe_arena_set_allocated_getthirdpvpinfo(
      ::msg::CSReqGetThirdPvpInfo* getthirdpvpinfo);
  ::msg::CSReqGetThirdPvpInfo* unsafe_arena_release_getthirdpvpinfo();

  // .msg.CSReqMarkPlayerGuide MarkPlayerGuide = 179;
  bool has_markplayerguide() const;
  private:
  bool _internal_has_markplayerguide() const;
  public:
  void clear_markplayerguide();
  const ::msg::CSReqMarkPlayerGuide& markplayerguide() const;
  PROTOBUF_NODISCARD ::msg::CSReqMarkPlayerGuide* release_markplayerguide();
  ::msg::CSReqMarkPlayerGuide* mutable_markplayerguide();
  void set_allocated_markplayerguide(::msg::CSReqMarkPlayerGuide* markplayerguide);
  private:
  const ::msg::CSReqMarkPlayerGuide& _internal_markplayerguide() const;
  ::msg::CSReqMarkPlayerGuide* _internal_mutable_markplayerguide();
  public:
  void unsafe_arena_set_allocated_markplayerguide(
      ::msg::CSReqMarkPlayerGuide* markplayerguide);
  ::msg::CSReqMarkPlayerGuide* unsafe_arena_release_markplayerguide();

  // .msg.CSReqMarkChessSkinClicked MarkChessSkinClicked = 180;
  bool has_markchessskinclicked() const;
  private:
  bool _internal_has_markchessskinclicked() const;
  public:
  void clear_markchessskinclicked();
  const ::msg::CSReqMarkChessSkinClicked& markchessskinclicked() const;
  PROTOBUF_NODISCARD ::msg::CSReqMarkChessSkinClicked* release_markchessskinclicked();
  ::msg::CSReqMarkChessSkinClicked* mutable_markchessskinclicked();
  void set_allocated_markchessskinclicked(::msg::CSReqMarkChessSkinClicked* markchessskinclicked);
  private:
  const ::msg::CSReqMarkChessSkinClicked& _internal_markchessskinclicked() const;
  ::msg::CSReqMarkChessSkinClicked* _internal_mutable_markchessskinclicked();
  public:
  void unsafe_arena_set_allocated_markchessskinclicked(
      ::msg::CSReqMarkChessSkinClicked* markchessskinclicked);
  ::msg::CSReqMarkChessSkinClicked* unsafe_arena_release_markchessskinclicked();

  // .msg.CSReqRecruitInvitePlayer RecruitInvitePlayer = 181;
  bool has_recruitinviteplayer() const;
  private:
  bool _internal_has_recruitinviteplayer() const;
  public:
  void clear_recruitinviteplayer();
  const ::msg::CSReqRecruitInvitePlayer& recruitinviteplayer() const;
  PROTOBUF_NODISCARD ::msg::CSReqRecruitInvitePlayer* release_recruitinviteplayer();
  ::msg::CSReqRecruitInvitePlayer* mutable_recruitinviteplayer();
  void set_allocated_recruitinviteplayer(::msg::CSReqRecruitInvitePlayer* recruitinviteplayer);
  private:
  const ::msg::CSReqRecruitInvitePlayer& _internal_recruitinviteplayer() const;
  ::msg::CSReqRecruitInvitePlayer* _internal_mutable_recruitinviteplayer();
  public:
  void unsafe_arena_set_allocated_recruitinviteplayer(
      ::msg::CSReqRecruitInvitePlayer* recruitinviteplayer);
  ::msg::CSReqRecruitInvitePlayer* unsafe_arena_release_recruitinviteplayer();

  // .msg.CSReqRecruitBindInviter RecruitBindInviter = 182;
  bool has_recruitbindinviter() const;
  private:
  bool _internal_has_recruitbindinviter() const;
  public:
  void clear_recruitbindinviter();
  const ::msg::CSReqRecruitBindInviter& recruitbindinviter() const;
  PROTOBUF_NODISCARD ::msg::CSReqRecruitBindInviter* release_recruitbindinviter();
  ::msg::CSReqRecruitBindInviter* mutable_recruitbindinviter();
  void set_allocated_recruitbindinviter(::msg::CSReqRecruitBindInviter* recruitbindinviter);
  private:
  const ::msg::CSReqRecruitBindInviter& _internal_recruitbindinviter() const;
  ::msg::CSReqRecruitBindInviter* _internal_mutable_recruitbindinviter();
  public:
  void unsafe_arena_set_allocated_recruitbindinviter(
      ::msg::CSReqRecruitBindInviter* recruitbindinviter);
  ::msg::CSReqRecruitBindInviter* unsafe_arena_release_recruitbindinviter();

  // .msg.CSReqQueryPs4Entitlements QueryPs4Entitlements = 183;
  bool has_queryps4entitlements() const;
  private:
  bool _internal_has_queryps4entitlements() const;
  public:
  void clear_queryps4entitlements();
  const ::msg::CSReqQueryPs4Entitlements& queryps4entitlements() const;
  PROTOBUF_NODISCARD ::msg::CSReqQueryPs4Entitlements* release_queryps4entitlements();
  ::msg::CSReqQueryPs4Entitlements* mutable_queryps4entitlements();
  void set_allocated_queryps4entitlements(::msg::CSReqQueryPs4Entitlements* queryps4entitlements);
  private:
  const ::msg::CSReqQueryPs4Entitlements& _internal_queryps4entitlements() const;
  ::msg::CSReqQueryPs4Entitlements* _internal_mutable_queryps4entitlements();
  public:
  void unsafe_arena_set_allocated_queryps4entitlements(
      ::msg::CSReqQueryPs4Entitlements* queryps4entitlements);
  ::msg::CSReqQueryPs4Entitlements* unsafe_arena_release_queryps4entitlements();

  // .msg.CSReqActDaySign ActDaySign = 184;
  bool has_actdaysign() const;
  private:
  bool _internal_has_actdaysign() const;
  public:
  void clear_actdaysign();
  const ::msg::CSReqActDaySign& actdaysign() const;
  PROTOBUF_NODISCARD ::msg::CSReqActDaySign* release_actdaysign();
  ::msg::CSReqActDaySign* mutable_actdaysign();
  void set_allocated_actdaysign(::msg::CSReqActDaySign* actdaysign);
  private:
  const ::msg::CSReqActDaySign& _internal_actdaysign() const;
  ::msg::CSReqActDaySign* _internal_mutable_actdaysign();
  public:
  void unsafe_arena_set_allocated_actdaysign(
      ::msg::CSReqActDaySign* actdaysign);
  ::msg::CSReqActDaySign* unsafe_arena_release_actdaysign();

  // .msg.CSReqHaveThirdPvp HaveThirdPvpInfo = 185;
  bool has_havethirdpvpinfo() const;
  private:
  bool _internal_has_havethirdpvpinfo() const;
  public:
  void clear_havethirdpvpinfo();
  const ::msg::CSReqHaveThirdPvp& havethirdpvpinfo() const;
  PROTOBUF_NODISCARD ::msg::CSReqHaveThirdPvp* release_havethirdpvpinfo();
  ::msg::CSReqHaveThirdPvp* mutable_havethirdpvpinfo();
  void set_allocated_havethirdpvpinfo(::msg::CSReqHaveThirdPvp* havethirdpvpinfo);
  private:
  const ::msg::CSReqHaveThirdPvp& _internal_havethirdpvpinfo() const;
  ::msg::CSReqHaveThirdPvp* _internal_mutable_havethirdpvpinfo();
  public:
  void unsafe_arena_set_allocated_havethirdpvpinfo(
      ::msg::CSReqHaveThirdPvp* havethirdpvpinfo);
  ::msg::CSReqHaveThirdPvp* unsafe_arena_release_havethirdpvpinfo();

  // .msg.CSReqActivityMall ActivityMall = 186;
  bool has_activitymall() const;
  private:
  bool _internal_has_activitymall() const;
  public:
  void clear_activitymall();
  const ::msg::CSReqActivityMall& activitymall() const;
  PROTOBUF_NODISCARD ::msg::CSReqActivityMall* release_activitymall();
  ::msg::CSReqActivityMall* mutable_activitymall();
  void set_allocated_activitymall(::msg::CSReqActivityMall* activitymall);
  private:
  const ::msg::CSReqActivityMall& _internal_activitymall() const;
  ::msg::CSReqActivityMall* _internal_mutable_activitymall();
  public:
  void unsafe_arena_set_allocated_activitymall(
      ::msg::CSReqActivityMall* activitymall);
  ::msg::CSReqActivityMall* unsafe_arena_release_activitymall();

  // .msg.CSReqPsOnly PsOnly = 187;
  bool has_psonly() const;
  private:
  bool _internal_has_psonly() const;
  public:
  void clear_psonly();
  const ::msg::CSReqPsOnly& psonly() const;
  PROTOBUF_NODISCARD ::msg::CSReqPsOnly* release_psonly();
  ::msg::CSReqPsOnly* mutable_psonly();
  void set_allocated_psonly(::msg::CSReqPsOnly* psonly);
  private:
  const ::msg::CSReqPsOnly& _internal_psonly() const;
  ::msg::CSReqPsOnly* _internal_mutable_psonly();
  public:
  void unsafe_arena_set_allocated_psonly(
      ::msg::CSReqPsOnly* psonly);
  ::msg::CSReqPsOnly* unsafe_arena_release_psonly();

  // .msg.CSReqChangeChannelType ChangeChannelType = 188;
  bool has_changechanneltype() const;
  private:
  bool _internal_has_changechanneltype() const;
  public:
  void clear_changechanneltype();
  const ::msg::CSReqChangeChannelType& changechanneltype() const;
  PROTOBUF_NODISCARD ::msg::CSReqChangeChannelType* release_changechanneltype();
  ::msg::CSReqChangeChannelType* mutable_changechanneltype();
  void set_allocated_changechanneltype(::msg::CSReqChangeChannelType* changechanneltype);
  private:
  const ::msg::CSReqChangeChannelType& _internal_changechanneltype() const;
  ::msg::CSReqChangeChannelType* _internal_mutable_changechanneltype();
  public:
  void unsafe_arena_set_allocated_changechanneltype(
      ::msg::CSReqChangeChannelType* changechanneltype);
  ::msg::CSReqChangeChannelType* unsafe_arena_release_changechanneltype();

  // .msg.CSReqCustomCardOpt CustomCardOpt = 189;
  bool has_customcardopt() const;
  private:
  bool _internal_has_customcardopt() const;
  public:
  void clear_customcardopt();
  const ::msg::CSReqCustomCardOpt& customcardopt() const;
  PROTOBUF_NODISCARD ::msg::CSReqCustomCardOpt* release_customcardopt();
  ::msg::CSReqCustomCardOpt* mutable_customcardopt();
  void set_allocated_customcardopt(::msg::CSReqCustomCardOpt* customcardopt);
  private:
  const ::msg::CSReqCustomCardOpt& _internal_customcardopt() const;
  ::msg::CSReqCustomCardOpt* _internal_mutable_customcardopt();
  public:
  void unsafe_arena_set_allocated_customcardopt(
      ::msg::CSReqCustomCardOpt* customcardopt);
  ::msg::CSReqCustomCardOpt* unsafe_arena_release_customcardopt();

  // .msg.CSReqStaticsReport StaticsReport = 190;
  bool has_staticsreport() const;
  private:
  bool _internal_has_staticsreport() const;
  public:
  void clear_staticsreport();
  const ::msg::CSReqStaticsReport& staticsreport() const;
  PROTOBUF_NODISCARD ::msg::CSReqStaticsReport* release_staticsreport();
  ::msg::CSReqStaticsReport* mutable_staticsreport();
  void set_allocated_staticsreport(::msg::CSReqStaticsReport* staticsreport);
  private:
  const ::msg::CSReqStaticsReport& _internal_staticsreport() const;
  ::msg::CSReqStaticsReport* _internal_mutable_staticsreport();
  public:
  void unsafe_arena_set_allocated_staticsreport(
      ::msg::CSReqStaticsReport* staticsreport);
  ::msg::CSReqStaticsReport* unsafe_arena_release_staticsreport();

  // .msg.CSReqChampionHistory ChampionHistory = 191;
  bool has_championhistory() const;
  private:
  bool _internal_has_championhistory() const;
  public:
  void clear_championhistory();
  const ::msg::CSReqChampionHistory& championhistory() const;
  PROTOBUF_NODISCARD ::msg::CSReqChampionHistory* release_championhistory();
  ::msg::CSReqChampionHistory* mutable_championhistory();
  void set_allocated_championhistory(::msg::CSReqChampionHistory* championhistory);
  private:
  const ::msg::CSReqChampionHistory& _internal_championhistory() const;
  ::msg::CSReqChampionHistory* _internal_mutable_championhistory();
  public:
  void unsafe_arena_set_allocated_championhistory(
      ::msg::CSReqChampionHistory* championhistory);
  ::msg::CSReqChampionHistory* unsafe_arena_release_championhistory();

  // .msg.CSReqTournamentLastTopRank TournamentLastTopRank = 192;
  bool has_tournamentlasttoprank() const;
  private:
  bool _internal_has_tournamentlasttoprank() const;
  public:
  void clear_tournamentlasttoprank();
  const ::msg::CSReqTournamentLastTopRank& tournamentlasttoprank() const;
  PROTOBUF_NODISCARD ::msg::CSReqTournamentLastTopRank* release_tournamentlasttoprank();
  ::msg::CSReqTournamentLastTopRank* mutable_tournamentlasttoprank();
  void set_allocated_tournamentlasttoprank(::msg::CSReqTournamentLastTopRank* tournamentlasttoprank);
  private:
  const ::msg::CSReqTournamentLastTopRank& _internal_tournamentlasttoprank() const;
  ::msg::CSReqTournamentLastTopRank* _internal_mutable_tournamentlasttoprank();
  public:
  void unsafe_arena_set_allocated_tournamentlasttoprank(
      ::msg::CSReqTournamentLastTopRank* tournamentlasttoprank);
  ::msg::CSReqTournamentLastTopRank* unsafe_arena_release_tournamentlasttoprank();

  // .msg.CSReqBigWinnerExpandMatch BigWinnerExpandMatch = 193;
  bool has_bigwinnerexpandmatch() const;
  private:
  bool _internal_has_bigwinnerexpandmatch() const;
  public:
  void clear_bigwinnerexpandmatch();
  const ::msg::CSReqBigWinnerExpandMatch& bigwinnerexpandmatch() const;
  PROTOBUF_NODISCARD ::msg::CSReqBigWinnerExpandMatch* release_bigwinnerexpandmatch();
  ::msg::CSReqBigWinnerExpandMatch* mutable_bigwinnerexpandmatch();
  void set_allocated_bigwinnerexpandmatch(::msg::CSReqBigWinnerExpandMatch* bigwinnerexpandmatch);
  private:
  const ::msg::CSReqBigWinnerExpandMatch& _internal_bigwinnerexpandmatch() const;
  ::msg::CSReqBigWinnerExpandMatch* _internal_mutable_bigwinnerexpandmatch();
  public:
  void unsafe_arena_set_allocated_bigwinnerexpandmatch(
      ::msg::CSReqBigWinnerExpandMatch* bigwinnerexpandmatch);
  ::msg::CSReqBigWinnerExpandMatch* unsafe_arena_release_bigwinnerexpandmatch();

  // .msg.CSReqBigWinnerDailyAward BigWinnerDailyAward = 194;
  bool has_bigwinnerdailyaward() const;
  private:
  bool _internal_has_bigwinnerdailyaward() const;
  public:
  void clear_bigwinnerdailyaward();
  const ::msg::CSReqBigWinnerDailyAward& bigwinnerdailyaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqBigWinnerDailyAward* release_bigwinnerdailyaward();
  ::msg::CSReqBigWinnerDailyAward* mutable_bigwinnerdailyaward();
  void set_allocated_bigwinnerdailyaward(::msg::CSReqBigWinnerDailyAward* bigwinnerdailyaward);
  private:
  const ::msg::CSReqBigWinnerDailyAward& _internal_bigwinnerdailyaward() const;
  ::msg::CSReqBigWinnerDailyAward* _internal_mutable_bigwinnerdailyaward();
  public:
  void unsafe_arena_set_allocated_bigwinnerdailyaward(
      ::msg::CSReqBigWinnerDailyAward* bigwinnerdailyaward);
  ::msg::CSReqBigWinnerDailyAward* unsafe_arena_release_bigwinnerdailyaward();

  // .msg.CSReqBigWinnerScoreHistory BigWinnerScoreHistory = 195;
  bool has_bigwinnerscorehistory() const;
  private:
  bool _internal_has_bigwinnerscorehistory() const;
  public:
  void clear_bigwinnerscorehistory();
  const ::msg::CSReqBigWinnerScoreHistory& bigwinnerscorehistory() const;
  PROTOBUF_NODISCARD ::msg::CSReqBigWinnerScoreHistory* release_bigwinnerscorehistory();
  ::msg::CSReqBigWinnerScoreHistory* mutable_bigwinnerscorehistory();
  void set_allocated_bigwinnerscorehistory(::msg::CSReqBigWinnerScoreHistory* bigwinnerscorehistory);
  private:
  const ::msg::CSReqBigWinnerScoreHistory& _internal_bigwinnerscorehistory() const;
  ::msg::CSReqBigWinnerScoreHistory* _internal_mutable_bigwinnerscorehistory();
  public:
  void unsafe_arena_set_allocated_bigwinnerscorehistory(
      ::msg::CSReqBigWinnerScoreHistory* bigwinnerscorehistory);
  ::msg::CSReqBigWinnerScoreHistory* unsafe_arena_release_bigwinnerscorehistory();

  // .msg.CSReqSmeltItem SmeltItem = 196;
  bool has_smeltitem() const;
  private:
  bool _internal_has_smeltitem() const;
  public:
  void clear_smeltitem();
  const ::msg::CSReqSmeltItem& smeltitem() const;
  PROTOBUF_NODISCARD ::msg::CSReqSmeltItem* release_smeltitem();
  ::msg::CSReqSmeltItem* mutable_smeltitem();
  void set_allocated_smeltitem(::msg::CSReqSmeltItem* smeltitem);
  private:
  const ::msg::CSReqSmeltItem& _internal_smeltitem() const;
  ::msg::CSReqSmeltItem* _internal_mutable_smeltitem();
  public:
  void unsafe_arena_set_allocated_smeltitem(
      ::msg::CSReqSmeltItem* smeltitem);
  ::msg::CSReqSmeltItem* unsafe_arena_release_smeltitem();

  // .msg.CSReqPVEUpTalentLevel PVEUpTalentLevel = 197;
  bool has_pveuptalentlevel() const;
  private:
  bool _internal_has_pveuptalentlevel() const;
  public:
  void clear_pveuptalentlevel();
  const ::msg::CSReqPVEUpTalentLevel& pveuptalentlevel() const;
  PROTOBUF_NODISCARD ::msg::CSReqPVEUpTalentLevel* release_pveuptalentlevel();
  ::msg::CSReqPVEUpTalentLevel* mutable_pveuptalentlevel();
  void set_allocated_pveuptalentlevel(::msg::CSReqPVEUpTalentLevel* pveuptalentlevel);
  private:
  const ::msg::CSReqPVEUpTalentLevel& _internal_pveuptalentlevel() const;
  ::msg::CSReqPVEUpTalentLevel* _internal_mutable_pveuptalentlevel();
  public:
  void unsafe_arena_set_allocated_pveuptalentlevel(
      ::msg::CSReqPVEUpTalentLevel* pveuptalentlevel);
  ::msg::CSReqPVEUpTalentLevel* unsafe_arena_release_pveuptalentlevel();

  // .msg.CSReqPVELuckyAward LuckyAward = 198;
  bool has_luckyaward() const;
  private:
  bool _internal_has_luckyaward() const;
  public:
  void clear_luckyaward();
  const ::msg::CSReqPVELuckyAward& luckyaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqPVELuckyAward* release_luckyaward();
  ::msg::CSReqPVELuckyAward* mutable_luckyaward();
  void set_allocated_luckyaward(::msg::CSReqPVELuckyAward* luckyaward);
  private:
  const ::msg::CSReqPVELuckyAward& _internal_luckyaward() const;
  ::msg::CSReqPVELuckyAward* _internal_mutable_luckyaward();
  public:
  void unsafe_arena_set_allocated_luckyaward(
      ::msg::CSReqPVELuckyAward* luckyaward);
  ::msg::CSReqPVELuckyAward* unsafe_arena_release_luckyaward();

  // .msg.CSReqApplyChannel ApplyChannel = 199;
  bool has_applychannel() const;
  private:
  bool _internal_has_applychannel() const;
  public:
  void clear_applychannel();
  const ::msg::CSReqApplyChannel& applychannel() const;
  PROTOBUF_NODISCARD ::msg::CSReqApplyChannel* release_applychannel();
  ::msg::CSReqApplyChannel* mutable_applychannel();
  void set_allocated_applychannel(::msg::CSReqApplyChannel* applychannel);
  private:
  const ::msg::CSReqApplyChannel& _internal_applychannel() const;
  ::msg::CSReqApplyChannel* _internal_mutable_applychannel();
  public:
  void unsafe_arena_set_allocated_applychannel(
      ::msg::CSReqApplyChannel* applychannel);
  ::msg::CSReqApplyChannel* unsafe_arena_release_applychannel();

  // .msg.CSReqTeamOP TeamOP = 300;
  bool has_teamop() const;
  private:
  bool _internal_has_teamop() const;
  public:
  void clear_teamop();
  const ::msg::CSReqTeamOP& teamop() const;
  PROTOBUF_NODISCARD ::msg::CSReqTeamOP* release_teamop();
  ::msg::CSReqTeamOP* mutable_teamop();
  void set_allocated_teamop(::msg::CSReqTeamOP* teamop);
  private:
  const ::msg::CSReqTeamOP& _internal_teamop() const;
  ::msg::CSReqTeamOP* _internal_mutable_teamop();
  public:
  void unsafe_arena_set_allocated_teamop(
      ::msg::CSReqTeamOP* teamop);
  ::msg::CSReqTeamOP* unsafe_arena_release_teamop();

  // .msg.CSReqOBTeamInfo OBTeamInfo = 301;
  bool has_obteaminfo() const;
  private:
  bool _internal_has_obteaminfo() const;
  public:
  void clear_obteaminfo();
  const ::msg::CSReqOBTeamInfo& obteaminfo() const;
  PROTOBUF_NODISCARD ::msg::CSReqOBTeamInfo* release_obteaminfo();
  ::msg::CSReqOBTeamInfo* mutable_obteaminfo();
  void set_allocated_obteaminfo(::msg::CSReqOBTeamInfo* obteaminfo);
  private:
  const ::msg::CSReqOBTeamInfo& _internal_obteaminfo() const;
  ::msg::CSReqOBTeamInfo* _internal_mutable_obteaminfo();
  public:
  void unsafe_arena_set_allocated_obteaminfo(
      ::msg::CSReqOBTeamInfo* obteaminfo);
  ::msg::CSReqOBTeamInfo* unsafe_arena_release_obteaminfo();

  // .msg.CSReqReportHeadIconUrl HeadIconUrl = 302;
  bool has_headiconurl() const;
  private:
  bool _internal_has_headiconurl() const;
  public:
  void clear_headiconurl();
  const ::msg::CSReqReportHeadIconUrl& headiconurl() const;
  PROTOBUF_NODISCARD ::msg::CSReqReportHeadIconUrl* release_headiconurl();
  ::msg::CSReqReportHeadIconUrl* mutable_headiconurl();
  void set_allocated_headiconurl(::msg::CSReqReportHeadIconUrl* headiconurl);
  private:
  const ::msg::CSReqReportHeadIconUrl& _internal_headiconurl() const;
  ::msg::CSReqReportHeadIconUrl* _internal_mutable_headiconurl();
  public:
  void unsafe_arena_set_allocated_headiconurl(
      ::msg::CSReqReportHeadIconUrl* headiconurl);
  ::msg::CSReqReportHeadIconUrl* unsafe_arena_release_headiconurl();

  // .msg.CSReqGetPvpServerGroup GetPvpServerGroup = 303;
  bool has_getpvpservergroup() const;
  private:
  bool _internal_has_getpvpservergroup() const;
  public:
  void clear_getpvpservergroup();
  const ::msg::CSReqGetPvpServerGroup& getpvpservergroup() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetPvpServerGroup* release_getpvpservergroup();
  ::msg::CSReqGetPvpServerGroup* mutable_getpvpservergroup();
  void set_allocated_getpvpservergroup(::msg::CSReqGetPvpServerGroup* getpvpservergroup);
  private:
  const ::msg::CSReqGetPvpServerGroup& _internal_getpvpservergroup() const;
  ::msg::CSReqGetPvpServerGroup* _internal_mutable_getpvpservergroup();
  public:
  void unsafe_arena_set_allocated_getpvpservergroup(
      ::msg::CSReqGetPvpServerGroup* getpvpservergroup);
  ::msg::CSReqGetPvpServerGroup* unsafe_arena_release_getpvpservergroup();

  // .msg.CSReqReportPvpInfo ReportPvpInfo = 304;
  bool has_reportpvpinfo() const;
  private:
  bool _internal_has_reportpvpinfo() const;
  public:
  void clear_reportpvpinfo();
  const ::msg::CSReqReportPvpInfo& reportpvpinfo() const;
  PROTOBUF_NODISCARD ::msg::CSReqReportPvpInfo* release_reportpvpinfo();
  ::msg::CSReqReportPvpInfo* mutable_reportpvpinfo();
  void set_allocated_reportpvpinfo(::msg::CSReqReportPvpInfo* reportpvpinfo);
  private:
  const ::msg::CSReqReportPvpInfo& _internal_reportpvpinfo() const;
  ::msg::CSReqReportPvpInfo* _internal_mutable_reportpvpinfo();
  public:
  void unsafe_arena_set_allocated_reportpvpinfo(
      ::msg::CSReqReportPvpInfo* reportpvpinfo);
  ::msg::CSReqReportPvpInfo* unsafe_arena_release_reportpvpinfo();

  // .msg.CSReqChoosePlayer ChoosePlayer = 305;
  bool has_chooseplayer() const;
  private:
  bool _internal_has_chooseplayer() const;
  public:
  void clear_chooseplayer();
  const ::msg::CSReqChoosePlayer& chooseplayer() const;
  PROTOBUF_NODISCARD ::msg::CSReqChoosePlayer* release_chooseplayer();
  ::msg::CSReqChoosePlayer* mutable_chooseplayer();
  void set_allocated_chooseplayer(::msg::CSReqChoosePlayer* chooseplayer);
  private:
  const ::msg::CSReqChoosePlayer& _internal_chooseplayer() const;
  ::msg::CSReqChoosePlayer* _internal_mutable_chooseplayer();
  public:
  void unsafe_arena_set_allocated_chooseplayer(
      ::msg::CSReqChoosePlayer* chooseplayer);
  ::msg::CSReqChoosePlayer* unsafe_arena_release_chooseplayer();

  // .msg.CSReqPingTest PingTest = 306;
  bool has_pingtest() const;
  private:
  bool _internal_has_pingtest() const;
  public:
  void clear_pingtest();
  const ::msg::CSReqPingTest& pingtest() const;
  PROTOBUF_NODISCARD ::msg::CSReqPingTest* release_pingtest();
  ::msg::CSReqPingTest* mutable_pingtest();
  void set_allocated_pingtest(::msg::CSReqPingTest* pingtest);
  private:
  const ::msg::CSReqPingTest& _internal_pingtest() const;
  ::msg::CSReqPingTest* _internal_mutable_pingtest();
  public:
  void unsafe_arena_set_allocated_pingtest(
      ::msg::CSReqPingTest* pingtest);
  ::msg::CSReqPingTest* unsafe_arena_release_pingtest();

  // .msg.CSReqReportRegionInfo ReportRegionInfo = 307;
  bool has_reportregioninfo() const;
  private:
  bool _internal_has_reportregioninfo() const;
  public:
  void clear_reportregioninfo();
  const ::msg::CSReqReportRegionInfo& reportregioninfo() const;
  PROTOBUF_NODISCARD ::msg::CSReqReportRegionInfo* release_reportregioninfo();
  ::msg::CSReqReportRegionInfo* mutable_reportregioninfo();
  void set_allocated_reportregioninfo(::msg::CSReqReportRegionInfo* reportregioninfo);
  private:
  const ::msg::CSReqReportRegionInfo& _internal_reportregioninfo() const;
  ::msg::CSReqReportRegionInfo* _internal_mutable_reportregioninfo();
  public:
  void unsafe_arena_set_allocated_reportregioninfo(
      ::msg::CSReqReportRegionInfo* reportregioninfo);
  ::msg::CSReqReportRegionInfo* unsafe_arena_release_reportregioninfo();

  // .msg.CSReqRecalledPlayer RecalledPlaeyr = 308;
  bool has_recalledplaeyr() const;
  private:
  bool _internal_has_recalledplaeyr() const;
  public:
  void clear_recalledplaeyr();
  const ::msg::CSReqRecalledPlayer& recalledplaeyr() const;
  PROTOBUF_NODISCARD ::msg::CSReqRecalledPlayer* release_recalledplaeyr();
  ::msg::CSReqRecalledPlayer* mutable_recalledplaeyr();
  void set_allocated_recalledplaeyr(::msg::CSReqRecalledPlayer* recalledplaeyr);
  private:
  const ::msg::CSReqRecalledPlayer& _internal_recalledplaeyr() const;
  ::msg::CSReqRecalledPlayer* _internal_mutable_recalledplaeyr();
  public:
  void unsafe_arena_set_allocated_recalledplaeyr(
      ::msg::CSReqRecalledPlayer* recalledplaeyr);
  ::msg::CSReqRecalledPlayer* unsafe_arena_release_recalledplaeyr();

  // .msg.CSReqWebLogin WebLogin = 309;
  bool has_weblogin() const;
  private:
  bool _internal_has_weblogin() const;
  public:
  void clear_weblogin();
  const ::msg::CSReqWebLogin& weblogin() const;
  PROTOBUF_NODISCARD ::msg::CSReqWebLogin* release_weblogin();
  ::msg::CSReqWebLogin* mutable_weblogin();
  void set_allocated_weblogin(::msg::CSReqWebLogin* weblogin);
  private:
  const ::msg::CSReqWebLogin& _internal_weblogin() const;
  ::msg::CSReqWebLogin* _internal_mutable_weblogin();
  public:
  void unsafe_arena_set_allocated_weblogin(
      ::msg::CSReqWebLogin* weblogin);
  ::msg::CSReqWebLogin* unsafe_arena_release_weblogin();

  // .msg.CSReqInviteCodeReset InviteCodeReset = 310;
  bool has_invitecodereset() const;
  private:
  bool _internal_has_invitecodereset() const;
  public:
  void clear_invitecodereset();
  const ::msg::CSReqInviteCodeReset& invitecodereset() const;
  PROTOBUF_NODISCARD ::msg::CSReqInviteCodeReset* release_invitecodereset();
  ::msg::CSReqInviteCodeReset* mutable_invitecodereset();
  void set_allocated_invitecodereset(::msg::CSReqInviteCodeReset* invitecodereset);
  private:
  const ::msg::CSReqInviteCodeReset& _internal_invitecodereset() const;
  ::msg::CSReqInviteCodeReset* _internal_mutable_invitecodereset();
  public:
  void unsafe_arena_set_allocated_invitecodereset(
      ::msg::CSReqInviteCodeReset* invitecodereset);
  ::msg::CSReqInviteCodeReset* unsafe_arena_release_invitecodereset();

  // .msg.CSReqRecallReward RecallReward = 311;
  bool has_recallreward() const;
  private:
  bool _internal_has_recallreward() const;
  public:
  void clear_recallreward();
  const ::msg::CSReqRecallReward& recallreward() const;
  PROTOBUF_NODISCARD ::msg::CSReqRecallReward* release_recallreward();
  ::msg::CSReqRecallReward* mutable_recallreward();
  void set_allocated_recallreward(::msg::CSReqRecallReward* recallreward);
  private:
  const ::msg::CSReqRecallReward& _internal_recallreward() const;
  ::msg::CSReqRecallReward* _internal_mutable_recallreward();
  public:
  void unsafe_arena_set_allocated_recallreward(
      ::msg::CSReqRecallReward* recallreward);
  ::msg::CSReqRecallReward* unsafe_arena_release_recallreward();

  // .msg.CSReqSwitchToCommonMatch SwitchToCommonMatch = 312;
  bool has_switchtocommonmatch() const;
  private:
  bool _internal_has_switchtocommonmatch() const;
  public:
  void clear_switchtocommonmatch();
  const ::msg::CSReqSwitchToCommonMatch& switchtocommonmatch() const;
  PROTOBUF_NODISCARD ::msg::CSReqSwitchToCommonMatch* release_switchtocommonmatch();
  ::msg::CSReqSwitchToCommonMatch* mutable_switchtocommonmatch();
  void set_allocated_switchtocommonmatch(::msg::CSReqSwitchToCommonMatch* switchtocommonmatch);
  private:
  const ::msg::CSReqSwitchToCommonMatch& _internal_switchtocommonmatch() const;
  ::msg::CSReqSwitchToCommonMatch* _internal_mutable_switchtocommonmatch();
  public:
  void unsafe_arena_set_allocated_switchtocommonmatch(
      ::msg::CSReqSwitchToCommonMatch* switchtocommonmatch);
  ::msg::CSReqSwitchToCommonMatch* unsafe_arena_release_switchtocommonmatch();

  // .msg.CSReqSwitchModeInTeam SwitchModeInTeam = 320;
  bool has_switchmodeinteam() const;
  private:
  bool _internal_has_switchmodeinteam() const;
  public:
  void clear_switchmodeinteam();
  const ::msg::CSReqSwitchModeInTeam& switchmodeinteam() const;
  PROTOBUF_NODISCARD ::msg::CSReqSwitchModeInTeam* release_switchmodeinteam();
  ::msg::CSReqSwitchModeInTeam* mutable_switchmodeinteam();
  void set_allocated_switchmodeinteam(::msg::CSReqSwitchModeInTeam* switchmodeinteam);
  private:
  const ::msg::CSReqSwitchModeInTeam& _internal_switchmodeinteam() const;
  ::msg::CSReqSwitchModeInTeam* _internal_mutable_switchmodeinteam();
  public:
  void unsafe_arena_set_allocated_switchmodeinteam(
      ::msg::CSReqSwitchModeInTeam* switchmodeinteam);
  ::msg::CSReqSwitchModeInTeam* unsafe_arena_release_switchmodeinteam();

  // .msg.CSReqGetTNRoomState GetTNRoomState = 321;
  bool has_gettnroomstate() const;
  private:
  bool _internal_has_gettnroomstate() const;
  public:
  void clear_gettnroomstate();
  const ::msg::CSReqGetTNRoomState& gettnroomstate() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetTNRoomState* release_gettnroomstate();
  ::msg::CSReqGetTNRoomState* mutable_gettnroomstate();
  void set_allocated_gettnroomstate(::msg::CSReqGetTNRoomState* gettnroomstate);
  private:
  const ::msg::CSReqGetTNRoomState& _internal_gettnroomstate() const;
  ::msg::CSReqGetTNRoomState* _internal_mutable_gettnroomstate();
  public:
  void unsafe_arena_set_allocated_gettnroomstate(
      ::msg::CSReqGetTNRoomState* gettnroomstate);
  ::msg::CSReqGetTNRoomState* unsafe_arena_release_gettnroomstate();

  // .msg.CSReqWorkshopMatch WorkshopMatch = 330;
  bool has_workshopmatch() const;
  private:
  bool _internal_has_workshopmatch() const;
  public:
  void clear_workshopmatch();
  const ::msg::CSReqWorkshopMatch& workshopmatch() const;
  PROTOBUF_NODISCARD ::msg::CSReqWorkshopMatch* release_workshopmatch();
  ::msg::CSReqWorkshopMatch* mutable_workshopmatch();
  void set_allocated_workshopmatch(::msg::CSReqWorkshopMatch* workshopmatch);
  private:
  const ::msg::CSReqWorkshopMatch& _internal_workshopmatch() const;
  ::msg::CSReqWorkshopMatch* _internal_mutable_workshopmatch();
  public:
  void unsafe_arena_set_allocated_workshopmatch(
      ::msg::CSReqWorkshopMatch* workshopmatch);
  ::msg::CSReqWorkshopMatch* unsafe_arena_release_workshopmatch();

  // .msg.CSReqBuyWorkshopTicket BuyWorkshopTicket = 331;
  bool has_buyworkshopticket() const;
  private:
  bool _internal_has_buyworkshopticket() const;
  public:
  void clear_buyworkshopticket();
  const ::msg::CSReqBuyWorkshopTicket& buyworkshopticket() const;
  PROTOBUF_NODISCARD ::msg::CSReqBuyWorkshopTicket* release_buyworkshopticket();
  ::msg::CSReqBuyWorkshopTicket* mutable_buyworkshopticket();
  void set_allocated_buyworkshopticket(::msg::CSReqBuyWorkshopTicket* buyworkshopticket);
  private:
  const ::msg::CSReqBuyWorkshopTicket& _internal_buyworkshopticket() const;
  ::msg::CSReqBuyWorkshopTicket* _internal_mutable_buyworkshopticket();
  public:
  void unsafe_arena_set_allocated_buyworkshopticket(
      ::msg::CSReqBuyWorkshopTicket* buyworkshopticket);
  ::msg::CSReqBuyWorkshopTicket* unsafe_arena_release_buyworkshopticket();

  // .msg.CSReqFavouriteWorkshopMap FavouriteWorkshopMap = 332;
  bool has_favouriteworkshopmap() const;
  private:
  bool _internal_has_favouriteworkshopmap() const;
  public:
  void clear_favouriteworkshopmap();
  const ::msg::CSReqFavouriteWorkshopMap& favouriteworkshopmap() const;
  PROTOBUF_NODISCARD ::msg::CSReqFavouriteWorkshopMap* release_favouriteworkshopmap();
  ::msg::CSReqFavouriteWorkshopMap* mutable_favouriteworkshopmap();
  void set_allocated_favouriteworkshopmap(::msg::CSReqFavouriteWorkshopMap* favouriteworkshopmap);
  private:
  const ::msg::CSReqFavouriteWorkshopMap& _internal_favouriteworkshopmap() const;
  ::msg::CSReqFavouriteWorkshopMap* _internal_mutable_favouriteworkshopmap();
  public:
  void unsafe_arena_set_allocated_favouriteworkshopmap(
      ::msg::CSReqFavouriteWorkshopMap* favouriteworkshopmap);
  ::msg::CSReqFavouriteWorkshopMap* unsafe_arena_release_favouriteworkshopmap();

  // .msg.CSReqShortcutMapsOP ShortcutMapsOP = 333;
  bool has_shortcutmapsop() const;
  private:
  bool _internal_has_shortcutmapsop() const;
  public:
  void clear_shortcutmapsop();
  const ::msg::CSReqShortcutMapsOP& shortcutmapsop() const;
  PROTOBUF_NODISCARD ::msg::CSReqShortcutMapsOP* release_shortcutmapsop();
  ::msg::CSReqShortcutMapsOP* mutable_shortcutmapsop();
  void set_allocated_shortcutmapsop(::msg::CSReqShortcutMapsOP* shortcutmapsop);
  private:
  const ::msg::CSReqShortcutMapsOP& _internal_shortcutmapsop() const;
  ::msg::CSReqShortcutMapsOP* _internal_mutable_shortcutmapsop();
  public:
  void unsafe_arena_set_allocated_shortcutmapsop(
      ::msg::CSReqShortcutMapsOP* shortcutmapsop);
  ::msg::CSReqShortcutMapsOP* unsafe_arena_release_shortcutmapsop();

  // .msg.CSReqPlayersTournamentInfo PlayersTournamentInfo = 334;
  bool has_playerstournamentinfo() const;
  private:
  bool _internal_has_playerstournamentinfo() const;
  public:
  void clear_playerstournamentinfo();
  const ::msg::CSReqPlayersTournamentInfo& playerstournamentinfo() const;
  PROTOBUF_NODISCARD ::msg::CSReqPlayersTournamentInfo* release_playerstournamentinfo();
  ::msg::CSReqPlayersTournamentInfo* mutable_playerstournamentinfo();
  void set_allocated_playerstournamentinfo(::msg::CSReqPlayersTournamentInfo* playerstournamentinfo);
  private:
  const ::msg::CSReqPlayersTournamentInfo& _internal_playerstournamentinfo() const;
  ::msg::CSReqPlayersTournamentInfo* _internal_mutable_playerstournamentinfo();
  public:
  void unsafe_arena_set_allocated_playerstournamentinfo(
      ::msg::CSReqPlayersTournamentInfo* playerstournamentinfo);
  ::msg::CSReqPlayersTournamentInfo* unsafe_arena_release_playerstournamentinfo();

  // .msg.CSReqScoreWorkshopMap ScoreWorkshopMap = 335;
  bool has_scoreworkshopmap() const;
  private:
  bool _internal_has_scoreworkshopmap() const;
  public:
  void clear_scoreworkshopmap();
  const ::msg::CSReqScoreWorkshopMap& scoreworkshopmap() const;
  PROTOBUF_NODISCARD ::msg::CSReqScoreWorkshopMap* release_scoreworkshopmap();
  ::msg::CSReqScoreWorkshopMap* mutable_scoreworkshopmap();
  void set_allocated_scoreworkshopmap(::msg::CSReqScoreWorkshopMap* scoreworkshopmap);
  private:
  const ::msg::CSReqScoreWorkshopMap& _internal_scoreworkshopmap() const;
  ::msg::CSReqScoreWorkshopMap* _internal_mutable_scoreworkshopmap();
  public:
  void unsafe_arena_set_allocated_scoreworkshopmap(
      ::msg::CSReqScoreWorkshopMap* scoreworkshopmap);
  ::msg::CSReqScoreWorkshopMap* unsafe_arena_release_scoreworkshopmap();

  // .msg.CSReqMapsVisitedByFriends MapsVisitedByFriends = 336;
  bool has_mapsvisitedbyfriends() const;
  private:
  bool _internal_has_mapsvisitedbyfriends() const;
  public:
  void clear_mapsvisitedbyfriends();
  const ::msg::CSReqMapsVisitedByFriends& mapsvisitedbyfriends() const;
  PROTOBUF_NODISCARD ::msg::CSReqMapsVisitedByFriends* release_mapsvisitedbyfriends();
  ::msg::CSReqMapsVisitedByFriends* mutable_mapsvisitedbyfriends();
  void set_allocated_mapsvisitedbyfriends(::msg::CSReqMapsVisitedByFriends* mapsvisitedbyfriends);
  private:
  const ::msg::CSReqMapsVisitedByFriends& _internal_mapsvisitedbyfriends() const;
  ::msg::CSReqMapsVisitedByFriends* _internal_mutable_mapsvisitedbyfriends();
  public:
  void unsafe_arena_set_allocated_mapsvisitedbyfriends(
      ::msg::CSReqMapsVisitedByFriends* mapsvisitedbyfriends);
  ::msg::CSReqMapsVisitedByFriends* unsafe_arena_release_mapsvisitedbyfriends();

  // .msg.CSReqVerifyRealName VerifyRealName = 350;
  bool has_verifyrealname() const;
  private:
  bool _internal_has_verifyrealname() const;
  public:
  void clear_verifyrealname();
  const ::msg::CSReqVerifyRealName& verifyrealname() const;
  PROTOBUF_NODISCARD ::msg::CSReqVerifyRealName* release_verifyrealname();
  ::msg::CSReqVerifyRealName* mutable_verifyrealname();
  void set_allocated_verifyrealname(::msg::CSReqVerifyRealName* verifyrealname);
  private:
  const ::msg::CSReqVerifyRealName& _internal_verifyrealname() const;
  ::msg::CSReqVerifyRealName* _internal_mutable_verifyrealname();
  public:
  void unsafe_arena_set_allocated_verifyrealname(
      ::msg::CSReqVerifyRealName* verifyrealname);
  ::msg::CSReqVerifyRealName* unsafe_arena_release_verifyrealname();

  // .msg.CSReqFakePay FakePay = 351;
  bool has_fakepay() const;
  private:
  bool _internal_has_fakepay() const;
  public:
  void clear_fakepay();
  const ::msg::CSReqFakePay& fakepay() const;
  PROTOBUF_NODISCARD ::msg::CSReqFakePay* release_fakepay();
  ::msg::CSReqFakePay* mutable_fakepay();
  void set_allocated_fakepay(::msg::CSReqFakePay* fakepay);
  private:
  const ::msg::CSReqFakePay& _internal_fakepay() const;
  ::msg::CSReqFakePay* _internal_mutable_fakepay();
  public:
  void unsafe_arena_set_allocated_fakepay(
      ::msg::CSReqFakePay* fakepay);
  ::msg::CSReqFakePay* unsafe_arena_release_fakepay();

  // .msg.CSReqGuildCreate GuildCreate = 360;
  bool has_guildcreate() const;
  private:
  bool _internal_has_guildcreate() const;
  public:
  void clear_guildcreate();
  const ::msg::CSReqGuildCreate& guildcreate() const;
  PROTOBUF_NODISCARD ::msg::CSReqGuildCreate* release_guildcreate();
  ::msg::CSReqGuildCreate* mutable_guildcreate();
  void set_allocated_guildcreate(::msg::CSReqGuildCreate* guildcreate);
  private:
  const ::msg::CSReqGuildCreate& _internal_guildcreate() const;
  ::msg::CSReqGuildCreate* _internal_mutable_guildcreate();
  public:
  void unsafe_arena_set_allocated_guildcreate(
      ::msg::CSReqGuildCreate* guildcreate);
  ::msg::CSReqGuildCreate* unsafe_arena_release_guildcreate();

  // .msg.CSReqGuildApply GuildApply = 361;
  bool has_guildapply() const;
  private:
  bool _internal_has_guildapply() const;
  public:
  void clear_guildapply();
  const ::msg::CSReqGuildApply& guildapply() const;
  PROTOBUF_NODISCARD ::msg::CSReqGuildApply* release_guildapply();
  ::msg::CSReqGuildApply* mutable_guildapply();
  void set_allocated_guildapply(::msg::CSReqGuildApply* guildapply);
  private:
  const ::msg::CSReqGuildApply& _internal_guildapply() const;
  ::msg::CSReqGuildApply* _internal_mutable_guildapply();
  public:
  void unsafe_arena_set_allocated_guildapply(
      ::msg::CSReqGuildApply* guildapply);
  ::msg::CSReqGuildApply* unsafe_arena_release_guildapply();

  // .msg.CSReqGuildHome GuildHome = 362;
  bool has_guildhome() const;
  private:
  bool _internal_has_guildhome() const;
  public:
  void clear_guildhome();
  const ::msg::CSReqGuildHome& guildhome() const;
  PROTOBUF_NODISCARD ::msg::CSReqGuildHome* release_guildhome();
  ::msg::CSReqGuildHome* mutable_guildhome();
  void set_allocated_guildhome(::msg::CSReqGuildHome* guildhome);
  private:
  const ::msg::CSReqGuildHome& _internal_guildhome() const;
  ::msg::CSReqGuildHome* _internal_mutable_guildhome();
  public:
  void unsafe_arena_set_allocated_guildhome(
      ::msg::CSReqGuildHome* guildhome);
  ::msg::CSReqGuildHome* unsafe_arena_release_guildhome();

  // .msg.CSReqGuildInfo GuildInfo = 364;
  bool has_guildinfo() const;
  private:
  bool _internal_has_guildinfo() const;
  public:
  void clear_guildinfo();
  const ::msg::CSReqGuildInfo& guildinfo() const;
  PROTOBUF_NODISCARD ::msg::CSReqGuildInfo* release_guildinfo();
  ::msg::CSReqGuildInfo* mutable_guildinfo();
  void set_allocated_guildinfo(::msg::CSReqGuildInfo* guildinfo);
  private:
  const ::msg::CSReqGuildInfo& _internal_guildinfo() const;
  ::msg::CSReqGuildInfo* _internal_mutable_guildinfo();
  public:
  void unsafe_arena_set_allocated_guildinfo(
      ::msg::CSReqGuildInfo* guildinfo);
  ::msg::CSReqGuildInfo* unsafe_arena_release_guildinfo();

  // .msg.CSReqGuildApprove GuildApprove = 365;
  bool has_guildapprove() const;
  private:
  bool _internal_has_guildapprove() const;
  public:
  void clear_guildapprove();
  const ::msg::CSReqGuildApprove& guildapprove() const;
  PROTOBUF_NODISCARD ::msg::CSReqGuildApprove* release_guildapprove();
  ::msg::CSReqGuildApprove* mutable_guildapprove();
  void set_allocated_guildapprove(::msg::CSReqGuildApprove* guildapprove);
  private:
  const ::msg::CSReqGuildApprove& _internal_guildapprove() const;
  ::msg::CSReqGuildApprove* _internal_mutable_guildapprove();
  public:
  void unsafe_arena_set_allocated_guildapprove(
      ::msg::CSReqGuildApprove* guildapprove);
  ::msg::CSReqGuildApprove* unsafe_arena_release_guildapprove();

  // .msg.CSReqGuildSetRole GuildRole = 366;
  bool has_guildrole() const;
  private:
  bool _internal_has_guildrole() const;
  public:
  void clear_guildrole();
  const ::msg::CSReqGuildSetRole& guildrole() const;
  PROTOBUF_NODISCARD ::msg::CSReqGuildSetRole* release_guildrole();
  ::msg::CSReqGuildSetRole* mutable_guildrole();
  void set_allocated_guildrole(::msg::CSReqGuildSetRole* guildrole);
  private:
  const ::msg::CSReqGuildSetRole& _internal_guildrole() const;
  ::msg::CSReqGuildSetRole* _internal_mutable_guildrole();
  public:
  void unsafe_arena_set_allocated_guildrole(
      ::msg::CSReqGuildSetRole* guildrole);
  ::msg::CSReqGuildSetRole* unsafe_arena_release_guildrole();

  // .msg.CSReqGuildModify GuildModify = 367;
  bool has_guildmodify() const;
  private:
  bool _internal_has_guildmodify() const;
  public:
  void clear_guildmodify();
  const ::msg::CSReqGuildModify& guildmodify() const;
  PROTOBUF_NODISCARD ::msg::CSReqGuildModify* release_guildmodify();
  ::msg::CSReqGuildModify* mutable_guildmodify();
  void set_allocated_guildmodify(::msg::CSReqGuildModify* guildmodify);
  private:
  const ::msg::CSReqGuildModify& _internal_guildmodify() const;
  ::msg::CSReqGuildModify* _internal_mutable_guildmodify();
  public:
  void unsafe_arena_set_allocated_guildmodify(
      ::msg::CSReqGuildModify* guildmodify);
  ::msg::CSReqGuildModify* unsafe_arena_release_guildmodify();

  // .msg.CSReqGuildKickoff GuildKickoff = 368;
  bool has_guildkickoff() const;
  private:
  bool _internal_has_guildkickoff() const;
  public:
  void clear_guildkickoff();
  const ::msg::CSReqGuildKickoff& guildkickoff() const;
  PROTOBUF_NODISCARD ::msg::CSReqGuildKickoff* release_guildkickoff();
  ::msg::CSReqGuildKickoff* mutable_guildkickoff();
  void set_allocated_guildkickoff(::msg::CSReqGuildKickoff* guildkickoff);
  private:
  const ::msg::CSReqGuildKickoff& _internal_guildkickoff() const;
  ::msg::CSReqGuildKickoff* _internal_mutable_guildkickoff();
  public:
  void unsafe_arena_set_allocated_guildkickoff(
      ::msg::CSReqGuildKickoff* guildkickoff);
  ::msg::CSReqGuildKickoff* unsafe_arena_release_guildkickoff();

  // .msg.CSReqGuildDismiss GuildDismiss = 369;
  bool has_guilddismiss() const;
  private:
  bool _internal_has_guilddismiss() const;
  public:
  void clear_guilddismiss();
  const ::msg::CSReqGuildDismiss& guilddismiss() const;
  PROTOBUF_NODISCARD ::msg::CSReqGuildDismiss* release_guilddismiss();
  ::msg::CSReqGuildDismiss* mutable_guilddismiss();
  void set_allocated_guilddismiss(::msg::CSReqGuildDismiss* guilddismiss);
  private:
  const ::msg::CSReqGuildDismiss& _internal_guilddismiss() const;
  ::msg::CSReqGuildDismiss* _internal_mutable_guilddismiss();
  public:
  void unsafe_arena_set_allocated_guilddismiss(
      ::msg::CSReqGuildDismiss* guilddismiss);
  ::msg::CSReqGuildDismiss* unsafe_arena_release_guilddismiss();

  // .msg.CSReqGuildExit GuildExit = 370;
  bool has_guildexit() const;
  private:
  bool _internal_has_guildexit() const;
  public:
  void clear_guildexit();
  const ::msg::CSReqGuildExit& guildexit() const;
  PROTOBUF_NODISCARD ::msg::CSReqGuildExit* release_guildexit();
  ::msg::CSReqGuildExit* mutable_guildexit();
  void set_allocated_guildexit(::msg::CSReqGuildExit* guildexit);
  private:
  const ::msg::CSReqGuildExit& _internal_guildexit() const;
  ::msg::CSReqGuildExit* _internal_mutable_guildexit();
  public:
  void unsafe_arena_set_allocated_guildexit(
      ::msg::CSReqGuildExit* guildexit);
  ::msg::CSReqGuildExit* unsafe_arena_release_guildexit();

  // .msg.CSReqGuildChat GuildChat = 371;
  bool has_guildchat() const;
  private:
  bool _internal_has_guildchat() const;
  public:
  void clear_guildchat();
  const ::msg::CSReqGuildChat& guildchat() const;
  PROTOBUF_NODISCARD ::msg::CSReqGuildChat* release_guildchat();
  ::msg::CSReqGuildChat* mutable_guildchat();
  void set_allocated_guildchat(::msg::CSReqGuildChat* guildchat);
  private:
  const ::msg::CSReqGuildChat& _internal_guildchat() const;
  ::msg::CSReqGuildChat* _internal_mutable_guildchat();
  public:
  void unsafe_arena_set_allocated_guildchat(
      ::msg::CSReqGuildChat* guildchat);
  ::msg::CSReqGuildChat* unsafe_arena_release_guildchat();

  // .msg.CSReqGuildList GuildList = 372;
  bool has_guildlist() const;
  private:
  bool _internal_has_guildlist() const;
  public:
  void clear_guildlist();
  const ::msg::CSReqGuildList& guildlist() const;
  PROTOBUF_NODISCARD ::msg::CSReqGuildList* release_guildlist();
  ::msg::CSReqGuildList* mutable_guildlist();
  void set_allocated_guildlist(::msg::CSReqGuildList* guildlist);
  private:
  const ::msg::CSReqGuildList& _internal_guildlist() const;
  ::msg::CSReqGuildList* _internal_mutable_guildlist();
  public:
  void unsafe_arena_set_allocated_guildlist(
      ::msg::CSReqGuildList* guildlist);
  ::msg::CSReqGuildList* unsafe_arena_release_guildlist();

  // .msg.CSReqGuildRecommendPlayers GuildRecommendPlayers = 373;
  bool has_guildrecommendplayers() const;
  private:
  bool _internal_has_guildrecommendplayers() const;
  public:
  void clear_guildrecommendplayers();
  const ::msg::CSReqGuildRecommendPlayers& guildrecommendplayers() const;
  PROTOBUF_NODISCARD ::msg::CSReqGuildRecommendPlayers* release_guildrecommendplayers();
  ::msg::CSReqGuildRecommendPlayers* mutable_guildrecommendplayers();
  void set_allocated_guildrecommendplayers(::msg::CSReqGuildRecommendPlayers* guildrecommendplayers);
  private:
  const ::msg::CSReqGuildRecommendPlayers& _internal_guildrecommendplayers() const;
  ::msg::CSReqGuildRecommendPlayers* _internal_mutable_guildrecommendplayers();
  public:
  void unsafe_arena_set_allocated_guildrecommendplayers(
      ::msg::CSReqGuildRecommendPlayers* guildrecommendplayers);
  ::msg::CSReqGuildRecommendPlayers* unsafe_arena_release_guildrecommendplayers();

  // .msg.CSReqGuildInviteList GuildInviteList = 374;
  bool has_guildinvitelist() const;
  private:
  bool _internal_has_guildinvitelist() const;
  public:
  void clear_guildinvitelist();
  const ::msg::CSReqGuildInviteList& guildinvitelist() const;
  PROTOBUF_NODISCARD ::msg::CSReqGuildInviteList* release_guildinvitelist();
  ::msg::CSReqGuildInviteList* mutable_guildinvitelist();
  void set_allocated_guildinvitelist(::msg::CSReqGuildInviteList* guildinvitelist);
  private:
  const ::msg::CSReqGuildInviteList& _internal_guildinvitelist() const;
  ::msg::CSReqGuildInviteList* _internal_mutable_guildinvitelist();
  public:
  void unsafe_arena_set_allocated_guildinvitelist(
      ::msg::CSReqGuildInviteList* guildinvitelist);
  ::msg::CSReqGuildInviteList* unsafe_arena_release_guildinvitelist();

  // .msg.CSReqGuildInvite GuildInvite = 375;
  bool has_guildinvite() const;
  private:
  bool _internal_has_guildinvite() const;
  public:
  void clear_guildinvite();
  const ::msg::CSReqGuildInvite& guildinvite() const;
  PROTOBUF_NODISCARD ::msg::CSReqGuildInvite* release_guildinvite();
  ::msg::CSReqGuildInvite* mutable_guildinvite();
  void set_allocated_guildinvite(::msg::CSReqGuildInvite* guildinvite);
  private:
  const ::msg::CSReqGuildInvite& _internal_guildinvite() const;
  ::msg::CSReqGuildInvite* _internal_mutable_guildinvite();
  public:
  void unsafe_arena_set_allocated_guildinvite(
      ::msg::CSReqGuildInvite* guildinvite);
  ::msg::CSReqGuildInvite* unsafe_arena_release_guildinvite();

  // .msg.CSReqGuildResign GuildResign = 376;
  bool has_guildresign() const;
  private:
  bool _internal_has_guildresign() const;
  public:
  void clear_guildresign();
  const ::msg::CSReqGuildResign& guildresign() const;
  PROTOBUF_NODISCARD ::msg::CSReqGuildResign* release_guildresign();
  ::msg::CSReqGuildResign* mutable_guildresign();
  void set_allocated_guildresign(::msg::CSReqGuildResign* guildresign);
  private:
  const ::msg::CSReqGuildResign& _internal_guildresign() const;
  ::msg::CSReqGuildResign* _internal_mutable_guildresign();
  public:
  void unsafe_arena_set_allocated_guildresign(
      ::msg::CSReqGuildResign* guildresign);
  ::msg::CSReqGuildResign* unsafe_arena_release_guildresign();

  // .msg.CSReqGuildRejectInvite GuildRejectInvite = 377;
  bool has_guildrejectinvite() const;
  private:
  bool _internal_has_guildrejectinvite() const;
  public:
  void clear_guildrejectinvite();
  const ::msg::CSReqGuildRejectInvite& guildrejectinvite() const;
  PROTOBUF_NODISCARD ::msg::CSReqGuildRejectInvite* release_guildrejectinvite();
  ::msg::CSReqGuildRejectInvite* mutable_guildrejectinvite();
  void set_allocated_guildrejectinvite(::msg::CSReqGuildRejectInvite* guildrejectinvite);
  private:
  const ::msg::CSReqGuildRejectInvite& _internal_guildrejectinvite() const;
  ::msg::CSReqGuildRejectInvite* _internal_mutable_guildrejectinvite();
  public:
  void unsafe_arena_set_allocated_guildrejectinvite(
      ::msg::CSReqGuildRejectInvite* guildrejectinvite);
  ::msg::CSReqGuildRejectInvite* unsafe_arena_release_guildrejectinvite();

  // .msg.CSReqGetVngCommentAward GetVngCommentAward = 390;
  bool has_getvngcommentaward() const;
  private:
  bool _internal_has_getvngcommentaward() const;
  public:
  void clear_getvngcommentaward();
  const ::msg::CSReqGetVngCommentAward& getvngcommentaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetVngCommentAward* release_getvngcommentaward();
  ::msg::CSReqGetVngCommentAward* mutable_getvngcommentaward();
  void set_allocated_getvngcommentaward(::msg::CSReqGetVngCommentAward* getvngcommentaward);
  private:
  const ::msg::CSReqGetVngCommentAward& _internal_getvngcommentaward() const;
  ::msg::CSReqGetVngCommentAward* _internal_mutable_getvngcommentaward();
  public:
  void unsafe_arena_set_allocated_getvngcommentaward(
      ::msg::CSReqGetVngCommentAward* getvngcommentaward);
  ::msg::CSReqGetVngCommentAward* unsafe_arena_release_getvngcommentaward();

  // .msg.CSReqLevelupChest LevelupChest = 391;
  bool has_levelupchest() const;
  private:
  bool _internal_has_levelupchest() const;
  public:
  void clear_levelupchest();
  const ::msg::CSReqLevelupChest& levelupchest() const;
  PROTOBUF_NODISCARD ::msg::CSReqLevelupChest* release_levelupchest();
  ::msg::CSReqLevelupChest* mutable_levelupchest();
  void set_allocated_levelupchest(::msg::CSReqLevelupChest* levelupchest);
  private:
  const ::msg::CSReqLevelupChest& _internal_levelupchest() const;
  ::msg::CSReqLevelupChest* _internal_mutable_levelupchest();
  public:
  void unsafe_arena_set_allocated_levelupchest(
      ::msg::CSReqLevelupChest* levelupchest);
  ::msg::CSReqLevelupChest* unsafe_arena_release_levelupchest();

  // .msg.CSReqWatchAd WatchAd = 392;
  bool has_watchad() const;
  private:
  bool _internal_has_watchad() const;
  public:
  void clear_watchad();
  const ::msg::CSReqWatchAd& watchad() const;
  PROTOBUF_NODISCARD ::msg::CSReqWatchAd* release_watchad();
  ::msg::CSReqWatchAd* mutable_watchad();
  void set_allocated_watchad(::msg::CSReqWatchAd* watchad);
  private:
  const ::msg::CSReqWatchAd& _internal_watchad() const;
  ::msg::CSReqWatchAd* _internal_mutable_watchad();
  public:
  void unsafe_arena_set_allocated_watchad(
      ::msg::CSReqWatchAd* watchad);
  ::msg::CSReqWatchAd* unsafe_arena_release_watchad();

  // .msg.CSReqQueryPsTournamentRoom PsTournamentRoom = 393;
  bool has_pstournamentroom() const;
  private:
  bool _internal_has_pstournamentroom() const;
  public:
  void clear_pstournamentroom();
  const ::msg::CSReqQueryPsTournamentRoom& pstournamentroom() const;
  PROTOBUF_NODISCARD ::msg::CSReqQueryPsTournamentRoom* release_pstournamentroom();
  ::msg::CSReqQueryPsTournamentRoom* mutable_pstournamentroom();
  void set_allocated_pstournamentroom(::msg::CSReqQueryPsTournamentRoom* pstournamentroom);
  private:
  const ::msg::CSReqQueryPsTournamentRoom& _internal_pstournamentroom() const;
  ::msg::CSReqQueryPsTournamentRoom* _internal_mutable_pstournamentroom();
  public:
  void unsafe_arena_set_allocated_pstournamentroom(
      ::msg::CSReqQueryPsTournamentRoom* pstournamentroom);
  ::msg::CSReqQueryPsTournamentRoom* unsafe_arena_release_pstournamentroom();

  // .msg.CSReqGetAdCumulateAward GetAdCumulateAward = 394;
  bool has_getadcumulateaward() const;
  private:
  bool _internal_has_getadcumulateaward() const;
  public:
  void clear_getadcumulateaward();
  const ::msg::CSReqGetAdCumulateAward& getadcumulateaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetAdCumulateAward* release_getadcumulateaward();
  ::msg::CSReqGetAdCumulateAward* mutable_getadcumulateaward();
  void set_allocated_getadcumulateaward(::msg::CSReqGetAdCumulateAward* getadcumulateaward);
  private:
  const ::msg::CSReqGetAdCumulateAward& _internal_getadcumulateaward() const;
  ::msg::CSReqGetAdCumulateAward* _internal_mutable_getadcumulateaward();
  public:
  void unsafe_arena_set_allocated_getadcumulateaward(
      ::msg::CSReqGetAdCumulateAward* getadcumulateaward);
  ::msg::CSReqGetAdCumulateAward* unsafe_arena_release_getadcumulateaward();

  // .msg.CSReqSetMessengerPos SetMessengerPos = 535;
  bool has_setmessengerpos() const;
  private:
  bool _internal_has_setmessengerpos() const;
  public:
  void clear_setmessengerpos();
  const ::msg::CSReqSetMessengerPos& setmessengerpos() const;
  PROTOBUF_NODISCARD ::msg::CSReqSetMessengerPos* release_setmessengerpos();
  ::msg::CSReqSetMessengerPos* mutable_setmessengerpos();
  void set_allocated_setmessengerpos(::msg::CSReqSetMessengerPos* setmessengerpos);
  private:
  const ::msg::CSReqSetMessengerPos& _internal_setmessengerpos() const;
  ::msg::CSReqSetMessengerPos* _internal_mutable_setmessengerpos();
  public:
  void unsafe_arena_set_allocated_setmessengerpos(
      ::msg::CSReqSetMessengerPos* setmessengerpos);
  ::msg::CSReqSetMessengerPos* unsafe_arena_release_setmessengerpos();

  // .msg.CSReqUpdateAntiAddictionTime UpdateAntiAddictionTime = 553;
  bool has_updateantiaddictiontime() const;
  private:
  bool _internal_has_updateantiaddictiontime() const;
  public:
  void clear_updateantiaddictiontime();
  const ::msg::CSReqUpdateAntiAddictionTime& updateantiaddictiontime() const;
  PROTOBUF_NODISCARD ::msg::CSReqUpdateAntiAddictionTime* release_updateantiaddictiontime();
  ::msg::CSReqUpdateAntiAddictionTime* mutable_updateantiaddictiontime();
  void set_allocated_updateantiaddictiontime(::msg::CSReqUpdateAntiAddictionTime* updateantiaddictiontime);
  private:
  const ::msg::CSReqUpdateAntiAddictionTime& _internal_updateantiaddictiontime() const;
  ::msg::CSReqUpdateAntiAddictionTime* _internal_mutable_updateantiaddictiontime();
  public:
  void unsafe_arena_set_allocated_updateantiaddictiontime(
      ::msg::CSReqUpdateAntiAddictionTime* updateantiaddictiontime);
  ::msg::CSReqUpdateAntiAddictionTime* unsafe_arena_release_updateantiaddictiontime();

  // .msg.CSReqCancelReconnect CancelReconnect = 554;
  bool has_cancelreconnect() const;
  private:
  bool _internal_has_cancelreconnect() const;
  public:
  void clear_cancelreconnect();
  const ::msg::CSReqCancelReconnect& cancelreconnect() const;
  PROTOBUF_NODISCARD ::msg::CSReqCancelReconnect* release_cancelreconnect();
  ::msg::CSReqCancelReconnect* mutable_cancelreconnect();
  void set_allocated_cancelreconnect(::msg::CSReqCancelReconnect* cancelreconnect);
  private:
  const ::msg::CSReqCancelReconnect& _internal_cancelreconnect() const;
  ::msg::CSReqCancelReconnect* _internal_mutable_cancelreconnect();
  public:
  void unsafe_arena_set_allocated_cancelreconnect(
      ::msg::CSReqCancelReconnect* cancelreconnect);
  ::msg::CSReqCancelReconnect* unsafe_arena_release_cancelreconnect();

  // .msg.CSReqReconnect Reconnect = 556;
  bool has_reconnect() const;
  private:
  bool _internal_has_reconnect() const;
  public:
  void clear_reconnect();
  const ::msg::CSReqReconnect& reconnect() const;
  PROTOBUF_NODISCARD ::msg::CSReqReconnect* release_reconnect();
  ::msg::CSReqReconnect* mutable_reconnect();
  void set_allocated_reconnect(::msg::CSReqReconnect* reconnect);
  private:
  const ::msg::CSReqReconnect& _internal_reconnect() const;
  ::msg::CSReqReconnect* _internal_mutable_reconnect();
  public:
  void unsafe_arena_set_allocated_reconnect(
      ::msg::CSReqReconnect* reconnect);
  ::msg::CSReqReconnect* unsafe_arena_release_reconnect();

  // .msg.CSReqPassThrough PassThrough = 563;
  bool has_passthrough() const;
  private:
  bool _internal_has_passthrough() const;
  public:
  void clear_passthrough();
  const ::msg::CSReqPassThrough& passthrough() const;
  PROTOBUF_NODISCARD ::msg::CSReqPassThrough* release_passthrough();
  ::msg::CSReqPassThrough* mutable_passthrough();
  void set_allocated_passthrough(::msg::CSReqPassThrough* passthrough);
  private:
  const ::msg::CSReqPassThrough& _internal_passthrough() const;
  ::msg::CSReqPassThrough* _internal_mutable_passthrough();
  public:
  void unsafe_arena_set_allocated_passthrough(
      ::msg::CSReqPassThrough* passthrough);
  ::msg::CSReqPassThrough* unsafe_arena_release_passthrough();

  // .msg.CSReqVisitPlayer VisitPlayer = 564;
  bool has_visitplayer() const;
  private:
  bool _internal_has_visitplayer() const;
  public:
  void clear_visitplayer();
  const ::msg::CSReqVisitPlayer& visitplayer() const;
  PROTOBUF_NODISCARD ::msg::CSReqVisitPlayer* release_visitplayer();
  ::msg::CSReqVisitPlayer* mutable_visitplayer();
  void set_allocated_visitplayer(::msg::CSReqVisitPlayer* visitplayer);
  private:
  const ::msg::CSReqVisitPlayer& _internal_visitplayer() const;
  ::msg::CSReqVisitPlayer* _internal_mutable_visitplayer();
  public:
  void unsafe_arena_set_allocated_visitplayer(
      ::msg::CSReqVisitPlayer* visitplayer);
  ::msg::CSReqVisitPlayer* unsafe_arena_release_visitplayer();

  // .msg.CSReqLeaveGameEarly LeaveGameEarly = 565;
  bool has_leavegameearly() const;
  private:
  bool _internal_has_leavegameearly() const;
  public:
  void clear_leavegameearly();
  const ::msg::CSReqLeaveGameEarly& leavegameearly() const;
  PROTOBUF_NODISCARD ::msg::CSReqLeaveGameEarly* release_leavegameearly();
  ::msg::CSReqLeaveGameEarly* mutable_leavegameearly();
  void set_allocated_leavegameearly(::msg::CSReqLeaveGameEarly* leavegameearly);
  private:
  const ::msg::CSReqLeaveGameEarly& _internal_leavegameearly() const;
  ::msg::CSReqLeaveGameEarly* _internal_mutable_leavegameearly();
  public:
  void unsafe_arena_set_allocated_leavegameearly(
      ::msg::CSReqLeaveGameEarly* leavegameearly);
  ::msg::CSReqLeaveGameEarly* unsafe_arena_release_leavegameearly();

  // .msg.CSReqGDCommonBin GDCommonBin = 566;
  bool has_gdcommonbin() const;
  private:
  bool _internal_has_gdcommonbin() const;
  public:
  void clear_gdcommonbin();
  const ::msg::CSReqGDCommonBin& gdcommonbin() const;
  PROTOBUF_NODISCARD ::msg::CSReqGDCommonBin* release_gdcommonbin();
  ::msg::CSReqGDCommonBin* mutable_gdcommonbin();
  void set_allocated_gdcommonbin(::msg::CSReqGDCommonBin* gdcommonbin);
  private:
  const ::msg::CSReqGDCommonBin& _internal_gdcommonbin() const;
  ::msg::CSReqGDCommonBin* _internal_mutable_gdcommonbin();
  public:
  void unsafe_arena_set_allocated_gdcommonbin(
      ::msg::CSReqGDCommonBin* gdcommonbin);
  ::msg::CSReqGDCommonBin* unsafe_arena_release_gdcommonbin();

  // .msg.CSReqGDCommonBinData GDBinData = 567;
  bool has_gdbindata() const;
  private:
  bool _internal_has_gdbindata() const;
  public:
  void clear_gdbindata();
  const ::msg::CSReqGDCommonBinData& gdbindata() const;
  PROTOBUF_NODISCARD ::msg::CSReqGDCommonBinData* release_gdbindata();
  ::msg::CSReqGDCommonBinData* mutable_gdbindata();
  void set_allocated_gdbindata(::msg::CSReqGDCommonBinData* gdbindata);
  private:
  const ::msg::CSReqGDCommonBinData& _internal_gdbindata() const;
  ::msg::CSReqGDCommonBinData* _internal_mutable_gdbindata();
  public:
  void unsafe_arena_set_allocated_gdbindata(
      ::msg::CSReqGDCommonBinData* gdbindata);
  ::msg::CSReqGDCommonBinData* unsafe_arena_release_gdbindata();

  // .msg.CSReqAutoBattleOP AutoBattleOP = 568;
  bool has_autobattleop() const;
  private:
  bool _internal_has_autobattleop() const;
  public:
  void clear_autobattleop();
  const ::msg::CSReqAutoBattleOP& autobattleop() const;
  PROTOBUF_NODISCARD ::msg::CSReqAutoBattleOP* release_autobattleop();
  ::msg::CSReqAutoBattleOP* mutable_autobattleop();
  void set_allocated_autobattleop(::msg::CSReqAutoBattleOP* autobattleop);
  private:
  const ::msg::CSReqAutoBattleOP& _internal_autobattleop() const;
  ::msg::CSReqAutoBattleOP* _internal_mutable_autobattleop();
  public:
  void unsafe_arena_set_allocated_autobattleop(
      ::msg::CSReqAutoBattleOP* autobattleop);
  ::msg::CSReqAutoBattleOP* unsafe_arena_release_autobattleop();

  // .msg.CSReqRestrictUser RestrictUser = 569;
  bool has_restrictuser() const;
  private:
  bool _internal_has_restrictuser() const;
  public:
  void clear_restrictuser();
  const ::msg::CSReqRestrictUser& restrictuser() const;
  PROTOBUF_NODISCARD ::msg::CSReqRestrictUser* release_restrictuser();
  ::msg::CSReqRestrictUser* mutable_restrictuser();
  void set_allocated_restrictuser(::msg::CSReqRestrictUser* restrictuser);
  private:
  const ::msg::CSReqRestrictUser& _internal_restrictuser() const;
  ::msg::CSReqRestrictUser* _internal_mutable_restrictuser();
  public:
  void unsafe_arena_set_allocated_restrictuser(
      ::msg::CSReqRestrictUser* restrictuser);
  ::msg::CSReqRestrictUser* unsafe_arena_release_restrictuser();

  // .msg.CSReqEquipSelectRate EquipSelectRate = 570;
  bool has_equipselectrate() const;
  private:
  bool _internal_has_equipselectrate() const;
  public:
  void clear_equipselectrate();
  const ::msg::CSReqEquipSelectRate& equipselectrate() const;
  PROTOBUF_NODISCARD ::msg::CSReqEquipSelectRate* release_equipselectrate();
  ::msg::CSReqEquipSelectRate* mutable_equipselectrate();
  void set_allocated_equipselectrate(::msg::CSReqEquipSelectRate* equipselectrate);
  private:
  const ::msg::CSReqEquipSelectRate& _internal_equipselectrate() const;
  ::msg::CSReqEquipSelectRate* _internal_mutable_equipselectrate();
  public:
  void unsafe_arena_set_allocated_equipselectrate(
      ::msg::CSReqEquipSelectRate* equipselectrate);
  ::msg::CSReqEquipSelectRate* unsafe_arena_release_equipselectrate();

  // .msg.CSReqReportAbsent ReportAbsent = 571;
  bool has_reportabsent() const;
  private:
  bool _internal_has_reportabsent() const;
  public:
  void clear_reportabsent();
  const ::msg::CSReqReportAbsent& reportabsent() const;
  PROTOBUF_NODISCARD ::msg::CSReqReportAbsent* release_reportabsent();
  ::msg::CSReqReportAbsent* mutable_reportabsent();
  void set_allocated_reportabsent(::msg::CSReqReportAbsent* reportabsent);
  private:
  const ::msg::CSReqReportAbsent& _internal_reportabsent() const;
  ::msg::CSReqReportAbsent* _internal_mutable_reportabsent();
  public:
  void unsafe_arena_set_allocated_reportabsent(
      ::msg::CSReqReportAbsent* reportabsent);
  ::msg::CSReqReportAbsent* unsafe_arena_release_reportabsent();

  // .msg.CSReqRecommendWeek RecommendWeek = 600;
  bool has_recommendweek() const;
  private:
  bool _internal_has_recommendweek() const;
  public:
  void clear_recommendweek();
  const ::msg::CSReqRecommendWeek& recommendweek() const;
  PROTOBUF_NODISCARD ::msg::CSReqRecommendWeek* release_recommendweek();
  ::msg::CSReqRecommendWeek* mutable_recommendweek();
  void set_allocated_recommendweek(::msg::CSReqRecommendWeek* recommendweek);
  private:
  const ::msg::CSReqRecommendWeek& _internal_recommendweek() const;
  ::msg::CSReqRecommendWeek* _internal_mutable_recommendweek();
  public:
  void unsafe_arena_set_allocated_recommendweek(
      ::msg::CSReqRecommendWeek* recommendweek);
  ::msg::CSReqRecommendWeek* unsafe_arena_release_recommendweek();

  // .msg.CSReqRecommendOfficial RecommendOfficial = 601;
  bool has_recommendofficial() const;
  private:
  bool _internal_has_recommendofficial() const;
  public:
  void clear_recommendofficial();
  const ::msg::CSReqRecommendOfficial& recommendofficial() const;
  PROTOBUF_NODISCARD ::msg::CSReqRecommendOfficial* release_recommendofficial();
  ::msg::CSReqRecommendOfficial* mutable_recommendofficial();
  void set_allocated_recommendofficial(::msg::CSReqRecommendOfficial* recommendofficial);
  private:
  const ::msg::CSReqRecommendOfficial& _internal_recommendofficial() const;
  ::msg::CSReqRecommendOfficial* _internal_mutable_recommendofficial();
  public:
  void unsafe_arena_set_allocated_recommendofficial(
      ::msg::CSReqRecommendOfficial* recommendofficial);
  ::msg::CSReqRecommendOfficial* unsafe_arena_release_recommendofficial();

  // .msg.CSReqRecommendLatest RecommendLatest = 602;
  bool has_recommendlatest() const;
  private:
  bool _internal_has_recommendlatest() const;
  public:
  void clear_recommendlatest();
  const ::msg::CSReqRecommendLatest& recommendlatest() const;
  PROTOBUF_NODISCARD ::msg::CSReqRecommendLatest* release_recommendlatest();
  ::msg::CSReqRecommendLatest* mutable_recommendlatest();
  void set_allocated_recommendlatest(::msg::CSReqRecommendLatest* recommendlatest);
  private:
  const ::msg::CSReqRecommendLatest& _internal_recommendlatest() const;
  ::msg::CSReqRecommendLatest* _internal_mutable_recommendlatest();
  public:
  void unsafe_arena_set_allocated_recommendlatest(
      ::msg::CSReqRecommendLatest* recommendlatest);
  ::msg::CSReqRecommendLatest* unsafe_arena_release_recommendlatest();

  // .msg.CSReqRecommendHistory RecommendHistory = 603;
  bool has_recommendhistory() const;
  private:
  bool _internal_has_recommendhistory() const;
  public:
  void clear_recommendhistory();
  const ::msg::CSReqRecommendHistory& recommendhistory() const;
  PROTOBUF_NODISCARD ::msg::CSReqRecommendHistory* release_recommendhistory();
  ::msg::CSReqRecommendHistory* mutable_recommendhistory();
  void set_allocated_recommendhistory(::msg::CSReqRecommendHistory* recommendhistory);
  private:
  const ::msg::CSReqRecommendHistory& _internal_recommendhistory() const;
  ::msg::CSReqRecommendHistory* _internal_mutable_recommendhistory();
  public:
  void unsafe_arena_set_allocated_recommendhistory(
      ::msg::CSReqRecommendHistory* recommendhistory);
  ::msg::CSReqRecommendHistory* unsafe_arena_release_recommendhistory();

  // .msg.CSReqRecommendCollect RecommendCollect = 604;
  bool has_recommendcollect() const;
  private:
  bool _internal_has_recommendcollect() const;
  public:
  void clear_recommendcollect();
  const ::msg::CSReqRecommendCollect& recommendcollect() const;
  PROTOBUF_NODISCARD ::msg::CSReqRecommendCollect* release_recommendcollect();
  ::msg::CSReqRecommendCollect* mutable_recommendcollect();
  void set_allocated_recommendcollect(::msg::CSReqRecommendCollect* recommendcollect);
  private:
  const ::msg::CSReqRecommendCollect& _internal_recommendcollect() const;
  ::msg::CSReqRecommendCollect* _internal_mutable_recommendcollect();
  public:
  void unsafe_arena_set_allocated_recommendcollect(
      ::msg::CSReqRecommendCollect* recommendcollect);
  ::msg::CSReqRecommendCollect* unsafe_arena_release_recommendcollect();

  // .msg.CSReqRecommendSet RecommendSet = 605;
  bool has_recommendset() const;
  private:
  bool _internal_has_recommendset() const;
  public:
  void clear_recommendset();
  const ::msg::CSReqRecommendSet& recommendset() const;
  PROTOBUF_NODISCARD ::msg::CSReqRecommendSet* release_recommendset();
  ::msg::CSReqRecommendSet* mutable_recommendset();
  void set_allocated_recommendset(::msg::CSReqRecommendSet* recommendset);
  private:
  const ::msg::CSReqRecommendSet& _internal_recommendset() const;
  ::msg::CSReqRecommendSet* _internal_mutable_recommendset();
  public:
  void unsafe_arena_set_allocated_recommendset(
      ::msg::CSReqRecommendSet* recommendset);
  ::msg::CSReqRecommendSet* unsafe_arena_release_recommendset();

  // .msg.CSReqRecommendGetCollection RecommendGetCollection = 606;
  bool has_recommendgetcollection() const;
  private:
  bool _internal_has_recommendgetcollection() const;
  public:
  void clear_recommendgetcollection();
  const ::msg::CSReqRecommendGetCollection& recommendgetcollection() const;
  PROTOBUF_NODISCARD ::msg::CSReqRecommendGetCollection* release_recommendgetcollection();
  ::msg::CSReqRecommendGetCollection* mutable_recommendgetcollection();
  void set_allocated_recommendgetcollection(::msg::CSReqRecommendGetCollection* recommendgetcollection);
  private:
  const ::msg::CSReqRecommendGetCollection& _internal_recommendgetcollection() const;
  ::msg::CSReqRecommendGetCollection* _internal_mutable_recommendgetcollection();
  public:
  void unsafe_arena_set_allocated_recommendgetcollection(
      ::msg::CSReqRecommendGetCollection* recommendgetcollection);
  ::msg::CSReqRecommendGetCollection* unsafe_arena_release_recommendgetcollection();

  // .msg.CSReqRecommendEquip RecommendEquip = 607;
  bool has_recommendequip() const;
  private:
  bool _internal_has_recommendequip() const;
  public:
  void clear_recommendequip();
  const ::msg::CSReqRecommendEquip& recommendequip() const;
  PROTOBUF_NODISCARD ::msg::CSReqRecommendEquip* release_recommendequip();
  ::msg::CSReqRecommendEquip* mutable_recommendequip();
  void set_allocated_recommendequip(::msg::CSReqRecommendEquip* recommendequip);
  private:
  const ::msg::CSReqRecommendEquip& _internal_recommendequip() const;
  ::msg::CSReqRecommendEquip* _internal_mutable_recommendequip();
  public:
  void unsafe_arena_set_allocated_recommendequip(
      ::msg::CSReqRecommendEquip* recommendequip);
  ::msg::CSReqRecommendEquip* unsafe_arena_release_recommendequip();

  // .msg.CSReqLoginCancel LoginCancel = 608;
  bool has_logincancel() const;
  private:
  bool _internal_has_logincancel() const;
  public:
  void clear_logincancel();
  const ::msg::CSReqLoginCancel& logincancel() const;
  PROTOBUF_NODISCARD ::msg::CSReqLoginCancel* release_logincancel();
  ::msg::CSReqLoginCancel* mutable_logincancel();
  void set_allocated_logincancel(::msg::CSReqLoginCancel* logincancel);
  private:
  const ::msg::CSReqLoginCancel& _internal_logincancel() const;
  ::msg::CSReqLoginCancel* _internal_mutable_logincancel();
  public:
  void unsafe_arena_set_allocated_logincancel(
      ::msg::CSReqLoginCancel* logincancel);
  ::msg::CSReqLoginCancel* unsafe_arena_release_logincancel();

  // .msg.CSReqConvertDebris ConvertDebris = 609;
  bool has_convertdebris() const;
  private:
  bool _internal_has_convertdebris() const;
  public:
  void clear_convertdebris();
  const ::msg::CSReqConvertDebris& convertdebris() const;
  PROTOBUF_NODISCARD ::msg::CSReqConvertDebris* release_convertdebris();
  ::msg::CSReqConvertDebris* mutable_convertdebris();
  void set_allocated_convertdebris(::msg::CSReqConvertDebris* convertdebris);
  private:
  const ::msg::CSReqConvertDebris& _internal_convertdebris() const;
  ::msg::CSReqConvertDebris* _internal_mutable_convertdebris();
  public:
  void unsafe_arena_set_allocated_convertdebris(
      ::msg::CSReqConvertDebris* convertdebris);
  ::msg::CSReqConvertDebris* unsafe_arena_release_convertdebris();

  // .msg.CSReqUseProtectionCard ProtectionCard = 610;
  bool has_protectioncard() const;
  private:
  bool _internal_has_protectioncard() const;
  public:
  void clear_protectioncard();
  const ::msg::CSReqUseProtectionCard& protectioncard() const;
  PROTOBUF_NODISCARD ::msg::CSReqUseProtectionCard* release_protectioncard();
  ::msg::CSReqUseProtectionCard* mutable_protectioncard();
  void set_allocated_protectioncard(::msg::CSReqUseProtectionCard* protectioncard);
  private:
  const ::msg::CSReqUseProtectionCard& _internal_protectioncard() const;
  ::msg::CSReqUseProtectionCard* _internal_mutable_protectioncard();
  public:
  void unsafe_arena_set_allocated_protectioncard(
      ::msg::CSReqUseProtectionCard* protectioncard);
  ::msg::CSReqUseProtectionCard* unsafe_arena_release_protectioncard();

  // .msg.CSReqUsePassportCard UsePassportCard = 611;
  bool has_usepassportcard() const;
  private:
  bool _internal_has_usepassportcard() const;
  public:
  void clear_usepassportcard();
  const ::msg::CSReqUsePassportCard& usepassportcard() const;
  PROTOBUF_NODISCARD ::msg::CSReqUsePassportCard* release_usepassportcard();
  ::msg::CSReqUsePassportCard* mutable_usepassportcard();
  void set_allocated_usepassportcard(::msg::CSReqUsePassportCard* usepassportcard);
  private:
  const ::msg::CSReqUsePassportCard& _internal_usepassportcard() const;
  ::msg::CSReqUsePassportCard* _internal_mutable_usepassportcard();
  public:
  void unsafe_arena_set_allocated_usepassportcard(
      ::msg::CSReqUsePassportCard* usepassportcard);
  ::msg::CSReqUsePassportCard* unsafe_arena_release_usepassportcard();

  // .msg.CSReqSetMedal SetMedal = 612;
  bool has_setmedal() const;
  private:
  bool _internal_has_setmedal() const;
  public:
  void clear_setmedal();
  const ::msg::CSReqSetMedal& setmedal() const;
  PROTOBUF_NODISCARD ::msg::CSReqSetMedal* release_setmedal();
  ::msg::CSReqSetMedal* mutable_setmedal();
  void set_allocated_setmedal(::msg::CSReqSetMedal* setmedal);
  private:
  const ::msg::CSReqSetMedal& _internal_setmedal() const;
  ::msg::CSReqSetMedal* _internal_mutable_setmedal();
  public:
  void unsafe_arena_set_allocated_setmedal(
      ::msg::CSReqSetMedal* setmedal);
  ::msg::CSReqSetMedal* unsafe_arena_release_setmedal();

  // .msg.CSReqUnSetMedal UnSetMedal = 613;
  bool has_unsetmedal() const;
  private:
  bool _internal_has_unsetmedal() const;
  public:
  void clear_unsetmedal();
  const ::msg::CSReqUnSetMedal& unsetmedal() const;
  PROTOBUF_NODISCARD ::msg::CSReqUnSetMedal* release_unsetmedal();
  ::msg::CSReqUnSetMedal* mutable_unsetmedal();
  void set_allocated_unsetmedal(::msg::CSReqUnSetMedal* unsetmedal);
  private:
  const ::msg::CSReqUnSetMedal& _internal_unsetmedal() const;
  ::msg::CSReqUnSetMedal* _internal_mutable_unsetmedal();
  public:
  void unsafe_arena_set_allocated_unsetmedal(
      ::msg::CSReqUnSetMedal* unsetmedal);
  ::msg::CSReqUnSetMedal* unsafe_arena_release_unsetmedal();

  // .msg.CSReqPlayerMedals PlayerMedals = 614;
  bool has_playermedals() const;
  private:
  bool _internal_has_playermedals() const;
  public:
  void clear_playermedals();
  const ::msg::CSReqPlayerMedals& playermedals() const;
  PROTOBUF_NODISCARD ::msg::CSReqPlayerMedals* release_playermedals();
  ::msg::CSReqPlayerMedals* mutable_playermedals();
  void set_allocated_playermedals(::msg::CSReqPlayerMedals* playermedals);
  private:
  const ::msg::CSReqPlayerMedals& _internal_playermedals() const;
  ::msg::CSReqPlayerMedals* _internal_mutable_playermedals();
  public:
  void unsafe_arena_set_allocated_playermedals(
      ::msg::CSReqPlayerMedals* playermedals);
  ::msg::CSReqPlayerMedals* unsafe_arena_release_playermedals();

  // .msg.CSReqUpdateHotDot UpdateHotDot = 615;
  bool has_updatehotdot() const;
  private:
  bool _internal_has_updatehotdot() const;
  public:
  void clear_updatehotdot();
  const ::msg::CSReqUpdateHotDot& updatehotdot() const;
  PROTOBUF_NODISCARD ::msg::CSReqUpdateHotDot* release_updatehotdot();
  ::msg::CSReqUpdateHotDot* mutable_updatehotdot();
  void set_allocated_updatehotdot(::msg::CSReqUpdateHotDot* updatehotdot);
  private:
  const ::msg::CSReqUpdateHotDot& _internal_updatehotdot() const;
  ::msg::CSReqUpdateHotDot* _internal_mutable_updatehotdot();
  public:
  void unsafe_arena_set_allocated_updatehotdot(
      ::msg::CSReqUpdateHotDot* updatehotdot);
  ::msg::CSReqUpdateHotDot* unsafe_arena_release_updatehotdot();

  // .msg.CSReqQueryHotDot QueryHotDot = 616;
  bool has_queryhotdot() const;
  private:
  bool _internal_has_queryhotdot() const;
  public:
  void clear_queryhotdot();
  const ::msg::CSReqQueryHotDot& queryhotdot() const;
  PROTOBUF_NODISCARD ::msg::CSReqQueryHotDot* release_queryhotdot();
  ::msg::CSReqQueryHotDot* mutable_queryhotdot();
  void set_allocated_queryhotdot(::msg::CSReqQueryHotDot* queryhotdot);
  private:
  const ::msg::CSReqQueryHotDot& _internal_queryhotdot() const;
  ::msg::CSReqQueryHotDot* _internal_mutable_queryhotdot();
  public:
  void unsafe_arena_set_allocated_queryhotdot(
      ::msg::CSReqQueryHotDot* queryhotdot);
  ::msg::CSReqQueryHotDot* unsafe_arena_release_queryhotdot();

  // .msg.CSReqSetCache SetCache = 617;
  bool has_setcache() const;
  private:
  bool _internal_has_setcache() const;
  public:
  void clear_setcache();
  const ::msg::CSReqSetCache& setcache() const;
  PROTOBUF_NODISCARD ::msg::CSReqSetCache* release_setcache();
  ::msg::CSReqSetCache* mutable_setcache();
  void set_allocated_setcache(::msg::CSReqSetCache* setcache);
  private:
  const ::msg::CSReqSetCache& _internal_setcache() const;
  ::msg::CSReqSetCache* _internal_mutable_setcache();
  public:
  void unsafe_arena_set_allocated_setcache(
      ::msg::CSReqSetCache* setcache);
  ::msg::CSReqSetCache* unsafe_arena_release_setcache();

  // .msg.CSReqGetCache GetCache = 618;
  bool has_getcache() const;
  private:
  bool _internal_has_getcache() const;
  public:
  void clear_getcache();
  const ::msg::CSReqGetCache& getcache() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetCache* release_getcache();
  ::msg::CSReqGetCache* mutable_getcache();
  void set_allocated_getcache(::msg::CSReqGetCache* getcache);
  private:
  const ::msg::CSReqGetCache& _internal_getcache() const;
  ::msg::CSReqGetCache* _internal_mutable_getcache();
  public:
  void unsafe_arena_set_allocated_getcache(
      ::msg::CSReqGetCache* getcache);
  ::msg::CSReqGetCache* unsafe_arena_release_getcache();

  // .msg.CSReqBuyChallengeCount BuyChallengeCount = 619;
  bool has_buychallengecount() const;
  private:
  bool _internal_has_buychallengecount() const;
  public:
  void clear_buychallengecount();
  const ::msg::CSReqBuyChallengeCount& buychallengecount() const;
  PROTOBUF_NODISCARD ::msg::CSReqBuyChallengeCount* release_buychallengecount();
  ::msg::CSReqBuyChallengeCount* mutable_buychallengecount();
  void set_allocated_buychallengecount(::msg::CSReqBuyChallengeCount* buychallengecount);
  private:
  const ::msg::CSReqBuyChallengeCount& _internal_buychallengecount() const;
  ::msg::CSReqBuyChallengeCount* _internal_mutable_buychallengecount();
  public:
  void unsafe_arena_set_allocated_buychallengecount(
      ::msg::CSReqBuyChallengeCount* buychallengecount);
  ::msg::CSReqBuyChallengeCount* unsafe_arena_release_buychallengecount();

  // .msg.CSReqGetPveRank GetPveRank = 620;
  bool has_getpverank() const;
  private:
  bool _internal_has_getpverank() const;
  public:
  void clear_getpverank();
  const ::msg::CSReqGetPveRank& getpverank() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetPveRank* release_getpverank();
  ::msg::CSReqGetPveRank* mutable_getpverank();
  void set_allocated_getpverank(::msg::CSReqGetPveRank* getpverank);
  private:
  const ::msg::CSReqGetPveRank& _internal_getpverank() const;
  ::msg::CSReqGetPveRank* _internal_mutable_getpverank();
  public:
  void unsafe_arena_set_allocated_getpverank(
      ::msg::CSReqGetPveRank* getpverank);
  ::msg::CSReqGetPveRank* unsafe_arena_release_getpverank();

  // .msg.CSReqLogin AuthAccount = 621;
  bool has_authaccount() const;
  private:
  bool _internal_has_authaccount() const;
  public:
  void clear_authaccount();
  const ::msg::CSReqLogin& authaccount() const;
  PROTOBUF_NODISCARD ::msg::CSReqLogin* release_authaccount();
  ::msg::CSReqLogin* mutable_authaccount();
  void set_allocated_authaccount(::msg::CSReqLogin* authaccount);
  private:
  const ::msg::CSReqLogin& _internal_authaccount() const;
  ::msg::CSReqLogin* _internal_mutable_authaccount();
  public:
  void unsafe_arena_set_allocated_authaccount(
      ::msg::CSReqLogin* authaccount);
  ::msg::CSReqLogin* unsafe_arena_release_authaccount();

  // .msg.CSReqUnbindAccount UnbindAccount = 622;
  bool has_unbindaccount() const;
  private:
  bool _internal_has_unbindaccount() const;
  public:
  void clear_unbindaccount();
  const ::msg::CSReqUnbindAccount& unbindaccount() const;
  PROTOBUF_NODISCARD ::msg::CSReqUnbindAccount* release_unbindaccount();
  ::msg::CSReqUnbindAccount* mutable_unbindaccount();
  void set_allocated_unbindaccount(::msg::CSReqUnbindAccount* unbindaccount);
  private:
  const ::msg::CSReqUnbindAccount& _internal_unbindaccount() const;
  ::msg::CSReqUnbindAccount* _internal_mutable_unbindaccount();
  public:
  void unsafe_arena_set_allocated_unbindaccount(
      ::msg::CSReqUnbindAccount* unbindaccount);
  ::msg::CSReqUnbindAccount* unsafe_arena_release_unbindaccount();

  // .msg.CSReqBagToItem BagToItem = 623;
  bool has_bagtoitem() const;
  private:
  bool _internal_has_bagtoitem() const;
  public:
  void clear_bagtoitem();
  const ::msg::CSReqBagToItem& bagtoitem() const;
  PROTOBUF_NODISCARD ::msg::CSReqBagToItem* release_bagtoitem();
  ::msg::CSReqBagToItem* mutable_bagtoitem();
  void set_allocated_bagtoitem(::msg::CSReqBagToItem* bagtoitem);
  private:
  const ::msg::CSReqBagToItem& _internal_bagtoitem() const;
  ::msg::CSReqBagToItem* _internal_mutable_bagtoitem();
  public:
  void unsafe_arena_set_allocated_bagtoitem(
      ::msg::CSReqBagToItem* bagtoitem);
  ::msg::CSReqBagToItem* unsafe_arena_release_bagtoitem();

  // .msg.CSReqIdentifyItem IdentifyItem = 624;
  bool has_identifyitem() const;
  private:
  bool _internal_has_identifyitem() const;
  public:
  void clear_identifyitem();
  const ::msg::CSReqIdentifyItem& identifyitem() const;
  PROTOBUF_NODISCARD ::msg::CSReqIdentifyItem* release_identifyitem();
  ::msg::CSReqIdentifyItem* mutable_identifyitem();
  void set_allocated_identifyitem(::msg::CSReqIdentifyItem* identifyitem);
  private:
  const ::msg::CSReqIdentifyItem& _internal_identifyitem() const;
  ::msg::CSReqIdentifyItem* _internal_mutable_identifyitem();
  public:
  void unsafe_arena_set_allocated_identifyitem(
      ::msg::CSReqIdentifyItem* identifyitem);
  ::msg::CSReqIdentifyItem* unsafe_arena_release_identifyitem();

  // .msg.CSReqInsetItemAffix InsetItemAffix = 625;
  bool has_insetitemaffix() const;
  private:
  bool _internal_has_insetitemaffix() const;
  public:
  void clear_insetitemaffix();
  const ::msg::CSReqInsetItemAffix& insetitemaffix() const;
  PROTOBUF_NODISCARD ::msg::CSReqInsetItemAffix* release_insetitemaffix();
  ::msg::CSReqInsetItemAffix* mutable_insetitemaffix();
  void set_allocated_insetitemaffix(::msg::CSReqInsetItemAffix* insetitemaffix);
  private:
  const ::msg::CSReqInsetItemAffix& _internal_insetitemaffix() const;
  ::msg::CSReqInsetItemAffix* _internal_mutable_insetitemaffix();
  public:
  void unsafe_arena_set_allocated_insetitemaffix(
      ::msg::CSReqInsetItemAffix* insetitemaffix);
  ::msg::CSReqInsetItemAffix* unsafe_arena_release_insetitemaffix();

  // .msg.CSReqUnsetItemAffix UnsetItemAffix = 626;
  bool has_unsetitemaffix() const;
  private:
  bool _internal_has_unsetitemaffix() const;
  public:
  void clear_unsetitemaffix();
  const ::msg::CSReqUnsetItemAffix& unsetitemaffix() const;
  PROTOBUF_NODISCARD ::msg::CSReqUnsetItemAffix* release_unsetitemaffix();
  ::msg::CSReqUnsetItemAffix* mutable_unsetitemaffix();
  void set_allocated_unsetitemaffix(::msg::CSReqUnsetItemAffix* unsetitemaffix);
  private:
  const ::msg::CSReqUnsetItemAffix& _internal_unsetitemaffix() const;
  ::msg::CSReqUnsetItemAffix* _internal_mutable_unsetitemaffix();
  public:
  void unsafe_arena_set_allocated_unsetitemaffix(
      ::msg::CSReqUnsetItemAffix* unsetitemaffix);
  ::msg::CSReqUnsetItemAffix* unsafe_arena_release_unsetitemaffix();

  // .msg.CSReqSetDefaultAttributes SetDefaultAttributes = 627;
  bool has_setdefaultattributes() const;
  private:
  bool _internal_has_setdefaultattributes() const;
  public:
  void clear_setdefaultattributes();
  const ::msg::CSReqSetDefaultAttributes& setdefaultattributes() const;
  PROTOBUF_NODISCARD ::msg::CSReqSetDefaultAttributes* release_setdefaultattributes();
  ::msg::CSReqSetDefaultAttributes* mutable_setdefaultattributes();
  void set_allocated_setdefaultattributes(::msg::CSReqSetDefaultAttributes* setdefaultattributes);
  private:
  const ::msg::CSReqSetDefaultAttributes& _internal_setdefaultattributes() const;
  ::msg::CSReqSetDefaultAttributes* _internal_mutable_setdefaultattributes();
  public:
  void unsafe_arena_set_allocated_setdefaultattributes(
      ::msg::CSReqSetDefaultAttributes* setdefaultattributes);
  ::msg::CSReqSetDefaultAttributes* unsafe_arena_release_setdefaultattributes();

  // .msg.CSReqCheckCancel CheckCancel = 628;
  bool has_checkcancel() const;
  private:
  bool _internal_has_checkcancel() const;
  public:
  void clear_checkcancel();
  const ::msg::CSReqCheckCancel& checkcancel() const;
  PROTOBUF_NODISCARD ::msg::CSReqCheckCancel* release_checkcancel();
  ::msg::CSReqCheckCancel* mutable_checkcancel();
  void set_allocated_checkcancel(::msg::CSReqCheckCancel* checkcancel);
  private:
  const ::msg::CSReqCheckCancel& _internal_checkcancel() const;
  ::msg::CSReqCheckCancel* _internal_mutable_checkcancel();
  public:
  void unsafe_arena_set_allocated_checkcancel(
      ::msg::CSReqCheckCancel* checkcancel);
  ::msg::CSReqCheckCancel* unsafe_arena_release_checkcancel();

  // .msg.CSReqCancelAccount CancelAccount = 629;
  bool has_cancelaccount() const;
  private:
  bool _internal_has_cancelaccount() const;
  public:
  void clear_cancelaccount();
  const ::msg::CSReqCancelAccount& cancelaccount() const;
  PROTOBUF_NODISCARD ::msg::CSReqCancelAccount* release_cancelaccount();
  ::msg::CSReqCancelAccount* mutable_cancelaccount();
  void set_allocated_cancelaccount(::msg::CSReqCancelAccount* cancelaccount);
  private:
  const ::msg::CSReqCancelAccount& _internal_cancelaccount() const;
  ::msg::CSReqCancelAccount* _internal_mutable_cancelaccount();
  public:
  void unsafe_arena_set_allocated_cancelaccount(
      ::msg::CSReqCancelAccount* cancelaccount);
  ::msg::CSReqCancelAccount* unsafe_arena_release_cancelaccount();

  // .msg.CSReqOAuthApp OAuthApp = 630;
  bool has_oauthapp() const;
  private:
  bool _internal_has_oauthapp() const;
  public:
  void clear_oauthapp();
  const ::msg::CSReqOAuthApp& oauthapp() const;
  PROTOBUF_NODISCARD ::msg::CSReqOAuthApp* release_oauthapp();
  ::msg::CSReqOAuthApp* mutable_oauthapp();
  void set_allocated_oauthapp(::msg::CSReqOAuthApp* oauthapp);
  private:
  const ::msg::CSReqOAuthApp& _internal_oauthapp() const;
  ::msg::CSReqOAuthApp* _internal_mutable_oauthapp();
  public:
  void unsafe_arena_set_allocated_oauthapp(
      ::msg::CSReqOAuthApp* oauthapp);
  ::msg::CSReqOAuthApp* unsafe_arena_release_oauthapp();

  // .msg.CSReqGetSelfNumRankData GetSelfNumRankData = 631;
  bool has_getselfnumrankdata() const;
  private:
  bool _internal_has_getselfnumrankdata() const;
  public:
  void clear_getselfnumrankdata();
  const ::msg::CSReqGetSelfNumRankData& getselfnumrankdata() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetSelfNumRankData* release_getselfnumrankdata();
  ::msg::CSReqGetSelfNumRankData* mutable_getselfnumrankdata();
  void set_allocated_getselfnumrankdata(::msg::CSReqGetSelfNumRankData* getselfnumrankdata);
  private:
  const ::msg::CSReqGetSelfNumRankData& _internal_getselfnumrankdata() const;
  ::msg::CSReqGetSelfNumRankData* _internal_mutable_getselfnumrankdata();
  public:
  void unsafe_arena_set_allocated_getselfnumrankdata(
      ::msg::CSReqGetSelfNumRankData* getselfnumrankdata);
  ::msg::CSReqGetSelfNumRankData* unsafe_arena_release_getselfnumrankdata();

  // .msg.CSReqUpdateCardGroup UpdateCardGroup = 632;
  bool has_updatecardgroup() const;
  private:
  bool _internal_has_updatecardgroup() const;
  public:
  void clear_updatecardgroup();
  const ::msg::CSReqUpdateCardGroup& updatecardgroup() const;
  PROTOBUF_NODISCARD ::msg::CSReqUpdateCardGroup* release_updatecardgroup();
  ::msg::CSReqUpdateCardGroup* mutable_updatecardgroup();
  void set_allocated_updatecardgroup(::msg::CSReqUpdateCardGroup* updatecardgroup);
  private:
  const ::msg::CSReqUpdateCardGroup& _internal_updatecardgroup() const;
  ::msg::CSReqUpdateCardGroup* _internal_mutable_updatecardgroup();
  public:
  void unsafe_arena_set_allocated_updatecardgroup(
      ::msg::CSReqUpdateCardGroup* updatecardgroup);
  ::msg::CSReqUpdateCardGroup* unsafe_arena_release_updatecardgroup();

  // .msg.CSReqUpdateCardGroupName UpdateCardGroupName = 633;
  bool has_updatecardgroupname() const;
  private:
  bool _internal_has_updatecardgroupname() const;
  public:
  void clear_updatecardgroupname();
  const ::msg::CSReqUpdateCardGroupName& updatecardgroupname() const;
  PROTOBUF_NODISCARD ::msg::CSReqUpdateCardGroupName* release_updatecardgroupname();
  ::msg::CSReqUpdateCardGroupName* mutable_updatecardgroupname();
  void set_allocated_updatecardgroupname(::msg::CSReqUpdateCardGroupName* updatecardgroupname);
  private:
  const ::msg::CSReqUpdateCardGroupName& _internal_updatecardgroupname() const;
  ::msg::CSReqUpdateCardGroupName* _internal_mutable_updatecardgroupname();
  public:
  void unsafe_arena_set_allocated_updatecardgroupname(
      ::msg::CSReqUpdateCardGroupName* updatecardgroupname);
  ::msg::CSReqUpdateCardGroupName* unsafe_arena_release_updatecardgroupname();

  // .msg.CSReqBuyPveBuff BuyPveBuff = 634;
  bool has_buypvebuff() const;
  private:
  bool _internal_has_buypvebuff() const;
  public:
  void clear_buypvebuff();
  const ::msg::CSReqBuyPveBuff& buypvebuff() const;
  PROTOBUF_NODISCARD ::msg::CSReqBuyPveBuff* release_buypvebuff();
  ::msg::CSReqBuyPveBuff* mutable_buypvebuff();
  void set_allocated_buypvebuff(::msg::CSReqBuyPveBuff* buypvebuff);
  private:
  const ::msg::CSReqBuyPveBuff& _internal_buypvebuff() const;
  ::msg::CSReqBuyPveBuff* _internal_mutable_buypvebuff();
  public:
  void unsafe_arena_set_allocated_buypvebuff(
      ::msg::CSReqBuyPveBuff* buypvebuff);
  ::msg::CSReqBuyPveBuff* unsafe_arena_release_buypvebuff();

  // .msg.CSReqSetCardGroup SetCardGroup = 635;
  bool has_setcardgroup() const;
  private:
  bool _internal_has_setcardgroup() const;
  public:
  void clear_setcardgroup();
  const ::msg::CSReqSetCardGroup& setcardgroup() const;
  PROTOBUF_NODISCARD ::msg::CSReqSetCardGroup* release_setcardgroup();
  ::msg::CSReqSetCardGroup* mutable_setcardgroup();
  void set_allocated_setcardgroup(::msg::CSReqSetCardGroup* setcardgroup);
  private:
  const ::msg::CSReqSetCardGroup& _internal_setcardgroup() const;
  ::msg::CSReqSetCardGroup* _internal_mutable_setcardgroup();
  public:
  void unsafe_arena_set_allocated_setcardgroup(
      ::msg::CSReqSetCardGroup* setcardgroup);
  ::msg::CSReqSetCardGroup* unsafe_arena_release_setcardgroup();

  // .msg.CSReqBuyPveChessTemplate BuyPveChessTemplate = 636;
  bool has_buypvechesstemplate() const;
  private:
  bool _internal_has_buypvechesstemplate() const;
  public:
  void clear_buypvechesstemplate();
  const ::msg::CSReqBuyPveChessTemplate& buypvechesstemplate() const;
  PROTOBUF_NODISCARD ::msg::CSReqBuyPveChessTemplate* release_buypvechesstemplate();
  ::msg::CSReqBuyPveChessTemplate* mutable_buypvechesstemplate();
  void set_allocated_buypvechesstemplate(::msg::CSReqBuyPveChessTemplate* buypvechesstemplate);
  private:
  const ::msg::CSReqBuyPveChessTemplate& _internal_buypvechesstemplate() const;
  ::msg::CSReqBuyPveChessTemplate* _internal_mutable_buypvechesstemplate();
  public:
  void unsafe_arena_set_allocated_buypvechesstemplate(
      ::msg::CSReqBuyPveChessTemplate* buypvechesstemplate);
  ::msg::CSReqBuyPveChessTemplate* unsafe_arena_release_buypvechesstemplate();

  // .msg.CSReqPveUnlockChessTemplate PveUnlockChessTemplate = 637;
  bool has_pveunlockchesstemplate() const;
  private:
  bool _internal_has_pveunlockchesstemplate() const;
  public:
  void clear_pveunlockchesstemplate();
  const ::msg::CSReqPveUnlockChessTemplate& pveunlockchesstemplate() const;
  PROTOBUF_NODISCARD ::msg::CSReqPveUnlockChessTemplate* release_pveunlockchesstemplate();
  ::msg::CSReqPveUnlockChessTemplate* mutable_pveunlockchesstemplate();
  void set_allocated_pveunlockchesstemplate(::msg::CSReqPveUnlockChessTemplate* pveunlockchesstemplate);
  private:
  const ::msg::CSReqPveUnlockChessTemplate& _internal_pveunlockchesstemplate() const;
  ::msg::CSReqPveUnlockChessTemplate* _internal_mutable_pveunlockchesstemplate();
  public:
  void unsafe_arena_set_allocated_pveunlockchesstemplate(
      ::msg::CSReqPveUnlockChessTemplate* pveunlockchesstemplate);
  ::msg::CSReqPveUnlockChessTemplate* unsafe_arena_release_pveunlockchesstemplate();

  // .msg.CSReqPveSetTeamDeBuff PveSetTeamDeBuff = 638;
  bool has_pvesetteamdebuff() const;
  private:
  bool _internal_has_pvesetteamdebuff() const;
  public:
  void clear_pvesetteamdebuff();
  const ::msg::CSReqPveSetTeamDeBuff& pvesetteamdebuff() const;
  PROTOBUF_NODISCARD ::msg::CSReqPveSetTeamDeBuff* release_pvesetteamdebuff();
  ::msg::CSReqPveSetTeamDeBuff* mutable_pvesetteamdebuff();
  void set_allocated_pvesetteamdebuff(::msg::CSReqPveSetTeamDeBuff* pvesetteamdebuff);
  private:
  const ::msg::CSReqPveSetTeamDeBuff& _internal_pvesetteamdebuff() const;
  ::msg::CSReqPveSetTeamDeBuff* _internal_mutable_pvesetteamdebuff();
  public:
  void unsafe_arena_set_allocated_pvesetteamdebuff(
      ::msg::CSReqPveSetTeamDeBuff* pvesetteamdebuff);
  ::msg::CSReqPveSetTeamDeBuff* unsafe_arena_release_pvesetteamdebuff();

  // .msg.CSReqChoseCardGroup ChoseCardGroup = 639;
  bool has_chosecardgroup() const;
  private:
  bool _internal_has_chosecardgroup() const;
  public:
  void clear_chosecardgroup();
  const ::msg::CSReqChoseCardGroup& chosecardgroup() const;
  PROTOBUF_NODISCARD ::msg::CSReqChoseCardGroup* release_chosecardgroup();
  ::msg::CSReqChoseCardGroup* mutable_chosecardgroup();
  void set_allocated_chosecardgroup(::msg::CSReqChoseCardGroup* chosecardgroup);
  private:
  const ::msg::CSReqChoseCardGroup& _internal_chosecardgroup() const;
  ::msg::CSReqChoseCardGroup* _internal_mutable_chosecardgroup();
  public:
  void unsafe_arena_set_allocated_chosecardgroup(
      ::msg::CSReqChoseCardGroup* chosecardgroup);
  ::msg::CSReqChoseCardGroup* unsafe_arena_release_chosecardgroup();

  // .msg.CSReqRemoveOvertimeBuff RemoveOvertimeBuff = 640;
  bool has_removeovertimebuff() const;
  private:
  bool _internal_has_removeovertimebuff() const;
  public:
  void clear_removeovertimebuff();
  const ::msg::CSReqRemoveOvertimeBuff& removeovertimebuff() const;
  PROTOBUF_NODISCARD ::msg::CSReqRemoveOvertimeBuff* release_removeovertimebuff();
  ::msg::CSReqRemoveOvertimeBuff* mutable_removeovertimebuff();
  void set_allocated_removeovertimebuff(::msg::CSReqRemoveOvertimeBuff* removeovertimebuff);
  private:
  const ::msg::CSReqRemoveOvertimeBuff& _internal_removeovertimebuff() const;
  ::msg::CSReqRemoveOvertimeBuff* _internal_mutable_removeovertimebuff();
  public:
  void unsafe_arena_set_allocated_removeovertimebuff(
      ::msg::CSReqRemoveOvertimeBuff* removeovertimebuff);
  ::msg::CSReqRemoveOvertimeBuff* unsafe_arena_release_removeovertimebuff();

  // .msg.CSRspUpdateNewCardGroupSign UpdateNewCardGroupSign = 643;
  bool has_updatenewcardgroupsign() const;
  private:
  bool _internal_has_updatenewcardgroupsign() const;
  public:
  void clear_updatenewcardgroupsign();
  const ::msg::CSRspUpdateNewCardGroupSign& updatenewcardgroupsign() const;
  PROTOBUF_NODISCARD ::msg::CSRspUpdateNewCardGroupSign* release_updatenewcardgroupsign();
  ::msg::CSRspUpdateNewCardGroupSign* mutable_updatenewcardgroupsign();
  void set_allocated_updatenewcardgroupsign(::msg::CSRspUpdateNewCardGroupSign* updatenewcardgroupsign);
  private:
  const ::msg::CSRspUpdateNewCardGroupSign& _internal_updatenewcardgroupsign() const;
  ::msg::CSRspUpdateNewCardGroupSign* _internal_mutable_updatenewcardgroupsign();
  public:
  void unsafe_arena_set_allocated_updatenewcardgroupsign(
      ::msg::CSRspUpdateNewCardGroupSign* updatenewcardgroupsign);
  ::msg::CSRspUpdateNewCardGroupSign* unsafe_arena_release_updatenewcardgroupsign();

  // .msg.CSReqTDGetOnHookAward TDGetOnHookAward = 644;
  bool has_tdgetonhookaward() const;
  private:
  bool _internal_has_tdgetonhookaward() const;
  public:
  void clear_tdgetonhookaward();
  const ::msg::CSReqTDGetOnHookAward& tdgetonhookaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqTDGetOnHookAward* release_tdgetonhookaward();
  ::msg::CSReqTDGetOnHookAward* mutable_tdgetonhookaward();
  void set_allocated_tdgetonhookaward(::msg::CSReqTDGetOnHookAward* tdgetonhookaward);
  private:
  const ::msg::CSReqTDGetOnHookAward& _internal_tdgetonhookaward() const;
  ::msg::CSReqTDGetOnHookAward* _internal_mutable_tdgetonhookaward();
  public:
  void unsafe_arena_set_allocated_tdgetonhookaward(
      ::msg::CSReqTDGetOnHookAward* tdgetonhookaward);
  ::msg::CSReqTDGetOnHookAward* unsafe_arena_release_tdgetonhookaward();

  // .msg.CsReqTDDraw TDDraw = 645;
  bool has_tddraw() const;
  private:
  bool _internal_has_tddraw() const;
  public:
  void clear_tddraw();
  const ::msg::CsReqTDDraw& tddraw() const;
  PROTOBUF_NODISCARD ::msg::CsReqTDDraw* release_tddraw();
  ::msg::CsReqTDDraw* mutable_tddraw();
  void set_allocated_tddraw(::msg::CsReqTDDraw* tddraw);
  private:
  const ::msg::CsReqTDDraw& _internal_tddraw() const;
  ::msg::CsReqTDDraw* _internal_mutable_tddraw();
  public:
  void unsafe_arena_set_allocated_tddraw(
      ::msg::CsReqTDDraw* tddraw);
  ::msg::CsReqTDDraw* unsafe_arena_release_tddraw();

  // .msg.CsReqTDBuyCard TDBuyCard = 646;
  bool has_tdbuycard() const;
  private:
  bool _internal_has_tdbuycard() const;
  public:
  void clear_tdbuycard();
  const ::msg::CsReqTDBuyCard& tdbuycard() const;
  PROTOBUF_NODISCARD ::msg::CsReqTDBuyCard* release_tdbuycard();
  ::msg::CsReqTDBuyCard* mutable_tdbuycard();
  void set_allocated_tdbuycard(::msg::CsReqTDBuyCard* tdbuycard);
  private:
  const ::msg::CsReqTDBuyCard& _internal_tdbuycard() const;
  ::msg::CsReqTDBuyCard* _internal_mutable_tdbuycard();
  public:
  void unsafe_arena_set_allocated_tdbuycard(
      ::msg::CsReqTDBuyCard* tdbuycard);
  ::msg::CsReqTDBuyCard* unsafe_arena_release_tdbuycard();

  // .msg.CSReqTDSetCardGroup TDSetCardGroup = 647;
  bool has_tdsetcardgroup() const;
  private:
  bool _internal_has_tdsetcardgroup() const;
  public:
  void clear_tdsetcardgroup();
  const ::msg::CSReqTDSetCardGroup& tdsetcardgroup() const;
  PROTOBUF_NODISCARD ::msg::CSReqTDSetCardGroup* release_tdsetcardgroup();
  ::msg::CSReqTDSetCardGroup* mutable_tdsetcardgroup();
  void set_allocated_tdsetcardgroup(::msg::CSReqTDSetCardGroup* tdsetcardgroup);
  private:
  const ::msg::CSReqTDSetCardGroup& _internal_tdsetcardgroup() const;
  ::msg::CSReqTDSetCardGroup* _internal_mutable_tdsetcardgroup();
  public:
  void unsafe_arena_set_allocated_tdsetcardgroup(
      ::msg::CSReqTDSetCardGroup* tdsetcardgroup);
  ::msg::CSReqTDSetCardGroup* unsafe_arena_release_tdsetcardgroup();

  // .msg.CSReqTDLevelUp TDLevelUp = 648;
  bool has_tdlevelup() const;
  private:
  bool _internal_has_tdlevelup() const;
  public:
  void clear_tdlevelup();
  const ::msg::CSReqTDLevelUp& tdlevelup() const;
  PROTOBUF_NODISCARD ::msg::CSReqTDLevelUp* release_tdlevelup();
  ::msg::CSReqTDLevelUp* mutable_tdlevelup();
  void set_allocated_tdlevelup(::msg::CSReqTDLevelUp* tdlevelup);
  private:
  const ::msg::CSReqTDLevelUp& _internal_tdlevelup() const;
  ::msg::CSReqTDLevelUp* _internal_mutable_tdlevelup();
  public:
  void unsafe_arena_set_allocated_tdlevelup(
      ::msg::CSReqTDLevelUp* tdlevelup);
  ::msg::CSReqTDLevelUp* unsafe_arena_release_tdlevelup();

  // .msg.CSReqTDEquip TDEquip = 649;
  bool has_tdequip() const;
  private:
  bool _internal_has_tdequip() const;
  public:
  void clear_tdequip();
  const ::msg::CSReqTDEquip& tdequip() const;
  PROTOBUF_NODISCARD ::msg::CSReqTDEquip* release_tdequip();
  ::msg::CSReqTDEquip* mutable_tdequip();
  void set_allocated_tdequip(::msg::CSReqTDEquip* tdequip);
  private:
  const ::msg::CSReqTDEquip& _internal_tdequip() const;
  ::msg::CSReqTDEquip* _internal_mutable_tdequip();
  public:
  void unsafe_arena_set_allocated_tdequip(
      ::msg::CSReqTDEquip* tdequip);
  ::msg::CSReqTDEquip* unsafe_arena_release_tdequip();

  // .msg.CSReqMentorUpdateSetting MentorUpdateSetting = 650;
  bool has_mentorupdatesetting() const;
  private:
  bool _internal_has_mentorupdatesetting() const;
  public:
  void clear_mentorupdatesetting();
  const ::msg::CSReqMentorUpdateSetting& mentorupdatesetting() const;
  PROTOBUF_NODISCARD ::msg::CSReqMentorUpdateSetting* release_mentorupdatesetting();
  ::msg::CSReqMentorUpdateSetting* mutable_mentorupdatesetting();
  void set_allocated_mentorupdatesetting(::msg::CSReqMentorUpdateSetting* mentorupdatesetting);
  private:
  const ::msg::CSReqMentorUpdateSetting& _internal_mentorupdatesetting() const;
  ::msg::CSReqMentorUpdateSetting* _internal_mutable_mentorupdatesetting();
  public:
  void unsafe_arena_set_allocated_mentorupdatesetting(
      ::msg::CSReqMentorUpdateSetting* mentorupdatesetting);
  ::msg::CSReqMentorUpdateSetting* unsafe_arena_release_mentorupdatesetting();

  // .msg.CSReqMentorInvite MentorInvite = 651;
  bool has_mentorinvite() const;
  private:
  bool _internal_has_mentorinvite() const;
  public:
  void clear_mentorinvite();
  const ::msg::CSReqMentorInvite& mentorinvite() const;
  PROTOBUF_NODISCARD ::msg::CSReqMentorInvite* release_mentorinvite();
  ::msg::CSReqMentorInvite* mutable_mentorinvite();
  void set_allocated_mentorinvite(::msg::CSReqMentorInvite* mentorinvite);
  private:
  const ::msg::CSReqMentorInvite& _internal_mentorinvite() const;
  ::msg::CSReqMentorInvite* _internal_mutable_mentorinvite();
  public:
  void unsafe_arena_set_allocated_mentorinvite(
      ::msg::CSReqMentorInvite* mentorinvite);
  ::msg::CSReqMentorInvite* unsafe_arena_release_mentorinvite();

  // .msg.CSReqMentorConfirmInvite MentorConfirmInvite = 652;
  bool has_mentorconfirminvite() const;
  private:
  bool _internal_has_mentorconfirminvite() const;
  public:
  void clear_mentorconfirminvite();
  const ::msg::CSReqMentorConfirmInvite& mentorconfirminvite() const;
  PROTOBUF_NODISCARD ::msg::CSReqMentorConfirmInvite* release_mentorconfirminvite();
  ::msg::CSReqMentorConfirmInvite* mutable_mentorconfirminvite();
  void set_allocated_mentorconfirminvite(::msg::CSReqMentorConfirmInvite* mentorconfirminvite);
  private:
  const ::msg::CSReqMentorConfirmInvite& _internal_mentorconfirminvite() const;
  ::msg::CSReqMentorConfirmInvite* _internal_mutable_mentorconfirminvite();
  public:
  void unsafe_arena_set_allocated_mentorconfirminvite(
      ::msg::CSReqMentorConfirmInvite* mentorconfirminvite);
  ::msg::CSReqMentorConfirmInvite* unsafe_arena_release_mentorconfirminvite();

  // .msg.CSReqMentorRecommendList MentorRecommendList = 653;
  bool has_mentorrecommendlist() const;
  private:
  bool _internal_has_mentorrecommendlist() const;
  public:
  void clear_mentorrecommendlist();
  const ::msg::CSReqMentorRecommendList& mentorrecommendlist() const;
  PROTOBUF_NODISCARD ::msg::CSReqMentorRecommendList* release_mentorrecommendlist();
  ::msg::CSReqMentorRecommendList* mutable_mentorrecommendlist();
  void set_allocated_mentorrecommendlist(::msg::CSReqMentorRecommendList* mentorrecommendlist);
  private:
  const ::msg::CSReqMentorRecommendList& _internal_mentorrecommendlist() const;
  ::msg::CSReqMentorRecommendList* _internal_mutable_mentorrecommendlist();
  public:
  void unsafe_arena_set_allocated_mentorrecommendlist(
      ::msg::CSReqMentorRecommendList* mentorrecommendlist);
  ::msg::CSReqMentorRecommendList* unsafe_arena_release_mentorrecommendlist();

  // .msg.CSReqMentorGetTaskAward MentorGetTaskAward = 654;
  bool has_mentorgettaskaward() const;
  private:
  bool _internal_has_mentorgettaskaward() const;
  public:
  void clear_mentorgettaskaward();
  const ::msg::CSReqMentorGetTaskAward& mentorgettaskaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqMentorGetTaskAward* release_mentorgettaskaward();
  ::msg::CSReqMentorGetTaskAward* mutable_mentorgettaskaward();
  void set_allocated_mentorgettaskaward(::msg::CSReqMentorGetTaskAward* mentorgettaskaward);
  private:
  const ::msg::CSReqMentorGetTaskAward& _internal_mentorgettaskaward() const;
  ::msg::CSReqMentorGetTaskAward* _internal_mutable_mentorgettaskaward();
  public:
  void unsafe_arena_set_allocated_mentorgettaskaward(
      ::msg::CSReqMentorGetTaskAward* mentorgettaskaward);
  ::msg::CSReqMentorGetTaskAward* unsafe_arena_release_mentorgettaskaward();

  // .msg.CSReqMentorGraduate MentorGraduate = 655;
  bool has_mentorgraduate() const;
  private:
  bool _internal_has_mentorgraduate() const;
  public:
  void clear_mentorgraduate();
  const ::msg::CSReqMentorGraduate& mentorgraduate() const;
  PROTOBUF_NODISCARD ::msg::CSReqMentorGraduate* release_mentorgraduate();
  ::msg::CSReqMentorGraduate* mutable_mentorgraduate();
  void set_allocated_mentorgraduate(::msg::CSReqMentorGraduate* mentorgraduate);
  private:
  const ::msg::CSReqMentorGraduate& _internal_mentorgraduate() const;
  ::msg::CSReqMentorGraduate* _internal_mutable_mentorgraduate();
  public:
  void unsafe_arena_set_allocated_mentorgraduate(
      ::msg::CSReqMentorGraduate* mentorgraduate);
  ::msg::CSReqMentorGraduate* unsafe_arena_release_mentorgraduate();

  // .msg.CSReqMentorRelieveRelation MentorRelieveRelation = 656;
  bool has_mentorrelieverelation() const;
  private:
  bool _internal_has_mentorrelieverelation() const;
  public:
  void clear_mentorrelieverelation();
  const ::msg::CSReqMentorRelieveRelation& mentorrelieverelation() const;
  PROTOBUF_NODISCARD ::msg::CSReqMentorRelieveRelation* release_mentorrelieverelation();
  ::msg::CSReqMentorRelieveRelation* mutable_mentorrelieverelation();
  void set_allocated_mentorrelieverelation(::msg::CSReqMentorRelieveRelation* mentorrelieverelation);
  private:
  const ::msg::CSReqMentorRelieveRelation& _internal_mentorrelieverelation() const;
  ::msg::CSReqMentorRelieveRelation* _internal_mutable_mentorrelieverelation();
  public:
  void unsafe_arena_set_allocated_mentorrelieverelation(
      ::msg::CSReqMentorRelieveRelation* mentorrelieverelation);
  ::msg::CSReqMentorRelieveRelation* unsafe_arena_release_mentorrelieverelation();

  // .msg.CSReqGetMentorInfo GetMentorInfo = 657;
  bool has_getmentorinfo() const;
  private:
  bool _internal_has_getmentorinfo() const;
  public:
  void clear_getmentorinfo();
  const ::msg::CSReqGetMentorInfo& getmentorinfo() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetMentorInfo* release_getmentorinfo();
  ::msg::CSReqGetMentorInfo* mutable_getmentorinfo();
  void set_allocated_getmentorinfo(::msg::CSReqGetMentorInfo* getmentorinfo);
  private:
  const ::msg::CSReqGetMentorInfo& _internal_getmentorinfo() const;
  ::msg::CSReqGetMentorInfo* _internal_mutable_getmentorinfo();
  public:
  void unsafe_arena_set_allocated_getmentorinfo(
      ::msg::CSReqGetMentorInfo* getmentorinfo);
  ::msg::CSReqGetMentorInfo* unsafe_arena_release_getmentorinfo();

  // .msg.CSReqMentorGetInviteMsg MentorGetInviteMsg = 658;
  bool has_mentorgetinvitemsg() const;
  private:
  bool _internal_has_mentorgetinvitemsg() const;
  public:
  void clear_mentorgetinvitemsg();
  const ::msg::CSReqMentorGetInviteMsg& mentorgetinvitemsg() const;
  PROTOBUF_NODISCARD ::msg::CSReqMentorGetInviteMsg* release_mentorgetinvitemsg();
  ::msg::CSReqMentorGetInviteMsg* mutable_mentorgetinvitemsg();
  void set_allocated_mentorgetinvitemsg(::msg::CSReqMentorGetInviteMsg* mentorgetinvitemsg);
  private:
  const ::msg::CSReqMentorGetInviteMsg& _internal_mentorgetinvitemsg() const;
  ::msg::CSReqMentorGetInviteMsg* _internal_mutable_mentorgetinvitemsg();
  public:
  void unsafe_arena_set_allocated_mentorgetinvitemsg(
      ::msg::CSReqMentorGetInviteMsg* mentorgetinvitemsg);
  ::msg::CSReqMentorGetInviteMsg* unsafe_arena_release_mentorgetinvitemsg();

  // .msg.CSReqUpdateCardGroupBetter UpdateCardGroupBetter = 659;
  bool has_updatecardgroupbetter() const;
  private:
  bool _internal_has_updatecardgroupbetter() const;
  public:
  void clear_updatecardgroupbetter();
  const ::msg::CSReqUpdateCardGroupBetter& updatecardgroupbetter() const;
  PROTOBUF_NODISCARD ::msg::CSReqUpdateCardGroupBetter* release_updatecardgroupbetter();
  ::msg::CSReqUpdateCardGroupBetter* mutable_updatecardgroupbetter();
  void set_allocated_updatecardgroupbetter(::msg::CSReqUpdateCardGroupBetter* updatecardgroupbetter);
  private:
  const ::msg::CSReqUpdateCardGroupBetter& _internal_updatecardgroupbetter() const;
  ::msg::CSReqUpdateCardGroupBetter* _internal_mutable_updatecardgroupbetter();
  public:
  void unsafe_arena_set_allocated_updatecardgroupbetter(
      ::msg::CSReqUpdateCardGroupBetter* updatecardgroupbetter);
  ::msg::CSReqUpdateCardGroupBetter* unsafe_arena_release_updatecardgroupbetter();

  // .msg.CSReqUpdateCardGroupSetting UpdateCardGroupSetting = 660;
  bool has_updatecardgroupsetting() const;
  private:
  bool _internal_has_updatecardgroupsetting() const;
  public:
  void clear_updatecardgroupsetting();
  const ::msg::CSReqUpdateCardGroupSetting& updatecardgroupsetting() const;
  PROTOBUF_NODISCARD ::msg::CSReqUpdateCardGroupSetting* release_updatecardgroupsetting();
  ::msg::CSReqUpdateCardGroupSetting* mutable_updatecardgroupsetting();
  void set_allocated_updatecardgroupsetting(::msg::CSReqUpdateCardGroupSetting* updatecardgroupsetting);
  private:
  const ::msg::CSReqUpdateCardGroupSetting& _internal_updatecardgroupsetting() const;
  ::msg::CSReqUpdateCardGroupSetting* _internal_mutable_updatecardgroupsetting();
  public:
  void unsafe_arena_set_allocated_updatecardgroupsetting(
      ::msg::CSReqUpdateCardGroupSetting* updatecardgroupsetting);
  ::msg::CSReqUpdateCardGroupSetting* unsafe_arena_release_updatecardgroupsetting();

  // .msg.CSReqSetContent SetContent = 661;
  bool has_setcontent() const;
  private:
  bool _internal_has_setcontent() const;
  public:
  void clear_setcontent();
  const ::msg::CSReqSetContent& setcontent() const;
  PROTOBUF_NODISCARD ::msg::CSReqSetContent* release_setcontent();
  ::msg::CSReqSetContent* mutable_setcontent();
  void set_allocated_setcontent(::msg::CSReqSetContent* setcontent);
  private:
  const ::msg::CSReqSetContent& _internal_setcontent() const;
  ::msg::CSReqSetContent* _internal_mutable_setcontent();
  public:
  void unsafe_arena_set_allocated_setcontent(
      ::msg::CSReqSetContent* setcontent);
  ::msg::CSReqSetContent* unsafe_arena_release_setcontent();

  // .msg.CSReqGetBalance GetBalance = 662;
  bool has_getbalance() const;
  private:
  bool _internal_has_getbalance() const;
  public:
  void clear_getbalance();
  const ::msg::CSReqGetBalance& getbalance() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetBalance* release_getbalance();
  ::msg::CSReqGetBalance* mutable_getbalance();
  void set_allocated_getbalance(::msg::CSReqGetBalance* getbalance);
  private:
  const ::msg::CSReqGetBalance& _internal_getbalance() const;
  ::msg::CSReqGetBalance* _internal_mutable_getbalance();
  public:
  void unsafe_arena_set_allocated_getbalance(
      ::msg::CSReqGetBalance* getbalance);
  ::msg::CSReqGetBalance* unsafe_arena_release_getbalance();

  // .msg.CSReqRechargeBalance RechargeBalance = 663;
  bool has_rechargebalance() const;
  private:
  bool _internal_has_rechargebalance() const;
  public:
  void clear_rechargebalance();
  const ::msg::CSReqRechargeBalance& rechargebalance() const;
  PROTOBUF_NODISCARD ::msg::CSReqRechargeBalance* release_rechargebalance();
  ::msg::CSReqRechargeBalance* mutable_rechargebalance();
  void set_allocated_rechargebalance(::msg::CSReqRechargeBalance* rechargebalance);
  private:
  const ::msg::CSReqRechargeBalance& _internal_rechargebalance() const;
  ::msg::CSReqRechargeBalance* _internal_mutable_rechargebalance();
  public:
  void unsafe_arena_set_allocated_rechargebalance(
      ::msg::CSReqRechargeBalance* rechargebalance);
  ::msg::CSReqRechargeBalance* unsafe_arena_release_rechargebalance();

  // .msg.CSReqWithdrawBalance WithdrawBalance = 664;
  bool has_withdrawbalance() const;
  private:
  bool _internal_has_withdrawbalance() const;
  public:
  void clear_withdrawbalance();
  const ::msg::CSReqWithdrawBalance& withdrawbalance() const;
  PROTOBUF_NODISCARD ::msg::CSReqWithdrawBalance* release_withdrawbalance();
  ::msg::CSReqWithdrawBalance* mutable_withdrawbalance();
  void set_allocated_withdrawbalance(::msg::CSReqWithdrawBalance* withdrawbalance);
  private:
  const ::msg::CSReqWithdrawBalance& _internal_withdrawbalance() const;
  ::msg::CSReqWithdrawBalance* _internal_mutable_withdrawbalance();
  public:
  void unsafe_arena_set_allocated_withdrawbalance(
      ::msg::CSReqWithdrawBalance* withdrawbalance);
  ::msg::CSReqWithdrawBalance* unsafe_arena_release_withdrawbalance();

  // .msg.CSReqPersonalRecommendMall PersonalRecommendMall = 665;
  bool has_personalrecommendmall() const;
  private:
  bool _internal_has_personalrecommendmall() const;
  public:
  void clear_personalrecommendmall();
  const ::msg::CSReqPersonalRecommendMall& personalrecommendmall() const;
  PROTOBUF_NODISCARD ::msg::CSReqPersonalRecommendMall* release_personalrecommendmall();
  ::msg::CSReqPersonalRecommendMall* mutable_personalrecommendmall();
  void set_allocated_personalrecommendmall(::msg::CSReqPersonalRecommendMall* personalrecommendmall);
  private:
  const ::msg::CSReqPersonalRecommendMall& _internal_personalrecommendmall() const;
  ::msg::CSReqPersonalRecommendMall* _internal_mutable_personalrecommendmall();
  public:
  void unsafe_arena_set_allocated_personalrecommendmall(
      ::msg::CSReqPersonalRecommendMall* personalrecommendmall);
  ::msg::CSReqPersonalRecommendMall* unsafe_arena_release_personalrecommendmall();

  // .msg.CSReqGetMedalChestAward GetMedalChestAward = 666;
  bool has_getmedalchestaward() const;
  private:
  bool _internal_has_getmedalchestaward() const;
  public:
  void clear_getmedalchestaward();
  const ::msg::CSReqGetMedalChestAward& getmedalchestaward() const;
  PROTOBUF_NODISCARD ::msg::CSReqGetMedalChestAward* release_getmedalchestaward();
  ::msg::CSReqGetMedalChestAward* mutable_getmedalchestaward();
  void set_allocated_getmedalchestaward(::msg::CSReqGetMedalChestAward* getmedalchestaward);
  private:
  const ::msg::CSReqGetMedalChestAward& _internal_getmedalchestaward() const;
  ::msg::CSReqGetMedalChestAward* _internal_mutable_getmedalchestaward();
  public:
  void unsafe_arena_set_allocated_getmedalchestaward(
      ::msg::CSReqGetMedalChestAward* getmedalchestaward);
  ::msg::CSReqGetMedalChestAward* unsafe_arena_release_getmedalchestaward();

  // .msg.CSReqSetItemAutoUse SetItemAutoUse = 667;
  bool has_setitemautouse() const;
  private:
  bool _internal_has_setitemautouse() const;
  public:
  void clear_setitemautouse();
  const ::msg::CSReqSetItemAutoUse& setitemautouse() const;
  PROTOBUF_NODISCARD ::msg::CSReqSetItemAutoUse* release_setitemautouse();
  ::msg::CSReqSetItemAutoUse* mutable_setitemautouse();
  void set_allocated_setitemautouse(::msg::CSReqSetItemAutoUse* setitemautouse);
  private:
  const ::msg::CSReqSetItemAutoUse& _internal_setitemautouse() const;
  ::msg::CSReqSetItemAutoUse* _internal_mutable_setitemautouse();
  public:
  void unsafe_arena_set_allocated_setitemautouse(
      ::msg::CSReqSetItemAutoUse* setitemautouse);
  ::msg::CSReqSetItemAutoUse* unsafe_arena_release_setitemautouse();

  // uint64 Seq = 1;
  void clear_seq();
  uint64_t seq() const;
  void set_seq(uint64_t value);
  private:
  uint64_t _internal_seq() const;
  void _internal_set_seq(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::CSReqHeart* heart_;
    ::msg::CSReqLogin* login_;
    ::msg::CSReqVersionCheck* versioncheck_;
    ::msg::CSReqResourceVersionCheck* resourceversioncheck_;
    ::msg::CSReqApplyHallServer* applyhallserver_;
    ::msg::CSReqGetNumRank* getnumrank_;
    ::msg::CSReqWorldChat* worldchat_;
    ::msg::CSReqPlayersBaseInfo* playersbaseinfo_;
    ::msg::CSReqPlayerDetailInfo* playerdetailinfo_;
    ::msg::CSReqReadMail* readmail_;
    ::msg::CSReqGetMailAward* getmailaward_;
    ::msg::CSReqBuyEgg* buyegg_;
    ::msg::CSReqUserNameSet* usernameset_;
    ::msg::CSReqUserNameRandom* usernamerandom_;
    ::msg::CSReqHeadPicSet* headpicset_;
    ::msg::CSReqPvp* pvp_;
    ::msg::CSReqDressChessPlayer* dresschessplayer_;
    ::msg::CSReqDressScene* dressscene_;
    ::msg::CSReqPvpLogin* pvplogin_;
    ::msg::CSReqPvpEnd* pvpend_;
    ::msg::CSReqPlayerFinish* playerfinish_;
    ::msg::CSReqPlayerQuit* playerquit_;
    ::msg::CSReqSellItem* sellitem_;
    ::msg::CSReqGetEvalAward* getevalaward_;
    ::msg::CSReqUseChessPlayer* usechessplayer_;
    ::msg::CSReqGuidReport* guidreport_;
    ::msg::CSReqGetCodeAward* getcodeaward_;
    ::msg::CSReqRoundReport* roundreport_;
    ::msg::CSReqLoadingProgress* loadingprogress_;
    ::msg::CSReqPvpChat* pvpchat_;
    ::msg::CSReqChessCombine* chesscombine_;
    ::msg::CSReqExpose* expose_;
    ::msg::CSReqApplyOrderId* applyorderid_;
    ::msg::CSReqReportOrderInfo* reportorderinfo_;
    ::msg::CSReqSetItem* setitem_;
    ::msg::CSReqUnsetItem* unsetitem_;
    ::msg::CSReqRandomItem* randomitem_;
    ::msg::CSReqChat* chat_;
    ::msg::CSReqSetChessPlayer* setchessplayer_;
    ::msg::CSReqUnsetChessPlayer* unsetchessplayer_;
    ::msg::CSReqGetFansList* getfanslist_;
    ::msg::CSReqFollowPlayer* followplayer_;
    ::msg::CSReqUnfollowPlayer* unfollowplayer_;
    ::msg::CSReqPlayersStatusInfo* playersstatusinfo_;
    ::msg::CSReqInviteJoinTeam* invitejointeam_;
    ::msg::CSReqJoinTeam* jointeam_;
    ::msg::CSReqKickOffTeamPlayer* kickoffteamplayer_;
    ::msg::CSReqTeamMsg* teammsg_;
    ::msg::CSReqTeamReady* teamready_;
    ::msg::CSReqReportPayResponse* reportpayresponse_;
    ::msg::CSReqRejectJoinTeam* rejectjointeam_;
    ::msg::CSReqShieldChat* shieldchat_;
    ::msg::CSReqBuyPassportLevel* buypassportlevel_;
    ::msg::CSReqUpgradePassport* upgradepassport_;
    ::msg::CSReqGetPassportLevelAward* getpassportlevelaward_;
    ::msg::CSReqGetPassportTaskAward* getpassporttaskaward_;
    ::msg::CSReqTelBook* telbook_;
    ::msg::CSReqActivatePassport* activatepassport_;
    ::msg::CSReqRankSeasonEval* rankseasoneval_;
    ::msg::CSReqBindAccount* bindaccount_;
    ::msg::CSReqIncAdShowCount* incadsshowcount_;
    ::msg::CSReqUseBonusCard* usebonuscard_;
    ::msg::CSReqGetSeasonAward* getseasonaward_;
    ::msg::CSReqGetAlphaActivityAward* getalphaactivityaward_;
    ::msg::CSReqGetLanguageData* getlanguagedata_;
    ::msg::CSReqGetActivityAward* getactivityaward_;
    ::msg::CSReqGetActivityData* getactivitydata_;
    ::msg::CSReqSendSms* sendsms_;
    ::msg::CSReqGetMeleeAward* getmeleeaward_;
    ::msg::CSReqAddAiToTeam* addaitoteam_;
    ::msg::CSReqShare* share_;
    ::msg::CSReqSkipInterface* skipinterface_;
    ::msg::CSReqTeamGame* teamgame_;
    ::msg::CSReqSetTeamMode* setteammode_;
    ::msg::CSReqSetHistoryPvpShowPermission* historypvpshowpermission_;
    ::msg::CSReqSearchTeam* searchteam_;
    ::msg::CSReqApplyChat* applychat_;
    ::msg::CSReqChatLogin* chatlogin_;
    ::msg::CSReqProbeNetDelay* probenetdelay_;
    ::msg::CSReqGetEggs* geteggs_;
    ::msg::CSReqBuyGoods* buygoods_;
    ::msg::CSReqExchangePassportGoods* exchangepassportgoods_;
    ::msg::CSReqUsePassportTaskCard* usepassporttaskcard_;
    ::msg::CSReqOpenRandChest* openrandchest_;
    ::msg::CSReqEggLottery* egglottery_;
    ::msg::CSReqQueryDiamondBalance* querydiamondbalance_;
    ::msg::CSReqUseItem* useitem_;
    ::msg::CSReqUseExperienceCard* useexperiencecard_;
    ::msg::CSReqRandTargetItem* randtargetitem_;
    ::msg::CSReqAddBlacklist* addblacklist_;
    ::msg::CSReqRemoveBlacklist* removeblacklist_;
    ::msg::CSReqReportPlayerBirth* reportplayerbirth_;
    ::msg::CSReqReportInfoInput* reportinfoinput_;
    ::msg::CSReqSendVerificationCode* sendverificationcode_;
    ::msg::CSReqBindPhoneNumber* bindphonenumber_;
    ::msg::CSReqWorldInvite* worldinvite_;
    ::msg::CSReqRemoveExpireItem* removeexpireitem_;
    ::msg::CSReqGetMallGoods* getmallgoods_;
    ::msg::CSReqBuyMallGoods* buymallgoods_;
    ::msg::CSReqBindSharingCode* bindsharingcode_;
    ::msg::CSReqWXBlessBag* wxblessbag_;
    ::msg::CSReqUpdateFriendsInGame* updatefriendsingame_;
    ::msg::CSReqShareReward* sharereward_;
    ::msg::CSReqAllFightInfo* allfightinfo_;
    ::msg::CSReqGetOldPlayer* getoldplayer_;
    ::msg::CSReqBindOldPlayer* bindoldplayer_;
    ::msg::CSReqSendVerificationCodeWithCheckRedis* sendverificationcodewithcheckredis_;
    ::msg::CSReqReportSetting* reportsetting_;
    ::msg::CSReqAntiData* antidata_;
    ::msg::CSReqTlogData* tlogdata_;
    ::msg::CSReqDaySign* daysign_;
    ::msg::CSReqDayFitAvoid* dayfitavoid_;
    ::msg::CSReqShareCountAward* sharecountaward_;
    ::msg::CSReqActItemExch* actitemexch_;
    ::msg::CSReqRealationStar* realationstar_;
    ::msg::CSReqGetRealationStarInviteSucc* getrealationstarinvitesucc_;
    ::msg::CSReqGetRealationStar* getrealationstar_;
    ::msg::CSReqGetActRecord* reqactrecord_;
    ::msg::CSReqJoinVoiceTeam* joinvoiceteam_;
    ::msg::CSReqJoinVoicePvp* joinvoicepvp_;
    ::msg::CSReqJoinVoiceCamp* joinvoicecamp_;
    ::msg::CSReqUserCountrySet* usercountryset_;
    ::msg::CSReqOfflineInviteJoinTeam* offlineinvitejointeam_;
    ::msg::CSReqObserve* observe_;
    ::msg::CSReqGetRecommendPvp* getrecommendpvp_;
    ::msg::CSReqObserveLogin* observelogin_;
    ::msg::CSReqQuitObserve* quitobserve_;
    ::msg::CSReqGetObserveInfo* getobserveinfo_;
    ::msg::CSReqFreeFlow* freeflow_;
    ::msg::CSReqSetPushToken* setpushtoken_;
    ::msg::CSReqTlogEvent* tlogevent_;
    ::msg::CSReqWxVVipAward* wxvvipaward_;
    ::msg::CSReqGetRelationStarWX* relationstarwx_;
    ::msg::CSReqSendWxRedPacket* sendwxredpacket_;
    ::msg::CSReqRecvWxRedPacket* recvwxredpacket_;
    ::msg::CSReqWxRedPktLike* wxredpktlike_;
    ::msg::CSReqWxRedPktRank* wxredpktrank_;
    ::msg::CSReqObservePrivilege* setobserveprivilege_;
    ::msg::CSReqPresetFastChat* presetfastchat_;
    ::msg::CSReqChangeSlotTeam* changeslotteam_;
    ::msg::CSReqChangeSubModeTeam* changesubmodeteam_;
    ::msg::CSReqConfirmChangeSlotTeam* confirmchangeslotteam_;
    ::msg::CSReqPvpRoundEnd* pvproundend_;
    ::msg::CSReqObserveChatLogin* observechatlogin_;
    ::msg::CSReqPvpConfirm* pvpconfirm_;
    ::msg::CSReqActivityPicShare* activitypicshare_;
    ::msg::CSReqBindOldBusinessPlayer* bindoldbusinessplayer_;
    ::msg::CSReqTranslate* translate_;
    ::msg::CSReqSubmitQuestionnaire* submitquestionnaire_;
    ::msg::CSReqCancelChangeSlot* cancelchangeslot_;
    ::msg::CSReqSetChessSkin* setchessskin_;
    ::msg::CSReqUnsetChessSkin* unsetchessskin_;
    ::msg::CSReqCompose* compose_;
    ::msg::CSReqOffHelpReddot* offhelpreddot_;
    ::msg::CSReqVideo* video_;
    ::msg::CSReqChangeLanguage* changelanguage_;
    ::msg::CSReqReportVideoPlay* videoplay_;
    ::msg::CSReqSetProvince* setprovince_;
    ::msg::CSReqLongyuanVoice* longyuanvoice_;
    ::msg::CSReqEnrollTournament* enrolltournament_;
    ::msg::CSReqJoinTournamentRoom* jointournamentroom_;
    ::msg::CSReqTournamentPointAward* tournamentpointaward_;
    ::msg::CSReqDealWebMail* dealwebmail_;
    ::msg::CSReqGetEnrollPlayers* getenrollplayers_;
    ::msg::CSReqChallengeAgain* challengeagain_;
    ::msg::CSReqHistoryChatMsg* historychat_;
    ::msg::CSReqSetFriendInvisible* setfriendinvisible_;
    ::msg::CSReqGetObserveAward* getobserveaward_;
    ::msg::CSReqInviteObserve* inviteobserve_;
    ::msg::CSReqRejectObserve* rejectobserve_;
    ::msg::CSReqGetTxPlayer* gettxplayer_;
    ::msg::CSReqChooseTxPlayer* choosetxplayer_;
    ::msg::CSReqGetThirdPvpInfo* getthirdpvpinfo_;
    ::msg::CSReqMarkPlayerGuide* markplayerguide_;
    ::msg::CSReqMarkChessSkinClicked* markchessskinclicked_;
    ::msg::CSReqRecruitInvitePlayer* recruitinviteplayer_;
    ::msg::CSReqRecruitBindInviter* recruitbindinviter_;
    ::msg::CSReqQueryPs4Entitlements* queryps4entitlements_;
    ::msg::CSReqActDaySign* actdaysign_;
    ::msg::CSReqHaveThirdPvp* havethirdpvpinfo_;
    ::msg::CSReqActivityMall* activitymall_;
    ::msg::CSReqPsOnly* psonly_;
    ::msg::CSReqChangeChannelType* changechanneltype_;
    ::msg::CSReqCustomCardOpt* customcardopt_;
    ::msg::CSReqStaticsReport* staticsreport_;
    ::msg::CSReqChampionHistory* championhistory_;
    ::msg::CSReqTournamentLastTopRank* tournamentlasttoprank_;
    ::msg::CSReqBigWinnerExpandMatch* bigwinnerexpandmatch_;
    ::msg::CSReqBigWinnerDailyAward* bigwinnerdailyaward_;
    ::msg::CSReqBigWinnerScoreHistory* bigwinnerscorehistory_;
    ::msg::CSReqSmeltItem* smeltitem_;
    ::msg::CSReqPVEUpTalentLevel* pveuptalentlevel_;
    ::msg::CSReqPVELuckyAward* luckyaward_;
    ::msg::CSReqApplyChannel* applychannel_;
    ::msg::CSReqTeamOP* teamop_;
    ::msg::CSReqOBTeamInfo* obteaminfo_;
    ::msg::CSReqReportHeadIconUrl* headiconurl_;
    ::msg::CSReqGetPvpServerGroup* getpvpservergroup_;
    ::msg::CSReqReportPvpInfo* reportpvpinfo_;
    ::msg::CSReqChoosePlayer* chooseplayer_;
    ::msg::CSReqPingTest* pingtest_;
    ::msg::CSReqReportRegionInfo* reportregioninfo_;
    ::msg::CSReqRecalledPlayer* recalledplaeyr_;
    ::msg::CSReqWebLogin* weblogin_;
    ::msg::CSReqInviteCodeReset* invitecodereset_;
    ::msg::CSReqRecallReward* recallreward_;
    ::msg::CSReqSwitchToCommonMatch* switchtocommonmatch_;
    ::msg::CSReqSwitchModeInTeam* switchmodeinteam_;
    ::msg::CSReqGetTNRoomState* gettnroomstate_;
    ::msg::CSReqWorkshopMatch* workshopmatch_;
    ::msg::CSReqBuyWorkshopTicket* buyworkshopticket_;
    ::msg::CSReqFavouriteWorkshopMap* favouriteworkshopmap_;
    ::msg::CSReqShortcutMapsOP* shortcutmapsop_;
    ::msg::CSReqPlayersTournamentInfo* playerstournamentinfo_;
    ::msg::CSReqScoreWorkshopMap* scoreworkshopmap_;
    ::msg::CSReqMapsVisitedByFriends* mapsvisitedbyfriends_;
    ::msg::CSReqVerifyRealName* verifyrealname_;
    ::msg::CSReqFakePay* fakepay_;
    ::msg::CSReqGuildCreate* guildcreate_;
    ::msg::CSReqGuildApply* guildapply_;
    ::msg::CSReqGuildHome* guildhome_;
    ::msg::CSReqGuildInfo* guildinfo_;
    ::msg::CSReqGuildApprove* guildapprove_;
    ::msg::CSReqGuildSetRole* guildrole_;
    ::msg::CSReqGuildModify* guildmodify_;
    ::msg::CSReqGuildKickoff* guildkickoff_;
    ::msg::CSReqGuildDismiss* guilddismiss_;
    ::msg::CSReqGuildExit* guildexit_;
    ::msg::CSReqGuildChat* guildchat_;
    ::msg::CSReqGuildList* guildlist_;
    ::msg::CSReqGuildRecommendPlayers* guildrecommendplayers_;
    ::msg::CSReqGuildInviteList* guildinvitelist_;
    ::msg::CSReqGuildInvite* guildinvite_;
    ::msg::CSReqGuildResign* guildresign_;
    ::msg::CSReqGuildRejectInvite* guildrejectinvite_;
    ::msg::CSReqGetVngCommentAward* getvngcommentaward_;
    ::msg::CSReqLevelupChest* levelupchest_;
    ::msg::CSReqWatchAd* watchad_;
    ::msg::CSReqQueryPsTournamentRoom* pstournamentroom_;
    ::msg::CSReqGetAdCumulateAward* getadcumulateaward_;
    ::msg::CSReqSetMessengerPos* setmessengerpos_;
    ::msg::CSReqUpdateAntiAddictionTime* updateantiaddictiontime_;
    ::msg::CSReqCancelReconnect* cancelreconnect_;
    ::msg::CSReqReconnect* reconnect_;
    ::msg::CSReqPassThrough* passthrough_;
    ::msg::CSReqVisitPlayer* visitplayer_;
    ::msg::CSReqLeaveGameEarly* leavegameearly_;
    ::msg::CSReqGDCommonBin* gdcommonbin_;
    ::msg::CSReqGDCommonBinData* gdbindata_;
    ::msg::CSReqAutoBattleOP* autobattleop_;
    ::msg::CSReqRestrictUser* restrictuser_;
    ::msg::CSReqEquipSelectRate* equipselectrate_;
    ::msg::CSReqReportAbsent* reportabsent_;
    ::msg::CSReqRecommendWeek* recommendweek_;
    ::msg::CSReqRecommendOfficial* recommendofficial_;
    ::msg::CSReqRecommendLatest* recommendlatest_;
    ::msg::CSReqRecommendHistory* recommendhistory_;
    ::msg::CSReqRecommendCollect* recommendcollect_;
    ::msg::CSReqRecommendSet* recommendset_;
    ::msg::CSReqRecommendGetCollection* recommendgetcollection_;
    ::msg::CSReqRecommendEquip* recommendequip_;
    ::msg::CSReqLoginCancel* logincancel_;
    ::msg::CSReqConvertDebris* convertdebris_;
    ::msg::CSReqUseProtectionCard* protectioncard_;
    ::msg::CSReqUsePassportCard* usepassportcard_;
    ::msg::CSReqSetMedal* setmedal_;
    ::msg::CSReqUnSetMedal* unsetmedal_;
    ::msg::CSReqPlayerMedals* playermedals_;
    ::msg::CSReqUpdateHotDot* updatehotdot_;
    ::msg::CSReqQueryHotDot* queryhotdot_;
    ::msg::CSReqSetCache* setcache_;
    ::msg::CSReqGetCache* getcache_;
    ::msg::CSReqBuyChallengeCount* buychallengecount_;
    ::msg::CSReqGetPveRank* getpverank_;
    ::msg::CSReqLogin* authaccount_;
    ::msg::CSReqUnbindAccount* unbindaccount_;
    ::msg::CSReqBagToItem* bagtoitem_;
    ::msg::CSReqIdentifyItem* identifyitem_;
    ::msg::CSReqInsetItemAffix* insetitemaffix_;
    ::msg::CSReqUnsetItemAffix* unsetitemaffix_;
    ::msg::CSReqSetDefaultAttributes* setdefaultattributes_;
    ::msg::CSReqCheckCancel* checkcancel_;
    ::msg::CSReqCancelAccount* cancelaccount_;
    ::msg::CSReqOAuthApp* oauthapp_;
    ::msg::CSReqGetSelfNumRankData* getselfnumrankdata_;
    ::msg::CSReqUpdateCardGroup* updatecardgroup_;
    ::msg::CSReqUpdateCardGroupName* updatecardgroupname_;
    ::msg::CSReqBuyPveBuff* buypvebuff_;
    ::msg::CSReqSetCardGroup* setcardgroup_;
    ::msg::CSReqBuyPveChessTemplate* buypvechesstemplate_;
    ::msg::CSReqPveUnlockChessTemplate* pveunlockchesstemplate_;
    ::msg::CSReqPveSetTeamDeBuff* pvesetteamdebuff_;
    ::msg::CSReqChoseCardGroup* chosecardgroup_;
    ::msg::CSReqRemoveOvertimeBuff* removeovertimebuff_;
    ::msg::CSRspUpdateNewCardGroupSign* updatenewcardgroupsign_;
    ::msg::CSReqTDGetOnHookAward* tdgetonhookaward_;
    ::msg::CsReqTDDraw* tddraw_;
    ::msg::CsReqTDBuyCard* tdbuycard_;
    ::msg::CSReqTDSetCardGroup* tdsetcardgroup_;
    ::msg::CSReqTDLevelUp* tdlevelup_;
    ::msg::CSReqTDEquip* tdequip_;
    ::msg::CSReqMentorUpdateSetting* mentorupdatesetting_;
    ::msg::CSReqMentorInvite* mentorinvite_;
    ::msg::CSReqMentorConfirmInvite* mentorconfirminvite_;
    ::msg::CSReqMentorRecommendList* mentorrecommendlist_;
    ::msg::CSReqMentorGetTaskAward* mentorgettaskaward_;
    ::msg::CSReqMentorGraduate* mentorgraduate_;
    ::msg::CSReqMentorRelieveRelation* mentorrelieverelation_;
    ::msg::CSReqGetMentorInfo* getmentorinfo_;
    ::msg::CSReqMentorGetInviteMsg* mentorgetinvitemsg_;
    ::msg::CSReqUpdateCardGroupBetter* updatecardgroupbetter_;
    ::msg::CSReqUpdateCardGroupSetting* updatecardgroupsetting_;
    ::msg::CSReqSetContent* setcontent_;
    ::msg::CSReqGetBalance* getbalance_;
    ::msg::CSReqRechargeBalance* rechargebalance_;
    ::msg::CSReqWithdrawBalance* withdrawbalance_;
    ::msg::CSReqPersonalRecommendMall* personalrecommendmall_;
    ::msg::CSReqGetMedalChestAward* getmedalchestaward_;
    ::msg::CSReqSetItemAutoUse* setitemautouse_;
    uint64_t seq_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_csprotocol_2eproto;
};
// -------------------------------------------------------------------

class CSRspBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspBody) */ {
 public:
  inline CSRspBody() : CSRspBody(nullptr) {}
  ~CSRspBody() override;
  explicit PROTOBUF_CONSTEXPR CSRspBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspBody(const CSRspBody& from);
  CSRspBody(CSRspBody&& from) noexcept
    : CSRspBody() {
    *this = ::std::move(from);
  }

  inline CSRspBody& operator=(const CSRspBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspBody& operator=(CSRspBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspBody* internal_default_instance() {
    return reinterpret_cast<const CSRspBody*>(
               &_CSRspBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CSRspBody& a, CSRspBody& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspBody& from) {
    CSRspBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspBody";
  }
  protected:
  explicit CSRspBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMsgFieldNumber = 3,
    kHeartFieldNumber = 4,
    kLoginFieldNumber = 5,
    kVersionCheckFieldNumber = 6,
    kResourceVersionCheckFieldNumber = 7,
    kApplyHallServerFieldNumber = 8,
    kGetNumRankFieldNumber = 9,
    kWorldChatFieldNumber = 10,
    kPlayersBaseInfoFieldNumber = 11,
    kPlayerDetailInfoFieldNumber = 12,
    kReadMailFieldNumber = 13,
    kGetMailAwardFieldNumber = 14,
    kBuyEggFieldNumber = 15,
    kUserNameSetFieldNumber = 16,
    kUserNameRandomFieldNumber = 17,
    kHeadPicSetFieldNumber = 18,
    kDressChessPlayerFieldNumber = 19,
    kDressSceneFieldNumber = 20,
    kPvpLoginFieldNumber = 21,
    kPvpEndFieldNumber = 24,
    kPlayerFinishFieldNumber = 25,
    kPlayerQuitFieldNumber = 26,
    kSellItemFieldNumber = 27,
    kGetEvalAwardFieldNumber = 28,
    kUseChessPlayerFieldNumber = 29,
    kGuidReportFieldNumber = 30,
    kGetCodeAwardFieldNumber = 31,
    kRoundReportFieldNumber = 32,
    kLoadingProgressFieldNumber = 33,
    kPvpChatFieldNumber = 34,
    kChessCombineFieldNumber = 35,
    kExposeFieldNumber = 36,
    kApplyOrderIdFieldNumber = 37,
    kReportOrderInfoFieldNumber = 38,
    kSetItemFieldNumber = 39,
    kUnsetItemFieldNumber = 40,
    kRandomItemFieldNumber = 41,
    kChatFieldNumber = 42,
    kSetChessPlayerFieldNumber = 43,
    kUnsetChessPlayerFieldNumber = 44,
    kGetFansListFieldNumber = 45,
    kFollowPlayerFieldNumber = 46,
    kUnfollowPlayerFieldNumber = 47,
    kPlayersStatusInfoFieldNumber = 48,
    kInviteJoinTeamFieldNumber = 49,
    kJoinTeamFieldNumber = 50,
    kReportPayResponseFieldNumber = 51,
    kRejectJoinTeamFieldNumber = 52,
    kShieldChatFieldNumber = 53,
    kBuyPassportLevelFieldNumber = 54,
    kUpgradePassportFieldNumber = 55,
    kGetPassportLevelAwardFieldNumber = 56,
    kGetPassportTaskAwardFieldNumber = 57,
    kTelBookFieldNumber = 58,
    kActivatePassportFieldNumber = 59,
    kRankSeasonEvalFieldNumber = 60,
    kBindAccountFieldNumber = 61,
    kIncAdsShowCountFieldNumber = 62,
    kUseBonusCardFieldNumber = 63,
    kGetSeasonAwardFieldNumber = 64,
    kGetAlphaActivityAwardFieldNumber = 65,
    kGetLanguageDataFieldNumber = 66,
    kGetActivityAwardFieldNumber = 67,
    kGetActivityDataFieldNumber = 68,
    kSendSmsFieldNumber = 69,
    kGetMeleeAwardFieldNumber = 70,
    kAddAiToTeamFieldNumber = 71,
    kShareFieldNumber = 72,
    kSkipInterfaceFieldNumber = 73,
    kTeamGameFieldNumber = 74,
    kSetTeamModeFieldNumber = 75,
    kHistoryPvpShowPermissionFieldNumber = 76,
    kSearchTeamFieldNumber = 77,
    kApplyChatFieldNumber = 78,
    kChatLoginFieldNumber = 79,
    kProbeNetDelayFieldNumber = 80,
    kGetEggsFieldNumber = 81,
    kBuyGoodsFieldNumber = 82,
    kExchangePassportGoodsFieldNumber = 83,
    kUsePassportTaskCardFieldNumber = 84,
    kOpenRandChestFieldNumber = 85,
    kEggLotteryFieldNumber = 86,
    kQueryDiamondBalanceFieldNumber = 87,
    kUseItemFieldNumber = 88,
    kUseExperienceCardFieldNumber = 89,
    kRandTargetItemFieldNumber = 90,
    kAddBlacklistFieldNumber = 91,
    kRemoveBlacklistFieldNumber = 92,
    kReportPlayerBirthFieldNumber = 93,
    kReportInfoInputFieldNumber = 94,
    kSendVerificationCodeFieldNumber = 95,
    kBindPhoneNumberFieldNumber = 96,
    kWorldInviteFieldNumber = 97,
    kRemoveExpireItemFieldNumber = 98,
    kGetMallGoodsFieldNumber = 99,
    kBuyMallGoodsFieldNumber = 100,
    kBindSharingCodeFieldNumber = 101,
    kWXBlessBagFieldNumber = 102,
    kUpdateFriendsInGameFieldNumber = 103,
    kShareRewardFieldNumber = 104,
    kAllFightInfoFieldNumber = 105,
    kGetOldPlayerFieldNumber = 106,
    kBindOldPlayerFieldNumber = 107,
    kSendVerificationCodeWithCheckRedisFieldNumber = 108,
    kReportSettingFieldNumber = 109,
    kAntiDataFieldNumber = 110,
    kTlogDataFieldNumber = 111,
    kDaySignFieldNumber = 112,
    kDayFitAvoidFieldNumber = 113,
    kShareCountAwardFieldNumber = 114,
    kRealationStarFieldNumber = 115,
    kGetRealationStarInviteSuccFieldNumber = 116,
    kGetRealationStarFieldNumber = 117,
    kRspActRecordFieldNumber = 118,
    kJoinVoiceTeamFieldNumber = 119,
    kJoinVoicePvpFieldNumber = 120,
    kJoinVoiceCampFieldNumber = 121,
    kUserCountrySetFieldNumber = 122,
    kObserveFieldNumber = 123,
    kGetRecommendPvpFieldNumber = 124,
    kObserveLoginFieldNumber = 125,
    kQuitObserveFieldNumber = 126,
    kGetObserveInfoFieldNumber = 127,
    kFreeFlowFieldNumber = 128,
    kSetPushTokenFieldNumber = 129,
    kTlogEventFieldNumber = 130,
    kWxVVipAwardFieldNumber = 131,
    kRelationStarWXFieldNumber = 132,
    kSendWxRedPacketFieldNumber = 133,
    kRecvWxRedPacketFieldNumber = 134,
    kWxRedPktLikeFieldNumber = 135,
    kWxRedPktRankFieldNumber = 136,
    kSetObservePrivilegeFieldNumber = 137,
    kPresetFastChatFieldNumber = 138,
    kChangeSlotTeamFieldNumber = 139,
    kChangeSubModeTeamFieldNumber = 140,
    kConfirmChangeSlotTeamFieldNumber = 141,
    kPvpRoundEndFieldNumber = 142,
    kPvpFieldNumber = 143,
    kTeamReadyFieldNumber = 144,
    kBindOldBusinessPlayerFieldNumber = 145,
    kTranslateFieldNumber = 146,
    kSubmitQuestionnaireFieldNumber = 147,
    kCancelChangeSlotFieldNumber = 148,
    kSetChessSkinFieldNumber = 149,
    kUnsetChessSkinFieldNumber = 150,
    kComposeFieldNumber = 151,
    kVideoFieldNumber = 152,
    kOffHelpReddotFieldNumber = 153,
    kChangeLanguageFieldNumber = 154,
    kSetProvinceFieldNumber = 155,
    kLongyuanVoiceFieldNumber = 156,
    kEnrollTournamentFieldNumber = 157,
    kJoinTournamentRoomFieldNumber = 158,
    kTournamentPointAwardFieldNumber = 159,
    kGetEnrollPlayersFieldNumber = 160,
    kDealWebMailFieldNumber = 161,
    kChallengeAgainFieldNumber = 162,
    kHistoryChatFieldNumber = 163,
    kSetFriendInvisibleFieldNumber = 164,
    kGetObserveAwardFieldNumber = 165,
    kInviteObserveFieldNumber = 166,
    kRejectObserveFieldNumber = 167,
    kGetTxPlayerFieldNumber = 168,
    kGetThirdPvpInfoFieldNumber = 169,
    kMarkPlayerGuideFieldNumber = 170,
    kChessSkinClickedFieldNumber = 171,
    kQueryPs4EntitlementsFieldNumber = 172,
    kActDaySignFieldNumber = 173,
    kHaveThirdPvpInfoFieldNumber = 174,
    kActivityMallFieldNumber = 175,
    kPsOnlyFieldNumber = 176,
    kChangeChannelTypeFieldNumber = 177,
    kCustomCardOptFieldNumber = 178,
    kChampionHistoryFieldNumber = 179,
    kTournamentLastTopRankFieldNumber = 180,
    kBigWinnerDailyAwardFieldNumber = 181,
    kBigWinnerScoreHistoryFieldNumber = 182,
    kSmeltItemFieldNumber = 183,
    kPVEUpTalentLevelFieldNumber = 184,
    kLuckyAwardFieldNumber = 185,
    kApplyChannelFieldNumber = 186,
    kOBTeamInfoFieldNumber = 300,
    kGetPvpServerGroupFieldNumber = 303,
    kReportPvpInfoFieldNumber = 304,
    kChoosePlayerFieldNumber = 305,
    kPingTestFieldNumber = 306,
    kReportRegionInfoFieldNumber = 307,
    kRecalledPlaeyrFieldNumber = 308,
    kWebLoginFieldNumber = 309,
    kInviteCodeResetFieldNumber = 310,
    kRecallRewardFieldNumber = 311,
    kSwitchToCommonMatchFieldNumber = 312,
    kSwitchModeInTeamFieldNumber = 320,
    kGetTNRoomStateFieldNumber = 321,
    kWorkshopMatchFieldNumber = 330,
    kBuyWorkshopTicketFieldNumber = 331,
    kFavouriteWorkshopMapFieldNumber = 332,
    kShortcutMapsOPFieldNumber = 333,
    kPlayersTournamentInfoFieldNumber = 334,
    kScoreWorkshopMapFieldNumber = 335,
    kMapsVisitedByFriendsFieldNumber = 336,
    kVerifyRealNameFieldNumber = 350,
    kFakePayFieldNumber = 351,
    kGuildCreateFieldNumber = 360,
    kGuildApplyFieldNumber = 361,
    kGuildHomeFieldNumber = 362,
    kGuildInfoFieldNumber = 364,
    kGuildApproveFieldNumber = 365,
    kGuildRoleFieldNumber = 366,
    kGuildModifyFieldNumber = 367,
    kGuildKickoffFieldNumber = 368,
    kGuildDismissFieldNumber = 369,
    kGuildExitFieldNumber = 370,
    kGuildChatFieldNumber = 371,
    kGuildListFieldNumber = 372,
    kGuildRecommendPlayersFieldNumber = 373,
    kGuildInviteListFieldNumber = 374,
    kGuildInviteFieldNumber = 375,
    kGuildRejectInviteFieldNumber = 377,
    kGetVngCommentAwardFieldNumber = 390,
    kLevelupChestFieldNumber = 391,
    kWatchAdFieldNumber = 392,
    kPsTournamentRoomFieldNumber = 393,
    kGetAdCumulateAwardFieldNumber = 394,
    kSetMessengerPosFieldNumber = 534,
    kAntiAddictionTimeFieldNumber = 554,
    kCancelReconnectFieldNumber = 555,
    kReconnectFieldNumber = 557,
    kPassThroughFieldNumber = 563,
    kVisitPlayerFieldNumber = 564,
    kLeaveGameEarlyFieldNumber = 565,
    kGDCommonBinFieldNumber = 566,
    kGDBinDataFieldNumber = 567,
    kBattleCampResultFieldNumber = 568,
    kAutoBattleOPFieldNumber = 569,
    kRestrictUserFieldNumber = 570,
    kEquipSelectRateFieldNumber = 571,
    kReportAbsentFieldNumber = 572,
    kRecommendWeekFieldNumber = 600,
    kRecommendOfficialFieldNumber = 601,
    kRecommendLatestFieldNumber = 602,
    kRecommendHistoryFieldNumber = 603,
    kRecommendCollectFieldNumber = 604,
    kRecommendSetFieldNumber = 605,
    kRecommendGetCollectionFieldNumber = 606,
    kRecommendEquipFieldNumber = 607,
    kLoginCancelFieldNumber = 608,
    kConvertDebrisFieldNumber = 609,
    kProtectionCardFieldNumber = 610,
    kUsePassportCardFieldNumber = 611,
    kSetMedalFieldNumber = 612,
    kUnSetMedalFieldNumber = 613,
    kPlayerMedalsFieldNumber = 614,
    kUpdateHotDotFieldNumber = 615,
    kQueryHotDotFieldNumber = 616,
    kSetCacheFieldNumber = 617,
    kGetCacheFieldNumber = 618,
    kBuyChallengeCountFieldNumber = 619,
    kGetPveRankFieldNumber = 620,
    kAuthAccountFieldNumber = 621,
    kUnbindAccountFieldNumber = 622,
    kBagToItemFieldNumber = 623,
    kIdentifyItemFieldNumber = 624,
    kInsetItemAffixFieldNumber = 625,
    kUnsetItemAffixFieldNumber = 626,
    kSetDefaultAttributesFieldNumber = 627,
    kCheckCancelFieldNumber = 628,
    kCancelAccountFieldNumber = 629,
    kOAuthAppFieldNumber = 630,
    kSelfNumRankDataFieldNumber = 631,
    kUpdateCardGroupFieldNumber = 632,
    kUpdateCardGroupNameFieldNumber = 633,
    kBuyPveBuffFieldNumber = 634,
    kSetCardGroupFieldNumber = 635,
    kBuyPveChessTemplateFieldNumber = 636,
    kPveUnlockChessTemplateFieldNumber = 637,
    kPveSetTeamDeBuffFieldNumber = 638,
    kChoseCardGroupFieldNumber = 639,
    kRemoveOvertimeBuffFieldNumber = 640,
    kUpdateNewCardGroupSignFieldNumber = 641,
    kTDGetOnHookAwardFieldNumber = 644,
    kTDDrawFieldNumber = 645,
    kTDBuyCardFieldNumber = 646,
    kTDSetCardGroupFieldNumber = 647,
    kTDLevelUpFieldNumber = 648,
    kTDEquipFieldNumber = 649,
    kMentorUpdateSettingFieldNumber = 650,
    kMentorInviteFieldNumber = 651,
    kMentorConfirmInviteFieldNumber = 652,
    kMentorRecommendListFieldNumber = 653,
    kMentorGetTaskAwardFieldNumber = 654,
    kMentorGraduateFieldNumber = 655,
    kMentorRelieveRelationFieldNumber = 656,
    kGetMentorInfoFieldNumber = 657,
    kMentorGetInviteMsgFieldNumber = 658,
    kTeamMsgFieldNumber = 659,
    kChatMsgFieldNumber = 660,
    kChannelChatFieldNumber = 661,
    kUpdateCardGroupBetterFieldNumber = 662,
    kUpdateCardGroupSettingFieldNumber = 663,
    kSetAuctionNameFieldNumber = 664,
    kSetAuctionRemarkFieldNumber = 665,
    kGetBalanceFieldNumber = 666,
    kRechargeBalanceFieldNumber = 667,
    kWithdrawBalanceFieldNumber = 668,
    kPersonalRecommendMallFieldNumber = 669,
    kGetMedalChestAwardFieldNumber = 670,
    kSetItemAutoUseFieldNumber = 671,
    kSeqFieldNumber = 1,
    kErrCodeFieldNumber = 2,
  };
  // string ErrMsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errmsg();
  PROTOBUF_NODISCARD std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // .msg.CSRspHeart Heart = 4;
  bool has_heart() const;
  private:
  bool _internal_has_heart() const;
  public:
  void clear_heart();
  const ::msg::CSRspHeart& heart() const;
  PROTOBUF_NODISCARD ::msg::CSRspHeart* release_heart();
  ::msg::CSRspHeart* mutable_heart();
  void set_allocated_heart(::msg::CSRspHeart* heart);
  private:
  const ::msg::CSRspHeart& _internal_heart() const;
  ::msg::CSRspHeart* _internal_mutable_heart();
  public:
  void unsafe_arena_set_allocated_heart(
      ::msg::CSRspHeart* heart);
  ::msg::CSRspHeart* unsafe_arena_release_heart();

  // .msg.CSRspLogin Login = 5;
  bool has_login() const;
  private:
  bool _internal_has_login() const;
  public:
  void clear_login();
  const ::msg::CSRspLogin& login() const;
  PROTOBUF_NODISCARD ::msg::CSRspLogin* release_login();
  ::msg::CSRspLogin* mutable_login();
  void set_allocated_login(::msg::CSRspLogin* login);
  private:
  const ::msg::CSRspLogin& _internal_login() const;
  ::msg::CSRspLogin* _internal_mutable_login();
  public:
  void unsafe_arena_set_allocated_login(
      ::msg::CSRspLogin* login);
  ::msg::CSRspLogin* unsafe_arena_release_login();

  // .msg.CSRspVersionCheck VersionCheck = 6;
  bool has_versioncheck() const;
  private:
  bool _internal_has_versioncheck() const;
  public:
  void clear_versioncheck();
  const ::msg::CSRspVersionCheck& versioncheck() const;
  PROTOBUF_NODISCARD ::msg::CSRspVersionCheck* release_versioncheck();
  ::msg::CSRspVersionCheck* mutable_versioncheck();
  void set_allocated_versioncheck(::msg::CSRspVersionCheck* versioncheck);
  private:
  const ::msg::CSRspVersionCheck& _internal_versioncheck() const;
  ::msg::CSRspVersionCheck* _internal_mutable_versioncheck();
  public:
  void unsafe_arena_set_allocated_versioncheck(
      ::msg::CSRspVersionCheck* versioncheck);
  ::msg::CSRspVersionCheck* unsafe_arena_release_versioncheck();

  // .msg.CSRspResourceVersionCheck ResourceVersionCheck = 7;
  bool has_resourceversioncheck() const;
  private:
  bool _internal_has_resourceversioncheck() const;
  public:
  void clear_resourceversioncheck();
  const ::msg::CSRspResourceVersionCheck& resourceversioncheck() const;
  PROTOBUF_NODISCARD ::msg::CSRspResourceVersionCheck* release_resourceversioncheck();
  ::msg::CSRspResourceVersionCheck* mutable_resourceversioncheck();
  void set_allocated_resourceversioncheck(::msg::CSRspResourceVersionCheck* resourceversioncheck);
  private:
  const ::msg::CSRspResourceVersionCheck& _internal_resourceversioncheck() const;
  ::msg::CSRspResourceVersionCheck* _internal_mutable_resourceversioncheck();
  public:
  void unsafe_arena_set_allocated_resourceversioncheck(
      ::msg::CSRspResourceVersionCheck* resourceversioncheck);
  ::msg::CSRspResourceVersionCheck* unsafe_arena_release_resourceversioncheck();

  // .msg.CSRspApplyHallServer ApplyHallServer = 8;
  bool has_applyhallserver() const;
  private:
  bool _internal_has_applyhallserver() const;
  public:
  void clear_applyhallserver();
  const ::msg::CSRspApplyHallServer& applyhallserver() const;
  PROTOBUF_NODISCARD ::msg::CSRspApplyHallServer* release_applyhallserver();
  ::msg::CSRspApplyHallServer* mutable_applyhallserver();
  void set_allocated_applyhallserver(::msg::CSRspApplyHallServer* applyhallserver);
  private:
  const ::msg::CSRspApplyHallServer& _internal_applyhallserver() const;
  ::msg::CSRspApplyHallServer* _internal_mutable_applyhallserver();
  public:
  void unsafe_arena_set_allocated_applyhallserver(
      ::msg::CSRspApplyHallServer* applyhallserver);
  ::msg::CSRspApplyHallServer* unsafe_arena_release_applyhallserver();

  // .msg.CSRspGetNumRank GetNumRank = 9;
  bool has_getnumrank() const;
  private:
  bool _internal_has_getnumrank() const;
  public:
  void clear_getnumrank();
  const ::msg::CSRspGetNumRank& getnumrank() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetNumRank* release_getnumrank();
  ::msg::CSRspGetNumRank* mutable_getnumrank();
  void set_allocated_getnumrank(::msg::CSRspGetNumRank* getnumrank);
  private:
  const ::msg::CSRspGetNumRank& _internal_getnumrank() const;
  ::msg::CSRspGetNumRank* _internal_mutable_getnumrank();
  public:
  void unsafe_arena_set_allocated_getnumrank(
      ::msg::CSRspGetNumRank* getnumrank);
  ::msg::CSRspGetNumRank* unsafe_arena_release_getnumrank();

  // .msg.CSRspWorldChat WorldChat = 10;
  bool has_worldchat() const;
  private:
  bool _internal_has_worldchat() const;
  public:
  void clear_worldchat();
  const ::msg::CSRspWorldChat& worldchat() const;
  PROTOBUF_NODISCARD ::msg::CSRspWorldChat* release_worldchat();
  ::msg::CSRspWorldChat* mutable_worldchat();
  void set_allocated_worldchat(::msg::CSRspWorldChat* worldchat);
  private:
  const ::msg::CSRspWorldChat& _internal_worldchat() const;
  ::msg::CSRspWorldChat* _internal_mutable_worldchat();
  public:
  void unsafe_arena_set_allocated_worldchat(
      ::msg::CSRspWorldChat* worldchat);
  ::msg::CSRspWorldChat* unsafe_arena_release_worldchat();

  // .msg.CSRspPlayersBaseInfo PlayersBaseInfo = 11;
  bool has_playersbaseinfo() const;
  private:
  bool _internal_has_playersbaseinfo() const;
  public:
  void clear_playersbaseinfo();
  const ::msg::CSRspPlayersBaseInfo& playersbaseinfo() const;
  PROTOBUF_NODISCARD ::msg::CSRspPlayersBaseInfo* release_playersbaseinfo();
  ::msg::CSRspPlayersBaseInfo* mutable_playersbaseinfo();
  void set_allocated_playersbaseinfo(::msg::CSRspPlayersBaseInfo* playersbaseinfo);
  private:
  const ::msg::CSRspPlayersBaseInfo& _internal_playersbaseinfo() const;
  ::msg::CSRspPlayersBaseInfo* _internal_mutable_playersbaseinfo();
  public:
  void unsafe_arena_set_allocated_playersbaseinfo(
      ::msg::CSRspPlayersBaseInfo* playersbaseinfo);
  ::msg::CSRspPlayersBaseInfo* unsafe_arena_release_playersbaseinfo();

  // .msg.CSRspPlayerDetailInfo PlayerDetailInfo = 12;
  bool has_playerdetailinfo() const;
  private:
  bool _internal_has_playerdetailinfo() const;
  public:
  void clear_playerdetailinfo();
  const ::msg::CSRspPlayerDetailInfo& playerdetailinfo() const;
  PROTOBUF_NODISCARD ::msg::CSRspPlayerDetailInfo* release_playerdetailinfo();
  ::msg::CSRspPlayerDetailInfo* mutable_playerdetailinfo();
  void set_allocated_playerdetailinfo(::msg::CSRspPlayerDetailInfo* playerdetailinfo);
  private:
  const ::msg::CSRspPlayerDetailInfo& _internal_playerdetailinfo() const;
  ::msg::CSRspPlayerDetailInfo* _internal_mutable_playerdetailinfo();
  public:
  void unsafe_arena_set_allocated_playerdetailinfo(
      ::msg::CSRspPlayerDetailInfo* playerdetailinfo);
  ::msg::CSRspPlayerDetailInfo* unsafe_arena_release_playerdetailinfo();

  // .msg.CSRspReadMail ReadMail = 13;
  bool has_readmail() const;
  private:
  bool _internal_has_readmail() const;
  public:
  void clear_readmail();
  const ::msg::CSRspReadMail& readmail() const;
  PROTOBUF_NODISCARD ::msg::CSRspReadMail* release_readmail();
  ::msg::CSRspReadMail* mutable_readmail();
  void set_allocated_readmail(::msg::CSRspReadMail* readmail);
  private:
  const ::msg::CSRspReadMail& _internal_readmail() const;
  ::msg::CSRspReadMail* _internal_mutable_readmail();
  public:
  void unsafe_arena_set_allocated_readmail(
      ::msg::CSRspReadMail* readmail);
  ::msg::CSRspReadMail* unsafe_arena_release_readmail();

  // .msg.CSRspGetMailAward GetMailAward = 14;
  bool has_getmailaward() const;
  private:
  bool _internal_has_getmailaward() const;
  public:
  void clear_getmailaward();
  const ::msg::CSRspGetMailAward& getmailaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetMailAward* release_getmailaward();
  ::msg::CSRspGetMailAward* mutable_getmailaward();
  void set_allocated_getmailaward(::msg::CSRspGetMailAward* getmailaward);
  private:
  const ::msg::CSRspGetMailAward& _internal_getmailaward() const;
  ::msg::CSRspGetMailAward* _internal_mutable_getmailaward();
  public:
  void unsafe_arena_set_allocated_getmailaward(
      ::msg::CSRspGetMailAward* getmailaward);
  ::msg::CSRspGetMailAward* unsafe_arena_release_getmailaward();

  // .msg.CSRspBuyEgg BuyEgg = 15;
  bool has_buyegg() const;
  private:
  bool _internal_has_buyegg() const;
  public:
  void clear_buyegg();
  const ::msg::CSRspBuyEgg& buyegg() const;
  PROTOBUF_NODISCARD ::msg::CSRspBuyEgg* release_buyegg();
  ::msg::CSRspBuyEgg* mutable_buyegg();
  void set_allocated_buyegg(::msg::CSRspBuyEgg* buyegg);
  private:
  const ::msg::CSRspBuyEgg& _internal_buyegg() const;
  ::msg::CSRspBuyEgg* _internal_mutable_buyegg();
  public:
  void unsafe_arena_set_allocated_buyegg(
      ::msg::CSRspBuyEgg* buyegg);
  ::msg::CSRspBuyEgg* unsafe_arena_release_buyegg();

  // .msg.CSRspUserNameSet UserNameSet = 16;
  bool has_usernameset() const;
  private:
  bool _internal_has_usernameset() const;
  public:
  void clear_usernameset();
  const ::msg::CSRspUserNameSet& usernameset() const;
  PROTOBUF_NODISCARD ::msg::CSRspUserNameSet* release_usernameset();
  ::msg::CSRspUserNameSet* mutable_usernameset();
  void set_allocated_usernameset(::msg::CSRspUserNameSet* usernameset);
  private:
  const ::msg::CSRspUserNameSet& _internal_usernameset() const;
  ::msg::CSRspUserNameSet* _internal_mutable_usernameset();
  public:
  void unsafe_arena_set_allocated_usernameset(
      ::msg::CSRspUserNameSet* usernameset);
  ::msg::CSRspUserNameSet* unsafe_arena_release_usernameset();

  // .msg.CSRspUserNameRandom UserNameRandom = 17;
  bool has_usernamerandom() const;
  private:
  bool _internal_has_usernamerandom() const;
  public:
  void clear_usernamerandom();
  const ::msg::CSRspUserNameRandom& usernamerandom() const;
  PROTOBUF_NODISCARD ::msg::CSRspUserNameRandom* release_usernamerandom();
  ::msg::CSRspUserNameRandom* mutable_usernamerandom();
  void set_allocated_usernamerandom(::msg::CSRspUserNameRandom* usernamerandom);
  private:
  const ::msg::CSRspUserNameRandom& _internal_usernamerandom() const;
  ::msg::CSRspUserNameRandom* _internal_mutable_usernamerandom();
  public:
  void unsafe_arena_set_allocated_usernamerandom(
      ::msg::CSRspUserNameRandom* usernamerandom);
  ::msg::CSRspUserNameRandom* unsafe_arena_release_usernamerandom();

  // .msg.CSRspHeadPicSet HeadPicSet = 18;
  bool has_headpicset() const;
  private:
  bool _internal_has_headpicset() const;
  public:
  void clear_headpicset();
  const ::msg::CSRspHeadPicSet& headpicset() const;
  PROTOBUF_NODISCARD ::msg::CSRspHeadPicSet* release_headpicset();
  ::msg::CSRspHeadPicSet* mutable_headpicset();
  void set_allocated_headpicset(::msg::CSRspHeadPicSet* headpicset);
  private:
  const ::msg::CSRspHeadPicSet& _internal_headpicset() const;
  ::msg::CSRspHeadPicSet* _internal_mutable_headpicset();
  public:
  void unsafe_arena_set_allocated_headpicset(
      ::msg::CSRspHeadPicSet* headpicset);
  ::msg::CSRspHeadPicSet* unsafe_arena_release_headpicset();

  // .msg.CSRspDressChessPlayer DressChessPlayer = 19;
  bool has_dresschessplayer() const;
  private:
  bool _internal_has_dresschessplayer() const;
  public:
  void clear_dresschessplayer();
  const ::msg::CSRspDressChessPlayer& dresschessplayer() const;
  PROTOBUF_NODISCARD ::msg::CSRspDressChessPlayer* release_dresschessplayer();
  ::msg::CSRspDressChessPlayer* mutable_dresschessplayer();
  void set_allocated_dresschessplayer(::msg::CSRspDressChessPlayer* dresschessplayer);
  private:
  const ::msg::CSRspDressChessPlayer& _internal_dresschessplayer() const;
  ::msg::CSRspDressChessPlayer* _internal_mutable_dresschessplayer();
  public:
  void unsafe_arena_set_allocated_dresschessplayer(
      ::msg::CSRspDressChessPlayer* dresschessplayer);
  ::msg::CSRspDressChessPlayer* unsafe_arena_release_dresschessplayer();

  // .msg.CSRspDressScene DressScene = 20;
  bool has_dressscene() const;
  private:
  bool _internal_has_dressscene() const;
  public:
  void clear_dressscene();
  const ::msg::CSRspDressScene& dressscene() const;
  PROTOBUF_NODISCARD ::msg::CSRspDressScene* release_dressscene();
  ::msg::CSRspDressScene* mutable_dressscene();
  void set_allocated_dressscene(::msg::CSRspDressScene* dressscene);
  private:
  const ::msg::CSRspDressScene& _internal_dressscene() const;
  ::msg::CSRspDressScene* _internal_mutable_dressscene();
  public:
  void unsafe_arena_set_allocated_dressscene(
      ::msg::CSRspDressScene* dressscene);
  ::msg::CSRspDressScene* unsafe_arena_release_dressscene();

  // .msg.CSRspPvpLogin PvpLogin = 21;
  bool has_pvplogin() const;
  private:
  bool _internal_has_pvplogin() const;
  public:
  void clear_pvplogin();
  const ::msg::CSRspPvpLogin& pvplogin() const;
  PROTOBUF_NODISCARD ::msg::CSRspPvpLogin* release_pvplogin();
  ::msg::CSRspPvpLogin* mutable_pvplogin();
  void set_allocated_pvplogin(::msg::CSRspPvpLogin* pvplogin);
  private:
  const ::msg::CSRspPvpLogin& _internal_pvplogin() const;
  ::msg::CSRspPvpLogin* _internal_mutable_pvplogin();
  public:
  void unsafe_arena_set_allocated_pvplogin(
      ::msg::CSRspPvpLogin* pvplogin);
  ::msg::CSRspPvpLogin* unsafe_arena_release_pvplogin();

  // .msg.CSRspPvpEnd PvpEnd = 24;
  bool has_pvpend() const;
  private:
  bool _internal_has_pvpend() const;
  public:
  void clear_pvpend();
  const ::msg::CSRspPvpEnd& pvpend() const;
  PROTOBUF_NODISCARD ::msg::CSRspPvpEnd* release_pvpend();
  ::msg::CSRspPvpEnd* mutable_pvpend();
  void set_allocated_pvpend(::msg::CSRspPvpEnd* pvpend);
  private:
  const ::msg::CSRspPvpEnd& _internal_pvpend() const;
  ::msg::CSRspPvpEnd* _internal_mutable_pvpend();
  public:
  void unsafe_arena_set_allocated_pvpend(
      ::msg::CSRspPvpEnd* pvpend);
  ::msg::CSRspPvpEnd* unsafe_arena_release_pvpend();

  // .msg.CSRspPlayerFinish PlayerFinish = 25;
  bool has_playerfinish() const;
  private:
  bool _internal_has_playerfinish() const;
  public:
  void clear_playerfinish();
  const ::msg::CSRspPlayerFinish& playerfinish() const;
  PROTOBUF_NODISCARD ::msg::CSRspPlayerFinish* release_playerfinish();
  ::msg::CSRspPlayerFinish* mutable_playerfinish();
  void set_allocated_playerfinish(::msg::CSRspPlayerFinish* playerfinish);
  private:
  const ::msg::CSRspPlayerFinish& _internal_playerfinish() const;
  ::msg::CSRspPlayerFinish* _internal_mutable_playerfinish();
  public:
  void unsafe_arena_set_allocated_playerfinish(
      ::msg::CSRspPlayerFinish* playerfinish);
  ::msg::CSRspPlayerFinish* unsafe_arena_release_playerfinish();

  // .msg.CSRspPlayerQuit PlayerQuit = 26;
  bool has_playerquit() const;
  private:
  bool _internal_has_playerquit() const;
  public:
  void clear_playerquit();
  const ::msg::CSRspPlayerQuit& playerquit() const;
  PROTOBUF_NODISCARD ::msg::CSRspPlayerQuit* release_playerquit();
  ::msg::CSRspPlayerQuit* mutable_playerquit();
  void set_allocated_playerquit(::msg::CSRspPlayerQuit* playerquit);
  private:
  const ::msg::CSRspPlayerQuit& _internal_playerquit() const;
  ::msg::CSRspPlayerQuit* _internal_mutable_playerquit();
  public:
  void unsafe_arena_set_allocated_playerquit(
      ::msg::CSRspPlayerQuit* playerquit);
  ::msg::CSRspPlayerQuit* unsafe_arena_release_playerquit();

  // .msg.CSRspSellItem SellItem = 27;
  bool has_sellitem() const;
  private:
  bool _internal_has_sellitem() const;
  public:
  void clear_sellitem();
  const ::msg::CSRspSellItem& sellitem() const;
  PROTOBUF_NODISCARD ::msg::CSRspSellItem* release_sellitem();
  ::msg::CSRspSellItem* mutable_sellitem();
  void set_allocated_sellitem(::msg::CSRspSellItem* sellitem);
  private:
  const ::msg::CSRspSellItem& _internal_sellitem() const;
  ::msg::CSRspSellItem* _internal_mutable_sellitem();
  public:
  void unsafe_arena_set_allocated_sellitem(
      ::msg::CSRspSellItem* sellitem);
  ::msg::CSRspSellItem* unsafe_arena_release_sellitem();

  // .msg.CSRspGetEvalAward GetEvalAward = 28;
  bool has_getevalaward() const;
  private:
  bool _internal_has_getevalaward() const;
  public:
  void clear_getevalaward();
  const ::msg::CSRspGetEvalAward& getevalaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetEvalAward* release_getevalaward();
  ::msg::CSRspGetEvalAward* mutable_getevalaward();
  void set_allocated_getevalaward(::msg::CSRspGetEvalAward* getevalaward);
  private:
  const ::msg::CSRspGetEvalAward& _internal_getevalaward() const;
  ::msg::CSRspGetEvalAward* _internal_mutable_getevalaward();
  public:
  void unsafe_arena_set_allocated_getevalaward(
      ::msg::CSRspGetEvalAward* getevalaward);
  ::msg::CSRspGetEvalAward* unsafe_arena_release_getevalaward();

  // .msg.CSRspUseChessPlayer UseChessPlayer = 29;
  bool has_usechessplayer() const;
  private:
  bool _internal_has_usechessplayer() const;
  public:
  void clear_usechessplayer();
  const ::msg::CSRspUseChessPlayer& usechessplayer() const;
  PROTOBUF_NODISCARD ::msg::CSRspUseChessPlayer* release_usechessplayer();
  ::msg::CSRspUseChessPlayer* mutable_usechessplayer();
  void set_allocated_usechessplayer(::msg::CSRspUseChessPlayer* usechessplayer);
  private:
  const ::msg::CSRspUseChessPlayer& _internal_usechessplayer() const;
  ::msg::CSRspUseChessPlayer* _internal_mutable_usechessplayer();
  public:
  void unsafe_arena_set_allocated_usechessplayer(
      ::msg::CSRspUseChessPlayer* usechessplayer);
  ::msg::CSRspUseChessPlayer* unsafe_arena_release_usechessplayer();

  // .msg.CSRspGuidReport GuidReport = 30;
  bool has_guidreport() const;
  private:
  bool _internal_has_guidreport() const;
  public:
  void clear_guidreport();
  const ::msg::CSRspGuidReport& guidreport() const;
  PROTOBUF_NODISCARD ::msg::CSRspGuidReport* release_guidreport();
  ::msg::CSRspGuidReport* mutable_guidreport();
  void set_allocated_guidreport(::msg::CSRspGuidReport* guidreport);
  private:
  const ::msg::CSRspGuidReport& _internal_guidreport() const;
  ::msg::CSRspGuidReport* _internal_mutable_guidreport();
  public:
  void unsafe_arena_set_allocated_guidreport(
      ::msg::CSRspGuidReport* guidreport);
  ::msg::CSRspGuidReport* unsafe_arena_release_guidreport();

  // .msg.CSRspGetCodeAward GetCodeAward = 31;
  bool has_getcodeaward() const;
  private:
  bool _internal_has_getcodeaward() const;
  public:
  void clear_getcodeaward();
  const ::msg::CSRspGetCodeAward& getcodeaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetCodeAward* release_getcodeaward();
  ::msg::CSRspGetCodeAward* mutable_getcodeaward();
  void set_allocated_getcodeaward(::msg::CSRspGetCodeAward* getcodeaward);
  private:
  const ::msg::CSRspGetCodeAward& _internal_getcodeaward() const;
  ::msg::CSRspGetCodeAward* _internal_mutable_getcodeaward();
  public:
  void unsafe_arena_set_allocated_getcodeaward(
      ::msg::CSRspGetCodeAward* getcodeaward);
  ::msg::CSRspGetCodeAward* unsafe_arena_release_getcodeaward();

  // .msg.CSRspRoundReport RoundReport = 32;
  bool has_roundreport() const;
  private:
  bool _internal_has_roundreport() const;
  public:
  void clear_roundreport();
  const ::msg::CSRspRoundReport& roundreport() const;
  PROTOBUF_NODISCARD ::msg::CSRspRoundReport* release_roundreport();
  ::msg::CSRspRoundReport* mutable_roundreport();
  void set_allocated_roundreport(::msg::CSRspRoundReport* roundreport);
  private:
  const ::msg::CSRspRoundReport& _internal_roundreport() const;
  ::msg::CSRspRoundReport* _internal_mutable_roundreport();
  public:
  void unsafe_arena_set_allocated_roundreport(
      ::msg::CSRspRoundReport* roundreport);
  ::msg::CSRspRoundReport* unsafe_arena_release_roundreport();

  // .msg.CSRspLoadingProgress LoadingProgress = 33;
  bool has_loadingprogress() const;
  private:
  bool _internal_has_loadingprogress() const;
  public:
  void clear_loadingprogress();
  const ::msg::CSRspLoadingProgress& loadingprogress() const;
  PROTOBUF_NODISCARD ::msg::CSRspLoadingProgress* release_loadingprogress();
  ::msg::CSRspLoadingProgress* mutable_loadingprogress();
  void set_allocated_loadingprogress(::msg::CSRspLoadingProgress* loadingprogress);
  private:
  const ::msg::CSRspLoadingProgress& _internal_loadingprogress() const;
  ::msg::CSRspLoadingProgress* _internal_mutable_loadingprogress();
  public:
  void unsafe_arena_set_allocated_loadingprogress(
      ::msg::CSRspLoadingProgress* loadingprogress);
  ::msg::CSRspLoadingProgress* unsafe_arena_release_loadingprogress();

  // .msg.CSRspPvpChat PvpChat = 34;
  bool has_pvpchat() const;
  private:
  bool _internal_has_pvpchat() const;
  public:
  void clear_pvpchat();
  const ::msg::CSRspPvpChat& pvpchat() const;
  PROTOBUF_NODISCARD ::msg::CSRspPvpChat* release_pvpchat();
  ::msg::CSRspPvpChat* mutable_pvpchat();
  void set_allocated_pvpchat(::msg::CSRspPvpChat* pvpchat);
  private:
  const ::msg::CSRspPvpChat& _internal_pvpchat() const;
  ::msg::CSRspPvpChat* _internal_mutable_pvpchat();
  public:
  void unsafe_arena_set_allocated_pvpchat(
      ::msg::CSRspPvpChat* pvpchat);
  ::msg::CSRspPvpChat* unsafe_arena_release_pvpchat();

  // .msg.CSRspChessCombine ChessCombine = 35;
  bool has_chesscombine() const;
  private:
  bool _internal_has_chesscombine() const;
  public:
  void clear_chesscombine();
  const ::msg::CSRspChessCombine& chesscombine() const;
  PROTOBUF_NODISCARD ::msg::CSRspChessCombine* release_chesscombine();
  ::msg::CSRspChessCombine* mutable_chesscombine();
  void set_allocated_chesscombine(::msg::CSRspChessCombine* chesscombine);
  private:
  const ::msg::CSRspChessCombine& _internal_chesscombine() const;
  ::msg::CSRspChessCombine* _internal_mutable_chesscombine();
  public:
  void unsafe_arena_set_allocated_chesscombine(
      ::msg::CSRspChessCombine* chesscombine);
  ::msg::CSRspChessCombine* unsafe_arena_release_chesscombine();

  // .msg.CSRspExpose Expose = 36;
  bool has_expose() const;
  private:
  bool _internal_has_expose() const;
  public:
  void clear_expose();
  const ::msg::CSRspExpose& expose() const;
  PROTOBUF_NODISCARD ::msg::CSRspExpose* release_expose();
  ::msg::CSRspExpose* mutable_expose();
  void set_allocated_expose(::msg::CSRspExpose* expose);
  private:
  const ::msg::CSRspExpose& _internal_expose() const;
  ::msg::CSRspExpose* _internal_mutable_expose();
  public:
  void unsafe_arena_set_allocated_expose(
      ::msg::CSRspExpose* expose);
  ::msg::CSRspExpose* unsafe_arena_release_expose();

  // .msg.CSRspApplyOrderId ApplyOrderId = 37;
  bool has_applyorderid() const;
  private:
  bool _internal_has_applyorderid() const;
  public:
  void clear_applyorderid();
  const ::msg::CSRspApplyOrderId& applyorderid() const;
  PROTOBUF_NODISCARD ::msg::CSRspApplyOrderId* release_applyorderid();
  ::msg::CSRspApplyOrderId* mutable_applyorderid();
  void set_allocated_applyorderid(::msg::CSRspApplyOrderId* applyorderid);
  private:
  const ::msg::CSRspApplyOrderId& _internal_applyorderid() const;
  ::msg::CSRspApplyOrderId* _internal_mutable_applyorderid();
  public:
  void unsafe_arena_set_allocated_applyorderid(
      ::msg::CSRspApplyOrderId* applyorderid);
  ::msg::CSRspApplyOrderId* unsafe_arena_release_applyorderid();

  // .msg.CSRspReportOrderInfo ReportOrderInfo = 38;
  bool has_reportorderinfo() const;
  private:
  bool _internal_has_reportorderinfo() const;
  public:
  void clear_reportorderinfo();
  const ::msg::CSRspReportOrderInfo& reportorderinfo() const;
  PROTOBUF_NODISCARD ::msg::CSRspReportOrderInfo* release_reportorderinfo();
  ::msg::CSRspReportOrderInfo* mutable_reportorderinfo();
  void set_allocated_reportorderinfo(::msg::CSRspReportOrderInfo* reportorderinfo);
  private:
  const ::msg::CSRspReportOrderInfo& _internal_reportorderinfo() const;
  ::msg::CSRspReportOrderInfo* _internal_mutable_reportorderinfo();
  public:
  void unsafe_arena_set_allocated_reportorderinfo(
      ::msg::CSRspReportOrderInfo* reportorderinfo);
  ::msg::CSRspReportOrderInfo* unsafe_arena_release_reportorderinfo();

  // .msg.CSRspSetItem SetItem = 39;
  bool has_setitem() const;
  private:
  bool _internal_has_setitem() const;
  public:
  void clear_setitem();
  const ::msg::CSRspSetItem& setitem() const;
  PROTOBUF_NODISCARD ::msg::CSRspSetItem* release_setitem();
  ::msg::CSRspSetItem* mutable_setitem();
  void set_allocated_setitem(::msg::CSRspSetItem* setitem);
  private:
  const ::msg::CSRspSetItem& _internal_setitem() const;
  ::msg::CSRspSetItem* _internal_mutable_setitem();
  public:
  void unsafe_arena_set_allocated_setitem(
      ::msg::CSRspSetItem* setitem);
  ::msg::CSRspSetItem* unsafe_arena_release_setitem();

  // .msg.CSRspUnsetItem UnsetItem = 40;
  bool has_unsetitem() const;
  private:
  bool _internal_has_unsetitem() const;
  public:
  void clear_unsetitem();
  const ::msg::CSRspUnsetItem& unsetitem() const;
  PROTOBUF_NODISCARD ::msg::CSRspUnsetItem* release_unsetitem();
  ::msg::CSRspUnsetItem* mutable_unsetitem();
  void set_allocated_unsetitem(::msg::CSRspUnsetItem* unsetitem);
  private:
  const ::msg::CSRspUnsetItem& _internal_unsetitem() const;
  ::msg::CSRspUnsetItem* _internal_mutable_unsetitem();
  public:
  void unsafe_arena_set_allocated_unsetitem(
      ::msg::CSRspUnsetItem* unsetitem);
  ::msg::CSRspUnsetItem* unsafe_arena_release_unsetitem();

  // .msg.CSRspRandomItem RandomItem = 41;
  bool has_randomitem() const;
  private:
  bool _internal_has_randomitem() const;
  public:
  void clear_randomitem();
  const ::msg::CSRspRandomItem& randomitem() const;
  PROTOBUF_NODISCARD ::msg::CSRspRandomItem* release_randomitem();
  ::msg::CSRspRandomItem* mutable_randomitem();
  void set_allocated_randomitem(::msg::CSRspRandomItem* randomitem);
  private:
  const ::msg::CSRspRandomItem& _internal_randomitem() const;
  ::msg::CSRspRandomItem* _internal_mutable_randomitem();
  public:
  void unsafe_arena_set_allocated_randomitem(
      ::msg::CSRspRandomItem* randomitem);
  ::msg::CSRspRandomItem* unsafe_arena_release_randomitem();

  // .msg.CSRspChat Chat = 42;
  bool has_chat() const;
  private:
  bool _internal_has_chat() const;
  public:
  void clear_chat();
  const ::msg::CSRspChat& chat() const;
  PROTOBUF_NODISCARD ::msg::CSRspChat* release_chat();
  ::msg::CSRspChat* mutable_chat();
  void set_allocated_chat(::msg::CSRspChat* chat);
  private:
  const ::msg::CSRspChat& _internal_chat() const;
  ::msg::CSRspChat* _internal_mutable_chat();
  public:
  void unsafe_arena_set_allocated_chat(
      ::msg::CSRspChat* chat);
  ::msg::CSRspChat* unsafe_arena_release_chat();

  // .msg.CSRspSetChessPlayer SetChessPlayer = 43;
  bool has_setchessplayer() const;
  private:
  bool _internal_has_setchessplayer() const;
  public:
  void clear_setchessplayer();
  const ::msg::CSRspSetChessPlayer& setchessplayer() const;
  PROTOBUF_NODISCARD ::msg::CSRspSetChessPlayer* release_setchessplayer();
  ::msg::CSRspSetChessPlayer* mutable_setchessplayer();
  void set_allocated_setchessplayer(::msg::CSRspSetChessPlayer* setchessplayer);
  private:
  const ::msg::CSRspSetChessPlayer& _internal_setchessplayer() const;
  ::msg::CSRspSetChessPlayer* _internal_mutable_setchessplayer();
  public:
  void unsafe_arena_set_allocated_setchessplayer(
      ::msg::CSRspSetChessPlayer* setchessplayer);
  ::msg::CSRspSetChessPlayer* unsafe_arena_release_setchessplayer();

  // .msg.CSRspUnsetChessPlayer UnsetChessPlayer = 44;
  bool has_unsetchessplayer() const;
  private:
  bool _internal_has_unsetchessplayer() const;
  public:
  void clear_unsetchessplayer();
  const ::msg::CSRspUnsetChessPlayer& unsetchessplayer() const;
  PROTOBUF_NODISCARD ::msg::CSRspUnsetChessPlayer* release_unsetchessplayer();
  ::msg::CSRspUnsetChessPlayer* mutable_unsetchessplayer();
  void set_allocated_unsetchessplayer(::msg::CSRspUnsetChessPlayer* unsetchessplayer);
  private:
  const ::msg::CSRspUnsetChessPlayer& _internal_unsetchessplayer() const;
  ::msg::CSRspUnsetChessPlayer* _internal_mutable_unsetchessplayer();
  public:
  void unsafe_arena_set_allocated_unsetchessplayer(
      ::msg::CSRspUnsetChessPlayer* unsetchessplayer);
  ::msg::CSRspUnsetChessPlayer* unsafe_arena_release_unsetchessplayer();

  // .msg.CSRspGetFansList GetFansList = 45;
  bool has_getfanslist() const;
  private:
  bool _internal_has_getfanslist() const;
  public:
  void clear_getfanslist();
  const ::msg::CSRspGetFansList& getfanslist() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetFansList* release_getfanslist();
  ::msg::CSRspGetFansList* mutable_getfanslist();
  void set_allocated_getfanslist(::msg::CSRspGetFansList* getfanslist);
  private:
  const ::msg::CSRspGetFansList& _internal_getfanslist() const;
  ::msg::CSRspGetFansList* _internal_mutable_getfanslist();
  public:
  void unsafe_arena_set_allocated_getfanslist(
      ::msg::CSRspGetFansList* getfanslist);
  ::msg::CSRspGetFansList* unsafe_arena_release_getfanslist();

  // .msg.CSRspFollowPlayer FollowPlayer = 46;
  bool has_followplayer() const;
  private:
  bool _internal_has_followplayer() const;
  public:
  void clear_followplayer();
  const ::msg::CSRspFollowPlayer& followplayer() const;
  PROTOBUF_NODISCARD ::msg::CSRspFollowPlayer* release_followplayer();
  ::msg::CSRspFollowPlayer* mutable_followplayer();
  void set_allocated_followplayer(::msg::CSRspFollowPlayer* followplayer);
  private:
  const ::msg::CSRspFollowPlayer& _internal_followplayer() const;
  ::msg::CSRspFollowPlayer* _internal_mutable_followplayer();
  public:
  void unsafe_arena_set_allocated_followplayer(
      ::msg::CSRspFollowPlayer* followplayer);
  ::msg::CSRspFollowPlayer* unsafe_arena_release_followplayer();

  // .msg.CSRspUnfollowPlayer UnfollowPlayer = 47;
  bool has_unfollowplayer() const;
  private:
  bool _internal_has_unfollowplayer() const;
  public:
  void clear_unfollowplayer();
  const ::msg::CSRspUnfollowPlayer& unfollowplayer() const;
  PROTOBUF_NODISCARD ::msg::CSRspUnfollowPlayer* release_unfollowplayer();
  ::msg::CSRspUnfollowPlayer* mutable_unfollowplayer();
  void set_allocated_unfollowplayer(::msg::CSRspUnfollowPlayer* unfollowplayer);
  private:
  const ::msg::CSRspUnfollowPlayer& _internal_unfollowplayer() const;
  ::msg::CSRspUnfollowPlayer* _internal_mutable_unfollowplayer();
  public:
  void unsafe_arena_set_allocated_unfollowplayer(
      ::msg::CSRspUnfollowPlayer* unfollowplayer);
  ::msg::CSRspUnfollowPlayer* unsafe_arena_release_unfollowplayer();

  // .msg.CSRspPlayersStatusInfo PlayersStatusInfo = 48;
  bool has_playersstatusinfo() const;
  private:
  bool _internal_has_playersstatusinfo() const;
  public:
  void clear_playersstatusinfo();
  const ::msg::CSRspPlayersStatusInfo& playersstatusinfo() const;
  PROTOBUF_NODISCARD ::msg::CSRspPlayersStatusInfo* release_playersstatusinfo();
  ::msg::CSRspPlayersStatusInfo* mutable_playersstatusinfo();
  void set_allocated_playersstatusinfo(::msg::CSRspPlayersStatusInfo* playersstatusinfo);
  private:
  const ::msg::CSRspPlayersStatusInfo& _internal_playersstatusinfo() const;
  ::msg::CSRspPlayersStatusInfo* _internal_mutable_playersstatusinfo();
  public:
  void unsafe_arena_set_allocated_playersstatusinfo(
      ::msg::CSRspPlayersStatusInfo* playersstatusinfo);
  ::msg::CSRspPlayersStatusInfo* unsafe_arena_release_playersstatusinfo();

  // .msg.CSRspInviteJoinTeam InviteJoinTeam = 49;
  bool has_invitejointeam() const;
  private:
  bool _internal_has_invitejointeam() const;
  public:
  void clear_invitejointeam();
  const ::msg::CSRspInviteJoinTeam& invitejointeam() const;
  PROTOBUF_NODISCARD ::msg::CSRspInviteJoinTeam* release_invitejointeam();
  ::msg::CSRspInviteJoinTeam* mutable_invitejointeam();
  void set_allocated_invitejointeam(::msg::CSRspInviteJoinTeam* invitejointeam);
  private:
  const ::msg::CSRspInviteJoinTeam& _internal_invitejointeam() const;
  ::msg::CSRspInviteJoinTeam* _internal_mutable_invitejointeam();
  public:
  void unsafe_arena_set_allocated_invitejointeam(
      ::msg::CSRspInviteJoinTeam* invitejointeam);
  ::msg::CSRspInviteJoinTeam* unsafe_arena_release_invitejointeam();

  // .msg.CSRspJoinTeam JoinTeam = 50;
  bool has_jointeam() const;
  private:
  bool _internal_has_jointeam() const;
  public:
  void clear_jointeam();
  const ::msg::CSRspJoinTeam& jointeam() const;
  PROTOBUF_NODISCARD ::msg::CSRspJoinTeam* release_jointeam();
  ::msg::CSRspJoinTeam* mutable_jointeam();
  void set_allocated_jointeam(::msg::CSRspJoinTeam* jointeam);
  private:
  const ::msg::CSRspJoinTeam& _internal_jointeam() const;
  ::msg::CSRspJoinTeam* _internal_mutable_jointeam();
  public:
  void unsafe_arena_set_allocated_jointeam(
      ::msg::CSRspJoinTeam* jointeam);
  ::msg::CSRspJoinTeam* unsafe_arena_release_jointeam();

  // .msg.CSRspReportPayResponse ReportPayResponse = 51;
  bool has_reportpayresponse() const;
  private:
  bool _internal_has_reportpayresponse() const;
  public:
  void clear_reportpayresponse();
  const ::msg::CSRspReportPayResponse& reportpayresponse() const;
  PROTOBUF_NODISCARD ::msg::CSRspReportPayResponse* release_reportpayresponse();
  ::msg::CSRspReportPayResponse* mutable_reportpayresponse();
  void set_allocated_reportpayresponse(::msg::CSRspReportPayResponse* reportpayresponse);
  private:
  const ::msg::CSRspReportPayResponse& _internal_reportpayresponse() const;
  ::msg::CSRspReportPayResponse* _internal_mutable_reportpayresponse();
  public:
  void unsafe_arena_set_allocated_reportpayresponse(
      ::msg::CSRspReportPayResponse* reportpayresponse);
  ::msg::CSRspReportPayResponse* unsafe_arena_release_reportpayresponse();

  // .msg.CSRspRejectJoinTeam RejectJoinTeam = 52;
  bool has_rejectjointeam() const;
  private:
  bool _internal_has_rejectjointeam() const;
  public:
  void clear_rejectjointeam();
  const ::msg::CSRspRejectJoinTeam& rejectjointeam() const;
  PROTOBUF_NODISCARD ::msg::CSRspRejectJoinTeam* release_rejectjointeam();
  ::msg::CSRspRejectJoinTeam* mutable_rejectjointeam();
  void set_allocated_rejectjointeam(::msg::CSRspRejectJoinTeam* rejectjointeam);
  private:
  const ::msg::CSRspRejectJoinTeam& _internal_rejectjointeam() const;
  ::msg::CSRspRejectJoinTeam* _internal_mutable_rejectjointeam();
  public:
  void unsafe_arena_set_allocated_rejectjointeam(
      ::msg::CSRspRejectJoinTeam* rejectjointeam);
  ::msg::CSRspRejectJoinTeam* unsafe_arena_release_rejectjointeam();

  // .msg.CSRspShieldChat ShieldChat = 53;
  bool has_shieldchat() const;
  private:
  bool _internal_has_shieldchat() const;
  public:
  void clear_shieldchat();
  const ::msg::CSRspShieldChat& shieldchat() const;
  PROTOBUF_NODISCARD ::msg::CSRspShieldChat* release_shieldchat();
  ::msg::CSRspShieldChat* mutable_shieldchat();
  void set_allocated_shieldchat(::msg::CSRspShieldChat* shieldchat);
  private:
  const ::msg::CSRspShieldChat& _internal_shieldchat() const;
  ::msg::CSRspShieldChat* _internal_mutable_shieldchat();
  public:
  void unsafe_arena_set_allocated_shieldchat(
      ::msg::CSRspShieldChat* shieldchat);
  ::msg::CSRspShieldChat* unsafe_arena_release_shieldchat();

  // .msg.CSRspBuyPassportLevel BuyPassportLevel = 54;
  bool has_buypassportlevel() const;
  private:
  bool _internal_has_buypassportlevel() const;
  public:
  void clear_buypassportlevel();
  const ::msg::CSRspBuyPassportLevel& buypassportlevel() const;
  PROTOBUF_NODISCARD ::msg::CSRspBuyPassportLevel* release_buypassportlevel();
  ::msg::CSRspBuyPassportLevel* mutable_buypassportlevel();
  void set_allocated_buypassportlevel(::msg::CSRspBuyPassportLevel* buypassportlevel);
  private:
  const ::msg::CSRspBuyPassportLevel& _internal_buypassportlevel() const;
  ::msg::CSRspBuyPassportLevel* _internal_mutable_buypassportlevel();
  public:
  void unsafe_arena_set_allocated_buypassportlevel(
      ::msg::CSRspBuyPassportLevel* buypassportlevel);
  ::msg::CSRspBuyPassportLevel* unsafe_arena_release_buypassportlevel();

  // .msg.CSRspUpgradePassport UpgradePassport = 55;
  bool has_upgradepassport() const;
  private:
  bool _internal_has_upgradepassport() const;
  public:
  void clear_upgradepassport();
  const ::msg::CSRspUpgradePassport& upgradepassport() const;
  PROTOBUF_NODISCARD ::msg::CSRspUpgradePassport* release_upgradepassport();
  ::msg::CSRspUpgradePassport* mutable_upgradepassport();
  void set_allocated_upgradepassport(::msg::CSRspUpgradePassport* upgradepassport);
  private:
  const ::msg::CSRspUpgradePassport& _internal_upgradepassport() const;
  ::msg::CSRspUpgradePassport* _internal_mutable_upgradepassport();
  public:
  void unsafe_arena_set_allocated_upgradepassport(
      ::msg::CSRspUpgradePassport* upgradepassport);
  ::msg::CSRspUpgradePassport* unsafe_arena_release_upgradepassport();

  // .msg.CSRspGetPassportLevelAward GetPassportLevelAward = 56;
  bool has_getpassportlevelaward() const;
  private:
  bool _internal_has_getpassportlevelaward() const;
  public:
  void clear_getpassportlevelaward();
  const ::msg::CSRspGetPassportLevelAward& getpassportlevelaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetPassportLevelAward* release_getpassportlevelaward();
  ::msg::CSRspGetPassportLevelAward* mutable_getpassportlevelaward();
  void set_allocated_getpassportlevelaward(::msg::CSRspGetPassportLevelAward* getpassportlevelaward);
  private:
  const ::msg::CSRspGetPassportLevelAward& _internal_getpassportlevelaward() const;
  ::msg::CSRspGetPassportLevelAward* _internal_mutable_getpassportlevelaward();
  public:
  void unsafe_arena_set_allocated_getpassportlevelaward(
      ::msg::CSRspGetPassportLevelAward* getpassportlevelaward);
  ::msg::CSRspGetPassportLevelAward* unsafe_arena_release_getpassportlevelaward();

  // .msg.CSRspGetPassportTaskAward GetPassportTaskAward = 57;
  bool has_getpassporttaskaward() const;
  private:
  bool _internal_has_getpassporttaskaward() const;
  public:
  void clear_getpassporttaskaward();
  const ::msg::CSRspGetPassportTaskAward& getpassporttaskaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetPassportTaskAward* release_getpassporttaskaward();
  ::msg::CSRspGetPassportTaskAward* mutable_getpassporttaskaward();
  void set_allocated_getpassporttaskaward(::msg::CSRspGetPassportTaskAward* getpassporttaskaward);
  private:
  const ::msg::CSRspGetPassportTaskAward& _internal_getpassporttaskaward() const;
  ::msg::CSRspGetPassportTaskAward* _internal_mutable_getpassporttaskaward();
  public:
  void unsafe_arena_set_allocated_getpassporttaskaward(
      ::msg::CSRspGetPassportTaskAward* getpassporttaskaward);
  ::msg::CSRspGetPassportTaskAward* unsafe_arena_release_getpassporttaskaward();

  // .msg.CSRspTelBook TelBook = 58;
  bool has_telbook() const;
  private:
  bool _internal_has_telbook() const;
  public:
  void clear_telbook();
  const ::msg::CSRspTelBook& telbook() const;
  PROTOBUF_NODISCARD ::msg::CSRspTelBook* release_telbook();
  ::msg::CSRspTelBook* mutable_telbook();
  void set_allocated_telbook(::msg::CSRspTelBook* telbook);
  private:
  const ::msg::CSRspTelBook& _internal_telbook() const;
  ::msg::CSRspTelBook* _internal_mutable_telbook();
  public:
  void unsafe_arena_set_allocated_telbook(
      ::msg::CSRspTelBook* telbook);
  ::msg::CSRspTelBook* unsafe_arena_release_telbook();

  // .msg.CSRspActivatePassport ActivatePassport = 59;
  bool has_activatepassport() const;
  private:
  bool _internal_has_activatepassport() const;
  public:
  void clear_activatepassport();
  const ::msg::CSRspActivatePassport& activatepassport() const;
  PROTOBUF_NODISCARD ::msg::CSRspActivatePassport* release_activatepassport();
  ::msg::CSRspActivatePassport* mutable_activatepassport();
  void set_allocated_activatepassport(::msg::CSRspActivatePassport* activatepassport);
  private:
  const ::msg::CSRspActivatePassport& _internal_activatepassport() const;
  ::msg::CSRspActivatePassport* _internal_mutable_activatepassport();
  public:
  void unsafe_arena_set_allocated_activatepassport(
      ::msg::CSRspActivatePassport* activatepassport);
  ::msg::CSRspActivatePassport* unsafe_arena_release_activatepassport();

  // .msg.CSRspRankSeasonEval RankSeasonEval = 60;
  bool has_rankseasoneval() const;
  private:
  bool _internal_has_rankseasoneval() const;
  public:
  void clear_rankseasoneval();
  const ::msg::CSRspRankSeasonEval& rankseasoneval() const;
  PROTOBUF_NODISCARD ::msg::CSRspRankSeasonEval* release_rankseasoneval();
  ::msg::CSRspRankSeasonEval* mutable_rankseasoneval();
  void set_allocated_rankseasoneval(::msg::CSRspRankSeasonEval* rankseasoneval);
  private:
  const ::msg::CSRspRankSeasonEval& _internal_rankseasoneval() const;
  ::msg::CSRspRankSeasonEval* _internal_mutable_rankseasoneval();
  public:
  void unsafe_arena_set_allocated_rankseasoneval(
      ::msg::CSRspRankSeasonEval* rankseasoneval);
  ::msg::CSRspRankSeasonEval* unsafe_arena_release_rankseasoneval();

  // .msg.CSRspBindAccount BindAccount = 61;
  bool has_bindaccount() const;
  private:
  bool _internal_has_bindaccount() const;
  public:
  void clear_bindaccount();
  const ::msg::CSRspBindAccount& bindaccount() const;
  PROTOBUF_NODISCARD ::msg::CSRspBindAccount* release_bindaccount();
  ::msg::CSRspBindAccount* mutable_bindaccount();
  void set_allocated_bindaccount(::msg::CSRspBindAccount* bindaccount);
  private:
  const ::msg::CSRspBindAccount& _internal_bindaccount() const;
  ::msg::CSRspBindAccount* _internal_mutable_bindaccount();
  public:
  void unsafe_arena_set_allocated_bindaccount(
      ::msg::CSRspBindAccount* bindaccount);
  ::msg::CSRspBindAccount* unsafe_arena_release_bindaccount();

  // .msg.CSRspIncAdShowCount IncAdsShowCount = 62;
  bool has_incadsshowcount() const;
  private:
  bool _internal_has_incadsshowcount() const;
  public:
  void clear_incadsshowcount();
  const ::msg::CSRspIncAdShowCount& incadsshowcount() const;
  PROTOBUF_NODISCARD ::msg::CSRspIncAdShowCount* release_incadsshowcount();
  ::msg::CSRspIncAdShowCount* mutable_incadsshowcount();
  void set_allocated_incadsshowcount(::msg::CSRspIncAdShowCount* incadsshowcount);
  private:
  const ::msg::CSRspIncAdShowCount& _internal_incadsshowcount() const;
  ::msg::CSRspIncAdShowCount* _internal_mutable_incadsshowcount();
  public:
  void unsafe_arena_set_allocated_incadsshowcount(
      ::msg::CSRspIncAdShowCount* incadsshowcount);
  ::msg::CSRspIncAdShowCount* unsafe_arena_release_incadsshowcount();

  // .msg.CSRspUseBonusCard UseBonusCard = 63;
  bool has_usebonuscard() const;
  private:
  bool _internal_has_usebonuscard() const;
  public:
  void clear_usebonuscard();
  const ::msg::CSRspUseBonusCard& usebonuscard() const;
  PROTOBUF_NODISCARD ::msg::CSRspUseBonusCard* release_usebonuscard();
  ::msg::CSRspUseBonusCard* mutable_usebonuscard();
  void set_allocated_usebonuscard(::msg::CSRspUseBonusCard* usebonuscard);
  private:
  const ::msg::CSRspUseBonusCard& _internal_usebonuscard() const;
  ::msg::CSRspUseBonusCard* _internal_mutable_usebonuscard();
  public:
  void unsafe_arena_set_allocated_usebonuscard(
      ::msg::CSRspUseBonusCard* usebonuscard);
  ::msg::CSRspUseBonusCard* unsafe_arena_release_usebonuscard();

  // .msg.CSRspGetSeasonAward GetSeasonAward = 64;
  bool has_getseasonaward() const;
  private:
  bool _internal_has_getseasonaward() const;
  public:
  void clear_getseasonaward();
  const ::msg::CSRspGetSeasonAward& getseasonaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetSeasonAward* release_getseasonaward();
  ::msg::CSRspGetSeasonAward* mutable_getseasonaward();
  void set_allocated_getseasonaward(::msg::CSRspGetSeasonAward* getseasonaward);
  private:
  const ::msg::CSRspGetSeasonAward& _internal_getseasonaward() const;
  ::msg::CSRspGetSeasonAward* _internal_mutable_getseasonaward();
  public:
  void unsafe_arena_set_allocated_getseasonaward(
      ::msg::CSRspGetSeasonAward* getseasonaward);
  ::msg::CSRspGetSeasonAward* unsafe_arena_release_getseasonaward();

  // .msg.CSRspGetAlphaActivityAward GetAlphaActivityAward = 65;
  bool has_getalphaactivityaward() const;
  private:
  bool _internal_has_getalphaactivityaward() const;
  public:
  void clear_getalphaactivityaward();
  const ::msg::CSRspGetAlphaActivityAward& getalphaactivityaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetAlphaActivityAward* release_getalphaactivityaward();
  ::msg::CSRspGetAlphaActivityAward* mutable_getalphaactivityaward();
  void set_allocated_getalphaactivityaward(::msg::CSRspGetAlphaActivityAward* getalphaactivityaward);
  private:
  const ::msg::CSRspGetAlphaActivityAward& _internal_getalphaactivityaward() const;
  ::msg::CSRspGetAlphaActivityAward* _internal_mutable_getalphaactivityaward();
  public:
  void unsafe_arena_set_allocated_getalphaactivityaward(
      ::msg::CSRspGetAlphaActivityAward* getalphaactivityaward);
  ::msg::CSRspGetAlphaActivityAward* unsafe_arena_release_getalphaactivityaward();

  // .msg.CSRspGetLanguageData GetLanguageData = 66;
  bool has_getlanguagedata() const;
  private:
  bool _internal_has_getlanguagedata() const;
  public:
  void clear_getlanguagedata();
  const ::msg::CSRspGetLanguageData& getlanguagedata() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetLanguageData* release_getlanguagedata();
  ::msg::CSRspGetLanguageData* mutable_getlanguagedata();
  void set_allocated_getlanguagedata(::msg::CSRspGetLanguageData* getlanguagedata);
  private:
  const ::msg::CSRspGetLanguageData& _internal_getlanguagedata() const;
  ::msg::CSRspGetLanguageData* _internal_mutable_getlanguagedata();
  public:
  void unsafe_arena_set_allocated_getlanguagedata(
      ::msg::CSRspGetLanguageData* getlanguagedata);
  ::msg::CSRspGetLanguageData* unsafe_arena_release_getlanguagedata();

  // .msg.CSRspGetActivityAward GetActivityAward = 67;
  bool has_getactivityaward() const;
  private:
  bool _internal_has_getactivityaward() const;
  public:
  void clear_getactivityaward();
  const ::msg::CSRspGetActivityAward& getactivityaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetActivityAward* release_getactivityaward();
  ::msg::CSRspGetActivityAward* mutable_getactivityaward();
  void set_allocated_getactivityaward(::msg::CSRspGetActivityAward* getactivityaward);
  private:
  const ::msg::CSRspGetActivityAward& _internal_getactivityaward() const;
  ::msg::CSRspGetActivityAward* _internal_mutable_getactivityaward();
  public:
  void unsafe_arena_set_allocated_getactivityaward(
      ::msg::CSRspGetActivityAward* getactivityaward);
  ::msg::CSRspGetActivityAward* unsafe_arena_release_getactivityaward();

  // .msg.CSRspGetActivityData GetActivityData = 68;
  bool has_getactivitydata() const;
  private:
  bool _internal_has_getactivitydata() const;
  public:
  void clear_getactivitydata();
  const ::msg::CSRspGetActivityData& getactivitydata() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetActivityData* release_getactivitydata();
  ::msg::CSRspGetActivityData* mutable_getactivitydata();
  void set_allocated_getactivitydata(::msg::CSRspGetActivityData* getactivitydata);
  private:
  const ::msg::CSRspGetActivityData& _internal_getactivitydata() const;
  ::msg::CSRspGetActivityData* _internal_mutable_getactivitydata();
  public:
  void unsafe_arena_set_allocated_getactivitydata(
      ::msg::CSRspGetActivityData* getactivitydata);
  ::msg::CSRspGetActivityData* unsafe_arena_release_getactivitydata();

  // .msg.CSRspSendSms SendSms = 69;
  bool has_sendsms() const;
  private:
  bool _internal_has_sendsms() const;
  public:
  void clear_sendsms();
  const ::msg::CSRspSendSms& sendsms() const;
  PROTOBUF_NODISCARD ::msg::CSRspSendSms* release_sendsms();
  ::msg::CSRspSendSms* mutable_sendsms();
  void set_allocated_sendsms(::msg::CSRspSendSms* sendsms);
  private:
  const ::msg::CSRspSendSms& _internal_sendsms() const;
  ::msg::CSRspSendSms* _internal_mutable_sendsms();
  public:
  void unsafe_arena_set_allocated_sendsms(
      ::msg::CSRspSendSms* sendsms);
  ::msg::CSRspSendSms* unsafe_arena_release_sendsms();

  // .msg.CSRspGetMeleeAward GetMeleeAward = 70;
  bool has_getmeleeaward() const;
  private:
  bool _internal_has_getmeleeaward() const;
  public:
  void clear_getmeleeaward();
  const ::msg::CSRspGetMeleeAward& getmeleeaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetMeleeAward* release_getmeleeaward();
  ::msg::CSRspGetMeleeAward* mutable_getmeleeaward();
  void set_allocated_getmeleeaward(::msg::CSRspGetMeleeAward* getmeleeaward);
  private:
  const ::msg::CSRspGetMeleeAward& _internal_getmeleeaward() const;
  ::msg::CSRspGetMeleeAward* _internal_mutable_getmeleeaward();
  public:
  void unsafe_arena_set_allocated_getmeleeaward(
      ::msg::CSRspGetMeleeAward* getmeleeaward);
  ::msg::CSRspGetMeleeAward* unsafe_arena_release_getmeleeaward();

  // .msg.CSRspAddAiToTeam AddAiToTeam = 71;
  bool has_addaitoteam() const;
  private:
  bool _internal_has_addaitoteam() const;
  public:
  void clear_addaitoteam();
  const ::msg::CSRspAddAiToTeam& addaitoteam() const;
  PROTOBUF_NODISCARD ::msg::CSRspAddAiToTeam* release_addaitoteam();
  ::msg::CSRspAddAiToTeam* mutable_addaitoteam();
  void set_allocated_addaitoteam(::msg::CSRspAddAiToTeam* addaitoteam);
  private:
  const ::msg::CSRspAddAiToTeam& _internal_addaitoteam() const;
  ::msg::CSRspAddAiToTeam* _internal_mutable_addaitoteam();
  public:
  void unsafe_arena_set_allocated_addaitoteam(
      ::msg::CSRspAddAiToTeam* addaitoteam);
  ::msg::CSRspAddAiToTeam* unsafe_arena_release_addaitoteam();

  // .msg.CSRspShare Share = 72;
  bool has_share() const;
  private:
  bool _internal_has_share() const;
  public:
  void clear_share();
  const ::msg::CSRspShare& share() const;
  PROTOBUF_NODISCARD ::msg::CSRspShare* release_share();
  ::msg::CSRspShare* mutable_share();
  void set_allocated_share(::msg::CSRspShare* share);
  private:
  const ::msg::CSRspShare& _internal_share() const;
  ::msg::CSRspShare* _internal_mutable_share();
  public:
  void unsafe_arena_set_allocated_share(
      ::msg::CSRspShare* share);
  ::msg::CSRspShare* unsafe_arena_release_share();

  // .msg.CSRspSkipInterface SkipInterface = 73;
  bool has_skipinterface() const;
  private:
  bool _internal_has_skipinterface() const;
  public:
  void clear_skipinterface();
  const ::msg::CSRspSkipInterface& skipinterface() const;
  PROTOBUF_NODISCARD ::msg::CSRspSkipInterface* release_skipinterface();
  ::msg::CSRspSkipInterface* mutable_skipinterface();
  void set_allocated_skipinterface(::msg::CSRspSkipInterface* skipinterface);
  private:
  const ::msg::CSRspSkipInterface& _internal_skipinterface() const;
  ::msg::CSRspSkipInterface* _internal_mutable_skipinterface();
  public:
  void unsafe_arena_set_allocated_skipinterface(
      ::msg::CSRspSkipInterface* skipinterface);
  ::msg::CSRspSkipInterface* unsafe_arena_release_skipinterface();

  // .msg.CSRspTeamGame TeamGame = 74;
  bool has_teamgame() const;
  private:
  bool _internal_has_teamgame() const;
  public:
  void clear_teamgame();
  const ::msg::CSRspTeamGame& teamgame() const;
  PROTOBUF_NODISCARD ::msg::CSRspTeamGame* release_teamgame();
  ::msg::CSRspTeamGame* mutable_teamgame();
  void set_allocated_teamgame(::msg::CSRspTeamGame* teamgame);
  private:
  const ::msg::CSRspTeamGame& _internal_teamgame() const;
  ::msg::CSRspTeamGame* _internal_mutable_teamgame();
  public:
  void unsafe_arena_set_allocated_teamgame(
      ::msg::CSRspTeamGame* teamgame);
  ::msg::CSRspTeamGame* unsafe_arena_release_teamgame();

  // .msg.CSRspSetTeamMode SetTeamMode = 75;
  bool has_setteammode() const;
  private:
  bool _internal_has_setteammode() const;
  public:
  void clear_setteammode();
  const ::msg::CSRspSetTeamMode& setteammode() const;
  PROTOBUF_NODISCARD ::msg::CSRspSetTeamMode* release_setteammode();
  ::msg::CSRspSetTeamMode* mutable_setteammode();
  void set_allocated_setteammode(::msg::CSRspSetTeamMode* setteammode);
  private:
  const ::msg::CSRspSetTeamMode& _internal_setteammode() const;
  ::msg::CSRspSetTeamMode* _internal_mutable_setteammode();
  public:
  void unsafe_arena_set_allocated_setteammode(
      ::msg::CSRspSetTeamMode* setteammode);
  ::msg::CSRspSetTeamMode* unsafe_arena_release_setteammode();

  // .msg.CSRspSetHistoryPvpShowPermission HistoryPvpShowPermission = 76;
  bool has_historypvpshowpermission() const;
  private:
  bool _internal_has_historypvpshowpermission() const;
  public:
  void clear_historypvpshowpermission();
  const ::msg::CSRspSetHistoryPvpShowPermission& historypvpshowpermission() const;
  PROTOBUF_NODISCARD ::msg::CSRspSetHistoryPvpShowPermission* release_historypvpshowpermission();
  ::msg::CSRspSetHistoryPvpShowPermission* mutable_historypvpshowpermission();
  void set_allocated_historypvpshowpermission(::msg::CSRspSetHistoryPvpShowPermission* historypvpshowpermission);
  private:
  const ::msg::CSRspSetHistoryPvpShowPermission& _internal_historypvpshowpermission() const;
  ::msg::CSRspSetHistoryPvpShowPermission* _internal_mutable_historypvpshowpermission();
  public:
  void unsafe_arena_set_allocated_historypvpshowpermission(
      ::msg::CSRspSetHistoryPvpShowPermission* historypvpshowpermission);
  ::msg::CSRspSetHistoryPvpShowPermission* unsafe_arena_release_historypvpshowpermission();

  // .msg.CSRspSearchTeam SearchTeam = 77;
  bool has_searchteam() const;
  private:
  bool _internal_has_searchteam() const;
  public:
  void clear_searchteam();
  const ::msg::CSRspSearchTeam& searchteam() const;
  PROTOBUF_NODISCARD ::msg::CSRspSearchTeam* release_searchteam();
  ::msg::CSRspSearchTeam* mutable_searchteam();
  void set_allocated_searchteam(::msg::CSRspSearchTeam* searchteam);
  private:
  const ::msg::CSRspSearchTeam& _internal_searchteam() const;
  ::msg::CSRspSearchTeam* _internal_mutable_searchteam();
  public:
  void unsafe_arena_set_allocated_searchteam(
      ::msg::CSRspSearchTeam* searchteam);
  ::msg::CSRspSearchTeam* unsafe_arena_release_searchteam();

  // .msg.CSRspApplyChat ApplyChat = 78;
  bool has_applychat() const;
  private:
  bool _internal_has_applychat() const;
  public:
  void clear_applychat();
  const ::msg::CSRspApplyChat& applychat() const;
  PROTOBUF_NODISCARD ::msg::CSRspApplyChat* release_applychat();
  ::msg::CSRspApplyChat* mutable_applychat();
  void set_allocated_applychat(::msg::CSRspApplyChat* applychat);
  private:
  const ::msg::CSRspApplyChat& _internal_applychat() const;
  ::msg::CSRspApplyChat* _internal_mutable_applychat();
  public:
  void unsafe_arena_set_allocated_applychat(
      ::msg::CSRspApplyChat* applychat);
  ::msg::CSRspApplyChat* unsafe_arena_release_applychat();

  // .msg.CSRspChatLogin ChatLogin = 79;
  bool has_chatlogin() const;
  private:
  bool _internal_has_chatlogin() const;
  public:
  void clear_chatlogin();
  const ::msg::CSRspChatLogin& chatlogin() const;
  PROTOBUF_NODISCARD ::msg::CSRspChatLogin* release_chatlogin();
  ::msg::CSRspChatLogin* mutable_chatlogin();
  void set_allocated_chatlogin(::msg::CSRspChatLogin* chatlogin);
  private:
  const ::msg::CSRspChatLogin& _internal_chatlogin() const;
  ::msg::CSRspChatLogin* _internal_mutable_chatlogin();
  public:
  void unsafe_arena_set_allocated_chatlogin(
      ::msg::CSRspChatLogin* chatlogin);
  ::msg::CSRspChatLogin* unsafe_arena_release_chatlogin();

  // .msg.CSRspProbeNetDelay ProbeNetDelay = 80;
  bool has_probenetdelay() const;
  private:
  bool _internal_has_probenetdelay() const;
  public:
  void clear_probenetdelay();
  const ::msg::CSRspProbeNetDelay& probenetdelay() const;
  PROTOBUF_NODISCARD ::msg::CSRspProbeNetDelay* release_probenetdelay();
  ::msg::CSRspProbeNetDelay* mutable_probenetdelay();
  void set_allocated_probenetdelay(::msg::CSRspProbeNetDelay* probenetdelay);
  private:
  const ::msg::CSRspProbeNetDelay& _internal_probenetdelay() const;
  ::msg::CSRspProbeNetDelay* _internal_mutable_probenetdelay();
  public:
  void unsafe_arena_set_allocated_probenetdelay(
      ::msg::CSRspProbeNetDelay* probenetdelay);
  ::msg::CSRspProbeNetDelay* unsafe_arena_release_probenetdelay();

  // .msg.CSRspGetEggs GetEggs = 81;
  bool has_geteggs() const;
  private:
  bool _internal_has_geteggs() const;
  public:
  void clear_geteggs();
  const ::msg::CSRspGetEggs& geteggs() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetEggs* release_geteggs();
  ::msg::CSRspGetEggs* mutable_geteggs();
  void set_allocated_geteggs(::msg::CSRspGetEggs* geteggs);
  private:
  const ::msg::CSRspGetEggs& _internal_geteggs() const;
  ::msg::CSRspGetEggs* _internal_mutable_geteggs();
  public:
  void unsafe_arena_set_allocated_geteggs(
      ::msg::CSRspGetEggs* geteggs);
  ::msg::CSRspGetEggs* unsafe_arena_release_geteggs();

  // .msg.CSRspBuyGoods BuyGoods = 82;
  bool has_buygoods() const;
  private:
  bool _internal_has_buygoods() const;
  public:
  void clear_buygoods();
  const ::msg::CSRspBuyGoods& buygoods() const;
  PROTOBUF_NODISCARD ::msg::CSRspBuyGoods* release_buygoods();
  ::msg::CSRspBuyGoods* mutable_buygoods();
  void set_allocated_buygoods(::msg::CSRspBuyGoods* buygoods);
  private:
  const ::msg::CSRspBuyGoods& _internal_buygoods() const;
  ::msg::CSRspBuyGoods* _internal_mutable_buygoods();
  public:
  void unsafe_arena_set_allocated_buygoods(
      ::msg::CSRspBuyGoods* buygoods);
  ::msg::CSRspBuyGoods* unsafe_arena_release_buygoods();

  // .msg.CSRspExchangePassportGoods ExchangePassportGoods = 83;
  bool has_exchangepassportgoods() const;
  private:
  bool _internal_has_exchangepassportgoods() const;
  public:
  void clear_exchangepassportgoods();
  const ::msg::CSRspExchangePassportGoods& exchangepassportgoods() const;
  PROTOBUF_NODISCARD ::msg::CSRspExchangePassportGoods* release_exchangepassportgoods();
  ::msg::CSRspExchangePassportGoods* mutable_exchangepassportgoods();
  void set_allocated_exchangepassportgoods(::msg::CSRspExchangePassportGoods* exchangepassportgoods);
  private:
  const ::msg::CSRspExchangePassportGoods& _internal_exchangepassportgoods() const;
  ::msg::CSRspExchangePassportGoods* _internal_mutable_exchangepassportgoods();
  public:
  void unsafe_arena_set_allocated_exchangepassportgoods(
      ::msg::CSRspExchangePassportGoods* exchangepassportgoods);
  ::msg::CSRspExchangePassportGoods* unsafe_arena_release_exchangepassportgoods();

  // .msg.CSRspUsePassportTaskCard UsePassportTaskCard = 84;
  bool has_usepassporttaskcard() const;
  private:
  bool _internal_has_usepassporttaskcard() const;
  public:
  void clear_usepassporttaskcard();
  const ::msg::CSRspUsePassportTaskCard& usepassporttaskcard() const;
  PROTOBUF_NODISCARD ::msg::CSRspUsePassportTaskCard* release_usepassporttaskcard();
  ::msg::CSRspUsePassportTaskCard* mutable_usepassporttaskcard();
  void set_allocated_usepassporttaskcard(::msg::CSRspUsePassportTaskCard* usepassporttaskcard);
  private:
  const ::msg::CSRspUsePassportTaskCard& _internal_usepassporttaskcard() const;
  ::msg::CSRspUsePassportTaskCard* _internal_mutable_usepassporttaskcard();
  public:
  void unsafe_arena_set_allocated_usepassporttaskcard(
      ::msg::CSRspUsePassportTaskCard* usepassporttaskcard);
  ::msg::CSRspUsePassportTaskCard* unsafe_arena_release_usepassporttaskcard();

  // .msg.CSRspOpenRandChest OpenRandChest = 85;
  bool has_openrandchest() const;
  private:
  bool _internal_has_openrandchest() const;
  public:
  void clear_openrandchest();
  const ::msg::CSRspOpenRandChest& openrandchest() const;
  PROTOBUF_NODISCARD ::msg::CSRspOpenRandChest* release_openrandchest();
  ::msg::CSRspOpenRandChest* mutable_openrandchest();
  void set_allocated_openrandchest(::msg::CSRspOpenRandChest* openrandchest);
  private:
  const ::msg::CSRspOpenRandChest& _internal_openrandchest() const;
  ::msg::CSRspOpenRandChest* _internal_mutable_openrandchest();
  public:
  void unsafe_arena_set_allocated_openrandchest(
      ::msg::CSRspOpenRandChest* openrandchest);
  ::msg::CSRspOpenRandChest* unsafe_arena_release_openrandchest();

  // .msg.CSRspEggLottery EggLottery = 86;
  bool has_egglottery() const;
  private:
  bool _internal_has_egglottery() const;
  public:
  void clear_egglottery();
  const ::msg::CSRspEggLottery& egglottery() const;
  PROTOBUF_NODISCARD ::msg::CSRspEggLottery* release_egglottery();
  ::msg::CSRspEggLottery* mutable_egglottery();
  void set_allocated_egglottery(::msg::CSRspEggLottery* egglottery);
  private:
  const ::msg::CSRspEggLottery& _internal_egglottery() const;
  ::msg::CSRspEggLottery* _internal_mutable_egglottery();
  public:
  void unsafe_arena_set_allocated_egglottery(
      ::msg::CSRspEggLottery* egglottery);
  ::msg::CSRspEggLottery* unsafe_arena_release_egglottery();

  // .msg.CSRspQueryDiamondBalance QueryDiamondBalance = 87;
  bool has_querydiamondbalance() const;
  private:
  bool _internal_has_querydiamondbalance() const;
  public:
  void clear_querydiamondbalance();
  const ::msg::CSRspQueryDiamondBalance& querydiamondbalance() const;
  PROTOBUF_NODISCARD ::msg::CSRspQueryDiamondBalance* release_querydiamondbalance();
  ::msg::CSRspQueryDiamondBalance* mutable_querydiamondbalance();
  void set_allocated_querydiamondbalance(::msg::CSRspQueryDiamondBalance* querydiamondbalance);
  private:
  const ::msg::CSRspQueryDiamondBalance& _internal_querydiamondbalance() const;
  ::msg::CSRspQueryDiamondBalance* _internal_mutable_querydiamondbalance();
  public:
  void unsafe_arena_set_allocated_querydiamondbalance(
      ::msg::CSRspQueryDiamondBalance* querydiamondbalance);
  ::msg::CSRspQueryDiamondBalance* unsafe_arena_release_querydiamondbalance();

  // .msg.CSRspUseItem UseItem = 88;
  bool has_useitem() const;
  private:
  bool _internal_has_useitem() const;
  public:
  void clear_useitem();
  const ::msg::CSRspUseItem& useitem() const;
  PROTOBUF_NODISCARD ::msg::CSRspUseItem* release_useitem();
  ::msg::CSRspUseItem* mutable_useitem();
  void set_allocated_useitem(::msg::CSRspUseItem* useitem);
  private:
  const ::msg::CSRspUseItem& _internal_useitem() const;
  ::msg::CSRspUseItem* _internal_mutable_useitem();
  public:
  void unsafe_arena_set_allocated_useitem(
      ::msg::CSRspUseItem* useitem);
  ::msg::CSRspUseItem* unsafe_arena_release_useitem();

  // .msg.CSRspUseExperienceCard UseExperienceCard = 89;
  bool has_useexperiencecard() const;
  private:
  bool _internal_has_useexperiencecard() const;
  public:
  void clear_useexperiencecard();
  const ::msg::CSRspUseExperienceCard& useexperiencecard() const;
  PROTOBUF_NODISCARD ::msg::CSRspUseExperienceCard* release_useexperiencecard();
  ::msg::CSRspUseExperienceCard* mutable_useexperiencecard();
  void set_allocated_useexperiencecard(::msg::CSRspUseExperienceCard* useexperiencecard);
  private:
  const ::msg::CSRspUseExperienceCard& _internal_useexperiencecard() const;
  ::msg::CSRspUseExperienceCard* _internal_mutable_useexperiencecard();
  public:
  void unsafe_arena_set_allocated_useexperiencecard(
      ::msg::CSRspUseExperienceCard* useexperiencecard);
  ::msg::CSRspUseExperienceCard* unsafe_arena_release_useexperiencecard();

  // .msg.CSRspRandTargetItem RandTargetItem = 90;
  bool has_randtargetitem() const;
  private:
  bool _internal_has_randtargetitem() const;
  public:
  void clear_randtargetitem();
  const ::msg::CSRspRandTargetItem& randtargetitem() const;
  PROTOBUF_NODISCARD ::msg::CSRspRandTargetItem* release_randtargetitem();
  ::msg::CSRspRandTargetItem* mutable_randtargetitem();
  void set_allocated_randtargetitem(::msg::CSRspRandTargetItem* randtargetitem);
  private:
  const ::msg::CSRspRandTargetItem& _internal_randtargetitem() const;
  ::msg::CSRspRandTargetItem* _internal_mutable_randtargetitem();
  public:
  void unsafe_arena_set_allocated_randtargetitem(
      ::msg::CSRspRandTargetItem* randtargetitem);
  ::msg::CSRspRandTargetItem* unsafe_arena_release_randtargetitem();

  // .msg.CSRspAddBlacklist AddBlacklist = 91;
  bool has_addblacklist() const;
  private:
  bool _internal_has_addblacklist() const;
  public:
  void clear_addblacklist();
  const ::msg::CSRspAddBlacklist& addblacklist() const;
  PROTOBUF_NODISCARD ::msg::CSRspAddBlacklist* release_addblacklist();
  ::msg::CSRspAddBlacklist* mutable_addblacklist();
  void set_allocated_addblacklist(::msg::CSRspAddBlacklist* addblacklist);
  private:
  const ::msg::CSRspAddBlacklist& _internal_addblacklist() const;
  ::msg::CSRspAddBlacklist* _internal_mutable_addblacklist();
  public:
  void unsafe_arena_set_allocated_addblacklist(
      ::msg::CSRspAddBlacklist* addblacklist);
  ::msg::CSRspAddBlacklist* unsafe_arena_release_addblacklist();

  // .msg.CSRspRemoveBlacklist RemoveBlacklist = 92;
  bool has_removeblacklist() const;
  private:
  bool _internal_has_removeblacklist() const;
  public:
  void clear_removeblacklist();
  const ::msg::CSRspRemoveBlacklist& removeblacklist() const;
  PROTOBUF_NODISCARD ::msg::CSRspRemoveBlacklist* release_removeblacklist();
  ::msg::CSRspRemoveBlacklist* mutable_removeblacklist();
  void set_allocated_removeblacklist(::msg::CSRspRemoveBlacklist* removeblacklist);
  private:
  const ::msg::CSRspRemoveBlacklist& _internal_removeblacklist() const;
  ::msg::CSRspRemoveBlacklist* _internal_mutable_removeblacklist();
  public:
  void unsafe_arena_set_allocated_removeblacklist(
      ::msg::CSRspRemoveBlacklist* removeblacklist);
  ::msg::CSRspRemoveBlacklist* unsafe_arena_release_removeblacklist();

  // .msg.CSRspReportPlayerBirth ReportPlayerBirth = 93;
  bool has_reportplayerbirth() const;
  private:
  bool _internal_has_reportplayerbirth() const;
  public:
  void clear_reportplayerbirth();
  const ::msg::CSRspReportPlayerBirth& reportplayerbirth() const;
  PROTOBUF_NODISCARD ::msg::CSRspReportPlayerBirth* release_reportplayerbirth();
  ::msg::CSRspReportPlayerBirth* mutable_reportplayerbirth();
  void set_allocated_reportplayerbirth(::msg::CSRspReportPlayerBirth* reportplayerbirth);
  private:
  const ::msg::CSRspReportPlayerBirth& _internal_reportplayerbirth() const;
  ::msg::CSRspReportPlayerBirth* _internal_mutable_reportplayerbirth();
  public:
  void unsafe_arena_set_allocated_reportplayerbirth(
      ::msg::CSRspReportPlayerBirth* reportplayerbirth);
  ::msg::CSRspReportPlayerBirth* unsafe_arena_release_reportplayerbirth();

  // .msg.CSRspReportInfoInput ReportInfoInput = 94;
  bool has_reportinfoinput() const;
  private:
  bool _internal_has_reportinfoinput() const;
  public:
  void clear_reportinfoinput();
  const ::msg::CSRspReportInfoInput& reportinfoinput() const;
  PROTOBUF_NODISCARD ::msg::CSRspReportInfoInput* release_reportinfoinput();
  ::msg::CSRspReportInfoInput* mutable_reportinfoinput();
  void set_allocated_reportinfoinput(::msg::CSRspReportInfoInput* reportinfoinput);
  private:
  const ::msg::CSRspReportInfoInput& _internal_reportinfoinput() const;
  ::msg::CSRspReportInfoInput* _internal_mutable_reportinfoinput();
  public:
  void unsafe_arena_set_allocated_reportinfoinput(
      ::msg::CSRspReportInfoInput* reportinfoinput);
  ::msg::CSRspReportInfoInput* unsafe_arena_release_reportinfoinput();

  // .msg.CSRspSendVerificationCode SendVerificationCode = 95;
  bool has_sendverificationcode() const;
  private:
  bool _internal_has_sendverificationcode() const;
  public:
  void clear_sendverificationcode();
  const ::msg::CSRspSendVerificationCode& sendverificationcode() const;
  PROTOBUF_NODISCARD ::msg::CSRspSendVerificationCode* release_sendverificationcode();
  ::msg::CSRspSendVerificationCode* mutable_sendverificationcode();
  void set_allocated_sendverificationcode(::msg::CSRspSendVerificationCode* sendverificationcode);
  private:
  const ::msg::CSRspSendVerificationCode& _internal_sendverificationcode() const;
  ::msg::CSRspSendVerificationCode* _internal_mutable_sendverificationcode();
  public:
  void unsafe_arena_set_allocated_sendverificationcode(
      ::msg::CSRspSendVerificationCode* sendverificationcode);
  ::msg::CSRspSendVerificationCode* unsafe_arena_release_sendverificationcode();

  // .msg.CSRspBindPhoneNumber BindPhoneNumber = 96;
  bool has_bindphonenumber() const;
  private:
  bool _internal_has_bindphonenumber() const;
  public:
  void clear_bindphonenumber();
  const ::msg::CSRspBindPhoneNumber& bindphonenumber() const;
  PROTOBUF_NODISCARD ::msg::CSRspBindPhoneNumber* release_bindphonenumber();
  ::msg::CSRspBindPhoneNumber* mutable_bindphonenumber();
  void set_allocated_bindphonenumber(::msg::CSRspBindPhoneNumber* bindphonenumber);
  private:
  const ::msg::CSRspBindPhoneNumber& _internal_bindphonenumber() const;
  ::msg::CSRspBindPhoneNumber* _internal_mutable_bindphonenumber();
  public:
  void unsafe_arena_set_allocated_bindphonenumber(
      ::msg::CSRspBindPhoneNumber* bindphonenumber);
  ::msg::CSRspBindPhoneNumber* unsafe_arena_release_bindphonenumber();

  // .msg.CSRspWorldInvite WorldInvite = 97;
  bool has_worldinvite() const;
  private:
  bool _internal_has_worldinvite() const;
  public:
  void clear_worldinvite();
  const ::msg::CSRspWorldInvite& worldinvite() const;
  PROTOBUF_NODISCARD ::msg::CSRspWorldInvite* release_worldinvite();
  ::msg::CSRspWorldInvite* mutable_worldinvite();
  void set_allocated_worldinvite(::msg::CSRspWorldInvite* worldinvite);
  private:
  const ::msg::CSRspWorldInvite& _internal_worldinvite() const;
  ::msg::CSRspWorldInvite* _internal_mutable_worldinvite();
  public:
  void unsafe_arena_set_allocated_worldinvite(
      ::msg::CSRspWorldInvite* worldinvite);
  ::msg::CSRspWorldInvite* unsafe_arena_release_worldinvite();

  // .msg.CSRspRemoveExpireItem RemoveExpireItem = 98;
  bool has_removeexpireitem() const;
  private:
  bool _internal_has_removeexpireitem() const;
  public:
  void clear_removeexpireitem();
  const ::msg::CSRspRemoveExpireItem& removeexpireitem() const;
  PROTOBUF_NODISCARD ::msg::CSRspRemoveExpireItem* release_removeexpireitem();
  ::msg::CSRspRemoveExpireItem* mutable_removeexpireitem();
  void set_allocated_removeexpireitem(::msg::CSRspRemoveExpireItem* removeexpireitem);
  private:
  const ::msg::CSRspRemoveExpireItem& _internal_removeexpireitem() const;
  ::msg::CSRspRemoveExpireItem* _internal_mutable_removeexpireitem();
  public:
  void unsafe_arena_set_allocated_removeexpireitem(
      ::msg::CSRspRemoveExpireItem* removeexpireitem);
  ::msg::CSRspRemoveExpireItem* unsafe_arena_release_removeexpireitem();

  // .msg.CSRspGetMallGoods GetMallGoods = 99;
  bool has_getmallgoods() const;
  private:
  bool _internal_has_getmallgoods() const;
  public:
  void clear_getmallgoods();
  const ::msg::CSRspGetMallGoods& getmallgoods() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetMallGoods* release_getmallgoods();
  ::msg::CSRspGetMallGoods* mutable_getmallgoods();
  void set_allocated_getmallgoods(::msg::CSRspGetMallGoods* getmallgoods);
  private:
  const ::msg::CSRspGetMallGoods& _internal_getmallgoods() const;
  ::msg::CSRspGetMallGoods* _internal_mutable_getmallgoods();
  public:
  void unsafe_arena_set_allocated_getmallgoods(
      ::msg::CSRspGetMallGoods* getmallgoods);
  ::msg::CSRspGetMallGoods* unsafe_arena_release_getmallgoods();

  // .msg.CSRspBuyMallGoods BuyMallGoods = 100;
  bool has_buymallgoods() const;
  private:
  bool _internal_has_buymallgoods() const;
  public:
  void clear_buymallgoods();
  const ::msg::CSRspBuyMallGoods& buymallgoods() const;
  PROTOBUF_NODISCARD ::msg::CSRspBuyMallGoods* release_buymallgoods();
  ::msg::CSRspBuyMallGoods* mutable_buymallgoods();
  void set_allocated_buymallgoods(::msg::CSRspBuyMallGoods* buymallgoods);
  private:
  const ::msg::CSRspBuyMallGoods& _internal_buymallgoods() const;
  ::msg::CSRspBuyMallGoods* _internal_mutable_buymallgoods();
  public:
  void unsafe_arena_set_allocated_buymallgoods(
      ::msg::CSRspBuyMallGoods* buymallgoods);
  ::msg::CSRspBuyMallGoods* unsafe_arena_release_buymallgoods();

  // .msg.CSRspBindSharingCode BindSharingCode = 101;
  bool has_bindsharingcode() const;
  private:
  bool _internal_has_bindsharingcode() const;
  public:
  void clear_bindsharingcode();
  const ::msg::CSRspBindSharingCode& bindsharingcode() const;
  PROTOBUF_NODISCARD ::msg::CSRspBindSharingCode* release_bindsharingcode();
  ::msg::CSRspBindSharingCode* mutable_bindsharingcode();
  void set_allocated_bindsharingcode(::msg::CSRspBindSharingCode* bindsharingcode);
  private:
  const ::msg::CSRspBindSharingCode& _internal_bindsharingcode() const;
  ::msg::CSRspBindSharingCode* _internal_mutable_bindsharingcode();
  public:
  void unsafe_arena_set_allocated_bindsharingcode(
      ::msg::CSRspBindSharingCode* bindsharingcode);
  ::msg::CSRspBindSharingCode* unsafe_arena_release_bindsharingcode();

  // .msg.CSRspWXBlessBag WXBlessBag = 102;
  bool has_wxblessbag() const;
  private:
  bool _internal_has_wxblessbag() const;
  public:
  void clear_wxblessbag();
  const ::msg::CSRspWXBlessBag& wxblessbag() const;
  PROTOBUF_NODISCARD ::msg::CSRspWXBlessBag* release_wxblessbag();
  ::msg::CSRspWXBlessBag* mutable_wxblessbag();
  void set_allocated_wxblessbag(::msg::CSRspWXBlessBag* wxblessbag);
  private:
  const ::msg::CSRspWXBlessBag& _internal_wxblessbag() const;
  ::msg::CSRspWXBlessBag* _internal_mutable_wxblessbag();
  public:
  void unsafe_arena_set_allocated_wxblessbag(
      ::msg::CSRspWXBlessBag* wxblessbag);
  ::msg::CSRspWXBlessBag* unsafe_arena_release_wxblessbag();

  // .msg.CSRspUpdateFriendsInGame UpdateFriendsInGame = 103;
  bool has_updatefriendsingame() const;
  private:
  bool _internal_has_updatefriendsingame() const;
  public:
  void clear_updatefriendsingame();
  const ::msg::CSRspUpdateFriendsInGame& updatefriendsingame() const;
  PROTOBUF_NODISCARD ::msg::CSRspUpdateFriendsInGame* release_updatefriendsingame();
  ::msg::CSRspUpdateFriendsInGame* mutable_updatefriendsingame();
  void set_allocated_updatefriendsingame(::msg::CSRspUpdateFriendsInGame* updatefriendsingame);
  private:
  const ::msg::CSRspUpdateFriendsInGame& _internal_updatefriendsingame() const;
  ::msg::CSRspUpdateFriendsInGame* _internal_mutable_updatefriendsingame();
  public:
  void unsafe_arena_set_allocated_updatefriendsingame(
      ::msg::CSRspUpdateFriendsInGame* updatefriendsingame);
  ::msg::CSRspUpdateFriendsInGame* unsafe_arena_release_updatefriendsingame();

  // .msg.CSRspShareReward ShareReward = 104;
  bool has_sharereward() const;
  private:
  bool _internal_has_sharereward() const;
  public:
  void clear_sharereward();
  const ::msg::CSRspShareReward& sharereward() const;
  PROTOBUF_NODISCARD ::msg::CSRspShareReward* release_sharereward();
  ::msg::CSRspShareReward* mutable_sharereward();
  void set_allocated_sharereward(::msg::CSRspShareReward* sharereward);
  private:
  const ::msg::CSRspShareReward& _internal_sharereward() const;
  ::msg::CSRspShareReward* _internal_mutable_sharereward();
  public:
  void unsafe_arena_set_allocated_sharereward(
      ::msg::CSRspShareReward* sharereward);
  ::msg::CSRspShareReward* unsafe_arena_release_sharereward();

  // .msg.CSRspAllFightInfo AllFightInfo = 105;
  bool has_allfightinfo() const;
  private:
  bool _internal_has_allfightinfo() const;
  public:
  void clear_allfightinfo();
  const ::msg::CSRspAllFightInfo& allfightinfo() const;
  PROTOBUF_NODISCARD ::msg::CSRspAllFightInfo* release_allfightinfo();
  ::msg::CSRspAllFightInfo* mutable_allfightinfo();
  void set_allocated_allfightinfo(::msg::CSRspAllFightInfo* allfightinfo);
  private:
  const ::msg::CSRspAllFightInfo& _internal_allfightinfo() const;
  ::msg::CSRspAllFightInfo* _internal_mutable_allfightinfo();
  public:
  void unsafe_arena_set_allocated_allfightinfo(
      ::msg::CSRspAllFightInfo* allfightinfo);
  ::msg::CSRspAllFightInfo* unsafe_arena_release_allfightinfo();

  // .msg.CSRspGetOldPlayer GetOldPlayer = 106;
  bool has_getoldplayer() const;
  private:
  bool _internal_has_getoldplayer() const;
  public:
  void clear_getoldplayer();
  const ::msg::CSRspGetOldPlayer& getoldplayer() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetOldPlayer* release_getoldplayer();
  ::msg::CSRspGetOldPlayer* mutable_getoldplayer();
  void set_allocated_getoldplayer(::msg::CSRspGetOldPlayer* getoldplayer);
  private:
  const ::msg::CSRspGetOldPlayer& _internal_getoldplayer() const;
  ::msg::CSRspGetOldPlayer* _internal_mutable_getoldplayer();
  public:
  void unsafe_arena_set_allocated_getoldplayer(
      ::msg::CSRspGetOldPlayer* getoldplayer);
  ::msg::CSRspGetOldPlayer* unsafe_arena_release_getoldplayer();

  // .msg.CSRspBindOldPlayer BindOldPlayer = 107;
  bool has_bindoldplayer() const;
  private:
  bool _internal_has_bindoldplayer() const;
  public:
  void clear_bindoldplayer();
  const ::msg::CSRspBindOldPlayer& bindoldplayer() const;
  PROTOBUF_NODISCARD ::msg::CSRspBindOldPlayer* release_bindoldplayer();
  ::msg::CSRspBindOldPlayer* mutable_bindoldplayer();
  void set_allocated_bindoldplayer(::msg::CSRspBindOldPlayer* bindoldplayer);
  private:
  const ::msg::CSRspBindOldPlayer& _internal_bindoldplayer() const;
  ::msg::CSRspBindOldPlayer* _internal_mutable_bindoldplayer();
  public:
  void unsafe_arena_set_allocated_bindoldplayer(
      ::msg::CSRspBindOldPlayer* bindoldplayer);
  ::msg::CSRspBindOldPlayer* unsafe_arena_release_bindoldplayer();

  // .msg.CSRspSendVerificationCodeWithCheckRedis SendVerificationCodeWithCheckRedis = 108;
  bool has_sendverificationcodewithcheckredis() const;
  private:
  bool _internal_has_sendverificationcodewithcheckredis() const;
  public:
  void clear_sendverificationcodewithcheckredis();
  const ::msg::CSRspSendVerificationCodeWithCheckRedis& sendverificationcodewithcheckredis() const;
  PROTOBUF_NODISCARD ::msg::CSRspSendVerificationCodeWithCheckRedis* release_sendverificationcodewithcheckredis();
  ::msg::CSRspSendVerificationCodeWithCheckRedis* mutable_sendverificationcodewithcheckredis();
  void set_allocated_sendverificationcodewithcheckredis(::msg::CSRspSendVerificationCodeWithCheckRedis* sendverificationcodewithcheckredis);
  private:
  const ::msg::CSRspSendVerificationCodeWithCheckRedis& _internal_sendverificationcodewithcheckredis() const;
  ::msg::CSRspSendVerificationCodeWithCheckRedis* _internal_mutable_sendverificationcodewithcheckredis();
  public:
  void unsafe_arena_set_allocated_sendverificationcodewithcheckredis(
      ::msg::CSRspSendVerificationCodeWithCheckRedis* sendverificationcodewithcheckredis);
  ::msg::CSRspSendVerificationCodeWithCheckRedis* unsafe_arena_release_sendverificationcodewithcheckredis();

  // .msg.CSRspReportSetting ReportSetting = 109;
  bool has_reportsetting() const;
  private:
  bool _internal_has_reportsetting() const;
  public:
  void clear_reportsetting();
  const ::msg::CSRspReportSetting& reportsetting() const;
  PROTOBUF_NODISCARD ::msg::CSRspReportSetting* release_reportsetting();
  ::msg::CSRspReportSetting* mutable_reportsetting();
  void set_allocated_reportsetting(::msg::CSRspReportSetting* reportsetting);
  private:
  const ::msg::CSRspReportSetting& _internal_reportsetting() const;
  ::msg::CSRspReportSetting* _internal_mutable_reportsetting();
  public:
  void unsafe_arena_set_allocated_reportsetting(
      ::msg::CSRspReportSetting* reportsetting);
  ::msg::CSRspReportSetting* unsafe_arena_release_reportsetting();

  // .msg.CSRspAntiData AntiData = 110;
  bool has_antidata() const;
  private:
  bool _internal_has_antidata() const;
  public:
  void clear_antidata();
  const ::msg::CSRspAntiData& antidata() const;
  PROTOBUF_NODISCARD ::msg::CSRspAntiData* release_antidata();
  ::msg::CSRspAntiData* mutable_antidata();
  void set_allocated_antidata(::msg::CSRspAntiData* antidata);
  private:
  const ::msg::CSRspAntiData& _internal_antidata() const;
  ::msg::CSRspAntiData* _internal_mutable_antidata();
  public:
  void unsafe_arena_set_allocated_antidata(
      ::msg::CSRspAntiData* antidata);
  ::msg::CSRspAntiData* unsafe_arena_release_antidata();

  // .msg.CSRspTlogData TlogData = 111;
  bool has_tlogdata() const;
  private:
  bool _internal_has_tlogdata() const;
  public:
  void clear_tlogdata();
  const ::msg::CSRspTlogData& tlogdata() const;
  PROTOBUF_NODISCARD ::msg::CSRspTlogData* release_tlogdata();
  ::msg::CSRspTlogData* mutable_tlogdata();
  void set_allocated_tlogdata(::msg::CSRspTlogData* tlogdata);
  private:
  const ::msg::CSRspTlogData& _internal_tlogdata() const;
  ::msg::CSRspTlogData* _internal_mutable_tlogdata();
  public:
  void unsafe_arena_set_allocated_tlogdata(
      ::msg::CSRspTlogData* tlogdata);
  ::msg::CSRspTlogData* unsafe_arena_release_tlogdata();

  // .msg.CSRspDaySign DaySign = 112;
  bool has_daysign() const;
  private:
  bool _internal_has_daysign() const;
  public:
  void clear_daysign();
  const ::msg::CSRspDaySign& daysign() const;
  PROTOBUF_NODISCARD ::msg::CSRspDaySign* release_daysign();
  ::msg::CSRspDaySign* mutable_daysign();
  void set_allocated_daysign(::msg::CSRspDaySign* daysign);
  private:
  const ::msg::CSRspDaySign& _internal_daysign() const;
  ::msg::CSRspDaySign* _internal_mutable_daysign();
  public:
  void unsafe_arena_set_allocated_daysign(
      ::msg::CSRspDaySign* daysign);
  ::msg::CSRspDaySign* unsafe_arena_release_daysign();

  // .msg.CSRspDayFitAvoid DayFitAvoid = 113;
  bool has_dayfitavoid() const;
  private:
  bool _internal_has_dayfitavoid() const;
  public:
  void clear_dayfitavoid();
  const ::msg::CSRspDayFitAvoid& dayfitavoid() const;
  PROTOBUF_NODISCARD ::msg::CSRspDayFitAvoid* release_dayfitavoid();
  ::msg::CSRspDayFitAvoid* mutable_dayfitavoid();
  void set_allocated_dayfitavoid(::msg::CSRspDayFitAvoid* dayfitavoid);
  private:
  const ::msg::CSRspDayFitAvoid& _internal_dayfitavoid() const;
  ::msg::CSRspDayFitAvoid* _internal_mutable_dayfitavoid();
  public:
  void unsafe_arena_set_allocated_dayfitavoid(
      ::msg::CSRspDayFitAvoid* dayfitavoid);
  ::msg::CSRspDayFitAvoid* unsafe_arena_release_dayfitavoid();

  // .msg.CSRspShareCountAward ShareCountAward = 114;
  bool has_sharecountaward() const;
  private:
  bool _internal_has_sharecountaward() const;
  public:
  void clear_sharecountaward();
  const ::msg::CSRspShareCountAward& sharecountaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspShareCountAward* release_sharecountaward();
  ::msg::CSRspShareCountAward* mutable_sharecountaward();
  void set_allocated_sharecountaward(::msg::CSRspShareCountAward* sharecountaward);
  private:
  const ::msg::CSRspShareCountAward& _internal_sharecountaward() const;
  ::msg::CSRspShareCountAward* _internal_mutable_sharecountaward();
  public:
  void unsafe_arena_set_allocated_sharecountaward(
      ::msg::CSRspShareCountAward* sharecountaward);
  ::msg::CSRspShareCountAward* unsafe_arena_release_sharecountaward();

  // .msg.CSRspRealationStar RealationStar = 115;
  bool has_realationstar() const;
  private:
  bool _internal_has_realationstar() const;
  public:
  void clear_realationstar();
  const ::msg::CSRspRealationStar& realationstar() const;
  PROTOBUF_NODISCARD ::msg::CSRspRealationStar* release_realationstar();
  ::msg::CSRspRealationStar* mutable_realationstar();
  void set_allocated_realationstar(::msg::CSRspRealationStar* realationstar);
  private:
  const ::msg::CSRspRealationStar& _internal_realationstar() const;
  ::msg::CSRspRealationStar* _internal_mutable_realationstar();
  public:
  void unsafe_arena_set_allocated_realationstar(
      ::msg::CSRspRealationStar* realationstar);
  ::msg::CSRspRealationStar* unsafe_arena_release_realationstar();

  // .msg.CSRspGetRealationStarInviteSucc GetRealationStarInviteSucc = 116;
  bool has_getrealationstarinvitesucc() const;
  private:
  bool _internal_has_getrealationstarinvitesucc() const;
  public:
  void clear_getrealationstarinvitesucc();
  const ::msg::CSRspGetRealationStarInviteSucc& getrealationstarinvitesucc() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetRealationStarInviteSucc* release_getrealationstarinvitesucc();
  ::msg::CSRspGetRealationStarInviteSucc* mutable_getrealationstarinvitesucc();
  void set_allocated_getrealationstarinvitesucc(::msg::CSRspGetRealationStarInviteSucc* getrealationstarinvitesucc);
  private:
  const ::msg::CSRspGetRealationStarInviteSucc& _internal_getrealationstarinvitesucc() const;
  ::msg::CSRspGetRealationStarInviteSucc* _internal_mutable_getrealationstarinvitesucc();
  public:
  void unsafe_arena_set_allocated_getrealationstarinvitesucc(
      ::msg::CSRspGetRealationStarInviteSucc* getrealationstarinvitesucc);
  ::msg::CSRspGetRealationStarInviteSucc* unsafe_arena_release_getrealationstarinvitesucc();

  // .msg.CSRspGetRealationStar GetRealationStar = 117;
  bool has_getrealationstar() const;
  private:
  bool _internal_has_getrealationstar() const;
  public:
  void clear_getrealationstar();
  const ::msg::CSRspGetRealationStar& getrealationstar() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetRealationStar* release_getrealationstar();
  ::msg::CSRspGetRealationStar* mutable_getrealationstar();
  void set_allocated_getrealationstar(::msg::CSRspGetRealationStar* getrealationstar);
  private:
  const ::msg::CSRspGetRealationStar& _internal_getrealationstar() const;
  ::msg::CSRspGetRealationStar* _internal_mutable_getrealationstar();
  public:
  void unsafe_arena_set_allocated_getrealationstar(
      ::msg::CSRspGetRealationStar* getrealationstar);
  ::msg::CSRspGetRealationStar* unsafe_arena_release_getrealationstar();

  // .msg.CSRspGetActRecord RspActRecord = 118;
  bool has_rspactrecord() const;
  private:
  bool _internal_has_rspactrecord() const;
  public:
  void clear_rspactrecord();
  const ::msg::CSRspGetActRecord& rspactrecord() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetActRecord* release_rspactrecord();
  ::msg::CSRspGetActRecord* mutable_rspactrecord();
  void set_allocated_rspactrecord(::msg::CSRspGetActRecord* rspactrecord);
  private:
  const ::msg::CSRspGetActRecord& _internal_rspactrecord() const;
  ::msg::CSRspGetActRecord* _internal_mutable_rspactrecord();
  public:
  void unsafe_arena_set_allocated_rspactrecord(
      ::msg::CSRspGetActRecord* rspactrecord);
  ::msg::CSRspGetActRecord* unsafe_arena_release_rspactrecord();

  // .msg.CSRspJoinVoiceTeam JoinVoiceTeam = 119;
  bool has_joinvoiceteam() const;
  private:
  bool _internal_has_joinvoiceteam() const;
  public:
  void clear_joinvoiceteam();
  const ::msg::CSRspJoinVoiceTeam& joinvoiceteam() const;
  PROTOBUF_NODISCARD ::msg::CSRspJoinVoiceTeam* release_joinvoiceteam();
  ::msg::CSRspJoinVoiceTeam* mutable_joinvoiceteam();
  void set_allocated_joinvoiceteam(::msg::CSRspJoinVoiceTeam* joinvoiceteam);
  private:
  const ::msg::CSRspJoinVoiceTeam& _internal_joinvoiceteam() const;
  ::msg::CSRspJoinVoiceTeam* _internal_mutable_joinvoiceteam();
  public:
  void unsafe_arena_set_allocated_joinvoiceteam(
      ::msg::CSRspJoinVoiceTeam* joinvoiceteam);
  ::msg::CSRspJoinVoiceTeam* unsafe_arena_release_joinvoiceteam();

  // .msg.CSRspJoinVoicePvp JoinVoicePvp = 120;
  bool has_joinvoicepvp() const;
  private:
  bool _internal_has_joinvoicepvp() const;
  public:
  void clear_joinvoicepvp();
  const ::msg::CSRspJoinVoicePvp& joinvoicepvp() const;
  PROTOBUF_NODISCARD ::msg::CSRspJoinVoicePvp* release_joinvoicepvp();
  ::msg::CSRspJoinVoicePvp* mutable_joinvoicepvp();
  void set_allocated_joinvoicepvp(::msg::CSRspJoinVoicePvp* joinvoicepvp);
  private:
  const ::msg::CSRspJoinVoicePvp& _internal_joinvoicepvp() const;
  ::msg::CSRspJoinVoicePvp* _internal_mutable_joinvoicepvp();
  public:
  void unsafe_arena_set_allocated_joinvoicepvp(
      ::msg::CSRspJoinVoicePvp* joinvoicepvp);
  ::msg::CSRspJoinVoicePvp* unsafe_arena_release_joinvoicepvp();

  // .msg.CSRspJoinVoiceCamp JoinVoiceCamp = 121;
  bool has_joinvoicecamp() const;
  private:
  bool _internal_has_joinvoicecamp() const;
  public:
  void clear_joinvoicecamp();
  const ::msg::CSRspJoinVoiceCamp& joinvoicecamp() const;
  PROTOBUF_NODISCARD ::msg::CSRspJoinVoiceCamp* release_joinvoicecamp();
  ::msg::CSRspJoinVoiceCamp* mutable_joinvoicecamp();
  void set_allocated_joinvoicecamp(::msg::CSRspJoinVoiceCamp* joinvoicecamp);
  private:
  const ::msg::CSRspJoinVoiceCamp& _internal_joinvoicecamp() const;
  ::msg::CSRspJoinVoiceCamp* _internal_mutable_joinvoicecamp();
  public:
  void unsafe_arena_set_allocated_joinvoicecamp(
      ::msg::CSRspJoinVoiceCamp* joinvoicecamp);
  ::msg::CSRspJoinVoiceCamp* unsafe_arena_release_joinvoicecamp();

  // .msg.CSRspUserCountrySet UserCountrySet = 122;
  bool has_usercountryset() const;
  private:
  bool _internal_has_usercountryset() const;
  public:
  void clear_usercountryset();
  const ::msg::CSRspUserCountrySet& usercountryset() const;
  PROTOBUF_NODISCARD ::msg::CSRspUserCountrySet* release_usercountryset();
  ::msg::CSRspUserCountrySet* mutable_usercountryset();
  void set_allocated_usercountryset(::msg::CSRspUserCountrySet* usercountryset);
  private:
  const ::msg::CSRspUserCountrySet& _internal_usercountryset() const;
  ::msg::CSRspUserCountrySet* _internal_mutable_usercountryset();
  public:
  void unsafe_arena_set_allocated_usercountryset(
      ::msg::CSRspUserCountrySet* usercountryset);
  ::msg::CSRspUserCountrySet* unsafe_arena_release_usercountryset();

  // .msg.CSRspObserve Observe = 123;
  bool has_observe() const;
  private:
  bool _internal_has_observe() const;
  public:
  void clear_observe();
  const ::msg::CSRspObserve& observe() const;
  PROTOBUF_NODISCARD ::msg::CSRspObserve* release_observe();
  ::msg::CSRspObserve* mutable_observe();
  void set_allocated_observe(::msg::CSRspObserve* observe);
  private:
  const ::msg::CSRspObserve& _internal_observe() const;
  ::msg::CSRspObserve* _internal_mutable_observe();
  public:
  void unsafe_arena_set_allocated_observe(
      ::msg::CSRspObserve* observe);
  ::msg::CSRspObserve* unsafe_arena_release_observe();

  // .msg.CSRspGetRecommendPvp GetRecommendPvp = 124;
  bool has_getrecommendpvp() const;
  private:
  bool _internal_has_getrecommendpvp() const;
  public:
  void clear_getrecommendpvp();
  const ::msg::CSRspGetRecommendPvp& getrecommendpvp() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetRecommendPvp* release_getrecommendpvp();
  ::msg::CSRspGetRecommendPvp* mutable_getrecommendpvp();
  void set_allocated_getrecommendpvp(::msg::CSRspGetRecommendPvp* getrecommendpvp);
  private:
  const ::msg::CSRspGetRecommendPvp& _internal_getrecommendpvp() const;
  ::msg::CSRspGetRecommendPvp* _internal_mutable_getrecommendpvp();
  public:
  void unsafe_arena_set_allocated_getrecommendpvp(
      ::msg::CSRspGetRecommendPvp* getrecommendpvp);
  ::msg::CSRspGetRecommendPvp* unsafe_arena_release_getrecommendpvp();

  // .msg.CSRspObserveLogin ObserveLogin = 125;
  bool has_observelogin() const;
  private:
  bool _internal_has_observelogin() const;
  public:
  void clear_observelogin();
  const ::msg::CSRspObserveLogin& observelogin() const;
  PROTOBUF_NODISCARD ::msg::CSRspObserveLogin* release_observelogin();
  ::msg::CSRspObserveLogin* mutable_observelogin();
  void set_allocated_observelogin(::msg::CSRspObserveLogin* observelogin);
  private:
  const ::msg::CSRspObserveLogin& _internal_observelogin() const;
  ::msg::CSRspObserveLogin* _internal_mutable_observelogin();
  public:
  void unsafe_arena_set_allocated_observelogin(
      ::msg::CSRspObserveLogin* observelogin);
  ::msg::CSRspObserveLogin* unsafe_arena_release_observelogin();

  // .msg.CSRspQuitObserve QuitObserve = 126;
  bool has_quitobserve() const;
  private:
  bool _internal_has_quitobserve() const;
  public:
  void clear_quitobserve();
  const ::msg::CSRspQuitObserve& quitobserve() const;
  PROTOBUF_NODISCARD ::msg::CSRspQuitObserve* release_quitobserve();
  ::msg::CSRspQuitObserve* mutable_quitobserve();
  void set_allocated_quitobserve(::msg::CSRspQuitObserve* quitobserve);
  private:
  const ::msg::CSRspQuitObserve& _internal_quitobserve() const;
  ::msg::CSRspQuitObserve* _internal_mutable_quitobserve();
  public:
  void unsafe_arena_set_allocated_quitobserve(
      ::msg::CSRspQuitObserve* quitobserve);
  ::msg::CSRspQuitObserve* unsafe_arena_release_quitobserve();

  // .msg.CSRspGetObserveInfo GetObserveInfo = 127;
  bool has_getobserveinfo() const;
  private:
  bool _internal_has_getobserveinfo() const;
  public:
  void clear_getobserveinfo();
  const ::msg::CSRspGetObserveInfo& getobserveinfo() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetObserveInfo* release_getobserveinfo();
  ::msg::CSRspGetObserveInfo* mutable_getobserveinfo();
  void set_allocated_getobserveinfo(::msg::CSRspGetObserveInfo* getobserveinfo);
  private:
  const ::msg::CSRspGetObserveInfo& _internal_getobserveinfo() const;
  ::msg::CSRspGetObserveInfo* _internal_mutable_getobserveinfo();
  public:
  void unsafe_arena_set_allocated_getobserveinfo(
      ::msg::CSRspGetObserveInfo* getobserveinfo);
  ::msg::CSRspGetObserveInfo* unsafe_arena_release_getobserveinfo();

  // .msg.CSRspFreeFlow FreeFlow = 128;
  bool has_freeflow() const;
  private:
  bool _internal_has_freeflow() const;
  public:
  void clear_freeflow();
  const ::msg::CSRspFreeFlow& freeflow() const;
  PROTOBUF_NODISCARD ::msg::CSRspFreeFlow* release_freeflow();
  ::msg::CSRspFreeFlow* mutable_freeflow();
  void set_allocated_freeflow(::msg::CSRspFreeFlow* freeflow);
  private:
  const ::msg::CSRspFreeFlow& _internal_freeflow() const;
  ::msg::CSRspFreeFlow* _internal_mutable_freeflow();
  public:
  void unsafe_arena_set_allocated_freeflow(
      ::msg::CSRspFreeFlow* freeflow);
  ::msg::CSRspFreeFlow* unsafe_arena_release_freeflow();

  // .msg.CSRspSetPushToken SetPushToken = 129;
  bool has_setpushtoken() const;
  private:
  bool _internal_has_setpushtoken() const;
  public:
  void clear_setpushtoken();
  const ::msg::CSRspSetPushToken& setpushtoken() const;
  PROTOBUF_NODISCARD ::msg::CSRspSetPushToken* release_setpushtoken();
  ::msg::CSRspSetPushToken* mutable_setpushtoken();
  void set_allocated_setpushtoken(::msg::CSRspSetPushToken* setpushtoken);
  private:
  const ::msg::CSRspSetPushToken& _internal_setpushtoken() const;
  ::msg::CSRspSetPushToken* _internal_mutable_setpushtoken();
  public:
  void unsafe_arena_set_allocated_setpushtoken(
      ::msg::CSRspSetPushToken* setpushtoken);
  ::msg::CSRspSetPushToken* unsafe_arena_release_setpushtoken();

  // .msg.CSRspTlogEvent TlogEvent = 130;
  bool has_tlogevent() const;
  private:
  bool _internal_has_tlogevent() const;
  public:
  void clear_tlogevent();
  const ::msg::CSRspTlogEvent& tlogevent() const;
  PROTOBUF_NODISCARD ::msg::CSRspTlogEvent* release_tlogevent();
  ::msg::CSRspTlogEvent* mutable_tlogevent();
  void set_allocated_tlogevent(::msg::CSRspTlogEvent* tlogevent);
  private:
  const ::msg::CSRspTlogEvent& _internal_tlogevent() const;
  ::msg::CSRspTlogEvent* _internal_mutable_tlogevent();
  public:
  void unsafe_arena_set_allocated_tlogevent(
      ::msg::CSRspTlogEvent* tlogevent);
  ::msg::CSRspTlogEvent* unsafe_arena_release_tlogevent();

  // .msg.CSRspWxVVipAward WxVVipAward = 131;
  bool has_wxvvipaward() const;
  private:
  bool _internal_has_wxvvipaward() const;
  public:
  void clear_wxvvipaward();
  const ::msg::CSRspWxVVipAward& wxvvipaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspWxVVipAward* release_wxvvipaward();
  ::msg::CSRspWxVVipAward* mutable_wxvvipaward();
  void set_allocated_wxvvipaward(::msg::CSRspWxVVipAward* wxvvipaward);
  private:
  const ::msg::CSRspWxVVipAward& _internal_wxvvipaward() const;
  ::msg::CSRspWxVVipAward* _internal_mutable_wxvvipaward();
  public:
  void unsafe_arena_set_allocated_wxvvipaward(
      ::msg::CSRspWxVVipAward* wxvvipaward);
  ::msg::CSRspWxVVipAward* unsafe_arena_release_wxvvipaward();

  // .msg.CSRspGetRelationStarWX RelationStarWX = 132;
  bool has_relationstarwx() const;
  private:
  bool _internal_has_relationstarwx() const;
  public:
  void clear_relationstarwx();
  const ::msg::CSRspGetRelationStarWX& relationstarwx() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetRelationStarWX* release_relationstarwx();
  ::msg::CSRspGetRelationStarWX* mutable_relationstarwx();
  void set_allocated_relationstarwx(::msg::CSRspGetRelationStarWX* relationstarwx);
  private:
  const ::msg::CSRspGetRelationStarWX& _internal_relationstarwx() const;
  ::msg::CSRspGetRelationStarWX* _internal_mutable_relationstarwx();
  public:
  void unsafe_arena_set_allocated_relationstarwx(
      ::msg::CSRspGetRelationStarWX* relationstarwx);
  ::msg::CSRspGetRelationStarWX* unsafe_arena_release_relationstarwx();

  // .msg.CSRspSendWxRedPacket SendWxRedPacket = 133;
  bool has_sendwxredpacket() const;
  private:
  bool _internal_has_sendwxredpacket() const;
  public:
  void clear_sendwxredpacket();
  const ::msg::CSRspSendWxRedPacket& sendwxredpacket() const;
  PROTOBUF_NODISCARD ::msg::CSRspSendWxRedPacket* release_sendwxredpacket();
  ::msg::CSRspSendWxRedPacket* mutable_sendwxredpacket();
  void set_allocated_sendwxredpacket(::msg::CSRspSendWxRedPacket* sendwxredpacket);
  private:
  const ::msg::CSRspSendWxRedPacket& _internal_sendwxredpacket() const;
  ::msg::CSRspSendWxRedPacket* _internal_mutable_sendwxredpacket();
  public:
  void unsafe_arena_set_allocated_sendwxredpacket(
      ::msg::CSRspSendWxRedPacket* sendwxredpacket);
  ::msg::CSRspSendWxRedPacket* unsafe_arena_release_sendwxredpacket();

  // .msg.CSRspRecvWxRedPacket RecvWxRedPacket = 134;
  bool has_recvwxredpacket() const;
  private:
  bool _internal_has_recvwxredpacket() const;
  public:
  void clear_recvwxredpacket();
  const ::msg::CSRspRecvWxRedPacket& recvwxredpacket() const;
  PROTOBUF_NODISCARD ::msg::CSRspRecvWxRedPacket* release_recvwxredpacket();
  ::msg::CSRspRecvWxRedPacket* mutable_recvwxredpacket();
  void set_allocated_recvwxredpacket(::msg::CSRspRecvWxRedPacket* recvwxredpacket);
  private:
  const ::msg::CSRspRecvWxRedPacket& _internal_recvwxredpacket() const;
  ::msg::CSRspRecvWxRedPacket* _internal_mutable_recvwxredpacket();
  public:
  void unsafe_arena_set_allocated_recvwxredpacket(
      ::msg::CSRspRecvWxRedPacket* recvwxredpacket);
  ::msg::CSRspRecvWxRedPacket* unsafe_arena_release_recvwxredpacket();

  // .msg.CSRspWxRedPktLike WxRedPktLike = 135;
  bool has_wxredpktlike() const;
  private:
  bool _internal_has_wxredpktlike() const;
  public:
  void clear_wxredpktlike();
  const ::msg::CSRspWxRedPktLike& wxredpktlike() const;
  PROTOBUF_NODISCARD ::msg::CSRspWxRedPktLike* release_wxredpktlike();
  ::msg::CSRspWxRedPktLike* mutable_wxredpktlike();
  void set_allocated_wxredpktlike(::msg::CSRspWxRedPktLike* wxredpktlike);
  private:
  const ::msg::CSRspWxRedPktLike& _internal_wxredpktlike() const;
  ::msg::CSRspWxRedPktLike* _internal_mutable_wxredpktlike();
  public:
  void unsafe_arena_set_allocated_wxredpktlike(
      ::msg::CSRspWxRedPktLike* wxredpktlike);
  ::msg::CSRspWxRedPktLike* unsafe_arena_release_wxredpktlike();

  // .msg.CSRspWxRedPktRank WxRedPktRank = 136;
  bool has_wxredpktrank() const;
  private:
  bool _internal_has_wxredpktrank() const;
  public:
  void clear_wxredpktrank();
  const ::msg::CSRspWxRedPktRank& wxredpktrank() const;
  PROTOBUF_NODISCARD ::msg::CSRspWxRedPktRank* release_wxredpktrank();
  ::msg::CSRspWxRedPktRank* mutable_wxredpktrank();
  void set_allocated_wxredpktrank(::msg::CSRspWxRedPktRank* wxredpktrank);
  private:
  const ::msg::CSRspWxRedPktRank& _internal_wxredpktrank() const;
  ::msg::CSRspWxRedPktRank* _internal_mutable_wxredpktrank();
  public:
  void unsafe_arena_set_allocated_wxredpktrank(
      ::msg::CSRspWxRedPktRank* wxredpktrank);
  ::msg::CSRspWxRedPktRank* unsafe_arena_release_wxredpktrank();

  // .msg.CSRspObservePrivilege SetObservePrivilege = 137;
  bool has_setobserveprivilege() const;
  private:
  bool _internal_has_setobserveprivilege() const;
  public:
  void clear_setobserveprivilege();
  const ::msg::CSRspObservePrivilege& setobserveprivilege() const;
  PROTOBUF_NODISCARD ::msg::CSRspObservePrivilege* release_setobserveprivilege();
  ::msg::CSRspObservePrivilege* mutable_setobserveprivilege();
  void set_allocated_setobserveprivilege(::msg::CSRspObservePrivilege* setobserveprivilege);
  private:
  const ::msg::CSRspObservePrivilege& _internal_setobserveprivilege() const;
  ::msg::CSRspObservePrivilege* _internal_mutable_setobserveprivilege();
  public:
  void unsafe_arena_set_allocated_setobserveprivilege(
      ::msg::CSRspObservePrivilege* setobserveprivilege);
  ::msg::CSRspObservePrivilege* unsafe_arena_release_setobserveprivilege();

  // .msg.CSRspPresetFastChat PresetFastChat = 138;
  bool has_presetfastchat() const;
  private:
  bool _internal_has_presetfastchat() const;
  public:
  void clear_presetfastchat();
  const ::msg::CSRspPresetFastChat& presetfastchat() const;
  PROTOBUF_NODISCARD ::msg::CSRspPresetFastChat* release_presetfastchat();
  ::msg::CSRspPresetFastChat* mutable_presetfastchat();
  void set_allocated_presetfastchat(::msg::CSRspPresetFastChat* presetfastchat);
  private:
  const ::msg::CSRspPresetFastChat& _internal_presetfastchat() const;
  ::msg::CSRspPresetFastChat* _internal_mutable_presetfastchat();
  public:
  void unsafe_arena_set_allocated_presetfastchat(
      ::msg::CSRspPresetFastChat* presetfastchat);
  ::msg::CSRspPresetFastChat* unsafe_arena_release_presetfastchat();

  // .msg.CSRspChangeSlotTeam ChangeSlotTeam = 139;
  bool has_changeslotteam() const;
  private:
  bool _internal_has_changeslotteam() const;
  public:
  void clear_changeslotteam();
  const ::msg::CSRspChangeSlotTeam& changeslotteam() const;
  PROTOBUF_NODISCARD ::msg::CSRspChangeSlotTeam* release_changeslotteam();
  ::msg::CSRspChangeSlotTeam* mutable_changeslotteam();
  void set_allocated_changeslotteam(::msg::CSRspChangeSlotTeam* changeslotteam);
  private:
  const ::msg::CSRspChangeSlotTeam& _internal_changeslotteam() const;
  ::msg::CSRspChangeSlotTeam* _internal_mutable_changeslotteam();
  public:
  void unsafe_arena_set_allocated_changeslotteam(
      ::msg::CSRspChangeSlotTeam* changeslotteam);
  ::msg::CSRspChangeSlotTeam* unsafe_arena_release_changeslotteam();

  // .msg.CSRspChangeSubModeTeam ChangeSubModeTeam = 140;
  bool has_changesubmodeteam() const;
  private:
  bool _internal_has_changesubmodeteam() const;
  public:
  void clear_changesubmodeteam();
  const ::msg::CSRspChangeSubModeTeam& changesubmodeteam() const;
  PROTOBUF_NODISCARD ::msg::CSRspChangeSubModeTeam* release_changesubmodeteam();
  ::msg::CSRspChangeSubModeTeam* mutable_changesubmodeteam();
  void set_allocated_changesubmodeteam(::msg::CSRspChangeSubModeTeam* changesubmodeteam);
  private:
  const ::msg::CSRspChangeSubModeTeam& _internal_changesubmodeteam() const;
  ::msg::CSRspChangeSubModeTeam* _internal_mutable_changesubmodeteam();
  public:
  void unsafe_arena_set_allocated_changesubmodeteam(
      ::msg::CSRspChangeSubModeTeam* changesubmodeteam);
  ::msg::CSRspChangeSubModeTeam* unsafe_arena_release_changesubmodeteam();

  // .msg.CSRspConfirmChangeSlotTeam ConfirmChangeSlotTeam = 141;
  bool has_confirmchangeslotteam() const;
  private:
  bool _internal_has_confirmchangeslotteam() const;
  public:
  void clear_confirmchangeslotteam();
  const ::msg::CSRspConfirmChangeSlotTeam& confirmchangeslotteam() const;
  PROTOBUF_NODISCARD ::msg::CSRspConfirmChangeSlotTeam* release_confirmchangeslotteam();
  ::msg::CSRspConfirmChangeSlotTeam* mutable_confirmchangeslotteam();
  void set_allocated_confirmchangeslotteam(::msg::CSRspConfirmChangeSlotTeam* confirmchangeslotteam);
  private:
  const ::msg::CSRspConfirmChangeSlotTeam& _internal_confirmchangeslotteam() const;
  ::msg::CSRspConfirmChangeSlotTeam* _internal_mutable_confirmchangeslotteam();
  public:
  void unsafe_arena_set_allocated_confirmchangeslotteam(
      ::msg::CSRspConfirmChangeSlotTeam* confirmchangeslotteam);
  ::msg::CSRspConfirmChangeSlotTeam* unsafe_arena_release_confirmchangeslotteam();

  // .msg.CSRspPvpRoundEnd PvpRoundEnd = 142;
  bool has_pvproundend() const;
  private:
  bool _internal_has_pvproundend() const;
  public:
  void clear_pvproundend();
  const ::msg::CSRspPvpRoundEnd& pvproundend() const;
  PROTOBUF_NODISCARD ::msg::CSRspPvpRoundEnd* release_pvproundend();
  ::msg::CSRspPvpRoundEnd* mutable_pvproundend();
  void set_allocated_pvproundend(::msg::CSRspPvpRoundEnd* pvproundend);
  private:
  const ::msg::CSRspPvpRoundEnd& _internal_pvproundend() const;
  ::msg::CSRspPvpRoundEnd* _internal_mutable_pvproundend();
  public:
  void unsafe_arena_set_allocated_pvproundend(
      ::msg::CSRspPvpRoundEnd* pvproundend);
  ::msg::CSRspPvpRoundEnd* unsafe_arena_release_pvproundend();

  // .msg.CSRspPvp Pvp = 143;
  bool has_pvp() const;
  private:
  bool _internal_has_pvp() const;
  public:
  void clear_pvp();
  const ::msg::CSRspPvp& pvp() const;
  PROTOBUF_NODISCARD ::msg::CSRspPvp* release_pvp();
  ::msg::CSRspPvp* mutable_pvp();
  void set_allocated_pvp(::msg::CSRspPvp* pvp);
  private:
  const ::msg::CSRspPvp& _internal_pvp() const;
  ::msg::CSRspPvp* _internal_mutable_pvp();
  public:
  void unsafe_arena_set_allocated_pvp(
      ::msg::CSRspPvp* pvp);
  ::msg::CSRspPvp* unsafe_arena_release_pvp();

  // .msg.CSRspTeamReady TeamReady = 144;
  bool has_teamready() const;
  private:
  bool _internal_has_teamready() const;
  public:
  void clear_teamready();
  const ::msg::CSRspTeamReady& teamready() const;
  PROTOBUF_NODISCARD ::msg::CSRspTeamReady* release_teamready();
  ::msg::CSRspTeamReady* mutable_teamready();
  void set_allocated_teamready(::msg::CSRspTeamReady* teamready);
  private:
  const ::msg::CSRspTeamReady& _internal_teamready() const;
  ::msg::CSRspTeamReady* _internal_mutable_teamready();
  public:
  void unsafe_arena_set_allocated_teamready(
      ::msg::CSRspTeamReady* teamready);
  ::msg::CSRspTeamReady* unsafe_arena_release_teamready();

  // .msg.CSRspBindOldBusinessPlayer BindOldBusinessPlayer = 145;
  bool has_bindoldbusinessplayer() const;
  private:
  bool _internal_has_bindoldbusinessplayer() const;
  public:
  void clear_bindoldbusinessplayer();
  const ::msg::CSRspBindOldBusinessPlayer& bindoldbusinessplayer() const;
  PROTOBUF_NODISCARD ::msg::CSRspBindOldBusinessPlayer* release_bindoldbusinessplayer();
  ::msg::CSRspBindOldBusinessPlayer* mutable_bindoldbusinessplayer();
  void set_allocated_bindoldbusinessplayer(::msg::CSRspBindOldBusinessPlayer* bindoldbusinessplayer);
  private:
  const ::msg::CSRspBindOldBusinessPlayer& _internal_bindoldbusinessplayer() const;
  ::msg::CSRspBindOldBusinessPlayer* _internal_mutable_bindoldbusinessplayer();
  public:
  void unsafe_arena_set_allocated_bindoldbusinessplayer(
      ::msg::CSRspBindOldBusinessPlayer* bindoldbusinessplayer);
  ::msg::CSRspBindOldBusinessPlayer* unsafe_arena_release_bindoldbusinessplayer();

  // .msg.CSRspTranslate Translate = 146;
  bool has_translate() const;
  private:
  bool _internal_has_translate() const;
  public:
  void clear_translate();
  const ::msg::CSRspTranslate& translate() const;
  PROTOBUF_NODISCARD ::msg::CSRspTranslate* release_translate();
  ::msg::CSRspTranslate* mutable_translate();
  void set_allocated_translate(::msg::CSRspTranslate* translate);
  private:
  const ::msg::CSRspTranslate& _internal_translate() const;
  ::msg::CSRspTranslate* _internal_mutable_translate();
  public:
  void unsafe_arena_set_allocated_translate(
      ::msg::CSRspTranslate* translate);
  ::msg::CSRspTranslate* unsafe_arena_release_translate();

  // .msg.CSRspSubmitQuestionnaire SubmitQuestionnaire = 147;
  bool has_submitquestionnaire() const;
  private:
  bool _internal_has_submitquestionnaire() const;
  public:
  void clear_submitquestionnaire();
  const ::msg::CSRspSubmitQuestionnaire& submitquestionnaire() const;
  PROTOBUF_NODISCARD ::msg::CSRspSubmitQuestionnaire* release_submitquestionnaire();
  ::msg::CSRspSubmitQuestionnaire* mutable_submitquestionnaire();
  void set_allocated_submitquestionnaire(::msg::CSRspSubmitQuestionnaire* submitquestionnaire);
  private:
  const ::msg::CSRspSubmitQuestionnaire& _internal_submitquestionnaire() const;
  ::msg::CSRspSubmitQuestionnaire* _internal_mutable_submitquestionnaire();
  public:
  void unsafe_arena_set_allocated_submitquestionnaire(
      ::msg::CSRspSubmitQuestionnaire* submitquestionnaire);
  ::msg::CSRspSubmitQuestionnaire* unsafe_arena_release_submitquestionnaire();

  // .msg.CSRspCancelChangeSlot CancelChangeSlot = 148;
  bool has_cancelchangeslot() const;
  private:
  bool _internal_has_cancelchangeslot() const;
  public:
  void clear_cancelchangeslot();
  const ::msg::CSRspCancelChangeSlot& cancelchangeslot() const;
  PROTOBUF_NODISCARD ::msg::CSRspCancelChangeSlot* release_cancelchangeslot();
  ::msg::CSRspCancelChangeSlot* mutable_cancelchangeslot();
  void set_allocated_cancelchangeslot(::msg::CSRspCancelChangeSlot* cancelchangeslot);
  private:
  const ::msg::CSRspCancelChangeSlot& _internal_cancelchangeslot() const;
  ::msg::CSRspCancelChangeSlot* _internal_mutable_cancelchangeslot();
  public:
  void unsafe_arena_set_allocated_cancelchangeslot(
      ::msg::CSRspCancelChangeSlot* cancelchangeslot);
  ::msg::CSRspCancelChangeSlot* unsafe_arena_release_cancelchangeslot();

  // .msg.CSRspSetChessSkin SetChessSkin = 149;
  bool has_setchessskin() const;
  private:
  bool _internal_has_setchessskin() const;
  public:
  void clear_setchessskin();
  const ::msg::CSRspSetChessSkin& setchessskin() const;
  PROTOBUF_NODISCARD ::msg::CSRspSetChessSkin* release_setchessskin();
  ::msg::CSRspSetChessSkin* mutable_setchessskin();
  void set_allocated_setchessskin(::msg::CSRspSetChessSkin* setchessskin);
  private:
  const ::msg::CSRspSetChessSkin& _internal_setchessskin() const;
  ::msg::CSRspSetChessSkin* _internal_mutable_setchessskin();
  public:
  void unsafe_arena_set_allocated_setchessskin(
      ::msg::CSRspSetChessSkin* setchessskin);
  ::msg::CSRspSetChessSkin* unsafe_arena_release_setchessskin();

  // .msg.CSRspUnsetChessSkin UnsetChessSkin = 150;
  bool has_unsetchessskin() const;
  private:
  bool _internal_has_unsetchessskin() const;
  public:
  void clear_unsetchessskin();
  const ::msg::CSRspUnsetChessSkin& unsetchessskin() const;
  PROTOBUF_NODISCARD ::msg::CSRspUnsetChessSkin* release_unsetchessskin();
  ::msg::CSRspUnsetChessSkin* mutable_unsetchessskin();
  void set_allocated_unsetchessskin(::msg::CSRspUnsetChessSkin* unsetchessskin);
  private:
  const ::msg::CSRspUnsetChessSkin& _internal_unsetchessskin() const;
  ::msg::CSRspUnsetChessSkin* _internal_mutable_unsetchessskin();
  public:
  void unsafe_arena_set_allocated_unsetchessskin(
      ::msg::CSRspUnsetChessSkin* unsetchessskin);
  ::msg::CSRspUnsetChessSkin* unsafe_arena_release_unsetchessskin();

  // .msg.CSRspCompose Compose = 151;
  bool has_compose() const;
  private:
  bool _internal_has_compose() const;
  public:
  void clear_compose();
  const ::msg::CSRspCompose& compose() const;
  PROTOBUF_NODISCARD ::msg::CSRspCompose* release_compose();
  ::msg::CSRspCompose* mutable_compose();
  void set_allocated_compose(::msg::CSRspCompose* compose);
  private:
  const ::msg::CSRspCompose& _internal_compose() const;
  ::msg::CSRspCompose* _internal_mutable_compose();
  public:
  void unsafe_arena_set_allocated_compose(
      ::msg::CSRspCompose* compose);
  ::msg::CSRspCompose* unsafe_arena_release_compose();

  // .msg.CSRspVideo Video = 152;
  bool has_video() const;
  private:
  bool _internal_has_video() const;
  public:
  void clear_video();
  const ::msg::CSRspVideo& video() const;
  PROTOBUF_NODISCARD ::msg::CSRspVideo* release_video();
  ::msg::CSRspVideo* mutable_video();
  void set_allocated_video(::msg::CSRspVideo* video);
  private:
  const ::msg::CSRspVideo& _internal_video() const;
  ::msg::CSRspVideo* _internal_mutable_video();
  public:
  void unsafe_arena_set_allocated_video(
      ::msg::CSRspVideo* video);
  ::msg::CSRspVideo* unsafe_arena_release_video();

  // .msg.CSRspOffHelpReddot OffHelpReddot = 153;
  bool has_offhelpreddot() const;
  private:
  bool _internal_has_offhelpreddot() const;
  public:
  void clear_offhelpreddot();
  const ::msg::CSRspOffHelpReddot& offhelpreddot() const;
  PROTOBUF_NODISCARD ::msg::CSRspOffHelpReddot* release_offhelpreddot();
  ::msg::CSRspOffHelpReddot* mutable_offhelpreddot();
  void set_allocated_offhelpreddot(::msg::CSRspOffHelpReddot* offhelpreddot);
  private:
  const ::msg::CSRspOffHelpReddot& _internal_offhelpreddot() const;
  ::msg::CSRspOffHelpReddot* _internal_mutable_offhelpreddot();
  public:
  void unsafe_arena_set_allocated_offhelpreddot(
      ::msg::CSRspOffHelpReddot* offhelpreddot);
  ::msg::CSRspOffHelpReddot* unsafe_arena_release_offhelpreddot();

  // .msg.CSRspChangeLanguage ChangeLanguage = 154;
  bool has_changelanguage() const;
  private:
  bool _internal_has_changelanguage() const;
  public:
  void clear_changelanguage();
  const ::msg::CSRspChangeLanguage& changelanguage() const;
  PROTOBUF_NODISCARD ::msg::CSRspChangeLanguage* release_changelanguage();
  ::msg::CSRspChangeLanguage* mutable_changelanguage();
  void set_allocated_changelanguage(::msg::CSRspChangeLanguage* changelanguage);
  private:
  const ::msg::CSRspChangeLanguage& _internal_changelanguage() const;
  ::msg::CSRspChangeLanguage* _internal_mutable_changelanguage();
  public:
  void unsafe_arena_set_allocated_changelanguage(
      ::msg::CSRspChangeLanguage* changelanguage);
  ::msg::CSRspChangeLanguage* unsafe_arena_release_changelanguage();

  // .msg.CSRspSetProvince SetProvince = 155;
  bool has_setprovince() const;
  private:
  bool _internal_has_setprovince() const;
  public:
  void clear_setprovince();
  const ::msg::CSRspSetProvince& setprovince() const;
  PROTOBUF_NODISCARD ::msg::CSRspSetProvince* release_setprovince();
  ::msg::CSRspSetProvince* mutable_setprovince();
  void set_allocated_setprovince(::msg::CSRspSetProvince* setprovince);
  private:
  const ::msg::CSRspSetProvince& _internal_setprovince() const;
  ::msg::CSRspSetProvince* _internal_mutable_setprovince();
  public:
  void unsafe_arena_set_allocated_setprovince(
      ::msg::CSRspSetProvince* setprovince);
  ::msg::CSRspSetProvince* unsafe_arena_release_setprovince();

  // .msg.CSRspLongyuanVoice LongyuanVoice = 156;
  bool has_longyuanvoice() const;
  private:
  bool _internal_has_longyuanvoice() const;
  public:
  void clear_longyuanvoice();
  const ::msg::CSRspLongyuanVoice& longyuanvoice() const;
  PROTOBUF_NODISCARD ::msg::CSRspLongyuanVoice* release_longyuanvoice();
  ::msg::CSRspLongyuanVoice* mutable_longyuanvoice();
  void set_allocated_longyuanvoice(::msg::CSRspLongyuanVoice* longyuanvoice);
  private:
  const ::msg::CSRspLongyuanVoice& _internal_longyuanvoice() const;
  ::msg::CSRspLongyuanVoice* _internal_mutable_longyuanvoice();
  public:
  void unsafe_arena_set_allocated_longyuanvoice(
      ::msg::CSRspLongyuanVoice* longyuanvoice);
  ::msg::CSRspLongyuanVoice* unsafe_arena_release_longyuanvoice();

  // .msg.CSRspEnrollTournament EnrollTournament = 157;
  bool has_enrolltournament() const;
  private:
  bool _internal_has_enrolltournament() const;
  public:
  void clear_enrolltournament();
  const ::msg::CSRspEnrollTournament& enrolltournament() const;
  PROTOBUF_NODISCARD ::msg::CSRspEnrollTournament* release_enrolltournament();
  ::msg::CSRspEnrollTournament* mutable_enrolltournament();
  void set_allocated_enrolltournament(::msg::CSRspEnrollTournament* enrolltournament);
  private:
  const ::msg::CSRspEnrollTournament& _internal_enrolltournament() const;
  ::msg::CSRspEnrollTournament* _internal_mutable_enrolltournament();
  public:
  void unsafe_arena_set_allocated_enrolltournament(
      ::msg::CSRspEnrollTournament* enrolltournament);
  ::msg::CSRspEnrollTournament* unsafe_arena_release_enrolltournament();

  // .msg.CSRspJoinTournamentRoom JoinTournamentRoom = 158;
  bool has_jointournamentroom() const;
  private:
  bool _internal_has_jointournamentroom() const;
  public:
  void clear_jointournamentroom();
  const ::msg::CSRspJoinTournamentRoom& jointournamentroom() const;
  PROTOBUF_NODISCARD ::msg::CSRspJoinTournamentRoom* release_jointournamentroom();
  ::msg::CSRspJoinTournamentRoom* mutable_jointournamentroom();
  void set_allocated_jointournamentroom(::msg::CSRspJoinTournamentRoom* jointournamentroom);
  private:
  const ::msg::CSRspJoinTournamentRoom& _internal_jointournamentroom() const;
  ::msg::CSRspJoinTournamentRoom* _internal_mutable_jointournamentroom();
  public:
  void unsafe_arena_set_allocated_jointournamentroom(
      ::msg::CSRspJoinTournamentRoom* jointournamentroom);
  ::msg::CSRspJoinTournamentRoom* unsafe_arena_release_jointournamentroom();

  // .msg.CSRspTournamentPointAward TournamentPointAward = 159;
  bool has_tournamentpointaward() const;
  private:
  bool _internal_has_tournamentpointaward() const;
  public:
  void clear_tournamentpointaward();
  const ::msg::CSRspTournamentPointAward& tournamentpointaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspTournamentPointAward* release_tournamentpointaward();
  ::msg::CSRspTournamentPointAward* mutable_tournamentpointaward();
  void set_allocated_tournamentpointaward(::msg::CSRspTournamentPointAward* tournamentpointaward);
  private:
  const ::msg::CSRspTournamentPointAward& _internal_tournamentpointaward() const;
  ::msg::CSRspTournamentPointAward* _internal_mutable_tournamentpointaward();
  public:
  void unsafe_arena_set_allocated_tournamentpointaward(
      ::msg::CSRspTournamentPointAward* tournamentpointaward);
  ::msg::CSRspTournamentPointAward* unsafe_arena_release_tournamentpointaward();

  // .msg.CSRspGetEnrollPlayers GetEnrollPlayers = 160;
  bool has_getenrollplayers() const;
  private:
  bool _internal_has_getenrollplayers() const;
  public:
  void clear_getenrollplayers();
  const ::msg::CSRspGetEnrollPlayers& getenrollplayers() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetEnrollPlayers* release_getenrollplayers();
  ::msg::CSRspGetEnrollPlayers* mutable_getenrollplayers();
  void set_allocated_getenrollplayers(::msg::CSRspGetEnrollPlayers* getenrollplayers);
  private:
  const ::msg::CSRspGetEnrollPlayers& _internal_getenrollplayers() const;
  ::msg::CSRspGetEnrollPlayers* _internal_mutable_getenrollplayers();
  public:
  void unsafe_arena_set_allocated_getenrollplayers(
      ::msg::CSRspGetEnrollPlayers* getenrollplayers);
  ::msg::CSRspGetEnrollPlayers* unsafe_arena_release_getenrollplayers();

  // .msg.CSRspDealWebMail DealWebMail = 161;
  bool has_dealwebmail() const;
  private:
  bool _internal_has_dealwebmail() const;
  public:
  void clear_dealwebmail();
  const ::msg::CSRspDealWebMail& dealwebmail() const;
  PROTOBUF_NODISCARD ::msg::CSRspDealWebMail* release_dealwebmail();
  ::msg::CSRspDealWebMail* mutable_dealwebmail();
  void set_allocated_dealwebmail(::msg::CSRspDealWebMail* dealwebmail);
  private:
  const ::msg::CSRspDealWebMail& _internal_dealwebmail() const;
  ::msg::CSRspDealWebMail* _internal_mutable_dealwebmail();
  public:
  void unsafe_arena_set_allocated_dealwebmail(
      ::msg::CSRspDealWebMail* dealwebmail);
  ::msg::CSRspDealWebMail* unsafe_arena_release_dealwebmail();

  // .msg.CSRspChallengeAgain ChallengeAgain = 162;
  bool has_challengeagain() const;
  private:
  bool _internal_has_challengeagain() const;
  public:
  void clear_challengeagain();
  const ::msg::CSRspChallengeAgain& challengeagain() const;
  PROTOBUF_NODISCARD ::msg::CSRspChallengeAgain* release_challengeagain();
  ::msg::CSRspChallengeAgain* mutable_challengeagain();
  void set_allocated_challengeagain(::msg::CSRspChallengeAgain* challengeagain);
  private:
  const ::msg::CSRspChallengeAgain& _internal_challengeagain() const;
  ::msg::CSRspChallengeAgain* _internal_mutable_challengeagain();
  public:
  void unsafe_arena_set_allocated_challengeagain(
      ::msg::CSRspChallengeAgain* challengeagain);
  ::msg::CSRspChallengeAgain* unsafe_arena_release_challengeagain();

  // .msg.CSRspHistoryChatMsg HistoryChat = 163;
  bool has_historychat() const;
  private:
  bool _internal_has_historychat() const;
  public:
  void clear_historychat();
  const ::msg::CSRspHistoryChatMsg& historychat() const;
  PROTOBUF_NODISCARD ::msg::CSRspHistoryChatMsg* release_historychat();
  ::msg::CSRspHistoryChatMsg* mutable_historychat();
  void set_allocated_historychat(::msg::CSRspHistoryChatMsg* historychat);
  private:
  const ::msg::CSRspHistoryChatMsg& _internal_historychat() const;
  ::msg::CSRspHistoryChatMsg* _internal_mutable_historychat();
  public:
  void unsafe_arena_set_allocated_historychat(
      ::msg::CSRspHistoryChatMsg* historychat);
  ::msg::CSRspHistoryChatMsg* unsafe_arena_release_historychat();

  // .msg.CSRspSetFriendInvisible SetFriendInvisible = 164;
  bool has_setfriendinvisible() const;
  private:
  bool _internal_has_setfriendinvisible() const;
  public:
  void clear_setfriendinvisible();
  const ::msg::CSRspSetFriendInvisible& setfriendinvisible() const;
  PROTOBUF_NODISCARD ::msg::CSRspSetFriendInvisible* release_setfriendinvisible();
  ::msg::CSRspSetFriendInvisible* mutable_setfriendinvisible();
  void set_allocated_setfriendinvisible(::msg::CSRspSetFriendInvisible* setfriendinvisible);
  private:
  const ::msg::CSRspSetFriendInvisible& _internal_setfriendinvisible() const;
  ::msg::CSRspSetFriendInvisible* _internal_mutable_setfriendinvisible();
  public:
  void unsafe_arena_set_allocated_setfriendinvisible(
      ::msg::CSRspSetFriendInvisible* setfriendinvisible);
  ::msg::CSRspSetFriendInvisible* unsafe_arena_release_setfriendinvisible();

  // .msg.CSRspGetObserveAward GetObserveAward = 165;
  bool has_getobserveaward() const;
  private:
  bool _internal_has_getobserveaward() const;
  public:
  void clear_getobserveaward();
  const ::msg::CSRspGetObserveAward& getobserveaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetObserveAward* release_getobserveaward();
  ::msg::CSRspGetObserveAward* mutable_getobserveaward();
  void set_allocated_getobserveaward(::msg::CSRspGetObserveAward* getobserveaward);
  private:
  const ::msg::CSRspGetObserveAward& _internal_getobserveaward() const;
  ::msg::CSRspGetObserveAward* _internal_mutable_getobserveaward();
  public:
  void unsafe_arena_set_allocated_getobserveaward(
      ::msg::CSRspGetObserveAward* getobserveaward);
  ::msg::CSRspGetObserveAward* unsafe_arena_release_getobserveaward();

  // .msg.CSRspInviteObserve InviteObserve = 166;
  bool has_inviteobserve() const;
  private:
  bool _internal_has_inviteobserve() const;
  public:
  void clear_inviteobserve();
  const ::msg::CSRspInviteObserve& inviteobserve() const;
  PROTOBUF_NODISCARD ::msg::CSRspInviteObserve* release_inviteobserve();
  ::msg::CSRspInviteObserve* mutable_inviteobserve();
  void set_allocated_inviteobserve(::msg::CSRspInviteObserve* inviteobserve);
  private:
  const ::msg::CSRspInviteObserve& _internal_inviteobserve() const;
  ::msg::CSRspInviteObserve* _internal_mutable_inviteobserve();
  public:
  void unsafe_arena_set_allocated_inviteobserve(
      ::msg::CSRspInviteObserve* inviteobserve);
  ::msg::CSRspInviteObserve* unsafe_arena_release_inviteobserve();

  // .msg.CSRspRejectObserve RejectObserve = 167;
  bool has_rejectobserve() const;
  private:
  bool _internal_has_rejectobserve() const;
  public:
  void clear_rejectobserve();
  const ::msg::CSRspRejectObserve& rejectobserve() const;
  PROTOBUF_NODISCARD ::msg::CSRspRejectObserve* release_rejectobserve();
  ::msg::CSRspRejectObserve* mutable_rejectobserve();
  void set_allocated_rejectobserve(::msg::CSRspRejectObserve* rejectobserve);
  private:
  const ::msg::CSRspRejectObserve& _internal_rejectobserve() const;
  ::msg::CSRspRejectObserve* _internal_mutable_rejectobserve();
  public:
  void unsafe_arena_set_allocated_rejectobserve(
      ::msg::CSRspRejectObserve* rejectobserve);
  ::msg::CSRspRejectObserve* unsafe_arena_release_rejectobserve();

  // .msg.CSRspGetTxPlayer GetTxPlayer = 168;
  bool has_gettxplayer() const;
  private:
  bool _internal_has_gettxplayer() const;
  public:
  void clear_gettxplayer();
  const ::msg::CSRspGetTxPlayer& gettxplayer() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetTxPlayer* release_gettxplayer();
  ::msg::CSRspGetTxPlayer* mutable_gettxplayer();
  void set_allocated_gettxplayer(::msg::CSRspGetTxPlayer* gettxplayer);
  private:
  const ::msg::CSRspGetTxPlayer& _internal_gettxplayer() const;
  ::msg::CSRspGetTxPlayer* _internal_mutable_gettxplayer();
  public:
  void unsafe_arena_set_allocated_gettxplayer(
      ::msg::CSRspGetTxPlayer* gettxplayer);
  ::msg::CSRspGetTxPlayer* unsafe_arena_release_gettxplayer();

  // .msg.CSRspGetThirdPvpInfo GetThirdPvpInfo = 169;
  bool has_getthirdpvpinfo() const;
  private:
  bool _internal_has_getthirdpvpinfo() const;
  public:
  void clear_getthirdpvpinfo();
  const ::msg::CSRspGetThirdPvpInfo& getthirdpvpinfo() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetThirdPvpInfo* release_getthirdpvpinfo();
  ::msg::CSRspGetThirdPvpInfo* mutable_getthirdpvpinfo();
  void set_allocated_getthirdpvpinfo(::msg::CSRspGetThirdPvpInfo* getthirdpvpinfo);
  private:
  const ::msg::CSRspGetThirdPvpInfo& _internal_getthirdpvpinfo() const;
  ::msg::CSRspGetThirdPvpInfo* _internal_mutable_getthirdpvpinfo();
  public:
  void unsafe_arena_set_allocated_getthirdpvpinfo(
      ::msg::CSRspGetThirdPvpInfo* getthirdpvpinfo);
  ::msg::CSRspGetThirdPvpInfo* unsafe_arena_release_getthirdpvpinfo();

  // .msg.CSRspMarkPlayerGuide MarkPlayerGuide = 170;
  bool has_markplayerguide() const;
  private:
  bool _internal_has_markplayerguide() const;
  public:
  void clear_markplayerguide();
  const ::msg::CSRspMarkPlayerGuide& markplayerguide() const;
  PROTOBUF_NODISCARD ::msg::CSRspMarkPlayerGuide* release_markplayerguide();
  ::msg::CSRspMarkPlayerGuide* mutable_markplayerguide();
  void set_allocated_markplayerguide(::msg::CSRspMarkPlayerGuide* markplayerguide);
  private:
  const ::msg::CSRspMarkPlayerGuide& _internal_markplayerguide() const;
  ::msg::CSRspMarkPlayerGuide* _internal_mutable_markplayerguide();
  public:
  void unsafe_arena_set_allocated_markplayerguide(
      ::msg::CSRspMarkPlayerGuide* markplayerguide);
  ::msg::CSRspMarkPlayerGuide* unsafe_arena_release_markplayerguide();

  // .msg.CSRspMarkChessSkinClicked ChessSkinClicked = 171;
  bool has_chessskinclicked() const;
  private:
  bool _internal_has_chessskinclicked() const;
  public:
  void clear_chessskinclicked();
  const ::msg::CSRspMarkChessSkinClicked& chessskinclicked() const;
  PROTOBUF_NODISCARD ::msg::CSRspMarkChessSkinClicked* release_chessskinclicked();
  ::msg::CSRspMarkChessSkinClicked* mutable_chessskinclicked();
  void set_allocated_chessskinclicked(::msg::CSRspMarkChessSkinClicked* chessskinclicked);
  private:
  const ::msg::CSRspMarkChessSkinClicked& _internal_chessskinclicked() const;
  ::msg::CSRspMarkChessSkinClicked* _internal_mutable_chessskinclicked();
  public:
  void unsafe_arena_set_allocated_chessskinclicked(
      ::msg::CSRspMarkChessSkinClicked* chessskinclicked);
  ::msg::CSRspMarkChessSkinClicked* unsafe_arena_release_chessskinclicked();

  // .msg.CSRsqQueryPs4Entitlements QueryPs4Entitlements = 172;
  bool has_queryps4entitlements() const;
  private:
  bool _internal_has_queryps4entitlements() const;
  public:
  void clear_queryps4entitlements();
  const ::msg::CSRsqQueryPs4Entitlements& queryps4entitlements() const;
  PROTOBUF_NODISCARD ::msg::CSRsqQueryPs4Entitlements* release_queryps4entitlements();
  ::msg::CSRsqQueryPs4Entitlements* mutable_queryps4entitlements();
  void set_allocated_queryps4entitlements(::msg::CSRsqQueryPs4Entitlements* queryps4entitlements);
  private:
  const ::msg::CSRsqQueryPs4Entitlements& _internal_queryps4entitlements() const;
  ::msg::CSRsqQueryPs4Entitlements* _internal_mutable_queryps4entitlements();
  public:
  void unsafe_arena_set_allocated_queryps4entitlements(
      ::msg::CSRsqQueryPs4Entitlements* queryps4entitlements);
  ::msg::CSRsqQueryPs4Entitlements* unsafe_arena_release_queryps4entitlements();

  // .msg.CSRspActDaySign ActDaySign = 173;
  bool has_actdaysign() const;
  private:
  bool _internal_has_actdaysign() const;
  public:
  void clear_actdaysign();
  const ::msg::CSRspActDaySign& actdaysign() const;
  PROTOBUF_NODISCARD ::msg::CSRspActDaySign* release_actdaysign();
  ::msg::CSRspActDaySign* mutable_actdaysign();
  void set_allocated_actdaysign(::msg::CSRspActDaySign* actdaysign);
  private:
  const ::msg::CSRspActDaySign& _internal_actdaysign() const;
  ::msg::CSRspActDaySign* _internal_mutable_actdaysign();
  public:
  void unsafe_arena_set_allocated_actdaysign(
      ::msg::CSRspActDaySign* actdaysign);
  ::msg::CSRspActDaySign* unsafe_arena_release_actdaysign();

  // .msg.CSRspHaveThirdPvp HaveThirdPvpInfo = 174;
  bool has_havethirdpvpinfo() const;
  private:
  bool _internal_has_havethirdpvpinfo() const;
  public:
  void clear_havethirdpvpinfo();
  const ::msg::CSRspHaveThirdPvp& havethirdpvpinfo() const;
  PROTOBUF_NODISCARD ::msg::CSRspHaveThirdPvp* release_havethirdpvpinfo();
  ::msg::CSRspHaveThirdPvp* mutable_havethirdpvpinfo();
  void set_allocated_havethirdpvpinfo(::msg::CSRspHaveThirdPvp* havethirdpvpinfo);
  private:
  const ::msg::CSRspHaveThirdPvp& _internal_havethirdpvpinfo() const;
  ::msg::CSRspHaveThirdPvp* _internal_mutable_havethirdpvpinfo();
  public:
  void unsafe_arena_set_allocated_havethirdpvpinfo(
      ::msg::CSRspHaveThirdPvp* havethirdpvpinfo);
  ::msg::CSRspHaveThirdPvp* unsafe_arena_release_havethirdpvpinfo();

  // .msg.CSRspActivityMall ActivityMall = 175;
  bool has_activitymall() const;
  private:
  bool _internal_has_activitymall() const;
  public:
  void clear_activitymall();
  const ::msg::CSRspActivityMall& activitymall() const;
  PROTOBUF_NODISCARD ::msg::CSRspActivityMall* release_activitymall();
  ::msg::CSRspActivityMall* mutable_activitymall();
  void set_allocated_activitymall(::msg::CSRspActivityMall* activitymall);
  private:
  const ::msg::CSRspActivityMall& _internal_activitymall() const;
  ::msg::CSRspActivityMall* _internal_mutable_activitymall();
  public:
  void unsafe_arena_set_allocated_activitymall(
      ::msg::CSRspActivityMall* activitymall);
  ::msg::CSRspActivityMall* unsafe_arena_release_activitymall();

  // .msg.CSRspPsOnly PsOnly = 176;
  bool has_psonly() const;
  private:
  bool _internal_has_psonly() const;
  public:
  void clear_psonly();
  const ::msg::CSRspPsOnly& psonly() const;
  PROTOBUF_NODISCARD ::msg::CSRspPsOnly* release_psonly();
  ::msg::CSRspPsOnly* mutable_psonly();
  void set_allocated_psonly(::msg::CSRspPsOnly* psonly);
  private:
  const ::msg::CSRspPsOnly& _internal_psonly() const;
  ::msg::CSRspPsOnly* _internal_mutable_psonly();
  public:
  void unsafe_arena_set_allocated_psonly(
      ::msg::CSRspPsOnly* psonly);
  ::msg::CSRspPsOnly* unsafe_arena_release_psonly();

  // .msg.CSRspChangeChannelType ChangeChannelType = 177;
  bool has_changechanneltype() const;
  private:
  bool _internal_has_changechanneltype() const;
  public:
  void clear_changechanneltype();
  const ::msg::CSRspChangeChannelType& changechanneltype() const;
  PROTOBUF_NODISCARD ::msg::CSRspChangeChannelType* release_changechanneltype();
  ::msg::CSRspChangeChannelType* mutable_changechanneltype();
  void set_allocated_changechanneltype(::msg::CSRspChangeChannelType* changechanneltype);
  private:
  const ::msg::CSRspChangeChannelType& _internal_changechanneltype() const;
  ::msg::CSRspChangeChannelType* _internal_mutable_changechanneltype();
  public:
  void unsafe_arena_set_allocated_changechanneltype(
      ::msg::CSRspChangeChannelType* changechanneltype);
  ::msg::CSRspChangeChannelType* unsafe_arena_release_changechanneltype();

  // .msg.CSRspCustomCardOpt CustomCardOpt = 178;
  bool has_customcardopt() const;
  private:
  bool _internal_has_customcardopt() const;
  public:
  void clear_customcardopt();
  const ::msg::CSRspCustomCardOpt& customcardopt() const;
  PROTOBUF_NODISCARD ::msg::CSRspCustomCardOpt* release_customcardopt();
  ::msg::CSRspCustomCardOpt* mutable_customcardopt();
  void set_allocated_customcardopt(::msg::CSRspCustomCardOpt* customcardopt);
  private:
  const ::msg::CSRspCustomCardOpt& _internal_customcardopt() const;
  ::msg::CSRspCustomCardOpt* _internal_mutable_customcardopt();
  public:
  void unsafe_arena_set_allocated_customcardopt(
      ::msg::CSRspCustomCardOpt* customcardopt);
  ::msg::CSRspCustomCardOpt* unsafe_arena_release_customcardopt();

  // .msg.CSRspChampionHistory ChampionHistory = 179;
  bool has_championhistory() const;
  private:
  bool _internal_has_championhistory() const;
  public:
  void clear_championhistory();
  const ::msg::CSRspChampionHistory& championhistory() const;
  PROTOBUF_NODISCARD ::msg::CSRspChampionHistory* release_championhistory();
  ::msg::CSRspChampionHistory* mutable_championhistory();
  void set_allocated_championhistory(::msg::CSRspChampionHistory* championhistory);
  private:
  const ::msg::CSRspChampionHistory& _internal_championhistory() const;
  ::msg::CSRspChampionHistory* _internal_mutable_championhistory();
  public:
  void unsafe_arena_set_allocated_championhistory(
      ::msg::CSRspChampionHistory* championhistory);
  ::msg::CSRspChampionHistory* unsafe_arena_release_championhistory();

  // .msg.CSRspTournamentLastTopRank TournamentLastTopRank = 180;
  bool has_tournamentlasttoprank() const;
  private:
  bool _internal_has_tournamentlasttoprank() const;
  public:
  void clear_tournamentlasttoprank();
  const ::msg::CSRspTournamentLastTopRank& tournamentlasttoprank() const;
  PROTOBUF_NODISCARD ::msg::CSRspTournamentLastTopRank* release_tournamentlasttoprank();
  ::msg::CSRspTournamentLastTopRank* mutable_tournamentlasttoprank();
  void set_allocated_tournamentlasttoprank(::msg::CSRspTournamentLastTopRank* tournamentlasttoprank);
  private:
  const ::msg::CSRspTournamentLastTopRank& _internal_tournamentlasttoprank() const;
  ::msg::CSRspTournamentLastTopRank* _internal_mutable_tournamentlasttoprank();
  public:
  void unsafe_arena_set_allocated_tournamentlasttoprank(
      ::msg::CSRspTournamentLastTopRank* tournamentlasttoprank);
  ::msg::CSRspTournamentLastTopRank* unsafe_arena_release_tournamentlasttoprank();

  // .msg.CSRspBigWinnerDailyAward BigWinnerDailyAward = 181;
  bool has_bigwinnerdailyaward() const;
  private:
  bool _internal_has_bigwinnerdailyaward() const;
  public:
  void clear_bigwinnerdailyaward();
  const ::msg::CSRspBigWinnerDailyAward& bigwinnerdailyaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspBigWinnerDailyAward* release_bigwinnerdailyaward();
  ::msg::CSRspBigWinnerDailyAward* mutable_bigwinnerdailyaward();
  void set_allocated_bigwinnerdailyaward(::msg::CSRspBigWinnerDailyAward* bigwinnerdailyaward);
  private:
  const ::msg::CSRspBigWinnerDailyAward& _internal_bigwinnerdailyaward() const;
  ::msg::CSRspBigWinnerDailyAward* _internal_mutable_bigwinnerdailyaward();
  public:
  void unsafe_arena_set_allocated_bigwinnerdailyaward(
      ::msg::CSRspBigWinnerDailyAward* bigwinnerdailyaward);
  ::msg::CSRspBigWinnerDailyAward* unsafe_arena_release_bigwinnerdailyaward();

  // .msg.CSRspBigWinnerScoreHistory BigWinnerScoreHistory = 182;
  bool has_bigwinnerscorehistory() const;
  private:
  bool _internal_has_bigwinnerscorehistory() const;
  public:
  void clear_bigwinnerscorehistory();
  const ::msg::CSRspBigWinnerScoreHistory& bigwinnerscorehistory() const;
  PROTOBUF_NODISCARD ::msg::CSRspBigWinnerScoreHistory* release_bigwinnerscorehistory();
  ::msg::CSRspBigWinnerScoreHistory* mutable_bigwinnerscorehistory();
  void set_allocated_bigwinnerscorehistory(::msg::CSRspBigWinnerScoreHistory* bigwinnerscorehistory);
  private:
  const ::msg::CSRspBigWinnerScoreHistory& _internal_bigwinnerscorehistory() const;
  ::msg::CSRspBigWinnerScoreHistory* _internal_mutable_bigwinnerscorehistory();
  public:
  void unsafe_arena_set_allocated_bigwinnerscorehistory(
      ::msg::CSRspBigWinnerScoreHistory* bigwinnerscorehistory);
  ::msg::CSRspBigWinnerScoreHistory* unsafe_arena_release_bigwinnerscorehistory();

  // .msg.CSRspSmeltItem SmeltItem = 183;
  bool has_smeltitem() const;
  private:
  bool _internal_has_smeltitem() const;
  public:
  void clear_smeltitem();
  const ::msg::CSRspSmeltItem& smeltitem() const;
  PROTOBUF_NODISCARD ::msg::CSRspSmeltItem* release_smeltitem();
  ::msg::CSRspSmeltItem* mutable_smeltitem();
  void set_allocated_smeltitem(::msg::CSRspSmeltItem* smeltitem);
  private:
  const ::msg::CSRspSmeltItem& _internal_smeltitem() const;
  ::msg::CSRspSmeltItem* _internal_mutable_smeltitem();
  public:
  void unsafe_arena_set_allocated_smeltitem(
      ::msg::CSRspSmeltItem* smeltitem);
  ::msg::CSRspSmeltItem* unsafe_arena_release_smeltitem();

  // .msg.CSRspPVEUpTalentLevel PVEUpTalentLevel = 184;
  bool has_pveuptalentlevel() const;
  private:
  bool _internal_has_pveuptalentlevel() const;
  public:
  void clear_pveuptalentlevel();
  const ::msg::CSRspPVEUpTalentLevel& pveuptalentlevel() const;
  PROTOBUF_NODISCARD ::msg::CSRspPVEUpTalentLevel* release_pveuptalentlevel();
  ::msg::CSRspPVEUpTalentLevel* mutable_pveuptalentlevel();
  void set_allocated_pveuptalentlevel(::msg::CSRspPVEUpTalentLevel* pveuptalentlevel);
  private:
  const ::msg::CSRspPVEUpTalentLevel& _internal_pveuptalentlevel() const;
  ::msg::CSRspPVEUpTalentLevel* _internal_mutable_pveuptalentlevel();
  public:
  void unsafe_arena_set_allocated_pveuptalentlevel(
      ::msg::CSRspPVEUpTalentLevel* pveuptalentlevel);
  ::msg::CSRspPVEUpTalentLevel* unsafe_arena_release_pveuptalentlevel();

  // .msg.CSRspPVELuckyAward LuckyAward = 185;
  bool has_luckyaward() const;
  private:
  bool _internal_has_luckyaward() const;
  public:
  void clear_luckyaward();
  const ::msg::CSRspPVELuckyAward& luckyaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspPVELuckyAward* release_luckyaward();
  ::msg::CSRspPVELuckyAward* mutable_luckyaward();
  void set_allocated_luckyaward(::msg::CSRspPVELuckyAward* luckyaward);
  private:
  const ::msg::CSRspPVELuckyAward& _internal_luckyaward() const;
  ::msg::CSRspPVELuckyAward* _internal_mutable_luckyaward();
  public:
  void unsafe_arena_set_allocated_luckyaward(
      ::msg::CSRspPVELuckyAward* luckyaward);
  ::msg::CSRspPVELuckyAward* unsafe_arena_release_luckyaward();

  // .msg.CSRspApplyChannel ApplyChannel = 186;
  bool has_applychannel() const;
  private:
  bool _internal_has_applychannel() const;
  public:
  void clear_applychannel();
  const ::msg::CSRspApplyChannel& applychannel() const;
  PROTOBUF_NODISCARD ::msg::CSRspApplyChannel* release_applychannel();
  ::msg::CSRspApplyChannel* mutable_applychannel();
  void set_allocated_applychannel(::msg::CSRspApplyChannel* applychannel);
  private:
  const ::msg::CSRspApplyChannel& _internal_applychannel() const;
  ::msg::CSRspApplyChannel* _internal_mutable_applychannel();
  public:
  void unsafe_arena_set_allocated_applychannel(
      ::msg::CSRspApplyChannel* applychannel);
  ::msg::CSRspApplyChannel* unsafe_arena_release_applychannel();

  // .msg.CSRspOBTeamInfo OBTeamInfo = 300;
  bool has_obteaminfo() const;
  private:
  bool _internal_has_obteaminfo() const;
  public:
  void clear_obteaminfo();
  const ::msg::CSRspOBTeamInfo& obteaminfo() const;
  PROTOBUF_NODISCARD ::msg::CSRspOBTeamInfo* release_obteaminfo();
  ::msg::CSRspOBTeamInfo* mutable_obteaminfo();
  void set_allocated_obteaminfo(::msg::CSRspOBTeamInfo* obteaminfo);
  private:
  const ::msg::CSRspOBTeamInfo& _internal_obteaminfo() const;
  ::msg::CSRspOBTeamInfo* _internal_mutable_obteaminfo();
  public:
  void unsafe_arena_set_allocated_obteaminfo(
      ::msg::CSRspOBTeamInfo* obteaminfo);
  ::msg::CSRspOBTeamInfo* unsafe_arena_release_obteaminfo();

  // .msg.CSRspGetPvpServerGroup GetPvpServerGroup = 303;
  bool has_getpvpservergroup() const;
  private:
  bool _internal_has_getpvpservergroup() const;
  public:
  void clear_getpvpservergroup();
  const ::msg::CSRspGetPvpServerGroup& getpvpservergroup() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetPvpServerGroup* release_getpvpservergroup();
  ::msg::CSRspGetPvpServerGroup* mutable_getpvpservergroup();
  void set_allocated_getpvpservergroup(::msg::CSRspGetPvpServerGroup* getpvpservergroup);
  private:
  const ::msg::CSRspGetPvpServerGroup& _internal_getpvpservergroup() const;
  ::msg::CSRspGetPvpServerGroup* _internal_mutable_getpvpservergroup();
  public:
  void unsafe_arena_set_allocated_getpvpservergroup(
      ::msg::CSRspGetPvpServerGroup* getpvpservergroup);
  ::msg::CSRspGetPvpServerGroup* unsafe_arena_release_getpvpservergroup();

  // .msg.CSRspReportPvpInfo ReportPvpInfo = 304;
  bool has_reportpvpinfo() const;
  private:
  bool _internal_has_reportpvpinfo() const;
  public:
  void clear_reportpvpinfo();
  const ::msg::CSRspReportPvpInfo& reportpvpinfo() const;
  PROTOBUF_NODISCARD ::msg::CSRspReportPvpInfo* release_reportpvpinfo();
  ::msg::CSRspReportPvpInfo* mutable_reportpvpinfo();
  void set_allocated_reportpvpinfo(::msg::CSRspReportPvpInfo* reportpvpinfo);
  private:
  const ::msg::CSRspReportPvpInfo& _internal_reportpvpinfo() const;
  ::msg::CSRspReportPvpInfo* _internal_mutable_reportpvpinfo();
  public:
  void unsafe_arena_set_allocated_reportpvpinfo(
      ::msg::CSRspReportPvpInfo* reportpvpinfo);
  ::msg::CSRspReportPvpInfo* unsafe_arena_release_reportpvpinfo();

  // .msg.CSRspChoosePlayer ChoosePlayer = 305;
  bool has_chooseplayer() const;
  private:
  bool _internal_has_chooseplayer() const;
  public:
  void clear_chooseplayer();
  const ::msg::CSRspChoosePlayer& chooseplayer() const;
  PROTOBUF_NODISCARD ::msg::CSRspChoosePlayer* release_chooseplayer();
  ::msg::CSRspChoosePlayer* mutable_chooseplayer();
  void set_allocated_chooseplayer(::msg::CSRspChoosePlayer* chooseplayer);
  private:
  const ::msg::CSRspChoosePlayer& _internal_chooseplayer() const;
  ::msg::CSRspChoosePlayer* _internal_mutable_chooseplayer();
  public:
  void unsafe_arena_set_allocated_chooseplayer(
      ::msg::CSRspChoosePlayer* chooseplayer);
  ::msg::CSRspChoosePlayer* unsafe_arena_release_chooseplayer();

  // .msg.CSRspPingTest PingTest = 306;
  bool has_pingtest() const;
  private:
  bool _internal_has_pingtest() const;
  public:
  void clear_pingtest();
  const ::msg::CSRspPingTest& pingtest() const;
  PROTOBUF_NODISCARD ::msg::CSRspPingTest* release_pingtest();
  ::msg::CSRspPingTest* mutable_pingtest();
  void set_allocated_pingtest(::msg::CSRspPingTest* pingtest);
  private:
  const ::msg::CSRspPingTest& _internal_pingtest() const;
  ::msg::CSRspPingTest* _internal_mutable_pingtest();
  public:
  void unsafe_arena_set_allocated_pingtest(
      ::msg::CSRspPingTest* pingtest);
  ::msg::CSRspPingTest* unsafe_arena_release_pingtest();

  // .msg.CSRspReportRegionInfo ReportRegionInfo = 307;
  bool has_reportregioninfo() const;
  private:
  bool _internal_has_reportregioninfo() const;
  public:
  void clear_reportregioninfo();
  const ::msg::CSRspReportRegionInfo& reportregioninfo() const;
  PROTOBUF_NODISCARD ::msg::CSRspReportRegionInfo* release_reportregioninfo();
  ::msg::CSRspReportRegionInfo* mutable_reportregioninfo();
  void set_allocated_reportregioninfo(::msg::CSRspReportRegionInfo* reportregioninfo);
  private:
  const ::msg::CSRspReportRegionInfo& _internal_reportregioninfo() const;
  ::msg::CSRspReportRegionInfo* _internal_mutable_reportregioninfo();
  public:
  void unsafe_arena_set_allocated_reportregioninfo(
      ::msg::CSRspReportRegionInfo* reportregioninfo);
  ::msg::CSRspReportRegionInfo* unsafe_arena_release_reportregioninfo();

  // .msg.CSRspRecalledPlayer RecalledPlaeyr = 308;
  bool has_recalledplaeyr() const;
  private:
  bool _internal_has_recalledplaeyr() const;
  public:
  void clear_recalledplaeyr();
  const ::msg::CSRspRecalledPlayer& recalledplaeyr() const;
  PROTOBUF_NODISCARD ::msg::CSRspRecalledPlayer* release_recalledplaeyr();
  ::msg::CSRspRecalledPlayer* mutable_recalledplaeyr();
  void set_allocated_recalledplaeyr(::msg::CSRspRecalledPlayer* recalledplaeyr);
  private:
  const ::msg::CSRspRecalledPlayer& _internal_recalledplaeyr() const;
  ::msg::CSRspRecalledPlayer* _internal_mutable_recalledplaeyr();
  public:
  void unsafe_arena_set_allocated_recalledplaeyr(
      ::msg::CSRspRecalledPlayer* recalledplaeyr);
  ::msg::CSRspRecalledPlayer* unsafe_arena_release_recalledplaeyr();

  // .msg.CSRspWebLogin WebLogin = 309;
  bool has_weblogin() const;
  private:
  bool _internal_has_weblogin() const;
  public:
  void clear_weblogin();
  const ::msg::CSRspWebLogin& weblogin() const;
  PROTOBUF_NODISCARD ::msg::CSRspWebLogin* release_weblogin();
  ::msg::CSRspWebLogin* mutable_weblogin();
  void set_allocated_weblogin(::msg::CSRspWebLogin* weblogin);
  private:
  const ::msg::CSRspWebLogin& _internal_weblogin() const;
  ::msg::CSRspWebLogin* _internal_mutable_weblogin();
  public:
  void unsafe_arena_set_allocated_weblogin(
      ::msg::CSRspWebLogin* weblogin);
  ::msg::CSRspWebLogin* unsafe_arena_release_weblogin();

  // .msg.CSRspInviteCodeReset InviteCodeReset = 310;
  bool has_invitecodereset() const;
  private:
  bool _internal_has_invitecodereset() const;
  public:
  void clear_invitecodereset();
  const ::msg::CSRspInviteCodeReset& invitecodereset() const;
  PROTOBUF_NODISCARD ::msg::CSRspInviteCodeReset* release_invitecodereset();
  ::msg::CSRspInviteCodeReset* mutable_invitecodereset();
  void set_allocated_invitecodereset(::msg::CSRspInviteCodeReset* invitecodereset);
  private:
  const ::msg::CSRspInviteCodeReset& _internal_invitecodereset() const;
  ::msg::CSRspInviteCodeReset* _internal_mutable_invitecodereset();
  public:
  void unsafe_arena_set_allocated_invitecodereset(
      ::msg::CSRspInviteCodeReset* invitecodereset);
  ::msg::CSRspInviteCodeReset* unsafe_arena_release_invitecodereset();

  // .msg.CSRspRecallReward RecallReward = 311;
  bool has_recallreward() const;
  private:
  bool _internal_has_recallreward() const;
  public:
  void clear_recallreward();
  const ::msg::CSRspRecallReward& recallreward() const;
  PROTOBUF_NODISCARD ::msg::CSRspRecallReward* release_recallreward();
  ::msg::CSRspRecallReward* mutable_recallreward();
  void set_allocated_recallreward(::msg::CSRspRecallReward* recallreward);
  private:
  const ::msg::CSRspRecallReward& _internal_recallreward() const;
  ::msg::CSRspRecallReward* _internal_mutable_recallreward();
  public:
  void unsafe_arena_set_allocated_recallreward(
      ::msg::CSRspRecallReward* recallreward);
  ::msg::CSRspRecallReward* unsafe_arena_release_recallreward();

  // .msg.CSRspSwitchToCommonMatch SwitchToCommonMatch = 312;
  bool has_switchtocommonmatch() const;
  private:
  bool _internal_has_switchtocommonmatch() const;
  public:
  void clear_switchtocommonmatch();
  const ::msg::CSRspSwitchToCommonMatch& switchtocommonmatch() const;
  PROTOBUF_NODISCARD ::msg::CSRspSwitchToCommonMatch* release_switchtocommonmatch();
  ::msg::CSRspSwitchToCommonMatch* mutable_switchtocommonmatch();
  void set_allocated_switchtocommonmatch(::msg::CSRspSwitchToCommonMatch* switchtocommonmatch);
  private:
  const ::msg::CSRspSwitchToCommonMatch& _internal_switchtocommonmatch() const;
  ::msg::CSRspSwitchToCommonMatch* _internal_mutable_switchtocommonmatch();
  public:
  void unsafe_arena_set_allocated_switchtocommonmatch(
      ::msg::CSRspSwitchToCommonMatch* switchtocommonmatch);
  ::msg::CSRspSwitchToCommonMatch* unsafe_arena_release_switchtocommonmatch();

  // .msg.CSRspSwitchModeInTeam SwitchModeInTeam = 320;
  bool has_switchmodeinteam() const;
  private:
  bool _internal_has_switchmodeinteam() const;
  public:
  void clear_switchmodeinteam();
  const ::msg::CSRspSwitchModeInTeam& switchmodeinteam() const;
  PROTOBUF_NODISCARD ::msg::CSRspSwitchModeInTeam* release_switchmodeinteam();
  ::msg::CSRspSwitchModeInTeam* mutable_switchmodeinteam();
  void set_allocated_switchmodeinteam(::msg::CSRspSwitchModeInTeam* switchmodeinteam);
  private:
  const ::msg::CSRspSwitchModeInTeam& _internal_switchmodeinteam() const;
  ::msg::CSRspSwitchModeInTeam* _internal_mutable_switchmodeinteam();
  public:
  void unsafe_arena_set_allocated_switchmodeinteam(
      ::msg::CSRspSwitchModeInTeam* switchmodeinteam);
  ::msg::CSRspSwitchModeInTeam* unsafe_arena_release_switchmodeinteam();

  // .msg.CSRspGetTNRoomState GetTNRoomState = 321;
  bool has_gettnroomstate() const;
  private:
  bool _internal_has_gettnroomstate() const;
  public:
  void clear_gettnroomstate();
  const ::msg::CSRspGetTNRoomState& gettnroomstate() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetTNRoomState* release_gettnroomstate();
  ::msg::CSRspGetTNRoomState* mutable_gettnroomstate();
  void set_allocated_gettnroomstate(::msg::CSRspGetTNRoomState* gettnroomstate);
  private:
  const ::msg::CSRspGetTNRoomState& _internal_gettnroomstate() const;
  ::msg::CSRspGetTNRoomState* _internal_mutable_gettnroomstate();
  public:
  void unsafe_arena_set_allocated_gettnroomstate(
      ::msg::CSRspGetTNRoomState* gettnroomstate);
  ::msg::CSRspGetTNRoomState* unsafe_arena_release_gettnroomstate();

  // .msg.CSRspWorkshopMatch WorkshopMatch = 330;
  bool has_workshopmatch() const;
  private:
  bool _internal_has_workshopmatch() const;
  public:
  void clear_workshopmatch();
  const ::msg::CSRspWorkshopMatch& workshopmatch() const;
  PROTOBUF_NODISCARD ::msg::CSRspWorkshopMatch* release_workshopmatch();
  ::msg::CSRspWorkshopMatch* mutable_workshopmatch();
  void set_allocated_workshopmatch(::msg::CSRspWorkshopMatch* workshopmatch);
  private:
  const ::msg::CSRspWorkshopMatch& _internal_workshopmatch() const;
  ::msg::CSRspWorkshopMatch* _internal_mutable_workshopmatch();
  public:
  void unsafe_arena_set_allocated_workshopmatch(
      ::msg::CSRspWorkshopMatch* workshopmatch);
  ::msg::CSRspWorkshopMatch* unsafe_arena_release_workshopmatch();

  // .msg.CSRspBuyWorkshopTicket BuyWorkshopTicket = 331;
  bool has_buyworkshopticket() const;
  private:
  bool _internal_has_buyworkshopticket() const;
  public:
  void clear_buyworkshopticket();
  const ::msg::CSRspBuyWorkshopTicket& buyworkshopticket() const;
  PROTOBUF_NODISCARD ::msg::CSRspBuyWorkshopTicket* release_buyworkshopticket();
  ::msg::CSRspBuyWorkshopTicket* mutable_buyworkshopticket();
  void set_allocated_buyworkshopticket(::msg::CSRspBuyWorkshopTicket* buyworkshopticket);
  private:
  const ::msg::CSRspBuyWorkshopTicket& _internal_buyworkshopticket() const;
  ::msg::CSRspBuyWorkshopTicket* _internal_mutable_buyworkshopticket();
  public:
  void unsafe_arena_set_allocated_buyworkshopticket(
      ::msg::CSRspBuyWorkshopTicket* buyworkshopticket);
  ::msg::CSRspBuyWorkshopTicket* unsafe_arena_release_buyworkshopticket();

  // .msg.CSRspFavouriteWorkshopMap FavouriteWorkshopMap = 332;
  bool has_favouriteworkshopmap() const;
  private:
  bool _internal_has_favouriteworkshopmap() const;
  public:
  void clear_favouriteworkshopmap();
  const ::msg::CSRspFavouriteWorkshopMap& favouriteworkshopmap() const;
  PROTOBUF_NODISCARD ::msg::CSRspFavouriteWorkshopMap* release_favouriteworkshopmap();
  ::msg::CSRspFavouriteWorkshopMap* mutable_favouriteworkshopmap();
  void set_allocated_favouriteworkshopmap(::msg::CSRspFavouriteWorkshopMap* favouriteworkshopmap);
  private:
  const ::msg::CSRspFavouriteWorkshopMap& _internal_favouriteworkshopmap() const;
  ::msg::CSRspFavouriteWorkshopMap* _internal_mutable_favouriteworkshopmap();
  public:
  void unsafe_arena_set_allocated_favouriteworkshopmap(
      ::msg::CSRspFavouriteWorkshopMap* favouriteworkshopmap);
  ::msg::CSRspFavouriteWorkshopMap* unsafe_arena_release_favouriteworkshopmap();

  // .msg.CSRspShortcutMapsOP ShortcutMapsOP = 333;
  bool has_shortcutmapsop() const;
  private:
  bool _internal_has_shortcutmapsop() const;
  public:
  void clear_shortcutmapsop();
  const ::msg::CSRspShortcutMapsOP& shortcutmapsop() const;
  PROTOBUF_NODISCARD ::msg::CSRspShortcutMapsOP* release_shortcutmapsop();
  ::msg::CSRspShortcutMapsOP* mutable_shortcutmapsop();
  void set_allocated_shortcutmapsop(::msg::CSRspShortcutMapsOP* shortcutmapsop);
  private:
  const ::msg::CSRspShortcutMapsOP& _internal_shortcutmapsop() const;
  ::msg::CSRspShortcutMapsOP* _internal_mutable_shortcutmapsop();
  public:
  void unsafe_arena_set_allocated_shortcutmapsop(
      ::msg::CSRspShortcutMapsOP* shortcutmapsop);
  ::msg::CSRspShortcutMapsOP* unsafe_arena_release_shortcutmapsop();

  // .msg.CSRspPlayersTournamentInfo PlayersTournamentInfo = 334;
  bool has_playerstournamentinfo() const;
  private:
  bool _internal_has_playerstournamentinfo() const;
  public:
  void clear_playerstournamentinfo();
  const ::msg::CSRspPlayersTournamentInfo& playerstournamentinfo() const;
  PROTOBUF_NODISCARD ::msg::CSRspPlayersTournamentInfo* release_playerstournamentinfo();
  ::msg::CSRspPlayersTournamentInfo* mutable_playerstournamentinfo();
  void set_allocated_playerstournamentinfo(::msg::CSRspPlayersTournamentInfo* playerstournamentinfo);
  private:
  const ::msg::CSRspPlayersTournamentInfo& _internal_playerstournamentinfo() const;
  ::msg::CSRspPlayersTournamentInfo* _internal_mutable_playerstournamentinfo();
  public:
  void unsafe_arena_set_allocated_playerstournamentinfo(
      ::msg::CSRspPlayersTournamentInfo* playerstournamentinfo);
  ::msg::CSRspPlayersTournamentInfo* unsafe_arena_release_playerstournamentinfo();

  // .msg.CSRspScoreWorkshopMap ScoreWorkshopMap = 335;
  bool has_scoreworkshopmap() const;
  private:
  bool _internal_has_scoreworkshopmap() const;
  public:
  void clear_scoreworkshopmap();
  const ::msg::CSRspScoreWorkshopMap& scoreworkshopmap() const;
  PROTOBUF_NODISCARD ::msg::CSRspScoreWorkshopMap* release_scoreworkshopmap();
  ::msg::CSRspScoreWorkshopMap* mutable_scoreworkshopmap();
  void set_allocated_scoreworkshopmap(::msg::CSRspScoreWorkshopMap* scoreworkshopmap);
  private:
  const ::msg::CSRspScoreWorkshopMap& _internal_scoreworkshopmap() const;
  ::msg::CSRspScoreWorkshopMap* _internal_mutable_scoreworkshopmap();
  public:
  void unsafe_arena_set_allocated_scoreworkshopmap(
      ::msg::CSRspScoreWorkshopMap* scoreworkshopmap);
  ::msg::CSRspScoreWorkshopMap* unsafe_arena_release_scoreworkshopmap();

  // .msg.CSRspMapsVisitedByFriends MapsVisitedByFriends = 336;
  bool has_mapsvisitedbyfriends() const;
  private:
  bool _internal_has_mapsvisitedbyfriends() const;
  public:
  void clear_mapsvisitedbyfriends();
  const ::msg::CSRspMapsVisitedByFriends& mapsvisitedbyfriends() const;
  PROTOBUF_NODISCARD ::msg::CSRspMapsVisitedByFriends* release_mapsvisitedbyfriends();
  ::msg::CSRspMapsVisitedByFriends* mutable_mapsvisitedbyfriends();
  void set_allocated_mapsvisitedbyfriends(::msg::CSRspMapsVisitedByFriends* mapsvisitedbyfriends);
  private:
  const ::msg::CSRspMapsVisitedByFriends& _internal_mapsvisitedbyfriends() const;
  ::msg::CSRspMapsVisitedByFriends* _internal_mutable_mapsvisitedbyfriends();
  public:
  void unsafe_arena_set_allocated_mapsvisitedbyfriends(
      ::msg::CSRspMapsVisitedByFriends* mapsvisitedbyfriends);
  ::msg::CSRspMapsVisitedByFriends* unsafe_arena_release_mapsvisitedbyfriends();

  // .msg.CSRspVerifyRealName VerifyRealName = 350;
  bool has_verifyrealname() const;
  private:
  bool _internal_has_verifyrealname() const;
  public:
  void clear_verifyrealname();
  const ::msg::CSRspVerifyRealName& verifyrealname() const;
  PROTOBUF_NODISCARD ::msg::CSRspVerifyRealName* release_verifyrealname();
  ::msg::CSRspVerifyRealName* mutable_verifyrealname();
  void set_allocated_verifyrealname(::msg::CSRspVerifyRealName* verifyrealname);
  private:
  const ::msg::CSRspVerifyRealName& _internal_verifyrealname() const;
  ::msg::CSRspVerifyRealName* _internal_mutable_verifyrealname();
  public:
  void unsafe_arena_set_allocated_verifyrealname(
      ::msg::CSRspVerifyRealName* verifyrealname);
  ::msg::CSRspVerifyRealName* unsafe_arena_release_verifyrealname();

  // .msg.CSRspFakePay FakePay = 351;
  bool has_fakepay() const;
  private:
  bool _internal_has_fakepay() const;
  public:
  void clear_fakepay();
  const ::msg::CSRspFakePay& fakepay() const;
  PROTOBUF_NODISCARD ::msg::CSRspFakePay* release_fakepay();
  ::msg::CSRspFakePay* mutable_fakepay();
  void set_allocated_fakepay(::msg::CSRspFakePay* fakepay);
  private:
  const ::msg::CSRspFakePay& _internal_fakepay() const;
  ::msg::CSRspFakePay* _internal_mutable_fakepay();
  public:
  void unsafe_arena_set_allocated_fakepay(
      ::msg::CSRspFakePay* fakepay);
  ::msg::CSRspFakePay* unsafe_arena_release_fakepay();

  // .msg.CSRspGuildCreate GuildCreate = 360;
  bool has_guildcreate() const;
  private:
  bool _internal_has_guildcreate() const;
  public:
  void clear_guildcreate();
  const ::msg::CSRspGuildCreate& guildcreate() const;
  PROTOBUF_NODISCARD ::msg::CSRspGuildCreate* release_guildcreate();
  ::msg::CSRspGuildCreate* mutable_guildcreate();
  void set_allocated_guildcreate(::msg::CSRspGuildCreate* guildcreate);
  private:
  const ::msg::CSRspGuildCreate& _internal_guildcreate() const;
  ::msg::CSRspGuildCreate* _internal_mutable_guildcreate();
  public:
  void unsafe_arena_set_allocated_guildcreate(
      ::msg::CSRspGuildCreate* guildcreate);
  ::msg::CSRspGuildCreate* unsafe_arena_release_guildcreate();

  // .msg.CSRspGuildApply GuildApply = 361;
  bool has_guildapply() const;
  private:
  bool _internal_has_guildapply() const;
  public:
  void clear_guildapply();
  const ::msg::CSRspGuildApply& guildapply() const;
  PROTOBUF_NODISCARD ::msg::CSRspGuildApply* release_guildapply();
  ::msg::CSRspGuildApply* mutable_guildapply();
  void set_allocated_guildapply(::msg::CSRspGuildApply* guildapply);
  private:
  const ::msg::CSRspGuildApply& _internal_guildapply() const;
  ::msg::CSRspGuildApply* _internal_mutable_guildapply();
  public:
  void unsafe_arena_set_allocated_guildapply(
      ::msg::CSRspGuildApply* guildapply);
  ::msg::CSRspGuildApply* unsafe_arena_release_guildapply();

  // .msg.CSRspGuildHome GuildHome = 362;
  bool has_guildhome() const;
  private:
  bool _internal_has_guildhome() const;
  public:
  void clear_guildhome();
  const ::msg::CSRspGuildHome& guildhome() const;
  PROTOBUF_NODISCARD ::msg::CSRspGuildHome* release_guildhome();
  ::msg::CSRspGuildHome* mutable_guildhome();
  void set_allocated_guildhome(::msg::CSRspGuildHome* guildhome);
  private:
  const ::msg::CSRspGuildHome& _internal_guildhome() const;
  ::msg::CSRspGuildHome* _internal_mutable_guildhome();
  public:
  void unsafe_arena_set_allocated_guildhome(
      ::msg::CSRspGuildHome* guildhome);
  ::msg::CSRspGuildHome* unsafe_arena_release_guildhome();

  // .msg.CSRspGuildInfo GuildInfo = 364;
  bool has_guildinfo() const;
  private:
  bool _internal_has_guildinfo() const;
  public:
  void clear_guildinfo();
  const ::msg::CSRspGuildInfo& guildinfo() const;
  PROTOBUF_NODISCARD ::msg::CSRspGuildInfo* release_guildinfo();
  ::msg::CSRspGuildInfo* mutable_guildinfo();
  void set_allocated_guildinfo(::msg::CSRspGuildInfo* guildinfo);
  private:
  const ::msg::CSRspGuildInfo& _internal_guildinfo() const;
  ::msg::CSRspGuildInfo* _internal_mutable_guildinfo();
  public:
  void unsafe_arena_set_allocated_guildinfo(
      ::msg::CSRspGuildInfo* guildinfo);
  ::msg::CSRspGuildInfo* unsafe_arena_release_guildinfo();

  // .msg.CSRspGuildApprove GuildApprove = 365;
  bool has_guildapprove() const;
  private:
  bool _internal_has_guildapprove() const;
  public:
  void clear_guildapprove();
  const ::msg::CSRspGuildApprove& guildapprove() const;
  PROTOBUF_NODISCARD ::msg::CSRspGuildApprove* release_guildapprove();
  ::msg::CSRspGuildApprove* mutable_guildapprove();
  void set_allocated_guildapprove(::msg::CSRspGuildApprove* guildapprove);
  private:
  const ::msg::CSRspGuildApprove& _internal_guildapprove() const;
  ::msg::CSRspGuildApprove* _internal_mutable_guildapprove();
  public:
  void unsafe_arena_set_allocated_guildapprove(
      ::msg::CSRspGuildApprove* guildapprove);
  ::msg::CSRspGuildApprove* unsafe_arena_release_guildapprove();

  // .msg.CSRspGuildSetRole GuildRole = 366;
  bool has_guildrole() const;
  private:
  bool _internal_has_guildrole() const;
  public:
  void clear_guildrole();
  const ::msg::CSRspGuildSetRole& guildrole() const;
  PROTOBUF_NODISCARD ::msg::CSRspGuildSetRole* release_guildrole();
  ::msg::CSRspGuildSetRole* mutable_guildrole();
  void set_allocated_guildrole(::msg::CSRspGuildSetRole* guildrole);
  private:
  const ::msg::CSRspGuildSetRole& _internal_guildrole() const;
  ::msg::CSRspGuildSetRole* _internal_mutable_guildrole();
  public:
  void unsafe_arena_set_allocated_guildrole(
      ::msg::CSRspGuildSetRole* guildrole);
  ::msg::CSRspGuildSetRole* unsafe_arena_release_guildrole();

  // .msg.CSRspGuildModify GuildModify = 367;
  bool has_guildmodify() const;
  private:
  bool _internal_has_guildmodify() const;
  public:
  void clear_guildmodify();
  const ::msg::CSRspGuildModify& guildmodify() const;
  PROTOBUF_NODISCARD ::msg::CSRspGuildModify* release_guildmodify();
  ::msg::CSRspGuildModify* mutable_guildmodify();
  void set_allocated_guildmodify(::msg::CSRspGuildModify* guildmodify);
  private:
  const ::msg::CSRspGuildModify& _internal_guildmodify() const;
  ::msg::CSRspGuildModify* _internal_mutable_guildmodify();
  public:
  void unsafe_arena_set_allocated_guildmodify(
      ::msg::CSRspGuildModify* guildmodify);
  ::msg::CSRspGuildModify* unsafe_arena_release_guildmodify();

  // .msg.CSRspGuildKickoff GuildKickoff = 368;
  bool has_guildkickoff() const;
  private:
  bool _internal_has_guildkickoff() const;
  public:
  void clear_guildkickoff();
  const ::msg::CSRspGuildKickoff& guildkickoff() const;
  PROTOBUF_NODISCARD ::msg::CSRspGuildKickoff* release_guildkickoff();
  ::msg::CSRspGuildKickoff* mutable_guildkickoff();
  void set_allocated_guildkickoff(::msg::CSRspGuildKickoff* guildkickoff);
  private:
  const ::msg::CSRspGuildKickoff& _internal_guildkickoff() const;
  ::msg::CSRspGuildKickoff* _internal_mutable_guildkickoff();
  public:
  void unsafe_arena_set_allocated_guildkickoff(
      ::msg::CSRspGuildKickoff* guildkickoff);
  ::msg::CSRspGuildKickoff* unsafe_arena_release_guildkickoff();

  // .msg.CSRspGuildDismiss GuildDismiss = 369;
  bool has_guilddismiss() const;
  private:
  bool _internal_has_guilddismiss() const;
  public:
  void clear_guilddismiss();
  const ::msg::CSRspGuildDismiss& guilddismiss() const;
  PROTOBUF_NODISCARD ::msg::CSRspGuildDismiss* release_guilddismiss();
  ::msg::CSRspGuildDismiss* mutable_guilddismiss();
  void set_allocated_guilddismiss(::msg::CSRspGuildDismiss* guilddismiss);
  private:
  const ::msg::CSRspGuildDismiss& _internal_guilddismiss() const;
  ::msg::CSRspGuildDismiss* _internal_mutable_guilddismiss();
  public:
  void unsafe_arena_set_allocated_guilddismiss(
      ::msg::CSRspGuildDismiss* guilddismiss);
  ::msg::CSRspGuildDismiss* unsafe_arena_release_guilddismiss();

  // .msg.CSRspGuildExit GuildExit = 370;
  bool has_guildexit() const;
  private:
  bool _internal_has_guildexit() const;
  public:
  void clear_guildexit();
  const ::msg::CSRspGuildExit& guildexit() const;
  PROTOBUF_NODISCARD ::msg::CSRspGuildExit* release_guildexit();
  ::msg::CSRspGuildExit* mutable_guildexit();
  void set_allocated_guildexit(::msg::CSRspGuildExit* guildexit);
  private:
  const ::msg::CSRspGuildExit& _internal_guildexit() const;
  ::msg::CSRspGuildExit* _internal_mutable_guildexit();
  public:
  void unsafe_arena_set_allocated_guildexit(
      ::msg::CSRspGuildExit* guildexit);
  ::msg::CSRspGuildExit* unsafe_arena_release_guildexit();

  // .msg.CSRspGuildChat GuildChat = 371;
  bool has_guildchat() const;
  private:
  bool _internal_has_guildchat() const;
  public:
  void clear_guildchat();
  const ::msg::CSRspGuildChat& guildchat() const;
  PROTOBUF_NODISCARD ::msg::CSRspGuildChat* release_guildchat();
  ::msg::CSRspGuildChat* mutable_guildchat();
  void set_allocated_guildchat(::msg::CSRspGuildChat* guildchat);
  private:
  const ::msg::CSRspGuildChat& _internal_guildchat() const;
  ::msg::CSRspGuildChat* _internal_mutable_guildchat();
  public:
  void unsafe_arena_set_allocated_guildchat(
      ::msg::CSRspGuildChat* guildchat);
  ::msg::CSRspGuildChat* unsafe_arena_release_guildchat();

  // .msg.CSRspGuildList GuildList = 372;
  bool has_guildlist() const;
  private:
  bool _internal_has_guildlist() const;
  public:
  void clear_guildlist();
  const ::msg::CSRspGuildList& guildlist() const;
  PROTOBUF_NODISCARD ::msg::CSRspGuildList* release_guildlist();
  ::msg::CSRspGuildList* mutable_guildlist();
  void set_allocated_guildlist(::msg::CSRspGuildList* guildlist);
  private:
  const ::msg::CSRspGuildList& _internal_guildlist() const;
  ::msg::CSRspGuildList* _internal_mutable_guildlist();
  public:
  void unsafe_arena_set_allocated_guildlist(
      ::msg::CSRspGuildList* guildlist);
  ::msg::CSRspGuildList* unsafe_arena_release_guildlist();

  // .msg.CSRspGuildRecommendPlayers GuildRecommendPlayers = 373;
  bool has_guildrecommendplayers() const;
  private:
  bool _internal_has_guildrecommendplayers() const;
  public:
  void clear_guildrecommendplayers();
  const ::msg::CSRspGuildRecommendPlayers& guildrecommendplayers() const;
  PROTOBUF_NODISCARD ::msg::CSRspGuildRecommendPlayers* release_guildrecommendplayers();
  ::msg::CSRspGuildRecommendPlayers* mutable_guildrecommendplayers();
  void set_allocated_guildrecommendplayers(::msg::CSRspGuildRecommendPlayers* guildrecommendplayers);
  private:
  const ::msg::CSRspGuildRecommendPlayers& _internal_guildrecommendplayers() const;
  ::msg::CSRspGuildRecommendPlayers* _internal_mutable_guildrecommendplayers();
  public:
  void unsafe_arena_set_allocated_guildrecommendplayers(
      ::msg::CSRspGuildRecommendPlayers* guildrecommendplayers);
  ::msg::CSRspGuildRecommendPlayers* unsafe_arena_release_guildrecommendplayers();

  // .msg.CSRspGuildInviteList GuildInviteList = 374;
  bool has_guildinvitelist() const;
  private:
  bool _internal_has_guildinvitelist() const;
  public:
  void clear_guildinvitelist();
  const ::msg::CSRspGuildInviteList& guildinvitelist() const;
  PROTOBUF_NODISCARD ::msg::CSRspGuildInviteList* release_guildinvitelist();
  ::msg::CSRspGuildInviteList* mutable_guildinvitelist();
  void set_allocated_guildinvitelist(::msg::CSRspGuildInviteList* guildinvitelist);
  private:
  const ::msg::CSRspGuildInviteList& _internal_guildinvitelist() const;
  ::msg::CSRspGuildInviteList* _internal_mutable_guildinvitelist();
  public:
  void unsafe_arena_set_allocated_guildinvitelist(
      ::msg::CSRspGuildInviteList* guildinvitelist);
  ::msg::CSRspGuildInviteList* unsafe_arena_release_guildinvitelist();

  // .msg.CSRspGuildInvite GuildInvite = 375;
  bool has_guildinvite() const;
  private:
  bool _internal_has_guildinvite() const;
  public:
  void clear_guildinvite();
  const ::msg::CSRspGuildInvite& guildinvite() const;
  PROTOBUF_NODISCARD ::msg::CSRspGuildInvite* release_guildinvite();
  ::msg::CSRspGuildInvite* mutable_guildinvite();
  void set_allocated_guildinvite(::msg::CSRspGuildInvite* guildinvite);
  private:
  const ::msg::CSRspGuildInvite& _internal_guildinvite() const;
  ::msg::CSRspGuildInvite* _internal_mutable_guildinvite();
  public:
  void unsafe_arena_set_allocated_guildinvite(
      ::msg::CSRspGuildInvite* guildinvite);
  ::msg::CSRspGuildInvite* unsafe_arena_release_guildinvite();

  // .msg.CSRspGuildRejectInvite GuildRejectInvite = 377;
  bool has_guildrejectinvite() const;
  private:
  bool _internal_has_guildrejectinvite() const;
  public:
  void clear_guildrejectinvite();
  const ::msg::CSRspGuildRejectInvite& guildrejectinvite() const;
  PROTOBUF_NODISCARD ::msg::CSRspGuildRejectInvite* release_guildrejectinvite();
  ::msg::CSRspGuildRejectInvite* mutable_guildrejectinvite();
  void set_allocated_guildrejectinvite(::msg::CSRspGuildRejectInvite* guildrejectinvite);
  private:
  const ::msg::CSRspGuildRejectInvite& _internal_guildrejectinvite() const;
  ::msg::CSRspGuildRejectInvite* _internal_mutable_guildrejectinvite();
  public:
  void unsafe_arena_set_allocated_guildrejectinvite(
      ::msg::CSRspGuildRejectInvite* guildrejectinvite);
  ::msg::CSRspGuildRejectInvite* unsafe_arena_release_guildrejectinvite();

  // .msg.CSRspGetVngCommentAward GetVngCommentAward = 390;
  bool has_getvngcommentaward() const;
  private:
  bool _internal_has_getvngcommentaward() const;
  public:
  void clear_getvngcommentaward();
  const ::msg::CSRspGetVngCommentAward& getvngcommentaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetVngCommentAward* release_getvngcommentaward();
  ::msg::CSRspGetVngCommentAward* mutable_getvngcommentaward();
  void set_allocated_getvngcommentaward(::msg::CSRspGetVngCommentAward* getvngcommentaward);
  private:
  const ::msg::CSRspGetVngCommentAward& _internal_getvngcommentaward() const;
  ::msg::CSRspGetVngCommentAward* _internal_mutable_getvngcommentaward();
  public:
  void unsafe_arena_set_allocated_getvngcommentaward(
      ::msg::CSRspGetVngCommentAward* getvngcommentaward);
  ::msg::CSRspGetVngCommentAward* unsafe_arena_release_getvngcommentaward();

  // .msg.CSRspLevelupChest LevelupChest = 391;
  bool has_levelupchest() const;
  private:
  bool _internal_has_levelupchest() const;
  public:
  void clear_levelupchest();
  const ::msg::CSRspLevelupChest& levelupchest() const;
  PROTOBUF_NODISCARD ::msg::CSRspLevelupChest* release_levelupchest();
  ::msg::CSRspLevelupChest* mutable_levelupchest();
  void set_allocated_levelupchest(::msg::CSRspLevelupChest* levelupchest);
  private:
  const ::msg::CSRspLevelupChest& _internal_levelupchest() const;
  ::msg::CSRspLevelupChest* _internal_mutable_levelupchest();
  public:
  void unsafe_arena_set_allocated_levelupchest(
      ::msg::CSRspLevelupChest* levelupchest);
  ::msg::CSRspLevelupChest* unsafe_arena_release_levelupchest();

  // .msg.CSRspWatchAd WatchAd = 392;
  bool has_watchad() const;
  private:
  bool _internal_has_watchad() const;
  public:
  void clear_watchad();
  const ::msg::CSRspWatchAd& watchad() const;
  PROTOBUF_NODISCARD ::msg::CSRspWatchAd* release_watchad();
  ::msg::CSRspWatchAd* mutable_watchad();
  void set_allocated_watchad(::msg::CSRspWatchAd* watchad);
  private:
  const ::msg::CSRspWatchAd& _internal_watchad() const;
  ::msg::CSRspWatchAd* _internal_mutable_watchad();
  public:
  void unsafe_arena_set_allocated_watchad(
      ::msg::CSRspWatchAd* watchad);
  ::msg::CSRspWatchAd* unsafe_arena_release_watchad();

  // .msg.CSRspQueryPsTournamentRoom PsTournamentRoom = 393;
  bool has_pstournamentroom() const;
  private:
  bool _internal_has_pstournamentroom() const;
  public:
  void clear_pstournamentroom();
  const ::msg::CSRspQueryPsTournamentRoom& pstournamentroom() const;
  PROTOBUF_NODISCARD ::msg::CSRspQueryPsTournamentRoom* release_pstournamentroom();
  ::msg::CSRspQueryPsTournamentRoom* mutable_pstournamentroom();
  void set_allocated_pstournamentroom(::msg::CSRspQueryPsTournamentRoom* pstournamentroom);
  private:
  const ::msg::CSRspQueryPsTournamentRoom& _internal_pstournamentroom() const;
  ::msg::CSRspQueryPsTournamentRoom* _internal_mutable_pstournamentroom();
  public:
  void unsafe_arena_set_allocated_pstournamentroom(
      ::msg::CSRspQueryPsTournamentRoom* pstournamentroom);
  ::msg::CSRspQueryPsTournamentRoom* unsafe_arena_release_pstournamentroom();

  // .msg.CSRspGetAdCumulateAward GetAdCumulateAward = 394;
  bool has_getadcumulateaward() const;
  private:
  bool _internal_has_getadcumulateaward() const;
  public:
  void clear_getadcumulateaward();
  const ::msg::CSRspGetAdCumulateAward& getadcumulateaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetAdCumulateAward* release_getadcumulateaward();
  ::msg::CSRspGetAdCumulateAward* mutable_getadcumulateaward();
  void set_allocated_getadcumulateaward(::msg::CSRspGetAdCumulateAward* getadcumulateaward);
  private:
  const ::msg::CSRspGetAdCumulateAward& _internal_getadcumulateaward() const;
  ::msg::CSRspGetAdCumulateAward* _internal_mutable_getadcumulateaward();
  public:
  void unsafe_arena_set_allocated_getadcumulateaward(
      ::msg::CSRspGetAdCumulateAward* getadcumulateaward);
  ::msg::CSRspGetAdCumulateAward* unsafe_arena_release_getadcumulateaward();

  // .msg.CSRspSetMessengerPos SetMessengerPos = 534;
  bool has_setmessengerpos() const;
  private:
  bool _internal_has_setmessengerpos() const;
  public:
  void clear_setmessengerpos();
  const ::msg::CSRspSetMessengerPos& setmessengerpos() const;
  PROTOBUF_NODISCARD ::msg::CSRspSetMessengerPos* release_setmessengerpos();
  ::msg::CSRspSetMessengerPos* mutable_setmessengerpos();
  void set_allocated_setmessengerpos(::msg::CSRspSetMessengerPos* setmessengerpos);
  private:
  const ::msg::CSRspSetMessengerPos& _internal_setmessengerpos() const;
  ::msg::CSRspSetMessengerPos* _internal_mutable_setmessengerpos();
  public:
  void unsafe_arena_set_allocated_setmessengerpos(
      ::msg::CSRspSetMessengerPos* setmessengerpos);
  ::msg::CSRspSetMessengerPos* unsafe_arena_release_setmessengerpos();

  // .msg.CSRspUpdateAntiAddictionTime AntiAddictionTime = 554;
  bool has_antiaddictiontime() const;
  private:
  bool _internal_has_antiaddictiontime() const;
  public:
  void clear_antiaddictiontime();
  const ::msg::CSRspUpdateAntiAddictionTime& antiaddictiontime() const;
  PROTOBUF_NODISCARD ::msg::CSRspUpdateAntiAddictionTime* release_antiaddictiontime();
  ::msg::CSRspUpdateAntiAddictionTime* mutable_antiaddictiontime();
  void set_allocated_antiaddictiontime(::msg::CSRspUpdateAntiAddictionTime* antiaddictiontime);
  private:
  const ::msg::CSRspUpdateAntiAddictionTime& _internal_antiaddictiontime() const;
  ::msg::CSRspUpdateAntiAddictionTime* _internal_mutable_antiaddictiontime();
  public:
  void unsafe_arena_set_allocated_antiaddictiontime(
      ::msg::CSRspUpdateAntiAddictionTime* antiaddictiontime);
  ::msg::CSRspUpdateAntiAddictionTime* unsafe_arena_release_antiaddictiontime();

  // .msg.CSRspCancelReconnect CancelReconnect = 555;
  bool has_cancelreconnect() const;
  private:
  bool _internal_has_cancelreconnect() const;
  public:
  void clear_cancelreconnect();
  const ::msg::CSRspCancelReconnect& cancelreconnect() const;
  PROTOBUF_NODISCARD ::msg::CSRspCancelReconnect* release_cancelreconnect();
  ::msg::CSRspCancelReconnect* mutable_cancelreconnect();
  void set_allocated_cancelreconnect(::msg::CSRspCancelReconnect* cancelreconnect);
  private:
  const ::msg::CSRspCancelReconnect& _internal_cancelreconnect() const;
  ::msg::CSRspCancelReconnect* _internal_mutable_cancelreconnect();
  public:
  void unsafe_arena_set_allocated_cancelreconnect(
      ::msg::CSRspCancelReconnect* cancelreconnect);
  ::msg::CSRspCancelReconnect* unsafe_arena_release_cancelreconnect();

  // .msg.CSRspReconnect Reconnect = 557;
  bool has_reconnect() const;
  private:
  bool _internal_has_reconnect() const;
  public:
  void clear_reconnect();
  const ::msg::CSRspReconnect& reconnect() const;
  PROTOBUF_NODISCARD ::msg::CSRspReconnect* release_reconnect();
  ::msg::CSRspReconnect* mutable_reconnect();
  void set_allocated_reconnect(::msg::CSRspReconnect* reconnect);
  private:
  const ::msg::CSRspReconnect& _internal_reconnect() const;
  ::msg::CSRspReconnect* _internal_mutable_reconnect();
  public:
  void unsafe_arena_set_allocated_reconnect(
      ::msg::CSRspReconnect* reconnect);
  ::msg::CSRspReconnect* unsafe_arena_release_reconnect();

  // .msg.CSRspPassThrough PassThrough = 563;
  bool has_passthrough() const;
  private:
  bool _internal_has_passthrough() const;
  public:
  void clear_passthrough();
  const ::msg::CSRspPassThrough& passthrough() const;
  PROTOBUF_NODISCARD ::msg::CSRspPassThrough* release_passthrough();
  ::msg::CSRspPassThrough* mutable_passthrough();
  void set_allocated_passthrough(::msg::CSRspPassThrough* passthrough);
  private:
  const ::msg::CSRspPassThrough& _internal_passthrough() const;
  ::msg::CSRspPassThrough* _internal_mutable_passthrough();
  public:
  void unsafe_arena_set_allocated_passthrough(
      ::msg::CSRspPassThrough* passthrough);
  ::msg::CSRspPassThrough* unsafe_arena_release_passthrough();

  // .msg.CSRspVisitPlayer VisitPlayer = 564;
  bool has_visitplayer() const;
  private:
  bool _internal_has_visitplayer() const;
  public:
  void clear_visitplayer();
  const ::msg::CSRspVisitPlayer& visitplayer() const;
  PROTOBUF_NODISCARD ::msg::CSRspVisitPlayer* release_visitplayer();
  ::msg::CSRspVisitPlayer* mutable_visitplayer();
  void set_allocated_visitplayer(::msg::CSRspVisitPlayer* visitplayer);
  private:
  const ::msg::CSRspVisitPlayer& _internal_visitplayer() const;
  ::msg::CSRspVisitPlayer* _internal_mutable_visitplayer();
  public:
  void unsafe_arena_set_allocated_visitplayer(
      ::msg::CSRspVisitPlayer* visitplayer);
  ::msg::CSRspVisitPlayer* unsafe_arena_release_visitplayer();

  // .msg.CSRspLeaveGameEarly LeaveGameEarly = 565;
  bool has_leavegameearly() const;
  private:
  bool _internal_has_leavegameearly() const;
  public:
  void clear_leavegameearly();
  const ::msg::CSRspLeaveGameEarly& leavegameearly() const;
  PROTOBUF_NODISCARD ::msg::CSRspLeaveGameEarly* release_leavegameearly();
  ::msg::CSRspLeaveGameEarly* mutable_leavegameearly();
  void set_allocated_leavegameearly(::msg::CSRspLeaveGameEarly* leavegameearly);
  private:
  const ::msg::CSRspLeaveGameEarly& _internal_leavegameearly() const;
  ::msg::CSRspLeaveGameEarly* _internal_mutable_leavegameearly();
  public:
  void unsafe_arena_set_allocated_leavegameearly(
      ::msg::CSRspLeaveGameEarly* leavegameearly);
  ::msg::CSRspLeaveGameEarly* unsafe_arena_release_leavegameearly();

  // .msg.CSRspGDCommonBin GDCommonBin = 566;
  bool has_gdcommonbin() const;
  private:
  bool _internal_has_gdcommonbin() const;
  public:
  void clear_gdcommonbin();
  const ::msg::CSRspGDCommonBin& gdcommonbin() const;
  PROTOBUF_NODISCARD ::msg::CSRspGDCommonBin* release_gdcommonbin();
  ::msg::CSRspGDCommonBin* mutable_gdcommonbin();
  void set_allocated_gdcommonbin(::msg::CSRspGDCommonBin* gdcommonbin);
  private:
  const ::msg::CSRspGDCommonBin& _internal_gdcommonbin() const;
  ::msg::CSRspGDCommonBin* _internal_mutable_gdcommonbin();
  public:
  void unsafe_arena_set_allocated_gdcommonbin(
      ::msg::CSRspGDCommonBin* gdcommonbin);
  ::msg::CSRspGDCommonBin* unsafe_arena_release_gdcommonbin();

  // .msg.CSRspGDCommonBinData GDBinData = 567;
  bool has_gdbindata() const;
  private:
  bool _internal_has_gdbindata() const;
  public:
  void clear_gdbindata();
  const ::msg::CSRspGDCommonBinData& gdbindata() const;
  PROTOBUF_NODISCARD ::msg::CSRspGDCommonBinData* release_gdbindata();
  ::msg::CSRspGDCommonBinData* mutable_gdbindata();
  void set_allocated_gdbindata(::msg::CSRspGDCommonBinData* gdbindata);
  private:
  const ::msg::CSRspGDCommonBinData& _internal_gdbindata() const;
  ::msg::CSRspGDCommonBinData* _internal_mutable_gdbindata();
  public:
  void unsafe_arena_set_allocated_gdbindata(
      ::msg::CSRspGDCommonBinData* gdbindata);
  ::msg::CSRspGDCommonBinData* unsafe_arena_release_gdbindata();

  // .msg.CSRspBattleCampResult BattleCampResult = 568;
  bool has_battlecampresult() const;
  private:
  bool _internal_has_battlecampresult() const;
  public:
  void clear_battlecampresult();
  const ::msg::CSRspBattleCampResult& battlecampresult() const;
  PROTOBUF_NODISCARD ::msg::CSRspBattleCampResult* release_battlecampresult();
  ::msg::CSRspBattleCampResult* mutable_battlecampresult();
  void set_allocated_battlecampresult(::msg::CSRspBattleCampResult* battlecampresult);
  private:
  const ::msg::CSRspBattleCampResult& _internal_battlecampresult() const;
  ::msg::CSRspBattleCampResult* _internal_mutable_battlecampresult();
  public:
  void unsafe_arena_set_allocated_battlecampresult(
      ::msg::CSRspBattleCampResult* battlecampresult);
  ::msg::CSRspBattleCampResult* unsafe_arena_release_battlecampresult();

  // .msg.CSRspAutoBattleOP AutoBattleOP = 569;
  bool has_autobattleop() const;
  private:
  bool _internal_has_autobattleop() const;
  public:
  void clear_autobattleop();
  const ::msg::CSRspAutoBattleOP& autobattleop() const;
  PROTOBUF_NODISCARD ::msg::CSRspAutoBattleOP* release_autobattleop();
  ::msg::CSRspAutoBattleOP* mutable_autobattleop();
  void set_allocated_autobattleop(::msg::CSRspAutoBattleOP* autobattleop);
  private:
  const ::msg::CSRspAutoBattleOP& _internal_autobattleop() const;
  ::msg::CSRspAutoBattleOP* _internal_mutable_autobattleop();
  public:
  void unsafe_arena_set_allocated_autobattleop(
      ::msg::CSRspAutoBattleOP* autobattleop);
  ::msg::CSRspAutoBattleOP* unsafe_arena_release_autobattleop();

  // .msg.CSRspRestrictUser RestrictUser = 570;
  bool has_restrictuser() const;
  private:
  bool _internal_has_restrictuser() const;
  public:
  void clear_restrictuser();
  const ::msg::CSRspRestrictUser& restrictuser() const;
  PROTOBUF_NODISCARD ::msg::CSRspRestrictUser* release_restrictuser();
  ::msg::CSRspRestrictUser* mutable_restrictuser();
  void set_allocated_restrictuser(::msg::CSRspRestrictUser* restrictuser);
  private:
  const ::msg::CSRspRestrictUser& _internal_restrictuser() const;
  ::msg::CSRspRestrictUser* _internal_mutable_restrictuser();
  public:
  void unsafe_arena_set_allocated_restrictuser(
      ::msg::CSRspRestrictUser* restrictuser);
  ::msg::CSRspRestrictUser* unsafe_arena_release_restrictuser();

  // .msg.CSRspEquipSelectRate EquipSelectRate = 571;
  bool has_equipselectrate() const;
  private:
  bool _internal_has_equipselectrate() const;
  public:
  void clear_equipselectrate();
  const ::msg::CSRspEquipSelectRate& equipselectrate() const;
  PROTOBUF_NODISCARD ::msg::CSRspEquipSelectRate* release_equipselectrate();
  ::msg::CSRspEquipSelectRate* mutable_equipselectrate();
  void set_allocated_equipselectrate(::msg::CSRspEquipSelectRate* equipselectrate);
  private:
  const ::msg::CSRspEquipSelectRate& _internal_equipselectrate() const;
  ::msg::CSRspEquipSelectRate* _internal_mutable_equipselectrate();
  public:
  void unsafe_arena_set_allocated_equipselectrate(
      ::msg::CSRspEquipSelectRate* equipselectrate);
  ::msg::CSRspEquipSelectRate* unsafe_arena_release_equipselectrate();

  // .msg.CSRspReportAbsent ReportAbsent = 572;
  bool has_reportabsent() const;
  private:
  bool _internal_has_reportabsent() const;
  public:
  void clear_reportabsent();
  const ::msg::CSRspReportAbsent& reportabsent() const;
  PROTOBUF_NODISCARD ::msg::CSRspReportAbsent* release_reportabsent();
  ::msg::CSRspReportAbsent* mutable_reportabsent();
  void set_allocated_reportabsent(::msg::CSRspReportAbsent* reportabsent);
  private:
  const ::msg::CSRspReportAbsent& _internal_reportabsent() const;
  ::msg::CSRspReportAbsent* _internal_mutable_reportabsent();
  public:
  void unsafe_arena_set_allocated_reportabsent(
      ::msg::CSRspReportAbsent* reportabsent);
  ::msg::CSRspReportAbsent* unsafe_arena_release_reportabsent();

  // .msg.CSRspRecommendWeek RecommendWeek = 600;
  bool has_recommendweek() const;
  private:
  bool _internal_has_recommendweek() const;
  public:
  void clear_recommendweek();
  const ::msg::CSRspRecommendWeek& recommendweek() const;
  PROTOBUF_NODISCARD ::msg::CSRspRecommendWeek* release_recommendweek();
  ::msg::CSRspRecommendWeek* mutable_recommendweek();
  void set_allocated_recommendweek(::msg::CSRspRecommendWeek* recommendweek);
  private:
  const ::msg::CSRspRecommendWeek& _internal_recommendweek() const;
  ::msg::CSRspRecommendWeek* _internal_mutable_recommendweek();
  public:
  void unsafe_arena_set_allocated_recommendweek(
      ::msg::CSRspRecommendWeek* recommendweek);
  ::msg::CSRspRecommendWeek* unsafe_arena_release_recommendweek();

  // .msg.CSRspRecommendOfficial RecommendOfficial = 601;
  bool has_recommendofficial() const;
  private:
  bool _internal_has_recommendofficial() const;
  public:
  void clear_recommendofficial();
  const ::msg::CSRspRecommendOfficial& recommendofficial() const;
  PROTOBUF_NODISCARD ::msg::CSRspRecommendOfficial* release_recommendofficial();
  ::msg::CSRspRecommendOfficial* mutable_recommendofficial();
  void set_allocated_recommendofficial(::msg::CSRspRecommendOfficial* recommendofficial);
  private:
  const ::msg::CSRspRecommendOfficial& _internal_recommendofficial() const;
  ::msg::CSRspRecommendOfficial* _internal_mutable_recommendofficial();
  public:
  void unsafe_arena_set_allocated_recommendofficial(
      ::msg::CSRspRecommendOfficial* recommendofficial);
  ::msg::CSRspRecommendOfficial* unsafe_arena_release_recommendofficial();

  // .msg.CSRspRecommendLatest RecommendLatest = 602;
  bool has_recommendlatest() const;
  private:
  bool _internal_has_recommendlatest() const;
  public:
  void clear_recommendlatest();
  const ::msg::CSRspRecommendLatest& recommendlatest() const;
  PROTOBUF_NODISCARD ::msg::CSRspRecommendLatest* release_recommendlatest();
  ::msg::CSRspRecommendLatest* mutable_recommendlatest();
  void set_allocated_recommendlatest(::msg::CSRspRecommendLatest* recommendlatest);
  private:
  const ::msg::CSRspRecommendLatest& _internal_recommendlatest() const;
  ::msg::CSRspRecommendLatest* _internal_mutable_recommendlatest();
  public:
  void unsafe_arena_set_allocated_recommendlatest(
      ::msg::CSRspRecommendLatest* recommendlatest);
  ::msg::CSRspRecommendLatest* unsafe_arena_release_recommendlatest();

  // .msg.CSRspRecommendHistory RecommendHistory = 603;
  bool has_recommendhistory() const;
  private:
  bool _internal_has_recommendhistory() const;
  public:
  void clear_recommendhistory();
  const ::msg::CSRspRecommendHistory& recommendhistory() const;
  PROTOBUF_NODISCARD ::msg::CSRspRecommendHistory* release_recommendhistory();
  ::msg::CSRspRecommendHistory* mutable_recommendhistory();
  void set_allocated_recommendhistory(::msg::CSRspRecommendHistory* recommendhistory);
  private:
  const ::msg::CSRspRecommendHistory& _internal_recommendhistory() const;
  ::msg::CSRspRecommendHistory* _internal_mutable_recommendhistory();
  public:
  void unsafe_arena_set_allocated_recommendhistory(
      ::msg::CSRspRecommendHistory* recommendhistory);
  ::msg::CSRspRecommendHistory* unsafe_arena_release_recommendhistory();

  // .msg.CSRspRecommendCollect RecommendCollect = 604;
  bool has_recommendcollect() const;
  private:
  bool _internal_has_recommendcollect() const;
  public:
  void clear_recommendcollect();
  const ::msg::CSRspRecommendCollect& recommendcollect() const;
  PROTOBUF_NODISCARD ::msg::CSRspRecommendCollect* release_recommendcollect();
  ::msg::CSRspRecommendCollect* mutable_recommendcollect();
  void set_allocated_recommendcollect(::msg::CSRspRecommendCollect* recommendcollect);
  private:
  const ::msg::CSRspRecommendCollect& _internal_recommendcollect() const;
  ::msg::CSRspRecommendCollect* _internal_mutable_recommendcollect();
  public:
  void unsafe_arena_set_allocated_recommendcollect(
      ::msg::CSRspRecommendCollect* recommendcollect);
  ::msg::CSRspRecommendCollect* unsafe_arena_release_recommendcollect();

  // .msg.CSRspRecommendSet RecommendSet = 605;
  bool has_recommendset() const;
  private:
  bool _internal_has_recommendset() const;
  public:
  void clear_recommendset();
  const ::msg::CSRspRecommendSet& recommendset() const;
  PROTOBUF_NODISCARD ::msg::CSRspRecommendSet* release_recommendset();
  ::msg::CSRspRecommendSet* mutable_recommendset();
  void set_allocated_recommendset(::msg::CSRspRecommendSet* recommendset);
  private:
  const ::msg::CSRspRecommendSet& _internal_recommendset() const;
  ::msg::CSRspRecommendSet* _internal_mutable_recommendset();
  public:
  void unsafe_arena_set_allocated_recommendset(
      ::msg::CSRspRecommendSet* recommendset);
  ::msg::CSRspRecommendSet* unsafe_arena_release_recommendset();

  // .msg.CSRspRecommendGetCollection RecommendGetCollection = 606;
  bool has_recommendgetcollection() const;
  private:
  bool _internal_has_recommendgetcollection() const;
  public:
  void clear_recommendgetcollection();
  const ::msg::CSRspRecommendGetCollection& recommendgetcollection() const;
  PROTOBUF_NODISCARD ::msg::CSRspRecommendGetCollection* release_recommendgetcollection();
  ::msg::CSRspRecommendGetCollection* mutable_recommendgetcollection();
  void set_allocated_recommendgetcollection(::msg::CSRspRecommendGetCollection* recommendgetcollection);
  private:
  const ::msg::CSRspRecommendGetCollection& _internal_recommendgetcollection() const;
  ::msg::CSRspRecommendGetCollection* _internal_mutable_recommendgetcollection();
  public:
  void unsafe_arena_set_allocated_recommendgetcollection(
      ::msg::CSRspRecommendGetCollection* recommendgetcollection);
  ::msg::CSRspRecommendGetCollection* unsafe_arena_release_recommendgetcollection();

  // .msg.CSRspRecommendEquip RecommendEquip = 607;
  bool has_recommendequip() const;
  private:
  bool _internal_has_recommendequip() const;
  public:
  void clear_recommendequip();
  const ::msg::CSRspRecommendEquip& recommendequip() const;
  PROTOBUF_NODISCARD ::msg::CSRspRecommendEquip* release_recommendequip();
  ::msg::CSRspRecommendEquip* mutable_recommendequip();
  void set_allocated_recommendequip(::msg::CSRspRecommendEquip* recommendequip);
  private:
  const ::msg::CSRspRecommendEquip& _internal_recommendequip() const;
  ::msg::CSRspRecommendEquip* _internal_mutable_recommendequip();
  public:
  void unsafe_arena_set_allocated_recommendequip(
      ::msg::CSRspRecommendEquip* recommendequip);
  ::msg::CSRspRecommendEquip* unsafe_arena_release_recommendequip();

  // .msg.CSRspLoginCancel LoginCancel = 608;
  bool has_logincancel() const;
  private:
  bool _internal_has_logincancel() const;
  public:
  void clear_logincancel();
  const ::msg::CSRspLoginCancel& logincancel() const;
  PROTOBUF_NODISCARD ::msg::CSRspLoginCancel* release_logincancel();
  ::msg::CSRspLoginCancel* mutable_logincancel();
  void set_allocated_logincancel(::msg::CSRspLoginCancel* logincancel);
  private:
  const ::msg::CSRspLoginCancel& _internal_logincancel() const;
  ::msg::CSRspLoginCancel* _internal_mutable_logincancel();
  public:
  void unsafe_arena_set_allocated_logincancel(
      ::msg::CSRspLoginCancel* logincancel);
  ::msg::CSRspLoginCancel* unsafe_arena_release_logincancel();

  // .msg.CSRspConvertDebris ConvertDebris = 609;
  bool has_convertdebris() const;
  private:
  bool _internal_has_convertdebris() const;
  public:
  void clear_convertdebris();
  const ::msg::CSRspConvertDebris& convertdebris() const;
  PROTOBUF_NODISCARD ::msg::CSRspConvertDebris* release_convertdebris();
  ::msg::CSRspConvertDebris* mutable_convertdebris();
  void set_allocated_convertdebris(::msg::CSRspConvertDebris* convertdebris);
  private:
  const ::msg::CSRspConvertDebris& _internal_convertdebris() const;
  ::msg::CSRspConvertDebris* _internal_mutable_convertdebris();
  public:
  void unsafe_arena_set_allocated_convertdebris(
      ::msg::CSRspConvertDebris* convertdebris);
  ::msg::CSRspConvertDebris* unsafe_arena_release_convertdebris();

  // .msg.CSRspUseProtectionCard ProtectionCard = 610;
  bool has_protectioncard() const;
  private:
  bool _internal_has_protectioncard() const;
  public:
  void clear_protectioncard();
  const ::msg::CSRspUseProtectionCard& protectioncard() const;
  PROTOBUF_NODISCARD ::msg::CSRspUseProtectionCard* release_protectioncard();
  ::msg::CSRspUseProtectionCard* mutable_protectioncard();
  void set_allocated_protectioncard(::msg::CSRspUseProtectionCard* protectioncard);
  private:
  const ::msg::CSRspUseProtectionCard& _internal_protectioncard() const;
  ::msg::CSRspUseProtectionCard* _internal_mutable_protectioncard();
  public:
  void unsafe_arena_set_allocated_protectioncard(
      ::msg::CSRspUseProtectionCard* protectioncard);
  ::msg::CSRspUseProtectionCard* unsafe_arena_release_protectioncard();

  // .msg.CSRspUsePassportCard UsePassportCard = 611;
  bool has_usepassportcard() const;
  private:
  bool _internal_has_usepassportcard() const;
  public:
  void clear_usepassportcard();
  const ::msg::CSRspUsePassportCard& usepassportcard() const;
  PROTOBUF_NODISCARD ::msg::CSRspUsePassportCard* release_usepassportcard();
  ::msg::CSRspUsePassportCard* mutable_usepassportcard();
  void set_allocated_usepassportcard(::msg::CSRspUsePassportCard* usepassportcard);
  private:
  const ::msg::CSRspUsePassportCard& _internal_usepassportcard() const;
  ::msg::CSRspUsePassportCard* _internal_mutable_usepassportcard();
  public:
  void unsafe_arena_set_allocated_usepassportcard(
      ::msg::CSRspUsePassportCard* usepassportcard);
  ::msg::CSRspUsePassportCard* unsafe_arena_release_usepassportcard();

  // .msg.CSRspSetMedal SetMedal = 612;
  bool has_setmedal() const;
  private:
  bool _internal_has_setmedal() const;
  public:
  void clear_setmedal();
  const ::msg::CSRspSetMedal& setmedal() const;
  PROTOBUF_NODISCARD ::msg::CSRspSetMedal* release_setmedal();
  ::msg::CSRspSetMedal* mutable_setmedal();
  void set_allocated_setmedal(::msg::CSRspSetMedal* setmedal);
  private:
  const ::msg::CSRspSetMedal& _internal_setmedal() const;
  ::msg::CSRspSetMedal* _internal_mutable_setmedal();
  public:
  void unsafe_arena_set_allocated_setmedal(
      ::msg::CSRspSetMedal* setmedal);
  ::msg::CSRspSetMedal* unsafe_arena_release_setmedal();

  // .msg.CSRspUnSetMedal UnSetMedal = 613;
  bool has_unsetmedal() const;
  private:
  bool _internal_has_unsetmedal() const;
  public:
  void clear_unsetmedal();
  const ::msg::CSRspUnSetMedal& unsetmedal() const;
  PROTOBUF_NODISCARD ::msg::CSRspUnSetMedal* release_unsetmedal();
  ::msg::CSRspUnSetMedal* mutable_unsetmedal();
  void set_allocated_unsetmedal(::msg::CSRspUnSetMedal* unsetmedal);
  private:
  const ::msg::CSRspUnSetMedal& _internal_unsetmedal() const;
  ::msg::CSRspUnSetMedal* _internal_mutable_unsetmedal();
  public:
  void unsafe_arena_set_allocated_unsetmedal(
      ::msg::CSRspUnSetMedal* unsetmedal);
  ::msg::CSRspUnSetMedal* unsafe_arena_release_unsetmedal();

  // .msg.CSRspPlayerMedals PlayerMedals = 614;
  bool has_playermedals() const;
  private:
  bool _internal_has_playermedals() const;
  public:
  void clear_playermedals();
  const ::msg::CSRspPlayerMedals& playermedals() const;
  PROTOBUF_NODISCARD ::msg::CSRspPlayerMedals* release_playermedals();
  ::msg::CSRspPlayerMedals* mutable_playermedals();
  void set_allocated_playermedals(::msg::CSRspPlayerMedals* playermedals);
  private:
  const ::msg::CSRspPlayerMedals& _internal_playermedals() const;
  ::msg::CSRspPlayerMedals* _internal_mutable_playermedals();
  public:
  void unsafe_arena_set_allocated_playermedals(
      ::msg::CSRspPlayerMedals* playermedals);
  ::msg::CSRspPlayerMedals* unsafe_arena_release_playermedals();

  // .msg.CSRspUpdateHotDot UpdateHotDot = 615;
  bool has_updatehotdot() const;
  private:
  bool _internal_has_updatehotdot() const;
  public:
  void clear_updatehotdot();
  const ::msg::CSRspUpdateHotDot& updatehotdot() const;
  PROTOBUF_NODISCARD ::msg::CSRspUpdateHotDot* release_updatehotdot();
  ::msg::CSRspUpdateHotDot* mutable_updatehotdot();
  void set_allocated_updatehotdot(::msg::CSRspUpdateHotDot* updatehotdot);
  private:
  const ::msg::CSRspUpdateHotDot& _internal_updatehotdot() const;
  ::msg::CSRspUpdateHotDot* _internal_mutable_updatehotdot();
  public:
  void unsafe_arena_set_allocated_updatehotdot(
      ::msg::CSRspUpdateHotDot* updatehotdot);
  ::msg::CSRspUpdateHotDot* unsafe_arena_release_updatehotdot();

  // .msg.CSRspQueryHotDot QueryHotDot = 616;
  bool has_queryhotdot() const;
  private:
  bool _internal_has_queryhotdot() const;
  public:
  void clear_queryhotdot();
  const ::msg::CSRspQueryHotDot& queryhotdot() const;
  PROTOBUF_NODISCARD ::msg::CSRspQueryHotDot* release_queryhotdot();
  ::msg::CSRspQueryHotDot* mutable_queryhotdot();
  void set_allocated_queryhotdot(::msg::CSRspQueryHotDot* queryhotdot);
  private:
  const ::msg::CSRspQueryHotDot& _internal_queryhotdot() const;
  ::msg::CSRspQueryHotDot* _internal_mutable_queryhotdot();
  public:
  void unsafe_arena_set_allocated_queryhotdot(
      ::msg::CSRspQueryHotDot* queryhotdot);
  ::msg::CSRspQueryHotDot* unsafe_arena_release_queryhotdot();

  // .msg.CSRspSetCache SetCache = 617;
  bool has_setcache() const;
  private:
  bool _internal_has_setcache() const;
  public:
  void clear_setcache();
  const ::msg::CSRspSetCache& setcache() const;
  PROTOBUF_NODISCARD ::msg::CSRspSetCache* release_setcache();
  ::msg::CSRspSetCache* mutable_setcache();
  void set_allocated_setcache(::msg::CSRspSetCache* setcache);
  private:
  const ::msg::CSRspSetCache& _internal_setcache() const;
  ::msg::CSRspSetCache* _internal_mutable_setcache();
  public:
  void unsafe_arena_set_allocated_setcache(
      ::msg::CSRspSetCache* setcache);
  ::msg::CSRspSetCache* unsafe_arena_release_setcache();

  // .msg.CSRspGetCache GetCache = 618;
  bool has_getcache() const;
  private:
  bool _internal_has_getcache() const;
  public:
  void clear_getcache();
  const ::msg::CSRspGetCache& getcache() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetCache* release_getcache();
  ::msg::CSRspGetCache* mutable_getcache();
  void set_allocated_getcache(::msg::CSRspGetCache* getcache);
  private:
  const ::msg::CSRspGetCache& _internal_getcache() const;
  ::msg::CSRspGetCache* _internal_mutable_getcache();
  public:
  void unsafe_arena_set_allocated_getcache(
      ::msg::CSRspGetCache* getcache);
  ::msg::CSRspGetCache* unsafe_arena_release_getcache();

  // .msg.CSRspBuyChallengeCount BuyChallengeCount = 619;
  bool has_buychallengecount() const;
  private:
  bool _internal_has_buychallengecount() const;
  public:
  void clear_buychallengecount();
  const ::msg::CSRspBuyChallengeCount& buychallengecount() const;
  PROTOBUF_NODISCARD ::msg::CSRspBuyChallengeCount* release_buychallengecount();
  ::msg::CSRspBuyChallengeCount* mutable_buychallengecount();
  void set_allocated_buychallengecount(::msg::CSRspBuyChallengeCount* buychallengecount);
  private:
  const ::msg::CSRspBuyChallengeCount& _internal_buychallengecount() const;
  ::msg::CSRspBuyChallengeCount* _internal_mutable_buychallengecount();
  public:
  void unsafe_arena_set_allocated_buychallengecount(
      ::msg::CSRspBuyChallengeCount* buychallengecount);
  ::msg::CSRspBuyChallengeCount* unsafe_arena_release_buychallengecount();

  // .msg.CSRspGetPveRank GetPveRank = 620;
  bool has_getpverank() const;
  private:
  bool _internal_has_getpverank() const;
  public:
  void clear_getpverank();
  const ::msg::CSRspGetPveRank& getpverank() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetPveRank* release_getpverank();
  ::msg::CSRspGetPveRank* mutable_getpverank();
  void set_allocated_getpverank(::msg::CSRspGetPveRank* getpverank);
  private:
  const ::msg::CSRspGetPveRank& _internal_getpverank() const;
  ::msg::CSRspGetPveRank* _internal_mutable_getpverank();
  public:
  void unsafe_arena_set_allocated_getpverank(
      ::msg::CSRspGetPveRank* getpverank);
  ::msg::CSRspGetPveRank* unsafe_arena_release_getpverank();

  // .msg.CSRspAuthAccount AuthAccount = 621;
  bool has_authaccount() const;
  private:
  bool _internal_has_authaccount() const;
  public:
  void clear_authaccount();
  const ::msg::CSRspAuthAccount& authaccount() const;
  PROTOBUF_NODISCARD ::msg::CSRspAuthAccount* release_authaccount();
  ::msg::CSRspAuthAccount* mutable_authaccount();
  void set_allocated_authaccount(::msg::CSRspAuthAccount* authaccount);
  private:
  const ::msg::CSRspAuthAccount& _internal_authaccount() const;
  ::msg::CSRspAuthAccount* _internal_mutable_authaccount();
  public:
  void unsafe_arena_set_allocated_authaccount(
      ::msg::CSRspAuthAccount* authaccount);
  ::msg::CSRspAuthAccount* unsafe_arena_release_authaccount();

  // .msg.CSRspUnbindAccount UnbindAccount = 622;
  bool has_unbindaccount() const;
  private:
  bool _internal_has_unbindaccount() const;
  public:
  void clear_unbindaccount();
  const ::msg::CSRspUnbindAccount& unbindaccount() const;
  PROTOBUF_NODISCARD ::msg::CSRspUnbindAccount* release_unbindaccount();
  ::msg::CSRspUnbindAccount* mutable_unbindaccount();
  void set_allocated_unbindaccount(::msg::CSRspUnbindAccount* unbindaccount);
  private:
  const ::msg::CSRspUnbindAccount& _internal_unbindaccount() const;
  ::msg::CSRspUnbindAccount* _internal_mutable_unbindaccount();
  public:
  void unsafe_arena_set_allocated_unbindaccount(
      ::msg::CSRspUnbindAccount* unbindaccount);
  ::msg::CSRspUnbindAccount* unsafe_arena_release_unbindaccount();

  // .msg.CSRspBagToItem BagToItem = 623;
  bool has_bagtoitem() const;
  private:
  bool _internal_has_bagtoitem() const;
  public:
  void clear_bagtoitem();
  const ::msg::CSRspBagToItem& bagtoitem() const;
  PROTOBUF_NODISCARD ::msg::CSRspBagToItem* release_bagtoitem();
  ::msg::CSRspBagToItem* mutable_bagtoitem();
  void set_allocated_bagtoitem(::msg::CSRspBagToItem* bagtoitem);
  private:
  const ::msg::CSRspBagToItem& _internal_bagtoitem() const;
  ::msg::CSRspBagToItem* _internal_mutable_bagtoitem();
  public:
  void unsafe_arena_set_allocated_bagtoitem(
      ::msg::CSRspBagToItem* bagtoitem);
  ::msg::CSRspBagToItem* unsafe_arena_release_bagtoitem();

  // .msg.CSRspIdentifyItem IdentifyItem = 624;
  bool has_identifyitem() const;
  private:
  bool _internal_has_identifyitem() const;
  public:
  void clear_identifyitem();
  const ::msg::CSRspIdentifyItem& identifyitem() const;
  PROTOBUF_NODISCARD ::msg::CSRspIdentifyItem* release_identifyitem();
  ::msg::CSRspIdentifyItem* mutable_identifyitem();
  void set_allocated_identifyitem(::msg::CSRspIdentifyItem* identifyitem);
  private:
  const ::msg::CSRspIdentifyItem& _internal_identifyitem() const;
  ::msg::CSRspIdentifyItem* _internal_mutable_identifyitem();
  public:
  void unsafe_arena_set_allocated_identifyitem(
      ::msg::CSRspIdentifyItem* identifyitem);
  ::msg::CSRspIdentifyItem* unsafe_arena_release_identifyitem();

  // .msg.CSRspInsetItemAffix InsetItemAffix = 625;
  bool has_insetitemaffix() const;
  private:
  bool _internal_has_insetitemaffix() const;
  public:
  void clear_insetitemaffix();
  const ::msg::CSRspInsetItemAffix& insetitemaffix() const;
  PROTOBUF_NODISCARD ::msg::CSRspInsetItemAffix* release_insetitemaffix();
  ::msg::CSRspInsetItemAffix* mutable_insetitemaffix();
  void set_allocated_insetitemaffix(::msg::CSRspInsetItemAffix* insetitemaffix);
  private:
  const ::msg::CSRspInsetItemAffix& _internal_insetitemaffix() const;
  ::msg::CSRspInsetItemAffix* _internal_mutable_insetitemaffix();
  public:
  void unsafe_arena_set_allocated_insetitemaffix(
      ::msg::CSRspInsetItemAffix* insetitemaffix);
  ::msg::CSRspInsetItemAffix* unsafe_arena_release_insetitemaffix();

  // .msg.CSRspUnsetItemAffix UnsetItemAffix = 626;
  bool has_unsetitemaffix() const;
  private:
  bool _internal_has_unsetitemaffix() const;
  public:
  void clear_unsetitemaffix();
  const ::msg::CSRspUnsetItemAffix& unsetitemaffix() const;
  PROTOBUF_NODISCARD ::msg::CSRspUnsetItemAffix* release_unsetitemaffix();
  ::msg::CSRspUnsetItemAffix* mutable_unsetitemaffix();
  void set_allocated_unsetitemaffix(::msg::CSRspUnsetItemAffix* unsetitemaffix);
  private:
  const ::msg::CSRspUnsetItemAffix& _internal_unsetitemaffix() const;
  ::msg::CSRspUnsetItemAffix* _internal_mutable_unsetitemaffix();
  public:
  void unsafe_arena_set_allocated_unsetitemaffix(
      ::msg::CSRspUnsetItemAffix* unsetitemaffix);
  ::msg::CSRspUnsetItemAffix* unsafe_arena_release_unsetitemaffix();

  // .msg.CSRspSetDefaultAttributes SetDefaultAttributes = 627;
  bool has_setdefaultattributes() const;
  private:
  bool _internal_has_setdefaultattributes() const;
  public:
  void clear_setdefaultattributes();
  const ::msg::CSRspSetDefaultAttributes& setdefaultattributes() const;
  PROTOBUF_NODISCARD ::msg::CSRspSetDefaultAttributes* release_setdefaultattributes();
  ::msg::CSRspSetDefaultAttributes* mutable_setdefaultattributes();
  void set_allocated_setdefaultattributes(::msg::CSRspSetDefaultAttributes* setdefaultattributes);
  private:
  const ::msg::CSRspSetDefaultAttributes& _internal_setdefaultattributes() const;
  ::msg::CSRspSetDefaultAttributes* _internal_mutable_setdefaultattributes();
  public:
  void unsafe_arena_set_allocated_setdefaultattributes(
      ::msg::CSRspSetDefaultAttributes* setdefaultattributes);
  ::msg::CSRspSetDefaultAttributes* unsafe_arena_release_setdefaultattributes();

  // .msg.CSRspCheckCancel CheckCancel = 628;
  bool has_checkcancel() const;
  private:
  bool _internal_has_checkcancel() const;
  public:
  void clear_checkcancel();
  const ::msg::CSRspCheckCancel& checkcancel() const;
  PROTOBUF_NODISCARD ::msg::CSRspCheckCancel* release_checkcancel();
  ::msg::CSRspCheckCancel* mutable_checkcancel();
  void set_allocated_checkcancel(::msg::CSRspCheckCancel* checkcancel);
  private:
  const ::msg::CSRspCheckCancel& _internal_checkcancel() const;
  ::msg::CSRspCheckCancel* _internal_mutable_checkcancel();
  public:
  void unsafe_arena_set_allocated_checkcancel(
      ::msg::CSRspCheckCancel* checkcancel);
  ::msg::CSRspCheckCancel* unsafe_arena_release_checkcancel();

  // .msg.CSRspCancelAccount CancelAccount = 629;
  bool has_cancelaccount() const;
  private:
  bool _internal_has_cancelaccount() const;
  public:
  void clear_cancelaccount();
  const ::msg::CSRspCancelAccount& cancelaccount() const;
  PROTOBUF_NODISCARD ::msg::CSRspCancelAccount* release_cancelaccount();
  ::msg::CSRspCancelAccount* mutable_cancelaccount();
  void set_allocated_cancelaccount(::msg::CSRspCancelAccount* cancelaccount);
  private:
  const ::msg::CSRspCancelAccount& _internal_cancelaccount() const;
  ::msg::CSRspCancelAccount* _internal_mutable_cancelaccount();
  public:
  void unsafe_arena_set_allocated_cancelaccount(
      ::msg::CSRspCancelAccount* cancelaccount);
  ::msg::CSRspCancelAccount* unsafe_arena_release_cancelaccount();

  // .msg.CSRspOAuthApp OAuthApp = 630;
  bool has_oauthapp() const;
  private:
  bool _internal_has_oauthapp() const;
  public:
  void clear_oauthapp();
  const ::msg::CSRspOAuthApp& oauthapp() const;
  PROTOBUF_NODISCARD ::msg::CSRspOAuthApp* release_oauthapp();
  ::msg::CSRspOAuthApp* mutable_oauthapp();
  void set_allocated_oauthapp(::msg::CSRspOAuthApp* oauthapp);
  private:
  const ::msg::CSRspOAuthApp& _internal_oauthapp() const;
  ::msg::CSRspOAuthApp* _internal_mutable_oauthapp();
  public:
  void unsafe_arena_set_allocated_oauthapp(
      ::msg::CSRspOAuthApp* oauthapp);
  ::msg::CSRspOAuthApp* unsafe_arena_release_oauthapp();

  // .msg.CSRspGetSelfNumRankData SelfNumRankData = 631;
  bool has_selfnumrankdata() const;
  private:
  bool _internal_has_selfnumrankdata() const;
  public:
  void clear_selfnumrankdata();
  const ::msg::CSRspGetSelfNumRankData& selfnumrankdata() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetSelfNumRankData* release_selfnumrankdata();
  ::msg::CSRspGetSelfNumRankData* mutable_selfnumrankdata();
  void set_allocated_selfnumrankdata(::msg::CSRspGetSelfNumRankData* selfnumrankdata);
  private:
  const ::msg::CSRspGetSelfNumRankData& _internal_selfnumrankdata() const;
  ::msg::CSRspGetSelfNumRankData* _internal_mutable_selfnumrankdata();
  public:
  void unsafe_arena_set_allocated_selfnumrankdata(
      ::msg::CSRspGetSelfNumRankData* selfnumrankdata);
  ::msg::CSRspGetSelfNumRankData* unsafe_arena_release_selfnumrankdata();

  // .msg.CSRspUpdateCardGroup UpdateCardGroup = 632;
  bool has_updatecardgroup() const;
  private:
  bool _internal_has_updatecardgroup() const;
  public:
  void clear_updatecardgroup();
  const ::msg::CSRspUpdateCardGroup& updatecardgroup() const;
  PROTOBUF_NODISCARD ::msg::CSRspUpdateCardGroup* release_updatecardgroup();
  ::msg::CSRspUpdateCardGroup* mutable_updatecardgroup();
  void set_allocated_updatecardgroup(::msg::CSRspUpdateCardGroup* updatecardgroup);
  private:
  const ::msg::CSRspUpdateCardGroup& _internal_updatecardgroup() const;
  ::msg::CSRspUpdateCardGroup* _internal_mutable_updatecardgroup();
  public:
  void unsafe_arena_set_allocated_updatecardgroup(
      ::msg::CSRspUpdateCardGroup* updatecardgroup);
  ::msg::CSRspUpdateCardGroup* unsafe_arena_release_updatecardgroup();

  // .msg.CSRspUpdateCardGroupName UpdateCardGroupName = 633;
  bool has_updatecardgroupname() const;
  private:
  bool _internal_has_updatecardgroupname() const;
  public:
  void clear_updatecardgroupname();
  const ::msg::CSRspUpdateCardGroupName& updatecardgroupname() const;
  PROTOBUF_NODISCARD ::msg::CSRspUpdateCardGroupName* release_updatecardgroupname();
  ::msg::CSRspUpdateCardGroupName* mutable_updatecardgroupname();
  void set_allocated_updatecardgroupname(::msg::CSRspUpdateCardGroupName* updatecardgroupname);
  private:
  const ::msg::CSRspUpdateCardGroupName& _internal_updatecardgroupname() const;
  ::msg::CSRspUpdateCardGroupName* _internal_mutable_updatecardgroupname();
  public:
  void unsafe_arena_set_allocated_updatecardgroupname(
      ::msg::CSRspUpdateCardGroupName* updatecardgroupname);
  ::msg::CSRspUpdateCardGroupName* unsafe_arena_release_updatecardgroupname();

  // .msg.CSRspBuyPveBuff BuyPveBuff = 634;
  bool has_buypvebuff() const;
  private:
  bool _internal_has_buypvebuff() const;
  public:
  void clear_buypvebuff();
  const ::msg::CSRspBuyPveBuff& buypvebuff() const;
  PROTOBUF_NODISCARD ::msg::CSRspBuyPveBuff* release_buypvebuff();
  ::msg::CSRspBuyPveBuff* mutable_buypvebuff();
  void set_allocated_buypvebuff(::msg::CSRspBuyPveBuff* buypvebuff);
  private:
  const ::msg::CSRspBuyPveBuff& _internal_buypvebuff() const;
  ::msg::CSRspBuyPveBuff* _internal_mutable_buypvebuff();
  public:
  void unsafe_arena_set_allocated_buypvebuff(
      ::msg::CSRspBuyPveBuff* buypvebuff);
  ::msg::CSRspBuyPveBuff* unsafe_arena_release_buypvebuff();

  // .msg.CSRspSetCardGroup SetCardGroup = 635;
  bool has_setcardgroup() const;
  private:
  bool _internal_has_setcardgroup() const;
  public:
  void clear_setcardgroup();
  const ::msg::CSRspSetCardGroup& setcardgroup() const;
  PROTOBUF_NODISCARD ::msg::CSRspSetCardGroup* release_setcardgroup();
  ::msg::CSRspSetCardGroup* mutable_setcardgroup();
  void set_allocated_setcardgroup(::msg::CSRspSetCardGroup* setcardgroup);
  private:
  const ::msg::CSRspSetCardGroup& _internal_setcardgroup() const;
  ::msg::CSRspSetCardGroup* _internal_mutable_setcardgroup();
  public:
  void unsafe_arena_set_allocated_setcardgroup(
      ::msg::CSRspSetCardGroup* setcardgroup);
  ::msg::CSRspSetCardGroup* unsafe_arena_release_setcardgroup();

  // .msg.CSRspBuyPveChessTemplate BuyPveChessTemplate = 636;
  bool has_buypvechesstemplate() const;
  private:
  bool _internal_has_buypvechesstemplate() const;
  public:
  void clear_buypvechesstemplate();
  const ::msg::CSRspBuyPveChessTemplate& buypvechesstemplate() const;
  PROTOBUF_NODISCARD ::msg::CSRspBuyPveChessTemplate* release_buypvechesstemplate();
  ::msg::CSRspBuyPveChessTemplate* mutable_buypvechesstemplate();
  void set_allocated_buypvechesstemplate(::msg::CSRspBuyPveChessTemplate* buypvechesstemplate);
  private:
  const ::msg::CSRspBuyPveChessTemplate& _internal_buypvechesstemplate() const;
  ::msg::CSRspBuyPveChessTemplate* _internal_mutable_buypvechesstemplate();
  public:
  void unsafe_arena_set_allocated_buypvechesstemplate(
      ::msg::CSRspBuyPveChessTemplate* buypvechesstemplate);
  ::msg::CSRspBuyPveChessTemplate* unsafe_arena_release_buypvechesstemplate();

  // .msg.CSRspPveUnlockChessTemplate PveUnlockChessTemplate = 637;
  bool has_pveunlockchesstemplate() const;
  private:
  bool _internal_has_pveunlockchesstemplate() const;
  public:
  void clear_pveunlockchesstemplate();
  const ::msg::CSRspPveUnlockChessTemplate& pveunlockchesstemplate() const;
  PROTOBUF_NODISCARD ::msg::CSRspPveUnlockChessTemplate* release_pveunlockchesstemplate();
  ::msg::CSRspPveUnlockChessTemplate* mutable_pveunlockchesstemplate();
  void set_allocated_pveunlockchesstemplate(::msg::CSRspPveUnlockChessTemplate* pveunlockchesstemplate);
  private:
  const ::msg::CSRspPveUnlockChessTemplate& _internal_pveunlockchesstemplate() const;
  ::msg::CSRspPveUnlockChessTemplate* _internal_mutable_pveunlockchesstemplate();
  public:
  void unsafe_arena_set_allocated_pveunlockchesstemplate(
      ::msg::CSRspPveUnlockChessTemplate* pveunlockchesstemplate);
  ::msg::CSRspPveUnlockChessTemplate* unsafe_arena_release_pveunlockchesstemplate();

  // .msg.CSRspPveSetTeamDeBuff PveSetTeamDeBuff = 638;
  bool has_pvesetteamdebuff() const;
  private:
  bool _internal_has_pvesetteamdebuff() const;
  public:
  void clear_pvesetteamdebuff();
  const ::msg::CSRspPveSetTeamDeBuff& pvesetteamdebuff() const;
  PROTOBUF_NODISCARD ::msg::CSRspPveSetTeamDeBuff* release_pvesetteamdebuff();
  ::msg::CSRspPveSetTeamDeBuff* mutable_pvesetteamdebuff();
  void set_allocated_pvesetteamdebuff(::msg::CSRspPveSetTeamDeBuff* pvesetteamdebuff);
  private:
  const ::msg::CSRspPveSetTeamDeBuff& _internal_pvesetteamdebuff() const;
  ::msg::CSRspPveSetTeamDeBuff* _internal_mutable_pvesetteamdebuff();
  public:
  void unsafe_arena_set_allocated_pvesetteamdebuff(
      ::msg::CSRspPveSetTeamDeBuff* pvesetteamdebuff);
  ::msg::CSRspPveSetTeamDeBuff* unsafe_arena_release_pvesetteamdebuff();

  // .msg.CSRspChoseCardGroup ChoseCardGroup = 639;
  bool has_chosecardgroup() const;
  private:
  bool _internal_has_chosecardgroup() const;
  public:
  void clear_chosecardgroup();
  const ::msg::CSRspChoseCardGroup& chosecardgroup() const;
  PROTOBUF_NODISCARD ::msg::CSRspChoseCardGroup* release_chosecardgroup();
  ::msg::CSRspChoseCardGroup* mutable_chosecardgroup();
  void set_allocated_chosecardgroup(::msg::CSRspChoseCardGroup* chosecardgroup);
  private:
  const ::msg::CSRspChoseCardGroup& _internal_chosecardgroup() const;
  ::msg::CSRspChoseCardGroup* _internal_mutable_chosecardgroup();
  public:
  void unsafe_arena_set_allocated_chosecardgroup(
      ::msg::CSRspChoseCardGroup* chosecardgroup);
  ::msg::CSRspChoseCardGroup* unsafe_arena_release_chosecardgroup();

  // .msg.CSRspRemoveOvertimeBuff RemoveOvertimeBuff = 640;
  bool has_removeovertimebuff() const;
  private:
  bool _internal_has_removeovertimebuff() const;
  public:
  void clear_removeovertimebuff();
  const ::msg::CSRspRemoveOvertimeBuff& removeovertimebuff() const;
  PROTOBUF_NODISCARD ::msg::CSRspRemoveOvertimeBuff* release_removeovertimebuff();
  ::msg::CSRspRemoveOvertimeBuff* mutable_removeovertimebuff();
  void set_allocated_removeovertimebuff(::msg::CSRspRemoveOvertimeBuff* removeovertimebuff);
  private:
  const ::msg::CSRspRemoveOvertimeBuff& _internal_removeovertimebuff() const;
  ::msg::CSRspRemoveOvertimeBuff* _internal_mutable_removeovertimebuff();
  public:
  void unsafe_arena_set_allocated_removeovertimebuff(
      ::msg::CSRspRemoveOvertimeBuff* removeovertimebuff);
  ::msg::CSRspRemoveOvertimeBuff* unsafe_arena_release_removeovertimebuff();

  // .msg.CSRspUpdateNewCardGroupSign UpdateNewCardGroupSign = 641;
  bool has_updatenewcardgroupsign() const;
  private:
  bool _internal_has_updatenewcardgroupsign() const;
  public:
  void clear_updatenewcardgroupsign();
  const ::msg::CSRspUpdateNewCardGroupSign& updatenewcardgroupsign() const;
  PROTOBUF_NODISCARD ::msg::CSRspUpdateNewCardGroupSign* release_updatenewcardgroupsign();
  ::msg::CSRspUpdateNewCardGroupSign* mutable_updatenewcardgroupsign();
  void set_allocated_updatenewcardgroupsign(::msg::CSRspUpdateNewCardGroupSign* updatenewcardgroupsign);
  private:
  const ::msg::CSRspUpdateNewCardGroupSign& _internal_updatenewcardgroupsign() const;
  ::msg::CSRspUpdateNewCardGroupSign* _internal_mutable_updatenewcardgroupsign();
  public:
  void unsafe_arena_set_allocated_updatenewcardgroupsign(
      ::msg::CSRspUpdateNewCardGroupSign* updatenewcardgroupsign);
  ::msg::CSRspUpdateNewCardGroupSign* unsafe_arena_release_updatenewcardgroupsign();

  // .msg.CSRspTDGetOnHookAward TDGetOnHookAward = 644;
  bool has_tdgetonhookaward() const;
  private:
  bool _internal_has_tdgetonhookaward() const;
  public:
  void clear_tdgetonhookaward();
  const ::msg::CSRspTDGetOnHookAward& tdgetonhookaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspTDGetOnHookAward* release_tdgetonhookaward();
  ::msg::CSRspTDGetOnHookAward* mutable_tdgetonhookaward();
  void set_allocated_tdgetonhookaward(::msg::CSRspTDGetOnHookAward* tdgetonhookaward);
  private:
  const ::msg::CSRspTDGetOnHookAward& _internal_tdgetonhookaward() const;
  ::msg::CSRspTDGetOnHookAward* _internal_mutable_tdgetonhookaward();
  public:
  void unsafe_arena_set_allocated_tdgetonhookaward(
      ::msg::CSRspTDGetOnHookAward* tdgetonhookaward);
  ::msg::CSRspTDGetOnHookAward* unsafe_arena_release_tdgetonhookaward();

  // .msg.CsRspTDDraw TDDraw = 645;
  bool has_tddraw() const;
  private:
  bool _internal_has_tddraw() const;
  public:
  void clear_tddraw();
  const ::msg::CsRspTDDraw& tddraw() const;
  PROTOBUF_NODISCARD ::msg::CsRspTDDraw* release_tddraw();
  ::msg::CsRspTDDraw* mutable_tddraw();
  void set_allocated_tddraw(::msg::CsRspTDDraw* tddraw);
  private:
  const ::msg::CsRspTDDraw& _internal_tddraw() const;
  ::msg::CsRspTDDraw* _internal_mutable_tddraw();
  public:
  void unsafe_arena_set_allocated_tddraw(
      ::msg::CsRspTDDraw* tddraw);
  ::msg::CsRspTDDraw* unsafe_arena_release_tddraw();

  // .msg.CsRspTDBuyCard TDBuyCard = 646;
  bool has_tdbuycard() const;
  private:
  bool _internal_has_tdbuycard() const;
  public:
  void clear_tdbuycard();
  const ::msg::CsRspTDBuyCard& tdbuycard() const;
  PROTOBUF_NODISCARD ::msg::CsRspTDBuyCard* release_tdbuycard();
  ::msg::CsRspTDBuyCard* mutable_tdbuycard();
  void set_allocated_tdbuycard(::msg::CsRspTDBuyCard* tdbuycard);
  private:
  const ::msg::CsRspTDBuyCard& _internal_tdbuycard() const;
  ::msg::CsRspTDBuyCard* _internal_mutable_tdbuycard();
  public:
  void unsafe_arena_set_allocated_tdbuycard(
      ::msg::CsRspTDBuyCard* tdbuycard);
  ::msg::CsRspTDBuyCard* unsafe_arena_release_tdbuycard();

  // .msg.CSRspTDSetCardGroup TDSetCardGroup = 647;
  bool has_tdsetcardgroup() const;
  private:
  bool _internal_has_tdsetcardgroup() const;
  public:
  void clear_tdsetcardgroup();
  const ::msg::CSRspTDSetCardGroup& tdsetcardgroup() const;
  PROTOBUF_NODISCARD ::msg::CSRspTDSetCardGroup* release_tdsetcardgroup();
  ::msg::CSRspTDSetCardGroup* mutable_tdsetcardgroup();
  void set_allocated_tdsetcardgroup(::msg::CSRspTDSetCardGroup* tdsetcardgroup);
  private:
  const ::msg::CSRspTDSetCardGroup& _internal_tdsetcardgroup() const;
  ::msg::CSRspTDSetCardGroup* _internal_mutable_tdsetcardgroup();
  public:
  void unsafe_arena_set_allocated_tdsetcardgroup(
      ::msg::CSRspTDSetCardGroup* tdsetcardgroup);
  ::msg::CSRspTDSetCardGroup* unsafe_arena_release_tdsetcardgroup();

  // .msg.CSRspTDLevelUp TDLevelUp = 648;
  bool has_tdlevelup() const;
  private:
  bool _internal_has_tdlevelup() const;
  public:
  void clear_tdlevelup();
  const ::msg::CSRspTDLevelUp& tdlevelup() const;
  PROTOBUF_NODISCARD ::msg::CSRspTDLevelUp* release_tdlevelup();
  ::msg::CSRspTDLevelUp* mutable_tdlevelup();
  void set_allocated_tdlevelup(::msg::CSRspTDLevelUp* tdlevelup);
  private:
  const ::msg::CSRspTDLevelUp& _internal_tdlevelup() const;
  ::msg::CSRspTDLevelUp* _internal_mutable_tdlevelup();
  public:
  void unsafe_arena_set_allocated_tdlevelup(
      ::msg::CSRspTDLevelUp* tdlevelup);
  ::msg::CSRspTDLevelUp* unsafe_arena_release_tdlevelup();

  // .msg.CSRspTDEquip TDEquip = 649;
  bool has_tdequip() const;
  private:
  bool _internal_has_tdequip() const;
  public:
  void clear_tdequip();
  const ::msg::CSRspTDEquip& tdequip() const;
  PROTOBUF_NODISCARD ::msg::CSRspTDEquip* release_tdequip();
  ::msg::CSRspTDEquip* mutable_tdequip();
  void set_allocated_tdequip(::msg::CSRspTDEquip* tdequip);
  private:
  const ::msg::CSRspTDEquip& _internal_tdequip() const;
  ::msg::CSRspTDEquip* _internal_mutable_tdequip();
  public:
  void unsafe_arena_set_allocated_tdequip(
      ::msg::CSRspTDEquip* tdequip);
  ::msg::CSRspTDEquip* unsafe_arena_release_tdequip();

  // .msg.CSRspMentorUpdateSetting MentorUpdateSetting = 650;
  bool has_mentorupdatesetting() const;
  private:
  bool _internal_has_mentorupdatesetting() const;
  public:
  void clear_mentorupdatesetting();
  const ::msg::CSRspMentorUpdateSetting& mentorupdatesetting() const;
  PROTOBUF_NODISCARD ::msg::CSRspMentorUpdateSetting* release_mentorupdatesetting();
  ::msg::CSRspMentorUpdateSetting* mutable_mentorupdatesetting();
  void set_allocated_mentorupdatesetting(::msg::CSRspMentorUpdateSetting* mentorupdatesetting);
  private:
  const ::msg::CSRspMentorUpdateSetting& _internal_mentorupdatesetting() const;
  ::msg::CSRspMentorUpdateSetting* _internal_mutable_mentorupdatesetting();
  public:
  void unsafe_arena_set_allocated_mentorupdatesetting(
      ::msg::CSRspMentorUpdateSetting* mentorupdatesetting);
  ::msg::CSRspMentorUpdateSetting* unsafe_arena_release_mentorupdatesetting();

  // .msg.CSRspMentorInvite MentorInvite = 651;
  bool has_mentorinvite() const;
  private:
  bool _internal_has_mentorinvite() const;
  public:
  void clear_mentorinvite();
  const ::msg::CSRspMentorInvite& mentorinvite() const;
  PROTOBUF_NODISCARD ::msg::CSRspMentorInvite* release_mentorinvite();
  ::msg::CSRspMentorInvite* mutable_mentorinvite();
  void set_allocated_mentorinvite(::msg::CSRspMentorInvite* mentorinvite);
  private:
  const ::msg::CSRspMentorInvite& _internal_mentorinvite() const;
  ::msg::CSRspMentorInvite* _internal_mutable_mentorinvite();
  public:
  void unsafe_arena_set_allocated_mentorinvite(
      ::msg::CSRspMentorInvite* mentorinvite);
  ::msg::CSRspMentorInvite* unsafe_arena_release_mentorinvite();

  // .msg.CSRspMentorConfirmInvite MentorConfirmInvite = 652;
  bool has_mentorconfirminvite() const;
  private:
  bool _internal_has_mentorconfirminvite() const;
  public:
  void clear_mentorconfirminvite();
  const ::msg::CSRspMentorConfirmInvite& mentorconfirminvite() const;
  PROTOBUF_NODISCARD ::msg::CSRspMentorConfirmInvite* release_mentorconfirminvite();
  ::msg::CSRspMentorConfirmInvite* mutable_mentorconfirminvite();
  void set_allocated_mentorconfirminvite(::msg::CSRspMentorConfirmInvite* mentorconfirminvite);
  private:
  const ::msg::CSRspMentorConfirmInvite& _internal_mentorconfirminvite() const;
  ::msg::CSRspMentorConfirmInvite* _internal_mutable_mentorconfirminvite();
  public:
  void unsafe_arena_set_allocated_mentorconfirminvite(
      ::msg::CSRspMentorConfirmInvite* mentorconfirminvite);
  ::msg::CSRspMentorConfirmInvite* unsafe_arena_release_mentorconfirminvite();

  // .msg.CSRspMentorRecommendList MentorRecommendList = 653;
  bool has_mentorrecommendlist() const;
  private:
  bool _internal_has_mentorrecommendlist() const;
  public:
  void clear_mentorrecommendlist();
  const ::msg::CSRspMentorRecommendList& mentorrecommendlist() const;
  PROTOBUF_NODISCARD ::msg::CSRspMentorRecommendList* release_mentorrecommendlist();
  ::msg::CSRspMentorRecommendList* mutable_mentorrecommendlist();
  void set_allocated_mentorrecommendlist(::msg::CSRspMentorRecommendList* mentorrecommendlist);
  private:
  const ::msg::CSRspMentorRecommendList& _internal_mentorrecommendlist() const;
  ::msg::CSRspMentorRecommendList* _internal_mutable_mentorrecommendlist();
  public:
  void unsafe_arena_set_allocated_mentorrecommendlist(
      ::msg::CSRspMentorRecommendList* mentorrecommendlist);
  ::msg::CSRspMentorRecommendList* unsafe_arena_release_mentorrecommendlist();

  // .msg.CSRspMentorGetTaskAward MentorGetTaskAward = 654;
  bool has_mentorgettaskaward() const;
  private:
  bool _internal_has_mentorgettaskaward() const;
  public:
  void clear_mentorgettaskaward();
  const ::msg::CSRspMentorGetTaskAward& mentorgettaskaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspMentorGetTaskAward* release_mentorgettaskaward();
  ::msg::CSRspMentorGetTaskAward* mutable_mentorgettaskaward();
  void set_allocated_mentorgettaskaward(::msg::CSRspMentorGetTaskAward* mentorgettaskaward);
  private:
  const ::msg::CSRspMentorGetTaskAward& _internal_mentorgettaskaward() const;
  ::msg::CSRspMentorGetTaskAward* _internal_mutable_mentorgettaskaward();
  public:
  void unsafe_arena_set_allocated_mentorgettaskaward(
      ::msg::CSRspMentorGetTaskAward* mentorgettaskaward);
  ::msg::CSRspMentorGetTaskAward* unsafe_arena_release_mentorgettaskaward();

  // .msg.CSRspMentorGraduate MentorGraduate = 655;
  bool has_mentorgraduate() const;
  private:
  bool _internal_has_mentorgraduate() const;
  public:
  void clear_mentorgraduate();
  const ::msg::CSRspMentorGraduate& mentorgraduate() const;
  PROTOBUF_NODISCARD ::msg::CSRspMentorGraduate* release_mentorgraduate();
  ::msg::CSRspMentorGraduate* mutable_mentorgraduate();
  void set_allocated_mentorgraduate(::msg::CSRspMentorGraduate* mentorgraduate);
  private:
  const ::msg::CSRspMentorGraduate& _internal_mentorgraduate() const;
  ::msg::CSRspMentorGraduate* _internal_mutable_mentorgraduate();
  public:
  void unsafe_arena_set_allocated_mentorgraduate(
      ::msg::CSRspMentorGraduate* mentorgraduate);
  ::msg::CSRspMentorGraduate* unsafe_arena_release_mentorgraduate();

  // .msg.CSRspMentorRelieveRelation MentorRelieveRelation = 656;
  bool has_mentorrelieverelation() const;
  private:
  bool _internal_has_mentorrelieverelation() const;
  public:
  void clear_mentorrelieverelation();
  const ::msg::CSRspMentorRelieveRelation& mentorrelieverelation() const;
  PROTOBUF_NODISCARD ::msg::CSRspMentorRelieveRelation* release_mentorrelieverelation();
  ::msg::CSRspMentorRelieveRelation* mutable_mentorrelieverelation();
  void set_allocated_mentorrelieverelation(::msg::CSRspMentorRelieveRelation* mentorrelieverelation);
  private:
  const ::msg::CSRspMentorRelieveRelation& _internal_mentorrelieverelation() const;
  ::msg::CSRspMentorRelieveRelation* _internal_mutable_mentorrelieverelation();
  public:
  void unsafe_arena_set_allocated_mentorrelieverelation(
      ::msg::CSRspMentorRelieveRelation* mentorrelieverelation);
  ::msg::CSRspMentorRelieveRelation* unsafe_arena_release_mentorrelieverelation();

  // .msg.CSRspGetMentorInfo GetMentorInfo = 657;
  bool has_getmentorinfo() const;
  private:
  bool _internal_has_getmentorinfo() const;
  public:
  void clear_getmentorinfo();
  const ::msg::CSRspGetMentorInfo& getmentorinfo() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetMentorInfo* release_getmentorinfo();
  ::msg::CSRspGetMentorInfo* mutable_getmentorinfo();
  void set_allocated_getmentorinfo(::msg::CSRspGetMentorInfo* getmentorinfo);
  private:
  const ::msg::CSRspGetMentorInfo& _internal_getmentorinfo() const;
  ::msg::CSRspGetMentorInfo* _internal_mutable_getmentorinfo();
  public:
  void unsafe_arena_set_allocated_getmentorinfo(
      ::msg::CSRspGetMentorInfo* getmentorinfo);
  ::msg::CSRspGetMentorInfo* unsafe_arena_release_getmentorinfo();

  // .msg.CSRspMentorGetInviteMsg MentorGetInviteMsg = 658;
  bool has_mentorgetinvitemsg() const;
  private:
  bool _internal_has_mentorgetinvitemsg() const;
  public:
  void clear_mentorgetinvitemsg();
  const ::msg::CSRspMentorGetInviteMsg& mentorgetinvitemsg() const;
  PROTOBUF_NODISCARD ::msg::CSRspMentorGetInviteMsg* release_mentorgetinvitemsg();
  ::msg::CSRspMentorGetInviteMsg* mutable_mentorgetinvitemsg();
  void set_allocated_mentorgetinvitemsg(::msg::CSRspMentorGetInviteMsg* mentorgetinvitemsg);
  private:
  const ::msg::CSRspMentorGetInviteMsg& _internal_mentorgetinvitemsg() const;
  ::msg::CSRspMentorGetInviteMsg* _internal_mutable_mentorgetinvitemsg();
  public:
  void unsafe_arena_set_allocated_mentorgetinvitemsg(
      ::msg::CSRspMentorGetInviteMsg* mentorgetinvitemsg);
  ::msg::CSRspMentorGetInviteMsg* unsafe_arena_release_mentorgetinvitemsg();

  // .msg.CSRspTeamMsg TeamMsg = 659;
  bool has_teammsg() const;
  private:
  bool _internal_has_teammsg() const;
  public:
  void clear_teammsg();
  const ::msg::CSRspTeamMsg& teammsg() const;
  PROTOBUF_NODISCARD ::msg::CSRspTeamMsg* release_teammsg();
  ::msg::CSRspTeamMsg* mutable_teammsg();
  void set_allocated_teammsg(::msg::CSRspTeamMsg* teammsg);
  private:
  const ::msg::CSRspTeamMsg& _internal_teammsg() const;
  ::msg::CSRspTeamMsg* _internal_mutable_teammsg();
  public:
  void unsafe_arena_set_allocated_teammsg(
      ::msg::CSRspTeamMsg* teammsg);
  ::msg::CSRspTeamMsg* unsafe_arena_release_teammsg();

  // .msg.CSRspChatMsg ChatMsg = 660;
  bool has_chatmsg() const;
  private:
  bool _internal_has_chatmsg() const;
  public:
  void clear_chatmsg();
  const ::msg::CSRspChatMsg& chatmsg() const;
  PROTOBUF_NODISCARD ::msg::CSRspChatMsg* release_chatmsg();
  ::msg::CSRspChatMsg* mutable_chatmsg();
  void set_allocated_chatmsg(::msg::CSRspChatMsg* chatmsg);
  private:
  const ::msg::CSRspChatMsg& _internal_chatmsg() const;
  ::msg::CSRspChatMsg* _internal_mutable_chatmsg();
  public:
  void unsafe_arena_set_allocated_chatmsg(
      ::msg::CSRspChatMsg* chatmsg);
  ::msg::CSRspChatMsg* unsafe_arena_release_chatmsg();

  // .msg.CSRspChannelChat ChannelChat = 661;
  bool has_channelchat() const;
  private:
  bool _internal_has_channelchat() const;
  public:
  void clear_channelchat();
  const ::msg::CSRspChannelChat& channelchat() const;
  PROTOBUF_NODISCARD ::msg::CSRspChannelChat* release_channelchat();
  ::msg::CSRspChannelChat* mutable_channelchat();
  void set_allocated_channelchat(::msg::CSRspChannelChat* channelchat);
  private:
  const ::msg::CSRspChannelChat& _internal_channelchat() const;
  ::msg::CSRspChannelChat* _internal_mutable_channelchat();
  public:
  void unsafe_arena_set_allocated_channelchat(
      ::msg::CSRspChannelChat* channelchat);
  ::msg::CSRspChannelChat* unsafe_arena_release_channelchat();

  // .msg.CSRspUpdateCardGroupBetter UpdateCardGroupBetter = 662;
  bool has_updatecardgroupbetter() const;
  private:
  bool _internal_has_updatecardgroupbetter() const;
  public:
  void clear_updatecardgroupbetter();
  const ::msg::CSRspUpdateCardGroupBetter& updatecardgroupbetter() const;
  PROTOBUF_NODISCARD ::msg::CSRspUpdateCardGroupBetter* release_updatecardgroupbetter();
  ::msg::CSRspUpdateCardGroupBetter* mutable_updatecardgroupbetter();
  void set_allocated_updatecardgroupbetter(::msg::CSRspUpdateCardGroupBetter* updatecardgroupbetter);
  private:
  const ::msg::CSRspUpdateCardGroupBetter& _internal_updatecardgroupbetter() const;
  ::msg::CSRspUpdateCardGroupBetter* _internal_mutable_updatecardgroupbetter();
  public:
  void unsafe_arena_set_allocated_updatecardgroupbetter(
      ::msg::CSRspUpdateCardGroupBetter* updatecardgroupbetter);
  ::msg::CSRspUpdateCardGroupBetter* unsafe_arena_release_updatecardgroupbetter();

  // .msg.CSRspUpdateCardGroupSetting UpdateCardGroupSetting = 663;
  bool has_updatecardgroupsetting() const;
  private:
  bool _internal_has_updatecardgroupsetting() const;
  public:
  void clear_updatecardgroupsetting();
  const ::msg::CSRspUpdateCardGroupSetting& updatecardgroupsetting() const;
  PROTOBUF_NODISCARD ::msg::CSRspUpdateCardGroupSetting* release_updatecardgroupsetting();
  ::msg::CSRspUpdateCardGroupSetting* mutable_updatecardgroupsetting();
  void set_allocated_updatecardgroupsetting(::msg::CSRspUpdateCardGroupSetting* updatecardgroupsetting);
  private:
  const ::msg::CSRspUpdateCardGroupSetting& _internal_updatecardgroupsetting() const;
  ::msg::CSRspUpdateCardGroupSetting* _internal_mutable_updatecardgroupsetting();
  public:
  void unsafe_arena_set_allocated_updatecardgroupsetting(
      ::msg::CSRspUpdateCardGroupSetting* updatecardgroupsetting);
  ::msg::CSRspUpdateCardGroupSetting* unsafe_arena_release_updatecardgroupsetting();

  // .msg.CSRspSetAuctionName SetAuctionName = 664;
  bool has_setauctionname() const;
  private:
  bool _internal_has_setauctionname() const;
  public:
  void clear_setauctionname();
  const ::msg::CSRspSetAuctionName& setauctionname() const;
  PROTOBUF_NODISCARD ::msg::CSRspSetAuctionName* release_setauctionname();
  ::msg::CSRspSetAuctionName* mutable_setauctionname();
  void set_allocated_setauctionname(::msg::CSRspSetAuctionName* setauctionname);
  private:
  const ::msg::CSRspSetAuctionName& _internal_setauctionname() const;
  ::msg::CSRspSetAuctionName* _internal_mutable_setauctionname();
  public:
  void unsafe_arena_set_allocated_setauctionname(
      ::msg::CSRspSetAuctionName* setauctionname);
  ::msg::CSRspSetAuctionName* unsafe_arena_release_setauctionname();

  // .msg.CSRspSetAuctionRemark SetAuctionRemark = 665;
  bool has_setauctionremark() const;
  private:
  bool _internal_has_setauctionremark() const;
  public:
  void clear_setauctionremark();
  const ::msg::CSRspSetAuctionRemark& setauctionremark() const;
  PROTOBUF_NODISCARD ::msg::CSRspSetAuctionRemark* release_setauctionremark();
  ::msg::CSRspSetAuctionRemark* mutable_setauctionremark();
  void set_allocated_setauctionremark(::msg::CSRspSetAuctionRemark* setauctionremark);
  private:
  const ::msg::CSRspSetAuctionRemark& _internal_setauctionremark() const;
  ::msg::CSRspSetAuctionRemark* _internal_mutable_setauctionremark();
  public:
  void unsafe_arena_set_allocated_setauctionremark(
      ::msg::CSRspSetAuctionRemark* setauctionremark);
  ::msg::CSRspSetAuctionRemark* unsafe_arena_release_setauctionremark();

  // .msg.CSRspGetBalance GetBalance = 666;
  bool has_getbalance() const;
  private:
  bool _internal_has_getbalance() const;
  public:
  void clear_getbalance();
  const ::msg::CSRspGetBalance& getbalance() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetBalance* release_getbalance();
  ::msg::CSRspGetBalance* mutable_getbalance();
  void set_allocated_getbalance(::msg::CSRspGetBalance* getbalance);
  private:
  const ::msg::CSRspGetBalance& _internal_getbalance() const;
  ::msg::CSRspGetBalance* _internal_mutable_getbalance();
  public:
  void unsafe_arena_set_allocated_getbalance(
      ::msg::CSRspGetBalance* getbalance);
  ::msg::CSRspGetBalance* unsafe_arena_release_getbalance();

  // .msg.CSRspRechargeBalance RechargeBalance = 667;
  bool has_rechargebalance() const;
  private:
  bool _internal_has_rechargebalance() const;
  public:
  void clear_rechargebalance();
  const ::msg::CSRspRechargeBalance& rechargebalance() const;
  PROTOBUF_NODISCARD ::msg::CSRspRechargeBalance* release_rechargebalance();
  ::msg::CSRspRechargeBalance* mutable_rechargebalance();
  void set_allocated_rechargebalance(::msg::CSRspRechargeBalance* rechargebalance);
  private:
  const ::msg::CSRspRechargeBalance& _internal_rechargebalance() const;
  ::msg::CSRspRechargeBalance* _internal_mutable_rechargebalance();
  public:
  void unsafe_arena_set_allocated_rechargebalance(
      ::msg::CSRspRechargeBalance* rechargebalance);
  ::msg::CSRspRechargeBalance* unsafe_arena_release_rechargebalance();

  // .msg.CSRspWithdrawBalance WithdrawBalance = 668;
  bool has_withdrawbalance() const;
  private:
  bool _internal_has_withdrawbalance() const;
  public:
  void clear_withdrawbalance();
  const ::msg::CSRspWithdrawBalance& withdrawbalance() const;
  PROTOBUF_NODISCARD ::msg::CSRspWithdrawBalance* release_withdrawbalance();
  ::msg::CSRspWithdrawBalance* mutable_withdrawbalance();
  void set_allocated_withdrawbalance(::msg::CSRspWithdrawBalance* withdrawbalance);
  private:
  const ::msg::CSRspWithdrawBalance& _internal_withdrawbalance() const;
  ::msg::CSRspWithdrawBalance* _internal_mutable_withdrawbalance();
  public:
  void unsafe_arena_set_allocated_withdrawbalance(
      ::msg::CSRspWithdrawBalance* withdrawbalance);
  ::msg::CSRspWithdrawBalance* unsafe_arena_release_withdrawbalance();

  // .msg.CSRspPersonalRecommendMall PersonalRecommendMall = 669;
  bool has_personalrecommendmall() const;
  private:
  bool _internal_has_personalrecommendmall() const;
  public:
  void clear_personalrecommendmall();
  const ::msg::CSRspPersonalRecommendMall& personalrecommendmall() const;
  PROTOBUF_NODISCARD ::msg::CSRspPersonalRecommendMall* release_personalrecommendmall();
  ::msg::CSRspPersonalRecommendMall* mutable_personalrecommendmall();
  void set_allocated_personalrecommendmall(::msg::CSRspPersonalRecommendMall* personalrecommendmall);
  private:
  const ::msg::CSRspPersonalRecommendMall& _internal_personalrecommendmall() const;
  ::msg::CSRspPersonalRecommendMall* _internal_mutable_personalrecommendmall();
  public:
  void unsafe_arena_set_allocated_personalrecommendmall(
      ::msg::CSRspPersonalRecommendMall* personalrecommendmall);
  ::msg::CSRspPersonalRecommendMall* unsafe_arena_release_personalrecommendmall();

  // .msg.CSRspGetMedalChestAward GetMedalChestAward = 670;
  bool has_getmedalchestaward() const;
  private:
  bool _internal_has_getmedalchestaward() const;
  public:
  void clear_getmedalchestaward();
  const ::msg::CSRspGetMedalChestAward& getmedalchestaward() const;
  PROTOBUF_NODISCARD ::msg::CSRspGetMedalChestAward* release_getmedalchestaward();
  ::msg::CSRspGetMedalChestAward* mutable_getmedalchestaward();
  void set_allocated_getmedalchestaward(::msg::CSRspGetMedalChestAward* getmedalchestaward);
  private:
  const ::msg::CSRspGetMedalChestAward& _internal_getmedalchestaward() const;
  ::msg::CSRspGetMedalChestAward* _internal_mutable_getmedalchestaward();
  public:
  void unsafe_arena_set_allocated_getmedalchestaward(
      ::msg::CSRspGetMedalChestAward* getmedalchestaward);
  ::msg::CSRspGetMedalChestAward* unsafe_arena_release_getmedalchestaward();

  // .msg.CSRspSetItemAutoUse SetItemAutoUse = 671;
  bool has_setitemautouse() const;
  private:
  bool _internal_has_setitemautouse() const;
  public:
  void clear_setitemautouse();
  const ::msg::CSRspSetItemAutoUse& setitemautouse() const;
  PROTOBUF_NODISCARD ::msg::CSRspSetItemAutoUse* release_setitemautouse();
  ::msg::CSRspSetItemAutoUse* mutable_setitemautouse();
  void set_allocated_setitemautouse(::msg::CSRspSetItemAutoUse* setitemautouse);
  private:
  const ::msg::CSRspSetItemAutoUse& _internal_setitemautouse() const;
  ::msg::CSRspSetItemAutoUse* _internal_mutable_setitemautouse();
  public:
  void unsafe_arena_set_allocated_setitemautouse(
      ::msg::CSRspSetItemAutoUse* setitemautouse);
  ::msg::CSRspSetItemAutoUse* unsafe_arena_release_setitemautouse();

  // uint64 Seq = 1;
  void clear_seq();
  uint64_t seq() const;
  void set_seq(uint64_t value);
  private:
  uint64_t _internal_seq() const;
  void _internal_set_seq(uint64_t value);
  public:

  // .msg.RESULT ErrCode = 2;
  void clear_errcode();
  ::msg::RESULT errcode() const;
  void set_errcode(::msg::RESULT value);
  private:
  ::msg::RESULT _internal_errcode() const;
  void _internal_set_errcode(::msg::RESULT value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
    ::msg::CSRspHeart* heart_;
    ::msg::CSRspLogin* login_;
    ::msg::CSRspVersionCheck* versioncheck_;
    ::msg::CSRspResourceVersionCheck* resourceversioncheck_;
    ::msg::CSRspApplyHallServer* applyhallserver_;
    ::msg::CSRspGetNumRank* getnumrank_;
    ::msg::CSRspWorldChat* worldchat_;
    ::msg::CSRspPlayersBaseInfo* playersbaseinfo_;
    ::msg::CSRspPlayerDetailInfo* playerdetailinfo_;
    ::msg::CSRspReadMail* readmail_;
    ::msg::CSRspGetMailAward* getmailaward_;
    ::msg::CSRspBuyEgg* buyegg_;
    ::msg::CSRspUserNameSet* usernameset_;
    ::msg::CSRspUserNameRandom* usernamerandom_;
    ::msg::CSRspHeadPicSet* headpicset_;
    ::msg::CSRspDressChessPlayer* dresschessplayer_;
    ::msg::CSRspDressScene* dressscene_;
    ::msg::CSRspPvpLogin* pvplogin_;
    ::msg::CSRspPvpEnd* pvpend_;
    ::msg::CSRspPlayerFinish* playerfinish_;
    ::msg::CSRspPlayerQuit* playerquit_;
    ::msg::CSRspSellItem* sellitem_;
    ::msg::CSRspGetEvalAward* getevalaward_;
    ::msg::CSRspUseChessPlayer* usechessplayer_;
    ::msg::CSRspGuidReport* guidreport_;
    ::msg::CSRspGetCodeAward* getcodeaward_;
    ::msg::CSRspRoundReport* roundreport_;
    ::msg::CSRspLoadingProgress* loadingprogress_;
    ::msg::CSRspPvpChat* pvpchat_;
    ::msg::CSRspChessCombine* chesscombine_;
    ::msg::CSRspExpose* expose_;
    ::msg::CSRspApplyOrderId* applyorderid_;
    ::msg::CSRspReportOrderInfo* reportorderinfo_;
    ::msg::CSRspSetItem* setitem_;
    ::msg::CSRspUnsetItem* unsetitem_;
    ::msg::CSRspRandomItem* randomitem_;
    ::msg::CSRspChat* chat_;
    ::msg::CSRspSetChessPlayer* setchessplayer_;
    ::msg::CSRspUnsetChessPlayer* unsetchessplayer_;
    ::msg::CSRspGetFansList* getfanslist_;
    ::msg::CSRspFollowPlayer* followplayer_;
    ::msg::CSRspUnfollowPlayer* unfollowplayer_;
    ::msg::CSRspPlayersStatusInfo* playersstatusinfo_;
    ::msg::CSRspInviteJoinTeam* invitejointeam_;
    ::msg::CSRspJoinTeam* jointeam_;
    ::msg::CSRspReportPayResponse* reportpayresponse_;
    ::msg::CSRspRejectJoinTeam* rejectjointeam_;
    ::msg::CSRspShieldChat* shieldchat_;
    ::msg::CSRspBuyPassportLevel* buypassportlevel_;
    ::msg::CSRspUpgradePassport* upgradepassport_;
    ::msg::CSRspGetPassportLevelAward* getpassportlevelaward_;
    ::msg::CSRspGetPassportTaskAward* getpassporttaskaward_;
    ::msg::CSRspTelBook* telbook_;
    ::msg::CSRspActivatePassport* activatepassport_;
    ::msg::CSRspRankSeasonEval* rankseasoneval_;
    ::msg::CSRspBindAccount* bindaccount_;
    ::msg::CSRspIncAdShowCount* incadsshowcount_;
    ::msg::CSRspUseBonusCard* usebonuscard_;
    ::msg::CSRspGetSeasonAward* getseasonaward_;
    ::msg::CSRspGetAlphaActivityAward* getalphaactivityaward_;
    ::msg::CSRspGetLanguageData* getlanguagedata_;
    ::msg::CSRspGetActivityAward* getactivityaward_;
    ::msg::CSRspGetActivityData* getactivitydata_;
    ::msg::CSRspSendSms* sendsms_;
    ::msg::CSRspGetMeleeAward* getmeleeaward_;
    ::msg::CSRspAddAiToTeam* addaitoteam_;
    ::msg::CSRspShare* share_;
    ::msg::CSRspSkipInterface* skipinterface_;
    ::msg::CSRspTeamGame* teamgame_;
    ::msg::CSRspSetTeamMode* setteammode_;
    ::msg::CSRspSetHistoryPvpShowPermission* historypvpshowpermission_;
    ::msg::CSRspSearchTeam* searchteam_;
    ::msg::CSRspApplyChat* applychat_;
    ::msg::CSRspChatLogin* chatlogin_;
    ::msg::CSRspProbeNetDelay* probenetdelay_;
    ::msg::CSRspGetEggs* geteggs_;
    ::msg::CSRspBuyGoods* buygoods_;
    ::msg::CSRspExchangePassportGoods* exchangepassportgoods_;
    ::msg::CSRspUsePassportTaskCard* usepassporttaskcard_;
    ::msg::CSRspOpenRandChest* openrandchest_;
    ::msg::CSRspEggLottery* egglottery_;
    ::msg::CSRspQueryDiamondBalance* querydiamondbalance_;
    ::msg::CSRspUseItem* useitem_;
    ::msg::CSRspUseExperienceCard* useexperiencecard_;
    ::msg::CSRspRandTargetItem* randtargetitem_;
    ::msg::CSRspAddBlacklist* addblacklist_;
    ::msg::CSRspRemoveBlacklist* removeblacklist_;
    ::msg::CSRspReportPlayerBirth* reportplayerbirth_;
    ::msg::CSRspReportInfoInput* reportinfoinput_;
    ::msg::CSRspSendVerificationCode* sendverificationcode_;
    ::msg::CSRspBindPhoneNumber* bindphonenumber_;
    ::msg::CSRspWorldInvite* worldinvite_;
    ::msg::CSRspRemoveExpireItem* removeexpireitem_;
    ::msg::CSRspGetMallGoods* getmallgoods_;
    ::msg::CSRspBuyMallGoods* buymallgoods_;
    ::msg::CSRspBindSharingCode* bindsharingcode_;
    ::msg::CSRspWXBlessBag* wxblessbag_;
    ::msg::CSRspUpdateFriendsInGame* updatefriendsingame_;
    ::msg::CSRspShareReward* sharereward_;
    ::msg::CSRspAllFightInfo* allfightinfo_;
    ::msg::CSRspGetOldPlayer* getoldplayer_;
    ::msg::CSRspBindOldPlayer* bindoldplayer_;
    ::msg::CSRspSendVerificationCodeWithCheckRedis* sendverificationcodewithcheckredis_;
    ::msg::CSRspReportSetting* reportsetting_;
    ::msg::CSRspAntiData* antidata_;
    ::msg::CSRspTlogData* tlogdata_;
    ::msg::CSRspDaySign* daysign_;
    ::msg::CSRspDayFitAvoid* dayfitavoid_;
    ::msg::CSRspShareCountAward* sharecountaward_;
    ::msg::CSRspRealationStar* realationstar_;
    ::msg::CSRspGetRealationStarInviteSucc* getrealationstarinvitesucc_;
    ::msg::CSRspGetRealationStar* getrealationstar_;
    ::msg::CSRspGetActRecord* rspactrecord_;
    ::msg::CSRspJoinVoiceTeam* joinvoiceteam_;
    ::msg::CSRspJoinVoicePvp* joinvoicepvp_;
    ::msg::CSRspJoinVoiceCamp* joinvoicecamp_;
    ::msg::CSRspUserCountrySet* usercountryset_;
    ::msg::CSRspObserve* observe_;
    ::msg::CSRspGetRecommendPvp* getrecommendpvp_;
    ::msg::CSRspObserveLogin* observelogin_;
    ::msg::CSRspQuitObserve* quitobserve_;
    ::msg::CSRspGetObserveInfo* getobserveinfo_;
    ::msg::CSRspFreeFlow* freeflow_;
    ::msg::CSRspSetPushToken* setpushtoken_;
    ::msg::CSRspTlogEvent* tlogevent_;
    ::msg::CSRspWxVVipAward* wxvvipaward_;
    ::msg::CSRspGetRelationStarWX* relationstarwx_;
    ::msg::CSRspSendWxRedPacket* sendwxredpacket_;
    ::msg::CSRspRecvWxRedPacket* recvwxredpacket_;
    ::msg::CSRspWxRedPktLike* wxredpktlike_;
    ::msg::CSRspWxRedPktRank* wxredpktrank_;
    ::msg::CSRspObservePrivilege* setobserveprivilege_;
    ::msg::CSRspPresetFastChat* presetfastchat_;
    ::msg::CSRspChangeSlotTeam* changeslotteam_;
    ::msg::CSRspChangeSubModeTeam* changesubmodeteam_;
    ::msg::CSRspConfirmChangeSlotTeam* confirmchangeslotteam_;
    ::msg::CSRspPvpRoundEnd* pvproundend_;
    ::msg::CSRspPvp* pvp_;
    ::msg::CSRspTeamReady* teamready_;
    ::msg::CSRspBindOldBusinessPlayer* bindoldbusinessplayer_;
    ::msg::CSRspTranslate* translate_;
    ::msg::CSRspSubmitQuestionnaire* submitquestionnaire_;
    ::msg::CSRspCancelChangeSlot* cancelchangeslot_;
    ::msg::CSRspSetChessSkin* setchessskin_;
    ::msg::CSRspUnsetChessSkin* unsetchessskin_;
    ::msg::CSRspCompose* compose_;
    ::msg::CSRspVideo* video_;
    ::msg::CSRspOffHelpReddot* offhelpreddot_;
    ::msg::CSRspChangeLanguage* changelanguage_;
    ::msg::CSRspSetProvince* setprovince_;
    ::msg::CSRspLongyuanVoice* longyuanvoice_;
    ::msg::CSRspEnrollTournament* enrolltournament_;
    ::msg::CSRspJoinTournamentRoom* jointournamentroom_;
    ::msg::CSRspTournamentPointAward* tournamentpointaward_;
    ::msg::CSRspGetEnrollPlayers* getenrollplayers_;
    ::msg::CSRspDealWebMail* dealwebmail_;
    ::msg::CSRspChallengeAgain* challengeagain_;
    ::msg::CSRspHistoryChatMsg* historychat_;
    ::msg::CSRspSetFriendInvisible* setfriendinvisible_;
    ::msg::CSRspGetObserveAward* getobserveaward_;
    ::msg::CSRspInviteObserve* inviteobserve_;
    ::msg::CSRspRejectObserve* rejectobserve_;
    ::msg::CSRspGetTxPlayer* gettxplayer_;
    ::msg::CSRspGetThirdPvpInfo* getthirdpvpinfo_;
    ::msg::CSRspMarkPlayerGuide* markplayerguide_;
    ::msg::CSRspMarkChessSkinClicked* chessskinclicked_;
    ::msg::CSRsqQueryPs4Entitlements* queryps4entitlements_;
    ::msg::CSRspActDaySign* actdaysign_;
    ::msg::CSRspHaveThirdPvp* havethirdpvpinfo_;
    ::msg::CSRspActivityMall* activitymall_;
    ::msg::CSRspPsOnly* psonly_;
    ::msg::CSRspChangeChannelType* changechanneltype_;
    ::msg::CSRspCustomCardOpt* customcardopt_;
    ::msg::CSRspChampionHistory* championhistory_;
    ::msg::CSRspTournamentLastTopRank* tournamentlasttoprank_;
    ::msg::CSRspBigWinnerDailyAward* bigwinnerdailyaward_;
    ::msg::CSRspBigWinnerScoreHistory* bigwinnerscorehistory_;
    ::msg::CSRspSmeltItem* smeltitem_;
    ::msg::CSRspPVEUpTalentLevel* pveuptalentlevel_;
    ::msg::CSRspPVELuckyAward* luckyaward_;
    ::msg::CSRspApplyChannel* applychannel_;
    ::msg::CSRspOBTeamInfo* obteaminfo_;
    ::msg::CSRspGetPvpServerGroup* getpvpservergroup_;
    ::msg::CSRspReportPvpInfo* reportpvpinfo_;
    ::msg::CSRspChoosePlayer* chooseplayer_;
    ::msg::CSRspPingTest* pingtest_;
    ::msg::CSRspReportRegionInfo* reportregioninfo_;
    ::msg::CSRspRecalledPlayer* recalledplaeyr_;
    ::msg::CSRspWebLogin* weblogin_;
    ::msg::CSRspInviteCodeReset* invitecodereset_;
    ::msg::CSRspRecallReward* recallreward_;
    ::msg::CSRspSwitchToCommonMatch* switchtocommonmatch_;
    ::msg::CSRspSwitchModeInTeam* switchmodeinteam_;
    ::msg::CSRspGetTNRoomState* gettnroomstate_;
    ::msg::CSRspWorkshopMatch* workshopmatch_;
    ::msg::CSRspBuyWorkshopTicket* buyworkshopticket_;
    ::msg::CSRspFavouriteWorkshopMap* favouriteworkshopmap_;
    ::msg::CSRspShortcutMapsOP* shortcutmapsop_;
    ::msg::CSRspPlayersTournamentInfo* playerstournamentinfo_;
    ::msg::CSRspScoreWorkshopMap* scoreworkshopmap_;
    ::msg::CSRspMapsVisitedByFriends* mapsvisitedbyfriends_;
    ::msg::CSRspVerifyRealName* verifyrealname_;
    ::msg::CSRspFakePay* fakepay_;
    ::msg::CSRspGuildCreate* guildcreate_;
    ::msg::CSRspGuildApply* guildapply_;
    ::msg::CSRspGuildHome* guildhome_;
    ::msg::CSRspGuildInfo* guildinfo_;
    ::msg::CSRspGuildApprove* guildapprove_;
    ::msg::CSRspGuildSetRole* guildrole_;
    ::msg::CSRspGuildModify* guildmodify_;
    ::msg::CSRspGuildKickoff* guildkickoff_;
    ::msg::CSRspGuildDismiss* guilddismiss_;
    ::msg::CSRspGuildExit* guildexit_;
    ::msg::CSRspGuildChat* guildchat_;
    ::msg::CSRspGuildList* guildlist_;
    ::msg::CSRspGuildRecommendPlayers* guildrecommendplayers_;
    ::msg::CSRspGuildInviteList* guildinvitelist_;
    ::msg::CSRspGuildInvite* guildinvite_;
    ::msg::CSRspGuildRejectInvite* guildrejectinvite_;
    ::msg::CSRspGetVngCommentAward* getvngcommentaward_;
    ::msg::CSRspLevelupChest* levelupchest_;
    ::msg::CSRspWatchAd* watchad_;
    ::msg::CSRspQueryPsTournamentRoom* pstournamentroom_;
    ::msg::CSRspGetAdCumulateAward* getadcumulateaward_;
    ::msg::CSRspSetMessengerPos* setmessengerpos_;
    ::msg::CSRspUpdateAntiAddictionTime* antiaddictiontime_;
    ::msg::CSRspCancelReconnect* cancelreconnect_;
    ::msg::CSRspReconnect* reconnect_;
    ::msg::CSRspPassThrough* passthrough_;
    ::msg::CSRspVisitPlayer* visitplayer_;
    ::msg::CSRspLeaveGameEarly* leavegameearly_;
    ::msg::CSRspGDCommonBin* gdcommonbin_;
    ::msg::CSRspGDCommonBinData* gdbindata_;
    ::msg::CSRspBattleCampResult* battlecampresult_;
    ::msg::CSRspAutoBattleOP* autobattleop_;
    ::msg::CSRspRestrictUser* restrictuser_;
    ::msg::CSRspEquipSelectRate* equipselectrate_;
    ::msg::CSRspReportAbsent* reportabsent_;
    ::msg::CSRspRecommendWeek* recommendweek_;
    ::msg::CSRspRecommendOfficial* recommendofficial_;
    ::msg::CSRspRecommendLatest* recommendlatest_;
    ::msg::CSRspRecommendHistory* recommendhistory_;
    ::msg::CSRspRecommendCollect* recommendcollect_;
    ::msg::CSRspRecommendSet* recommendset_;
    ::msg::CSRspRecommendGetCollection* recommendgetcollection_;
    ::msg::CSRspRecommendEquip* recommendequip_;
    ::msg::CSRspLoginCancel* logincancel_;
    ::msg::CSRspConvertDebris* convertdebris_;
    ::msg::CSRspUseProtectionCard* protectioncard_;
    ::msg::CSRspUsePassportCard* usepassportcard_;
    ::msg::CSRspSetMedal* setmedal_;
    ::msg::CSRspUnSetMedal* unsetmedal_;
    ::msg::CSRspPlayerMedals* playermedals_;
    ::msg::CSRspUpdateHotDot* updatehotdot_;
    ::msg::CSRspQueryHotDot* queryhotdot_;
    ::msg::CSRspSetCache* setcache_;
    ::msg::CSRspGetCache* getcache_;
    ::msg::CSRspBuyChallengeCount* buychallengecount_;
    ::msg::CSRspGetPveRank* getpverank_;
    ::msg::CSRspAuthAccount* authaccount_;
    ::msg::CSRspUnbindAccount* unbindaccount_;
    ::msg::CSRspBagToItem* bagtoitem_;
    ::msg::CSRspIdentifyItem* identifyitem_;
    ::msg::CSRspInsetItemAffix* insetitemaffix_;
    ::msg::CSRspUnsetItemAffix* unsetitemaffix_;
    ::msg::CSRspSetDefaultAttributes* setdefaultattributes_;
    ::msg::CSRspCheckCancel* checkcancel_;
    ::msg::CSRspCancelAccount* cancelaccount_;
    ::msg::CSRspOAuthApp* oauthapp_;
    ::msg::CSRspGetSelfNumRankData* selfnumrankdata_;
    ::msg::CSRspUpdateCardGroup* updatecardgroup_;
    ::msg::CSRspUpdateCardGroupName* updatecardgroupname_;
    ::msg::CSRspBuyPveBuff* buypvebuff_;
    ::msg::CSRspSetCardGroup* setcardgroup_;
    ::msg::CSRspBuyPveChessTemplate* buypvechesstemplate_;
    ::msg::CSRspPveUnlockChessTemplate* pveunlockchesstemplate_;
    ::msg::CSRspPveSetTeamDeBuff* pvesetteamdebuff_;
    ::msg::CSRspChoseCardGroup* chosecardgroup_;
    ::msg::CSRspRemoveOvertimeBuff* removeovertimebuff_;
    ::msg::CSRspUpdateNewCardGroupSign* updatenewcardgroupsign_;
    ::msg::CSRspTDGetOnHookAward* tdgetonhookaward_;
    ::msg::CsRspTDDraw* tddraw_;
    ::msg::CsRspTDBuyCard* tdbuycard_;
    ::msg::CSRspTDSetCardGroup* tdsetcardgroup_;
    ::msg::CSRspTDLevelUp* tdlevelup_;
    ::msg::CSRspTDEquip* tdequip_;
    ::msg::CSRspMentorUpdateSetting* mentorupdatesetting_;
    ::msg::CSRspMentorInvite* mentorinvite_;
    ::msg::CSRspMentorConfirmInvite* mentorconfirminvite_;
    ::msg::CSRspMentorRecommendList* mentorrecommendlist_;
    ::msg::CSRspMentorGetTaskAward* mentorgettaskaward_;
    ::msg::CSRspMentorGraduate* mentorgraduate_;
    ::msg::CSRspMentorRelieveRelation* mentorrelieverelation_;
    ::msg::CSRspGetMentorInfo* getmentorinfo_;
    ::msg::CSRspMentorGetInviteMsg* mentorgetinvitemsg_;
    ::msg::CSRspTeamMsg* teammsg_;
    ::msg::CSRspChatMsg* chatmsg_;
    ::msg::CSRspChannelChat* channelchat_;
    ::msg::CSRspUpdateCardGroupBetter* updatecardgroupbetter_;
    ::msg::CSRspUpdateCardGroupSetting* updatecardgroupsetting_;
    ::msg::CSRspSetAuctionName* setauctionname_;
    ::msg::CSRspSetAuctionRemark* setauctionremark_;
    ::msg::CSRspGetBalance* getbalance_;
    ::msg::CSRspRechargeBalance* rechargebalance_;
    ::msg::CSRspWithdrawBalance* withdrawbalance_;
    ::msg::CSRspPersonalRecommendMall* personalrecommendmall_;
    ::msg::CSRspGetMedalChestAward* getmedalchestaward_;
    ::msg::CSRspSetItemAutoUse* setitemautouse_;
    uint64_t seq_;
    int errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_csprotocol_2eproto;
};
// -------------------------------------------------------------------

class CSNtfBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfBody) */ {
 public:
  inline CSNtfBody() : CSNtfBody(nullptr) {}
  ~CSNtfBody() override;
  explicit PROTOBUF_CONSTEXPR CSNtfBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfBody(const CSNtfBody& from);
  CSNtfBody(CSNtfBody&& from) noexcept
    : CSNtfBody() {
    *this = ::std::move(from);
  }

  inline CSNtfBody& operator=(const CSNtfBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfBody& operator=(CSNtfBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfBody* internal_default_instance() {
    return reinterpret_cast<const CSNtfBody*>(
               &_CSNtfBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CSNtfBody& a, CSNtfBody& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfBody& from) {
    CSNtfBody::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfBody";
  }
  protected:
  explicit CSNtfBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMailsFieldNumber = 7,
    kKickOffFieldNumber = 1,
    kNtfWaitFieldNumber = 2,
    kPassDayFieldNumber = 3,
    kPassWeekFieldNumber = 4,
    kPassMonthFieldNumber = 5,
    kWorldChatFieldNumber = 6,
    kHeadPicFieldNumber = 8,
    kPvpMatchFieldNumber = 9,
    kPvpFieldNumber = 10,
    kPvpMatchCancelFieldNumber = 11,
    kPvpStatusFieldNumber = 12,
    kNtfPvpPlayerReadyFieldNumber = 13,
    kPvpBeginFieldNumber = 14,
    kPlayerFinishFieldNumber = 16,
    kPvpEndFieldNumber = 17,
    kMarqueeFieldNumber = 18,
    kRemoveMarqueeFieldNumber = 19,
    kLoadingProgressFieldNumber = 20,
    kPvpChatFieldNumber = 21,
    kReloadFieldNumber = 22,
    kPayFieldNumber = 23,
    kChatFieldNumber = 24,
    kFollowListFieldNumber = 25,
    kNewFollowerFieldNumber = 26,
    kLostFollowerFieldNumber = 27,
    kInviteJoinTeamFieldNumber = 28,
    kPlayerJoinTeamFieldNumber = 29,
    kPlayerLeaveTeamFieldNumber = 30,
    kKickOffTeamPlayerFieldNumber = 31,
    kTeamMsgFieldNumber = 32,
    kTeamReadyFieldNumber = 33,
    kRejectJoinTeamFieldNumber = 34,
    kNoticeFieldNumber = 35,
    kRemoveNoticeFieldNumber = 36,
    kUpgradeBattleStageFieldNumber = 37,
    kPassportTaskProgressFieldNumber = 38,
    kRankSeasonEvalFieldNumber = 39,
    kBindAccountsFieldNumber = 40,
    kSeasonTaskProgressFieldNumber = 41,
    kAlphaActivityFieldNumber = 42,
    kOffSeasonToNewSeasonFieldNumber = 43,
    kLanguageMd5ListFieldNumber = 44,
    kActivityProgressFieldNumber = 45,
    kRemoveActivityFieldNumber = 46,
    kActivityConfigFieldNumber = 47,
    kMeleeTaskProgressFieldNumber = 48,
    kSetTeamModeFieldNumber = 49,
    kPassportOpenFieldNumber = 50,
    kPassportCloseFieldNumber = 51,
    kWeekIndexFieldNumber = 52,
    kPvpHistoryFieldNumber = 53,
    kTeamPvpEndFieldNumber = 54,
    kProbeNetDelayFieldNumber = 55,
    kRefreshGoodsFieldNumber = 56,
    kRemoveEggsFieldNumber = 57,
    kSwitchSetFieldNumber = 58,
    kBlacklistFieldNumber = 59,
    kBindPhoneNumberSwitchFieldNumber = 60,
    kWorldInviteFieldNumber = 61,
    kMallNoticeFieldNumber = 62,
    kPrivilegeFieldNumber = 63,
    kAARemindFieldNumber = 64,
    kAABanFieldNumber = 65,
    kAAVerifyFieldNumber = 66,
    kPhoneNumberFieldNumber = 67,
    kAntiCallBackFieldNumber = 68,
    kFortuneBagTimeFieldNumber = 69,
    kUpdateItemFieldNumber = 70,
    kCreditScoreFieldNumber = 71,
    kBuffActFieldNumber = 72,
    kActivityGroupFieldNumber = 73,
    kClearChatFieldNumber = 74,
    kForbidInfoFieldNumber = 75,
    kMidasDiamondFieldNumber = 76,
    kJoinVoiceTeamFieldNumber = 77,
    kJoinVoicePvpFieldNumber = 78,
    kJoinVoiceCampFieldNumber = 79,
    kWxVVipFieldNumber = 80,
    kFreeFlowFieldNumber = 81,
    kObserveStatusFieldNumber = 82,
    kGameMarqueeFieldNumber = 83,
    kWxRedPacketFieldNumber = 84,
    kGmSysMsgFieldNumber = 85,
    kNewPunishmentFieldNumber = 86,
    kTeamSlotFieldNumber = 87,
    kTeamSubModeFieldNumber = 88,
    kTeamSlotStatusFieldNumber = 89,
    kPunishmentInfoFieldNumber = 90,
    kRemovePunishmentFieldNumber = 91,
    kPvpConfirmFieldNumber = 92,
    kMatchSuccessFieldNumber = 93,
    kOldBusinessPlayerFieldNumber = 94,
    kChangeTeamSlotFieldNumber = 95,
    kRefuseChangeTeamSlotFieldNumber = 96,
    kCancelChangeSlotFieldNumber = 97,
    kShowChessSkinFieldNumber = 98,
    kOnHelpReddotFieldNumber = 99,
    kBagUpdateFieldNumber = 100,
    kRefreshMeleeFieldNumber = 101,
    kWebLoginFieldNumber = 102,
    kCurrentTournamentFieldNumber = 103,
    kTournamentBeginFieldNumber = 104,
    kTournamentEnrollBeginFieldNumber = 105,
    kTournamentEnrollEndFieldNumber = 106,
    kJoinTournamentRoomFieldNumber = 107,
    kTournamentEndFieldNumber = 108,
    kTournamentOutFieldNumber = 109,
    kTournamentRoundEndFieldNumber = 110,
    kLuckStarAwardFieldNumber = 111,
    kInviteObserveFieldNumber = 112,
    kRejectObserveFieldNumber = 113,
    kChestCountFieldNumber = 114,
    kRecruitInfoFieldNumber = 115,
    kRecruitPlayerFieldNumber = 116,
    kRecruitPlayerBattleFieldNumber = 117,
    kBetOnBountyFieldNumber = 118,
    kActivityTaskUnlockFieldNumber = 119,
    kPsServerOnlyFieldNumber = 120,
    kAddThirdPvpInfoFieldNumber = 121,
    kDelThirdPvpInfoFieldNumber = 122,
    kPs4ServerOnlyFieldNumber = 123,
    kLuckMallGoodsFieldNumber = 124,
    kChessListErrFieldNumber = 125,
    kChestRecordFieldNumber = 126,
    kGOAInfoFieldNumber = 127,
    kMedalInfoFieldNumber = 128,
    kMedalIdFieldNumber = 129,
    kPvpResetFieldNumber = 130,
    kDelMailFieldNumber = 131,
    kItemInfoFieldNumber = 132,
    kPassportNumFieldNumber = 133,
    kPassportYearCardNumFieldNumber = 134,
    kTeamOPFieldNumber = 300,
    kTeamDismissFieldNumber = 301,
    kSwitchModeInTeamFieldNumber = 302,
    kAddBannerFieldNumber = 303,
    kRemoveBannerFieldNumber = 304,
    kSingleRoundFlowFieldNumber = 305,
    kTeamStatusFieldNumber = 306,
    kTNGameEndFieldNumber = 320,
    kPlayerLackResourceFieldNumber = 330,
    kFavMapRemovedFieldNumber = 331,
    kWorkshopMatchResultFieldNumber = 332,
    kBigWinnerExpandMatchFieldNumber = 333,
    kVerifyRealNameFieldNumber = 350,
    kGuildJoinFieldNumber = 360,
    kMemberChangeFieldNumber = 361,
    kGuildKickoffFieldNumber = 362,
    kGuildRoleChangeFieldNumber = 363,
    kGuildAttrChangeFieldNumber = 364,
    kGuildChatFieldNumber = 365,
    kNewGuildLogFieldNumber = 366,
    kApplicantChangeFieldNumber = 367,
    kInviteeChangeFieldNumber = 368,
    kGuildNewInviteFieldNumber = 379,
    kGuildInfoFieldNumber = 380,
    kVngAwardResetFieldNumber = 400,
    kAdAwardFieldNumber = 401,
    kAdCountFieldNumber = 402,
    kUIForbidFieldNumber = 403,
    kPvpUpdateMessengerPosFieldNumber = 522,
    kPvpPlayerLoggedInFieldNumber = 523,
    kPassThroughFieldNumber = 566,
    kAAFieldNumber = 570,
    kPvpReconnectFieldNumber = 571,
    kUpdateBattleResultFieldNumber = 572,
    kVisitPlayerFieldNumber = 573,
    kKrIdentityAuthFieldNumber = 574,
    kKrAddictionTipFieldNumber = 575,
    kLeaveGameEarlyFieldNumber = 576,
    kKrAddictionCountdownFieldNumber = 577,
    kHistroyChatMsgFieldNumber = 578,
    kGMTimeFieldNumber = 579,
    kChangeNameFieldNumber = 580,
    kFirstPayFieldNumber = 581,
    kExpChangedFieldNumber = 582,
    kTaskProgressFieldNumber = 583,
    kNewPlayerGuideEndedFieldNumber = 584,
    kTasksInfoFieldNumber = 585,
    kPvpAwardsInfoFieldNumber = 586,
    kAddAwardFieldNumber = 587,
    kLimitRefreshFieldNumber = 588,
    kUpdateNoticeFieldNumber = 589,
    kUpdatePveChallengeCountFieldNumber = 590,
    kAdDiscountFieldNumber = 591,
    kCalcMmrFieldNumber = 592,
    kBagFieldNumber = 593,
    kItemAttributesFieldNumber = 594,
    kPVPAffixTriggerFieldNumber = 595,
    kUpdatePvpDataFieldNumber = 596,
    kUpgradePassportFieldNumber = 597,
    kUpdateTeamDeBuffFieldNumber = 598,
    kPveEvalFieldNumber = 599,
    kUnlockCardGroupFieldNumber = 600,
    kCustomPveActivityFieldNumber = 601,
    kCSNtfGmBanFieldNumber = 602,
    kTDPlayerInfoFieldNumber = 603,
    kMentorInviteMsgFieldNumber = 604,
    kBecomeMentorFieldNumber = 605,
    kMentorRelationFieldNumber = 606,
    kMentorShipTaskUpdateFieldNumber = 607,
    kMentorLevelFieldNumber = 608,
    kCurDressUpdateFieldNumber = 609,
    kChangeExchangeMarkFieldNumber = 610,
    kRefreshPassportFieldNumber = 611,
    kGmRemoveMailFieldNumber = 612,
    kAutoUseItemFieldNumber = 613,
  };
  // repeated .msg.CSDTMail Mails = 7;
  int mails_size() const;
  private:
  int _internal_mails_size() const;
  public:
  void clear_mails();
  ::msg::CSDTMail* mutable_mails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMail >*
      mutable_mails();
  private:
  const ::msg::CSDTMail& _internal_mails(int index) const;
  ::msg::CSDTMail* _internal_add_mails();
  public:
  const ::msg::CSDTMail& mails(int index) const;
  ::msg::CSDTMail* add_mails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMail >&
      mails() const;

  // .msg.CSNtfKickOff KickOff = 1;
  bool has_kickoff() const;
  private:
  bool _internal_has_kickoff() const;
  public:
  void clear_kickoff();
  const ::msg::CSNtfKickOff& kickoff() const;
  PROTOBUF_NODISCARD ::msg::CSNtfKickOff* release_kickoff();
  ::msg::CSNtfKickOff* mutable_kickoff();
  void set_allocated_kickoff(::msg::CSNtfKickOff* kickoff);
  private:
  const ::msg::CSNtfKickOff& _internal_kickoff() const;
  ::msg::CSNtfKickOff* _internal_mutable_kickoff();
  public:
  void unsafe_arena_set_allocated_kickoff(
      ::msg::CSNtfKickOff* kickoff);
  ::msg::CSNtfKickOff* unsafe_arena_release_kickoff();

  // .msg.CSNtfWait NtfWait = 2;
  bool has_ntfwait() const;
  private:
  bool _internal_has_ntfwait() const;
  public:
  void clear_ntfwait();
  const ::msg::CSNtfWait& ntfwait() const;
  PROTOBUF_NODISCARD ::msg::CSNtfWait* release_ntfwait();
  ::msg::CSNtfWait* mutable_ntfwait();
  void set_allocated_ntfwait(::msg::CSNtfWait* ntfwait);
  private:
  const ::msg::CSNtfWait& _internal_ntfwait() const;
  ::msg::CSNtfWait* _internal_mutable_ntfwait();
  public:
  void unsafe_arena_set_allocated_ntfwait(
      ::msg::CSNtfWait* ntfwait);
  ::msg::CSNtfWait* unsafe_arena_release_ntfwait();

  // .msg.CSNtfPassDayBody PassDay = 3;
  bool has_passday() const;
  private:
  bool _internal_has_passday() const;
  public:
  void clear_passday();
  const ::msg::CSNtfPassDayBody& passday() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPassDayBody* release_passday();
  ::msg::CSNtfPassDayBody* mutable_passday();
  void set_allocated_passday(::msg::CSNtfPassDayBody* passday);
  private:
  const ::msg::CSNtfPassDayBody& _internal_passday() const;
  ::msg::CSNtfPassDayBody* _internal_mutable_passday();
  public:
  void unsafe_arena_set_allocated_passday(
      ::msg::CSNtfPassDayBody* passday);
  ::msg::CSNtfPassDayBody* unsafe_arena_release_passday();

  // .msg.CSNtfPassWeekBody PassWeek = 4;
  bool has_passweek() const;
  private:
  bool _internal_has_passweek() const;
  public:
  void clear_passweek();
  const ::msg::CSNtfPassWeekBody& passweek() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPassWeekBody* release_passweek();
  ::msg::CSNtfPassWeekBody* mutable_passweek();
  void set_allocated_passweek(::msg::CSNtfPassWeekBody* passweek);
  private:
  const ::msg::CSNtfPassWeekBody& _internal_passweek() const;
  ::msg::CSNtfPassWeekBody* _internal_mutable_passweek();
  public:
  void unsafe_arena_set_allocated_passweek(
      ::msg::CSNtfPassWeekBody* passweek);
  ::msg::CSNtfPassWeekBody* unsafe_arena_release_passweek();

  // .msg.CSNtfPassMonthBody PassMonth = 5;
  bool has_passmonth() const;
  private:
  bool _internal_has_passmonth() const;
  public:
  void clear_passmonth();
  const ::msg::CSNtfPassMonthBody& passmonth() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPassMonthBody* release_passmonth();
  ::msg::CSNtfPassMonthBody* mutable_passmonth();
  void set_allocated_passmonth(::msg::CSNtfPassMonthBody* passmonth);
  private:
  const ::msg::CSNtfPassMonthBody& _internal_passmonth() const;
  ::msg::CSNtfPassMonthBody* _internal_mutable_passmonth();
  public:
  void unsafe_arena_set_allocated_passmonth(
      ::msg::CSNtfPassMonthBody* passmonth);
  ::msg::CSNtfPassMonthBody* unsafe_arena_release_passmonth();

  // .msg.CSNtfWorldChat WorldChat = 6;
  bool has_worldchat() const;
  private:
  bool _internal_has_worldchat() const;
  public:
  void clear_worldchat();
  const ::msg::CSNtfWorldChat& worldchat() const;
  PROTOBUF_NODISCARD ::msg::CSNtfWorldChat* release_worldchat();
  ::msg::CSNtfWorldChat* mutable_worldchat();
  void set_allocated_worldchat(::msg::CSNtfWorldChat* worldchat);
  private:
  const ::msg::CSNtfWorldChat& _internal_worldchat() const;
  ::msg::CSNtfWorldChat* _internal_mutable_worldchat();
  public:
  void unsafe_arena_set_allocated_worldchat(
      ::msg::CSNtfWorldChat* worldchat);
  ::msg::CSNtfWorldChat* unsafe_arena_release_worldchat();

  // .msg.CSNtfHeadPic HeadPic = 8;
  bool has_headpic() const;
  private:
  bool _internal_has_headpic() const;
  public:
  void clear_headpic();
  const ::msg::CSNtfHeadPic& headpic() const;
  PROTOBUF_NODISCARD ::msg::CSNtfHeadPic* release_headpic();
  ::msg::CSNtfHeadPic* mutable_headpic();
  void set_allocated_headpic(::msg::CSNtfHeadPic* headpic);
  private:
  const ::msg::CSNtfHeadPic& _internal_headpic() const;
  ::msg::CSNtfHeadPic* _internal_mutable_headpic();
  public:
  void unsafe_arena_set_allocated_headpic(
      ::msg::CSNtfHeadPic* headpic);
  ::msg::CSNtfHeadPic* unsafe_arena_release_headpic();

  // .msg.CSNtfPvpMatch PvpMatch = 9;
  bool has_pvpmatch() const;
  private:
  bool _internal_has_pvpmatch() const;
  public:
  void clear_pvpmatch();
  const ::msg::CSNtfPvpMatch& pvpmatch() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPvpMatch* release_pvpmatch();
  ::msg::CSNtfPvpMatch* mutable_pvpmatch();
  void set_allocated_pvpmatch(::msg::CSNtfPvpMatch* pvpmatch);
  private:
  const ::msg::CSNtfPvpMatch& _internal_pvpmatch() const;
  ::msg::CSNtfPvpMatch* _internal_mutable_pvpmatch();
  public:
  void unsafe_arena_set_allocated_pvpmatch(
      ::msg::CSNtfPvpMatch* pvpmatch);
  ::msg::CSNtfPvpMatch* unsafe_arena_release_pvpmatch();

  // .msg.CSNtfPvp Pvp = 10;
  bool has_pvp() const;
  private:
  bool _internal_has_pvp() const;
  public:
  void clear_pvp();
  const ::msg::CSNtfPvp& pvp() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPvp* release_pvp();
  ::msg::CSNtfPvp* mutable_pvp();
  void set_allocated_pvp(::msg::CSNtfPvp* pvp);
  private:
  const ::msg::CSNtfPvp& _internal_pvp() const;
  ::msg::CSNtfPvp* _internal_mutable_pvp();
  public:
  void unsafe_arena_set_allocated_pvp(
      ::msg::CSNtfPvp* pvp);
  ::msg::CSNtfPvp* unsafe_arena_release_pvp();

  // .msg.CSNtfPvpMatchCancel PvpMatchCancel = 11;
  bool has_pvpmatchcancel() const;
  private:
  bool _internal_has_pvpmatchcancel() const;
  public:
  void clear_pvpmatchcancel();
  const ::msg::CSNtfPvpMatchCancel& pvpmatchcancel() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPvpMatchCancel* release_pvpmatchcancel();
  ::msg::CSNtfPvpMatchCancel* mutable_pvpmatchcancel();
  void set_allocated_pvpmatchcancel(::msg::CSNtfPvpMatchCancel* pvpmatchcancel);
  private:
  const ::msg::CSNtfPvpMatchCancel& _internal_pvpmatchcancel() const;
  ::msg::CSNtfPvpMatchCancel* _internal_mutable_pvpmatchcancel();
  public:
  void unsafe_arena_set_allocated_pvpmatchcancel(
      ::msg::CSNtfPvpMatchCancel* pvpmatchcancel);
  ::msg::CSNtfPvpMatchCancel* unsafe_arena_release_pvpmatchcancel();

  // .msg.CSNtfPvpStatus PvpStatus = 12;
  bool has_pvpstatus() const;
  private:
  bool _internal_has_pvpstatus() const;
  public:
  void clear_pvpstatus();
  const ::msg::CSNtfPvpStatus& pvpstatus() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPvpStatus* release_pvpstatus();
  ::msg::CSNtfPvpStatus* mutable_pvpstatus();
  void set_allocated_pvpstatus(::msg::CSNtfPvpStatus* pvpstatus);
  private:
  const ::msg::CSNtfPvpStatus& _internal_pvpstatus() const;
  ::msg::CSNtfPvpStatus* _internal_mutable_pvpstatus();
  public:
  void unsafe_arena_set_allocated_pvpstatus(
      ::msg::CSNtfPvpStatus* pvpstatus);
  ::msg::CSNtfPvpStatus* unsafe_arena_release_pvpstatus();

  // .msg.CSNtfPvpPlayerReady NtfPvpPlayerReady = 13;
  bool has_ntfpvpplayerready() const;
  private:
  bool _internal_has_ntfpvpplayerready() const;
  public:
  void clear_ntfpvpplayerready();
  const ::msg::CSNtfPvpPlayerReady& ntfpvpplayerready() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPvpPlayerReady* release_ntfpvpplayerready();
  ::msg::CSNtfPvpPlayerReady* mutable_ntfpvpplayerready();
  void set_allocated_ntfpvpplayerready(::msg::CSNtfPvpPlayerReady* ntfpvpplayerready);
  private:
  const ::msg::CSNtfPvpPlayerReady& _internal_ntfpvpplayerready() const;
  ::msg::CSNtfPvpPlayerReady* _internal_mutable_ntfpvpplayerready();
  public:
  void unsafe_arena_set_allocated_ntfpvpplayerready(
      ::msg::CSNtfPvpPlayerReady* ntfpvpplayerready);
  ::msg::CSNtfPvpPlayerReady* unsafe_arena_release_ntfpvpplayerready();

  // .msg.CSNtfPvpBegin PvpBegin = 14;
  bool has_pvpbegin() const;
  private:
  bool _internal_has_pvpbegin() const;
  public:
  void clear_pvpbegin();
  const ::msg::CSNtfPvpBegin& pvpbegin() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPvpBegin* release_pvpbegin();
  ::msg::CSNtfPvpBegin* mutable_pvpbegin();
  void set_allocated_pvpbegin(::msg::CSNtfPvpBegin* pvpbegin);
  private:
  const ::msg::CSNtfPvpBegin& _internal_pvpbegin() const;
  ::msg::CSNtfPvpBegin* _internal_mutable_pvpbegin();
  public:
  void unsafe_arena_set_allocated_pvpbegin(
      ::msg::CSNtfPvpBegin* pvpbegin);
  ::msg::CSNtfPvpBegin* unsafe_arena_release_pvpbegin();

  // .msg.CSNtfPlayerFinish PlayerFinish = 16;
  bool has_playerfinish() const;
  private:
  bool _internal_has_playerfinish() const;
  public:
  void clear_playerfinish();
  const ::msg::CSNtfPlayerFinish& playerfinish() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPlayerFinish* release_playerfinish();
  ::msg::CSNtfPlayerFinish* mutable_playerfinish();
  void set_allocated_playerfinish(::msg::CSNtfPlayerFinish* playerfinish);
  private:
  const ::msg::CSNtfPlayerFinish& _internal_playerfinish() const;
  ::msg::CSNtfPlayerFinish* _internal_mutable_playerfinish();
  public:
  void unsafe_arena_set_allocated_playerfinish(
      ::msg::CSNtfPlayerFinish* playerfinish);
  ::msg::CSNtfPlayerFinish* unsafe_arena_release_playerfinish();

  // .msg.CSNtfPvpEnd PvpEnd = 17;
  bool has_pvpend() const;
  private:
  bool _internal_has_pvpend() const;
  public:
  void clear_pvpend();
  const ::msg::CSNtfPvpEnd& pvpend() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPvpEnd* release_pvpend();
  ::msg::CSNtfPvpEnd* mutable_pvpend();
  void set_allocated_pvpend(::msg::CSNtfPvpEnd* pvpend);
  private:
  const ::msg::CSNtfPvpEnd& _internal_pvpend() const;
  ::msg::CSNtfPvpEnd* _internal_mutable_pvpend();
  public:
  void unsafe_arena_set_allocated_pvpend(
      ::msg::CSNtfPvpEnd* pvpend);
  ::msg::CSNtfPvpEnd* unsafe_arena_release_pvpend();

  // .msg.CSNtfMarquee Marquee = 18;
  bool has_marquee() const;
  private:
  bool _internal_has_marquee() const;
  public:
  void clear_marquee();
  const ::msg::CSNtfMarquee& marquee() const;
  PROTOBUF_NODISCARD ::msg::CSNtfMarquee* release_marquee();
  ::msg::CSNtfMarquee* mutable_marquee();
  void set_allocated_marquee(::msg::CSNtfMarquee* marquee);
  private:
  const ::msg::CSNtfMarquee& _internal_marquee() const;
  ::msg::CSNtfMarquee* _internal_mutable_marquee();
  public:
  void unsafe_arena_set_allocated_marquee(
      ::msg::CSNtfMarquee* marquee);
  ::msg::CSNtfMarquee* unsafe_arena_release_marquee();

  // .msg.CSNtfRemoveMarquee RemoveMarquee = 19;
  bool has_removemarquee() const;
  private:
  bool _internal_has_removemarquee() const;
  public:
  void clear_removemarquee();
  const ::msg::CSNtfRemoveMarquee& removemarquee() const;
  PROTOBUF_NODISCARD ::msg::CSNtfRemoveMarquee* release_removemarquee();
  ::msg::CSNtfRemoveMarquee* mutable_removemarquee();
  void set_allocated_removemarquee(::msg::CSNtfRemoveMarquee* removemarquee);
  private:
  const ::msg::CSNtfRemoveMarquee& _internal_removemarquee() const;
  ::msg::CSNtfRemoveMarquee* _internal_mutable_removemarquee();
  public:
  void unsafe_arena_set_allocated_removemarquee(
      ::msg::CSNtfRemoveMarquee* removemarquee);
  ::msg::CSNtfRemoveMarquee* unsafe_arena_release_removemarquee();

  // .msg.CSNtfLoadingProgress LoadingProgress = 20;
  bool has_loadingprogress() const;
  private:
  bool _internal_has_loadingprogress() const;
  public:
  void clear_loadingprogress();
  const ::msg::CSNtfLoadingProgress& loadingprogress() const;
  PROTOBUF_NODISCARD ::msg::CSNtfLoadingProgress* release_loadingprogress();
  ::msg::CSNtfLoadingProgress* mutable_loadingprogress();
  void set_allocated_loadingprogress(::msg::CSNtfLoadingProgress* loadingprogress);
  private:
  const ::msg::CSNtfLoadingProgress& _internal_loadingprogress() const;
  ::msg::CSNtfLoadingProgress* _internal_mutable_loadingprogress();
  public:
  void unsafe_arena_set_allocated_loadingprogress(
      ::msg::CSNtfLoadingProgress* loadingprogress);
  ::msg::CSNtfLoadingProgress* unsafe_arena_release_loadingprogress();

  // .msg.CSNtfPvpChat PvpChat = 21;
  bool has_pvpchat() const;
  private:
  bool _internal_has_pvpchat() const;
  public:
  void clear_pvpchat();
  const ::msg::CSNtfPvpChat& pvpchat() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPvpChat* release_pvpchat();
  ::msg::CSNtfPvpChat* mutable_pvpchat();
  void set_allocated_pvpchat(::msg::CSNtfPvpChat* pvpchat);
  private:
  const ::msg::CSNtfPvpChat& _internal_pvpchat() const;
  ::msg::CSNtfPvpChat* _internal_mutable_pvpchat();
  public:
  void unsafe_arena_set_allocated_pvpchat(
      ::msg::CSNtfPvpChat* pvpchat);
  ::msg::CSNtfPvpChat* unsafe_arena_release_pvpchat();

  // .msg.CSNtfReload Reload = 22;
  bool has_reload() const;
  private:
  bool _internal_has_reload() const;
  public:
  void clear_reload();
  const ::msg::CSNtfReload& reload() const;
  PROTOBUF_NODISCARD ::msg::CSNtfReload* release_reload();
  ::msg::CSNtfReload* mutable_reload();
  void set_allocated_reload(::msg::CSNtfReload* reload);
  private:
  const ::msg::CSNtfReload& _internal_reload() const;
  ::msg::CSNtfReload* _internal_mutable_reload();
  public:
  void unsafe_arena_set_allocated_reload(
      ::msg::CSNtfReload* reload);
  ::msg::CSNtfReload* unsafe_arena_release_reload();

  // .msg.CSNtfPay Pay = 23;
  bool has_pay() const;
  private:
  bool _internal_has_pay() const;
  public:
  void clear_pay();
  const ::msg::CSNtfPay& pay() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPay* release_pay();
  ::msg::CSNtfPay* mutable_pay();
  void set_allocated_pay(::msg::CSNtfPay* pay);
  private:
  const ::msg::CSNtfPay& _internal_pay() const;
  ::msg::CSNtfPay* _internal_mutable_pay();
  public:
  void unsafe_arena_set_allocated_pay(
      ::msg::CSNtfPay* pay);
  ::msg::CSNtfPay* unsafe_arena_release_pay();

  // .msg.CSNtfChat Chat = 24;
  bool has_chat() const;
  private:
  bool _internal_has_chat() const;
  public:
  void clear_chat();
  const ::msg::CSNtfChat& chat() const;
  PROTOBUF_NODISCARD ::msg::CSNtfChat* release_chat();
  ::msg::CSNtfChat* mutable_chat();
  void set_allocated_chat(::msg::CSNtfChat* chat);
  private:
  const ::msg::CSNtfChat& _internal_chat() const;
  ::msg::CSNtfChat* _internal_mutable_chat();
  public:
  void unsafe_arena_set_allocated_chat(
      ::msg::CSNtfChat* chat);
  ::msg::CSNtfChat* unsafe_arena_release_chat();

  // .msg.CSNtfFollowList FollowList = 25;
  bool has_followlist() const;
  private:
  bool _internal_has_followlist() const;
  public:
  void clear_followlist();
  const ::msg::CSNtfFollowList& followlist() const;
  PROTOBUF_NODISCARD ::msg::CSNtfFollowList* release_followlist();
  ::msg::CSNtfFollowList* mutable_followlist();
  void set_allocated_followlist(::msg::CSNtfFollowList* followlist);
  private:
  const ::msg::CSNtfFollowList& _internal_followlist() const;
  ::msg::CSNtfFollowList* _internal_mutable_followlist();
  public:
  void unsafe_arena_set_allocated_followlist(
      ::msg::CSNtfFollowList* followlist);
  ::msg::CSNtfFollowList* unsafe_arena_release_followlist();

  // .msg.CSNtfNewFollower NewFollower = 26;
  bool has_newfollower() const;
  private:
  bool _internal_has_newfollower() const;
  public:
  void clear_newfollower();
  const ::msg::CSNtfNewFollower& newfollower() const;
  PROTOBUF_NODISCARD ::msg::CSNtfNewFollower* release_newfollower();
  ::msg::CSNtfNewFollower* mutable_newfollower();
  void set_allocated_newfollower(::msg::CSNtfNewFollower* newfollower);
  private:
  const ::msg::CSNtfNewFollower& _internal_newfollower() const;
  ::msg::CSNtfNewFollower* _internal_mutable_newfollower();
  public:
  void unsafe_arena_set_allocated_newfollower(
      ::msg::CSNtfNewFollower* newfollower);
  ::msg::CSNtfNewFollower* unsafe_arena_release_newfollower();

  // .msg.CSNtfLostFollower LostFollower = 27;
  bool has_lostfollower() const;
  private:
  bool _internal_has_lostfollower() const;
  public:
  void clear_lostfollower();
  const ::msg::CSNtfLostFollower& lostfollower() const;
  PROTOBUF_NODISCARD ::msg::CSNtfLostFollower* release_lostfollower();
  ::msg::CSNtfLostFollower* mutable_lostfollower();
  void set_allocated_lostfollower(::msg::CSNtfLostFollower* lostfollower);
  private:
  const ::msg::CSNtfLostFollower& _internal_lostfollower() const;
  ::msg::CSNtfLostFollower* _internal_mutable_lostfollower();
  public:
  void unsafe_arena_set_allocated_lostfollower(
      ::msg::CSNtfLostFollower* lostfollower);
  ::msg::CSNtfLostFollower* unsafe_arena_release_lostfollower();

  // .msg.CSNtfInviteJoinTeam InviteJoinTeam = 28;
  bool has_invitejointeam() const;
  private:
  bool _internal_has_invitejointeam() const;
  public:
  void clear_invitejointeam();
  const ::msg::CSNtfInviteJoinTeam& invitejointeam() const;
  PROTOBUF_NODISCARD ::msg::CSNtfInviteJoinTeam* release_invitejointeam();
  ::msg::CSNtfInviteJoinTeam* mutable_invitejointeam();
  void set_allocated_invitejointeam(::msg::CSNtfInviteJoinTeam* invitejointeam);
  private:
  const ::msg::CSNtfInviteJoinTeam& _internal_invitejointeam() const;
  ::msg::CSNtfInviteJoinTeam* _internal_mutable_invitejointeam();
  public:
  void unsafe_arena_set_allocated_invitejointeam(
      ::msg::CSNtfInviteJoinTeam* invitejointeam);
  ::msg::CSNtfInviteJoinTeam* unsafe_arena_release_invitejointeam();

  // .msg.CSNtfPlayerJoinTeam PlayerJoinTeam = 29;
  bool has_playerjointeam() const;
  private:
  bool _internal_has_playerjointeam() const;
  public:
  void clear_playerjointeam();
  const ::msg::CSNtfPlayerJoinTeam& playerjointeam() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPlayerJoinTeam* release_playerjointeam();
  ::msg::CSNtfPlayerJoinTeam* mutable_playerjointeam();
  void set_allocated_playerjointeam(::msg::CSNtfPlayerJoinTeam* playerjointeam);
  private:
  const ::msg::CSNtfPlayerJoinTeam& _internal_playerjointeam() const;
  ::msg::CSNtfPlayerJoinTeam* _internal_mutable_playerjointeam();
  public:
  void unsafe_arena_set_allocated_playerjointeam(
      ::msg::CSNtfPlayerJoinTeam* playerjointeam);
  ::msg::CSNtfPlayerJoinTeam* unsafe_arena_release_playerjointeam();

  // .msg.CSNtfPlayerLeaveTeam PlayerLeaveTeam = 30;
  bool has_playerleaveteam() const;
  private:
  bool _internal_has_playerleaveteam() const;
  public:
  void clear_playerleaveteam();
  const ::msg::CSNtfPlayerLeaveTeam& playerleaveteam() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPlayerLeaveTeam* release_playerleaveteam();
  ::msg::CSNtfPlayerLeaveTeam* mutable_playerleaveteam();
  void set_allocated_playerleaveteam(::msg::CSNtfPlayerLeaveTeam* playerleaveteam);
  private:
  const ::msg::CSNtfPlayerLeaveTeam& _internal_playerleaveteam() const;
  ::msg::CSNtfPlayerLeaveTeam* _internal_mutable_playerleaveteam();
  public:
  void unsafe_arena_set_allocated_playerleaveteam(
      ::msg::CSNtfPlayerLeaveTeam* playerleaveteam);
  ::msg::CSNtfPlayerLeaveTeam* unsafe_arena_release_playerleaveteam();

  // .msg.CSNtfKickOffTeamPlayer KickOffTeamPlayer = 31;
  bool has_kickoffteamplayer() const;
  private:
  bool _internal_has_kickoffteamplayer() const;
  public:
  void clear_kickoffteamplayer();
  const ::msg::CSNtfKickOffTeamPlayer& kickoffteamplayer() const;
  PROTOBUF_NODISCARD ::msg::CSNtfKickOffTeamPlayer* release_kickoffteamplayer();
  ::msg::CSNtfKickOffTeamPlayer* mutable_kickoffteamplayer();
  void set_allocated_kickoffteamplayer(::msg::CSNtfKickOffTeamPlayer* kickoffteamplayer);
  private:
  const ::msg::CSNtfKickOffTeamPlayer& _internal_kickoffteamplayer() const;
  ::msg::CSNtfKickOffTeamPlayer* _internal_mutable_kickoffteamplayer();
  public:
  void unsafe_arena_set_allocated_kickoffteamplayer(
      ::msg::CSNtfKickOffTeamPlayer* kickoffteamplayer);
  ::msg::CSNtfKickOffTeamPlayer* unsafe_arena_release_kickoffteamplayer();

  // .msg.CSNtfTeamMsg TeamMsg = 32;
  bool has_teammsg() const;
  private:
  bool _internal_has_teammsg() const;
  public:
  void clear_teammsg();
  const ::msg::CSNtfTeamMsg& teammsg() const;
  PROTOBUF_NODISCARD ::msg::CSNtfTeamMsg* release_teammsg();
  ::msg::CSNtfTeamMsg* mutable_teammsg();
  void set_allocated_teammsg(::msg::CSNtfTeamMsg* teammsg);
  private:
  const ::msg::CSNtfTeamMsg& _internal_teammsg() const;
  ::msg::CSNtfTeamMsg* _internal_mutable_teammsg();
  public:
  void unsafe_arena_set_allocated_teammsg(
      ::msg::CSNtfTeamMsg* teammsg);
  ::msg::CSNtfTeamMsg* unsafe_arena_release_teammsg();

  // .msg.CSNtfTeamReady TeamReady = 33;
  bool has_teamready() const;
  private:
  bool _internal_has_teamready() const;
  public:
  void clear_teamready();
  const ::msg::CSNtfTeamReady& teamready() const;
  PROTOBUF_NODISCARD ::msg::CSNtfTeamReady* release_teamready();
  ::msg::CSNtfTeamReady* mutable_teamready();
  void set_allocated_teamready(::msg::CSNtfTeamReady* teamready);
  private:
  const ::msg::CSNtfTeamReady& _internal_teamready() const;
  ::msg::CSNtfTeamReady* _internal_mutable_teamready();
  public:
  void unsafe_arena_set_allocated_teamready(
      ::msg::CSNtfTeamReady* teamready);
  ::msg::CSNtfTeamReady* unsafe_arena_release_teamready();

  // .msg.CSNtfRejectJoinTeam RejectJoinTeam = 34;
  bool has_rejectjointeam() const;
  private:
  bool _internal_has_rejectjointeam() const;
  public:
  void clear_rejectjointeam();
  const ::msg::CSNtfRejectJoinTeam& rejectjointeam() const;
  PROTOBUF_NODISCARD ::msg::CSNtfRejectJoinTeam* release_rejectjointeam();
  ::msg::CSNtfRejectJoinTeam* mutable_rejectjointeam();
  void set_allocated_rejectjointeam(::msg::CSNtfRejectJoinTeam* rejectjointeam);
  private:
  const ::msg::CSNtfRejectJoinTeam& _internal_rejectjointeam() const;
  ::msg::CSNtfRejectJoinTeam* _internal_mutable_rejectjointeam();
  public:
  void unsafe_arena_set_allocated_rejectjointeam(
      ::msg::CSNtfRejectJoinTeam* rejectjointeam);
  ::msg::CSNtfRejectJoinTeam* unsafe_arena_release_rejectjointeam();

  // .msg.CSNtfNotice Notice = 35;
  bool has_notice() const;
  private:
  bool _internal_has_notice() const;
  public:
  void clear_notice();
  const ::msg::CSNtfNotice& notice() const;
  PROTOBUF_NODISCARD ::msg::CSNtfNotice* release_notice();
  ::msg::CSNtfNotice* mutable_notice();
  void set_allocated_notice(::msg::CSNtfNotice* notice);
  private:
  const ::msg::CSNtfNotice& _internal_notice() const;
  ::msg::CSNtfNotice* _internal_mutable_notice();
  public:
  void unsafe_arena_set_allocated_notice(
      ::msg::CSNtfNotice* notice);
  ::msg::CSNtfNotice* unsafe_arena_release_notice();

  // .msg.CSNtfRemoveNotice RemoveNotice = 36;
  bool has_removenotice() const;
  private:
  bool _internal_has_removenotice() const;
  public:
  void clear_removenotice();
  const ::msg::CSNtfRemoveNotice& removenotice() const;
  PROTOBUF_NODISCARD ::msg::CSNtfRemoveNotice* release_removenotice();
  ::msg::CSNtfRemoveNotice* mutable_removenotice();
  void set_allocated_removenotice(::msg::CSNtfRemoveNotice* removenotice);
  private:
  const ::msg::CSNtfRemoveNotice& _internal_removenotice() const;
  ::msg::CSNtfRemoveNotice* _internal_mutable_removenotice();
  public:
  void unsafe_arena_set_allocated_removenotice(
      ::msg::CSNtfRemoveNotice* removenotice);
  ::msg::CSNtfRemoveNotice* unsafe_arena_release_removenotice();

  // .msg.CSNtfUpgradeBattleStage UpgradeBattleStage = 37;
  bool has_upgradebattlestage() const;
  private:
  bool _internal_has_upgradebattlestage() const;
  public:
  void clear_upgradebattlestage();
  const ::msg::CSNtfUpgradeBattleStage& upgradebattlestage() const;
  PROTOBUF_NODISCARD ::msg::CSNtfUpgradeBattleStage* release_upgradebattlestage();
  ::msg::CSNtfUpgradeBattleStage* mutable_upgradebattlestage();
  void set_allocated_upgradebattlestage(::msg::CSNtfUpgradeBattleStage* upgradebattlestage);
  private:
  const ::msg::CSNtfUpgradeBattleStage& _internal_upgradebattlestage() const;
  ::msg::CSNtfUpgradeBattleStage* _internal_mutable_upgradebattlestage();
  public:
  void unsafe_arena_set_allocated_upgradebattlestage(
      ::msg::CSNtfUpgradeBattleStage* upgradebattlestage);
  ::msg::CSNtfUpgradeBattleStage* unsafe_arena_release_upgradebattlestage();

  // .msg.CSNtfPassportTaskProgress PassportTaskProgress = 38;
  bool has_passporttaskprogress() const;
  private:
  bool _internal_has_passporttaskprogress() const;
  public:
  void clear_passporttaskprogress();
  const ::msg::CSNtfPassportTaskProgress& passporttaskprogress() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPassportTaskProgress* release_passporttaskprogress();
  ::msg::CSNtfPassportTaskProgress* mutable_passporttaskprogress();
  void set_allocated_passporttaskprogress(::msg::CSNtfPassportTaskProgress* passporttaskprogress);
  private:
  const ::msg::CSNtfPassportTaskProgress& _internal_passporttaskprogress() const;
  ::msg::CSNtfPassportTaskProgress* _internal_mutable_passporttaskprogress();
  public:
  void unsafe_arena_set_allocated_passporttaskprogress(
      ::msg::CSNtfPassportTaskProgress* passporttaskprogress);
  ::msg::CSNtfPassportTaskProgress* unsafe_arena_release_passporttaskprogress();

  // .msg.CSNtfRankSeasonEval RankSeasonEval = 39;
  bool has_rankseasoneval() const;
  private:
  bool _internal_has_rankseasoneval() const;
  public:
  void clear_rankseasoneval();
  const ::msg::CSNtfRankSeasonEval& rankseasoneval() const;
  PROTOBUF_NODISCARD ::msg::CSNtfRankSeasonEval* release_rankseasoneval();
  ::msg::CSNtfRankSeasonEval* mutable_rankseasoneval();
  void set_allocated_rankseasoneval(::msg::CSNtfRankSeasonEval* rankseasoneval);
  private:
  const ::msg::CSNtfRankSeasonEval& _internal_rankseasoneval() const;
  ::msg::CSNtfRankSeasonEval* _internal_mutable_rankseasoneval();
  public:
  void unsafe_arena_set_allocated_rankseasoneval(
      ::msg::CSNtfRankSeasonEval* rankseasoneval);
  ::msg::CSNtfRankSeasonEval* unsafe_arena_release_rankseasoneval();

  // .msg.CSNtfBindAccounts BindAccounts = 40;
  bool has_bindaccounts() const;
  private:
  bool _internal_has_bindaccounts() const;
  public:
  void clear_bindaccounts();
  const ::msg::CSNtfBindAccounts& bindaccounts() const;
  PROTOBUF_NODISCARD ::msg::CSNtfBindAccounts* release_bindaccounts();
  ::msg::CSNtfBindAccounts* mutable_bindaccounts();
  void set_allocated_bindaccounts(::msg::CSNtfBindAccounts* bindaccounts);
  private:
  const ::msg::CSNtfBindAccounts& _internal_bindaccounts() const;
  ::msg::CSNtfBindAccounts* _internal_mutable_bindaccounts();
  public:
  void unsafe_arena_set_allocated_bindaccounts(
      ::msg::CSNtfBindAccounts* bindaccounts);
  ::msg::CSNtfBindAccounts* unsafe_arena_release_bindaccounts();

  // .msg.CSNtfSeasonTaskProgress SeasonTaskProgress = 41;
  bool has_seasontaskprogress() const;
  private:
  bool _internal_has_seasontaskprogress() const;
  public:
  void clear_seasontaskprogress();
  const ::msg::CSNtfSeasonTaskProgress& seasontaskprogress() const;
  PROTOBUF_NODISCARD ::msg::CSNtfSeasonTaskProgress* release_seasontaskprogress();
  ::msg::CSNtfSeasonTaskProgress* mutable_seasontaskprogress();
  void set_allocated_seasontaskprogress(::msg::CSNtfSeasonTaskProgress* seasontaskprogress);
  private:
  const ::msg::CSNtfSeasonTaskProgress& _internal_seasontaskprogress() const;
  ::msg::CSNtfSeasonTaskProgress* _internal_mutable_seasontaskprogress();
  public:
  void unsafe_arena_set_allocated_seasontaskprogress(
      ::msg::CSNtfSeasonTaskProgress* seasontaskprogress);
  ::msg::CSNtfSeasonTaskProgress* unsafe_arena_release_seasontaskprogress();

  // .msg.CSNtfAlphaActivity AlphaActivity = 42;
  bool has_alphaactivity() const;
  private:
  bool _internal_has_alphaactivity() const;
  public:
  void clear_alphaactivity();
  const ::msg::CSNtfAlphaActivity& alphaactivity() const;
  PROTOBUF_NODISCARD ::msg::CSNtfAlphaActivity* release_alphaactivity();
  ::msg::CSNtfAlphaActivity* mutable_alphaactivity();
  void set_allocated_alphaactivity(::msg::CSNtfAlphaActivity* alphaactivity);
  private:
  const ::msg::CSNtfAlphaActivity& _internal_alphaactivity() const;
  ::msg::CSNtfAlphaActivity* _internal_mutable_alphaactivity();
  public:
  void unsafe_arena_set_allocated_alphaactivity(
      ::msg::CSNtfAlphaActivity* alphaactivity);
  ::msg::CSNtfAlphaActivity* unsafe_arena_release_alphaactivity();

  // .msg.CSNtfOffSeasonToNewSeason OffSeasonToNewSeason = 43;
  bool has_offseasontonewseason() const;
  private:
  bool _internal_has_offseasontonewseason() const;
  public:
  void clear_offseasontonewseason();
  const ::msg::CSNtfOffSeasonToNewSeason& offseasontonewseason() const;
  PROTOBUF_NODISCARD ::msg::CSNtfOffSeasonToNewSeason* release_offseasontonewseason();
  ::msg::CSNtfOffSeasonToNewSeason* mutable_offseasontonewseason();
  void set_allocated_offseasontonewseason(::msg::CSNtfOffSeasonToNewSeason* offseasontonewseason);
  private:
  const ::msg::CSNtfOffSeasonToNewSeason& _internal_offseasontonewseason() const;
  ::msg::CSNtfOffSeasonToNewSeason* _internal_mutable_offseasontonewseason();
  public:
  void unsafe_arena_set_allocated_offseasontonewseason(
      ::msg::CSNtfOffSeasonToNewSeason* offseasontonewseason);
  ::msg::CSNtfOffSeasonToNewSeason* unsafe_arena_release_offseasontonewseason();

  // .msg.CSNtfLanguageMd5List LanguageMd5List = 44;
  bool has_languagemd5list() const;
  private:
  bool _internal_has_languagemd5list() const;
  public:
  void clear_languagemd5list();
  const ::msg::CSNtfLanguageMd5List& languagemd5list() const;
  PROTOBUF_NODISCARD ::msg::CSNtfLanguageMd5List* release_languagemd5list();
  ::msg::CSNtfLanguageMd5List* mutable_languagemd5list();
  void set_allocated_languagemd5list(::msg::CSNtfLanguageMd5List* languagemd5list);
  private:
  const ::msg::CSNtfLanguageMd5List& _internal_languagemd5list() const;
  ::msg::CSNtfLanguageMd5List* _internal_mutable_languagemd5list();
  public:
  void unsafe_arena_set_allocated_languagemd5list(
      ::msg::CSNtfLanguageMd5List* languagemd5list);
  ::msg::CSNtfLanguageMd5List* unsafe_arena_release_languagemd5list();

  // .msg.CSNtfActivityProgress ActivityProgress = 45;
  bool has_activityprogress() const;
  private:
  bool _internal_has_activityprogress() const;
  public:
  void clear_activityprogress();
  const ::msg::CSNtfActivityProgress& activityprogress() const;
  PROTOBUF_NODISCARD ::msg::CSNtfActivityProgress* release_activityprogress();
  ::msg::CSNtfActivityProgress* mutable_activityprogress();
  void set_allocated_activityprogress(::msg::CSNtfActivityProgress* activityprogress);
  private:
  const ::msg::CSNtfActivityProgress& _internal_activityprogress() const;
  ::msg::CSNtfActivityProgress* _internal_mutable_activityprogress();
  public:
  void unsafe_arena_set_allocated_activityprogress(
      ::msg::CSNtfActivityProgress* activityprogress);
  ::msg::CSNtfActivityProgress* unsafe_arena_release_activityprogress();

  // .msg.CSNtfRemoveActivity RemoveActivity = 46;
  bool has_removeactivity() const;
  private:
  bool _internal_has_removeactivity() const;
  public:
  void clear_removeactivity();
  const ::msg::CSNtfRemoveActivity& removeactivity() const;
  PROTOBUF_NODISCARD ::msg::CSNtfRemoveActivity* release_removeactivity();
  ::msg::CSNtfRemoveActivity* mutable_removeactivity();
  void set_allocated_removeactivity(::msg::CSNtfRemoveActivity* removeactivity);
  private:
  const ::msg::CSNtfRemoveActivity& _internal_removeactivity() const;
  ::msg::CSNtfRemoveActivity* _internal_mutable_removeactivity();
  public:
  void unsafe_arena_set_allocated_removeactivity(
      ::msg::CSNtfRemoveActivity* removeactivity);
  ::msg::CSNtfRemoveActivity* unsafe_arena_release_removeactivity();

  // .msg.CSNtfActivityConfig ActivityConfig = 47;
  bool has_activityconfig() const;
  private:
  bool _internal_has_activityconfig() const;
  public:
  void clear_activityconfig();
  const ::msg::CSNtfActivityConfig& activityconfig() const;
  PROTOBUF_NODISCARD ::msg::CSNtfActivityConfig* release_activityconfig();
  ::msg::CSNtfActivityConfig* mutable_activityconfig();
  void set_allocated_activityconfig(::msg::CSNtfActivityConfig* activityconfig);
  private:
  const ::msg::CSNtfActivityConfig& _internal_activityconfig() const;
  ::msg::CSNtfActivityConfig* _internal_mutable_activityconfig();
  public:
  void unsafe_arena_set_allocated_activityconfig(
      ::msg::CSNtfActivityConfig* activityconfig);
  ::msg::CSNtfActivityConfig* unsafe_arena_release_activityconfig();

  // .msg.CSNtfMeleeTaskProgress MeleeTaskProgress = 48;
  bool has_meleetaskprogress() const;
  private:
  bool _internal_has_meleetaskprogress() const;
  public:
  void clear_meleetaskprogress();
  const ::msg::CSNtfMeleeTaskProgress& meleetaskprogress() const;
  PROTOBUF_NODISCARD ::msg::CSNtfMeleeTaskProgress* release_meleetaskprogress();
  ::msg::CSNtfMeleeTaskProgress* mutable_meleetaskprogress();
  void set_allocated_meleetaskprogress(::msg::CSNtfMeleeTaskProgress* meleetaskprogress);
  private:
  const ::msg::CSNtfMeleeTaskProgress& _internal_meleetaskprogress() const;
  ::msg::CSNtfMeleeTaskProgress* _internal_mutable_meleetaskprogress();
  public:
  void unsafe_arena_set_allocated_meleetaskprogress(
      ::msg::CSNtfMeleeTaskProgress* meleetaskprogress);
  ::msg::CSNtfMeleeTaskProgress* unsafe_arena_release_meleetaskprogress();

  // .msg.CSNtfSetTeamMode SetTeamMode = 49;
  bool has_setteammode() const;
  private:
  bool _internal_has_setteammode() const;
  public:
  void clear_setteammode();
  const ::msg::CSNtfSetTeamMode& setteammode() const;
  PROTOBUF_NODISCARD ::msg::CSNtfSetTeamMode* release_setteammode();
  ::msg::CSNtfSetTeamMode* mutable_setteammode();
  void set_allocated_setteammode(::msg::CSNtfSetTeamMode* setteammode);
  private:
  const ::msg::CSNtfSetTeamMode& _internal_setteammode() const;
  ::msg::CSNtfSetTeamMode* _internal_mutable_setteammode();
  public:
  void unsafe_arena_set_allocated_setteammode(
      ::msg::CSNtfSetTeamMode* setteammode);
  ::msg::CSNtfSetTeamMode* unsafe_arena_release_setteammode();

  // .msg.CSNtfPassportOpen PassportOpen = 50;
  bool has_passportopen() const;
  private:
  bool _internal_has_passportopen() const;
  public:
  void clear_passportopen();
  const ::msg::CSNtfPassportOpen& passportopen() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPassportOpen* release_passportopen();
  ::msg::CSNtfPassportOpen* mutable_passportopen();
  void set_allocated_passportopen(::msg::CSNtfPassportOpen* passportopen);
  private:
  const ::msg::CSNtfPassportOpen& _internal_passportopen() const;
  ::msg::CSNtfPassportOpen* _internal_mutable_passportopen();
  public:
  void unsafe_arena_set_allocated_passportopen(
      ::msg::CSNtfPassportOpen* passportopen);
  ::msg::CSNtfPassportOpen* unsafe_arena_release_passportopen();

  // .msg.CSNtfPassportClose PassportClose = 51;
  bool has_passportclose() const;
  private:
  bool _internal_has_passportclose() const;
  public:
  void clear_passportclose();
  const ::msg::CSNtfPassportClose& passportclose() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPassportClose* release_passportclose();
  ::msg::CSNtfPassportClose* mutable_passportclose();
  void set_allocated_passportclose(::msg::CSNtfPassportClose* passportclose);
  private:
  const ::msg::CSNtfPassportClose& _internal_passportclose() const;
  ::msg::CSNtfPassportClose* _internal_mutable_passportclose();
  public:
  void unsafe_arena_set_allocated_passportclose(
      ::msg::CSNtfPassportClose* passportclose);
  ::msg::CSNtfPassportClose* unsafe_arena_release_passportclose();

  // .msg.CSNtfWeekIndex WeekIndex = 52;
  bool has_weekindex() const;
  private:
  bool _internal_has_weekindex() const;
  public:
  void clear_weekindex();
  const ::msg::CSNtfWeekIndex& weekindex() const;
  PROTOBUF_NODISCARD ::msg::CSNtfWeekIndex* release_weekindex();
  ::msg::CSNtfWeekIndex* mutable_weekindex();
  void set_allocated_weekindex(::msg::CSNtfWeekIndex* weekindex);
  private:
  const ::msg::CSNtfWeekIndex& _internal_weekindex() const;
  ::msg::CSNtfWeekIndex* _internal_mutable_weekindex();
  public:
  void unsafe_arena_set_allocated_weekindex(
      ::msg::CSNtfWeekIndex* weekindex);
  ::msg::CSNtfWeekIndex* unsafe_arena_release_weekindex();

  // .msg.CSNtfPvpHistory PvpHistory = 53;
  bool has_pvphistory() const;
  private:
  bool _internal_has_pvphistory() const;
  public:
  void clear_pvphistory();
  const ::msg::CSNtfPvpHistory& pvphistory() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPvpHistory* release_pvphistory();
  ::msg::CSNtfPvpHistory* mutable_pvphistory();
  void set_allocated_pvphistory(::msg::CSNtfPvpHistory* pvphistory);
  private:
  const ::msg::CSNtfPvpHistory& _internal_pvphistory() const;
  ::msg::CSNtfPvpHistory* _internal_mutable_pvphistory();
  public:
  void unsafe_arena_set_allocated_pvphistory(
      ::msg::CSNtfPvpHistory* pvphistory);
  ::msg::CSNtfPvpHistory* unsafe_arena_release_pvphistory();

  // .msg.CSNtfTeamPvpEnd TeamPvpEnd = 54;
  bool has_teampvpend() const;
  private:
  bool _internal_has_teampvpend() const;
  public:
  void clear_teampvpend();
  const ::msg::CSNtfTeamPvpEnd& teampvpend() const;
  PROTOBUF_NODISCARD ::msg::CSNtfTeamPvpEnd* release_teampvpend();
  ::msg::CSNtfTeamPvpEnd* mutable_teampvpend();
  void set_allocated_teampvpend(::msg::CSNtfTeamPvpEnd* teampvpend);
  private:
  const ::msg::CSNtfTeamPvpEnd& _internal_teampvpend() const;
  ::msg::CSNtfTeamPvpEnd* _internal_mutable_teampvpend();
  public:
  void unsafe_arena_set_allocated_teampvpend(
      ::msg::CSNtfTeamPvpEnd* teampvpend);
  ::msg::CSNtfTeamPvpEnd* unsafe_arena_release_teampvpend();

  // .msg.CSNtfProbeNetDelay ProbeNetDelay = 55;
  bool has_probenetdelay() const;
  private:
  bool _internal_has_probenetdelay() const;
  public:
  void clear_probenetdelay();
  const ::msg::CSNtfProbeNetDelay& probenetdelay() const;
  PROTOBUF_NODISCARD ::msg::CSNtfProbeNetDelay* release_probenetdelay();
  ::msg::CSNtfProbeNetDelay* mutable_probenetdelay();
  void set_allocated_probenetdelay(::msg::CSNtfProbeNetDelay* probenetdelay);
  private:
  const ::msg::CSNtfProbeNetDelay& _internal_probenetdelay() const;
  ::msg::CSNtfProbeNetDelay* _internal_mutable_probenetdelay();
  public:
  void unsafe_arena_set_allocated_probenetdelay(
      ::msg::CSNtfProbeNetDelay* probenetdelay);
  ::msg::CSNtfProbeNetDelay* unsafe_arena_release_probenetdelay();

  // .msg.CSNtfRefreshGoods RefreshGoods = 56;
  bool has_refreshgoods() const;
  private:
  bool _internal_has_refreshgoods() const;
  public:
  void clear_refreshgoods();
  const ::msg::CSNtfRefreshGoods& refreshgoods() const;
  PROTOBUF_NODISCARD ::msg::CSNtfRefreshGoods* release_refreshgoods();
  ::msg::CSNtfRefreshGoods* mutable_refreshgoods();
  void set_allocated_refreshgoods(::msg::CSNtfRefreshGoods* refreshgoods);
  private:
  const ::msg::CSNtfRefreshGoods& _internal_refreshgoods() const;
  ::msg::CSNtfRefreshGoods* _internal_mutable_refreshgoods();
  public:
  void unsafe_arena_set_allocated_refreshgoods(
      ::msg::CSNtfRefreshGoods* refreshgoods);
  ::msg::CSNtfRefreshGoods* unsafe_arena_release_refreshgoods();

  // .msg.CSNtfRemoveEggs RemoveEggs = 57;
  bool has_removeeggs() const;
  private:
  bool _internal_has_removeeggs() const;
  public:
  void clear_removeeggs();
  const ::msg::CSNtfRemoveEggs& removeeggs() const;
  PROTOBUF_NODISCARD ::msg::CSNtfRemoveEggs* release_removeeggs();
  ::msg::CSNtfRemoveEggs* mutable_removeeggs();
  void set_allocated_removeeggs(::msg::CSNtfRemoveEggs* removeeggs);
  private:
  const ::msg::CSNtfRemoveEggs& _internal_removeeggs() const;
  ::msg::CSNtfRemoveEggs* _internal_mutable_removeeggs();
  public:
  void unsafe_arena_set_allocated_removeeggs(
      ::msg::CSNtfRemoveEggs* removeeggs);
  ::msg::CSNtfRemoveEggs* unsafe_arena_release_removeeggs();

  // .msg.CSNtfSwitchSet SwitchSet = 58;
  bool has_switchset() const;
  private:
  bool _internal_has_switchset() const;
  public:
  void clear_switchset();
  const ::msg::CSNtfSwitchSet& switchset() const;
  PROTOBUF_NODISCARD ::msg::CSNtfSwitchSet* release_switchset();
  ::msg::CSNtfSwitchSet* mutable_switchset();
  void set_allocated_switchset(::msg::CSNtfSwitchSet* switchset);
  private:
  const ::msg::CSNtfSwitchSet& _internal_switchset() const;
  ::msg::CSNtfSwitchSet* _internal_mutable_switchset();
  public:
  void unsafe_arena_set_allocated_switchset(
      ::msg::CSNtfSwitchSet* switchset);
  ::msg::CSNtfSwitchSet* unsafe_arena_release_switchset();

  // .msg.CSNtfBlacklist Blacklist = 59;
  bool has_blacklist() const;
  private:
  bool _internal_has_blacklist() const;
  public:
  void clear_blacklist();
  const ::msg::CSNtfBlacklist& blacklist() const;
  PROTOBUF_NODISCARD ::msg::CSNtfBlacklist* release_blacklist();
  ::msg::CSNtfBlacklist* mutable_blacklist();
  void set_allocated_blacklist(::msg::CSNtfBlacklist* blacklist);
  private:
  const ::msg::CSNtfBlacklist& _internal_blacklist() const;
  ::msg::CSNtfBlacklist* _internal_mutable_blacklist();
  public:
  void unsafe_arena_set_allocated_blacklist(
      ::msg::CSNtfBlacklist* blacklist);
  ::msg::CSNtfBlacklist* unsafe_arena_release_blacklist();

  // .msg.CSNtfBindPhoneNumberSwitch BindPhoneNumberSwitch = 60;
  bool has_bindphonenumberswitch() const;
  private:
  bool _internal_has_bindphonenumberswitch() const;
  public:
  void clear_bindphonenumberswitch();
  const ::msg::CSNtfBindPhoneNumberSwitch& bindphonenumberswitch() const;
  PROTOBUF_NODISCARD ::msg::CSNtfBindPhoneNumberSwitch* release_bindphonenumberswitch();
  ::msg::CSNtfBindPhoneNumberSwitch* mutable_bindphonenumberswitch();
  void set_allocated_bindphonenumberswitch(::msg::CSNtfBindPhoneNumberSwitch* bindphonenumberswitch);
  private:
  const ::msg::CSNtfBindPhoneNumberSwitch& _internal_bindphonenumberswitch() const;
  ::msg::CSNtfBindPhoneNumberSwitch* _internal_mutable_bindphonenumberswitch();
  public:
  void unsafe_arena_set_allocated_bindphonenumberswitch(
      ::msg::CSNtfBindPhoneNumberSwitch* bindphonenumberswitch);
  ::msg::CSNtfBindPhoneNumberSwitch* unsafe_arena_release_bindphonenumberswitch();

  // .msg.CSNtfWorldInvite WorldInvite = 61;
  bool has_worldinvite() const;
  private:
  bool _internal_has_worldinvite() const;
  public:
  void clear_worldinvite();
  const ::msg::CSNtfWorldInvite& worldinvite() const;
  PROTOBUF_NODISCARD ::msg::CSNtfWorldInvite* release_worldinvite();
  ::msg::CSNtfWorldInvite* mutable_worldinvite();
  void set_allocated_worldinvite(::msg::CSNtfWorldInvite* worldinvite);
  private:
  const ::msg::CSNtfWorldInvite& _internal_worldinvite() const;
  ::msg::CSNtfWorldInvite* _internal_mutable_worldinvite();
  public:
  void unsafe_arena_set_allocated_worldinvite(
      ::msg::CSNtfWorldInvite* worldinvite);
  ::msg::CSNtfWorldInvite* unsafe_arena_release_worldinvite();

  // .msg.CSNtfMallNotice MallNotice = 62;
  bool has_mallnotice() const;
  private:
  bool _internal_has_mallnotice() const;
  public:
  void clear_mallnotice();
  const ::msg::CSNtfMallNotice& mallnotice() const;
  PROTOBUF_NODISCARD ::msg::CSNtfMallNotice* release_mallnotice();
  ::msg::CSNtfMallNotice* mutable_mallnotice();
  void set_allocated_mallnotice(::msg::CSNtfMallNotice* mallnotice);
  private:
  const ::msg::CSNtfMallNotice& _internal_mallnotice() const;
  ::msg::CSNtfMallNotice* _internal_mutable_mallnotice();
  public:
  void unsafe_arena_set_allocated_mallnotice(
      ::msg::CSNtfMallNotice* mallnotice);
  ::msg::CSNtfMallNotice* unsafe_arena_release_mallnotice();

  // .msg.CSNtfPrivilege Privilege = 63;
  bool has_privilege() const;
  private:
  bool _internal_has_privilege() const;
  public:
  void clear_privilege();
  const ::msg::CSNtfPrivilege& privilege() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPrivilege* release_privilege();
  ::msg::CSNtfPrivilege* mutable_privilege();
  void set_allocated_privilege(::msg::CSNtfPrivilege* privilege);
  private:
  const ::msg::CSNtfPrivilege& _internal_privilege() const;
  ::msg::CSNtfPrivilege* _internal_mutable_privilege();
  public:
  void unsafe_arena_set_allocated_privilege(
      ::msg::CSNtfPrivilege* privilege);
  ::msg::CSNtfPrivilege* unsafe_arena_release_privilege();

  // .msg.CSNtfAARemind AARemind = 64;
  bool has_aaremind() const;
  private:
  bool _internal_has_aaremind() const;
  public:
  void clear_aaremind();
  const ::msg::CSNtfAARemind& aaremind() const;
  PROTOBUF_NODISCARD ::msg::CSNtfAARemind* release_aaremind();
  ::msg::CSNtfAARemind* mutable_aaremind();
  void set_allocated_aaremind(::msg::CSNtfAARemind* aaremind);
  private:
  const ::msg::CSNtfAARemind& _internal_aaremind() const;
  ::msg::CSNtfAARemind* _internal_mutable_aaremind();
  public:
  void unsafe_arena_set_allocated_aaremind(
      ::msg::CSNtfAARemind* aaremind);
  ::msg::CSNtfAARemind* unsafe_arena_release_aaremind();

  // .msg.CSNtfAABan AABan = 65;
  bool has_aaban() const;
  private:
  bool _internal_has_aaban() const;
  public:
  void clear_aaban();
  const ::msg::CSNtfAABan& aaban() const;
  PROTOBUF_NODISCARD ::msg::CSNtfAABan* release_aaban();
  ::msg::CSNtfAABan* mutable_aaban();
  void set_allocated_aaban(::msg::CSNtfAABan* aaban);
  private:
  const ::msg::CSNtfAABan& _internal_aaban() const;
  ::msg::CSNtfAABan* _internal_mutable_aaban();
  public:
  void unsafe_arena_set_allocated_aaban(
      ::msg::CSNtfAABan* aaban);
  ::msg::CSNtfAABan* unsafe_arena_release_aaban();

  // .msg.CSNtfAAVerify AAVerify = 66;
  bool has_aaverify() const;
  private:
  bool _internal_has_aaverify() const;
  public:
  void clear_aaverify();
  const ::msg::CSNtfAAVerify& aaverify() const;
  PROTOBUF_NODISCARD ::msg::CSNtfAAVerify* release_aaverify();
  ::msg::CSNtfAAVerify* mutable_aaverify();
  void set_allocated_aaverify(::msg::CSNtfAAVerify* aaverify);
  private:
  const ::msg::CSNtfAAVerify& _internal_aaverify() const;
  ::msg::CSNtfAAVerify* _internal_mutable_aaverify();
  public:
  void unsafe_arena_set_allocated_aaverify(
      ::msg::CSNtfAAVerify* aaverify);
  ::msg::CSNtfAAVerify* unsafe_arena_release_aaverify();

  // .msg.CSNtfPhoneNumber PhoneNumber = 67;
  bool has_phonenumber() const;
  private:
  bool _internal_has_phonenumber() const;
  public:
  void clear_phonenumber();
  const ::msg::CSNtfPhoneNumber& phonenumber() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPhoneNumber* release_phonenumber();
  ::msg::CSNtfPhoneNumber* mutable_phonenumber();
  void set_allocated_phonenumber(::msg::CSNtfPhoneNumber* phonenumber);
  private:
  const ::msg::CSNtfPhoneNumber& _internal_phonenumber() const;
  ::msg::CSNtfPhoneNumber* _internal_mutable_phonenumber();
  public:
  void unsafe_arena_set_allocated_phonenumber(
      ::msg::CSNtfPhoneNumber* phonenumber);
  ::msg::CSNtfPhoneNumber* unsafe_arena_release_phonenumber();

  // .msg.CSNtfAntiCallBack AntiCallBack = 68;
  bool has_anticallback() const;
  private:
  bool _internal_has_anticallback() const;
  public:
  void clear_anticallback();
  const ::msg::CSNtfAntiCallBack& anticallback() const;
  PROTOBUF_NODISCARD ::msg::CSNtfAntiCallBack* release_anticallback();
  ::msg::CSNtfAntiCallBack* mutable_anticallback();
  void set_allocated_anticallback(::msg::CSNtfAntiCallBack* anticallback);
  private:
  const ::msg::CSNtfAntiCallBack& _internal_anticallback() const;
  ::msg::CSNtfAntiCallBack* _internal_mutable_anticallback();
  public:
  void unsafe_arena_set_allocated_anticallback(
      ::msg::CSNtfAntiCallBack* anticallback);
  ::msg::CSNtfAntiCallBack* unsafe_arena_release_anticallback();

  // .msg.CSNtfFortuneBagTime FortuneBagTime = 69;
  bool has_fortunebagtime() const;
  private:
  bool _internal_has_fortunebagtime() const;
  public:
  void clear_fortunebagtime();
  const ::msg::CSNtfFortuneBagTime& fortunebagtime() const;
  PROTOBUF_NODISCARD ::msg::CSNtfFortuneBagTime* release_fortunebagtime();
  ::msg::CSNtfFortuneBagTime* mutable_fortunebagtime();
  void set_allocated_fortunebagtime(::msg::CSNtfFortuneBagTime* fortunebagtime);
  private:
  const ::msg::CSNtfFortuneBagTime& _internal_fortunebagtime() const;
  ::msg::CSNtfFortuneBagTime* _internal_mutable_fortunebagtime();
  public:
  void unsafe_arena_set_allocated_fortunebagtime(
      ::msg::CSNtfFortuneBagTime* fortunebagtime);
  ::msg::CSNtfFortuneBagTime* unsafe_arena_release_fortunebagtime();

  // .msg.CSNtfUpdateItem UpdateItem = 70;
  bool has_updateitem() const;
  private:
  bool _internal_has_updateitem() const;
  public:
  void clear_updateitem();
  const ::msg::CSNtfUpdateItem& updateitem() const;
  PROTOBUF_NODISCARD ::msg::CSNtfUpdateItem* release_updateitem();
  ::msg::CSNtfUpdateItem* mutable_updateitem();
  void set_allocated_updateitem(::msg::CSNtfUpdateItem* updateitem);
  private:
  const ::msg::CSNtfUpdateItem& _internal_updateitem() const;
  ::msg::CSNtfUpdateItem* _internal_mutable_updateitem();
  public:
  void unsafe_arena_set_allocated_updateitem(
      ::msg::CSNtfUpdateItem* updateitem);
  ::msg::CSNtfUpdateItem* unsafe_arena_release_updateitem();

  // .msg.CSNtfCreditScore CreditScore = 71;
  bool has_creditscore() const;
  private:
  bool _internal_has_creditscore() const;
  public:
  void clear_creditscore();
  const ::msg::CSNtfCreditScore& creditscore() const;
  PROTOBUF_NODISCARD ::msg::CSNtfCreditScore* release_creditscore();
  ::msg::CSNtfCreditScore* mutable_creditscore();
  void set_allocated_creditscore(::msg::CSNtfCreditScore* creditscore);
  private:
  const ::msg::CSNtfCreditScore& _internal_creditscore() const;
  ::msg::CSNtfCreditScore* _internal_mutable_creditscore();
  public:
  void unsafe_arena_set_allocated_creditscore(
      ::msg::CSNtfCreditScore* creditscore);
  ::msg::CSNtfCreditScore* unsafe_arena_release_creditscore();

  // .msg.CSNtfBuffAct BuffAct = 72;
  bool has_buffact() const;
  private:
  bool _internal_has_buffact() const;
  public:
  void clear_buffact();
  const ::msg::CSNtfBuffAct& buffact() const;
  PROTOBUF_NODISCARD ::msg::CSNtfBuffAct* release_buffact();
  ::msg::CSNtfBuffAct* mutable_buffact();
  void set_allocated_buffact(::msg::CSNtfBuffAct* buffact);
  private:
  const ::msg::CSNtfBuffAct& _internal_buffact() const;
  ::msg::CSNtfBuffAct* _internal_mutable_buffact();
  public:
  void unsafe_arena_set_allocated_buffact(
      ::msg::CSNtfBuffAct* buffact);
  ::msg::CSNtfBuffAct* unsafe_arena_release_buffact();

  // .msg.CSNtfActivityGroup ActivityGroup = 73;
  bool has_activitygroup() const;
  private:
  bool _internal_has_activitygroup() const;
  public:
  void clear_activitygroup();
  const ::msg::CSNtfActivityGroup& activitygroup() const;
  PROTOBUF_NODISCARD ::msg::CSNtfActivityGroup* release_activitygroup();
  ::msg::CSNtfActivityGroup* mutable_activitygroup();
  void set_allocated_activitygroup(::msg::CSNtfActivityGroup* activitygroup);
  private:
  const ::msg::CSNtfActivityGroup& _internal_activitygroup() const;
  ::msg::CSNtfActivityGroup* _internal_mutable_activitygroup();
  public:
  void unsafe_arena_set_allocated_activitygroup(
      ::msg::CSNtfActivityGroup* activitygroup);
  ::msg::CSNtfActivityGroup* unsafe_arena_release_activitygroup();

  // .msg.CSNtfClearChat ClearChat = 74;
  bool has_clearchat() const;
  private:
  bool _internal_has_clearchat() const;
  public:
  void clear_clearchat();
  const ::msg::CSNtfClearChat& clearchat() const;
  PROTOBUF_NODISCARD ::msg::CSNtfClearChat* release_clearchat();
  ::msg::CSNtfClearChat* mutable_clearchat();
  void set_allocated_clearchat(::msg::CSNtfClearChat* clearchat);
  private:
  const ::msg::CSNtfClearChat& _internal_clearchat() const;
  ::msg::CSNtfClearChat* _internal_mutable_clearchat();
  public:
  void unsafe_arena_set_allocated_clearchat(
      ::msg::CSNtfClearChat* clearchat);
  ::msg::CSNtfClearChat* unsafe_arena_release_clearchat();

  // .msg.CSNtfForbidInfo ForbidInfo = 75;
  bool has_forbidinfo() const;
  private:
  bool _internal_has_forbidinfo() const;
  public:
  void clear_forbidinfo();
  const ::msg::CSNtfForbidInfo& forbidinfo() const;
  PROTOBUF_NODISCARD ::msg::CSNtfForbidInfo* release_forbidinfo();
  ::msg::CSNtfForbidInfo* mutable_forbidinfo();
  void set_allocated_forbidinfo(::msg::CSNtfForbidInfo* forbidinfo);
  private:
  const ::msg::CSNtfForbidInfo& _internal_forbidinfo() const;
  ::msg::CSNtfForbidInfo* _internal_mutable_forbidinfo();
  public:
  void unsafe_arena_set_allocated_forbidinfo(
      ::msg::CSNtfForbidInfo* forbidinfo);
  ::msg::CSNtfForbidInfo* unsafe_arena_release_forbidinfo();

  // .msg.CSNtfMidasDiamond MidasDiamond = 76;
  bool has_midasdiamond() const;
  private:
  bool _internal_has_midasdiamond() const;
  public:
  void clear_midasdiamond();
  const ::msg::CSNtfMidasDiamond& midasdiamond() const;
  PROTOBUF_NODISCARD ::msg::CSNtfMidasDiamond* release_midasdiamond();
  ::msg::CSNtfMidasDiamond* mutable_midasdiamond();
  void set_allocated_midasdiamond(::msg::CSNtfMidasDiamond* midasdiamond);
  private:
  const ::msg::CSNtfMidasDiamond& _internal_midasdiamond() const;
  ::msg::CSNtfMidasDiamond* _internal_mutable_midasdiamond();
  public:
  void unsafe_arena_set_allocated_midasdiamond(
      ::msg::CSNtfMidasDiamond* midasdiamond);
  ::msg::CSNtfMidasDiamond* unsafe_arena_release_midasdiamond();

  // .msg.CSNtfJoinVoiceTeam JoinVoiceTeam = 77;
  bool has_joinvoiceteam() const;
  private:
  bool _internal_has_joinvoiceteam() const;
  public:
  void clear_joinvoiceteam();
  const ::msg::CSNtfJoinVoiceTeam& joinvoiceteam() const;
  PROTOBUF_NODISCARD ::msg::CSNtfJoinVoiceTeam* release_joinvoiceteam();
  ::msg::CSNtfJoinVoiceTeam* mutable_joinvoiceteam();
  void set_allocated_joinvoiceteam(::msg::CSNtfJoinVoiceTeam* joinvoiceteam);
  private:
  const ::msg::CSNtfJoinVoiceTeam& _internal_joinvoiceteam() const;
  ::msg::CSNtfJoinVoiceTeam* _internal_mutable_joinvoiceteam();
  public:
  void unsafe_arena_set_allocated_joinvoiceteam(
      ::msg::CSNtfJoinVoiceTeam* joinvoiceteam);
  ::msg::CSNtfJoinVoiceTeam* unsafe_arena_release_joinvoiceteam();

  // .msg.CSNtfJoinVoicePvp JoinVoicePvp = 78;
  bool has_joinvoicepvp() const;
  private:
  bool _internal_has_joinvoicepvp() const;
  public:
  void clear_joinvoicepvp();
  const ::msg::CSNtfJoinVoicePvp& joinvoicepvp() const;
  PROTOBUF_NODISCARD ::msg::CSNtfJoinVoicePvp* release_joinvoicepvp();
  ::msg::CSNtfJoinVoicePvp* mutable_joinvoicepvp();
  void set_allocated_joinvoicepvp(::msg::CSNtfJoinVoicePvp* joinvoicepvp);
  private:
  const ::msg::CSNtfJoinVoicePvp& _internal_joinvoicepvp() const;
  ::msg::CSNtfJoinVoicePvp* _internal_mutable_joinvoicepvp();
  public:
  void unsafe_arena_set_allocated_joinvoicepvp(
      ::msg::CSNtfJoinVoicePvp* joinvoicepvp);
  ::msg::CSNtfJoinVoicePvp* unsafe_arena_release_joinvoicepvp();

  // .msg.CSNtfJoinVoiceCamp JoinVoiceCamp = 79;
  bool has_joinvoicecamp() const;
  private:
  bool _internal_has_joinvoicecamp() const;
  public:
  void clear_joinvoicecamp();
  const ::msg::CSNtfJoinVoiceCamp& joinvoicecamp() const;
  PROTOBUF_NODISCARD ::msg::CSNtfJoinVoiceCamp* release_joinvoicecamp();
  ::msg::CSNtfJoinVoiceCamp* mutable_joinvoicecamp();
  void set_allocated_joinvoicecamp(::msg::CSNtfJoinVoiceCamp* joinvoicecamp);
  private:
  const ::msg::CSNtfJoinVoiceCamp& _internal_joinvoicecamp() const;
  ::msg::CSNtfJoinVoiceCamp* _internal_mutable_joinvoicecamp();
  public:
  void unsafe_arena_set_allocated_joinvoicecamp(
      ::msg::CSNtfJoinVoiceCamp* joinvoicecamp);
  ::msg::CSNtfJoinVoiceCamp* unsafe_arena_release_joinvoicecamp();

  // .msg.CSNtfWxVVip WxVVip = 80;
  bool has_wxvvip() const;
  private:
  bool _internal_has_wxvvip() const;
  public:
  void clear_wxvvip();
  const ::msg::CSNtfWxVVip& wxvvip() const;
  PROTOBUF_NODISCARD ::msg::CSNtfWxVVip* release_wxvvip();
  ::msg::CSNtfWxVVip* mutable_wxvvip();
  void set_allocated_wxvvip(::msg::CSNtfWxVVip* wxvvip);
  private:
  const ::msg::CSNtfWxVVip& _internal_wxvvip() const;
  ::msg::CSNtfWxVVip* _internal_mutable_wxvvip();
  public:
  void unsafe_arena_set_allocated_wxvvip(
      ::msg::CSNtfWxVVip* wxvvip);
  ::msg::CSNtfWxVVip* unsafe_arena_release_wxvvip();

  // .msg.CSNtfFreeFlow FreeFlow = 81;
  bool has_freeflow() const;
  private:
  bool _internal_has_freeflow() const;
  public:
  void clear_freeflow();
  const ::msg::CSNtfFreeFlow& freeflow() const;
  PROTOBUF_NODISCARD ::msg::CSNtfFreeFlow* release_freeflow();
  ::msg::CSNtfFreeFlow* mutable_freeflow();
  void set_allocated_freeflow(::msg::CSNtfFreeFlow* freeflow);
  private:
  const ::msg::CSNtfFreeFlow& _internal_freeflow() const;
  ::msg::CSNtfFreeFlow* _internal_mutable_freeflow();
  public:
  void unsafe_arena_set_allocated_freeflow(
      ::msg::CSNtfFreeFlow* freeflow);
  ::msg::CSNtfFreeFlow* unsafe_arena_release_freeflow();

  // .msg.CSNtfObserveStatus ObserveStatus = 82;
  bool has_observestatus() const;
  private:
  bool _internal_has_observestatus() const;
  public:
  void clear_observestatus();
  const ::msg::CSNtfObserveStatus& observestatus() const;
  PROTOBUF_NODISCARD ::msg::CSNtfObserveStatus* release_observestatus();
  ::msg::CSNtfObserveStatus* mutable_observestatus();
  void set_allocated_observestatus(::msg::CSNtfObserveStatus* observestatus);
  private:
  const ::msg::CSNtfObserveStatus& _internal_observestatus() const;
  ::msg::CSNtfObserveStatus* _internal_mutable_observestatus();
  public:
  void unsafe_arena_set_allocated_observestatus(
      ::msg::CSNtfObserveStatus* observestatus);
  ::msg::CSNtfObserveStatus* unsafe_arena_release_observestatus();

  // .msg.CSNtfGameMarquee GameMarquee = 83;
  bool has_gamemarquee() const;
  private:
  bool _internal_has_gamemarquee() const;
  public:
  void clear_gamemarquee();
  const ::msg::CSNtfGameMarquee& gamemarquee() const;
  PROTOBUF_NODISCARD ::msg::CSNtfGameMarquee* release_gamemarquee();
  ::msg::CSNtfGameMarquee* mutable_gamemarquee();
  void set_allocated_gamemarquee(::msg::CSNtfGameMarquee* gamemarquee);
  private:
  const ::msg::CSNtfGameMarquee& _internal_gamemarquee() const;
  ::msg::CSNtfGameMarquee* _internal_mutable_gamemarquee();
  public:
  void unsafe_arena_set_allocated_gamemarquee(
      ::msg::CSNtfGameMarquee* gamemarquee);
  ::msg::CSNtfGameMarquee* unsafe_arena_release_gamemarquee();

  // .msg.CSNtfWxRedPacket WxRedPacket = 84;
  bool has_wxredpacket() const;
  private:
  bool _internal_has_wxredpacket() const;
  public:
  void clear_wxredpacket();
  const ::msg::CSNtfWxRedPacket& wxredpacket() const;
  PROTOBUF_NODISCARD ::msg::CSNtfWxRedPacket* release_wxredpacket();
  ::msg::CSNtfWxRedPacket* mutable_wxredpacket();
  void set_allocated_wxredpacket(::msg::CSNtfWxRedPacket* wxredpacket);
  private:
  const ::msg::CSNtfWxRedPacket& _internal_wxredpacket() const;
  ::msg::CSNtfWxRedPacket* _internal_mutable_wxredpacket();
  public:
  void unsafe_arena_set_allocated_wxredpacket(
      ::msg::CSNtfWxRedPacket* wxredpacket);
  ::msg::CSNtfWxRedPacket* unsafe_arena_release_wxredpacket();

  // .msg.CSNtfGmSysMsg GmSysMsg = 85;
  bool has_gmsysmsg() const;
  private:
  bool _internal_has_gmsysmsg() const;
  public:
  void clear_gmsysmsg();
  const ::msg::CSNtfGmSysMsg& gmsysmsg() const;
  PROTOBUF_NODISCARD ::msg::CSNtfGmSysMsg* release_gmsysmsg();
  ::msg::CSNtfGmSysMsg* mutable_gmsysmsg();
  void set_allocated_gmsysmsg(::msg::CSNtfGmSysMsg* gmsysmsg);
  private:
  const ::msg::CSNtfGmSysMsg& _internal_gmsysmsg() const;
  ::msg::CSNtfGmSysMsg* _internal_mutable_gmsysmsg();
  public:
  void unsafe_arena_set_allocated_gmsysmsg(
      ::msg::CSNtfGmSysMsg* gmsysmsg);
  ::msg::CSNtfGmSysMsg* unsafe_arena_release_gmsysmsg();

  // .msg.CSNtfNewPunishment NewPunishment = 86;
  bool has_newpunishment() const;
  private:
  bool _internal_has_newpunishment() const;
  public:
  void clear_newpunishment();
  const ::msg::CSNtfNewPunishment& newpunishment() const;
  PROTOBUF_NODISCARD ::msg::CSNtfNewPunishment* release_newpunishment();
  ::msg::CSNtfNewPunishment* mutable_newpunishment();
  void set_allocated_newpunishment(::msg::CSNtfNewPunishment* newpunishment);
  private:
  const ::msg::CSNtfNewPunishment& _internal_newpunishment() const;
  ::msg::CSNtfNewPunishment* _internal_mutable_newpunishment();
  public:
  void unsafe_arena_set_allocated_newpunishment(
      ::msg::CSNtfNewPunishment* newpunishment);
  ::msg::CSNtfNewPunishment* unsafe_arena_release_newpunishment();

  // .msg.CSNtfTeamSlot TeamSlot = 87;
  bool has_teamslot() const;
  private:
  bool _internal_has_teamslot() const;
  public:
  void clear_teamslot();
  const ::msg::CSNtfTeamSlot& teamslot() const;
  PROTOBUF_NODISCARD ::msg::CSNtfTeamSlot* release_teamslot();
  ::msg::CSNtfTeamSlot* mutable_teamslot();
  void set_allocated_teamslot(::msg::CSNtfTeamSlot* teamslot);
  private:
  const ::msg::CSNtfTeamSlot& _internal_teamslot() const;
  ::msg::CSNtfTeamSlot* _internal_mutable_teamslot();
  public:
  void unsafe_arena_set_allocated_teamslot(
      ::msg::CSNtfTeamSlot* teamslot);
  ::msg::CSNtfTeamSlot* unsafe_arena_release_teamslot();

  // .msg.CSNtfTeamSubMode TeamSubMode = 88;
  bool has_teamsubmode() const;
  private:
  bool _internal_has_teamsubmode() const;
  public:
  void clear_teamsubmode();
  const ::msg::CSNtfTeamSubMode& teamsubmode() const;
  PROTOBUF_NODISCARD ::msg::CSNtfTeamSubMode* release_teamsubmode();
  ::msg::CSNtfTeamSubMode* mutable_teamsubmode();
  void set_allocated_teamsubmode(::msg::CSNtfTeamSubMode* teamsubmode);
  private:
  const ::msg::CSNtfTeamSubMode& _internal_teamsubmode() const;
  ::msg::CSNtfTeamSubMode* _internal_mutable_teamsubmode();
  public:
  void unsafe_arena_set_allocated_teamsubmode(
      ::msg::CSNtfTeamSubMode* teamsubmode);
  ::msg::CSNtfTeamSubMode* unsafe_arena_release_teamsubmode();

  // .msg.CSNtfTeamSlotStatus TeamSlotStatus = 89;
  bool has_teamslotstatus() const;
  private:
  bool _internal_has_teamslotstatus() const;
  public:
  void clear_teamslotstatus();
  const ::msg::CSNtfTeamSlotStatus& teamslotstatus() const;
  PROTOBUF_NODISCARD ::msg::CSNtfTeamSlotStatus* release_teamslotstatus();
  ::msg::CSNtfTeamSlotStatus* mutable_teamslotstatus();
  void set_allocated_teamslotstatus(::msg::CSNtfTeamSlotStatus* teamslotstatus);
  private:
  const ::msg::CSNtfTeamSlotStatus& _internal_teamslotstatus() const;
  ::msg::CSNtfTeamSlotStatus* _internal_mutable_teamslotstatus();
  public:
  void unsafe_arena_set_allocated_teamslotstatus(
      ::msg::CSNtfTeamSlotStatus* teamslotstatus);
  ::msg::CSNtfTeamSlotStatus* unsafe_arena_release_teamslotstatus();

  // .msg.CSNtfPunishmentInfo PunishmentInfo = 90;
  bool has_punishmentinfo() const;
  private:
  bool _internal_has_punishmentinfo() const;
  public:
  void clear_punishmentinfo();
  const ::msg::CSNtfPunishmentInfo& punishmentinfo() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPunishmentInfo* release_punishmentinfo();
  ::msg::CSNtfPunishmentInfo* mutable_punishmentinfo();
  void set_allocated_punishmentinfo(::msg::CSNtfPunishmentInfo* punishmentinfo);
  private:
  const ::msg::CSNtfPunishmentInfo& _internal_punishmentinfo() const;
  ::msg::CSNtfPunishmentInfo* _internal_mutable_punishmentinfo();
  public:
  void unsafe_arena_set_allocated_punishmentinfo(
      ::msg::CSNtfPunishmentInfo* punishmentinfo);
  ::msg::CSNtfPunishmentInfo* unsafe_arena_release_punishmentinfo();

  // .msg.CSNtfRemovePunishment RemovePunishment = 91;
  bool has_removepunishment() const;
  private:
  bool _internal_has_removepunishment() const;
  public:
  void clear_removepunishment();
  const ::msg::CSNtfRemovePunishment& removepunishment() const;
  PROTOBUF_NODISCARD ::msg::CSNtfRemovePunishment* release_removepunishment();
  ::msg::CSNtfRemovePunishment* mutable_removepunishment();
  void set_allocated_removepunishment(::msg::CSNtfRemovePunishment* removepunishment);
  private:
  const ::msg::CSNtfRemovePunishment& _internal_removepunishment() const;
  ::msg::CSNtfRemovePunishment* _internal_mutable_removepunishment();
  public:
  void unsafe_arena_set_allocated_removepunishment(
      ::msg::CSNtfRemovePunishment* removepunishment);
  ::msg::CSNtfRemovePunishment* unsafe_arena_release_removepunishment();

  // .msg.CSNtfPvpConfirm PvpConfirm = 92;
  bool has_pvpconfirm() const;
  private:
  bool _internal_has_pvpconfirm() const;
  public:
  void clear_pvpconfirm();
  const ::msg::CSNtfPvpConfirm& pvpconfirm() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPvpConfirm* release_pvpconfirm();
  ::msg::CSNtfPvpConfirm* mutable_pvpconfirm();
  void set_allocated_pvpconfirm(::msg::CSNtfPvpConfirm* pvpconfirm);
  private:
  const ::msg::CSNtfPvpConfirm& _internal_pvpconfirm() const;
  ::msg::CSNtfPvpConfirm* _internal_mutable_pvpconfirm();
  public:
  void unsafe_arena_set_allocated_pvpconfirm(
      ::msg::CSNtfPvpConfirm* pvpconfirm);
  ::msg::CSNtfPvpConfirm* unsafe_arena_release_pvpconfirm();

  // .msg.CSNtfMatchSuccess MatchSuccess = 93;
  bool has_matchsuccess() const;
  private:
  bool _internal_has_matchsuccess() const;
  public:
  void clear_matchsuccess();
  const ::msg::CSNtfMatchSuccess& matchsuccess() const;
  PROTOBUF_NODISCARD ::msg::CSNtfMatchSuccess* release_matchsuccess();
  ::msg::CSNtfMatchSuccess* mutable_matchsuccess();
  void set_allocated_matchsuccess(::msg::CSNtfMatchSuccess* matchsuccess);
  private:
  const ::msg::CSNtfMatchSuccess& _internal_matchsuccess() const;
  ::msg::CSNtfMatchSuccess* _internal_mutable_matchsuccess();
  public:
  void unsafe_arena_set_allocated_matchsuccess(
      ::msg::CSNtfMatchSuccess* matchsuccess);
  ::msg::CSNtfMatchSuccess* unsafe_arena_release_matchsuccess();

  // .msg.CSNtfOldBusinessPlayer OldBusinessPlayer = 94;
  bool has_oldbusinessplayer() const;
  private:
  bool _internal_has_oldbusinessplayer() const;
  public:
  void clear_oldbusinessplayer();
  const ::msg::CSNtfOldBusinessPlayer& oldbusinessplayer() const;
  PROTOBUF_NODISCARD ::msg::CSNtfOldBusinessPlayer* release_oldbusinessplayer();
  ::msg::CSNtfOldBusinessPlayer* mutable_oldbusinessplayer();
  void set_allocated_oldbusinessplayer(::msg::CSNtfOldBusinessPlayer* oldbusinessplayer);
  private:
  const ::msg::CSNtfOldBusinessPlayer& _internal_oldbusinessplayer() const;
  ::msg::CSNtfOldBusinessPlayer* _internal_mutable_oldbusinessplayer();
  public:
  void unsafe_arena_set_allocated_oldbusinessplayer(
      ::msg::CSNtfOldBusinessPlayer* oldbusinessplayer);
  ::msg::CSNtfOldBusinessPlayer* unsafe_arena_release_oldbusinessplayer();

  // .msg.CSNtfChangeTeamSlot ChangeTeamSlot = 95;
  bool has_changeteamslot() const;
  private:
  bool _internal_has_changeteamslot() const;
  public:
  void clear_changeteamslot();
  const ::msg::CSNtfChangeTeamSlot& changeteamslot() const;
  PROTOBUF_NODISCARD ::msg::CSNtfChangeTeamSlot* release_changeteamslot();
  ::msg::CSNtfChangeTeamSlot* mutable_changeteamslot();
  void set_allocated_changeteamslot(::msg::CSNtfChangeTeamSlot* changeteamslot);
  private:
  const ::msg::CSNtfChangeTeamSlot& _internal_changeteamslot() const;
  ::msg::CSNtfChangeTeamSlot* _internal_mutable_changeteamslot();
  public:
  void unsafe_arena_set_allocated_changeteamslot(
      ::msg::CSNtfChangeTeamSlot* changeteamslot);
  ::msg::CSNtfChangeTeamSlot* unsafe_arena_release_changeteamslot();

  // .msg.CSNtfRefuseChangeTeamSlot RefuseChangeTeamSlot = 96;
  bool has_refusechangeteamslot() const;
  private:
  bool _internal_has_refusechangeteamslot() const;
  public:
  void clear_refusechangeteamslot();
  const ::msg::CSNtfRefuseChangeTeamSlot& refusechangeteamslot() const;
  PROTOBUF_NODISCARD ::msg::CSNtfRefuseChangeTeamSlot* release_refusechangeteamslot();
  ::msg::CSNtfRefuseChangeTeamSlot* mutable_refusechangeteamslot();
  void set_allocated_refusechangeteamslot(::msg::CSNtfRefuseChangeTeamSlot* refusechangeteamslot);
  private:
  const ::msg::CSNtfRefuseChangeTeamSlot& _internal_refusechangeteamslot() const;
  ::msg::CSNtfRefuseChangeTeamSlot* _internal_mutable_refusechangeteamslot();
  public:
  void unsafe_arena_set_allocated_refusechangeteamslot(
      ::msg::CSNtfRefuseChangeTeamSlot* refusechangeteamslot);
  ::msg::CSNtfRefuseChangeTeamSlot* unsafe_arena_release_refusechangeteamslot();

  // .msg.CSNtfCancelChangeSlot CancelChangeSlot = 97;
  bool has_cancelchangeslot() const;
  private:
  bool _internal_has_cancelchangeslot() const;
  public:
  void clear_cancelchangeslot();
  const ::msg::CSNtfCancelChangeSlot& cancelchangeslot() const;
  PROTOBUF_NODISCARD ::msg::CSNtfCancelChangeSlot* release_cancelchangeslot();
  ::msg::CSNtfCancelChangeSlot* mutable_cancelchangeslot();
  void set_allocated_cancelchangeslot(::msg::CSNtfCancelChangeSlot* cancelchangeslot);
  private:
  const ::msg::CSNtfCancelChangeSlot& _internal_cancelchangeslot() const;
  ::msg::CSNtfCancelChangeSlot* _internal_mutable_cancelchangeslot();
  public:
  void unsafe_arena_set_allocated_cancelchangeslot(
      ::msg::CSNtfCancelChangeSlot* cancelchangeslot);
  ::msg::CSNtfCancelChangeSlot* unsafe_arena_release_cancelchangeslot();

  // .msg.CSNtfShowChessSkin ShowChessSkin = 98;
  bool has_showchessskin() const;
  private:
  bool _internal_has_showchessskin() const;
  public:
  void clear_showchessskin();
  const ::msg::CSNtfShowChessSkin& showchessskin() const;
  PROTOBUF_NODISCARD ::msg::CSNtfShowChessSkin* release_showchessskin();
  ::msg::CSNtfShowChessSkin* mutable_showchessskin();
  void set_allocated_showchessskin(::msg::CSNtfShowChessSkin* showchessskin);
  private:
  const ::msg::CSNtfShowChessSkin& _internal_showchessskin() const;
  ::msg::CSNtfShowChessSkin* _internal_mutable_showchessskin();
  public:
  void unsafe_arena_set_allocated_showchessskin(
      ::msg::CSNtfShowChessSkin* showchessskin);
  ::msg::CSNtfShowChessSkin* unsafe_arena_release_showchessskin();

  // .msg.CSNtfOnHelpReddot OnHelpReddot = 99;
  bool has_onhelpreddot() const;
  private:
  bool _internal_has_onhelpreddot() const;
  public:
  void clear_onhelpreddot();
  const ::msg::CSNtfOnHelpReddot& onhelpreddot() const;
  PROTOBUF_NODISCARD ::msg::CSNtfOnHelpReddot* release_onhelpreddot();
  ::msg::CSNtfOnHelpReddot* mutable_onhelpreddot();
  void set_allocated_onhelpreddot(::msg::CSNtfOnHelpReddot* onhelpreddot);
  private:
  const ::msg::CSNtfOnHelpReddot& _internal_onhelpreddot() const;
  ::msg::CSNtfOnHelpReddot* _internal_mutable_onhelpreddot();
  public:
  void unsafe_arena_set_allocated_onhelpreddot(
      ::msg::CSNtfOnHelpReddot* onhelpreddot);
  ::msg::CSNtfOnHelpReddot* unsafe_arena_release_onhelpreddot();

  // .msg.CSNtfBagUpdate BagUpdate = 100;
  bool has_bagupdate() const;
  private:
  bool _internal_has_bagupdate() const;
  public:
  void clear_bagupdate();
  const ::msg::CSNtfBagUpdate& bagupdate() const;
  PROTOBUF_NODISCARD ::msg::CSNtfBagUpdate* release_bagupdate();
  ::msg::CSNtfBagUpdate* mutable_bagupdate();
  void set_allocated_bagupdate(::msg::CSNtfBagUpdate* bagupdate);
  private:
  const ::msg::CSNtfBagUpdate& _internal_bagupdate() const;
  ::msg::CSNtfBagUpdate* _internal_mutable_bagupdate();
  public:
  void unsafe_arena_set_allocated_bagupdate(
      ::msg::CSNtfBagUpdate* bagupdate);
  ::msg::CSNtfBagUpdate* unsafe_arena_release_bagupdate();

  // .msg.CSNtfRefreshMelee RefreshMelee = 101;
  bool has_refreshmelee() const;
  private:
  bool _internal_has_refreshmelee() const;
  public:
  void clear_refreshmelee();
  const ::msg::CSNtfRefreshMelee& refreshmelee() const;
  PROTOBUF_NODISCARD ::msg::CSNtfRefreshMelee* release_refreshmelee();
  ::msg::CSNtfRefreshMelee* mutable_refreshmelee();
  void set_allocated_refreshmelee(::msg::CSNtfRefreshMelee* refreshmelee);
  private:
  const ::msg::CSNtfRefreshMelee& _internal_refreshmelee() const;
  ::msg::CSNtfRefreshMelee* _internal_mutable_refreshmelee();
  public:
  void unsafe_arena_set_allocated_refreshmelee(
      ::msg::CSNtfRefreshMelee* refreshmelee);
  ::msg::CSNtfRefreshMelee* unsafe_arena_release_refreshmelee();

  // .msg.CSNtfWebLogin WebLogin = 102;
  bool has_weblogin() const;
  private:
  bool _internal_has_weblogin() const;
  public:
  void clear_weblogin();
  const ::msg::CSNtfWebLogin& weblogin() const;
  PROTOBUF_NODISCARD ::msg::CSNtfWebLogin* release_weblogin();
  ::msg::CSNtfWebLogin* mutable_weblogin();
  void set_allocated_weblogin(::msg::CSNtfWebLogin* weblogin);
  private:
  const ::msg::CSNtfWebLogin& _internal_weblogin() const;
  ::msg::CSNtfWebLogin* _internal_mutable_weblogin();
  public:
  void unsafe_arena_set_allocated_weblogin(
      ::msg::CSNtfWebLogin* weblogin);
  ::msg::CSNtfWebLogin* unsafe_arena_release_weblogin();

  // .msg.CSNtfCurrentTournament CurrentTournament = 103;
  bool has_currenttournament() const;
  private:
  bool _internal_has_currenttournament() const;
  public:
  void clear_currenttournament();
  const ::msg::CSNtfCurrentTournament& currenttournament() const;
  PROTOBUF_NODISCARD ::msg::CSNtfCurrentTournament* release_currenttournament();
  ::msg::CSNtfCurrentTournament* mutable_currenttournament();
  void set_allocated_currenttournament(::msg::CSNtfCurrentTournament* currenttournament);
  private:
  const ::msg::CSNtfCurrentTournament& _internal_currenttournament() const;
  ::msg::CSNtfCurrentTournament* _internal_mutable_currenttournament();
  public:
  void unsafe_arena_set_allocated_currenttournament(
      ::msg::CSNtfCurrentTournament* currenttournament);
  ::msg::CSNtfCurrentTournament* unsafe_arena_release_currenttournament();

  // .msg.CSNtfTournamentBegin TournamentBegin = 104;
  bool has_tournamentbegin() const;
  private:
  bool _internal_has_tournamentbegin() const;
  public:
  void clear_tournamentbegin();
  const ::msg::CSNtfTournamentBegin& tournamentbegin() const;
  PROTOBUF_NODISCARD ::msg::CSNtfTournamentBegin* release_tournamentbegin();
  ::msg::CSNtfTournamentBegin* mutable_tournamentbegin();
  void set_allocated_tournamentbegin(::msg::CSNtfTournamentBegin* tournamentbegin);
  private:
  const ::msg::CSNtfTournamentBegin& _internal_tournamentbegin() const;
  ::msg::CSNtfTournamentBegin* _internal_mutable_tournamentbegin();
  public:
  void unsafe_arena_set_allocated_tournamentbegin(
      ::msg::CSNtfTournamentBegin* tournamentbegin);
  ::msg::CSNtfTournamentBegin* unsafe_arena_release_tournamentbegin();

  // .msg.CSNtfTournamentEnrollBegin TournamentEnrollBegin = 105;
  bool has_tournamentenrollbegin() const;
  private:
  bool _internal_has_tournamentenrollbegin() const;
  public:
  void clear_tournamentenrollbegin();
  const ::msg::CSNtfTournamentEnrollBegin& tournamentenrollbegin() const;
  PROTOBUF_NODISCARD ::msg::CSNtfTournamentEnrollBegin* release_tournamentenrollbegin();
  ::msg::CSNtfTournamentEnrollBegin* mutable_tournamentenrollbegin();
  void set_allocated_tournamentenrollbegin(::msg::CSNtfTournamentEnrollBegin* tournamentenrollbegin);
  private:
  const ::msg::CSNtfTournamentEnrollBegin& _internal_tournamentenrollbegin() const;
  ::msg::CSNtfTournamentEnrollBegin* _internal_mutable_tournamentenrollbegin();
  public:
  void unsafe_arena_set_allocated_tournamentenrollbegin(
      ::msg::CSNtfTournamentEnrollBegin* tournamentenrollbegin);
  ::msg::CSNtfTournamentEnrollBegin* unsafe_arena_release_tournamentenrollbegin();

  // .msg.CSNtfTournamentEnrollEnd TournamentEnrollEnd = 106;
  bool has_tournamentenrollend() const;
  private:
  bool _internal_has_tournamentenrollend() const;
  public:
  void clear_tournamentenrollend();
  const ::msg::CSNtfTournamentEnrollEnd& tournamentenrollend() const;
  PROTOBUF_NODISCARD ::msg::CSNtfTournamentEnrollEnd* release_tournamentenrollend();
  ::msg::CSNtfTournamentEnrollEnd* mutable_tournamentenrollend();
  void set_allocated_tournamentenrollend(::msg::CSNtfTournamentEnrollEnd* tournamentenrollend);
  private:
  const ::msg::CSNtfTournamentEnrollEnd& _internal_tournamentenrollend() const;
  ::msg::CSNtfTournamentEnrollEnd* _internal_mutable_tournamentenrollend();
  public:
  void unsafe_arena_set_allocated_tournamentenrollend(
      ::msg::CSNtfTournamentEnrollEnd* tournamentenrollend);
  ::msg::CSNtfTournamentEnrollEnd* unsafe_arena_release_tournamentenrollend();

  // .msg.CSNtfJoinTournamentRoom JoinTournamentRoom = 107;
  bool has_jointournamentroom() const;
  private:
  bool _internal_has_jointournamentroom() const;
  public:
  void clear_jointournamentroom();
  const ::msg::CSNtfJoinTournamentRoom& jointournamentroom() const;
  PROTOBUF_NODISCARD ::msg::CSNtfJoinTournamentRoom* release_jointournamentroom();
  ::msg::CSNtfJoinTournamentRoom* mutable_jointournamentroom();
  void set_allocated_jointournamentroom(::msg::CSNtfJoinTournamentRoom* jointournamentroom);
  private:
  const ::msg::CSNtfJoinTournamentRoom& _internal_jointournamentroom() const;
  ::msg::CSNtfJoinTournamentRoom* _internal_mutable_jointournamentroom();
  public:
  void unsafe_arena_set_allocated_jointournamentroom(
      ::msg::CSNtfJoinTournamentRoom* jointournamentroom);
  ::msg::CSNtfJoinTournamentRoom* unsafe_arena_release_jointournamentroom();

  // .msg.CSNtfTournamentEnd TournamentEnd = 108;
  bool has_tournamentend() const;
  private:
  bool _internal_has_tournamentend() const;
  public:
  void clear_tournamentend();
  const ::msg::CSNtfTournamentEnd& tournamentend() const;
  PROTOBUF_NODISCARD ::msg::CSNtfTournamentEnd* release_tournamentend();
  ::msg::CSNtfTournamentEnd* mutable_tournamentend();
  void set_allocated_tournamentend(::msg::CSNtfTournamentEnd* tournamentend);
  private:
  const ::msg::CSNtfTournamentEnd& _internal_tournamentend() const;
  ::msg::CSNtfTournamentEnd* _internal_mutable_tournamentend();
  public:
  void unsafe_arena_set_allocated_tournamentend(
      ::msg::CSNtfTournamentEnd* tournamentend);
  ::msg::CSNtfTournamentEnd* unsafe_arena_release_tournamentend();

  // .msg.CSNtfTournamentOut TournamentOut = 109;
  bool has_tournamentout() const;
  private:
  bool _internal_has_tournamentout() const;
  public:
  void clear_tournamentout();
  const ::msg::CSNtfTournamentOut& tournamentout() const;
  PROTOBUF_NODISCARD ::msg::CSNtfTournamentOut* release_tournamentout();
  ::msg::CSNtfTournamentOut* mutable_tournamentout();
  void set_allocated_tournamentout(::msg::CSNtfTournamentOut* tournamentout);
  private:
  const ::msg::CSNtfTournamentOut& _internal_tournamentout() const;
  ::msg::CSNtfTournamentOut* _internal_mutable_tournamentout();
  public:
  void unsafe_arena_set_allocated_tournamentout(
      ::msg::CSNtfTournamentOut* tournamentout);
  ::msg::CSNtfTournamentOut* unsafe_arena_release_tournamentout();

  // .msg.CSNtfTournamentRoundEnd TournamentRoundEnd = 110;
  bool has_tournamentroundend() const;
  private:
  bool _internal_has_tournamentroundend() const;
  public:
  void clear_tournamentroundend();
  const ::msg::CSNtfTournamentRoundEnd& tournamentroundend() const;
  PROTOBUF_NODISCARD ::msg::CSNtfTournamentRoundEnd* release_tournamentroundend();
  ::msg::CSNtfTournamentRoundEnd* mutable_tournamentroundend();
  void set_allocated_tournamentroundend(::msg::CSNtfTournamentRoundEnd* tournamentroundend);
  private:
  const ::msg::CSNtfTournamentRoundEnd& _internal_tournamentroundend() const;
  ::msg::CSNtfTournamentRoundEnd* _internal_mutable_tournamentroundend();
  public:
  void unsafe_arena_set_allocated_tournamentroundend(
      ::msg::CSNtfTournamentRoundEnd* tournamentroundend);
  ::msg::CSNtfTournamentRoundEnd* unsafe_arena_release_tournamentroundend();

  // .msg.CSNtfLuckStarAward LuckStarAward = 111;
  bool has_luckstaraward() const;
  private:
  bool _internal_has_luckstaraward() const;
  public:
  void clear_luckstaraward();
  const ::msg::CSNtfLuckStarAward& luckstaraward() const;
  PROTOBUF_NODISCARD ::msg::CSNtfLuckStarAward* release_luckstaraward();
  ::msg::CSNtfLuckStarAward* mutable_luckstaraward();
  void set_allocated_luckstaraward(::msg::CSNtfLuckStarAward* luckstaraward);
  private:
  const ::msg::CSNtfLuckStarAward& _internal_luckstaraward() const;
  ::msg::CSNtfLuckStarAward* _internal_mutable_luckstaraward();
  public:
  void unsafe_arena_set_allocated_luckstaraward(
      ::msg::CSNtfLuckStarAward* luckstaraward);
  ::msg::CSNtfLuckStarAward* unsafe_arena_release_luckstaraward();

  // .msg.CSNtfInviteObserve InviteObserve = 112;
  bool has_inviteobserve() const;
  private:
  bool _internal_has_inviteobserve() const;
  public:
  void clear_inviteobserve();
  const ::msg::CSNtfInviteObserve& inviteobserve() const;
  PROTOBUF_NODISCARD ::msg::CSNtfInviteObserve* release_inviteobserve();
  ::msg::CSNtfInviteObserve* mutable_inviteobserve();
  void set_allocated_inviteobserve(::msg::CSNtfInviteObserve* inviteobserve);
  private:
  const ::msg::CSNtfInviteObserve& _internal_inviteobserve() const;
  ::msg::CSNtfInviteObserve* _internal_mutable_inviteobserve();
  public:
  void unsafe_arena_set_allocated_inviteobserve(
      ::msg::CSNtfInviteObserve* inviteobserve);
  ::msg::CSNtfInviteObserve* unsafe_arena_release_inviteobserve();

  // .msg.CSNtfRejectObserve RejectObserve = 113;
  bool has_rejectobserve() const;
  private:
  bool _internal_has_rejectobserve() const;
  public:
  void clear_rejectobserve();
  const ::msg::CSNtfRejectObserve& rejectobserve() const;
  PROTOBUF_NODISCARD ::msg::CSNtfRejectObserve* release_rejectobserve();
  ::msg::CSNtfRejectObserve* mutable_rejectobserve();
  void set_allocated_rejectobserve(::msg::CSNtfRejectObserve* rejectobserve);
  private:
  const ::msg::CSNtfRejectObserve& _internal_rejectobserve() const;
  ::msg::CSNtfRejectObserve* _internal_mutable_rejectobserve();
  public:
  void unsafe_arena_set_allocated_rejectobserve(
      ::msg::CSNtfRejectObserve* rejectobserve);
  ::msg::CSNtfRejectObserve* unsafe_arena_release_rejectobserve();

  // .msg.CSNtfChestCount ChestCount = 114;
  bool has_chestcount() const;
  private:
  bool _internal_has_chestcount() const;
  public:
  void clear_chestcount();
  const ::msg::CSNtfChestCount& chestcount() const;
  PROTOBUF_NODISCARD ::msg::CSNtfChestCount* release_chestcount();
  ::msg::CSNtfChestCount* mutable_chestcount();
  void set_allocated_chestcount(::msg::CSNtfChestCount* chestcount);
  private:
  const ::msg::CSNtfChestCount& _internal_chestcount() const;
  ::msg::CSNtfChestCount* _internal_mutable_chestcount();
  public:
  void unsafe_arena_set_allocated_chestcount(
      ::msg::CSNtfChestCount* chestcount);
  ::msg::CSNtfChestCount* unsafe_arena_release_chestcount();

  // .msg.CSNtfRecruitInfo RecruitInfo = 115;
  bool has_recruitinfo() const;
  private:
  bool _internal_has_recruitinfo() const;
  public:
  void clear_recruitinfo();
  const ::msg::CSNtfRecruitInfo& recruitinfo() const;
  PROTOBUF_NODISCARD ::msg::CSNtfRecruitInfo* release_recruitinfo();
  ::msg::CSNtfRecruitInfo* mutable_recruitinfo();
  void set_allocated_recruitinfo(::msg::CSNtfRecruitInfo* recruitinfo);
  private:
  const ::msg::CSNtfRecruitInfo& _internal_recruitinfo() const;
  ::msg::CSNtfRecruitInfo* _internal_mutable_recruitinfo();
  public:
  void unsafe_arena_set_allocated_recruitinfo(
      ::msg::CSNtfRecruitInfo* recruitinfo);
  ::msg::CSNtfRecruitInfo* unsafe_arena_release_recruitinfo();

  // .msg.CSNtfRecruitPlayer RecruitPlayer = 116;
  bool has_recruitplayer() const;
  private:
  bool _internal_has_recruitplayer() const;
  public:
  void clear_recruitplayer();
  const ::msg::CSNtfRecruitPlayer& recruitplayer() const;
  PROTOBUF_NODISCARD ::msg::CSNtfRecruitPlayer* release_recruitplayer();
  ::msg::CSNtfRecruitPlayer* mutable_recruitplayer();
  void set_allocated_recruitplayer(::msg::CSNtfRecruitPlayer* recruitplayer);
  private:
  const ::msg::CSNtfRecruitPlayer& _internal_recruitplayer() const;
  ::msg::CSNtfRecruitPlayer* _internal_mutable_recruitplayer();
  public:
  void unsafe_arena_set_allocated_recruitplayer(
      ::msg::CSNtfRecruitPlayer* recruitplayer);
  ::msg::CSNtfRecruitPlayer* unsafe_arena_release_recruitplayer();

  // .msg.CSNtfRecruitPlayerBattle RecruitPlayerBattle = 117;
  bool has_recruitplayerbattle() const;
  private:
  bool _internal_has_recruitplayerbattle() const;
  public:
  void clear_recruitplayerbattle();
  const ::msg::CSNtfRecruitPlayerBattle& recruitplayerbattle() const;
  PROTOBUF_NODISCARD ::msg::CSNtfRecruitPlayerBattle* release_recruitplayerbattle();
  ::msg::CSNtfRecruitPlayerBattle* mutable_recruitplayerbattle();
  void set_allocated_recruitplayerbattle(::msg::CSNtfRecruitPlayerBattle* recruitplayerbattle);
  private:
  const ::msg::CSNtfRecruitPlayerBattle& _internal_recruitplayerbattle() const;
  ::msg::CSNtfRecruitPlayerBattle* _internal_mutable_recruitplayerbattle();
  public:
  void unsafe_arena_set_allocated_recruitplayerbattle(
      ::msg::CSNtfRecruitPlayerBattle* recruitplayerbattle);
  ::msg::CSNtfRecruitPlayerBattle* unsafe_arena_release_recruitplayerbattle();

  // .msg.CSNtfBetOnBounty BetOnBounty = 118;
  bool has_betonbounty() const;
  private:
  bool _internal_has_betonbounty() const;
  public:
  void clear_betonbounty();
  const ::msg::CSNtfBetOnBounty& betonbounty() const;
  PROTOBUF_NODISCARD ::msg::CSNtfBetOnBounty* release_betonbounty();
  ::msg::CSNtfBetOnBounty* mutable_betonbounty();
  void set_allocated_betonbounty(::msg::CSNtfBetOnBounty* betonbounty);
  private:
  const ::msg::CSNtfBetOnBounty& _internal_betonbounty() const;
  ::msg::CSNtfBetOnBounty* _internal_mutable_betonbounty();
  public:
  void unsafe_arena_set_allocated_betonbounty(
      ::msg::CSNtfBetOnBounty* betonbounty);
  ::msg::CSNtfBetOnBounty* unsafe_arena_release_betonbounty();

  // .msg.CSNtfActivityTaskUnlock ActivityTaskUnlock = 119;
  bool has_activitytaskunlock() const;
  private:
  bool _internal_has_activitytaskunlock() const;
  public:
  void clear_activitytaskunlock();
  const ::msg::CSNtfActivityTaskUnlock& activitytaskunlock() const;
  PROTOBUF_NODISCARD ::msg::CSNtfActivityTaskUnlock* release_activitytaskunlock();
  ::msg::CSNtfActivityTaskUnlock* mutable_activitytaskunlock();
  void set_allocated_activitytaskunlock(::msg::CSNtfActivityTaskUnlock* activitytaskunlock);
  private:
  const ::msg::CSNtfActivityTaskUnlock& _internal_activitytaskunlock() const;
  ::msg::CSNtfActivityTaskUnlock* _internal_mutable_activitytaskunlock();
  public:
  void unsafe_arena_set_allocated_activitytaskunlock(
      ::msg::CSNtfActivityTaskUnlock* activitytaskunlock);
  ::msg::CSNtfActivityTaskUnlock* unsafe_arena_release_activitytaskunlock();

  // .msg.CSNtfPsServerOnly PsServerOnly = 120;
  bool has_psserveronly() const;
  private:
  bool _internal_has_psserveronly() const;
  public:
  void clear_psserveronly();
  const ::msg::CSNtfPsServerOnly& psserveronly() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPsServerOnly* release_psserveronly();
  ::msg::CSNtfPsServerOnly* mutable_psserveronly();
  void set_allocated_psserveronly(::msg::CSNtfPsServerOnly* psserveronly);
  private:
  const ::msg::CSNtfPsServerOnly& _internal_psserveronly() const;
  ::msg::CSNtfPsServerOnly* _internal_mutable_psserveronly();
  public:
  void unsafe_arena_set_allocated_psserveronly(
      ::msg::CSNtfPsServerOnly* psserveronly);
  ::msg::CSNtfPsServerOnly* unsafe_arena_release_psserveronly();

  // .msg.CSNtfAddThirdPvpInfo AddThirdPvpInfo = 121;
  bool has_addthirdpvpinfo() const;
  private:
  bool _internal_has_addthirdpvpinfo() const;
  public:
  void clear_addthirdpvpinfo();
  const ::msg::CSNtfAddThirdPvpInfo& addthirdpvpinfo() const;
  PROTOBUF_NODISCARD ::msg::CSNtfAddThirdPvpInfo* release_addthirdpvpinfo();
  ::msg::CSNtfAddThirdPvpInfo* mutable_addthirdpvpinfo();
  void set_allocated_addthirdpvpinfo(::msg::CSNtfAddThirdPvpInfo* addthirdpvpinfo);
  private:
  const ::msg::CSNtfAddThirdPvpInfo& _internal_addthirdpvpinfo() const;
  ::msg::CSNtfAddThirdPvpInfo* _internal_mutable_addthirdpvpinfo();
  public:
  void unsafe_arena_set_allocated_addthirdpvpinfo(
      ::msg::CSNtfAddThirdPvpInfo* addthirdpvpinfo);
  ::msg::CSNtfAddThirdPvpInfo* unsafe_arena_release_addthirdpvpinfo();

  // .msg.CSNtfDelThirdPvpInfo DelThirdPvpInfo = 122;
  bool has_delthirdpvpinfo() const;
  private:
  bool _internal_has_delthirdpvpinfo() const;
  public:
  void clear_delthirdpvpinfo();
  const ::msg::CSNtfDelThirdPvpInfo& delthirdpvpinfo() const;
  PROTOBUF_NODISCARD ::msg::CSNtfDelThirdPvpInfo* release_delthirdpvpinfo();
  ::msg::CSNtfDelThirdPvpInfo* mutable_delthirdpvpinfo();
  void set_allocated_delthirdpvpinfo(::msg::CSNtfDelThirdPvpInfo* delthirdpvpinfo);
  private:
  const ::msg::CSNtfDelThirdPvpInfo& _internal_delthirdpvpinfo() const;
  ::msg::CSNtfDelThirdPvpInfo* _internal_mutable_delthirdpvpinfo();
  public:
  void unsafe_arena_set_allocated_delthirdpvpinfo(
      ::msg::CSNtfDelThirdPvpInfo* delthirdpvpinfo);
  ::msg::CSNtfDelThirdPvpInfo* unsafe_arena_release_delthirdpvpinfo();

  // .msg.CSNtfPs4ServerOnly Ps4ServerOnly = 123;
  bool has_ps4serveronly() const;
  private:
  bool _internal_has_ps4serveronly() const;
  public:
  void clear_ps4serveronly();
  const ::msg::CSNtfPs4ServerOnly& ps4serveronly() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPs4ServerOnly* release_ps4serveronly();
  ::msg::CSNtfPs4ServerOnly* mutable_ps4serveronly();
  void set_allocated_ps4serveronly(::msg::CSNtfPs4ServerOnly* ps4serveronly);
  private:
  const ::msg::CSNtfPs4ServerOnly& _internal_ps4serveronly() const;
  ::msg::CSNtfPs4ServerOnly* _internal_mutable_ps4serveronly();
  public:
  void unsafe_arena_set_allocated_ps4serveronly(
      ::msg::CSNtfPs4ServerOnly* ps4serveronly);
  ::msg::CSNtfPs4ServerOnly* unsafe_arena_release_ps4serveronly();

  // .msg.CSNtfLuckMallGoods LuckMallGoods = 124;
  bool has_luckmallgoods() const;
  private:
  bool _internal_has_luckmallgoods() const;
  public:
  void clear_luckmallgoods();
  const ::msg::CSNtfLuckMallGoods& luckmallgoods() const;
  PROTOBUF_NODISCARD ::msg::CSNtfLuckMallGoods* release_luckmallgoods();
  ::msg::CSNtfLuckMallGoods* mutable_luckmallgoods();
  void set_allocated_luckmallgoods(::msg::CSNtfLuckMallGoods* luckmallgoods);
  private:
  const ::msg::CSNtfLuckMallGoods& _internal_luckmallgoods() const;
  ::msg::CSNtfLuckMallGoods* _internal_mutable_luckmallgoods();
  public:
  void unsafe_arena_set_allocated_luckmallgoods(
      ::msg::CSNtfLuckMallGoods* luckmallgoods);
  ::msg::CSNtfLuckMallGoods* unsafe_arena_release_luckmallgoods();

  // .msg.CSNtfChessListErr ChessListErr = 125;
  bool has_chesslisterr() const;
  private:
  bool _internal_has_chesslisterr() const;
  public:
  void clear_chesslisterr();
  const ::msg::CSNtfChessListErr& chesslisterr() const;
  PROTOBUF_NODISCARD ::msg::CSNtfChessListErr* release_chesslisterr();
  ::msg::CSNtfChessListErr* mutable_chesslisterr();
  void set_allocated_chesslisterr(::msg::CSNtfChessListErr* chesslisterr);
  private:
  const ::msg::CSNtfChessListErr& _internal_chesslisterr() const;
  ::msg::CSNtfChessListErr* _internal_mutable_chesslisterr();
  public:
  void unsafe_arena_set_allocated_chesslisterr(
      ::msg::CSNtfChessListErr* chesslisterr);
  ::msg::CSNtfChessListErr* unsafe_arena_release_chesslisterr();

  // .msg.CSNtfChestRecord ChestRecord = 126;
  bool has_chestrecord() const;
  private:
  bool _internal_has_chestrecord() const;
  public:
  void clear_chestrecord();
  const ::msg::CSNtfChestRecord& chestrecord() const;
  PROTOBUF_NODISCARD ::msg::CSNtfChestRecord* release_chestrecord();
  ::msg::CSNtfChestRecord* mutable_chestrecord();
  void set_allocated_chestrecord(::msg::CSNtfChestRecord* chestrecord);
  private:
  const ::msg::CSNtfChestRecord& _internal_chestrecord() const;
  ::msg::CSNtfChestRecord* _internal_mutable_chestrecord();
  public:
  void unsafe_arena_set_allocated_chestrecord(
      ::msg::CSNtfChestRecord* chestrecord);
  ::msg::CSNtfChestRecord* unsafe_arena_release_chestrecord();

  // .msg.CSNtfGOAInfo GOAInfo = 127;
  bool has_goainfo() const;
  private:
  bool _internal_has_goainfo() const;
  public:
  void clear_goainfo();
  const ::msg::CSNtfGOAInfo& goainfo() const;
  PROTOBUF_NODISCARD ::msg::CSNtfGOAInfo* release_goainfo();
  ::msg::CSNtfGOAInfo* mutable_goainfo();
  void set_allocated_goainfo(::msg::CSNtfGOAInfo* goainfo);
  private:
  const ::msg::CSNtfGOAInfo& _internal_goainfo() const;
  ::msg::CSNtfGOAInfo* _internal_mutable_goainfo();
  public:
  void unsafe_arena_set_allocated_goainfo(
      ::msg::CSNtfGOAInfo* goainfo);
  ::msg::CSNtfGOAInfo* unsafe_arena_release_goainfo();

  // .msg.CSNtfMedalInfos MedalInfo = 128;
  bool has_medalinfo() const;
  private:
  bool _internal_has_medalinfo() const;
  public:
  void clear_medalinfo();
  const ::msg::CSNtfMedalInfos& medalinfo() const;
  PROTOBUF_NODISCARD ::msg::CSNtfMedalInfos* release_medalinfo();
  ::msg::CSNtfMedalInfos* mutable_medalinfo();
  void set_allocated_medalinfo(::msg::CSNtfMedalInfos* medalinfo);
  private:
  const ::msg::CSNtfMedalInfos& _internal_medalinfo() const;
  ::msg::CSNtfMedalInfos* _internal_mutable_medalinfo();
  public:
  void unsafe_arena_set_allocated_medalinfo(
      ::msg::CSNtfMedalInfos* medalinfo);
  ::msg::CSNtfMedalInfos* unsafe_arena_release_medalinfo();

  // .msg.CSNtfMedalId MedalId = 129;
  bool has_medalid() const;
  private:
  bool _internal_has_medalid() const;
  public:
  void clear_medalid();
  const ::msg::CSNtfMedalId& medalid() const;
  PROTOBUF_NODISCARD ::msg::CSNtfMedalId* release_medalid();
  ::msg::CSNtfMedalId* mutable_medalid();
  void set_allocated_medalid(::msg::CSNtfMedalId* medalid);
  private:
  const ::msg::CSNtfMedalId& _internal_medalid() const;
  ::msg::CSNtfMedalId* _internal_mutable_medalid();
  public:
  void unsafe_arena_set_allocated_medalid(
      ::msg::CSNtfMedalId* medalid);
  ::msg::CSNtfMedalId* unsafe_arena_release_medalid();

  // .msg.CSNtfPvpReset PvpReset = 130;
  bool has_pvpreset() const;
  private:
  bool _internal_has_pvpreset() const;
  public:
  void clear_pvpreset();
  const ::msg::CSNtfPvpReset& pvpreset() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPvpReset* release_pvpreset();
  ::msg::CSNtfPvpReset* mutable_pvpreset();
  void set_allocated_pvpreset(::msg::CSNtfPvpReset* pvpreset);
  private:
  const ::msg::CSNtfPvpReset& _internal_pvpreset() const;
  ::msg::CSNtfPvpReset* _internal_mutable_pvpreset();
  public:
  void unsafe_arena_set_allocated_pvpreset(
      ::msg::CSNtfPvpReset* pvpreset);
  ::msg::CSNtfPvpReset* unsafe_arena_release_pvpreset();

  // .msg.CSNtfDelMail DelMail = 131;
  bool has_delmail() const;
  private:
  bool _internal_has_delmail() const;
  public:
  void clear_delmail();
  const ::msg::CSNtfDelMail& delmail() const;
  PROTOBUF_NODISCARD ::msg::CSNtfDelMail* release_delmail();
  ::msg::CSNtfDelMail* mutable_delmail();
  void set_allocated_delmail(::msg::CSNtfDelMail* delmail);
  private:
  const ::msg::CSNtfDelMail& _internal_delmail() const;
  ::msg::CSNtfDelMail* _internal_mutable_delmail();
  public:
  void unsafe_arena_set_allocated_delmail(
      ::msg::CSNtfDelMail* delmail);
  ::msg::CSNtfDelMail* unsafe_arena_release_delmail();

  // .msg.CSNtfItemInfo ItemInfo = 132;
  bool has_iteminfo() const;
  private:
  bool _internal_has_iteminfo() const;
  public:
  void clear_iteminfo();
  const ::msg::CSNtfItemInfo& iteminfo() const;
  PROTOBUF_NODISCARD ::msg::CSNtfItemInfo* release_iteminfo();
  ::msg::CSNtfItemInfo* mutable_iteminfo();
  void set_allocated_iteminfo(::msg::CSNtfItemInfo* iteminfo);
  private:
  const ::msg::CSNtfItemInfo& _internal_iteminfo() const;
  ::msg::CSNtfItemInfo* _internal_mutable_iteminfo();
  public:
  void unsafe_arena_set_allocated_iteminfo(
      ::msg::CSNtfItemInfo* iteminfo);
  ::msg::CSNtfItemInfo* unsafe_arena_release_iteminfo();

  // .msg.CSNtfPassportNum PassportNum = 133;
  bool has_passportnum() const;
  private:
  bool _internal_has_passportnum() const;
  public:
  void clear_passportnum();
  const ::msg::CSNtfPassportNum& passportnum() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPassportNum* release_passportnum();
  ::msg::CSNtfPassportNum* mutable_passportnum();
  void set_allocated_passportnum(::msg::CSNtfPassportNum* passportnum);
  private:
  const ::msg::CSNtfPassportNum& _internal_passportnum() const;
  ::msg::CSNtfPassportNum* _internal_mutable_passportnum();
  public:
  void unsafe_arena_set_allocated_passportnum(
      ::msg::CSNtfPassportNum* passportnum);
  ::msg::CSNtfPassportNum* unsafe_arena_release_passportnum();

  // .msg.CSNtfPassportYearCardNum PassportYearCardNum = 134;
  bool has_passportyearcardnum() const;
  private:
  bool _internal_has_passportyearcardnum() const;
  public:
  void clear_passportyearcardnum();
  const ::msg::CSNtfPassportYearCardNum& passportyearcardnum() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPassportYearCardNum* release_passportyearcardnum();
  ::msg::CSNtfPassportYearCardNum* mutable_passportyearcardnum();
  void set_allocated_passportyearcardnum(::msg::CSNtfPassportYearCardNum* passportyearcardnum);
  private:
  const ::msg::CSNtfPassportYearCardNum& _internal_passportyearcardnum() const;
  ::msg::CSNtfPassportYearCardNum* _internal_mutable_passportyearcardnum();
  public:
  void unsafe_arena_set_allocated_passportyearcardnum(
      ::msg::CSNtfPassportYearCardNum* passportyearcardnum);
  ::msg::CSNtfPassportYearCardNum* unsafe_arena_release_passportyearcardnum();

  // .msg.CSNtfTeamOP TeamOP = 300;
  bool has_teamop() const;
  private:
  bool _internal_has_teamop() const;
  public:
  void clear_teamop();
  const ::msg::CSNtfTeamOP& teamop() const;
  PROTOBUF_NODISCARD ::msg::CSNtfTeamOP* release_teamop();
  ::msg::CSNtfTeamOP* mutable_teamop();
  void set_allocated_teamop(::msg::CSNtfTeamOP* teamop);
  private:
  const ::msg::CSNtfTeamOP& _internal_teamop() const;
  ::msg::CSNtfTeamOP* _internal_mutable_teamop();
  public:
  void unsafe_arena_set_allocated_teamop(
      ::msg::CSNtfTeamOP* teamop);
  ::msg::CSNtfTeamOP* unsafe_arena_release_teamop();

  // .msg.CSNtfTeamDismiss TeamDismiss = 301;
  bool has_teamdismiss() const;
  private:
  bool _internal_has_teamdismiss() const;
  public:
  void clear_teamdismiss();
  const ::msg::CSNtfTeamDismiss& teamdismiss() const;
  PROTOBUF_NODISCARD ::msg::CSNtfTeamDismiss* release_teamdismiss();
  ::msg::CSNtfTeamDismiss* mutable_teamdismiss();
  void set_allocated_teamdismiss(::msg::CSNtfTeamDismiss* teamdismiss);
  private:
  const ::msg::CSNtfTeamDismiss& _internal_teamdismiss() const;
  ::msg::CSNtfTeamDismiss* _internal_mutable_teamdismiss();
  public:
  void unsafe_arena_set_allocated_teamdismiss(
      ::msg::CSNtfTeamDismiss* teamdismiss);
  ::msg::CSNtfTeamDismiss* unsafe_arena_release_teamdismiss();

  // .msg.CSNtfSwitchModeInTeam SwitchModeInTeam = 302;
  bool has_switchmodeinteam() const;
  private:
  bool _internal_has_switchmodeinteam() const;
  public:
  void clear_switchmodeinteam();
  const ::msg::CSNtfSwitchModeInTeam& switchmodeinteam() const;
  PROTOBUF_NODISCARD ::msg::CSNtfSwitchModeInTeam* release_switchmodeinteam();
  ::msg::CSNtfSwitchModeInTeam* mutable_switchmodeinteam();
  void set_allocated_switchmodeinteam(::msg::CSNtfSwitchModeInTeam* switchmodeinteam);
  private:
  const ::msg::CSNtfSwitchModeInTeam& _internal_switchmodeinteam() const;
  ::msg::CSNtfSwitchModeInTeam* _internal_mutable_switchmodeinteam();
  public:
  void unsafe_arena_set_allocated_switchmodeinteam(
      ::msg::CSNtfSwitchModeInTeam* switchmodeinteam);
  ::msg::CSNtfSwitchModeInTeam* unsafe_arena_release_switchmodeinteam();

  // .msg.CSNtfAddBanner AddBanner = 303;
  bool has_addbanner() const;
  private:
  bool _internal_has_addbanner() const;
  public:
  void clear_addbanner();
  const ::msg::CSNtfAddBanner& addbanner() const;
  PROTOBUF_NODISCARD ::msg::CSNtfAddBanner* release_addbanner();
  ::msg::CSNtfAddBanner* mutable_addbanner();
  void set_allocated_addbanner(::msg::CSNtfAddBanner* addbanner);
  private:
  const ::msg::CSNtfAddBanner& _internal_addbanner() const;
  ::msg::CSNtfAddBanner* _internal_mutable_addbanner();
  public:
  void unsafe_arena_set_allocated_addbanner(
      ::msg::CSNtfAddBanner* addbanner);
  ::msg::CSNtfAddBanner* unsafe_arena_release_addbanner();

  // .msg.CSNtfRemoveBanner RemoveBanner = 304;
  bool has_removebanner() const;
  private:
  bool _internal_has_removebanner() const;
  public:
  void clear_removebanner();
  const ::msg::CSNtfRemoveBanner& removebanner() const;
  PROTOBUF_NODISCARD ::msg::CSNtfRemoveBanner* release_removebanner();
  ::msg::CSNtfRemoveBanner* mutable_removebanner();
  void set_allocated_removebanner(::msg::CSNtfRemoveBanner* removebanner);
  private:
  const ::msg::CSNtfRemoveBanner& _internal_removebanner() const;
  ::msg::CSNtfRemoveBanner* _internal_mutable_removebanner();
  public:
  void unsafe_arena_set_allocated_removebanner(
      ::msg::CSNtfRemoveBanner* removebanner);
  ::msg::CSNtfRemoveBanner* unsafe_arena_release_removebanner();

  // .msg.CSNtfSingleRoundFlow SingleRoundFlow = 305;
  bool has_singleroundflow() const;
  private:
  bool _internal_has_singleroundflow() const;
  public:
  void clear_singleroundflow();
  const ::msg::CSNtfSingleRoundFlow& singleroundflow() const;
  PROTOBUF_NODISCARD ::msg::CSNtfSingleRoundFlow* release_singleroundflow();
  ::msg::CSNtfSingleRoundFlow* mutable_singleroundflow();
  void set_allocated_singleroundflow(::msg::CSNtfSingleRoundFlow* singleroundflow);
  private:
  const ::msg::CSNtfSingleRoundFlow& _internal_singleroundflow() const;
  ::msg::CSNtfSingleRoundFlow* _internal_mutable_singleroundflow();
  public:
  void unsafe_arena_set_allocated_singleroundflow(
      ::msg::CSNtfSingleRoundFlow* singleroundflow);
  ::msg::CSNtfSingleRoundFlow* unsafe_arena_release_singleroundflow();

  // .msg.CSNtfTeamStatus TeamStatus = 306;
  bool has_teamstatus() const;
  private:
  bool _internal_has_teamstatus() const;
  public:
  void clear_teamstatus();
  const ::msg::CSNtfTeamStatus& teamstatus() const;
  PROTOBUF_NODISCARD ::msg::CSNtfTeamStatus* release_teamstatus();
  ::msg::CSNtfTeamStatus* mutable_teamstatus();
  void set_allocated_teamstatus(::msg::CSNtfTeamStatus* teamstatus);
  private:
  const ::msg::CSNtfTeamStatus& _internal_teamstatus() const;
  ::msg::CSNtfTeamStatus* _internal_mutable_teamstatus();
  public:
  void unsafe_arena_set_allocated_teamstatus(
      ::msg::CSNtfTeamStatus* teamstatus);
  ::msg::CSNtfTeamStatus* unsafe_arena_release_teamstatus();

  // .msg.CSNtfTNGameEnd TNGameEnd = 320;
  bool has_tngameend() const;
  private:
  bool _internal_has_tngameend() const;
  public:
  void clear_tngameend();
  const ::msg::CSNtfTNGameEnd& tngameend() const;
  PROTOBUF_NODISCARD ::msg::CSNtfTNGameEnd* release_tngameend();
  ::msg::CSNtfTNGameEnd* mutable_tngameend();
  void set_allocated_tngameend(::msg::CSNtfTNGameEnd* tngameend);
  private:
  const ::msg::CSNtfTNGameEnd& _internal_tngameend() const;
  ::msg::CSNtfTNGameEnd* _internal_mutable_tngameend();
  public:
  void unsafe_arena_set_allocated_tngameend(
      ::msg::CSNtfTNGameEnd* tngameend);
  ::msg::CSNtfTNGameEnd* unsafe_arena_release_tngameend();

  // .msg.CSNtfPlayerLackResourceInTeam PlayerLackResource = 330;
  bool has_playerlackresource() const;
  private:
  bool _internal_has_playerlackresource() const;
  public:
  void clear_playerlackresource();
  const ::msg::CSNtfPlayerLackResourceInTeam& playerlackresource() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPlayerLackResourceInTeam* release_playerlackresource();
  ::msg::CSNtfPlayerLackResourceInTeam* mutable_playerlackresource();
  void set_allocated_playerlackresource(::msg::CSNtfPlayerLackResourceInTeam* playerlackresource);
  private:
  const ::msg::CSNtfPlayerLackResourceInTeam& _internal_playerlackresource() const;
  ::msg::CSNtfPlayerLackResourceInTeam* _internal_mutable_playerlackresource();
  public:
  void unsafe_arena_set_allocated_playerlackresource(
      ::msg::CSNtfPlayerLackResourceInTeam* playerlackresource);
  ::msg::CSNtfPlayerLackResourceInTeam* unsafe_arena_release_playerlackresource();

  // .msg.CSNtfFavMapRemoved FavMapRemoved = 331;
  bool has_favmapremoved() const;
  private:
  bool _internal_has_favmapremoved() const;
  public:
  void clear_favmapremoved();
  const ::msg::CSNtfFavMapRemoved& favmapremoved() const;
  PROTOBUF_NODISCARD ::msg::CSNtfFavMapRemoved* release_favmapremoved();
  ::msg::CSNtfFavMapRemoved* mutable_favmapremoved();
  void set_allocated_favmapremoved(::msg::CSNtfFavMapRemoved* favmapremoved);
  private:
  const ::msg::CSNtfFavMapRemoved& _internal_favmapremoved() const;
  ::msg::CSNtfFavMapRemoved* _internal_mutable_favmapremoved();
  public:
  void unsafe_arena_set_allocated_favmapremoved(
      ::msg::CSNtfFavMapRemoved* favmapremoved);
  ::msg::CSNtfFavMapRemoved* unsafe_arena_release_favmapremoved();

  // .msg.CSNtfWorkshopMatchResult WorkshopMatchResult = 332;
  bool has_workshopmatchresult() const;
  private:
  bool _internal_has_workshopmatchresult() const;
  public:
  void clear_workshopmatchresult();
  const ::msg::CSNtfWorkshopMatchResult& workshopmatchresult() const;
  PROTOBUF_NODISCARD ::msg::CSNtfWorkshopMatchResult* release_workshopmatchresult();
  ::msg::CSNtfWorkshopMatchResult* mutable_workshopmatchresult();
  void set_allocated_workshopmatchresult(::msg::CSNtfWorkshopMatchResult* workshopmatchresult);
  private:
  const ::msg::CSNtfWorkshopMatchResult& _internal_workshopmatchresult() const;
  ::msg::CSNtfWorkshopMatchResult* _internal_mutable_workshopmatchresult();
  public:
  void unsafe_arena_set_allocated_workshopmatchresult(
      ::msg::CSNtfWorkshopMatchResult* workshopmatchresult);
  ::msg::CSNtfWorkshopMatchResult* unsafe_arena_release_workshopmatchresult();

  // .msg.CSNtfBigWinnerExpandMatch BigWinnerExpandMatch = 333;
  bool has_bigwinnerexpandmatch() const;
  private:
  bool _internal_has_bigwinnerexpandmatch() const;
  public:
  void clear_bigwinnerexpandmatch();
  const ::msg::CSNtfBigWinnerExpandMatch& bigwinnerexpandmatch() const;
  PROTOBUF_NODISCARD ::msg::CSNtfBigWinnerExpandMatch* release_bigwinnerexpandmatch();
  ::msg::CSNtfBigWinnerExpandMatch* mutable_bigwinnerexpandmatch();
  void set_allocated_bigwinnerexpandmatch(::msg::CSNtfBigWinnerExpandMatch* bigwinnerexpandmatch);
  private:
  const ::msg::CSNtfBigWinnerExpandMatch& _internal_bigwinnerexpandmatch() const;
  ::msg::CSNtfBigWinnerExpandMatch* _internal_mutable_bigwinnerexpandmatch();
  public:
  void unsafe_arena_set_allocated_bigwinnerexpandmatch(
      ::msg::CSNtfBigWinnerExpandMatch* bigwinnerexpandmatch);
  ::msg::CSNtfBigWinnerExpandMatch* unsafe_arena_release_bigwinnerexpandmatch();

  // .msg.CSNtfVerifyRealName VerifyRealName = 350;
  bool has_verifyrealname() const;
  private:
  bool _internal_has_verifyrealname() const;
  public:
  void clear_verifyrealname();
  const ::msg::CSNtfVerifyRealName& verifyrealname() const;
  PROTOBUF_NODISCARD ::msg::CSNtfVerifyRealName* release_verifyrealname();
  ::msg::CSNtfVerifyRealName* mutable_verifyrealname();
  void set_allocated_verifyrealname(::msg::CSNtfVerifyRealName* verifyrealname);
  private:
  const ::msg::CSNtfVerifyRealName& _internal_verifyrealname() const;
  ::msg::CSNtfVerifyRealName* _internal_mutable_verifyrealname();
  public:
  void unsafe_arena_set_allocated_verifyrealname(
      ::msg::CSNtfVerifyRealName* verifyrealname);
  ::msg::CSNtfVerifyRealName* unsafe_arena_release_verifyrealname();

  // .msg.CSNtfGuildJoin GuildJoin = 360;
  bool has_guildjoin() const;
  private:
  bool _internal_has_guildjoin() const;
  public:
  void clear_guildjoin();
  const ::msg::CSNtfGuildJoin& guildjoin() const;
  PROTOBUF_NODISCARD ::msg::CSNtfGuildJoin* release_guildjoin();
  ::msg::CSNtfGuildJoin* mutable_guildjoin();
  void set_allocated_guildjoin(::msg::CSNtfGuildJoin* guildjoin);
  private:
  const ::msg::CSNtfGuildJoin& _internal_guildjoin() const;
  ::msg::CSNtfGuildJoin* _internal_mutable_guildjoin();
  public:
  void unsafe_arena_set_allocated_guildjoin(
      ::msg::CSNtfGuildJoin* guildjoin);
  ::msg::CSNtfGuildJoin* unsafe_arena_release_guildjoin();

  // .msg.CSNtfGuildMemberChange MemberChange = 361;
  bool has_memberchange() const;
  private:
  bool _internal_has_memberchange() const;
  public:
  void clear_memberchange();
  const ::msg::CSNtfGuildMemberChange& memberchange() const;
  PROTOBUF_NODISCARD ::msg::CSNtfGuildMemberChange* release_memberchange();
  ::msg::CSNtfGuildMemberChange* mutable_memberchange();
  void set_allocated_memberchange(::msg::CSNtfGuildMemberChange* memberchange);
  private:
  const ::msg::CSNtfGuildMemberChange& _internal_memberchange() const;
  ::msg::CSNtfGuildMemberChange* _internal_mutable_memberchange();
  public:
  void unsafe_arena_set_allocated_memberchange(
      ::msg::CSNtfGuildMemberChange* memberchange);
  ::msg::CSNtfGuildMemberChange* unsafe_arena_release_memberchange();

  // .msg.CSNtfGuildKickoff GuildKickoff = 362;
  bool has_guildkickoff() const;
  private:
  bool _internal_has_guildkickoff() const;
  public:
  void clear_guildkickoff();
  const ::msg::CSNtfGuildKickoff& guildkickoff() const;
  PROTOBUF_NODISCARD ::msg::CSNtfGuildKickoff* release_guildkickoff();
  ::msg::CSNtfGuildKickoff* mutable_guildkickoff();
  void set_allocated_guildkickoff(::msg::CSNtfGuildKickoff* guildkickoff);
  private:
  const ::msg::CSNtfGuildKickoff& _internal_guildkickoff() const;
  ::msg::CSNtfGuildKickoff* _internal_mutable_guildkickoff();
  public:
  void unsafe_arena_set_allocated_guildkickoff(
      ::msg::CSNtfGuildKickoff* guildkickoff);
  ::msg::CSNtfGuildKickoff* unsafe_arena_release_guildkickoff();

  // .msg.CSNtfGuildRoleChange GuildRoleChange = 363;
  bool has_guildrolechange() const;
  private:
  bool _internal_has_guildrolechange() const;
  public:
  void clear_guildrolechange();
  const ::msg::CSNtfGuildRoleChange& guildrolechange() const;
  PROTOBUF_NODISCARD ::msg::CSNtfGuildRoleChange* release_guildrolechange();
  ::msg::CSNtfGuildRoleChange* mutable_guildrolechange();
  void set_allocated_guildrolechange(::msg::CSNtfGuildRoleChange* guildrolechange);
  private:
  const ::msg::CSNtfGuildRoleChange& _internal_guildrolechange() const;
  ::msg::CSNtfGuildRoleChange* _internal_mutable_guildrolechange();
  public:
  void unsafe_arena_set_allocated_guildrolechange(
      ::msg::CSNtfGuildRoleChange* guildrolechange);
  ::msg::CSNtfGuildRoleChange* unsafe_arena_release_guildrolechange();

  // .msg.CSNtfGuildAttrChange GuildAttrChange = 364;
  bool has_guildattrchange() const;
  private:
  bool _internal_has_guildattrchange() const;
  public:
  void clear_guildattrchange();
  const ::msg::CSNtfGuildAttrChange& guildattrchange() const;
  PROTOBUF_NODISCARD ::msg::CSNtfGuildAttrChange* release_guildattrchange();
  ::msg::CSNtfGuildAttrChange* mutable_guildattrchange();
  void set_allocated_guildattrchange(::msg::CSNtfGuildAttrChange* guildattrchange);
  private:
  const ::msg::CSNtfGuildAttrChange& _internal_guildattrchange() const;
  ::msg::CSNtfGuildAttrChange* _internal_mutable_guildattrchange();
  public:
  void unsafe_arena_set_allocated_guildattrchange(
      ::msg::CSNtfGuildAttrChange* guildattrchange);
  ::msg::CSNtfGuildAttrChange* unsafe_arena_release_guildattrchange();

  // .msg.CSNtfGuildChat GuildChat = 365;
  bool has_guildchat() const;
  private:
  bool _internal_has_guildchat() const;
  public:
  void clear_guildchat();
  const ::msg::CSNtfGuildChat& guildchat() const;
  PROTOBUF_NODISCARD ::msg::CSNtfGuildChat* release_guildchat();
  ::msg::CSNtfGuildChat* mutable_guildchat();
  void set_allocated_guildchat(::msg::CSNtfGuildChat* guildchat);
  private:
  const ::msg::CSNtfGuildChat& _internal_guildchat() const;
  ::msg::CSNtfGuildChat* _internal_mutable_guildchat();
  public:
  void unsafe_arena_set_allocated_guildchat(
      ::msg::CSNtfGuildChat* guildchat);
  ::msg::CSNtfGuildChat* unsafe_arena_release_guildchat();

  // .msg.CSNtfNewGuildLog NewGuildLog = 366;
  bool has_newguildlog() const;
  private:
  bool _internal_has_newguildlog() const;
  public:
  void clear_newguildlog();
  const ::msg::CSNtfNewGuildLog& newguildlog() const;
  PROTOBUF_NODISCARD ::msg::CSNtfNewGuildLog* release_newguildlog();
  ::msg::CSNtfNewGuildLog* mutable_newguildlog();
  void set_allocated_newguildlog(::msg::CSNtfNewGuildLog* newguildlog);
  private:
  const ::msg::CSNtfNewGuildLog& _internal_newguildlog() const;
  ::msg::CSNtfNewGuildLog* _internal_mutable_newguildlog();
  public:
  void unsafe_arena_set_allocated_newguildlog(
      ::msg::CSNtfNewGuildLog* newguildlog);
  ::msg::CSNtfNewGuildLog* unsafe_arena_release_newguildlog();

  // .msg.CSNtfGuildApplicantChange ApplicantChange = 367;
  bool has_applicantchange() const;
  private:
  bool _internal_has_applicantchange() const;
  public:
  void clear_applicantchange();
  const ::msg::CSNtfGuildApplicantChange& applicantchange() const;
  PROTOBUF_NODISCARD ::msg::CSNtfGuildApplicantChange* release_applicantchange();
  ::msg::CSNtfGuildApplicantChange* mutable_applicantchange();
  void set_allocated_applicantchange(::msg::CSNtfGuildApplicantChange* applicantchange);
  private:
  const ::msg::CSNtfGuildApplicantChange& _internal_applicantchange() const;
  ::msg::CSNtfGuildApplicantChange* _internal_mutable_applicantchange();
  public:
  void unsafe_arena_set_allocated_applicantchange(
      ::msg::CSNtfGuildApplicantChange* applicantchange);
  ::msg::CSNtfGuildApplicantChange* unsafe_arena_release_applicantchange();

  // .msg.CSNtfGuildInviteeChange InviteeChange = 368;
  bool has_inviteechange() const;
  private:
  bool _internal_has_inviteechange() const;
  public:
  void clear_inviteechange();
  const ::msg::CSNtfGuildInviteeChange& inviteechange() const;
  PROTOBUF_NODISCARD ::msg::CSNtfGuildInviteeChange* release_inviteechange();
  ::msg::CSNtfGuildInviteeChange* mutable_inviteechange();
  void set_allocated_inviteechange(::msg::CSNtfGuildInviteeChange* inviteechange);
  private:
  const ::msg::CSNtfGuildInviteeChange& _internal_inviteechange() const;
  ::msg::CSNtfGuildInviteeChange* _internal_mutable_inviteechange();
  public:
  void unsafe_arena_set_allocated_inviteechange(
      ::msg::CSNtfGuildInviteeChange* inviteechange);
  ::msg::CSNtfGuildInviteeChange* unsafe_arena_release_inviteechange();

  // .msg.CSNtfGuildNewInvite GuildNewInvite = 379;
  bool has_guildnewinvite() const;
  private:
  bool _internal_has_guildnewinvite() const;
  public:
  void clear_guildnewinvite();
  const ::msg::CSNtfGuildNewInvite& guildnewinvite() const;
  PROTOBUF_NODISCARD ::msg::CSNtfGuildNewInvite* release_guildnewinvite();
  ::msg::CSNtfGuildNewInvite* mutable_guildnewinvite();
  void set_allocated_guildnewinvite(::msg::CSNtfGuildNewInvite* guildnewinvite);
  private:
  const ::msg::CSNtfGuildNewInvite& _internal_guildnewinvite() const;
  ::msg::CSNtfGuildNewInvite* _internal_mutable_guildnewinvite();
  public:
  void unsafe_arena_set_allocated_guildnewinvite(
      ::msg::CSNtfGuildNewInvite* guildnewinvite);
  ::msg::CSNtfGuildNewInvite* unsafe_arena_release_guildnewinvite();

  // .msg.CSNtfGuildInfo GuildInfo = 380;
  bool has_guildinfo() const;
  private:
  bool _internal_has_guildinfo() const;
  public:
  void clear_guildinfo();
  const ::msg::CSNtfGuildInfo& guildinfo() const;
  PROTOBUF_NODISCARD ::msg::CSNtfGuildInfo* release_guildinfo();
  ::msg::CSNtfGuildInfo* mutable_guildinfo();
  void set_allocated_guildinfo(::msg::CSNtfGuildInfo* guildinfo);
  private:
  const ::msg::CSNtfGuildInfo& _internal_guildinfo() const;
  ::msg::CSNtfGuildInfo* _internal_mutable_guildinfo();
  public:
  void unsafe_arena_set_allocated_guildinfo(
      ::msg::CSNtfGuildInfo* guildinfo);
  ::msg::CSNtfGuildInfo* unsafe_arena_release_guildinfo();

  // .msg.CSNtfVngCommentAwardReset VngAwardReset = 400;
  bool has_vngawardreset() const;
  private:
  bool _internal_has_vngawardreset() const;
  public:
  void clear_vngawardreset();
  const ::msg::CSNtfVngCommentAwardReset& vngawardreset() const;
  PROTOBUF_NODISCARD ::msg::CSNtfVngCommentAwardReset* release_vngawardreset();
  ::msg::CSNtfVngCommentAwardReset* mutable_vngawardreset();
  void set_allocated_vngawardreset(::msg::CSNtfVngCommentAwardReset* vngawardreset);
  private:
  const ::msg::CSNtfVngCommentAwardReset& _internal_vngawardreset() const;
  ::msg::CSNtfVngCommentAwardReset* _internal_mutable_vngawardreset();
  public:
  void unsafe_arena_set_allocated_vngawardreset(
      ::msg::CSNtfVngCommentAwardReset* vngawardreset);
  ::msg::CSNtfVngCommentAwardReset* unsafe_arena_release_vngawardreset();

  // .msg.CSNtfAdAward AdAward = 401;
  bool has_adaward() const;
  private:
  bool _internal_has_adaward() const;
  public:
  void clear_adaward();
  const ::msg::CSNtfAdAward& adaward() const;
  PROTOBUF_NODISCARD ::msg::CSNtfAdAward* release_adaward();
  ::msg::CSNtfAdAward* mutable_adaward();
  void set_allocated_adaward(::msg::CSNtfAdAward* adaward);
  private:
  const ::msg::CSNtfAdAward& _internal_adaward() const;
  ::msg::CSNtfAdAward* _internal_mutable_adaward();
  public:
  void unsafe_arena_set_allocated_adaward(
      ::msg::CSNtfAdAward* adaward);
  ::msg::CSNtfAdAward* unsafe_arena_release_adaward();

  // .msg.CSNtfAdCount AdCount = 402;
  bool has_adcount() const;
  private:
  bool _internal_has_adcount() const;
  public:
  void clear_adcount();
  const ::msg::CSNtfAdCount& adcount() const;
  PROTOBUF_NODISCARD ::msg::CSNtfAdCount* release_adcount();
  ::msg::CSNtfAdCount* mutable_adcount();
  void set_allocated_adcount(::msg::CSNtfAdCount* adcount);
  private:
  const ::msg::CSNtfAdCount& _internal_adcount() const;
  ::msg::CSNtfAdCount* _internal_mutable_adcount();
  public:
  void unsafe_arena_set_allocated_adcount(
      ::msg::CSNtfAdCount* adcount);
  ::msg::CSNtfAdCount* unsafe_arena_release_adcount();

  // .msg.CSNtfUIForbid UIForbid = 403;
  bool has_uiforbid() const;
  private:
  bool _internal_has_uiforbid() const;
  public:
  void clear_uiforbid();
  const ::msg::CSNtfUIForbid& uiforbid() const;
  PROTOBUF_NODISCARD ::msg::CSNtfUIForbid* release_uiforbid();
  ::msg::CSNtfUIForbid* mutable_uiforbid();
  void set_allocated_uiforbid(::msg::CSNtfUIForbid* uiforbid);
  private:
  const ::msg::CSNtfUIForbid& _internal_uiforbid() const;
  ::msg::CSNtfUIForbid* _internal_mutable_uiforbid();
  public:
  void unsafe_arena_set_allocated_uiforbid(
      ::msg::CSNtfUIForbid* uiforbid);
  ::msg::CSNtfUIForbid* unsafe_arena_release_uiforbid();

  // .msg.CSNtfPvpUpdateMessengerPos PvpUpdateMessengerPos = 522;
  bool has_pvpupdatemessengerpos() const;
  private:
  bool _internal_has_pvpupdatemessengerpos() const;
  public:
  void clear_pvpupdatemessengerpos();
  const ::msg::CSNtfPvpUpdateMessengerPos& pvpupdatemessengerpos() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPvpUpdateMessengerPos* release_pvpupdatemessengerpos();
  ::msg::CSNtfPvpUpdateMessengerPos* mutable_pvpupdatemessengerpos();
  void set_allocated_pvpupdatemessengerpos(::msg::CSNtfPvpUpdateMessengerPos* pvpupdatemessengerpos);
  private:
  const ::msg::CSNtfPvpUpdateMessengerPos& _internal_pvpupdatemessengerpos() const;
  ::msg::CSNtfPvpUpdateMessengerPos* _internal_mutable_pvpupdatemessengerpos();
  public:
  void unsafe_arena_set_allocated_pvpupdatemessengerpos(
      ::msg::CSNtfPvpUpdateMessengerPos* pvpupdatemessengerpos);
  ::msg::CSNtfPvpUpdateMessengerPos* unsafe_arena_release_pvpupdatemessengerpos();

  // .msg.CSNtfPvpPlayerLoggedIn PvpPlayerLoggedIn = 523;
  bool has_pvpplayerloggedin() const;
  private:
  bool _internal_has_pvpplayerloggedin() const;
  public:
  void clear_pvpplayerloggedin();
  const ::msg::CSNtfPvpPlayerLoggedIn& pvpplayerloggedin() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPvpPlayerLoggedIn* release_pvpplayerloggedin();
  ::msg::CSNtfPvpPlayerLoggedIn* mutable_pvpplayerloggedin();
  void set_allocated_pvpplayerloggedin(::msg::CSNtfPvpPlayerLoggedIn* pvpplayerloggedin);
  private:
  const ::msg::CSNtfPvpPlayerLoggedIn& _internal_pvpplayerloggedin() const;
  ::msg::CSNtfPvpPlayerLoggedIn* _internal_mutable_pvpplayerloggedin();
  public:
  void unsafe_arena_set_allocated_pvpplayerloggedin(
      ::msg::CSNtfPvpPlayerLoggedIn* pvpplayerloggedin);
  ::msg::CSNtfPvpPlayerLoggedIn* unsafe_arena_release_pvpplayerloggedin();

  // .msg.CSNtfPassThrough PassThrough = 566;
  bool has_passthrough() const;
  private:
  bool _internal_has_passthrough() const;
  public:
  void clear_passthrough();
  const ::msg::CSNtfPassThrough& passthrough() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPassThrough* release_passthrough();
  ::msg::CSNtfPassThrough* mutable_passthrough();
  void set_allocated_passthrough(::msg::CSNtfPassThrough* passthrough);
  private:
  const ::msg::CSNtfPassThrough& _internal_passthrough() const;
  ::msg::CSNtfPassThrough* _internal_mutable_passthrough();
  public:
  void unsafe_arena_set_allocated_passthrough(
      ::msg::CSNtfPassThrough* passthrough);
  ::msg::CSNtfPassThrough* unsafe_arena_release_passthrough();

  // .msg.CSNtfAA AA = 570;
  bool has_aa() const;
  private:
  bool _internal_has_aa() const;
  public:
  void clear_aa();
  const ::msg::CSNtfAA& aa() const;
  PROTOBUF_NODISCARD ::msg::CSNtfAA* release_aa();
  ::msg::CSNtfAA* mutable_aa();
  void set_allocated_aa(::msg::CSNtfAA* aa);
  private:
  const ::msg::CSNtfAA& _internal_aa() const;
  ::msg::CSNtfAA* _internal_mutable_aa();
  public:
  void unsafe_arena_set_allocated_aa(
      ::msg::CSNtfAA* aa);
  ::msg::CSNtfAA* unsafe_arena_release_aa();

  // .msg.CSNtfPvpReconnect PvpReconnect = 571;
  bool has_pvpreconnect() const;
  private:
  bool _internal_has_pvpreconnect() const;
  public:
  void clear_pvpreconnect();
  const ::msg::CSNtfPvpReconnect& pvpreconnect() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPvpReconnect* release_pvpreconnect();
  ::msg::CSNtfPvpReconnect* mutable_pvpreconnect();
  void set_allocated_pvpreconnect(::msg::CSNtfPvpReconnect* pvpreconnect);
  private:
  const ::msg::CSNtfPvpReconnect& _internal_pvpreconnect() const;
  ::msg::CSNtfPvpReconnect* _internal_mutable_pvpreconnect();
  public:
  void unsafe_arena_set_allocated_pvpreconnect(
      ::msg::CSNtfPvpReconnect* pvpreconnect);
  ::msg::CSNtfPvpReconnect* unsafe_arena_release_pvpreconnect();

  // .msg.CSNtfUpdateBattleResult UpdateBattleResult = 572;
  bool has_updatebattleresult() const;
  private:
  bool _internal_has_updatebattleresult() const;
  public:
  void clear_updatebattleresult();
  const ::msg::CSNtfUpdateBattleResult& updatebattleresult() const;
  PROTOBUF_NODISCARD ::msg::CSNtfUpdateBattleResult* release_updatebattleresult();
  ::msg::CSNtfUpdateBattleResult* mutable_updatebattleresult();
  void set_allocated_updatebattleresult(::msg::CSNtfUpdateBattleResult* updatebattleresult);
  private:
  const ::msg::CSNtfUpdateBattleResult& _internal_updatebattleresult() const;
  ::msg::CSNtfUpdateBattleResult* _internal_mutable_updatebattleresult();
  public:
  void unsafe_arena_set_allocated_updatebattleresult(
      ::msg::CSNtfUpdateBattleResult* updatebattleresult);
  ::msg::CSNtfUpdateBattleResult* unsafe_arena_release_updatebattleresult();

  // .msg.CSNtfVisitPlayer VisitPlayer = 573;
  bool has_visitplayer() const;
  private:
  bool _internal_has_visitplayer() const;
  public:
  void clear_visitplayer();
  const ::msg::CSNtfVisitPlayer& visitplayer() const;
  PROTOBUF_NODISCARD ::msg::CSNtfVisitPlayer* release_visitplayer();
  ::msg::CSNtfVisitPlayer* mutable_visitplayer();
  void set_allocated_visitplayer(::msg::CSNtfVisitPlayer* visitplayer);
  private:
  const ::msg::CSNtfVisitPlayer& _internal_visitplayer() const;
  ::msg::CSNtfVisitPlayer* _internal_mutable_visitplayer();
  public:
  void unsafe_arena_set_allocated_visitplayer(
      ::msg::CSNtfVisitPlayer* visitplayer);
  ::msg::CSNtfVisitPlayer* unsafe_arena_release_visitplayer();

  // .msg.CSNtfKrIdentityAuth KrIdentityAuth = 574;
  bool has_kridentityauth() const;
  private:
  bool _internal_has_kridentityauth() const;
  public:
  void clear_kridentityauth();
  const ::msg::CSNtfKrIdentityAuth& kridentityauth() const;
  PROTOBUF_NODISCARD ::msg::CSNtfKrIdentityAuth* release_kridentityauth();
  ::msg::CSNtfKrIdentityAuth* mutable_kridentityauth();
  void set_allocated_kridentityauth(::msg::CSNtfKrIdentityAuth* kridentityauth);
  private:
  const ::msg::CSNtfKrIdentityAuth& _internal_kridentityauth() const;
  ::msg::CSNtfKrIdentityAuth* _internal_mutable_kridentityauth();
  public:
  void unsafe_arena_set_allocated_kridentityauth(
      ::msg::CSNtfKrIdentityAuth* kridentityauth);
  ::msg::CSNtfKrIdentityAuth* unsafe_arena_release_kridentityauth();

  // .msg.CSNtfKrAddictionTip KrAddictionTip = 575;
  bool has_kraddictiontip() const;
  private:
  bool _internal_has_kraddictiontip() const;
  public:
  void clear_kraddictiontip();
  const ::msg::CSNtfKrAddictionTip& kraddictiontip() const;
  PROTOBUF_NODISCARD ::msg::CSNtfKrAddictionTip* release_kraddictiontip();
  ::msg::CSNtfKrAddictionTip* mutable_kraddictiontip();
  void set_allocated_kraddictiontip(::msg::CSNtfKrAddictionTip* kraddictiontip);
  private:
  const ::msg::CSNtfKrAddictionTip& _internal_kraddictiontip() const;
  ::msg::CSNtfKrAddictionTip* _internal_mutable_kraddictiontip();
  public:
  void unsafe_arena_set_allocated_kraddictiontip(
      ::msg::CSNtfKrAddictionTip* kraddictiontip);
  ::msg::CSNtfKrAddictionTip* unsafe_arena_release_kraddictiontip();

  // .msg.CSNtfLeaveGameEarly LeaveGameEarly = 576;
  bool has_leavegameearly() const;
  private:
  bool _internal_has_leavegameearly() const;
  public:
  void clear_leavegameearly();
  const ::msg::CSNtfLeaveGameEarly& leavegameearly() const;
  PROTOBUF_NODISCARD ::msg::CSNtfLeaveGameEarly* release_leavegameearly();
  ::msg::CSNtfLeaveGameEarly* mutable_leavegameearly();
  void set_allocated_leavegameearly(::msg::CSNtfLeaveGameEarly* leavegameearly);
  private:
  const ::msg::CSNtfLeaveGameEarly& _internal_leavegameearly() const;
  ::msg::CSNtfLeaveGameEarly* _internal_mutable_leavegameearly();
  public:
  void unsafe_arena_set_allocated_leavegameearly(
      ::msg::CSNtfLeaveGameEarly* leavegameearly);
  ::msg::CSNtfLeaveGameEarly* unsafe_arena_release_leavegameearly();

  // .msg.CSNtfKrAddictionCountdown KrAddictionCountdown = 577;
  bool has_kraddictioncountdown() const;
  private:
  bool _internal_has_kraddictioncountdown() const;
  public:
  void clear_kraddictioncountdown();
  const ::msg::CSNtfKrAddictionCountdown& kraddictioncountdown() const;
  PROTOBUF_NODISCARD ::msg::CSNtfKrAddictionCountdown* release_kraddictioncountdown();
  ::msg::CSNtfKrAddictionCountdown* mutable_kraddictioncountdown();
  void set_allocated_kraddictioncountdown(::msg::CSNtfKrAddictionCountdown* kraddictioncountdown);
  private:
  const ::msg::CSNtfKrAddictionCountdown& _internal_kraddictioncountdown() const;
  ::msg::CSNtfKrAddictionCountdown* _internal_mutable_kraddictioncountdown();
  public:
  void unsafe_arena_set_allocated_kraddictioncountdown(
      ::msg::CSNtfKrAddictionCountdown* kraddictioncountdown);
  ::msg::CSNtfKrAddictionCountdown* unsafe_arena_release_kraddictioncountdown();

  // .msg.CSNtfHistoryChatMsg HistroyChatMsg = 578;
  bool has_histroychatmsg() const;
  private:
  bool _internal_has_histroychatmsg() const;
  public:
  void clear_histroychatmsg();
  const ::msg::CSNtfHistoryChatMsg& histroychatmsg() const;
  PROTOBUF_NODISCARD ::msg::CSNtfHistoryChatMsg* release_histroychatmsg();
  ::msg::CSNtfHistoryChatMsg* mutable_histroychatmsg();
  void set_allocated_histroychatmsg(::msg::CSNtfHistoryChatMsg* histroychatmsg);
  private:
  const ::msg::CSNtfHistoryChatMsg& _internal_histroychatmsg() const;
  ::msg::CSNtfHistoryChatMsg* _internal_mutable_histroychatmsg();
  public:
  void unsafe_arena_set_allocated_histroychatmsg(
      ::msg::CSNtfHistoryChatMsg* histroychatmsg);
  ::msg::CSNtfHistoryChatMsg* unsafe_arena_release_histroychatmsg();

  // .msg.CSNtfSystemGmTime GMTime = 579;
  bool has_gmtime() const;
  private:
  bool _internal_has_gmtime() const;
  public:
  void clear_gmtime();
  const ::msg::CSNtfSystemGmTime& gmtime() const;
  PROTOBUF_NODISCARD ::msg::CSNtfSystemGmTime* release_gmtime();
  ::msg::CSNtfSystemGmTime* mutable_gmtime();
  void set_allocated_gmtime(::msg::CSNtfSystemGmTime* gmtime);
  private:
  const ::msg::CSNtfSystemGmTime& _internal_gmtime() const;
  ::msg::CSNtfSystemGmTime* _internal_mutable_gmtime();
  public:
  void unsafe_arena_set_allocated_gmtime(
      ::msg::CSNtfSystemGmTime* gmtime);
  ::msg::CSNtfSystemGmTime* unsafe_arena_release_gmtime();

  // .msg.CSNtfChangeName ChangeName = 580;
  bool has_changename() const;
  private:
  bool _internal_has_changename() const;
  public:
  void clear_changename();
  const ::msg::CSNtfChangeName& changename() const;
  PROTOBUF_NODISCARD ::msg::CSNtfChangeName* release_changename();
  ::msg::CSNtfChangeName* mutable_changename();
  void set_allocated_changename(::msg::CSNtfChangeName* changename);
  private:
  const ::msg::CSNtfChangeName& _internal_changename() const;
  ::msg::CSNtfChangeName* _internal_mutable_changename();
  public:
  void unsafe_arena_set_allocated_changename(
      ::msg::CSNtfChangeName* changename);
  ::msg::CSNtfChangeName* unsafe_arena_release_changename();

  // .msg.CSNtfFirstPay FirstPay = 581;
  bool has_firstpay() const;
  private:
  bool _internal_has_firstpay() const;
  public:
  void clear_firstpay();
  const ::msg::CSNtfFirstPay& firstpay() const;
  PROTOBUF_NODISCARD ::msg::CSNtfFirstPay* release_firstpay();
  ::msg::CSNtfFirstPay* mutable_firstpay();
  void set_allocated_firstpay(::msg::CSNtfFirstPay* firstpay);
  private:
  const ::msg::CSNtfFirstPay& _internal_firstpay() const;
  ::msg::CSNtfFirstPay* _internal_mutable_firstpay();
  public:
  void unsafe_arena_set_allocated_firstpay(
      ::msg::CSNtfFirstPay* firstpay);
  ::msg::CSNtfFirstPay* unsafe_arena_release_firstpay();

  // .msg.CSNtfPlayerExpChanged ExpChanged = 582;
  bool has_expchanged() const;
  private:
  bool _internal_has_expchanged() const;
  public:
  void clear_expchanged();
  const ::msg::CSNtfPlayerExpChanged& expchanged() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPlayerExpChanged* release_expchanged();
  ::msg::CSNtfPlayerExpChanged* mutable_expchanged();
  void set_allocated_expchanged(::msg::CSNtfPlayerExpChanged* expchanged);
  private:
  const ::msg::CSNtfPlayerExpChanged& _internal_expchanged() const;
  ::msg::CSNtfPlayerExpChanged* _internal_mutable_expchanged();
  public:
  void unsafe_arena_set_allocated_expchanged(
      ::msg::CSNtfPlayerExpChanged* expchanged);
  ::msg::CSNtfPlayerExpChanged* unsafe_arena_release_expchanged();

  // .msg.CSNtfTaskProgress TaskProgress = 583;
  bool has_taskprogress() const;
  private:
  bool _internal_has_taskprogress() const;
  public:
  void clear_taskprogress();
  const ::msg::CSNtfTaskProgress& taskprogress() const;
  PROTOBUF_NODISCARD ::msg::CSNtfTaskProgress* release_taskprogress();
  ::msg::CSNtfTaskProgress* mutable_taskprogress();
  void set_allocated_taskprogress(::msg::CSNtfTaskProgress* taskprogress);
  private:
  const ::msg::CSNtfTaskProgress& _internal_taskprogress() const;
  ::msg::CSNtfTaskProgress* _internal_mutable_taskprogress();
  public:
  void unsafe_arena_set_allocated_taskprogress(
      ::msg::CSNtfTaskProgress* taskprogress);
  ::msg::CSNtfTaskProgress* unsafe_arena_release_taskprogress();

  // .msg.CSNtfNewPlayerGuideEnded NewPlayerGuideEnded = 584;
  bool has_newplayerguideended() const;
  private:
  bool _internal_has_newplayerguideended() const;
  public:
  void clear_newplayerguideended();
  const ::msg::CSNtfNewPlayerGuideEnded& newplayerguideended() const;
  PROTOBUF_NODISCARD ::msg::CSNtfNewPlayerGuideEnded* release_newplayerguideended();
  ::msg::CSNtfNewPlayerGuideEnded* mutable_newplayerguideended();
  void set_allocated_newplayerguideended(::msg::CSNtfNewPlayerGuideEnded* newplayerguideended);
  private:
  const ::msg::CSNtfNewPlayerGuideEnded& _internal_newplayerguideended() const;
  ::msg::CSNtfNewPlayerGuideEnded* _internal_mutable_newplayerguideended();
  public:
  void unsafe_arena_set_allocated_newplayerguideended(
      ::msg::CSNtfNewPlayerGuideEnded* newplayerguideended);
  ::msg::CSNtfNewPlayerGuideEnded* unsafe_arena_release_newplayerguideended();

  // .msg.CSNtfTasksInfo TasksInfo = 585;
  bool has_tasksinfo() const;
  private:
  bool _internal_has_tasksinfo() const;
  public:
  void clear_tasksinfo();
  const ::msg::CSNtfTasksInfo& tasksinfo() const;
  PROTOBUF_NODISCARD ::msg::CSNtfTasksInfo* release_tasksinfo();
  ::msg::CSNtfTasksInfo* mutable_tasksinfo();
  void set_allocated_tasksinfo(::msg::CSNtfTasksInfo* tasksinfo);
  private:
  const ::msg::CSNtfTasksInfo& _internal_tasksinfo() const;
  ::msg::CSNtfTasksInfo* _internal_mutable_tasksinfo();
  public:
  void unsafe_arena_set_allocated_tasksinfo(
      ::msg::CSNtfTasksInfo* tasksinfo);
  ::msg::CSNtfTasksInfo* unsafe_arena_release_tasksinfo();

  // .msg.CSNtfPvpAwardsInfo PvpAwardsInfo = 586;
  bool has_pvpawardsinfo() const;
  private:
  bool _internal_has_pvpawardsinfo() const;
  public:
  void clear_pvpawardsinfo();
  const ::msg::CSNtfPvpAwardsInfo& pvpawardsinfo() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPvpAwardsInfo* release_pvpawardsinfo();
  ::msg::CSNtfPvpAwardsInfo* mutable_pvpawardsinfo();
  void set_allocated_pvpawardsinfo(::msg::CSNtfPvpAwardsInfo* pvpawardsinfo);
  private:
  const ::msg::CSNtfPvpAwardsInfo& _internal_pvpawardsinfo() const;
  ::msg::CSNtfPvpAwardsInfo* _internal_mutable_pvpawardsinfo();
  public:
  void unsafe_arena_set_allocated_pvpawardsinfo(
      ::msg::CSNtfPvpAwardsInfo* pvpawardsinfo);
  ::msg::CSNtfPvpAwardsInfo* unsafe_arena_release_pvpawardsinfo();

  // .msg.CSNtfAddAward AddAward = 587;
  bool has_addaward() const;
  private:
  bool _internal_has_addaward() const;
  public:
  void clear_addaward();
  const ::msg::CSNtfAddAward& addaward() const;
  PROTOBUF_NODISCARD ::msg::CSNtfAddAward* release_addaward();
  ::msg::CSNtfAddAward* mutable_addaward();
  void set_allocated_addaward(::msg::CSNtfAddAward* addaward);
  private:
  const ::msg::CSNtfAddAward& _internal_addaward() const;
  ::msg::CSNtfAddAward* _internal_mutable_addaward();
  public:
  void unsafe_arena_set_allocated_addaward(
      ::msg::CSNtfAddAward* addaward);
  ::msg::CSNtfAddAward* unsafe_arena_release_addaward();

  // .msg.CSNtfLimitRefresh LimitRefresh = 588;
  bool has_limitrefresh() const;
  private:
  bool _internal_has_limitrefresh() const;
  public:
  void clear_limitrefresh();
  const ::msg::CSNtfLimitRefresh& limitrefresh() const;
  PROTOBUF_NODISCARD ::msg::CSNtfLimitRefresh* release_limitrefresh();
  ::msg::CSNtfLimitRefresh* mutable_limitrefresh();
  void set_allocated_limitrefresh(::msg::CSNtfLimitRefresh* limitrefresh);
  private:
  const ::msg::CSNtfLimitRefresh& _internal_limitrefresh() const;
  ::msg::CSNtfLimitRefresh* _internal_mutable_limitrefresh();
  public:
  void unsafe_arena_set_allocated_limitrefresh(
      ::msg::CSNtfLimitRefresh* limitrefresh);
  ::msg::CSNtfLimitRefresh* unsafe_arena_release_limitrefresh();

  // .msg.CSNtfUpdateNotice UpdateNotice = 589;
  bool has_updatenotice() const;
  private:
  bool _internal_has_updatenotice() const;
  public:
  void clear_updatenotice();
  const ::msg::CSNtfUpdateNotice& updatenotice() const;
  PROTOBUF_NODISCARD ::msg::CSNtfUpdateNotice* release_updatenotice();
  ::msg::CSNtfUpdateNotice* mutable_updatenotice();
  void set_allocated_updatenotice(::msg::CSNtfUpdateNotice* updatenotice);
  private:
  const ::msg::CSNtfUpdateNotice& _internal_updatenotice() const;
  ::msg::CSNtfUpdateNotice* _internal_mutable_updatenotice();
  public:
  void unsafe_arena_set_allocated_updatenotice(
      ::msg::CSNtfUpdateNotice* updatenotice);
  ::msg::CSNtfUpdateNotice* unsafe_arena_release_updatenotice();

  // .msg.CSNtfUpdatePveChallengeCount UpdatePveChallengeCount = 590;
  bool has_updatepvechallengecount() const;
  private:
  bool _internal_has_updatepvechallengecount() const;
  public:
  void clear_updatepvechallengecount();
  const ::msg::CSNtfUpdatePveChallengeCount& updatepvechallengecount() const;
  PROTOBUF_NODISCARD ::msg::CSNtfUpdatePveChallengeCount* release_updatepvechallengecount();
  ::msg::CSNtfUpdatePveChallengeCount* mutable_updatepvechallengecount();
  void set_allocated_updatepvechallengecount(::msg::CSNtfUpdatePveChallengeCount* updatepvechallengecount);
  private:
  const ::msg::CSNtfUpdatePveChallengeCount& _internal_updatepvechallengecount() const;
  ::msg::CSNtfUpdatePveChallengeCount* _internal_mutable_updatepvechallengecount();
  public:
  void unsafe_arena_set_allocated_updatepvechallengecount(
      ::msg::CSNtfUpdatePveChallengeCount* updatepvechallengecount);
  ::msg::CSNtfUpdatePveChallengeCount* unsafe_arena_release_updatepvechallengecount();

  // .msg.CSNtfAdDiscount AdDiscount = 591;
  bool has_addiscount() const;
  private:
  bool _internal_has_addiscount() const;
  public:
  void clear_addiscount();
  const ::msg::CSNtfAdDiscount& addiscount() const;
  PROTOBUF_NODISCARD ::msg::CSNtfAdDiscount* release_addiscount();
  ::msg::CSNtfAdDiscount* mutable_addiscount();
  void set_allocated_addiscount(::msg::CSNtfAdDiscount* addiscount);
  private:
  const ::msg::CSNtfAdDiscount& _internal_addiscount() const;
  ::msg::CSNtfAdDiscount* _internal_mutable_addiscount();
  public:
  void unsafe_arena_set_allocated_addiscount(
      ::msg::CSNtfAdDiscount* addiscount);
  ::msg::CSNtfAdDiscount* unsafe_arena_release_addiscount();

  // .msg.CSNtfCalcMmr CalcMmr = 592;
  bool has_calcmmr() const;
  private:
  bool _internal_has_calcmmr() const;
  public:
  void clear_calcmmr();
  const ::msg::CSNtfCalcMmr& calcmmr() const;
  PROTOBUF_NODISCARD ::msg::CSNtfCalcMmr* release_calcmmr();
  ::msg::CSNtfCalcMmr* mutable_calcmmr();
  void set_allocated_calcmmr(::msg::CSNtfCalcMmr* calcmmr);
  private:
  const ::msg::CSNtfCalcMmr& _internal_calcmmr() const;
  ::msg::CSNtfCalcMmr* _internal_mutable_calcmmr();
  public:
  void unsafe_arena_set_allocated_calcmmr(
      ::msg::CSNtfCalcMmr* calcmmr);
  ::msg::CSNtfCalcMmr* unsafe_arena_release_calcmmr();

  // .msg.CSNtfBag Bag = 593;
  bool has_bag() const;
  private:
  bool _internal_has_bag() const;
  public:
  void clear_bag();
  const ::msg::CSNtfBag& bag() const;
  PROTOBUF_NODISCARD ::msg::CSNtfBag* release_bag();
  ::msg::CSNtfBag* mutable_bag();
  void set_allocated_bag(::msg::CSNtfBag* bag);
  private:
  const ::msg::CSNtfBag& _internal_bag() const;
  ::msg::CSNtfBag* _internal_mutable_bag();
  public:
  void unsafe_arena_set_allocated_bag(
      ::msg::CSNtfBag* bag);
  ::msg::CSNtfBag* unsafe_arena_release_bag();

  // .msg.CSNtfItemAttributes ItemAttributes = 594;
  bool has_itemattributes() const;
  private:
  bool _internal_has_itemattributes() const;
  public:
  void clear_itemattributes();
  const ::msg::CSNtfItemAttributes& itemattributes() const;
  PROTOBUF_NODISCARD ::msg::CSNtfItemAttributes* release_itemattributes();
  ::msg::CSNtfItemAttributes* mutable_itemattributes();
  void set_allocated_itemattributes(::msg::CSNtfItemAttributes* itemattributes);
  private:
  const ::msg::CSNtfItemAttributes& _internal_itemattributes() const;
  ::msg::CSNtfItemAttributes* _internal_mutable_itemattributes();
  public:
  void unsafe_arena_set_allocated_itemattributes(
      ::msg::CSNtfItemAttributes* itemattributes);
  ::msg::CSNtfItemAttributes* unsafe_arena_release_itemattributes();

  // .msg.CSNtfPvpAffixTrigger PVPAffixTrigger = 595;
  bool has_pvpaffixtrigger() const;
  private:
  bool _internal_has_pvpaffixtrigger() const;
  public:
  void clear_pvpaffixtrigger();
  const ::msg::CSNtfPvpAffixTrigger& pvpaffixtrigger() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPvpAffixTrigger* release_pvpaffixtrigger();
  ::msg::CSNtfPvpAffixTrigger* mutable_pvpaffixtrigger();
  void set_allocated_pvpaffixtrigger(::msg::CSNtfPvpAffixTrigger* pvpaffixtrigger);
  private:
  const ::msg::CSNtfPvpAffixTrigger& _internal_pvpaffixtrigger() const;
  ::msg::CSNtfPvpAffixTrigger* _internal_mutable_pvpaffixtrigger();
  public:
  void unsafe_arena_set_allocated_pvpaffixtrigger(
      ::msg::CSNtfPvpAffixTrigger* pvpaffixtrigger);
  ::msg::CSNtfPvpAffixTrigger* unsafe_arena_release_pvpaffixtrigger();

  // .msg.CSNtfUpdatePvpData UpdatePvpData = 596;
  bool has_updatepvpdata() const;
  private:
  bool _internal_has_updatepvpdata() const;
  public:
  void clear_updatepvpdata();
  const ::msg::CSNtfUpdatePvpData& updatepvpdata() const;
  PROTOBUF_NODISCARD ::msg::CSNtfUpdatePvpData* release_updatepvpdata();
  ::msg::CSNtfUpdatePvpData* mutable_updatepvpdata();
  void set_allocated_updatepvpdata(::msg::CSNtfUpdatePvpData* updatepvpdata);
  private:
  const ::msg::CSNtfUpdatePvpData& _internal_updatepvpdata() const;
  ::msg::CSNtfUpdatePvpData* _internal_mutable_updatepvpdata();
  public:
  void unsafe_arena_set_allocated_updatepvpdata(
      ::msg::CSNtfUpdatePvpData* updatepvpdata);
  ::msg::CSNtfUpdatePvpData* unsafe_arena_release_updatepvpdata();

  // .msg.CSNtfUpgradePassport UpgradePassport = 597;
  bool has_upgradepassport() const;
  private:
  bool _internal_has_upgradepassport() const;
  public:
  void clear_upgradepassport();
  const ::msg::CSNtfUpgradePassport& upgradepassport() const;
  PROTOBUF_NODISCARD ::msg::CSNtfUpgradePassport* release_upgradepassport();
  ::msg::CSNtfUpgradePassport* mutable_upgradepassport();
  void set_allocated_upgradepassport(::msg::CSNtfUpgradePassport* upgradepassport);
  private:
  const ::msg::CSNtfUpgradePassport& _internal_upgradepassport() const;
  ::msg::CSNtfUpgradePassport* _internal_mutable_upgradepassport();
  public:
  void unsafe_arena_set_allocated_upgradepassport(
      ::msg::CSNtfUpgradePassport* upgradepassport);
  ::msg::CSNtfUpgradePassport* unsafe_arena_release_upgradepassport();

  // .msg.CSNtfUpdateTeamDeBuff UpdateTeamDeBuff = 598;
  bool has_updateteamdebuff() const;
  private:
  bool _internal_has_updateteamdebuff() const;
  public:
  void clear_updateteamdebuff();
  const ::msg::CSNtfUpdateTeamDeBuff& updateteamdebuff() const;
  PROTOBUF_NODISCARD ::msg::CSNtfUpdateTeamDeBuff* release_updateteamdebuff();
  ::msg::CSNtfUpdateTeamDeBuff* mutable_updateteamdebuff();
  void set_allocated_updateteamdebuff(::msg::CSNtfUpdateTeamDeBuff* updateteamdebuff);
  private:
  const ::msg::CSNtfUpdateTeamDeBuff& _internal_updateteamdebuff() const;
  ::msg::CSNtfUpdateTeamDeBuff* _internal_mutable_updateteamdebuff();
  public:
  void unsafe_arena_set_allocated_updateteamdebuff(
      ::msg::CSNtfUpdateTeamDeBuff* updateteamdebuff);
  ::msg::CSNtfUpdateTeamDeBuff* unsafe_arena_release_updateteamdebuff();

  // .msg.CSNtfPveEval PveEval = 599;
  bool has_pveeval() const;
  private:
  bool _internal_has_pveeval() const;
  public:
  void clear_pveeval();
  const ::msg::CSNtfPveEval& pveeval() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPveEval* release_pveeval();
  ::msg::CSNtfPveEval* mutable_pveeval();
  void set_allocated_pveeval(::msg::CSNtfPveEval* pveeval);
  private:
  const ::msg::CSNtfPveEval& _internal_pveeval() const;
  ::msg::CSNtfPveEval* _internal_mutable_pveeval();
  public:
  void unsafe_arena_set_allocated_pveeval(
      ::msg::CSNtfPveEval* pveeval);
  ::msg::CSNtfPveEval* unsafe_arena_release_pveeval();

  // .msg.CSNtfUnlockCardGroup UnlockCardGroup = 600;
  bool has_unlockcardgroup() const;
  private:
  bool _internal_has_unlockcardgroup() const;
  public:
  void clear_unlockcardgroup();
  const ::msg::CSNtfUnlockCardGroup& unlockcardgroup() const;
  PROTOBUF_NODISCARD ::msg::CSNtfUnlockCardGroup* release_unlockcardgroup();
  ::msg::CSNtfUnlockCardGroup* mutable_unlockcardgroup();
  void set_allocated_unlockcardgroup(::msg::CSNtfUnlockCardGroup* unlockcardgroup);
  private:
  const ::msg::CSNtfUnlockCardGroup& _internal_unlockcardgroup() const;
  ::msg::CSNtfUnlockCardGroup* _internal_mutable_unlockcardgroup();
  public:
  void unsafe_arena_set_allocated_unlockcardgroup(
      ::msg::CSNtfUnlockCardGroup* unlockcardgroup);
  ::msg::CSNtfUnlockCardGroup* unsafe_arena_release_unlockcardgroup();

  // .msg.CSNtfCustomPveActivity CustomPveActivity = 601;
  bool has_custompveactivity() const;
  private:
  bool _internal_has_custompveactivity() const;
  public:
  void clear_custompveactivity();
  const ::msg::CSNtfCustomPveActivity& custompveactivity() const;
  PROTOBUF_NODISCARD ::msg::CSNtfCustomPveActivity* release_custompveactivity();
  ::msg::CSNtfCustomPveActivity* mutable_custompveactivity();
  void set_allocated_custompveactivity(::msg::CSNtfCustomPveActivity* custompveactivity);
  private:
  const ::msg::CSNtfCustomPveActivity& _internal_custompveactivity() const;
  ::msg::CSNtfCustomPveActivity* _internal_mutable_custompveactivity();
  public:
  void unsafe_arena_set_allocated_custompveactivity(
      ::msg::CSNtfCustomPveActivity* custompveactivity);
  ::msg::CSNtfCustomPveActivity* unsafe_arena_release_custompveactivity();

  // .msg.CSNtfGmBan CSNtfGmBan = 602;
  bool has_csntfgmban() const;
  private:
  bool _internal_has_csntfgmban() const;
  public:
  void clear_csntfgmban();
  const ::msg::CSNtfGmBan& csntfgmban() const;
  PROTOBUF_NODISCARD ::msg::CSNtfGmBan* release_csntfgmban();
  ::msg::CSNtfGmBan* mutable_csntfgmban();
  void set_allocated_csntfgmban(::msg::CSNtfGmBan* csntfgmban);
  private:
  const ::msg::CSNtfGmBan& _internal_csntfgmban() const;
  ::msg::CSNtfGmBan* _internal_mutable_csntfgmban();
  public:
  void unsafe_arena_set_allocated_csntfgmban(
      ::msg::CSNtfGmBan* csntfgmban);
  ::msg::CSNtfGmBan* unsafe_arena_release_csntfgmban();

  // .msg.CSNtfTDPlayerInfo TDPlayerInfo = 603;
  bool has_tdplayerinfo() const;
  private:
  bool _internal_has_tdplayerinfo() const;
  public:
  void clear_tdplayerinfo();
  const ::msg::CSNtfTDPlayerInfo& tdplayerinfo() const;
  PROTOBUF_NODISCARD ::msg::CSNtfTDPlayerInfo* release_tdplayerinfo();
  ::msg::CSNtfTDPlayerInfo* mutable_tdplayerinfo();
  void set_allocated_tdplayerinfo(::msg::CSNtfTDPlayerInfo* tdplayerinfo);
  private:
  const ::msg::CSNtfTDPlayerInfo& _internal_tdplayerinfo() const;
  ::msg::CSNtfTDPlayerInfo* _internal_mutable_tdplayerinfo();
  public:
  void unsafe_arena_set_allocated_tdplayerinfo(
      ::msg::CSNtfTDPlayerInfo* tdplayerinfo);
  ::msg::CSNtfTDPlayerInfo* unsafe_arena_release_tdplayerinfo();

  // .msg.CSNtfMentorInviteMsg MentorInviteMsg = 604;
  bool has_mentorinvitemsg() const;
  private:
  bool _internal_has_mentorinvitemsg() const;
  public:
  void clear_mentorinvitemsg();
  const ::msg::CSNtfMentorInviteMsg& mentorinvitemsg() const;
  PROTOBUF_NODISCARD ::msg::CSNtfMentorInviteMsg* release_mentorinvitemsg();
  ::msg::CSNtfMentorInviteMsg* mutable_mentorinvitemsg();
  void set_allocated_mentorinvitemsg(::msg::CSNtfMentorInviteMsg* mentorinvitemsg);
  private:
  const ::msg::CSNtfMentorInviteMsg& _internal_mentorinvitemsg() const;
  ::msg::CSNtfMentorInviteMsg* _internal_mutable_mentorinvitemsg();
  public:
  void unsafe_arena_set_allocated_mentorinvitemsg(
      ::msg::CSNtfMentorInviteMsg* mentorinvitemsg);
  ::msg::CSNtfMentorInviteMsg* unsafe_arena_release_mentorinvitemsg();

  // .msg.CSNtfBecomeMentor BecomeMentor = 605;
  bool has_becomementor() const;
  private:
  bool _internal_has_becomementor() const;
  public:
  void clear_becomementor();
  const ::msg::CSNtfBecomeMentor& becomementor() const;
  PROTOBUF_NODISCARD ::msg::CSNtfBecomeMentor* release_becomementor();
  ::msg::CSNtfBecomeMentor* mutable_becomementor();
  void set_allocated_becomementor(::msg::CSNtfBecomeMentor* becomementor);
  private:
  const ::msg::CSNtfBecomeMentor& _internal_becomementor() const;
  ::msg::CSNtfBecomeMentor* _internal_mutable_becomementor();
  public:
  void unsafe_arena_set_allocated_becomementor(
      ::msg::CSNtfBecomeMentor* becomementor);
  ::msg::CSNtfBecomeMentor* unsafe_arena_release_becomementor();

  // .msg.CSNtfMentorRelation MentorRelation = 606;
  bool has_mentorrelation() const;
  private:
  bool _internal_has_mentorrelation() const;
  public:
  void clear_mentorrelation();
  const ::msg::CSNtfMentorRelation& mentorrelation() const;
  PROTOBUF_NODISCARD ::msg::CSNtfMentorRelation* release_mentorrelation();
  ::msg::CSNtfMentorRelation* mutable_mentorrelation();
  void set_allocated_mentorrelation(::msg::CSNtfMentorRelation* mentorrelation);
  private:
  const ::msg::CSNtfMentorRelation& _internal_mentorrelation() const;
  ::msg::CSNtfMentorRelation* _internal_mutable_mentorrelation();
  public:
  void unsafe_arena_set_allocated_mentorrelation(
      ::msg::CSNtfMentorRelation* mentorrelation);
  ::msg::CSNtfMentorRelation* unsafe_arena_release_mentorrelation();

  // .msg.CSNtfPupilTaskUpdate MentorShipTaskUpdate = 607;
  bool has_mentorshiptaskupdate() const;
  private:
  bool _internal_has_mentorshiptaskupdate() const;
  public:
  void clear_mentorshiptaskupdate();
  const ::msg::CSNtfPupilTaskUpdate& mentorshiptaskupdate() const;
  PROTOBUF_NODISCARD ::msg::CSNtfPupilTaskUpdate* release_mentorshiptaskupdate();
  ::msg::CSNtfPupilTaskUpdate* mutable_mentorshiptaskupdate();
  void set_allocated_mentorshiptaskupdate(::msg::CSNtfPupilTaskUpdate* mentorshiptaskupdate);
  private:
  const ::msg::CSNtfPupilTaskUpdate& _internal_mentorshiptaskupdate() const;
  ::msg::CSNtfPupilTaskUpdate* _internal_mutable_mentorshiptaskupdate();
  public:
  void unsafe_arena_set_allocated_mentorshiptaskupdate(
      ::msg::CSNtfPupilTaskUpdate* mentorshiptaskupdate);
  ::msg::CSNtfPupilTaskUpdate* unsafe_arena_release_mentorshiptaskupdate();

  // .msg.CSNtfMentorLevel MentorLevel = 608;
  bool has_mentorlevel() const;
  private:
  bool _internal_has_mentorlevel() const;
  public:
  void clear_mentorlevel();
  const ::msg::CSNtfMentorLevel& mentorlevel() const;
  PROTOBUF_NODISCARD ::msg::CSNtfMentorLevel* release_mentorlevel();
  ::msg::CSNtfMentorLevel* mutable_mentorlevel();
  void set_allocated_mentorlevel(::msg::CSNtfMentorLevel* mentorlevel);
  private:
  const ::msg::CSNtfMentorLevel& _internal_mentorlevel() const;
  ::msg::CSNtfMentorLevel* _internal_mutable_mentorlevel();
  public:
  void unsafe_arena_set_allocated_mentorlevel(
      ::msg::CSNtfMentorLevel* mentorlevel);
  ::msg::CSNtfMentorLevel* unsafe_arena_release_mentorlevel();

  // .msg.CSNtfCurDressUpdate CurDressUpdate = 609;
  bool has_curdressupdate() const;
  private:
  bool _internal_has_curdressupdate() const;
  public:
  void clear_curdressupdate();
  const ::msg::CSNtfCurDressUpdate& curdressupdate() const;
  PROTOBUF_NODISCARD ::msg::CSNtfCurDressUpdate* release_curdressupdate();
  ::msg::CSNtfCurDressUpdate* mutable_curdressupdate();
  void set_allocated_curdressupdate(::msg::CSNtfCurDressUpdate* curdressupdate);
  private:
  const ::msg::CSNtfCurDressUpdate& _internal_curdressupdate() const;
  ::msg::CSNtfCurDressUpdate* _internal_mutable_curdressupdate();
  public:
  void unsafe_arena_set_allocated_curdressupdate(
      ::msg::CSNtfCurDressUpdate* curdressupdate);
  ::msg::CSNtfCurDressUpdate* unsafe_arena_release_curdressupdate();

  // .msg.CSNtfChangeExchangeMark ChangeExchangeMark = 610;
  bool has_changeexchangemark() const;
  private:
  bool _internal_has_changeexchangemark() const;
  public:
  void clear_changeexchangemark();
  const ::msg::CSNtfChangeExchangeMark& changeexchangemark() const;
  PROTOBUF_NODISCARD ::msg::CSNtfChangeExchangeMark* release_changeexchangemark();
  ::msg::CSNtfChangeExchangeMark* mutable_changeexchangemark();
  void set_allocated_changeexchangemark(::msg::CSNtfChangeExchangeMark* changeexchangemark);
  private:
  const ::msg::CSNtfChangeExchangeMark& _internal_changeexchangemark() const;
  ::msg::CSNtfChangeExchangeMark* _internal_mutable_changeexchangemark();
  public:
  void unsafe_arena_set_allocated_changeexchangemark(
      ::msg::CSNtfChangeExchangeMark* changeexchangemark);
  ::msg::CSNtfChangeExchangeMark* unsafe_arena_release_changeexchangemark();

  // .msg.CSNtfRefreshPassport RefreshPassport = 611;
  bool has_refreshpassport() const;
  private:
  bool _internal_has_refreshpassport() const;
  public:
  void clear_refreshpassport();
  const ::msg::CSNtfRefreshPassport& refreshpassport() const;
  PROTOBUF_NODISCARD ::msg::CSNtfRefreshPassport* release_refreshpassport();
  ::msg::CSNtfRefreshPassport* mutable_refreshpassport();
  void set_allocated_refreshpassport(::msg::CSNtfRefreshPassport* refreshpassport);
  private:
  const ::msg::CSNtfRefreshPassport& _internal_refreshpassport() const;
  ::msg::CSNtfRefreshPassport* _internal_mutable_refreshpassport();
  public:
  void unsafe_arena_set_allocated_refreshpassport(
      ::msg::CSNtfRefreshPassport* refreshpassport);
  ::msg::CSNtfRefreshPassport* unsafe_arena_release_refreshpassport();

  // .msg.CSNtfGmRemoveMail GmRemoveMail = 612;
  bool has_gmremovemail() const;
  private:
  bool _internal_has_gmremovemail() const;
  public:
  void clear_gmremovemail();
  const ::msg::CSNtfGmRemoveMail& gmremovemail() const;
  PROTOBUF_NODISCARD ::msg::CSNtfGmRemoveMail* release_gmremovemail();
  ::msg::CSNtfGmRemoveMail* mutable_gmremovemail();
  void set_allocated_gmremovemail(::msg::CSNtfGmRemoveMail* gmremovemail);
  private:
  const ::msg::CSNtfGmRemoveMail& _internal_gmremovemail() const;
  ::msg::CSNtfGmRemoveMail* _internal_mutable_gmremovemail();
  public:
  void unsafe_arena_set_allocated_gmremovemail(
      ::msg::CSNtfGmRemoveMail* gmremovemail);
  ::msg::CSNtfGmRemoveMail* unsafe_arena_release_gmremovemail();

  // .msg.CSNtfAutoUseItem AutoUseItem = 613;
  bool has_autouseitem() const;
  private:
  bool _internal_has_autouseitem() const;
  public:
  void clear_autouseitem();
  const ::msg::CSNtfAutoUseItem& autouseitem() const;
  PROTOBUF_NODISCARD ::msg::CSNtfAutoUseItem* release_autouseitem();
  ::msg::CSNtfAutoUseItem* mutable_autouseitem();
  void set_allocated_autouseitem(::msg::CSNtfAutoUseItem* autouseitem);
  private:
  const ::msg::CSNtfAutoUseItem& _internal_autouseitem() const;
  ::msg::CSNtfAutoUseItem* _internal_mutable_autouseitem();
  public:
  void unsafe_arena_set_allocated_autouseitem(
      ::msg::CSNtfAutoUseItem* autouseitem);
  ::msg::CSNtfAutoUseItem* unsafe_arena_release_autouseitem();

  // @@protoc_insertion_point(class_scope:msg.CSNtfBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMail > mails_;
    ::msg::CSNtfKickOff* kickoff_;
    ::msg::CSNtfWait* ntfwait_;
    ::msg::CSNtfPassDayBody* passday_;
    ::msg::CSNtfPassWeekBody* passweek_;
    ::msg::CSNtfPassMonthBody* passmonth_;
    ::msg::CSNtfWorldChat* worldchat_;
    ::msg::CSNtfHeadPic* headpic_;
    ::msg::CSNtfPvpMatch* pvpmatch_;
    ::msg::CSNtfPvp* pvp_;
    ::msg::CSNtfPvpMatchCancel* pvpmatchcancel_;
    ::msg::CSNtfPvpStatus* pvpstatus_;
    ::msg::CSNtfPvpPlayerReady* ntfpvpplayerready_;
    ::msg::CSNtfPvpBegin* pvpbegin_;
    ::msg::CSNtfPlayerFinish* playerfinish_;
    ::msg::CSNtfPvpEnd* pvpend_;
    ::msg::CSNtfMarquee* marquee_;
    ::msg::CSNtfRemoveMarquee* removemarquee_;
    ::msg::CSNtfLoadingProgress* loadingprogress_;
    ::msg::CSNtfPvpChat* pvpchat_;
    ::msg::CSNtfReload* reload_;
    ::msg::CSNtfPay* pay_;
    ::msg::CSNtfChat* chat_;
    ::msg::CSNtfFollowList* followlist_;
    ::msg::CSNtfNewFollower* newfollower_;
    ::msg::CSNtfLostFollower* lostfollower_;
    ::msg::CSNtfInviteJoinTeam* invitejointeam_;
    ::msg::CSNtfPlayerJoinTeam* playerjointeam_;
    ::msg::CSNtfPlayerLeaveTeam* playerleaveteam_;
    ::msg::CSNtfKickOffTeamPlayer* kickoffteamplayer_;
    ::msg::CSNtfTeamMsg* teammsg_;
    ::msg::CSNtfTeamReady* teamready_;
    ::msg::CSNtfRejectJoinTeam* rejectjointeam_;
    ::msg::CSNtfNotice* notice_;
    ::msg::CSNtfRemoveNotice* removenotice_;
    ::msg::CSNtfUpgradeBattleStage* upgradebattlestage_;
    ::msg::CSNtfPassportTaskProgress* passporttaskprogress_;
    ::msg::CSNtfRankSeasonEval* rankseasoneval_;
    ::msg::CSNtfBindAccounts* bindaccounts_;
    ::msg::CSNtfSeasonTaskProgress* seasontaskprogress_;
    ::msg::CSNtfAlphaActivity* alphaactivity_;
    ::msg::CSNtfOffSeasonToNewSeason* offseasontonewseason_;
    ::msg::CSNtfLanguageMd5List* languagemd5list_;
    ::msg::CSNtfActivityProgress* activityprogress_;
    ::msg::CSNtfRemoveActivity* removeactivity_;
    ::msg::CSNtfActivityConfig* activityconfig_;
    ::msg::CSNtfMeleeTaskProgress* meleetaskprogress_;
    ::msg::CSNtfSetTeamMode* setteammode_;
    ::msg::CSNtfPassportOpen* passportopen_;
    ::msg::CSNtfPassportClose* passportclose_;
    ::msg::CSNtfWeekIndex* weekindex_;
    ::msg::CSNtfPvpHistory* pvphistory_;
    ::msg::CSNtfTeamPvpEnd* teampvpend_;
    ::msg::CSNtfProbeNetDelay* probenetdelay_;
    ::msg::CSNtfRefreshGoods* refreshgoods_;
    ::msg::CSNtfRemoveEggs* removeeggs_;
    ::msg::CSNtfSwitchSet* switchset_;
    ::msg::CSNtfBlacklist* blacklist_;
    ::msg::CSNtfBindPhoneNumberSwitch* bindphonenumberswitch_;
    ::msg::CSNtfWorldInvite* worldinvite_;
    ::msg::CSNtfMallNotice* mallnotice_;
    ::msg::CSNtfPrivilege* privilege_;
    ::msg::CSNtfAARemind* aaremind_;
    ::msg::CSNtfAABan* aaban_;
    ::msg::CSNtfAAVerify* aaverify_;
    ::msg::CSNtfPhoneNumber* phonenumber_;
    ::msg::CSNtfAntiCallBack* anticallback_;
    ::msg::CSNtfFortuneBagTime* fortunebagtime_;
    ::msg::CSNtfUpdateItem* updateitem_;
    ::msg::CSNtfCreditScore* creditscore_;
    ::msg::CSNtfBuffAct* buffact_;
    ::msg::CSNtfActivityGroup* activitygroup_;
    ::msg::CSNtfClearChat* clearchat_;
    ::msg::CSNtfForbidInfo* forbidinfo_;
    ::msg::CSNtfMidasDiamond* midasdiamond_;
    ::msg::CSNtfJoinVoiceTeam* joinvoiceteam_;
    ::msg::CSNtfJoinVoicePvp* joinvoicepvp_;
    ::msg::CSNtfJoinVoiceCamp* joinvoicecamp_;
    ::msg::CSNtfWxVVip* wxvvip_;
    ::msg::CSNtfFreeFlow* freeflow_;
    ::msg::CSNtfObserveStatus* observestatus_;
    ::msg::CSNtfGameMarquee* gamemarquee_;
    ::msg::CSNtfWxRedPacket* wxredpacket_;
    ::msg::CSNtfGmSysMsg* gmsysmsg_;
    ::msg::CSNtfNewPunishment* newpunishment_;
    ::msg::CSNtfTeamSlot* teamslot_;
    ::msg::CSNtfTeamSubMode* teamsubmode_;
    ::msg::CSNtfTeamSlotStatus* teamslotstatus_;
    ::msg::CSNtfPunishmentInfo* punishmentinfo_;
    ::msg::CSNtfRemovePunishment* removepunishment_;
    ::msg::CSNtfPvpConfirm* pvpconfirm_;
    ::msg::CSNtfMatchSuccess* matchsuccess_;
    ::msg::CSNtfOldBusinessPlayer* oldbusinessplayer_;
    ::msg::CSNtfChangeTeamSlot* changeteamslot_;
    ::msg::CSNtfRefuseChangeTeamSlot* refusechangeteamslot_;
    ::msg::CSNtfCancelChangeSlot* cancelchangeslot_;
    ::msg::CSNtfShowChessSkin* showchessskin_;
    ::msg::CSNtfOnHelpReddot* onhelpreddot_;
    ::msg::CSNtfBagUpdate* bagupdate_;
    ::msg::CSNtfRefreshMelee* refreshmelee_;
    ::msg::CSNtfWebLogin* weblogin_;
    ::msg::CSNtfCurrentTournament* currenttournament_;
    ::msg::CSNtfTournamentBegin* tournamentbegin_;
    ::msg::CSNtfTournamentEnrollBegin* tournamentenrollbegin_;
    ::msg::CSNtfTournamentEnrollEnd* tournamentenrollend_;
    ::msg::CSNtfJoinTournamentRoom* jointournamentroom_;
    ::msg::CSNtfTournamentEnd* tournamentend_;
    ::msg::CSNtfTournamentOut* tournamentout_;
    ::msg::CSNtfTournamentRoundEnd* tournamentroundend_;
    ::msg::CSNtfLuckStarAward* luckstaraward_;
    ::msg::CSNtfInviteObserve* inviteobserve_;
    ::msg::CSNtfRejectObserve* rejectobserve_;
    ::msg::CSNtfChestCount* chestcount_;
    ::msg::CSNtfRecruitInfo* recruitinfo_;
    ::msg::CSNtfRecruitPlayer* recruitplayer_;
    ::msg::CSNtfRecruitPlayerBattle* recruitplayerbattle_;
    ::msg::CSNtfBetOnBounty* betonbounty_;
    ::msg::CSNtfActivityTaskUnlock* activitytaskunlock_;
    ::msg::CSNtfPsServerOnly* psserveronly_;
    ::msg::CSNtfAddThirdPvpInfo* addthirdpvpinfo_;
    ::msg::CSNtfDelThirdPvpInfo* delthirdpvpinfo_;
    ::msg::CSNtfPs4ServerOnly* ps4serveronly_;
    ::msg::CSNtfLuckMallGoods* luckmallgoods_;
    ::msg::CSNtfChessListErr* chesslisterr_;
    ::msg::CSNtfChestRecord* chestrecord_;
    ::msg::CSNtfGOAInfo* goainfo_;
    ::msg::CSNtfMedalInfos* medalinfo_;
    ::msg::CSNtfMedalId* medalid_;
    ::msg::CSNtfPvpReset* pvpreset_;
    ::msg::CSNtfDelMail* delmail_;
    ::msg::CSNtfItemInfo* iteminfo_;
    ::msg::CSNtfPassportNum* passportnum_;
    ::msg::CSNtfPassportYearCardNum* passportyearcardnum_;
    ::msg::CSNtfTeamOP* teamop_;
    ::msg::CSNtfTeamDismiss* teamdismiss_;
    ::msg::CSNtfSwitchModeInTeam* switchmodeinteam_;
    ::msg::CSNtfAddBanner* addbanner_;
    ::msg::CSNtfRemoveBanner* removebanner_;
    ::msg::CSNtfSingleRoundFlow* singleroundflow_;
    ::msg::CSNtfTeamStatus* teamstatus_;
    ::msg::CSNtfTNGameEnd* tngameend_;
    ::msg::CSNtfPlayerLackResourceInTeam* playerlackresource_;
    ::msg::CSNtfFavMapRemoved* favmapremoved_;
    ::msg::CSNtfWorkshopMatchResult* workshopmatchresult_;
    ::msg::CSNtfBigWinnerExpandMatch* bigwinnerexpandmatch_;
    ::msg::CSNtfVerifyRealName* verifyrealname_;
    ::msg::CSNtfGuildJoin* guildjoin_;
    ::msg::CSNtfGuildMemberChange* memberchange_;
    ::msg::CSNtfGuildKickoff* guildkickoff_;
    ::msg::CSNtfGuildRoleChange* guildrolechange_;
    ::msg::CSNtfGuildAttrChange* guildattrchange_;
    ::msg::CSNtfGuildChat* guildchat_;
    ::msg::CSNtfNewGuildLog* newguildlog_;
    ::msg::CSNtfGuildApplicantChange* applicantchange_;
    ::msg::CSNtfGuildInviteeChange* inviteechange_;
    ::msg::CSNtfGuildNewInvite* guildnewinvite_;
    ::msg::CSNtfGuildInfo* guildinfo_;
    ::msg::CSNtfVngCommentAwardReset* vngawardreset_;
    ::msg::CSNtfAdAward* adaward_;
    ::msg::CSNtfAdCount* adcount_;
    ::msg::CSNtfUIForbid* uiforbid_;
    ::msg::CSNtfPvpUpdateMessengerPos* pvpupdatemessengerpos_;
    ::msg::CSNtfPvpPlayerLoggedIn* pvpplayerloggedin_;
    ::msg::CSNtfPassThrough* passthrough_;
    ::msg::CSNtfAA* aa_;
    ::msg::CSNtfPvpReconnect* pvpreconnect_;
    ::msg::CSNtfUpdateBattleResult* updatebattleresult_;
    ::msg::CSNtfVisitPlayer* visitplayer_;
    ::msg::CSNtfKrIdentityAuth* kridentityauth_;
    ::msg::CSNtfKrAddictionTip* kraddictiontip_;
    ::msg::CSNtfLeaveGameEarly* leavegameearly_;
    ::msg::CSNtfKrAddictionCountdown* kraddictioncountdown_;
    ::msg::CSNtfHistoryChatMsg* histroychatmsg_;
    ::msg::CSNtfSystemGmTime* gmtime_;
    ::msg::CSNtfChangeName* changename_;
    ::msg::CSNtfFirstPay* firstpay_;
    ::msg::CSNtfPlayerExpChanged* expchanged_;
    ::msg::CSNtfTaskProgress* taskprogress_;
    ::msg::CSNtfNewPlayerGuideEnded* newplayerguideended_;
    ::msg::CSNtfTasksInfo* tasksinfo_;
    ::msg::CSNtfPvpAwardsInfo* pvpawardsinfo_;
    ::msg::CSNtfAddAward* addaward_;
    ::msg::CSNtfLimitRefresh* limitrefresh_;
    ::msg::CSNtfUpdateNotice* updatenotice_;
    ::msg::CSNtfUpdatePveChallengeCount* updatepvechallengecount_;
    ::msg::CSNtfAdDiscount* addiscount_;
    ::msg::CSNtfCalcMmr* calcmmr_;
    ::msg::CSNtfBag* bag_;
    ::msg::CSNtfItemAttributes* itemattributes_;
    ::msg::CSNtfPvpAffixTrigger* pvpaffixtrigger_;
    ::msg::CSNtfUpdatePvpData* updatepvpdata_;
    ::msg::CSNtfUpgradePassport* upgradepassport_;
    ::msg::CSNtfUpdateTeamDeBuff* updateteamdebuff_;
    ::msg::CSNtfPveEval* pveeval_;
    ::msg::CSNtfUnlockCardGroup* unlockcardgroup_;
    ::msg::CSNtfCustomPveActivity* custompveactivity_;
    ::msg::CSNtfGmBan* csntfgmban_;
    ::msg::CSNtfTDPlayerInfo* tdplayerinfo_;
    ::msg::CSNtfMentorInviteMsg* mentorinvitemsg_;
    ::msg::CSNtfBecomeMentor* becomementor_;
    ::msg::CSNtfMentorRelation* mentorrelation_;
    ::msg::CSNtfPupilTaskUpdate* mentorshiptaskupdate_;
    ::msg::CSNtfMentorLevel* mentorlevel_;
    ::msg::CSNtfCurDressUpdate* curdressupdate_;
    ::msg::CSNtfChangeExchangeMark* changeexchangemark_;
    ::msg::CSNtfRefreshPassport* refreshpassport_;
    ::msg::CSNtfGmRemoveMail* gmremovemail_;
    ::msg::CSNtfAutoUseItem* autouseitem_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_csprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSHead

// .msg.CSMsgID MsgId = 1;
inline void CSHead::clear_msgid() {
  _impl_.msgid_ = 0;
}
inline ::msg::CSMsgID CSHead::_internal_msgid() const {
  return static_cast< ::msg::CSMsgID >(_impl_.msgid_);
}
inline ::msg::CSMsgID CSHead::msgid() const {
  // @@protoc_insertion_point(field_get:msg.CSHead.MsgId)
  return _internal_msgid();
}
inline void CSHead::_internal_set_msgid(::msg::CSMsgID value) {
  
  _impl_.msgid_ = value;
}
inline void CSHead::set_msgid(::msg::CSMsgID value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:msg.CSHead.MsgId)
}

// uint32 BodyLen = 2;
inline void CSHead::clear_bodylen() {
  _impl_.bodylen_ = 0u;
}
inline uint32_t CSHead::_internal_bodylen() const {
  return _impl_.bodylen_;
}
inline uint32_t CSHead::bodylen() const {
  // @@protoc_insertion_point(field_get:msg.CSHead.BodyLen)
  return _internal_bodylen();
}
inline void CSHead::_internal_set_bodylen(uint32_t value) {
  
  _impl_.bodylen_ = value;
}
inline void CSHead::set_bodylen(uint32_t value) {
  _internal_set_bodylen(value);
  // @@protoc_insertion_point(field_set:msg.CSHead.BodyLen)
}

// bool Compress = 3;
inline void CSHead::clear_compress() {
  _impl_.compress_ = false;
}
inline bool CSHead::_internal_compress() const {
  return _impl_.compress_;
}
inline bool CSHead::compress() const {
  // @@protoc_insertion_point(field_get:msg.CSHead.Compress)
  return _internal_compress();
}
inline void CSHead::_internal_set_compress(bool value) {
  
  _impl_.compress_ = value;
}
inline void CSHead::set_compress(bool value) {
  _internal_set_compress(value);
  // @@protoc_insertion_point(field_set:msg.CSHead.Compress)
}

// uint32 ServerId = 4;
inline void CSHead::clear_serverid() {
  _impl_.serverid_ = 0u;
}
inline uint32_t CSHead::_internal_serverid() const {
  return _impl_.serverid_;
}
inline uint32_t CSHead::serverid() const {
  // @@protoc_insertion_point(field_get:msg.CSHead.ServerId)
  return _internal_serverid();
}
inline void CSHead::_internal_set_serverid(uint32_t value) {
  
  _impl_.serverid_ = value;
}
inline void CSHead::set_serverid(uint32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:msg.CSHead.ServerId)
}

// -------------------------------------------------------------------

// CSReqBody

// uint64 Seq = 1;
inline void CSReqBody::clear_seq() {
  _impl_.seq_ = uint64_t{0u};
}
inline uint64_t CSReqBody::_internal_seq() const {
  return _impl_.seq_;
}
inline uint64_t CSReqBody::seq() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.Seq)
  return _internal_seq();
}
inline void CSReqBody::_internal_set_seq(uint64_t value) {
  
  _impl_.seq_ = value;
}
inline void CSReqBody::set_seq(uint64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:msg.CSReqBody.Seq)
}

// .msg.CSReqHeart Heart = 2;
inline bool CSReqBody::_internal_has_heart() const {
  return this != internal_default_instance() && _impl_.heart_ != nullptr;
}
inline bool CSReqBody::has_heart() const {
  return _internal_has_heart();
}
inline const ::msg::CSReqHeart& CSReqBody::_internal_heart() const {
  const ::msg::CSReqHeart* p = _impl_.heart_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqHeart&>(
      ::msg::_CSReqHeart_default_instance_);
}
inline const ::msg::CSReqHeart& CSReqBody::heart() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.Heart)
  return _internal_heart();
}
inline void CSReqBody::unsafe_arena_set_allocated_heart(
    ::msg::CSReqHeart* heart) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.heart_);
  }
  _impl_.heart_ = heart;
  if (heart) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.Heart)
}
inline ::msg::CSReqHeart* CSReqBody::release_heart() {
  
  ::msg::CSReqHeart* temp = _impl_.heart_;
  _impl_.heart_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqHeart* CSReqBody::unsafe_arena_release_heart() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.Heart)
  
  ::msg::CSReqHeart* temp = _impl_.heart_;
  _impl_.heart_ = nullptr;
  return temp;
}
inline ::msg::CSReqHeart* CSReqBody::_internal_mutable_heart() {
  
  if (_impl_.heart_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqHeart>(GetArenaForAllocation());
    _impl_.heart_ = p;
  }
  return _impl_.heart_;
}
inline ::msg::CSReqHeart* CSReqBody::mutable_heart() {
  ::msg::CSReqHeart* _msg = _internal_mutable_heart();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.Heart)
  return _msg;
}
inline void CSReqBody::set_allocated_heart(::msg::CSReqHeart* heart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.heart_);
  }
  if (heart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heart));
    if (message_arena != submessage_arena) {
      heart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heart, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.heart_ = heart;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.Heart)
}

// .msg.CSReqLogin Login = 3;
inline bool CSReqBody::_internal_has_login() const {
  return this != internal_default_instance() && _impl_.login_ != nullptr;
}
inline bool CSReqBody::has_login() const {
  return _internal_has_login();
}
inline const ::msg::CSReqLogin& CSReqBody::_internal_login() const {
  const ::msg::CSReqLogin* p = _impl_.login_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqLogin&>(
      ::msg::_CSReqLogin_default_instance_);
}
inline const ::msg::CSReqLogin& CSReqBody::login() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.Login)
  return _internal_login();
}
inline void CSReqBody::unsafe_arena_set_allocated_login(
    ::msg::CSReqLogin* login) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.login_);
  }
  _impl_.login_ = login;
  if (login) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.Login)
}
inline ::msg::CSReqLogin* CSReqBody::release_login() {
  
  ::msg::CSReqLogin* temp = _impl_.login_;
  _impl_.login_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqLogin* CSReqBody::unsafe_arena_release_login() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.Login)
  
  ::msg::CSReqLogin* temp = _impl_.login_;
  _impl_.login_ = nullptr;
  return temp;
}
inline ::msg::CSReqLogin* CSReqBody::_internal_mutable_login() {
  
  if (_impl_.login_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqLogin>(GetArenaForAllocation());
    _impl_.login_ = p;
  }
  return _impl_.login_;
}
inline ::msg::CSReqLogin* CSReqBody::mutable_login() {
  ::msg::CSReqLogin* _msg = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.Login)
  return _msg;
}
inline void CSReqBody::set_allocated_login(::msg::CSReqLogin* login) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.login_);
  }
  if (login) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login));
    if (message_arena != submessage_arena) {
      login = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.login_ = login;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.Login)
}

// .msg.CSReqVersionCheck VersionCheck = 4;
inline bool CSReqBody::_internal_has_versioncheck() const {
  return this != internal_default_instance() && _impl_.versioncheck_ != nullptr;
}
inline bool CSReqBody::has_versioncheck() const {
  return _internal_has_versioncheck();
}
inline const ::msg::CSReqVersionCheck& CSReqBody::_internal_versioncheck() const {
  const ::msg::CSReqVersionCheck* p = _impl_.versioncheck_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqVersionCheck&>(
      ::msg::_CSReqVersionCheck_default_instance_);
}
inline const ::msg::CSReqVersionCheck& CSReqBody::versioncheck() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.VersionCheck)
  return _internal_versioncheck();
}
inline void CSReqBody::unsafe_arena_set_allocated_versioncheck(
    ::msg::CSReqVersionCheck* versioncheck) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.versioncheck_);
  }
  _impl_.versioncheck_ = versioncheck;
  if (versioncheck) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.VersionCheck)
}
inline ::msg::CSReqVersionCheck* CSReqBody::release_versioncheck() {
  
  ::msg::CSReqVersionCheck* temp = _impl_.versioncheck_;
  _impl_.versioncheck_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqVersionCheck* CSReqBody::unsafe_arena_release_versioncheck() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.VersionCheck)
  
  ::msg::CSReqVersionCheck* temp = _impl_.versioncheck_;
  _impl_.versioncheck_ = nullptr;
  return temp;
}
inline ::msg::CSReqVersionCheck* CSReqBody::_internal_mutable_versioncheck() {
  
  if (_impl_.versioncheck_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqVersionCheck>(GetArenaForAllocation());
    _impl_.versioncheck_ = p;
  }
  return _impl_.versioncheck_;
}
inline ::msg::CSReqVersionCheck* CSReqBody::mutable_versioncheck() {
  ::msg::CSReqVersionCheck* _msg = _internal_mutable_versioncheck();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.VersionCheck)
  return _msg;
}
inline void CSReqBody::set_allocated_versioncheck(::msg::CSReqVersionCheck* versioncheck) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.versioncheck_);
  }
  if (versioncheck) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(versioncheck));
    if (message_arena != submessage_arena) {
      versioncheck = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, versioncheck, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.versioncheck_ = versioncheck;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.VersionCheck)
}

// .msg.CSReqResourceVersionCheck ResourceVersionCheck = 5;
inline bool CSReqBody::_internal_has_resourceversioncheck() const {
  return this != internal_default_instance() && _impl_.resourceversioncheck_ != nullptr;
}
inline bool CSReqBody::has_resourceversioncheck() const {
  return _internal_has_resourceversioncheck();
}
inline const ::msg::CSReqResourceVersionCheck& CSReqBody::_internal_resourceversioncheck() const {
  const ::msg::CSReqResourceVersionCheck* p = _impl_.resourceversioncheck_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqResourceVersionCheck&>(
      ::msg::_CSReqResourceVersionCheck_default_instance_);
}
inline const ::msg::CSReqResourceVersionCheck& CSReqBody::resourceversioncheck() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ResourceVersionCheck)
  return _internal_resourceversioncheck();
}
inline void CSReqBody::unsafe_arena_set_allocated_resourceversioncheck(
    ::msg::CSReqResourceVersionCheck* resourceversioncheck) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resourceversioncheck_);
  }
  _impl_.resourceversioncheck_ = resourceversioncheck;
  if (resourceversioncheck) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ResourceVersionCheck)
}
inline ::msg::CSReqResourceVersionCheck* CSReqBody::release_resourceversioncheck() {
  
  ::msg::CSReqResourceVersionCheck* temp = _impl_.resourceversioncheck_;
  _impl_.resourceversioncheck_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqResourceVersionCheck* CSReqBody::unsafe_arena_release_resourceversioncheck() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ResourceVersionCheck)
  
  ::msg::CSReqResourceVersionCheck* temp = _impl_.resourceversioncheck_;
  _impl_.resourceversioncheck_ = nullptr;
  return temp;
}
inline ::msg::CSReqResourceVersionCheck* CSReqBody::_internal_mutable_resourceversioncheck() {
  
  if (_impl_.resourceversioncheck_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqResourceVersionCheck>(GetArenaForAllocation());
    _impl_.resourceversioncheck_ = p;
  }
  return _impl_.resourceversioncheck_;
}
inline ::msg::CSReqResourceVersionCheck* CSReqBody::mutable_resourceversioncheck() {
  ::msg::CSReqResourceVersionCheck* _msg = _internal_mutable_resourceversioncheck();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ResourceVersionCheck)
  return _msg;
}
inline void CSReqBody::set_allocated_resourceversioncheck(::msg::CSReqResourceVersionCheck* resourceversioncheck) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resourceversioncheck_);
  }
  if (resourceversioncheck) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resourceversioncheck));
    if (message_arena != submessage_arena) {
      resourceversioncheck = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resourceversioncheck, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resourceversioncheck_ = resourceversioncheck;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ResourceVersionCheck)
}

// .msg.CSReqApplyHallServer ApplyHallServer = 6;
inline bool CSReqBody::_internal_has_applyhallserver() const {
  return this != internal_default_instance() && _impl_.applyhallserver_ != nullptr;
}
inline bool CSReqBody::has_applyhallserver() const {
  return _internal_has_applyhallserver();
}
inline const ::msg::CSReqApplyHallServer& CSReqBody::_internal_applyhallserver() const {
  const ::msg::CSReqApplyHallServer* p = _impl_.applyhallserver_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqApplyHallServer&>(
      ::msg::_CSReqApplyHallServer_default_instance_);
}
inline const ::msg::CSReqApplyHallServer& CSReqBody::applyhallserver() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ApplyHallServer)
  return _internal_applyhallserver();
}
inline void CSReqBody::unsafe_arena_set_allocated_applyhallserver(
    ::msg::CSReqApplyHallServer* applyhallserver) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.applyhallserver_);
  }
  _impl_.applyhallserver_ = applyhallserver;
  if (applyhallserver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ApplyHallServer)
}
inline ::msg::CSReqApplyHallServer* CSReqBody::release_applyhallserver() {
  
  ::msg::CSReqApplyHallServer* temp = _impl_.applyhallserver_;
  _impl_.applyhallserver_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqApplyHallServer* CSReqBody::unsafe_arena_release_applyhallserver() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ApplyHallServer)
  
  ::msg::CSReqApplyHallServer* temp = _impl_.applyhallserver_;
  _impl_.applyhallserver_ = nullptr;
  return temp;
}
inline ::msg::CSReqApplyHallServer* CSReqBody::_internal_mutable_applyhallserver() {
  
  if (_impl_.applyhallserver_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqApplyHallServer>(GetArenaForAllocation());
    _impl_.applyhallserver_ = p;
  }
  return _impl_.applyhallserver_;
}
inline ::msg::CSReqApplyHallServer* CSReqBody::mutable_applyhallserver() {
  ::msg::CSReqApplyHallServer* _msg = _internal_mutable_applyhallserver();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ApplyHallServer)
  return _msg;
}
inline void CSReqBody::set_allocated_applyhallserver(::msg::CSReqApplyHallServer* applyhallserver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.applyhallserver_);
  }
  if (applyhallserver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applyhallserver));
    if (message_arena != submessage_arena) {
      applyhallserver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applyhallserver, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.applyhallserver_ = applyhallserver;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ApplyHallServer)
}

// .msg.CSReqGetNumRank GetNumRank = 7;
inline bool CSReqBody::_internal_has_getnumrank() const {
  return this != internal_default_instance() && _impl_.getnumrank_ != nullptr;
}
inline bool CSReqBody::has_getnumrank() const {
  return _internal_has_getnumrank();
}
inline const ::msg::CSReqGetNumRank& CSReqBody::_internal_getnumrank() const {
  const ::msg::CSReqGetNumRank* p = _impl_.getnumrank_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetNumRank&>(
      ::msg::_CSReqGetNumRank_default_instance_);
}
inline const ::msg::CSReqGetNumRank& CSReqBody::getnumrank() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetNumRank)
  return _internal_getnumrank();
}
inline void CSReqBody::unsafe_arena_set_allocated_getnumrank(
    ::msg::CSReqGetNumRank* getnumrank) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getnumrank_);
  }
  _impl_.getnumrank_ = getnumrank;
  if (getnumrank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetNumRank)
}
inline ::msg::CSReqGetNumRank* CSReqBody::release_getnumrank() {
  
  ::msg::CSReqGetNumRank* temp = _impl_.getnumrank_;
  _impl_.getnumrank_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetNumRank* CSReqBody::unsafe_arena_release_getnumrank() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetNumRank)
  
  ::msg::CSReqGetNumRank* temp = _impl_.getnumrank_;
  _impl_.getnumrank_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetNumRank* CSReqBody::_internal_mutable_getnumrank() {
  
  if (_impl_.getnumrank_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetNumRank>(GetArenaForAllocation());
    _impl_.getnumrank_ = p;
  }
  return _impl_.getnumrank_;
}
inline ::msg::CSReqGetNumRank* CSReqBody::mutable_getnumrank() {
  ::msg::CSReqGetNumRank* _msg = _internal_mutable_getnumrank();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetNumRank)
  return _msg;
}
inline void CSReqBody::set_allocated_getnumrank(::msg::CSReqGetNumRank* getnumrank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getnumrank_);
  }
  if (getnumrank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getnumrank));
    if (message_arena != submessage_arena) {
      getnumrank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getnumrank, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getnumrank_ = getnumrank;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetNumRank)
}

// .msg.CSReqWorldChat WorldChat = 8;
inline bool CSReqBody::_internal_has_worldchat() const {
  return this != internal_default_instance() && _impl_.worldchat_ != nullptr;
}
inline bool CSReqBody::has_worldchat() const {
  return _internal_has_worldchat();
}
inline const ::msg::CSReqWorldChat& CSReqBody::_internal_worldchat() const {
  const ::msg::CSReqWorldChat* p = _impl_.worldchat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqWorldChat&>(
      ::msg::_CSReqWorldChat_default_instance_);
}
inline const ::msg::CSReqWorldChat& CSReqBody::worldchat() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.WorldChat)
  return _internal_worldchat();
}
inline void CSReqBody::unsafe_arena_set_allocated_worldchat(
    ::msg::CSReqWorldChat* worldchat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.worldchat_);
  }
  _impl_.worldchat_ = worldchat;
  if (worldchat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.WorldChat)
}
inline ::msg::CSReqWorldChat* CSReqBody::release_worldchat() {
  
  ::msg::CSReqWorldChat* temp = _impl_.worldchat_;
  _impl_.worldchat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqWorldChat* CSReqBody::unsafe_arena_release_worldchat() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.WorldChat)
  
  ::msg::CSReqWorldChat* temp = _impl_.worldchat_;
  _impl_.worldchat_ = nullptr;
  return temp;
}
inline ::msg::CSReqWorldChat* CSReqBody::_internal_mutable_worldchat() {
  
  if (_impl_.worldchat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqWorldChat>(GetArenaForAllocation());
    _impl_.worldchat_ = p;
  }
  return _impl_.worldchat_;
}
inline ::msg::CSReqWorldChat* CSReqBody::mutable_worldchat() {
  ::msg::CSReqWorldChat* _msg = _internal_mutable_worldchat();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.WorldChat)
  return _msg;
}
inline void CSReqBody::set_allocated_worldchat(::msg::CSReqWorldChat* worldchat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.worldchat_);
  }
  if (worldchat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(worldchat));
    if (message_arena != submessage_arena) {
      worldchat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, worldchat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.worldchat_ = worldchat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.WorldChat)
}

// .msg.CSReqPlayersBaseInfo PlayersBaseInfo = 9;
inline bool CSReqBody::_internal_has_playersbaseinfo() const {
  return this != internal_default_instance() && _impl_.playersbaseinfo_ != nullptr;
}
inline bool CSReqBody::has_playersbaseinfo() const {
  return _internal_has_playersbaseinfo();
}
inline const ::msg::CSReqPlayersBaseInfo& CSReqBody::_internal_playersbaseinfo() const {
  const ::msg::CSReqPlayersBaseInfo* p = _impl_.playersbaseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPlayersBaseInfo&>(
      ::msg::_CSReqPlayersBaseInfo_default_instance_);
}
inline const ::msg::CSReqPlayersBaseInfo& CSReqBody::playersbaseinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PlayersBaseInfo)
  return _internal_playersbaseinfo();
}
inline void CSReqBody::unsafe_arena_set_allocated_playersbaseinfo(
    ::msg::CSReqPlayersBaseInfo* playersbaseinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playersbaseinfo_);
  }
  _impl_.playersbaseinfo_ = playersbaseinfo;
  if (playersbaseinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PlayersBaseInfo)
}
inline ::msg::CSReqPlayersBaseInfo* CSReqBody::release_playersbaseinfo() {
  
  ::msg::CSReqPlayersBaseInfo* temp = _impl_.playersbaseinfo_;
  _impl_.playersbaseinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPlayersBaseInfo* CSReqBody::unsafe_arena_release_playersbaseinfo() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PlayersBaseInfo)
  
  ::msg::CSReqPlayersBaseInfo* temp = _impl_.playersbaseinfo_;
  _impl_.playersbaseinfo_ = nullptr;
  return temp;
}
inline ::msg::CSReqPlayersBaseInfo* CSReqBody::_internal_mutable_playersbaseinfo() {
  
  if (_impl_.playersbaseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPlayersBaseInfo>(GetArenaForAllocation());
    _impl_.playersbaseinfo_ = p;
  }
  return _impl_.playersbaseinfo_;
}
inline ::msg::CSReqPlayersBaseInfo* CSReqBody::mutable_playersbaseinfo() {
  ::msg::CSReqPlayersBaseInfo* _msg = _internal_mutable_playersbaseinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PlayersBaseInfo)
  return _msg;
}
inline void CSReqBody::set_allocated_playersbaseinfo(::msg::CSReqPlayersBaseInfo* playersbaseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playersbaseinfo_);
  }
  if (playersbaseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playersbaseinfo));
    if (message_arena != submessage_arena) {
      playersbaseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playersbaseinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playersbaseinfo_ = playersbaseinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PlayersBaseInfo)
}

// .msg.CSReqPlayerDetailInfo PlayerDetailInfo = 10;
inline bool CSReqBody::_internal_has_playerdetailinfo() const {
  return this != internal_default_instance() && _impl_.playerdetailinfo_ != nullptr;
}
inline bool CSReqBody::has_playerdetailinfo() const {
  return _internal_has_playerdetailinfo();
}
inline const ::msg::CSReqPlayerDetailInfo& CSReqBody::_internal_playerdetailinfo() const {
  const ::msg::CSReqPlayerDetailInfo* p = _impl_.playerdetailinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPlayerDetailInfo&>(
      ::msg::_CSReqPlayerDetailInfo_default_instance_);
}
inline const ::msg::CSReqPlayerDetailInfo& CSReqBody::playerdetailinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PlayerDetailInfo)
  return _internal_playerdetailinfo();
}
inline void CSReqBody::unsafe_arena_set_allocated_playerdetailinfo(
    ::msg::CSReqPlayerDetailInfo* playerdetailinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerdetailinfo_);
  }
  _impl_.playerdetailinfo_ = playerdetailinfo;
  if (playerdetailinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PlayerDetailInfo)
}
inline ::msg::CSReqPlayerDetailInfo* CSReqBody::release_playerdetailinfo() {
  
  ::msg::CSReqPlayerDetailInfo* temp = _impl_.playerdetailinfo_;
  _impl_.playerdetailinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPlayerDetailInfo* CSReqBody::unsafe_arena_release_playerdetailinfo() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PlayerDetailInfo)
  
  ::msg::CSReqPlayerDetailInfo* temp = _impl_.playerdetailinfo_;
  _impl_.playerdetailinfo_ = nullptr;
  return temp;
}
inline ::msg::CSReqPlayerDetailInfo* CSReqBody::_internal_mutable_playerdetailinfo() {
  
  if (_impl_.playerdetailinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPlayerDetailInfo>(GetArenaForAllocation());
    _impl_.playerdetailinfo_ = p;
  }
  return _impl_.playerdetailinfo_;
}
inline ::msg::CSReqPlayerDetailInfo* CSReqBody::mutable_playerdetailinfo() {
  ::msg::CSReqPlayerDetailInfo* _msg = _internal_mutable_playerdetailinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PlayerDetailInfo)
  return _msg;
}
inline void CSReqBody::set_allocated_playerdetailinfo(::msg::CSReqPlayerDetailInfo* playerdetailinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerdetailinfo_);
  }
  if (playerdetailinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdetailinfo));
    if (message_arena != submessage_arena) {
      playerdetailinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerdetailinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerdetailinfo_ = playerdetailinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PlayerDetailInfo)
}

// .msg.CSReqReadMail ReadMail = 11;
inline bool CSReqBody::_internal_has_readmail() const {
  return this != internal_default_instance() && _impl_.readmail_ != nullptr;
}
inline bool CSReqBody::has_readmail() const {
  return _internal_has_readmail();
}
inline const ::msg::CSReqReadMail& CSReqBody::_internal_readmail() const {
  const ::msg::CSReqReadMail* p = _impl_.readmail_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqReadMail&>(
      ::msg::_CSReqReadMail_default_instance_);
}
inline const ::msg::CSReqReadMail& CSReqBody::readmail() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ReadMail)
  return _internal_readmail();
}
inline void CSReqBody::unsafe_arena_set_allocated_readmail(
    ::msg::CSReqReadMail* readmail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.readmail_);
  }
  _impl_.readmail_ = readmail;
  if (readmail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ReadMail)
}
inline ::msg::CSReqReadMail* CSReqBody::release_readmail() {
  
  ::msg::CSReqReadMail* temp = _impl_.readmail_;
  _impl_.readmail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqReadMail* CSReqBody::unsafe_arena_release_readmail() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ReadMail)
  
  ::msg::CSReqReadMail* temp = _impl_.readmail_;
  _impl_.readmail_ = nullptr;
  return temp;
}
inline ::msg::CSReqReadMail* CSReqBody::_internal_mutable_readmail() {
  
  if (_impl_.readmail_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqReadMail>(GetArenaForAllocation());
    _impl_.readmail_ = p;
  }
  return _impl_.readmail_;
}
inline ::msg::CSReqReadMail* CSReqBody::mutable_readmail() {
  ::msg::CSReqReadMail* _msg = _internal_mutable_readmail();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ReadMail)
  return _msg;
}
inline void CSReqBody::set_allocated_readmail(::msg::CSReqReadMail* readmail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.readmail_);
  }
  if (readmail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readmail));
    if (message_arena != submessage_arena) {
      readmail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readmail, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.readmail_ = readmail;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ReadMail)
}

// .msg.CSReqGetMailAward GetMailAward = 12;
inline bool CSReqBody::_internal_has_getmailaward() const {
  return this != internal_default_instance() && _impl_.getmailaward_ != nullptr;
}
inline bool CSReqBody::has_getmailaward() const {
  return _internal_has_getmailaward();
}
inline const ::msg::CSReqGetMailAward& CSReqBody::_internal_getmailaward() const {
  const ::msg::CSReqGetMailAward* p = _impl_.getmailaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetMailAward&>(
      ::msg::_CSReqGetMailAward_default_instance_);
}
inline const ::msg::CSReqGetMailAward& CSReqBody::getmailaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetMailAward)
  return _internal_getmailaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_getmailaward(
    ::msg::CSReqGetMailAward* getmailaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmailaward_);
  }
  _impl_.getmailaward_ = getmailaward;
  if (getmailaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetMailAward)
}
inline ::msg::CSReqGetMailAward* CSReqBody::release_getmailaward() {
  
  ::msg::CSReqGetMailAward* temp = _impl_.getmailaward_;
  _impl_.getmailaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetMailAward* CSReqBody::unsafe_arena_release_getmailaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetMailAward)
  
  ::msg::CSReqGetMailAward* temp = _impl_.getmailaward_;
  _impl_.getmailaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetMailAward* CSReqBody::_internal_mutable_getmailaward() {
  
  if (_impl_.getmailaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetMailAward>(GetArenaForAllocation());
    _impl_.getmailaward_ = p;
  }
  return _impl_.getmailaward_;
}
inline ::msg::CSReqGetMailAward* CSReqBody::mutable_getmailaward() {
  ::msg::CSReqGetMailAward* _msg = _internal_mutable_getmailaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetMailAward)
  return _msg;
}
inline void CSReqBody::set_allocated_getmailaward(::msg::CSReqGetMailAward* getmailaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmailaward_);
  }
  if (getmailaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getmailaward));
    if (message_arena != submessage_arena) {
      getmailaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getmailaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getmailaward_ = getmailaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetMailAward)
}

// .msg.CSReqBuyEgg BuyEgg = 13;
inline bool CSReqBody::_internal_has_buyegg() const {
  return this != internal_default_instance() && _impl_.buyegg_ != nullptr;
}
inline bool CSReqBody::has_buyegg() const {
  return _internal_has_buyegg();
}
inline const ::msg::CSReqBuyEgg& CSReqBody::_internal_buyegg() const {
  const ::msg::CSReqBuyEgg* p = _impl_.buyegg_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqBuyEgg&>(
      ::msg::_CSReqBuyEgg_default_instance_);
}
inline const ::msg::CSReqBuyEgg& CSReqBody::buyegg() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.BuyEgg)
  return _internal_buyegg();
}
inline void CSReqBody::unsafe_arena_set_allocated_buyegg(
    ::msg::CSReqBuyEgg* buyegg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buyegg_);
  }
  _impl_.buyegg_ = buyegg;
  if (buyegg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.BuyEgg)
}
inline ::msg::CSReqBuyEgg* CSReqBody::release_buyegg() {
  
  ::msg::CSReqBuyEgg* temp = _impl_.buyegg_;
  _impl_.buyegg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqBuyEgg* CSReqBody::unsafe_arena_release_buyegg() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.BuyEgg)
  
  ::msg::CSReqBuyEgg* temp = _impl_.buyegg_;
  _impl_.buyegg_ = nullptr;
  return temp;
}
inline ::msg::CSReqBuyEgg* CSReqBody::_internal_mutable_buyegg() {
  
  if (_impl_.buyegg_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqBuyEgg>(GetArenaForAllocation());
    _impl_.buyegg_ = p;
  }
  return _impl_.buyegg_;
}
inline ::msg::CSReqBuyEgg* CSReqBody::mutable_buyegg() {
  ::msg::CSReqBuyEgg* _msg = _internal_mutable_buyegg();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.BuyEgg)
  return _msg;
}
inline void CSReqBody::set_allocated_buyegg(::msg::CSReqBuyEgg* buyegg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buyegg_);
  }
  if (buyegg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buyegg));
    if (message_arena != submessage_arena) {
      buyegg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buyegg, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buyegg_ = buyegg;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.BuyEgg)
}

// .msg.CSReqUserNameSet UserNameSet = 14;
inline bool CSReqBody::_internal_has_usernameset() const {
  return this != internal_default_instance() && _impl_.usernameset_ != nullptr;
}
inline bool CSReqBody::has_usernameset() const {
  return _internal_has_usernameset();
}
inline const ::msg::CSReqUserNameSet& CSReqBody::_internal_usernameset() const {
  const ::msg::CSReqUserNameSet* p = _impl_.usernameset_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUserNameSet&>(
      ::msg::_CSReqUserNameSet_default_instance_);
}
inline const ::msg::CSReqUserNameSet& CSReqBody::usernameset() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UserNameSet)
  return _internal_usernameset();
}
inline void CSReqBody::unsafe_arena_set_allocated_usernameset(
    ::msg::CSReqUserNameSet* usernameset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usernameset_);
  }
  _impl_.usernameset_ = usernameset;
  if (usernameset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UserNameSet)
}
inline ::msg::CSReqUserNameSet* CSReqBody::release_usernameset() {
  
  ::msg::CSReqUserNameSet* temp = _impl_.usernameset_;
  _impl_.usernameset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUserNameSet* CSReqBody::unsafe_arena_release_usernameset() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UserNameSet)
  
  ::msg::CSReqUserNameSet* temp = _impl_.usernameset_;
  _impl_.usernameset_ = nullptr;
  return temp;
}
inline ::msg::CSReqUserNameSet* CSReqBody::_internal_mutable_usernameset() {
  
  if (_impl_.usernameset_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUserNameSet>(GetArenaForAllocation());
    _impl_.usernameset_ = p;
  }
  return _impl_.usernameset_;
}
inline ::msg::CSReqUserNameSet* CSReqBody::mutable_usernameset() {
  ::msg::CSReqUserNameSet* _msg = _internal_mutable_usernameset();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UserNameSet)
  return _msg;
}
inline void CSReqBody::set_allocated_usernameset(::msg::CSReqUserNameSet* usernameset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usernameset_);
  }
  if (usernameset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usernameset));
    if (message_arena != submessage_arena) {
      usernameset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usernameset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.usernameset_ = usernameset;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UserNameSet)
}

// .msg.CSReqUserNameRandom UserNameRandom = 15;
inline bool CSReqBody::_internal_has_usernamerandom() const {
  return this != internal_default_instance() && _impl_.usernamerandom_ != nullptr;
}
inline bool CSReqBody::has_usernamerandom() const {
  return _internal_has_usernamerandom();
}
inline const ::msg::CSReqUserNameRandom& CSReqBody::_internal_usernamerandom() const {
  const ::msg::CSReqUserNameRandom* p = _impl_.usernamerandom_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUserNameRandom&>(
      ::msg::_CSReqUserNameRandom_default_instance_);
}
inline const ::msg::CSReqUserNameRandom& CSReqBody::usernamerandom() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UserNameRandom)
  return _internal_usernamerandom();
}
inline void CSReqBody::unsafe_arena_set_allocated_usernamerandom(
    ::msg::CSReqUserNameRandom* usernamerandom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usernamerandom_);
  }
  _impl_.usernamerandom_ = usernamerandom;
  if (usernamerandom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UserNameRandom)
}
inline ::msg::CSReqUserNameRandom* CSReqBody::release_usernamerandom() {
  
  ::msg::CSReqUserNameRandom* temp = _impl_.usernamerandom_;
  _impl_.usernamerandom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUserNameRandom* CSReqBody::unsafe_arena_release_usernamerandom() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UserNameRandom)
  
  ::msg::CSReqUserNameRandom* temp = _impl_.usernamerandom_;
  _impl_.usernamerandom_ = nullptr;
  return temp;
}
inline ::msg::CSReqUserNameRandom* CSReqBody::_internal_mutable_usernamerandom() {
  
  if (_impl_.usernamerandom_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUserNameRandom>(GetArenaForAllocation());
    _impl_.usernamerandom_ = p;
  }
  return _impl_.usernamerandom_;
}
inline ::msg::CSReqUserNameRandom* CSReqBody::mutable_usernamerandom() {
  ::msg::CSReqUserNameRandom* _msg = _internal_mutable_usernamerandom();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UserNameRandom)
  return _msg;
}
inline void CSReqBody::set_allocated_usernamerandom(::msg::CSReqUserNameRandom* usernamerandom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usernamerandom_);
  }
  if (usernamerandom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usernamerandom));
    if (message_arena != submessage_arena) {
      usernamerandom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usernamerandom, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.usernamerandom_ = usernamerandom;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UserNameRandom)
}

// .msg.CSReqHeadPicSet HeadPicSet = 16;
inline bool CSReqBody::_internal_has_headpicset() const {
  return this != internal_default_instance() && _impl_.headpicset_ != nullptr;
}
inline bool CSReqBody::has_headpicset() const {
  return _internal_has_headpicset();
}
inline const ::msg::CSReqHeadPicSet& CSReqBody::_internal_headpicset() const {
  const ::msg::CSReqHeadPicSet* p = _impl_.headpicset_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqHeadPicSet&>(
      ::msg::_CSReqHeadPicSet_default_instance_);
}
inline const ::msg::CSReqHeadPicSet& CSReqBody::headpicset() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.HeadPicSet)
  return _internal_headpicset();
}
inline void CSReqBody::unsafe_arena_set_allocated_headpicset(
    ::msg::CSReqHeadPicSet* headpicset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.headpicset_);
  }
  _impl_.headpicset_ = headpicset;
  if (headpicset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.HeadPicSet)
}
inline ::msg::CSReqHeadPicSet* CSReqBody::release_headpicset() {
  
  ::msg::CSReqHeadPicSet* temp = _impl_.headpicset_;
  _impl_.headpicset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqHeadPicSet* CSReqBody::unsafe_arena_release_headpicset() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.HeadPicSet)
  
  ::msg::CSReqHeadPicSet* temp = _impl_.headpicset_;
  _impl_.headpicset_ = nullptr;
  return temp;
}
inline ::msg::CSReqHeadPicSet* CSReqBody::_internal_mutable_headpicset() {
  
  if (_impl_.headpicset_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqHeadPicSet>(GetArenaForAllocation());
    _impl_.headpicset_ = p;
  }
  return _impl_.headpicset_;
}
inline ::msg::CSReqHeadPicSet* CSReqBody::mutable_headpicset() {
  ::msg::CSReqHeadPicSet* _msg = _internal_mutable_headpicset();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.HeadPicSet)
  return _msg;
}
inline void CSReqBody::set_allocated_headpicset(::msg::CSReqHeadPicSet* headpicset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.headpicset_);
  }
  if (headpicset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(headpicset));
    if (message_arena != submessage_arena) {
      headpicset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, headpicset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.headpicset_ = headpicset;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.HeadPicSet)
}

// .msg.CSReqPvp Pvp = 17;
inline bool CSReqBody::_internal_has_pvp() const {
  return this != internal_default_instance() && _impl_.pvp_ != nullptr;
}
inline bool CSReqBody::has_pvp() const {
  return _internal_has_pvp();
}
inline const ::msg::CSReqPvp& CSReqBody::_internal_pvp() const {
  const ::msg::CSReqPvp* p = _impl_.pvp_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPvp&>(
      ::msg::_CSReqPvp_default_instance_);
}
inline const ::msg::CSReqPvp& CSReqBody::pvp() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.Pvp)
  return _internal_pvp();
}
inline void CSReqBody::unsafe_arena_set_allocated_pvp(
    ::msg::CSReqPvp* pvp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvp_);
  }
  _impl_.pvp_ = pvp;
  if (pvp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.Pvp)
}
inline ::msg::CSReqPvp* CSReqBody::release_pvp() {
  
  ::msg::CSReqPvp* temp = _impl_.pvp_;
  _impl_.pvp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPvp* CSReqBody::unsafe_arena_release_pvp() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.Pvp)
  
  ::msg::CSReqPvp* temp = _impl_.pvp_;
  _impl_.pvp_ = nullptr;
  return temp;
}
inline ::msg::CSReqPvp* CSReqBody::_internal_mutable_pvp() {
  
  if (_impl_.pvp_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPvp>(GetArenaForAllocation());
    _impl_.pvp_ = p;
  }
  return _impl_.pvp_;
}
inline ::msg::CSReqPvp* CSReqBody::mutable_pvp() {
  ::msg::CSReqPvp* _msg = _internal_mutable_pvp();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.Pvp)
  return _msg;
}
inline void CSReqBody::set_allocated_pvp(::msg::CSReqPvp* pvp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvp_);
  }
  if (pvp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvp));
    if (message_arena != submessage_arena) {
      pvp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvp_ = pvp;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.Pvp)
}

// .msg.CSReqDressChessPlayer DressChessPlayer = 18;
inline bool CSReqBody::_internal_has_dresschessplayer() const {
  return this != internal_default_instance() && _impl_.dresschessplayer_ != nullptr;
}
inline bool CSReqBody::has_dresschessplayer() const {
  return _internal_has_dresschessplayer();
}
inline const ::msg::CSReqDressChessPlayer& CSReqBody::_internal_dresschessplayer() const {
  const ::msg::CSReqDressChessPlayer* p = _impl_.dresschessplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqDressChessPlayer&>(
      ::msg::_CSReqDressChessPlayer_default_instance_);
}
inline const ::msg::CSReqDressChessPlayer& CSReqBody::dresschessplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.DressChessPlayer)
  return _internal_dresschessplayer();
}
inline void CSReqBody::unsafe_arena_set_allocated_dresschessplayer(
    ::msg::CSReqDressChessPlayer* dresschessplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dresschessplayer_);
  }
  _impl_.dresschessplayer_ = dresschessplayer;
  if (dresschessplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.DressChessPlayer)
}
inline ::msg::CSReqDressChessPlayer* CSReqBody::release_dresschessplayer() {
  
  ::msg::CSReqDressChessPlayer* temp = _impl_.dresschessplayer_;
  _impl_.dresschessplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqDressChessPlayer* CSReqBody::unsafe_arena_release_dresschessplayer() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.DressChessPlayer)
  
  ::msg::CSReqDressChessPlayer* temp = _impl_.dresschessplayer_;
  _impl_.dresschessplayer_ = nullptr;
  return temp;
}
inline ::msg::CSReqDressChessPlayer* CSReqBody::_internal_mutable_dresschessplayer() {
  
  if (_impl_.dresschessplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqDressChessPlayer>(GetArenaForAllocation());
    _impl_.dresschessplayer_ = p;
  }
  return _impl_.dresschessplayer_;
}
inline ::msg::CSReqDressChessPlayer* CSReqBody::mutable_dresschessplayer() {
  ::msg::CSReqDressChessPlayer* _msg = _internal_mutable_dresschessplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.DressChessPlayer)
  return _msg;
}
inline void CSReqBody::set_allocated_dresschessplayer(::msg::CSReqDressChessPlayer* dresschessplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dresschessplayer_);
  }
  if (dresschessplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dresschessplayer));
    if (message_arena != submessage_arena) {
      dresschessplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dresschessplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dresschessplayer_ = dresschessplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.DressChessPlayer)
}

// .msg.CSReqDressScene DressScene = 19;
inline bool CSReqBody::_internal_has_dressscene() const {
  return this != internal_default_instance() && _impl_.dressscene_ != nullptr;
}
inline bool CSReqBody::has_dressscene() const {
  return _internal_has_dressscene();
}
inline const ::msg::CSReqDressScene& CSReqBody::_internal_dressscene() const {
  const ::msg::CSReqDressScene* p = _impl_.dressscene_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqDressScene&>(
      ::msg::_CSReqDressScene_default_instance_);
}
inline const ::msg::CSReqDressScene& CSReqBody::dressscene() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.DressScene)
  return _internal_dressscene();
}
inline void CSReqBody::unsafe_arena_set_allocated_dressscene(
    ::msg::CSReqDressScene* dressscene) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dressscene_);
  }
  _impl_.dressscene_ = dressscene;
  if (dressscene) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.DressScene)
}
inline ::msg::CSReqDressScene* CSReqBody::release_dressscene() {
  
  ::msg::CSReqDressScene* temp = _impl_.dressscene_;
  _impl_.dressscene_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqDressScene* CSReqBody::unsafe_arena_release_dressscene() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.DressScene)
  
  ::msg::CSReqDressScene* temp = _impl_.dressscene_;
  _impl_.dressscene_ = nullptr;
  return temp;
}
inline ::msg::CSReqDressScene* CSReqBody::_internal_mutable_dressscene() {
  
  if (_impl_.dressscene_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqDressScene>(GetArenaForAllocation());
    _impl_.dressscene_ = p;
  }
  return _impl_.dressscene_;
}
inline ::msg::CSReqDressScene* CSReqBody::mutable_dressscene() {
  ::msg::CSReqDressScene* _msg = _internal_mutable_dressscene();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.DressScene)
  return _msg;
}
inline void CSReqBody::set_allocated_dressscene(::msg::CSReqDressScene* dressscene) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dressscene_);
  }
  if (dressscene) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dressscene));
    if (message_arena != submessage_arena) {
      dressscene = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dressscene, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dressscene_ = dressscene;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.DressScene)
}

// .msg.CSReqPvpLogin PvpLogin = 20;
inline bool CSReqBody::_internal_has_pvplogin() const {
  return this != internal_default_instance() && _impl_.pvplogin_ != nullptr;
}
inline bool CSReqBody::has_pvplogin() const {
  return _internal_has_pvplogin();
}
inline const ::msg::CSReqPvpLogin& CSReqBody::_internal_pvplogin() const {
  const ::msg::CSReqPvpLogin* p = _impl_.pvplogin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPvpLogin&>(
      ::msg::_CSReqPvpLogin_default_instance_);
}
inline const ::msg::CSReqPvpLogin& CSReqBody::pvplogin() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PvpLogin)
  return _internal_pvplogin();
}
inline void CSReqBody::unsafe_arena_set_allocated_pvplogin(
    ::msg::CSReqPvpLogin* pvplogin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvplogin_);
  }
  _impl_.pvplogin_ = pvplogin;
  if (pvplogin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PvpLogin)
}
inline ::msg::CSReqPvpLogin* CSReqBody::release_pvplogin() {
  
  ::msg::CSReqPvpLogin* temp = _impl_.pvplogin_;
  _impl_.pvplogin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPvpLogin* CSReqBody::unsafe_arena_release_pvplogin() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PvpLogin)
  
  ::msg::CSReqPvpLogin* temp = _impl_.pvplogin_;
  _impl_.pvplogin_ = nullptr;
  return temp;
}
inline ::msg::CSReqPvpLogin* CSReqBody::_internal_mutable_pvplogin() {
  
  if (_impl_.pvplogin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPvpLogin>(GetArenaForAllocation());
    _impl_.pvplogin_ = p;
  }
  return _impl_.pvplogin_;
}
inline ::msg::CSReqPvpLogin* CSReqBody::mutable_pvplogin() {
  ::msg::CSReqPvpLogin* _msg = _internal_mutable_pvplogin();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PvpLogin)
  return _msg;
}
inline void CSReqBody::set_allocated_pvplogin(::msg::CSReqPvpLogin* pvplogin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvplogin_);
  }
  if (pvplogin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvplogin));
    if (message_arena != submessage_arena) {
      pvplogin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvplogin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvplogin_ = pvplogin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PvpLogin)
}

// .msg.CSReqPvpEnd PvpEnd = 23;
inline bool CSReqBody::_internal_has_pvpend() const {
  return this != internal_default_instance() && _impl_.pvpend_ != nullptr;
}
inline bool CSReqBody::has_pvpend() const {
  return _internal_has_pvpend();
}
inline const ::msg::CSReqPvpEnd& CSReqBody::_internal_pvpend() const {
  const ::msg::CSReqPvpEnd* p = _impl_.pvpend_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPvpEnd&>(
      ::msg::_CSReqPvpEnd_default_instance_);
}
inline const ::msg::CSReqPvpEnd& CSReqBody::pvpend() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PvpEnd)
  return _internal_pvpend();
}
inline void CSReqBody::unsafe_arena_set_allocated_pvpend(
    ::msg::CSReqPvpEnd* pvpend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpend_);
  }
  _impl_.pvpend_ = pvpend;
  if (pvpend) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PvpEnd)
}
inline ::msg::CSReqPvpEnd* CSReqBody::release_pvpend() {
  
  ::msg::CSReqPvpEnd* temp = _impl_.pvpend_;
  _impl_.pvpend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPvpEnd* CSReqBody::unsafe_arena_release_pvpend() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PvpEnd)
  
  ::msg::CSReqPvpEnd* temp = _impl_.pvpend_;
  _impl_.pvpend_ = nullptr;
  return temp;
}
inline ::msg::CSReqPvpEnd* CSReqBody::_internal_mutable_pvpend() {
  
  if (_impl_.pvpend_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPvpEnd>(GetArenaForAllocation());
    _impl_.pvpend_ = p;
  }
  return _impl_.pvpend_;
}
inline ::msg::CSReqPvpEnd* CSReqBody::mutable_pvpend() {
  ::msg::CSReqPvpEnd* _msg = _internal_mutable_pvpend();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PvpEnd)
  return _msg;
}
inline void CSReqBody::set_allocated_pvpend(::msg::CSReqPvpEnd* pvpend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpend_);
  }
  if (pvpend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvpend));
    if (message_arena != submessage_arena) {
      pvpend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpend, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpend_ = pvpend;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PvpEnd)
}

// .msg.CSReqPlayerFinish PlayerFinish = 24;
inline bool CSReqBody::_internal_has_playerfinish() const {
  return this != internal_default_instance() && _impl_.playerfinish_ != nullptr;
}
inline bool CSReqBody::has_playerfinish() const {
  return _internal_has_playerfinish();
}
inline const ::msg::CSReqPlayerFinish& CSReqBody::_internal_playerfinish() const {
  const ::msg::CSReqPlayerFinish* p = _impl_.playerfinish_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPlayerFinish&>(
      ::msg::_CSReqPlayerFinish_default_instance_);
}
inline const ::msg::CSReqPlayerFinish& CSReqBody::playerfinish() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PlayerFinish)
  return _internal_playerfinish();
}
inline void CSReqBody::unsafe_arena_set_allocated_playerfinish(
    ::msg::CSReqPlayerFinish* playerfinish) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerfinish_);
  }
  _impl_.playerfinish_ = playerfinish;
  if (playerfinish) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PlayerFinish)
}
inline ::msg::CSReqPlayerFinish* CSReqBody::release_playerfinish() {
  
  ::msg::CSReqPlayerFinish* temp = _impl_.playerfinish_;
  _impl_.playerfinish_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPlayerFinish* CSReqBody::unsafe_arena_release_playerfinish() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PlayerFinish)
  
  ::msg::CSReqPlayerFinish* temp = _impl_.playerfinish_;
  _impl_.playerfinish_ = nullptr;
  return temp;
}
inline ::msg::CSReqPlayerFinish* CSReqBody::_internal_mutable_playerfinish() {
  
  if (_impl_.playerfinish_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPlayerFinish>(GetArenaForAllocation());
    _impl_.playerfinish_ = p;
  }
  return _impl_.playerfinish_;
}
inline ::msg::CSReqPlayerFinish* CSReqBody::mutable_playerfinish() {
  ::msg::CSReqPlayerFinish* _msg = _internal_mutable_playerfinish();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PlayerFinish)
  return _msg;
}
inline void CSReqBody::set_allocated_playerfinish(::msg::CSReqPlayerFinish* playerfinish) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerfinish_);
  }
  if (playerfinish) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerfinish));
    if (message_arena != submessage_arena) {
      playerfinish = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerfinish, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerfinish_ = playerfinish;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PlayerFinish)
}

// .msg.CSReqPlayerQuit PlayerQuit = 25;
inline bool CSReqBody::_internal_has_playerquit() const {
  return this != internal_default_instance() && _impl_.playerquit_ != nullptr;
}
inline bool CSReqBody::has_playerquit() const {
  return _internal_has_playerquit();
}
inline const ::msg::CSReqPlayerQuit& CSReqBody::_internal_playerquit() const {
  const ::msg::CSReqPlayerQuit* p = _impl_.playerquit_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPlayerQuit&>(
      ::msg::_CSReqPlayerQuit_default_instance_);
}
inline const ::msg::CSReqPlayerQuit& CSReqBody::playerquit() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PlayerQuit)
  return _internal_playerquit();
}
inline void CSReqBody::unsafe_arena_set_allocated_playerquit(
    ::msg::CSReqPlayerQuit* playerquit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerquit_);
  }
  _impl_.playerquit_ = playerquit;
  if (playerquit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PlayerQuit)
}
inline ::msg::CSReqPlayerQuit* CSReqBody::release_playerquit() {
  
  ::msg::CSReqPlayerQuit* temp = _impl_.playerquit_;
  _impl_.playerquit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPlayerQuit* CSReqBody::unsafe_arena_release_playerquit() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PlayerQuit)
  
  ::msg::CSReqPlayerQuit* temp = _impl_.playerquit_;
  _impl_.playerquit_ = nullptr;
  return temp;
}
inline ::msg::CSReqPlayerQuit* CSReqBody::_internal_mutable_playerquit() {
  
  if (_impl_.playerquit_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPlayerQuit>(GetArenaForAllocation());
    _impl_.playerquit_ = p;
  }
  return _impl_.playerquit_;
}
inline ::msg::CSReqPlayerQuit* CSReqBody::mutable_playerquit() {
  ::msg::CSReqPlayerQuit* _msg = _internal_mutable_playerquit();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PlayerQuit)
  return _msg;
}
inline void CSReqBody::set_allocated_playerquit(::msg::CSReqPlayerQuit* playerquit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerquit_);
  }
  if (playerquit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerquit));
    if (message_arena != submessage_arena) {
      playerquit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerquit, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerquit_ = playerquit;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PlayerQuit)
}

// .msg.CSReqSellItem SellItem = 26;
inline bool CSReqBody::_internal_has_sellitem() const {
  return this != internal_default_instance() && _impl_.sellitem_ != nullptr;
}
inline bool CSReqBody::has_sellitem() const {
  return _internal_has_sellitem();
}
inline const ::msg::CSReqSellItem& CSReqBody::_internal_sellitem() const {
  const ::msg::CSReqSellItem* p = _impl_.sellitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSellItem&>(
      ::msg::_CSReqSellItem_default_instance_);
}
inline const ::msg::CSReqSellItem& CSReqBody::sellitem() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SellItem)
  return _internal_sellitem();
}
inline void CSReqBody::unsafe_arena_set_allocated_sellitem(
    ::msg::CSReqSellItem* sellitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sellitem_);
  }
  _impl_.sellitem_ = sellitem;
  if (sellitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SellItem)
}
inline ::msg::CSReqSellItem* CSReqBody::release_sellitem() {
  
  ::msg::CSReqSellItem* temp = _impl_.sellitem_;
  _impl_.sellitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSellItem* CSReqBody::unsafe_arena_release_sellitem() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SellItem)
  
  ::msg::CSReqSellItem* temp = _impl_.sellitem_;
  _impl_.sellitem_ = nullptr;
  return temp;
}
inline ::msg::CSReqSellItem* CSReqBody::_internal_mutable_sellitem() {
  
  if (_impl_.sellitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSellItem>(GetArenaForAllocation());
    _impl_.sellitem_ = p;
  }
  return _impl_.sellitem_;
}
inline ::msg::CSReqSellItem* CSReqBody::mutable_sellitem() {
  ::msg::CSReqSellItem* _msg = _internal_mutable_sellitem();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SellItem)
  return _msg;
}
inline void CSReqBody::set_allocated_sellitem(::msg::CSReqSellItem* sellitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sellitem_);
  }
  if (sellitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sellitem));
    if (message_arena != submessage_arena) {
      sellitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sellitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sellitem_ = sellitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SellItem)
}

// .msg.CSReqGetEvalAward GetEvalAward = 27;
inline bool CSReqBody::_internal_has_getevalaward() const {
  return this != internal_default_instance() && _impl_.getevalaward_ != nullptr;
}
inline bool CSReqBody::has_getevalaward() const {
  return _internal_has_getevalaward();
}
inline const ::msg::CSReqGetEvalAward& CSReqBody::_internal_getevalaward() const {
  const ::msg::CSReqGetEvalAward* p = _impl_.getevalaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetEvalAward&>(
      ::msg::_CSReqGetEvalAward_default_instance_);
}
inline const ::msg::CSReqGetEvalAward& CSReqBody::getevalaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetEvalAward)
  return _internal_getevalaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_getevalaward(
    ::msg::CSReqGetEvalAward* getevalaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getevalaward_);
  }
  _impl_.getevalaward_ = getevalaward;
  if (getevalaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetEvalAward)
}
inline ::msg::CSReqGetEvalAward* CSReqBody::release_getevalaward() {
  
  ::msg::CSReqGetEvalAward* temp = _impl_.getevalaward_;
  _impl_.getevalaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetEvalAward* CSReqBody::unsafe_arena_release_getevalaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetEvalAward)
  
  ::msg::CSReqGetEvalAward* temp = _impl_.getevalaward_;
  _impl_.getevalaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetEvalAward* CSReqBody::_internal_mutable_getevalaward() {
  
  if (_impl_.getevalaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetEvalAward>(GetArenaForAllocation());
    _impl_.getevalaward_ = p;
  }
  return _impl_.getevalaward_;
}
inline ::msg::CSReqGetEvalAward* CSReqBody::mutable_getevalaward() {
  ::msg::CSReqGetEvalAward* _msg = _internal_mutable_getevalaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetEvalAward)
  return _msg;
}
inline void CSReqBody::set_allocated_getevalaward(::msg::CSReqGetEvalAward* getevalaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getevalaward_);
  }
  if (getevalaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getevalaward));
    if (message_arena != submessage_arena) {
      getevalaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getevalaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getevalaward_ = getevalaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetEvalAward)
}

// .msg.CSReqUseChessPlayer UseChessPlayer = 28;
inline bool CSReqBody::_internal_has_usechessplayer() const {
  return this != internal_default_instance() && _impl_.usechessplayer_ != nullptr;
}
inline bool CSReqBody::has_usechessplayer() const {
  return _internal_has_usechessplayer();
}
inline const ::msg::CSReqUseChessPlayer& CSReqBody::_internal_usechessplayer() const {
  const ::msg::CSReqUseChessPlayer* p = _impl_.usechessplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUseChessPlayer&>(
      ::msg::_CSReqUseChessPlayer_default_instance_);
}
inline const ::msg::CSReqUseChessPlayer& CSReqBody::usechessplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UseChessPlayer)
  return _internal_usechessplayer();
}
inline void CSReqBody::unsafe_arena_set_allocated_usechessplayer(
    ::msg::CSReqUseChessPlayer* usechessplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usechessplayer_);
  }
  _impl_.usechessplayer_ = usechessplayer;
  if (usechessplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UseChessPlayer)
}
inline ::msg::CSReqUseChessPlayer* CSReqBody::release_usechessplayer() {
  
  ::msg::CSReqUseChessPlayer* temp = _impl_.usechessplayer_;
  _impl_.usechessplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUseChessPlayer* CSReqBody::unsafe_arena_release_usechessplayer() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UseChessPlayer)
  
  ::msg::CSReqUseChessPlayer* temp = _impl_.usechessplayer_;
  _impl_.usechessplayer_ = nullptr;
  return temp;
}
inline ::msg::CSReqUseChessPlayer* CSReqBody::_internal_mutable_usechessplayer() {
  
  if (_impl_.usechessplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUseChessPlayer>(GetArenaForAllocation());
    _impl_.usechessplayer_ = p;
  }
  return _impl_.usechessplayer_;
}
inline ::msg::CSReqUseChessPlayer* CSReqBody::mutable_usechessplayer() {
  ::msg::CSReqUseChessPlayer* _msg = _internal_mutable_usechessplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UseChessPlayer)
  return _msg;
}
inline void CSReqBody::set_allocated_usechessplayer(::msg::CSReqUseChessPlayer* usechessplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usechessplayer_);
  }
  if (usechessplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usechessplayer));
    if (message_arena != submessage_arena) {
      usechessplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usechessplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.usechessplayer_ = usechessplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UseChessPlayer)
}

// .msg.CSReqGuidReport GuidReport = 29;
inline bool CSReqBody::_internal_has_guidreport() const {
  return this != internal_default_instance() && _impl_.guidreport_ != nullptr;
}
inline bool CSReqBody::has_guidreport() const {
  return _internal_has_guidreport();
}
inline const ::msg::CSReqGuidReport& CSReqBody::_internal_guidreport() const {
  const ::msg::CSReqGuidReport* p = _impl_.guidreport_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGuidReport&>(
      ::msg::_CSReqGuidReport_default_instance_);
}
inline const ::msg::CSReqGuidReport& CSReqBody::guidreport() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GuidReport)
  return _internal_guidreport();
}
inline void CSReqBody::unsafe_arena_set_allocated_guidreport(
    ::msg::CSReqGuidReport* guidreport) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guidreport_);
  }
  _impl_.guidreport_ = guidreport;
  if (guidreport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GuidReport)
}
inline ::msg::CSReqGuidReport* CSReqBody::release_guidreport() {
  
  ::msg::CSReqGuidReport* temp = _impl_.guidreport_;
  _impl_.guidreport_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGuidReport* CSReqBody::unsafe_arena_release_guidreport() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GuidReport)
  
  ::msg::CSReqGuidReport* temp = _impl_.guidreport_;
  _impl_.guidreport_ = nullptr;
  return temp;
}
inline ::msg::CSReqGuidReport* CSReqBody::_internal_mutable_guidreport() {
  
  if (_impl_.guidreport_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGuidReport>(GetArenaForAllocation());
    _impl_.guidreport_ = p;
  }
  return _impl_.guidreport_;
}
inline ::msg::CSReqGuidReport* CSReqBody::mutable_guidreport() {
  ::msg::CSReqGuidReport* _msg = _internal_mutable_guidreport();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GuidReport)
  return _msg;
}
inline void CSReqBody::set_allocated_guidreport(::msg::CSReqGuidReport* guidreport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guidreport_);
  }
  if (guidreport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guidreport));
    if (message_arena != submessage_arena) {
      guidreport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guidreport, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guidreport_ = guidreport;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GuidReport)
}

// .msg.CSReqGetCodeAward GetCodeAward = 30;
inline bool CSReqBody::_internal_has_getcodeaward() const {
  return this != internal_default_instance() && _impl_.getcodeaward_ != nullptr;
}
inline bool CSReqBody::has_getcodeaward() const {
  return _internal_has_getcodeaward();
}
inline const ::msg::CSReqGetCodeAward& CSReqBody::_internal_getcodeaward() const {
  const ::msg::CSReqGetCodeAward* p = _impl_.getcodeaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetCodeAward&>(
      ::msg::_CSReqGetCodeAward_default_instance_);
}
inline const ::msg::CSReqGetCodeAward& CSReqBody::getcodeaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetCodeAward)
  return _internal_getcodeaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_getcodeaward(
    ::msg::CSReqGetCodeAward* getcodeaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getcodeaward_);
  }
  _impl_.getcodeaward_ = getcodeaward;
  if (getcodeaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetCodeAward)
}
inline ::msg::CSReqGetCodeAward* CSReqBody::release_getcodeaward() {
  
  ::msg::CSReqGetCodeAward* temp = _impl_.getcodeaward_;
  _impl_.getcodeaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetCodeAward* CSReqBody::unsafe_arena_release_getcodeaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetCodeAward)
  
  ::msg::CSReqGetCodeAward* temp = _impl_.getcodeaward_;
  _impl_.getcodeaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetCodeAward* CSReqBody::_internal_mutable_getcodeaward() {
  
  if (_impl_.getcodeaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetCodeAward>(GetArenaForAllocation());
    _impl_.getcodeaward_ = p;
  }
  return _impl_.getcodeaward_;
}
inline ::msg::CSReqGetCodeAward* CSReqBody::mutable_getcodeaward() {
  ::msg::CSReqGetCodeAward* _msg = _internal_mutable_getcodeaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetCodeAward)
  return _msg;
}
inline void CSReqBody::set_allocated_getcodeaward(::msg::CSReqGetCodeAward* getcodeaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getcodeaward_);
  }
  if (getcodeaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getcodeaward));
    if (message_arena != submessage_arena) {
      getcodeaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getcodeaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getcodeaward_ = getcodeaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetCodeAward)
}

// .msg.CSReqRoundReport RoundReport = 31;
inline bool CSReqBody::_internal_has_roundreport() const {
  return this != internal_default_instance() && _impl_.roundreport_ != nullptr;
}
inline bool CSReqBody::has_roundreport() const {
  return _internal_has_roundreport();
}
inline const ::msg::CSReqRoundReport& CSReqBody::_internal_roundreport() const {
  const ::msg::CSReqRoundReport* p = _impl_.roundreport_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRoundReport&>(
      ::msg::_CSReqRoundReport_default_instance_);
}
inline const ::msg::CSReqRoundReport& CSReqBody::roundreport() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RoundReport)
  return _internal_roundreport();
}
inline void CSReqBody::unsafe_arena_set_allocated_roundreport(
    ::msg::CSReqRoundReport* roundreport) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roundreport_);
  }
  _impl_.roundreport_ = roundreport;
  if (roundreport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RoundReport)
}
inline ::msg::CSReqRoundReport* CSReqBody::release_roundreport() {
  
  ::msg::CSReqRoundReport* temp = _impl_.roundreport_;
  _impl_.roundreport_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRoundReport* CSReqBody::unsafe_arena_release_roundreport() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RoundReport)
  
  ::msg::CSReqRoundReport* temp = _impl_.roundreport_;
  _impl_.roundreport_ = nullptr;
  return temp;
}
inline ::msg::CSReqRoundReport* CSReqBody::_internal_mutable_roundreport() {
  
  if (_impl_.roundreport_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRoundReport>(GetArenaForAllocation());
    _impl_.roundreport_ = p;
  }
  return _impl_.roundreport_;
}
inline ::msg::CSReqRoundReport* CSReqBody::mutable_roundreport() {
  ::msg::CSReqRoundReport* _msg = _internal_mutable_roundreport();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RoundReport)
  return _msg;
}
inline void CSReqBody::set_allocated_roundreport(::msg::CSReqRoundReport* roundreport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roundreport_);
  }
  if (roundreport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roundreport));
    if (message_arena != submessage_arena) {
      roundreport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roundreport, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.roundreport_ = roundreport;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RoundReport)
}

// .msg.CSReqLoadingProgress LoadingProgress = 32;
inline bool CSReqBody::_internal_has_loadingprogress() const {
  return this != internal_default_instance() && _impl_.loadingprogress_ != nullptr;
}
inline bool CSReqBody::has_loadingprogress() const {
  return _internal_has_loadingprogress();
}
inline const ::msg::CSReqLoadingProgress& CSReqBody::_internal_loadingprogress() const {
  const ::msg::CSReqLoadingProgress* p = _impl_.loadingprogress_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqLoadingProgress&>(
      ::msg::_CSReqLoadingProgress_default_instance_);
}
inline const ::msg::CSReqLoadingProgress& CSReqBody::loadingprogress() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.LoadingProgress)
  return _internal_loadingprogress();
}
inline void CSReqBody::unsafe_arena_set_allocated_loadingprogress(
    ::msg::CSReqLoadingProgress* loadingprogress) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loadingprogress_);
  }
  _impl_.loadingprogress_ = loadingprogress;
  if (loadingprogress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.LoadingProgress)
}
inline ::msg::CSReqLoadingProgress* CSReqBody::release_loadingprogress() {
  
  ::msg::CSReqLoadingProgress* temp = _impl_.loadingprogress_;
  _impl_.loadingprogress_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqLoadingProgress* CSReqBody::unsafe_arena_release_loadingprogress() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.LoadingProgress)
  
  ::msg::CSReqLoadingProgress* temp = _impl_.loadingprogress_;
  _impl_.loadingprogress_ = nullptr;
  return temp;
}
inline ::msg::CSReqLoadingProgress* CSReqBody::_internal_mutable_loadingprogress() {
  
  if (_impl_.loadingprogress_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqLoadingProgress>(GetArenaForAllocation());
    _impl_.loadingprogress_ = p;
  }
  return _impl_.loadingprogress_;
}
inline ::msg::CSReqLoadingProgress* CSReqBody::mutable_loadingprogress() {
  ::msg::CSReqLoadingProgress* _msg = _internal_mutable_loadingprogress();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.LoadingProgress)
  return _msg;
}
inline void CSReqBody::set_allocated_loadingprogress(::msg::CSReqLoadingProgress* loadingprogress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loadingprogress_);
  }
  if (loadingprogress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loadingprogress));
    if (message_arena != submessage_arena) {
      loadingprogress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loadingprogress, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.loadingprogress_ = loadingprogress;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.LoadingProgress)
}

// .msg.CSReqPvpChat PvpChat = 33;
inline bool CSReqBody::_internal_has_pvpchat() const {
  return this != internal_default_instance() && _impl_.pvpchat_ != nullptr;
}
inline bool CSReqBody::has_pvpchat() const {
  return _internal_has_pvpchat();
}
inline const ::msg::CSReqPvpChat& CSReqBody::_internal_pvpchat() const {
  const ::msg::CSReqPvpChat* p = _impl_.pvpchat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPvpChat&>(
      ::msg::_CSReqPvpChat_default_instance_);
}
inline const ::msg::CSReqPvpChat& CSReqBody::pvpchat() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PvpChat)
  return _internal_pvpchat();
}
inline void CSReqBody::unsafe_arena_set_allocated_pvpchat(
    ::msg::CSReqPvpChat* pvpchat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpchat_);
  }
  _impl_.pvpchat_ = pvpchat;
  if (pvpchat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PvpChat)
}
inline ::msg::CSReqPvpChat* CSReqBody::release_pvpchat() {
  
  ::msg::CSReqPvpChat* temp = _impl_.pvpchat_;
  _impl_.pvpchat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPvpChat* CSReqBody::unsafe_arena_release_pvpchat() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PvpChat)
  
  ::msg::CSReqPvpChat* temp = _impl_.pvpchat_;
  _impl_.pvpchat_ = nullptr;
  return temp;
}
inline ::msg::CSReqPvpChat* CSReqBody::_internal_mutable_pvpchat() {
  
  if (_impl_.pvpchat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPvpChat>(GetArenaForAllocation());
    _impl_.pvpchat_ = p;
  }
  return _impl_.pvpchat_;
}
inline ::msg::CSReqPvpChat* CSReqBody::mutable_pvpchat() {
  ::msg::CSReqPvpChat* _msg = _internal_mutable_pvpchat();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PvpChat)
  return _msg;
}
inline void CSReqBody::set_allocated_pvpchat(::msg::CSReqPvpChat* pvpchat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpchat_);
  }
  if (pvpchat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvpchat));
    if (message_arena != submessage_arena) {
      pvpchat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpchat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpchat_ = pvpchat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PvpChat)
}

// .msg.CSReqChessCombine ChessCombine = 34;
inline bool CSReqBody::_internal_has_chesscombine() const {
  return this != internal_default_instance() && _impl_.chesscombine_ != nullptr;
}
inline bool CSReqBody::has_chesscombine() const {
  return _internal_has_chesscombine();
}
inline const ::msg::CSReqChessCombine& CSReqBody::_internal_chesscombine() const {
  const ::msg::CSReqChessCombine* p = _impl_.chesscombine_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqChessCombine&>(
      ::msg::_CSReqChessCombine_default_instance_);
}
inline const ::msg::CSReqChessCombine& CSReqBody::chesscombine() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ChessCombine)
  return _internal_chesscombine();
}
inline void CSReqBody::unsafe_arena_set_allocated_chesscombine(
    ::msg::CSReqChessCombine* chesscombine) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chesscombine_);
  }
  _impl_.chesscombine_ = chesscombine;
  if (chesscombine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ChessCombine)
}
inline ::msg::CSReqChessCombine* CSReqBody::release_chesscombine() {
  
  ::msg::CSReqChessCombine* temp = _impl_.chesscombine_;
  _impl_.chesscombine_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqChessCombine* CSReqBody::unsafe_arena_release_chesscombine() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ChessCombine)
  
  ::msg::CSReqChessCombine* temp = _impl_.chesscombine_;
  _impl_.chesscombine_ = nullptr;
  return temp;
}
inline ::msg::CSReqChessCombine* CSReqBody::_internal_mutable_chesscombine() {
  
  if (_impl_.chesscombine_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqChessCombine>(GetArenaForAllocation());
    _impl_.chesscombine_ = p;
  }
  return _impl_.chesscombine_;
}
inline ::msg::CSReqChessCombine* CSReqBody::mutable_chesscombine() {
  ::msg::CSReqChessCombine* _msg = _internal_mutable_chesscombine();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ChessCombine)
  return _msg;
}
inline void CSReqBody::set_allocated_chesscombine(::msg::CSReqChessCombine* chesscombine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chesscombine_);
  }
  if (chesscombine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chesscombine));
    if (message_arena != submessage_arena) {
      chesscombine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chesscombine, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chesscombine_ = chesscombine;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ChessCombine)
}

// .msg.CSReqExpose Expose = 35;
inline bool CSReqBody::_internal_has_expose() const {
  return this != internal_default_instance() && _impl_.expose_ != nullptr;
}
inline bool CSReqBody::has_expose() const {
  return _internal_has_expose();
}
inline const ::msg::CSReqExpose& CSReqBody::_internal_expose() const {
  const ::msg::CSReqExpose* p = _impl_.expose_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqExpose&>(
      ::msg::_CSReqExpose_default_instance_);
}
inline const ::msg::CSReqExpose& CSReqBody::expose() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.Expose)
  return _internal_expose();
}
inline void CSReqBody::unsafe_arena_set_allocated_expose(
    ::msg::CSReqExpose* expose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expose_);
  }
  _impl_.expose_ = expose;
  if (expose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.Expose)
}
inline ::msg::CSReqExpose* CSReqBody::release_expose() {
  
  ::msg::CSReqExpose* temp = _impl_.expose_;
  _impl_.expose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqExpose* CSReqBody::unsafe_arena_release_expose() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.Expose)
  
  ::msg::CSReqExpose* temp = _impl_.expose_;
  _impl_.expose_ = nullptr;
  return temp;
}
inline ::msg::CSReqExpose* CSReqBody::_internal_mutable_expose() {
  
  if (_impl_.expose_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqExpose>(GetArenaForAllocation());
    _impl_.expose_ = p;
  }
  return _impl_.expose_;
}
inline ::msg::CSReqExpose* CSReqBody::mutable_expose() {
  ::msg::CSReqExpose* _msg = _internal_mutable_expose();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.Expose)
  return _msg;
}
inline void CSReqBody::set_allocated_expose(::msg::CSReqExpose* expose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expose_);
  }
  if (expose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expose));
    if (message_arena != submessage_arena) {
      expose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expose_ = expose;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.Expose)
}

// .msg.CSReqApplyOrderId ApplyOrderId = 36;
inline bool CSReqBody::_internal_has_applyorderid() const {
  return this != internal_default_instance() && _impl_.applyorderid_ != nullptr;
}
inline bool CSReqBody::has_applyorderid() const {
  return _internal_has_applyorderid();
}
inline const ::msg::CSReqApplyOrderId& CSReqBody::_internal_applyorderid() const {
  const ::msg::CSReqApplyOrderId* p = _impl_.applyorderid_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqApplyOrderId&>(
      ::msg::_CSReqApplyOrderId_default_instance_);
}
inline const ::msg::CSReqApplyOrderId& CSReqBody::applyorderid() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ApplyOrderId)
  return _internal_applyorderid();
}
inline void CSReqBody::unsafe_arena_set_allocated_applyorderid(
    ::msg::CSReqApplyOrderId* applyorderid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.applyorderid_);
  }
  _impl_.applyorderid_ = applyorderid;
  if (applyorderid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ApplyOrderId)
}
inline ::msg::CSReqApplyOrderId* CSReqBody::release_applyorderid() {
  
  ::msg::CSReqApplyOrderId* temp = _impl_.applyorderid_;
  _impl_.applyorderid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqApplyOrderId* CSReqBody::unsafe_arena_release_applyorderid() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ApplyOrderId)
  
  ::msg::CSReqApplyOrderId* temp = _impl_.applyorderid_;
  _impl_.applyorderid_ = nullptr;
  return temp;
}
inline ::msg::CSReqApplyOrderId* CSReqBody::_internal_mutable_applyorderid() {
  
  if (_impl_.applyorderid_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqApplyOrderId>(GetArenaForAllocation());
    _impl_.applyorderid_ = p;
  }
  return _impl_.applyorderid_;
}
inline ::msg::CSReqApplyOrderId* CSReqBody::mutable_applyorderid() {
  ::msg::CSReqApplyOrderId* _msg = _internal_mutable_applyorderid();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ApplyOrderId)
  return _msg;
}
inline void CSReqBody::set_allocated_applyorderid(::msg::CSReqApplyOrderId* applyorderid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.applyorderid_);
  }
  if (applyorderid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applyorderid));
    if (message_arena != submessage_arena) {
      applyorderid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applyorderid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.applyorderid_ = applyorderid;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ApplyOrderId)
}

// .msg.CSReqReportOrderInfo ReportOrderInfo = 37;
inline bool CSReqBody::_internal_has_reportorderinfo() const {
  return this != internal_default_instance() && _impl_.reportorderinfo_ != nullptr;
}
inline bool CSReqBody::has_reportorderinfo() const {
  return _internal_has_reportorderinfo();
}
inline const ::msg::CSReqReportOrderInfo& CSReqBody::_internal_reportorderinfo() const {
  const ::msg::CSReqReportOrderInfo* p = _impl_.reportorderinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqReportOrderInfo&>(
      ::msg::_CSReqReportOrderInfo_default_instance_);
}
inline const ::msg::CSReqReportOrderInfo& CSReqBody::reportorderinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ReportOrderInfo)
  return _internal_reportorderinfo();
}
inline void CSReqBody::unsafe_arena_set_allocated_reportorderinfo(
    ::msg::CSReqReportOrderInfo* reportorderinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportorderinfo_);
  }
  _impl_.reportorderinfo_ = reportorderinfo;
  if (reportorderinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ReportOrderInfo)
}
inline ::msg::CSReqReportOrderInfo* CSReqBody::release_reportorderinfo() {
  
  ::msg::CSReqReportOrderInfo* temp = _impl_.reportorderinfo_;
  _impl_.reportorderinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqReportOrderInfo* CSReqBody::unsafe_arena_release_reportorderinfo() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ReportOrderInfo)
  
  ::msg::CSReqReportOrderInfo* temp = _impl_.reportorderinfo_;
  _impl_.reportorderinfo_ = nullptr;
  return temp;
}
inline ::msg::CSReqReportOrderInfo* CSReqBody::_internal_mutable_reportorderinfo() {
  
  if (_impl_.reportorderinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqReportOrderInfo>(GetArenaForAllocation());
    _impl_.reportorderinfo_ = p;
  }
  return _impl_.reportorderinfo_;
}
inline ::msg::CSReqReportOrderInfo* CSReqBody::mutable_reportorderinfo() {
  ::msg::CSReqReportOrderInfo* _msg = _internal_mutable_reportorderinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ReportOrderInfo)
  return _msg;
}
inline void CSReqBody::set_allocated_reportorderinfo(::msg::CSReqReportOrderInfo* reportorderinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportorderinfo_);
  }
  if (reportorderinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reportorderinfo));
    if (message_arena != submessage_arena) {
      reportorderinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reportorderinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reportorderinfo_ = reportorderinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ReportOrderInfo)
}

// .msg.CSReqSetItem SetItem = 38;
inline bool CSReqBody::_internal_has_setitem() const {
  return this != internal_default_instance() && _impl_.setitem_ != nullptr;
}
inline bool CSReqBody::has_setitem() const {
  return _internal_has_setitem();
}
inline const ::msg::CSReqSetItem& CSReqBody::_internal_setitem() const {
  const ::msg::CSReqSetItem* p = _impl_.setitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSetItem&>(
      ::msg::_CSReqSetItem_default_instance_);
}
inline const ::msg::CSReqSetItem& CSReqBody::setitem() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SetItem)
  return _internal_setitem();
}
inline void CSReqBody::unsafe_arena_set_allocated_setitem(
    ::msg::CSReqSetItem* setitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setitem_);
  }
  _impl_.setitem_ = setitem;
  if (setitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SetItem)
}
inline ::msg::CSReqSetItem* CSReqBody::release_setitem() {
  
  ::msg::CSReqSetItem* temp = _impl_.setitem_;
  _impl_.setitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSetItem* CSReqBody::unsafe_arena_release_setitem() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SetItem)
  
  ::msg::CSReqSetItem* temp = _impl_.setitem_;
  _impl_.setitem_ = nullptr;
  return temp;
}
inline ::msg::CSReqSetItem* CSReqBody::_internal_mutable_setitem() {
  
  if (_impl_.setitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSetItem>(GetArenaForAllocation());
    _impl_.setitem_ = p;
  }
  return _impl_.setitem_;
}
inline ::msg::CSReqSetItem* CSReqBody::mutable_setitem() {
  ::msg::CSReqSetItem* _msg = _internal_mutable_setitem();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SetItem)
  return _msg;
}
inline void CSReqBody::set_allocated_setitem(::msg::CSReqSetItem* setitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setitem_);
  }
  if (setitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setitem));
    if (message_arena != submessage_arena) {
      setitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setitem_ = setitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SetItem)
}

// .msg.CSReqUnsetItem UnsetItem = 39;
inline bool CSReqBody::_internal_has_unsetitem() const {
  return this != internal_default_instance() && _impl_.unsetitem_ != nullptr;
}
inline bool CSReqBody::has_unsetitem() const {
  return _internal_has_unsetitem();
}
inline const ::msg::CSReqUnsetItem& CSReqBody::_internal_unsetitem() const {
  const ::msg::CSReqUnsetItem* p = _impl_.unsetitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUnsetItem&>(
      ::msg::_CSReqUnsetItem_default_instance_);
}
inline const ::msg::CSReqUnsetItem& CSReqBody::unsetitem() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UnsetItem)
  return _internal_unsetitem();
}
inline void CSReqBody::unsafe_arena_set_allocated_unsetitem(
    ::msg::CSReqUnsetItem* unsetitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetitem_);
  }
  _impl_.unsetitem_ = unsetitem;
  if (unsetitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UnsetItem)
}
inline ::msg::CSReqUnsetItem* CSReqBody::release_unsetitem() {
  
  ::msg::CSReqUnsetItem* temp = _impl_.unsetitem_;
  _impl_.unsetitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUnsetItem* CSReqBody::unsafe_arena_release_unsetitem() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UnsetItem)
  
  ::msg::CSReqUnsetItem* temp = _impl_.unsetitem_;
  _impl_.unsetitem_ = nullptr;
  return temp;
}
inline ::msg::CSReqUnsetItem* CSReqBody::_internal_mutable_unsetitem() {
  
  if (_impl_.unsetitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUnsetItem>(GetArenaForAllocation());
    _impl_.unsetitem_ = p;
  }
  return _impl_.unsetitem_;
}
inline ::msg::CSReqUnsetItem* CSReqBody::mutable_unsetitem() {
  ::msg::CSReqUnsetItem* _msg = _internal_mutable_unsetitem();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UnsetItem)
  return _msg;
}
inline void CSReqBody::set_allocated_unsetitem(::msg::CSReqUnsetItem* unsetitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetitem_);
  }
  if (unsetitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unsetitem));
    if (message_arena != submessage_arena) {
      unsetitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsetitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unsetitem_ = unsetitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UnsetItem)
}

// .msg.CSReqRandomItem RandomItem = 40;
inline bool CSReqBody::_internal_has_randomitem() const {
  return this != internal_default_instance() && _impl_.randomitem_ != nullptr;
}
inline bool CSReqBody::has_randomitem() const {
  return _internal_has_randomitem();
}
inline const ::msg::CSReqRandomItem& CSReqBody::_internal_randomitem() const {
  const ::msg::CSReqRandomItem* p = _impl_.randomitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRandomItem&>(
      ::msg::_CSReqRandomItem_default_instance_);
}
inline const ::msg::CSReqRandomItem& CSReqBody::randomitem() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RandomItem)
  return _internal_randomitem();
}
inline void CSReqBody::unsafe_arena_set_allocated_randomitem(
    ::msg::CSReqRandomItem* randomitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.randomitem_);
  }
  _impl_.randomitem_ = randomitem;
  if (randomitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RandomItem)
}
inline ::msg::CSReqRandomItem* CSReqBody::release_randomitem() {
  
  ::msg::CSReqRandomItem* temp = _impl_.randomitem_;
  _impl_.randomitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRandomItem* CSReqBody::unsafe_arena_release_randomitem() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RandomItem)
  
  ::msg::CSReqRandomItem* temp = _impl_.randomitem_;
  _impl_.randomitem_ = nullptr;
  return temp;
}
inline ::msg::CSReqRandomItem* CSReqBody::_internal_mutable_randomitem() {
  
  if (_impl_.randomitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRandomItem>(GetArenaForAllocation());
    _impl_.randomitem_ = p;
  }
  return _impl_.randomitem_;
}
inline ::msg::CSReqRandomItem* CSReqBody::mutable_randomitem() {
  ::msg::CSReqRandomItem* _msg = _internal_mutable_randomitem();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RandomItem)
  return _msg;
}
inline void CSReqBody::set_allocated_randomitem(::msg::CSReqRandomItem* randomitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.randomitem_);
  }
  if (randomitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(randomitem));
    if (message_arena != submessage_arena) {
      randomitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, randomitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.randomitem_ = randomitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RandomItem)
}

// .msg.CSReqChat Chat = 41;
inline bool CSReqBody::_internal_has_chat() const {
  return this != internal_default_instance() && _impl_.chat_ != nullptr;
}
inline bool CSReqBody::has_chat() const {
  return _internal_has_chat();
}
inline const ::msg::CSReqChat& CSReqBody::_internal_chat() const {
  const ::msg::CSReqChat* p = _impl_.chat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqChat&>(
      ::msg::_CSReqChat_default_instance_);
}
inline const ::msg::CSReqChat& CSReqBody::chat() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.Chat)
  return _internal_chat();
}
inline void CSReqBody::unsafe_arena_set_allocated_chat(
    ::msg::CSReqChat* chat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chat_);
  }
  _impl_.chat_ = chat;
  if (chat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.Chat)
}
inline ::msg::CSReqChat* CSReqBody::release_chat() {
  
  ::msg::CSReqChat* temp = _impl_.chat_;
  _impl_.chat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqChat* CSReqBody::unsafe_arena_release_chat() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.Chat)
  
  ::msg::CSReqChat* temp = _impl_.chat_;
  _impl_.chat_ = nullptr;
  return temp;
}
inline ::msg::CSReqChat* CSReqBody::_internal_mutable_chat() {
  
  if (_impl_.chat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqChat>(GetArenaForAllocation());
    _impl_.chat_ = p;
  }
  return _impl_.chat_;
}
inline ::msg::CSReqChat* CSReqBody::mutable_chat() {
  ::msg::CSReqChat* _msg = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.Chat)
  return _msg;
}
inline void CSReqBody::set_allocated_chat(::msg::CSReqChat* chat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chat_);
  }
  if (chat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat));
    if (message_arena != submessage_arena) {
      chat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chat_ = chat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.Chat)
}

// .msg.CSReqSetChessPlayer SetChessPlayer = 42;
inline bool CSReqBody::_internal_has_setchessplayer() const {
  return this != internal_default_instance() && _impl_.setchessplayer_ != nullptr;
}
inline bool CSReqBody::has_setchessplayer() const {
  return _internal_has_setchessplayer();
}
inline const ::msg::CSReqSetChessPlayer& CSReqBody::_internal_setchessplayer() const {
  const ::msg::CSReqSetChessPlayer* p = _impl_.setchessplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSetChessPlayer&>(
      ::msg::_CSReqSetChessPlayer_default_instance_);
}
inline const ::msg::CSReqSetChessPlayer& CSReqBody::setchessplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SetChessPlayer)
  return _internal_setchessplayer();
}
inline void CSReqBody::unsafe_arena_set_allocated_setchessplayer(
    ::msg::CSReqSetChessPlayer* setchessplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setchessplayer_);
  }
  _impl_.setchessplayer_ = setchessplayer;
  if (setchessplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SetChessPlayer)
}
inline ::msg::CSReqSetChessPlayer* CSReqBody::release_setchessplayer() {
  
  ::msg::CSReqSetChessPlayer* temp = _impl_.setchessplayer_;
  _impl_.setchessplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSetChessPlayer* CSReqBody::unsafe_arena_release_setchessplayer() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SetChessPlayer)
  
  ::msg::CSReqSetChessPlayer* temp = _impl_.setchessplayer_;
  _impl_.setchessplayer_ = nullptr;
  return temp;
}
inline ::msg::CSReqSetChessPlayer* CSReqBody::_internal_mutable_setchessplayer() {
  
  if (_impl_.setchessplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSetChessPlayer>(GetArenaForAllocation());
    _impl_.setchessplayer_ = p;
  }
  return _impl_.setchessplayer_;
}
inline ::msg::CSReqSetChessPlayer* CSReqBody::mutable_setchessplayer() {
  ::msg::CSReqSetChessPlayer* _msg = _internal_mutable_setchessplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SetChessPlayer)
  return _msg;
}
inline void CSReqBody::set_allocated_setchessplayer(::msg::CSReqSetChessPlayer* setchessplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setchessplayer_);
  }
  if (setchessplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setchessplayer));
    if (message_arena != submessage_arena) {
      setchessplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setchessplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setchessplayer_ = setchessplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SetChessPlayer)
}

// .msg.CSReqUnsetChessPlayer UnsetChessPlayer = 43;
inline bool CSReqBody::_internal_has_unsetchessplayer() const {
  return this != internal_default_instance() && _impl_.unsetchessplayer_ != nullptr;
}
inline bool CSReqBody::has_unsetchessplayer() const {
  return _internal_has_unsetchessplayer();
}
inline const ::msg::CSReqUnsetChessPlayer& CSReqBody::_internal_unsetchessplayer() const {
  const ::msg::CSReqUnsetChessPlayer* p = _impl_.unsetchessplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUnsetChessPlayer&>(
      ::msg::_CSReqUnsetChessPlayer_default_instance_);
}
inline const ::msg::CSReqUnsetChessPlayer& CSReqBody::unsetchessplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UnsetChessPlayer)
  return _internal_unsetchessplayer();
}
inline void CSReqBody::unsafe_arena_set_allocated_unsetchessplayer(
    ::msg::CSReqUnsetChessPlayer* unsetchessplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetchessplayer_);
  }
  _impl_.unsetchessplayer_ = unsetchessplayer;
  if (unsetchessplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UnsetChessPlayer)
}
inline ::msg::CSReqUnsetChessPlayer* CSReqBody::release_unsetchessplayer() {
  
  ::msg::CSReqUnsetChessPlayer* temp = _impl_.unsetchessplayer_;
  _impl_.unsetchessplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUnsetChessPlayer* CSReqBody::unsafe_arena_release_unsetchessplayer() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UnsetChessPlayer)
  
  ::msg::CSReqUnsetChessPlayer* temp = _impl_.unsetchessplayer_;
  _impl_.unsetchessplayer_ = nullptr;
  return temp;
}
inline ::msg::CSReqUnsetChessPlayer* CSReqBody::_internal_mutable_unsetchessplayer() {
  
  if (_impl_.unsetchessplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUnsetChessPlayer>(GetArenaForAllocation());
    _impl_.unsetchessplayer_ = p;
  }
  return _impl_.unsetchessplayer_;
}
inline ::msg::CSReqUnsetChessPlayer* CSReqBody::mutable_unsetchessplayer() {
  ::msg::CSReqUnsetChessPlayer* _msg = _internal_mutable_unsetchessplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UnsetChessPlayer)
  return _msg;
}
inline void CSReqBody::set_allocated_unsetchessplayer(::msg::CSReqUnsetChessPlayer* unsetchessplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetchessplayer_);
  }
  if (unsetchessplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unsetchessplayer));
    if (message_arena != submessage_arena) {
      unsetchessplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsetchessplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unsetchessplayer_ = unsetchessplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UnsetChessPlayer)
}

// .msg.CSReqGetFansList GetFansList = 44;
inline bool CSReqBody::_internal_has_getfanslist() const {
  return this != internal_default_instance() && _impl_.getfanslist_ != nullptr;
}
inline bool CSReqBody::has_getfanslist() const {
  return _internal_has_getfanslist();
}
inline const ::msg::CSReqGetFansList& CSReqBody::_internal_getfanslist() const {
  const ::msg::CSReqGetFansList* p = _impl_.getfanslist_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetFansList&>(
      ::msg::_CSReqGetFansList_default_instance_);
}
inline const ::msg::CSReqGetFansList& CSReqBody::getfanslist() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetFansList)
  return _internal_getfanslist();
}
inline void CSReqBody::unsafe_arena_set_allocated_getfanslist(
    ::msg::CSReqGetFansList* getfanslist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getfanslist_);
  }
  _impl_.getfanslist_ = getfanslist;
  if (getfanslist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetFansList)
}
inline ::msg::CSReqGetFansList* CSReqBody::release_getfanslist() {
  
  ::msg::CSReqGetFansList* temp = _impl_.getfanslist_;
  _impl_.getfanslist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetFansList* CSReqBody::unsafe_arena_release_getfanslist() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetFansList)
  
  ::msg::CSReqGetFansList* temp = _impl_.getfanslist_;
  _impl_.getfanslist_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetFansList* CSReqBody::_internal_mutable_getfanslist() {
  
  if (_impl_.getfanslist_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetFansList>(GetArenaForAllocation());
    _impl_.getfanslist_ = p;
  }
  return _impl_.getfanslist_;
}
inline ::msg::CSReqGetFansList* CSReqBody::mutable_getfanslist() {
  ::msg::CSReqGetFansList* _msg = _internal_mutable_getfanslist();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetFansList)
  return _msg;
}
inline void CSReqBody::set_allocated_getfanslist(::msg::CSReqGetFansList* getfanslist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getfanslist_);
  }
  if (getfanslist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getfanslist));
    if (message_arena != submessage_arena) {
      getfanslist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getfanslist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getfanslist_ = getfanslist;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetFansList)
}

// .msg.CSReqFollowPlayer FollowPlayer = 45;
inline bool CSReqBody::_internal_has_followplayer() const {
  return this != internal_default_instance() && _impl_.followplayer_ != nullptr;
}
inline bool CSReqBody::has_followplayer() const {
  return _internal_has_followplayer();
}
inline const ::msg::CSReqFollowPlayer& CSReqBody::_internal_followplayer() const {
  const ::msg::CSReqFollowPlayer* p = _impl_.followplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqFollowPlayer&>(
      ::msg::_CSReqFollowPlayer_default_instance_);
}
inline const ::msg::CSReqFollowPlayer& CSReqBody::followplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.FollowPlayer)
  return _internal_followplayer();
}
inline void CSReqBody::unsafe_arena_set_allocated_followplayer(
    ::msg::CSReqFollowPlayer* followplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.followplayer_);
  }
  _impl_.followplayer_ = followplayer;
  if (followplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.FollowPlayer)
}
inline ::msg::CSReqFollowPlayer* CSReqBody::release_followplayer() {
  
  ::msg::CSReqFollowPlayer* temp = _impl_.followplayer_;
  _impl_.followplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqFollowPlayer* CSReqBody::unsafe_arena_release_followplayer() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.FollowPlayer)
  
  ::msg::CSReqFollowPlayer* temp = _impl_.followplayer_;
  _impl_.followplayer_ = nullptr;
  return temp;
}
inline ::msg::CSReqFollowPlayer* CSReqBody::_internal_mutable_followplayer() {
  
  if (_impl_.followplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqFollowPlayer>(GetArenaForAllocation());
    _impl_.followplayer_ = p;
  }
  return _impl_.followplayer_;
}
inline ::msg::CSReqFollowPlayer* CSReqBody::mutable_followplayer() {
  ::msg::CSReqFollowPlayer* _msg = _internal_mutable_followplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.FollowPlayer)
  return _msg;
}
inline void CSReqBody::set_allocated_followplayer(::msg::CSReqFollowPlayer* followplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.followplayer_);
  }
  if (followplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(followplayer));
    if (message_arena != submessage_arena) {
      followplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, followplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.followplayer_ = followplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.FollowPlayer)
}

// .msg.CSReqUnfollowPlayer UnfollowPlayer = 46;
inline bool CSReqBody::_internal_has_unfollowplayer() const {
  return this != internal_default_instance() && _impl_.unfollowplayer_ != nullptr;
}
inline bool CSReqBody::has_unfollowplayer() const {
  return _internal_has_unfollowplayer();
}
inline const ::msg::CSReqUnfollowPlayer& CSReqBody::_internal_unfollowplayer() const {
  const ::msg::CSReqUnfollowPlayer* p = _impl_.unfollowplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUnfollowPlayer&>(
      ::msg::_CSReqUnfollowPlayer_default_instance_);
}
inline const ::msg::CSReqUnfollowPlayer& CSReqBody::unfollowplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UnfollowPlayer)
  return _internal_unfollowplayer();
}
inline void CSReqBody::unsafe_arena_set_allocated_unfollowplayer(
    ::msg::CSReqUnfollowPlayer* unfollowplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unfollowplayer_);
  }
  _impl_.unfollowplayer_ = unfollowplayer;
  if (unfollowplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UnfollowPlayer)
}
inline ::msg::CSReqUnfollowPlayer* CSReqBody::release_unfollowplayer() {
  
  ::msg::CSReqUnfollowPlayer* temp = _impl_.unfollowplayer_;
  _impl_.unfollowplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUnfollowPlayer* CSReqBody::unsafe_arena_release_unfollowplayer() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UnfollowPlayer)
  
  ::msg::CSReqUnfollowPlayer* temp = _impl_.unfollowplayer_;
  _impl_.unfollowplayer_ = nullptr;
  return temp;
}
inline ::msg::CSReqUnfollowPlayer* CSReqBody::_internal_mutable_unfollowplayer() {
  
  if (_impl_.unfollowplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUnfollowPlayer>(GetArenaForAllocation());
    _impl_.unfollowplayer_ = p;
  }
  return _impl_.unfollowplayer_;
}
inline ::msg::CSReqUnfollowPlayer* CSReqBody::mutable_unfollowplayer() {
  ::msg::CSReqUnfollowPlayer* _msg = _internal_mutable_unfollowplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UnfollowPlayer)
  return _msg;
}
inline void CSReqBody::set_allocated_unfollowplayer(::msg::CSReqUnfollowPlayer* unfollowplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unfollowplayer_);
  }
  if (unfollowplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unfollowplayer));
    if (message_arena != submessage_arena) {
      unfollowplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unfollowplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unfollowplayer_ = unfollowplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UnfollowPlayer)
}

// .msg.CSReqPlayersStatusInfo PlayersStatusInfo = 47;
inline bool CSReqBody::_internal_has_playersstatusinfo() const {
  return this != internal_default_instance() && _impl_.playersstatusinfo_ != nullptr;
}
inline bool CSReqBody::has_playersstatusinfo() const {
  return _internal_has_playersstatusinfo();
}
inline const ::msg::CSReqPlayersStatusInfo& CSReqBody::_internal_playersstatusinfo() const {
  const ::msg::CSReqPlayersStatusInfo* p = _impl_.playersstatusinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPlayersStatusInfo&>(
      ::msg::_CSReqPlayersStatusInfo_default_instance_);
}
inline const ::msg::CSReqPlayersStatusInfo& CSReqBody::playersstatusinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PlayersStatusInfo)
  return _internal_playersstatusinfo();
}
inline void CSReqBody::unsafe_arena_set_allocated_playersstatusinfo(
    ::msg::CSReqPlayersStatusInfo* playersstatusinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playersstatusinfo_);
  }
  _impl_.playersstatusinfo_ = playersstatusinfo;
  if (playersstatusinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PlayersStatusInfo)
}
inline ::msg::CSReqPlayersStatusInfo* CSReqBody::release_playersstatusinfo() {
  
  ::msg::CSReqPlayersStatusInfo* temp = _impl_.playersstatusinfo_;
  _impl_.playersstatusinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPlayersStatusInfo* CSReqBody::unsafe_arena_release_playersstatusinfo() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PlayersStatusInfo)
  
  ::msg::CSReqPlayersStatusInfo* temp = _impl_.playersstatusinfo_;
  _impl_.playersstatusinfo_ = nullptr;
  return temp;
}
inline ::msg::CSReqPlayersStatusInfo* CSReqBody::_internal_mutable_playersstatusinfo() {
  
  if (_impl_.playersstatusinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPlayersStatusInfo>(GetArenaForAllocation());
    _impl_.playersstatusinfo_ = p;
  }
  return _impl_.playersstatusinfo_;
}
inline ::msg::CSReqPlayersStatusInfo* CSReqBody::mutable_playersstatusinfo() {
  ::msg::CSReqPlayersStatusInfo* _msg = _internal_mutable_playersstatusinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PlayersStatusInfo)
  return _msg;
}
inline void CSReqBody::set_allocated_playersstatusinfo(::msg::CSReqPlayersStatusInfo* playersstatusinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playersstatusinfo_);
  }
  if (playersstatusinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playersstatusinfo));
    if (message_arena != submessage_arena) {
      playersstatusinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playersstatusinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playersstatusinfo_ = playersstatusinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PlayersStatusInfo)
}

// .msg.CSReqInviteJoinTeam InviteJoinTeam = 48;
inline bool CSReqBody::_internal_has_invitejointeam() const {
  return this != internal_default_instance() && _impl_.invitejointeam_ != nullptr;
}
inline bool CSReqBody::has_invitejointeam() const {
  return _internal_has_invitejointeam();
}
inline const ::msg::CSReqInviteJoinTeam& CSReqBody::_internal_invitejointeam() const {
  const ::msg::CSReqInviteJoinTeam* p = _impl_.invitejointeam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqInviteJoinTeam&>(
      ::msg::_CSReqInviteJoinTeam_default_instance_);
}
inline const ::msg::CSReqInviteJoinTeam& CSReqBody::invitejointeam() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.InviteJoinTeam)
  return _internal_invitejointeam();
}
inline void CSReqBody::unsafe_arena_set_allocated_invitejointeam(
    ::msg::CSReqInviteJoinTeam* invitejointeam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invitejointeam_);
  }
  _impl_.invitejointeam_ = invitejointeam;
  if (invitejointeam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.InviteJoinTeam)
}
inline ::msg::CSReqInviteJoinTeam* CSReqBody::release_invitejointeam() {
  
  ::msg::CSReqInviteJoinTeam* temp = _impl_.invitejointeam_;
  _impl_.invitejointeam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqInviteJoinTeam* CSReqBody::unsafe_arena_release_invitejointeam() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.InviteJoinTeam)
  
  ::msg::CSReqInviteJoinTeam* temp = _impl_.invitejointeam_;
  _impl_.invitejointeam_ = nullptr;
  return temp;
}
inline ::msg::CSReqInviteJoinTeam* CSReqBody::_internal_mutable_invitejointeam() {
  
  if (_impl_.invitejointeam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqInviteJoinTeam>(GetArenaForAllocation());
    _impl_.invitejointeam_ = p;
  }
  return _impl_.invitejointeam_;
}
inline ::msg::CSReqInviteJoinTeam* CSReqBody::mutable_invitejointeam() {
  ::msg::CSReqInviteJoinTeam* _msg = _internal_mutable_invitejointeam();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.InviteJoinTeam)
  return _msg;
}
inline void CSReqBody::set_allocated_invitejointeam(::msg::CSReqInviteJoinTeam* invitejointeam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invitejointeam_);
  }
  if (invitejointeam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitejointeam));
    if (message_arena != submessage_arena) {
      invitejointeam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invitejointeam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.invitejointeam_ = invitejointeam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.InviteJoinTeam)
}

// .msg.CSReqJoinTeam JoinTeam = 49;
inline bool CSReqBody::_internal_has_jointeam() const {
  return this != internal_default_instance() && _impl_.jointeam_ != nullptr;
}
inline bool CSReqBody::has_jointeam() const {
  return _internal_has_jointeam();
}
inline const ::msg::CSReqJoinTeam& CSReqBody::_internal_jointeam() const {
  const ::msg::CSReqJoinTeam* p = _impl_.jointeam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqJoinTeam&>(
      ::msg::_CSReqJoinTeam_default_instance_);
}
inline const ::msg::CSReqJoinTeam& CSReqBody::jointeam() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.JoinTeam)
  return _internal_jointeam();
}
inline void CSReqBody::unsafe_arena_set_allocated_jointeam(
    ::msg::CSReqJoinTeam* jointeam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jointeam_);
  }
  _impl_.jointeam_ = jointeam;
  if (jointeam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.JoinTeam)
}
inline ::msg::CSReqJoinTeam* CSReqBody::release_jointeam() {
  
  ::msg::CSReqJoinTeam* temp = _impl_.jointeam_;
  _impl_.jointeam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqJoinTeam* CSReqBody::unsafe_arena_release_jointeam() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.JoinTeam)
  
  ::msg::CSReqJoinTeam* temp = _impl_.jointeam_;
  _impl_.jointeam_ = nullptr;
  return temp;
}
inline ::msg::CSReqJoinTeam* CSReqBody::_internal_mutable_jointeam() {
  
  if (_impl_.jointeam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqJoinTeam>(GetArenaForAllocation());
    _impl_.jointeam_ = p;
  }
  return _impl_.jointeam_;
}
inline ::msg::CSReqJoinTeam* CSReqBody::mutable_jointeam() {
  ::msg::CSReqJoinTeam* _msg = _internal_mutable_jointeam();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.JoinTeam)
  return _msg;
}
inline void CSReqBody::set_allocated_jointeam(::msg::CSReqJoinTeam* jointeam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jointeam_);
  }
  if (jointeam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jointeam));
    if (message_arena != submessage_arena) {
      jointeam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jointeam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.jointeam_ = jointeam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.JoinTeam)
}

// .msg.CSReqKickOffTeamPlayer KickOffTeamPlayer = 50;
inline bool CSReqBody::_internal_has_kickoffteamplayer() const {
  return this != internal_default_instance() && _impl_.kickoffteamplayer_ != nullptr;
}
inline bool CSReqBody::has_kickoffteamplayer() const {
  return _internal_has_kickoffteamplayer();
}
inline const ::msg::CSReqKickOffTeamPlayer& CSReqBody::_internal_kickoffteamplayer() const {
  const ::msg::CSReqKickOffTeamPlayer* p = _impl_.kickoffteamplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqKickOffTeamPlayer&>(
      ::msg::_CSReqKickOffTeamPlayer_default_instance_);
}
inline const ::msg::CSReqKickOffTeamPlayer& CSReqBody::kickoffteamplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.KickOffTeamPlayer)
  return _internal_kickoffteamplayer();
}
inline void CSReqBody::unsafe_arena_set_allocated_kickoffteamplayer(
    ::msg::CSReqKickOffTeamPlayer* kickoffteamplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kickoffteamplayer_);
  }
  _impl_.kickoffteamplayer_ = kickoffteamplayer;
  if (kickoffteamplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.KickOffTeamPlayer)
}
inline ::msg::CSReqKickOffTeamPlayer* CSReqBody::release_kickoffteamplayer() {
  
  ::msg::CSReqKickOffTeamPlayer* temp = _impl_.kickoffteamplayer_;
  _impl_.kickoffteamplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqKickOffTeamPlayer* CSReqBody::unsafe_arena_release_kickoffteamplayer() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.KickOffTeamPlayer)
  
  ::msg::CSReqKickOffTeamPlayer* temp = _impl_.kickoffteamplayer_;
  _impl_.kickoffteamplayer_ = nullptr;
  return temp;
}
inline ::msg::CSReqKickOffTeamPlayer* CSReqBody::_internal_mutable_kickoffteamplayer() {
  
  if (_impl_.kickoffteamplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqKickOffTeamPlayer>(GetArenaForAllocation());
    _impl_.kickoffteamplayer_ = p;
  }
  return _impl_.kickoffteamplayer_;
}
inline ::msg::CSReqKickOffTeamPlayer* CSReqBody::mutable_kickoffteamplayer() {
  ::msg::CSReqKickOffTeamPlayer* _msg = _internal_mutable_kickoffteamplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.KickOffTeamPlayer)
  return _msg;
}
inline void CSReqBody::set_allocated_kickoffteamplayer(::msg::CSReqKickOffTeamPlayer* kickoffteamplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kickoffteamplayer_);
  }
  if (kickoffteamplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kickoffteamplayer));
    if (message_arena != submessage_arena) {
      kickoffteamplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kickoffteamplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kickoffteamplayer_ = kickoffteamplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.KickOffTeamPlayer)
}

// .msg.CSReqTeamMsg TeamMsg = 51;
inline bool CSReqBody::_internal_has_teammsg() const {
  return this != internal_default_instance() && _impl_.teammsg_ != nullptr;
}
inline bool CSReqBody::has_teammsg() const {
  return _internal_has_teammsg();
}
inline const ::msg::CSReqTeamMsg& CSReqBody::_internal_teammsg() const {
  const ::msg::CSReqTeamMsg* p = _impl_.teammsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqTeamMsg&>(
      ::msg::_CSReqTeamMsg_default_instance_);
}
inline const ::msg::CSReqTeamMsg& CSReqBody::teammsg() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.TeamMsg)
  return _internal_teammsg();
}
inline void CSReqBody::unsafe_arena_set_allocated_teammsg(
    ::msg::CSReqTeamMsg* teammsg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teammsg_);
  }
  _impl_.teammsg_ = teammsg;
  if (teammsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.TeamMsg)
}
inline ::msg::CSReqTeamMsg* CSReqBody::release_teammsg() {
  
  ::msg::CSReqTeamMsg* temp = _impl_.teammsg_;
  _impl_.teammsg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqTeamMsg* CSReqBody::unsafe_arena_release_teammsg() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.TeamMsg)
  
  ::msg::CSReqTeamMsg* temp = _impl_.teammsg_;
  _impl_.teammsg_ = nullptr;
  return temp;
}
inline ::msg::CSReqTeamMsg* CSReqBody::_internal_mutable_teammsg() {
  
  if (_impl_.teammsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqTeamMsg>(GetArenaForAllocation());
    _impl_.teammsg_ = p;
  }
  return _impl_.teammsg_;
}
inline ::msg::CSReqTeamMsg* CSReqBody::mutable_teammsg() {
  ::msg::CSReqTeamMsg* _msg = _internal_mutable_teammsg();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.TeamMsg)
  return _msg;
}
inline void CSReqBody::set_allocated_teammsg(::msg::CSReqTeamMsg* teammsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teammsg_);
  }
  if (teammsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teammsg));
    if (message_arena != submessage_arena) {
      teammsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teammsg, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.teammsg_ = teammsg;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.TeamMsg)
}

// .msg.CSReqTeamReady TeamReady = 52;
inline bool CSReqBody::_internal_has_teamready() const {
  return this != internal_default_instance() && _impl_.teamready_ != nullptr;
}
inline bool CSReqBody::has_teamready() const {
  return _internal_has_teamready();
}
inline const ::msg::CSReqTeamReady& CSReqBody::_internal_teamready() const {
  const ::msg::CSReqTeamReady* p = _impl_.teamready_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqTeamReady&>(
      ::msg::_CSReqTeamReady_default_instance_);
}
inline const ::msg::CSReqTeamReady& CSReqBody::teamready() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.TeamReady)
  return _internal_teamready();
}
inline void CSReqBody::unsafe_arena_set_allocated_teamready(
    ::msg::CSReqTeamReady* teamready) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamready_);
  }
  _impl_.teamready_ = teamready;
  if (teamready) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.TeamReady)
}
inline ::msg::CSReqTeamReady* CSReqBody::release_teamready() {
  
  ::msg::CSReqTeamReady* temp = _impl_.teamready_;
  _impl_.teamready_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqTeamReady* CSReqBody::unsafe_arena_release_teamready() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.TeamReady)
  
  ::msg::CSReqTeamReady* temp = _impl_.teamready_;
  _impl_.teamready_ = nullptr;
  return temp;
}
inline ::msg::CSReqTeamReady* CSReqBody::_internal_mutable_teamready() {
  
  if (_impl_.teamready_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqTeamReady>(GetArenaForAllocation());
    _impl_.teamready_ = p;
  }
  return _impl_.teamready_;
}
inline ::msg::CSReqTeamReady* CSReqBody::mutable_teamready() {
  ::msg::CSReqTeamReady* _msg = _internal_mutable_teamready();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.TeamReady)
  return _msg;
}
inline void CSReqBody::set_allocated_teamready(::msg::CSReqTeamReady* teamready) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamready_);
  }
  if (teamready) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teamready));
    if (message_arena != submessage_arena) {
      teamready = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamready, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.teamready_ = teamready;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.TeamReady)
}

// .msg.CSReqReportPayResponse ReportPayResponse = 53;
inline bool CSReqBody::_internal_has_reportpayresponse() const {
  return this != internal_default_instance() && _impl_.reportpayresponse_ != nullptr;
}
inline bool CSReqBody::has_reportpayresponse() const {
  return _internal_has_reportpayresponse();
}
inline const ::msg::CSReqReportPayResponse& CSReqBody::_internal_reportpayresponse() const {
  const ::msg::CSReqReportPayResponse* p = _impl_.reportpayresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqReportPayResponse&>(
      ::msg::_CSReqReportPayResponse_default_instance_);
}
inline const ::msg::CSReqReportPayResponse& CSReqBody::reportpayresponse() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ReportPayResponse)
  return _internal_reportpayresponse();
}
inline void CSReqBody::unsafe_arena_set_allocated_reportpayresponse(
    ::msg::CSReqReportPayResponse* reportpayresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportpayresponse_);
  }
  _impl_.reportpayresponse_ = reportpayresponse;
  if (reportpayresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ReportPayResponse)
}
inline ::msg::CSReqReportPayResponse* CSReqBody::release_reportpayresponse() {
  
  ::msg::CSReqReportPayResponse* temp = _impl_.reportpayresponse_;
  _impl_.reportpayresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqReportPayResponse* CSReqBody::unsafe_arena_release_reportpayresponse() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ReportPayResponse)
  
  ::msg::CSReqReportPayResponse* temp = _impl_.reportpayresponse_;
  _impl_.reportpayresponse_ = nullptr;
  return temp;
}
inline ::msg::CSReqReportPayResponse* CSReqBody::_internal_mutable_reportpayresponse() {
  
  if (_impl_.reportpayresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqReportPayResponse>(GetArenaForAllocation());
    _impl_.reportpayresponse_ = p;
  }
  return _impl_.reportpayresponse_;
}
inline ::msg::CSReqReportPayResponse* CSReqBody::mutable_reportpayresponse() {
  ::msg::CSReqReportPayResponse* _msg = _internal_mutable_reportpayresponse();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ReportPayResponse)
  return _msg;
}
inline void CSReqBody::set_allocated_reportpayresponse(::msg::CSReqReportPayResponse* reportpayresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportpayresponse_);
  }
  if (reportpayresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reportpayresponse));
    if (message_arena != submessage_arena) {
      reportpayresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reportpayresponse, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reportpayresponse_ = reportpayresponse;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ReportPayResponse)
}

// .msg.CSReqRejectJoinTeam RejectJoinTeam = 54;
inline bool CSReqBody::_internal_has_rejectjointeam() const {
  return this != internal_default_instance() && _impl_.rejectjointeam_ != nullptr;
}
inline bool CSReqBody::has_rejectjointeam() const {
  return _internal_has_rejectjointeam();
}
inline const ::msg::CSReqRejectJoinTeam& CSReqBody::_internal_rejectjointeam() const {
  const ::msg::CSReqRejectJoinTeam* p = _impl_.rejectjointeam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRejectJoinTeam&>(
      ::msg::_CSReqRejectJoinTeam_default_instance_);
}
inline const ::msg::CSReqRejectJoinTeam& CSReqBody::rejectjointeam() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RejectJoinTeam)
  return _internal_rejectjointeam();
}
inline void CSReqBody::unsafe_arena_set_allocated_rejectjointeam(
    ::msg::CSReqRejectJoinTeam* rejectjointeam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rejectjointeam_);
  }
  _impl_.rejectjointeam_ = rejectjointeam;
  if (rejectjointeam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RejectJoinTeam)
}
inline ::msg::CSReqRejectJoinTeam* CSReqBody::release_rejectjointeam() {
  
  ::msg::CSReqRejectJoinTeam* temp = _impl_.rejectjointeam_;
  _impl_.rejectjointeam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRejectJoinTeam* CSReqBody::unsafe_arena_release_rejectjointeam() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RejectJoinTeam)
  
  ::msg::CSReqRejectJoinTeam* temp = _impl_.rejectjointeam_;
  _impl_.rejectjointeam_ = nullptr;
  return temp;
}
inline ::msg::CSReqRejectJoinTeam* CSReqBody::_internal_mutable_rejectjointeam() {
  
  if (_impl_.rejectjointeam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRejectJoinTeam>(GetArenaForAllocation());
    _impl_.rejectjointeam_ = p;
  }
  return _impl_.rejectjointeam_;
}
inline ::msg::CSReqRejectJoinTeam* CSReqBody::mutable_rejectjointeam() {
  ::msg::CSReqRejectJoinTeam* _msg = _internal_mutable_rejectjointeam();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RejectJoinTeam)
  return _msg;
}
inline void CSReqBody::set_allocated_rejectjointeam(::msg::CSReqRejectJoinTeam* rejectjointeam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rejectjointeam_);
  }
  if (rejectjointeam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rejectjointeam));
    if (message_arena != submessage_arena) {
      rejectjointeam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rejectjointeam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rejectjointeam_ = rejectjointeam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RejectJoinTeam)
}

// .msg.CSReqShieldChat ShieldChat = 55;
inline bool CSReqBody::_internal_has_shieldchat() const {
  return this != internal_default_instance() && _impl_.shieldchat_ != nullptr;
}
inline bool CSReqBody::has_shieldchat() const {
  return _internal_has_shieldchat();
}
inline const ::msg::CSReqShieldChat& CSReqBody::_internal_shieldchat() const {
  const ::msg::CSReqShieldChat* p = _impl_.shieldchat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqShieldChat&>(
      ::msg::_CSReqShieldChat_default_instance_);
}
inline const ::msg::CSReqShieldChat& CSReqBody::shieldchat() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ShieldChat)
  return _internal_shieldchat();
}
inline void CSReqBody::unsafe_arena_set_allocated_shieldchat(
    ::msg::CSReqShieldChat* shieldchat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shieldchat_);
  }
  _impl_.shieldchat_ = shieldchat;
  if (shieldchat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ShieldChat)
}
inline ::msg::CSReqShieldChat* CSReqBody::release_shieldchat() {
  
  ::msg::CSReqShieldChat* temp = _impl_.shieldchat_;
  _impl_.shieldchat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqShieldChat* CSReqBody::unsafe_arena_release_shieldchat() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ShieldChat)
  
  ::msg::CSReqShieldChat* temp = _impl_.shieldchat_;
  _impl_.shieldchat_ = nullptr;
  return temp;
}
inline ::msg::CSReqShieldChat* CSReqBody::_internal_mutable_shieldchat() {
  
  if (_impl_.shieldchat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqShieldChat>(GetArenaForAllocation());
    _impl_.shieldchat_ = p;
  }
  return _impl_.shieldchat_;
}
inline ::msg::CSReqShieldChat* CSReqBody::mutable_shieldchat() {
  ::msg::CSReqShieldChat* _msg = _internal_mutable_shieldchat();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ShieldChat)
  return _msg;
}
inline void CSReqBody::set_allocated_shieldchat(::msg::CSReqShieldChat* shieldchat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shieldchat_);
  }
  if (shieldchat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shieldchat));
    if (message_arena != submessage_arena) {
      shieldchat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shieldchat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shieldchat_ = shieldchat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ShieldChat)
}

// .msg.CSReqBuyPassportLevel BuyPassportLevel = 56;
inline bool CSReqBody::_internal_has_buypassportlevel() const {
  return this != internal_default_instance() && _impl_.buypassportlevel_ != nullptr;
}
inline bool CSReqBody::has_buypassportlevel() const {
  return _internal_has_buypassportlevel();
}
inline const ::msg::CSReqBuyPassportLevel& CSReqBody::_internal_buypassportlevel() const {
  const ::msg::CSReqBuyPassportLevel* p = _impl_.buypassportlevel_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqBuyPassportLevel&>(
      ::msg::_CSReqBuyPassportLevel_default_instance_);
}
inline const ::msg::CSReqBuyPassportLevel& CSReqBody::buypassportlevel() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.BuyPassportLevel)
  return _internal_buypassportlevel();
}
inline void CSReqBody::unsafe_arena_set_allocated_buypassportlevel(
    ::msg::CSReqBuyPassportLevel* buypassportlevel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buypassportlevel_);
  }
  _impl_.buypassportlevel_ = buypassportlevel;
  if (buypassportlevel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.BuyPassportLevel)
}
inline ::msg::CSReqBuyPassportLevel* CSReqBody::release_buypassportlevel() {
  
  ::msg::CSReqBuyPassportLevel* temp = _impl_.buypassportlevel_;
  _impl_.buypassportlevel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqBuyPassportLevel* CSReqBody::unsafe_arena_release_buypassportlevel() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.BuyPassportLevel)
  
  ::msg::CSReqBuyPassportLevel* temp = _impl_.buypassportlevel_;
  _impl_.buypassportlevel_ = nullptr;
  return temp;
}
inline ::msg::CSReqBuyPassportLevel* CSReqBody::_internal_mutable_buypassportlevel() {
  
  if (_impl_.buypassportlevel_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqBuyPassportLevel>(GetArenaForAllocation());
    _impl_.buypassportlevel_ = p;
  }
  return _impl_.buypassportlevel_;
}
inline ::msg::CSReqBuyPassportLevel* CSReqBody::mutable_buypassportlevel() {
  ::msg::CSReqBuyPassportLevel* _msg = _internal_mutable_buypassportlevel();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.BuyPassportLevel)
  return _msg;
}
inline void CSReqBody::set_allocated_buypassportlevel(::msg::CSReqBuyPassportLevel* buypassportlevel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buypassportlevel_);
  }
  if (buypassportlevel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buypassportlevel));
    if (message_arena != submessage_arena) {
      buypassportlevel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buypassportlevel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buypassportlevel_ = buypassportlevel;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.BuyPassportLevel)
}

// .msg.CSReqUpgradePassport UpgradePassport = 57;
inline bool CSReqBody::_internal_has_upgradepassport() const {
  return this != internal_default_instance() && _impl_.upgradepassport_ != nullptr;
}
inline bool CSReqBody::has_upgradepassport() const {
  return _internal_has_upgradepassport();
}
inline const ::msg::CSReqUpgradePassport& CSReqBody::_internal_upgradepassport() const {
  const ::msg::CSReqUpgradePassport* p = _impl_.upgradepassport_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUpgradePassport&>(
      ::msg::_CSReqUpgradePassport_default_instance_);
}
inline const ::msg::CSReqUpgradePassport& CSReqBody::upgradepassport() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UpgradePassport)
  return _internal_upgradepassport();
}
inline void CSReqBody::unsafe_arena_set_allocated_upgradepassport(
    ::msg::CSReqUpgradePassport* upgradepassport) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upgradepassport_);
  }
  _impl_.upgradepassport_ = upgradepassport;
  if (upgradepassport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UpgradePassport)
}
inline ::msg::CSReqUpgradePassport* CSReqBody::release_upgradepassport() {
  
  ::msg::CSReqUpgradePassport* temp = _impl_.upgradepassport_;
  _impl_.upgradepassport_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUpgradePassport* CSReqBody::unsafe_arena_release_upgradepassport() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UpgradePassport)
  
  ::msg::CSReqUpgradePassport* temp = _impl_.upgradepassport_;
  _impl_.upgradepassport_ = nullptr;
  return temp;
}
inline ::msg::CSReqUpgradePassport* CSReqBody::_internal_mutable_upgradepassport() {
  
  if (_impl_.upgradepassport_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUpgradePassport>(GetArenaForAllocation());
    _impl_.upgradepassport_ = p;
  }
  return _impl_.upgradepassport_;
}
inline ::msg::CSReqUpgradePassport* CSReqBody::mutable_upgradepassport() {
  ::msg::CSReqUpgradePassport* _msg = _internal_mutable_upgradepassport();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UpgradePassport)
  return _msg;
}
inline void CSReqBody::set_allocated_upgradepassport(::msg::CSReqUpgradePassport* upgradepassport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upgradepassport_);
  }
  if (upgradepassport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upgradepassport));
    if (message_arena != submessage_arena) {
      upgradepassport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upgradepassport, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.upgradepassport_ = upgradepassport;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UpgradePassport)
}

// .msg.CSReqGetPassportLevelAward GetPassportLevelAward = 58;
inline bool CSReqBody::_internal_has_getpassportlevelaward() const {
  return this != internal_default_instance() && _impl_.getpassportlevelaward_ != nullptr;
}
inline bool CSReqBody::has_getpassportlevelaward() const {
  return _internal_has_getpassportlevelaward();
}
inline const ::msg::CSReqGetPassportLevelAward& CSReqBody::_internal_getpassportlevelaward() const {
  const ::msg::CSReqGetPassportLevelAward* p = _impl_.getpassportlevelaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetPassportLevelAward&>(
      ::msg::_CSReqGetPassportLevelAward_default_instance_);
}
inline const ::msg::CSReqGetPassportLevelAward& CSReqBody::getpassportlevelaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetPassportLevelAward)
  return _internal_getpassportlevelaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_getpassportlevelaward(
    ::msg::CSReqGetPassportLevelAward* getpassportlevelaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getpassportlevelaward_);
  }
  _impl_.getpassportlevelaward_ = getpassportlevelaward;
  if (getpassportlevelaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetPassportLevelAward)
}
inline ::msg::CSReqGetPassportLevelAward* CSReqBody::release_getpassportlevelaward() {
  
  ::msg::CSReqGetPassportLevelAward* temp = _impl_.getpassportlevelaward_;
  _impl_.getpassportlevelaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetPassportLevelAward* CSReqBody::unsafe_arena_release_getpassportlevelaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetPassportLevelAward)
  
  ::msg::CSReqGetPassportLevelAward* temp = _impl_.getpassportlevelaward_;
  _impl_.getpassportlevelaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetPassportLevelAward* CSReqBody::_internal_mutable_getpassportlevelaward() {
  
  if (_impl_.getpassportlevelaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetPassportLevelAward>(GetArenaForAllocation());
    _impl_.getpassportlevelaward_ = p;
  }
  return _impl_.getpassportlevelaward_;
}
inline ::msg::CSReqGetPassportLevelAward* CSReqBody::mutable_getpassportlevelaward() {
  ::msg::CSReqGetPassportLevelAward* _msg = _internal_mutable_getpassportlevelaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetPassportLevelAward)
  return _msg;
}
inline void CSReqBody::set_allocated_getpassportlevelaward(::msg::CSReqGetPassportLevelAward* getpassportlevelaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getpassportlevelaward_);
  }
  if (getpassportlevelaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getpassportlevelaward));
    if (message_arena != submessage_arena) {
      getpassportlevelaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getpassportlevelaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getpassportlevelaward_ = getpassportlevelaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetPassportLevelAward)
}

// .msg.CSReqGetPassportTaskAward GetPassportTaskAward = 59;
inline bool CSReqBody::_internal_has_getpassporttaskaward() const {
  return this != internal_default_instance() && _impl_.getpassporttaskaward_ != nullptr;
}
inline bool CSReqBody::has_getpassporttaskaward() const {
  return _internal_has_getpassporttaskaward();
}
inline const ::msg::CSReqGetPassportTaskAward& CSReqBody::_internal_getpassporttaskaward() const {
  const ::msg::CSReqGetPassportTaskAward* p = _impl_.getpassporttaskaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetPassportTaskAward&>(
      ::msg::_CSReqGetPassportTaskAward_default_instance_);
}
inline const ::msg::CSReqGetPassportTaskAward& CSReqBody::getpassporttaskaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetPassportTaskAward)
  return _internal_getpassporttaskaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_getpassporttaskaward(
    ::msg::CSReqGetPassportTaskAward* getpassporttaskaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getpassporttaskaward_);
  }
  _impl_.getpassporttaskaward_ = getpassporttaskaward;
  if (getpassporttaskaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetPassportTaskAward)
}
inline ::msg::CSReqGetPassportTaskAward* CSReqBody::release_getpassporttaskaward() {
  
  ::msg::CSReqGetPassportTaskAward* temp = _impl_.getpassporttaskaward_;
  _impl_.getpassporttaskaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetPassportTaskAward* CSReqBody::unsafe_arena_release_getpassporttaskaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetPassportTaskAward)
  
  ::msg::CSReqGetPassportTaskAward* temp = _impl_.getpassporttaskaward_;
  _impl_.getpassporttaskaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetPassportTaskAward* CSReqBody::_internal_mutable_getpassporttaskaward() {
  
  if (_impl_.getpassporttaskaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetPassportTaskAward>(GetArenaForAllocation());
    _impl_.getpassporttaskaward_ = p;
  }
  return _impl_.getpassporttaskaward_;
}
inline ::msg::CSReqGetPassportTaskAward* CSReqBody::mutable_getpassporttaskaward() {
  ::msg::CSReqGetPassportTaskAward* _msg = _internal_mutable_getpassporttaskaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetPassportTaskAward)
  return _msg;
}
inline void CSReqBody::set_allocated_getpassporttaskaward(::msg::CSReqGetPassportTaskAward* getpassporttaskaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getpassporttaskaward_);
  }
  if (getpassporttaskaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getpassporttaskaward));
    if (message_arena != submessage_arena) {
      getpassporttaskaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getpassporttaskaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getpassporttaskaward_ = getpassporttaskaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetPassportTaskAward)
}

// .msg.CSReqTelBook TelBook = 60;
inline bool CSReqBody::_internal_has_telbook() const {
  return this != internal_default_instance() && _impl_.telbook_ != nullptr;
}
inline bool CSReqBody::has_telbook() const {
  return _internal_has_telbook();
}
inline const ::msg::CSReqTelBook& CSReqBody::_internal_telbook() const {
  const ::msg::CSReqTelBook* p = _impl_.telbook_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqTelBook&>(
      ::msg::_CSReqTelBook_default_instance_);
}
inline const ::msg::CSReqTelBook& CSReqBody::telbook() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.TelBook)
  return _internal_telbook();
}
inline void CSReqBody::unsafe_arena_set_allocated_telbook(
    ::msg::CSReqTelBook* telbook) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.telbook_);
  }
  _impl_.telbook_ = telbook;
  if (telbook) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.TelBook)
}
inline ::msg::CSReqTelBook* CSReqBody::release_telbook() {
  
  ::msg::CSReqTelBook* temp = _impl_.telbook_;
  _impl_.telbook_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqTelBook* CSReqBody::unsafe_arena_release_telbook() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.TelBook)
  
  ::msg::CSReqTelBook* temp = _impl_.telbook_;
  _impl_.telbook_ = nullptr;
  return temp;
}
inline ::msg::CSReqTelBook* CSReqBody::_internal_mutable_telbook() {
  
  if (_impl_.telbook_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqTelBook>(GetArenaForAllocation());
    _impl_.telbook_ = p;
  }
  return _impl_.telbook_;
}
inline ::msg::CSReqTelBook* CSReqBody::mutable_telbook() {
  ::msg::CSReqTelBook* _msg = _internal_mutable_telbook();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.TelBook)
  return _msg;
}
inline void CSReqBody::set_allocated_telbook(::msg::CSReqTelBook* telbook) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.telbook_);
  }
  if (telbook) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telbook));
    if (message_arena != submessage_arena) {
      telbook = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telbook, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.telbook_ = telbook;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.TelBook)
}

// .msg.CSReqActivatePassport ActivatePassport = 61;
inline bool CSReqBody::_internal_has_activatepassport() const {
  return this != internal_default_instance() && _impl_.activatepassport_ != nullptr;
}
inline bool CSReqBody::has_activatepassport() const {
  return _internal_has_activatepassport();
}
inline const ::msg::CSReqActivatePassport& CSReqBody::_internal_activatepassport() const {
  const ::msg::CSReqActivatePassport* p = _impl_.activatepassport_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqActivatePassport&>(
      ::msg::_CSReqActivatePassport_default_instance_);
}
inline const ::msg::CSReqActivatePassport& CSReqBody::activatepassport() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ActivatePassport)
  return _internal_activatepassport();
}
inline void CSReqBody::unsafe_arena_set_allocated_activatepassport(
    ::msg::CSReqActivatePassport* activatepassport) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activatepassport_);
  }
  _impl_.activatepassport_ = activatepassport;
  if (activatepassport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ActivatePassport)
}
inline ::msg::CSReqActivatePassport* CSReqBody::release_activatepassport() {
  
  ::msg::CSReqActivatePassport* temp = _impl_.activatepassport_;
  _impl_.activatepassport_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqActivatePassport* CSReqBody::unsafe_arena_release_activatepassport() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ActivatePassport)
  
  ::msg::CSReqActivatePassport* temp = _impl_.activatepassport_;
  _impl_.activatepassport_ = nullptr;
  return temp;
}
inline ::msg::CSReqActivatePassport* CSReqBody::_internal_mutable_activatepassport() {
  
  if (_impl_.activatepassport_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqActivatePassport>(GetArenaForAllocation());
    _impl_.activatepassport_ = p;
  }
  return _impl_.activatepassport_;
}
inline ::msg::CSReqActivatePassport* CSReqBody::mutable_activatepassport() {
  ::msg::CSReqActivatePassport* _msg = _internal_mutable_activatepassport();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ActivatePassport)
  return _msg;
}
inline void CSReqBody::set_allocated_activatepassport(::msg::CSReqActivatePassport* activatepassport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activatepassport_);
  }
  if (activatepassport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activatepassport));
    if (message_arena != submessage_arena) {
      activatepassport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activatepassport, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.activatepassport_ = activatepassport;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ActivatePassport)
}

// .msg.CSReqRankSeasonEval RankSeasonEval = 62;
inline bool CSReqBody::_internal_has_rankseasoneval() const {
  return this != internal_default_instance() && _impl_.rankseasoneval_ != nullptr;
}
inline bool CSReqBody::has_rankseasoneval() const {
  return _internal_has_rankseasoneval();
}
inline const ::msg::CSReqRankSeasonEval& CSReqBody::_internal_rankseasoneval() const {
  const ::msg::CSReqRankSeasonEval* p = _impl_.rankseasoneval_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRankSeasonEval&>(
      ::msg::_CSReqRankSeasonEval_default_instance_);
}
inline const ::msg::CSReqRankSeasonEval& CSReqBody::rankseasoneval() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RankSeasonEval)
  return _internal_rankseasoneval();
}
inline void CSReqBody::unsafe_arena_set_allocated_rankseasoneval(
    ::msg::CSReqRankSeasonEval* rankseasoneval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rankseasoneval_);
  }
  _impl_.rankseasoneval_ = rankseasoneval;
  if (rankseasoneval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RankSeasonEval)
}
inline ::msg::CSReqRankSeasonEval* CSReqBody::release_rankseasoneval() {
  
  ::msg::CSReqRankSeasonEval* temp = _impl_.rankseasoneval_;
  _impl_.rankseasoneval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRankSeasonEval* CSReqBody::unsafe_arena_release_rankseasoneval() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RankSeasonEval)
  
  ::msg::CSReqRankSeasonEval* temp = _impl_.rankseasoneval_;
  _impl_.rankseasoneval_ = nullptr;
  return temp;
}
inline ::msg::CSReqRankSeasonEval* CSReqBody::_internal_mutable_rankseasoneval() {
  
  if (_impl_.rankseasoneval_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRankSeasonEval>(GetArenaForAllocation());
    _impl_.rankseasoneval_ = p;
  }
  return _impl_.rankseasoneval_;
}
inline ::msg::CSReqRankSeasonEval* CSReqBody::mutable_rankseasoneval() {
  ::msg::CSReqRankSeasonEval* _msg = _internal_mutable_rankseasoneval();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RankSeasonEval)
  return _msg;
}
inline void CSReqBody::set_allocated_rankseasoneval(::msg::CSReqRankSeasonEval* rankseasoneval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rankseasoneval_);
  }
  if (rankseasoneval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rankseasoneval));
    if (message_arena != submessage_arena) {
      rankseasoneval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rankseasoneval, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rankseasoneval_ = rankseasoneval;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RankSeasonEval)
}

// .msg.CSReqBindAccount BindAccount = 63;
inline bool CSReqBody::_internal_has_bindaccount() const {
  return this != internal_default_instance() && _impl_.bindaccount_ != nullptr;
}
inline bool CSReqBody::has_bindaccount() const {
  return _internal_has_bindaccount();
}
inline const ::msg::CSReqBindAccount& CSReqBody::_internal_bindaccount() const {
  const ::msg::CSReqBindAccount* p = _impl_.bindaccount_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqBindAccount&>(
      ::msg::_CSReqBindAccount_default_instance_);
}
inline const ::msg::CSReqBindAccount& CSReqBody::bindaccount() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.BindAccount)
  return _internal_bindaccount();
}
inline void CSReqBody::unsafe_arena_set_allocated_bindaccount(
    ::msg::CSReqBindAccount* bindaccount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindaccount_);
  }
  _impl_.bindaccount_ = bindaccount;
  if (bindaccount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.BindAccount)
}
inline ::msg::CSReqBindAccount* CSReqBody::release_bindaccount() {
  
  ::msg::CSReqBindAccount* temp = _impl_.bindaccount_;
  _impl_.bindaccount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqBindAccount* CSReqBody::unsafe_arena_release_bindaccount() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.BindAccount)
  
  ::msg::CSReqBindAccount* temp = _impl_.bindaccount_;
  _impl_.bindaccount_ = nullptr;
  return temp;
}
inline ::msg::CSReqBindAccount* CSReqBody::_internal_mutable_bindaccount() {
  
  if (_impl_.bindaccount_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqBindAccount>(GetArenaForAllocation());
    _impl_.bindaccount_ = p;
  }
  return _impl_.bindaccount_;
}
inline ::msg::CSReqBindAccount* CSReqBody::mutable_bindaccount() {
  ::msg::CSReqBindAccount* _msg = _internal_mutable_bindaccount();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.BindAccount)
  return _msg;
}
inline void CSReqBody::set_allocated_bindaccount(::msg::CSReqBindAccount* bindaccount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindaccount_);
  }
  if (bindaccount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bindaccount));
    if (message_arena != submessage_arena) {
      bindaccount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bindaccount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bindaccount_ = bindaccount;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.BindAccount)
}

// .msg.CSReqIncAdShowCount IncAdsShowCount = 64;
inline bool CSReqBody::_internal_has_incadsshowcount() const {
  return this != internal_default_instance() && _impl_.incadsshowcount_ != nullptr;
}
inline bool CSReqBody::has_incadsshowcount() const {
  return _internal_has_incadsshowcount();
}
inline const ::msg::CSReqIncAdShowCount& CSReqBody::_internal_incadsshowcount() const {
  const ::msg::CSReqIncAdShowCount* p = _impl_.incadsshowcount_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqIncAdShowCount&>(
      ::msg::_CSReqIncAdShowCount_default_instance_);
}
inline const ::msg::CSReqIncAdShowCount& CSReqBody::incadsshowcount() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.IncAdsShowCount)
  return _internal_incadsshowcount();
}
inline void CSReqBody::unsafe_arena_set_allocated_incadsshowcount(
    ::msg::CSReqIncAdShowCount* incadsshowcount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.incadsshowcount_);
  }
  _impl_.incadsshowcount_ = incadsshowcount;
  if (incadsshowcount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.IncAdsShowCount)
}
inline ::msg::CSReqIncAdShowCount* CSReqBody::release_incadsshowcount() {
  
  ::msg::CSReqIncAdShowCount* temp = _impl_.incadsshowcount_;
  _impl_.incadsshowcount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqIncAdShowCount* CSReqBody::unsafe_arena_release_incadsshowcount() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.IncAdsShowCount)
  
  ::msg::CSReqIncAdShowCount* temp = _impl_.incadsshowcount_;
  _impl_.incadsshowcount_ = nullptr;
  return temp;
}
inline ::msg::CSReqIncAdShowCount* CSReqBody::_internal_mutable_incadsshowcount() {
  
  if (_impl_.incadsshowcount_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqIncAdShowCount>(GetArenaForAllocation());
    _impl_.incadsshowcount_ = p;
  }
  return _impl_.incadsshowcount_;
}
inline ::msg::CSReqIncAdShowCount* CSReqBody::mutable_incadsshowcount() {
  ::msg::CSReqIncAdShowCount* _msg = _internal_mutable_incadsshowcount();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.IncAdsShowCount)
  return _msg;
}
inline void CSReqBody::set_allocated_incadsshowcount(::msg::CSReqIncAdShowCount* incadsshowcount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.incadsshowcount_);
  }
  if (incadsshowcount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(incadsshowcount));
    if (message_arena != submessage_arena) {
      incadsshowcount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, incadsshowcount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.incadsshowcount_ = incadsshowcount;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.IncAdsShowCount)
}

// .msg.CSReqUseBonusCard UseBonusCard = 65;
inline bool CSReqBody::_internal_has_usebonuscard() const {
  return this != internal_default_instance() && _impl_.usebonuscard_ != nullptr;
}
inline bool CSReqBody::has_usebonuscard() const {
  return _internal_has_usebonuscard();
}
inline const ::msg::CSReqUseBonusCard& CSReqBody::_internal_usebonuscard() const {
  const ::msg::CSReqUseBonusCard* p = _impl_.usebonuscard_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUseBonusCard&>(
      ::msg::_CSReqUseBonusCard_default_instance_);
}
inline const ::msg::CSReqUseBonusCard& CSReqBody::usebonuscard() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UseBonusCard)
  return _internal_usebonuscard();
}
inline void CSReqBody::unsafe_arena_set_allocated_usebonuscard(
    ::msg::CSReqUseBonusCard* usebonuscard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usebonuscard_);
  }
  _impl_.usebonuscard_ = usebonuscard;
  if (usebonuscard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UseBonusCard)
}
inline ::msg::CSReqUseBonusCard* CSReqBody::release_usebonuscard() {
  
  ::msg::CSReqUseBonusCard* temp = _impl_.usebonuscard_;
  _impl_.usebonuscard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUseBonusCard* CSReqBody::unsafe_arena_release_usebonuscard() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UseBonusCard)
  
  ::msg::CSReqUseBonusCard* temp = _impl_.usebonuscard_;
  _impl_.usebonuscard_ = nullptr;
  return temp;
}
inline ::msg::CSReqUseBonusCard* CSReqBody::_internal_mutable_usebonuscard() {
  
  if (_impl_.usebonuscard_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUseBonusCard>(GetArenaForAllocation());
    _impl_.usebonuscard_ = p;
  }
  return _impl_.usebonuscard_;
}
inline ::msg::CSReqUseBonusCard* CSReqBody::mutable_usebonuscard() {
  ::msg::CSReqUseBonusCard* _msg = _internal_mutable_usebonuscard();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UseBonusCard)
  return _msg;
}
inline void CSReqBody::set_allocated_usebonuscard(::msg::CSReqUseBonusCard* usebonuscard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usebonuscard_);
  }
  if (usebonuscard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usebonuscard));
    if (message_arena != submessage_arena) {
      usebonuscard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usebonuscard, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.usebonuscard_ = usebonuscard;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UseBonusCard)
}

// .msg.CSReqGetSeasonAward GetSeasonAward = 66;
inline bool CSReqBody::_internal_has_getseasonaward() const {
  return this != internal_default_instance() && _impl_.getseasonaward_ != nullptr;
}
inline bool CSReqBody::has_getseasonaward() const {
  return _internal_has_getseasonaward();
}
inline const ::msg::CSReqGetSeasonAward& CSReqBody::_internal_getseasonaward() const {
  const ::msg::CSReqGetSeasonAward* p = _impl_.getseasonaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetSeasonAward&>(
      ::msg::_CSReqGetSeasonAward_default_instance_);
}
inline const ::msg::CSReqGetSeasonAward& CSReqBody::getseasonaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetSeasonAward)
  return _internal_getseasonaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_getseasonaward(
    ::msg::CSReqGetSeasonAward* getseasonaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getseasonaward_);
  }
  _impl_.getseasonaward_ = getseasonaward;
  if (getseasonaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetSeasonAward)
}
inline ::msg::CSReqGetSeasonAward* CSReqBody::release_getseasonaward() {
  
  ::msg::CSReqGetSeasonAward* temp = _impl_.getseasonaward_;
  _impl_.getseasonaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetSeasonAward* CSReqBody::unsafe_arena_release_getseasonaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetSeasonAward)
  
  ::msg::CSReqGetSeasonAward* temp = _impl_.getseasonaward_;
  _impl_.getseasonaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetSeasonAward* CSReqBody::_internal_mutable_getseasonaward() {
  
  if (_impl_.getseasonaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetSeasonAward>(GetArenaForAllocation());
    _impl_.getseasonaward_ = p;
  }
  return _impl_.getseasonaward_;
}
inline ::msg::CSReqGetSeasonAward* CSReqBody::mutable_getseasonaward() {
  ::msg::CSReqGetSeasonAward* _msg = _internal_mutable_getseasonaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetSeasonAward)
  return _msg;
}
inline void CSReqBody::set_allocated_getseasonaward(::msg::CSReqGetSeasonAward* getseasonaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getseasonaward_);
  }
  if (getseasonaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getseasonaward));
    if (message_arena != submessage_arena) {
      getseasonaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getseasonaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getseasonaward_ = getseasonaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetSeasonAward)
}

// .msg.CSReqGetAlphaActivityAward GetAlphaActivityAward = 67;
inline bool CSReqBody::_internal_has_getalphaactivityaward() const {
  return this != internal_default_instance() && _impl_.getalphaactivityaward_ != nullptr;
}
inline bool CSReqBody::has_getalphaactivityaward() const {
  return _internal_has_getalphaactivityaward();
}
inline const ::msg::CSReqGetAlphaActivityAward& CSReqBody::_internal_getalphaactivityaward() const {
  const ::msg::CSReqGetAlphaActivityAward* p = _impl_.getalphaactivityaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetAlphaActivityAward&>(
      ::msg::_CSReqGetAlphaActivityAward_default_instance_);
}
inline const ::msg::CSReqGetAlphaActivityAward& CSReqBody::getalphaactivityaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetAlphaActivityAward)
  return _internal_getalphaactivityaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_getalphaactivityaward(
    ::msg::CSReqGetAlphaActivityAward* getalphaactivityaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getalphaactivityaward_);
  }
  _impl_.getalphaactivityaward_ = getalphaactivityaward;
  if (getalphaactivityaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetAlphaActivityAward)
}
inline ::msg::CSReqGetAlphaActivityAward* CSReqBody::release_getalphaactivityaward() {
  
  ::msg::CSReqGetAlphaActivityAward* temp = _impl_.getalphaactivityaward_;
  _impl_.getalphaactivityaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetAlphaActivityAward* CSReqBody::unsafe_arena_release_getalphaactivityaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetAlphaActivityAward)
  
  ::msg::CSReqGetAlphaActivityAward* temp = _impl_.getalphaactivityaward_;
  _impl_.getalphaactivityaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetAlphaActivityAward* CSReqBody::_internal_mutable_getalphaactivityaward() {
  
  if (_impl_.getalphaactivityaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetAlphaActivityAward>(GetArenaForAllocation());
    _impl_.getalphaactivityaward_ = p;
  }
  return _impl_.getalphaactivityaward_;
}
inline ::msg::CSReqGetAlphaActivityAward* CSReqBody::mutable_getalphaactivityaward() {
  ::msg::CSReqGetAlphaActivityAward* _msg = _internal_mutable_getalphaactivityaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetAlphaActivityAward)
  return _msg;
}
inline void CSReqBody::set_allocated_getalphaactivityaward(::msg::CSReqGetAlphaActivityAward* getalphaactivityaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getalphaactivityaward_);
  }
  if (getalphaactivityaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getalphaactivityaward));
    if (message_arena != submessage_arena) {
      getalphaactivityaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getalphaactivityaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getalphaactivityaward_ = getalphaactivityaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetAlphaActivityAward)
}

// .msg.CSReqGetLanguageData GetLanguageData = 68;
inline bool CSReqBody::_internal_has_getlanguagedata() const {
  return this != internal_default_instance() && _impl_.getlanguagedata_ != nullptr;
}
inline bool CSReqBody::has_getlanguagedata() const {
  return _internal_has_getlanguagedata();
}
inline const ::msg::CSReqGetLanguageData& CSReqBody::_internal_getlanguagedata() const {
  const ::msg::CSReqGetLanguageData* p = _impl_.getlanguagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetLanguageData&>(
      ::msg::_CSReqGetLanguageData_default_instance_);
}
inline const ::msg::CSReqGetLanguageData& CSReqBody::getlanguagedata() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetLanguageData)
  return _internal_getlanguagedata();
}
inline void CSReqBody::unsafe_arena_set_allocated_getlanguagedata(
    ::msg::CSReqGetLanguageData* getlanguagedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getlanguagedata_);
  }
  _impl_.getlanguagedata_ = getlanguagedata;
  if (getlanguagedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetLanguageData)
}
inline ::msg::CSReqGetLanguageData* CSReqBody::release_getlanguagedata() {
  
  ::msg::CSReqGetLanguageData* temp = _impl_.getlanguagedata_;
  _impl_.getlanguagedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetLanguageData* CSReqBody::unsafe_arena_release_getlanguagedata() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetLanguageData)
  
  ::msg::CSReqGetLanguageData* temp = _impl_.getlanguagedata_;
  _impl_.getlanguagedata_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetLanguageData* CSReqBody::_internal_mutable_getlanguagedata() {
  
  if (_impl_.getlanguagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetLanguageData>(GetArenaForAllocation());
    _impl_.getlanguagedata_ = p;
  }
  return _impl_.getlanguagedata_;
}
inline ::msg::CSReqGetLanguageData* CSReqBody::mutable_getlanguagedata() {
  ::msg::CSReqGetLanguageData* _msg = _internal_mutable_getlanguagedata();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetLanguageData)
  return _msg;
}
inline void CSReqBody::set_allocated_getlanguagedata(::msg::CSReqGetLanguageData* getlanguagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getlanguagedata_);
  }
  if (getlanguagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getlanguagedata));
    if (message_arena != submessage_arena) {
      getlanguagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getlanguagedata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getlanguagedata_ = getlanguagedata;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetLanguageData)
}

// .msg.CSReqGetActivityAward GetActivityAward = 69;
inline bool CSReqBody::_internal_has_getactivityaward() const {
  return this != internal_default_instance() && _impl_.getactivityaward_ != nullptr;
}
inline bool CSReqBody::has_getactivityaward() const {
  return _internal_has_getactivityaward();
}
inline const ::msg::CSReqGetActivityAward& CSReqBody::_internal_getactivityaward() const {
  const ::msg::CSReqGetActivityAward* p = _impl_.getactivityaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetActivityAward&>(
      ::msg::_CSReqGetActivityAward_default_instance_);
}
inline const ::msg::CSReqGetActivityAward& CSReqBody::getactivityaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetActivityAward)
  return _internal_getactivityaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_getactivityaward(
    ::msg::CSReqGetActivityAward* getactivityaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getactivityaward_);
  }
  _impl_.getactivityaward_ = getactivityaward;
  if (getactivityaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetActivityAward)
}
inline ::msg::CSReqGetActivityAward* CSReqBody::release_getactivityaward() {
  
  ::msg::CSReqGetActivityAward* temp = _impl_.getactivityaward_;
  _impl_.getactivityaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetActivityAward* CSReqBody::unsafe_arena_release_getactivityaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetActivityAward)
  
  ::msg::CSReqGetActivityAward* temp = _impl_.getactivityaward_;
  _impl_.getactivityaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetActivityAward* CSReqBody::_internal_mutable_getactivityaward() {
  
  if (_impl_.getactivityaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetActivityAward>(GetArenaForAllocation());
    _impl_.getactivityaward_ = p;
  }
  return _impl_.getactivityaward_;
}
inline ::msg::CSReqGetActivityAward* CSReqBody::mutable_getactivityaward() {
  ::msg::CSReqGetActivityAward* _msg = _internal_mutable_getactivityaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetActivityAward)
  return _msg;
}
inline void CSReqBody::set_allocated_getactivityaward(::msg::CSReqGetActivityAward* getactivityaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getactivityaward_);
  }
  if (getactivityaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getactivityaward));
    if (message_arena != submessage_arena) {
      getactivityaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getactivityaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getactivityaward_ = getactivityaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetActivityAward)
}

// .msg.CSReqGetActivityData GetActivityData = 70;
inline bool CSReqBody::_internal_has_getactivitydata() const {
  return this != internal_default_instance() && _impl_.getactivitydata_ != nullptr;
}
inline bool CSReqBody::has_getactivitydata() const {
  return _internal_has_getactivitydata();
}
inline const ::msg::CSReqGetActivityData& CSReqBody::_internal_getactivitydata() const {
  const ::msg::CSReqGetActivityData* p = _impl_.getactivitydata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetActivityData&>(
      ::msg::_CSReqGetActivityData_default_instance_);
}
inline const ::msg::CSReqGetActivityData& CSReqBody::getactivitydata() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetActivityData)
  return _internal_getactivitydata();
}
inline void CSReqBody::unsafe_arena_set_allocated_getactivitydata(
    ::msg::CSReqGetActivityData* getactivitydata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getactivitydata_);
  }
  _impl_.getactivitydata_ = getactivitydata;
  if (getactivitydata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetActivityData)
}
inline ::msg::CSReqGetActivityData* CSReqBody::release_getactivitydata() {
  
  ::msg::CSReqGetActivityData* temp = _impl_.getactivitydata_;
  _impl_.getactivitydata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetActivityData* CSReqBody::unsafe_arena_release_getactivitydata() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetActivityData)
  
  ::msg::CSReqGetActivityData* temp = _impl_.getactivitydata_;
  _impl_.getactivitydata_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetActivityData* CSReqBody::_internal_mutable_getactivitydata() {
  
  if (_impl_.getactivitydata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetActivityData>(GetArenaForAllocation());
    _impl_.getactivitydata_ = p;
  }
  return _impl_.getactivitydata_;
}
inline ::msg::CSReqGetActivityData* CSReqBody::mutable_getactivitydata() {
  ::msg::CSReqGetActivityData* _msg = _internal_mutable_getactivitydata();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetActivityData)
  return _msg;
}
inline void CSReqBody::set_allocated_getactivitydata(::msg::CSReqGetActivityData* getactivitydata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getactivitydata_);
  }
  if (getactivitydata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getactivitydata));
    if (message_arena != submessage_arena) {
      getactivitydata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getactivitydata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getactivitydata_ = getactivitydata;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetActivityData)
}

// .msg.CSReqSendSms SendSms = 71;
inline bool CSReqBody::_internal_has_sendsms() const {
  return this != internal_default_instance() && _impl_.sendsms_ != nullptr;
}
inline bool CSReqBody::has_sendsms() const {
  return _internal_has_sendsms();
}
inline const ::msg::CSReqSendSms& CSReqBody::_internal_sendsms() const {
  const ::msg::CSReqSendSms* p = _impl_.sendsms_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSendSms&>(
      ::msg::_CSReqSendSms_default_instance_);
}
inline const ::msg::CSReqSendSms& CSReqBody::sendsms() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SendSms)
  return _internal_sendsms();
}
inline void CSReqBody::unsafe_arena_set_allocated_sendsms(
    ::msg::CSReqSendSms* sendsms) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sendsms_);
  }
  _impl_.sendsms_ = sendsms;
  if (sendsms) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SendSms)
}
inline ::msg::CSReqSendSms* CSReqBody::release_sendsms() {
  
  ::msg::CSReqSendSms* temp = _impl_.sendsms_;
  _impl_.sendsms_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSendSms* CSReqBody::unsafe_arena_release_sendsms() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SendSms)
  
  ::msg::CSReqSendSms* temp = _impl_.sendsms_;
  _impl_.sendsms_ = nullptr;
  return temp;
}
inline ::msg::CSReqSendSms* CSReqBody::_internal_mutable_sendsms() {
  
  if (_impl_.sendsms_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSendSms>(GetArenaForAllocation());
    _impl_.sendsms_ = p;
  }
  return _impl_.sendsms_;
}
inline ::msg::CSReqSendSms* CSReqBody::mutable_sendsms() {
  ::msg::CSReqSendSms* _msg = _internal_mutable_sendsms();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SendSms)
  return _msg;
}
inline void CSReqBody::set_allocated_sendsms(::msg::CSReqSendSms* sendsms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sendsms_);
  }
  if (sendsms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sendsms));
    if (message_arena != submessage_arena) {
      sendsms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sendsms, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sendsms_ = sendsms;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SendSms)
}

// .msg.CSReqGetMeleeAward GetMeleeAward = 72;
inline bool CSReqBody::_internal_has_getmeleeaward() const {
  return this != internal_default_instance() && _impl_.getmeleeaward_ != nullptr;
}
inline bool CSReqBody::has_getmeleeaward() const {
  return _internal_has_getmeleeaward();
}
inline const ::msg::CSReqGetMeleeAward& CSReqBody::_internal_getmeleeaward() const {
  const ::msg::CSReqGetMeleeAward* p = _impl_.getmeleeaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetMeleeAward&>(
      ::msg::_CSReqGetMeleeAward_default_instance_);
}
inline const ::msg::CSReqGetMeleeAward& CSReqBody::getmeleeaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetMeleeAward)
  return _internal_getmeleeaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_getmeleeaward(
    ::msg::CSReqGetMeleeAward* getmeleeaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmeleeaward_);
  }
  _impl_.getmeleeaward_ = getmeleeaward;
  if (getmeleeaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetMeleeAward)
}
inline ::msg::CSReqGetMeleeAward* CSReqBody::release_getmeleeaward() {
  
  ::msg::CSReqGetMeleeAward* temp = _impl_.getmeleeaward_;
  _impl_.getmeleeaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetMeleeAward* CSReqBody::unsafe_arena_release_getmeleeaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetMeleeAward)
  
  ::msg::CSReqGetMeleeAward* temp = _impl_.getmeleeaward_;
  _impl_.getmeleeaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetMeleeAward* CSReqBody::_internal_mutable_getmeleeaward() {
  
  if (_impl_.getmeleeaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetMeleeAward>(GetArenaForAllocation());
    _impl_.getmeleeaward_ = p;
  }
  return _impl_.getmeleeaward_;
}
inline ::msg::CSReqGetMeleeAward* CSReqBody::mutable_getmeleeaward() {
  ::msg::CSReqGetMeleeAward* _msg = _internal_mutable_getmeleeaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetMeleeAward)
  return _msg;
}
inline void CSReqBody::set_allocated_getmeleeaward(::msg::CSReqGetMeleeAward* getmeleeaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmeleeaward_);
  }
  if (getmeleeaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getmeleeaward));
    if (message_arena != submessage_arena) {
      getmeleeaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getmeleeaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getmeleeaward_ = getmeleeaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetMeleeAward)
}

// .msg.CSReqAddAiToTeam AddAiToTeam = 73;
inline bool CSReqBody::_internal_has_addaitoteam() const {
  return this != internal_default_instance() && _impl_.addaitoteam_ != nullptr;
}
inline bool CSReqBody::has_addaitoteam() const {
  return _internal_has_addaitoteam();
}
inline const ::msg::CSReqAddAiToTeam& CSReqBody::_internal_addaitoteam() const {
  const ::msg::CSReqAddAiToTeam* p = _impl_.addaitoteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqAddAiToTeam&>(
      ::msg::_CSReqAddAiToTeam_default_instance_);
}
inline const ::msg::CSReqAddAiToTeam& CSReqBody::addaitoteam() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.AddAiToTeam)
  return _internal_addaitoteam();
}
inline void CSReqBody::unsafe_arena_set_allocated_addaitoteam(
    ::msg::CSReqAddAiToTeam* addaitoteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.addaitoteam_);
  }
  _impl_.addaitoteam_ = addaitoteam;
  if (addaitoteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.AddAiToTeam)
}
inline ::msg::CSReqAddAiToTeam* CSReqBody::release_addaitoteam() {
  
  ::msg::CSReqAddAiToTeam* temp = _impl_.addaitoteam_;
  _impl_.addaitoteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqAddAiToTeam* CSReqBody::unsafe_arena_release_addaitoteam() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.AddAiToTeam)
  
  ::msg::CSReqAddAiToTeam* temp = _impl_.addaitoteam_;
  _impl_.addaitoteam_ = nullptr;
  return temp;
}
inline ::msg::CSReqAddAiToTeam* CSReqBody::_internal_mutable_addaitoteam() {
  
  if (_impl_.addaitoteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqAddAiToTeam>(GetArenaForAllocation());
    _impl_.addaitoteam_ = p;
  }
  return _impl_.addaitoteam_;
}
inline ::msg::CSReqAddAiToTeam* CSReqBody::mutable_addaitoteam() {
  ::msg::CSReqAddAiToTeam* _msg = _internal_mutable_addaitoteam();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.AddAiToTeam)
  return _msg;
}
inline void CSReqBody::set_allocated_addaitoteam(::msg::CSReqAddAiToTeam* addaitoteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.addaitoteam_);
  }
  if (addaitoteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(addaitoteam));
    if (message_arena != submessage_arena) {
      addaitoteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addaitoteam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.addaitoteam_ = addaitoteam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.AddAiToTeam)
}

// .msg.CSReqShare Share = 74;
inline bool CSReqBody::_internal_has_share() const {
  return this != internal_default_instance() && _impl_.share_ != nullptr;
}
inline bool CSReqBody::has_share() const {
  return _internal_has_share();
}
inline const ::msg::CSReqShare& CSReqBody::_internal_share() const {
  const ::msg::CSReqShare* p = _impl_.share_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqShare&>(
      ::msg::_CSReqShare_default_instance_);
}
inline const ::msg::CSReqShare& CSReqBody::share() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.Share)
  return _internal_share();
}
inline void CSReqBody::unsafe_arena_set_allocated_share(
    ::msg::CSReqShare* share) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.share_);
  }
  _impl_.share_ = share;
  if (share) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.Share)
}
inline ::msg::CSReqShare* CSReqBody::release_share() {
  
  ::msg::CSReqShare* temp = _impl_.share_;
  _impl_.share_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqShare* CSReqBody::unsafe_arena_release_share() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.Share)
  
  ::msg::CSReqShare* temp = _impl_.share_;
  _impl_.share_ = nullptr;
  return temp;
}
inline ::msg::CSReqShare* CSReqBody::_internal_mutable_share() {
  
  if (_impl_.share_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqShare>(GetArenaForAllocation());
    _impl_.share_ = p;
  }
  return _impl_.share_;
}
inline ::msg::CSReqShare* CSReqBody::mutable_share() {
  ::msg::CSReqShare* _msg = _internal_mutable_share();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.Share)
  return _msg;
}
inline void CSReqBody::set_allocated_share(::msg::CSReqShare* share) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.share_);
  }
  if (share) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(share));
    if (message_arena != submessage_arena) {
      share = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, share, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.share_ = share;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.Share)
}

// .msg.CSReqSkipInterface SkipInterface = 75;
inline bool CSReqBody::_internal_has_skipinterface() const {
  return this != internal_default_instance() && _impl_.skipinterface_ != nullptr;
}
inline bool CSReqBody::has_skipinterface() const {
  return _internal_has_skipinterface();
}
inline const ::msg::CSReqSkipInterface& CSReqBody::_internal_skipinterface() const {
  const ::msg::CSReqSkipInterface* p = _impl_.skipinterface_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSkipInterface&>(
      ::msg::_CSReqSkipInterface_default_instance_);
}
inline const ::msg::CSReqSkipInterface& CSReqBody::skipinterface() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SkipInterface)
  return _internal_skipinterface();
}
inline void CSReqBody::unsafe_arena_set_allocated_skipinterface(
    ::msg::CSReqSkipInterface* skipinterface) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skipinterface_);
  }
  _impl_.skipinterface_ = skipinterface;
  if (skipinterface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SkipInterface)
}
inline ::msg::CSReqSkipInterface* CSReqBody::release_skipinterface() {
  
  ::msg::CSReqSkipInterface* temp = _impl_.skipinterface_;
  _impl_.skipinterface_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSkipInterface* CSReqBody::unsafe_arena_release_skipinterface() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SkipInterface)
  
  ::msg::CSReqSkipInterface* temp = _impl_.skipinterface_;
  _impl_.skipinterface_ = nullptr;
  return temp;
}
inline ::msg::CSReqSkipInterface* CSReqBody::_internal_mutable_skipinterface() {
  
  if (_impl_.skipinterface_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSkipInterface>(GetArenaForAllocation());
    _impl_.skipinterface_ = p;
  }
  return _impl_.skipinterface_;
}
inline ::msg::CSReqSkipInterface* CSReqBody::mutable_skipinterface() {
  ::msg::CSReqSkipInterface* _msg = _internal_mutable_skipinterface();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SkipInterface)
  return _msg;
}
inline void CSReqBody::set_allocated_skipinterface(::msg::CSReqSkipInterface* skipinterface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skipinterface_);
  }
  if (skipinterface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skipinterface));
    if (message_arena != submessage_arena) {
      skipinterface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skipinterface, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.skipinterface_ = skipinterface;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SkipInterface)
}

// .msg.CSReqTeamGame TeamGame = 76;
inline bool CSReqBody::_internal_has_teamgame() const {
  return this != internal_default_instance() && _impl_.teamgame_ != nullptr;
}
inline bool CSReqBody::has_teamgame() const {
  return _internal_has_teamgame();
}
inline const ::msg::CSReqTeamGame& CSReqBody::_internal_teamgame() const {
  const ::msg::CSReqTeamGame* p = _impl_.teamgame_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqTeamGame&>(
      ::msg::_CSReqTeamGame_default_instance_);
}
inline const ::msg::CSReqTeamGame& CSReqBody::teamgame() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.TeamGame)
  return _internal_teamgame();
}
inline void CSReqBody::unsafe_arena_set_allocated_teamgame(
    ::msg::CSReqTeamGame* teamgame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamgame_);
  }
  _impl_.teamgame_ = teamgame;
  if (teamgame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.TeamGame)
}
inline ::msg::CSReqTeamGame* CSReqBody::release_teamgame() {
  
  ::msg::CSReqTeamGame* temp = _impl_.teamgame_;
  _impl_.teamgame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqTeamGame* CSReqBody::unsafe_arena_release_teamgame() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.TeamGame)
  
  ::msg::CSReqTeamGame* temp = _impl_.teamgame_;
  _impl_.teamgame_ = nullptr;
  return temp;
}
inline ::msg::CSReqTeamGame* CSReqBody::_internal_mutable_teamgame() {
  
  if (_impl_.teamgame_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqTeamGame>(GetArenaForAllocation());
    _impl_.teamgame_ = p;
  }
  return _impl_.teamgame_;
}
inline ::msg::CSReqTeamGame* CSReqBody::mutable_teamgame() {
  ::msg::CSReqTeamGame* _msg = _internal_mutable_teamgame();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.TeamGame)
  return _msg;
}
inline void CSReqBody::set_allocated_teamgame(::msg::CSReqTeamGame* teamgame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamgame_);
  }
  if (teamgame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teamgame));
    if (message_arena != submessage_arena) {
      teamgame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamgame, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.teamgame_ = teamgame;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.TeamGame)
}

// .msg.CSReqSetTeamMode SetTeamMode = 77;
inline bool CSReqBody::_internal_has_setteammode() const {
  return this != internal_default_instance() && _impl_.setteammode_ != nullptr;
}
inline bool CSReqBody::has_setteammode() const {
  return _internal_has_setteammode();
}
inline const ::msg::CSReqSetTeamMode& CSReqBody::_internal_setteammode() const {
  const ::msg::CSReqSetTeamMode* p = _impl_.setteammode_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSetTeamMode&>(
      ::msg::_CSReqSetTeamMode_default_instance_);
}
inline const ::msg::CSReqSetTeamMode& CSReqBody::setteammode() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SetTeamMode)
  return _internal_setteammode();
}
inline void CSReqBody::unsafe_arena_set_allocated_setteammode(
    ::msg::CSReqSetTeamMode* setteammode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setteammode_);
  }
  _impl_.setteammode_ = setteammode;
  if (setteammode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SetTeamMode)
}
inline ::msg::CSReqSetTeamMode* CSReqBody::release_setteammode() {
  
  ::msg::CSReqSetTeamMode* temp = _impl_.setteammode_;
  _impl_.setteammode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSetTeamMode* CSReqBody::unsafe_arena_release_setteammode() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SetTeamMode)
  
  ::msg::CSReqSetTeamMode* temp = _impl_.setteammode_;
  _impl_.setteammode_ = nullptr;
  return temp;
}
inline ::msg::CSReqSetTeamMode* CSReqBody::_internal_mutable_setteammode() {
  
  if (_impl_.setteammode_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSetTeamMode>(GetArenaForAllocation());
    _impl_.setteammode_ = p;
  }
  return _impl_.setteammode_;
}
inline ::msg::CSReqSetTeamMode* CSReqBody::mutable_setteammode() {
  ::msg::CSReqSetTeamMode* _msg = _internal_mutable_setteammode();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SetTeamMode)
  return _msg;
}
inline void CSReqBody::set_allocated_setteammode(::msg::CSReqSetTeamMode* setteammode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setteammode_);
  }
  if (setteammode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setteammode));
    if (message_arena != submessage_arena) {
      setteammode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setteammode, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setteammode_ = setteammode;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SetTeamMode)
}

// .msg.CSReqSetHistoryPvpShowPermission HistoryPvpShowPermission = 78;
inline bool CSReqBody::_internal_has_historypvpshowpermission() const {
  return this != internal_default_instance() && _impl_.historypvpshowpermission_ != nullptr;
}
inline bool CSReqBody::has_historypvpshowpermission() const {
  return _internal_has_historypvpshowpermission();
}
inline const ::msg::CSReqSetHistoryPvpShowPermission& CSReqBody::_internal_historypvpshowpermission() const {
  const ::msg::CSReqSetHistoryPvpShowPermission* p = _impl_.historypvpshowpermission_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSetHistoryPvpShowPermission&>(
      ::msg::_CSReqSetHistoryPvpShowPermission_default_instance_);
}
inline const ::msg::CSReqSetHistoryPvpShowPermission& CSReqBody::historypvpshowpermission() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.HistoryPvpShowPermission)
  return _internal_historypvpshowpermission();
}
inline void CSReqBody::unsafe_arena_set_allocated_historypvpshowpermission(
    ::msg::CSReqSetHistoryPvpShowPermission* historypvpshowpermission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.historypvpshowpermission_);
  }
  _impl_.historypvpshowpermission_ = historypvpshowpermission;
  if (historypvpshowpermission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.HistoryPvpShowPermission)
}
inline ::msg::CSReqSetHistoryPvpShowPermission* CSReqBody::release_historypvpshowpermission() {
  
  ::msg::CSReqSetHistoryPvpShowPermission* temp = _impl_.historypvpshowpermission_;
  _impl_.historypvpshowpermission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSetHistoryPvpShowPermission* CSReqBody::unsafe_arena_release_historypvpshowpermission() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.HistoryPvpShowPermission)
  
  ::msg::CSReqSetHistoryPvpShowPermission* temp = _impl_.historypvpshowpermission_;
  _impl_.historypvpshowpermission_ = nullptr;
  return temp;
}
inline ::msg::CSReqSetHistoryPvpShowPermission* CSReqBody::_internal_mutable_historypvpshowpermission() {
  
  if (_impl_.historypvpshowpermission_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSetHistoryPvpShowPermission>(GetArenaForAllocation());
    _impl_.historypvpshowpermission_ = p;
  }
  return _impl_.historypvpshowpermission_;
}
inline ::msg::CSReqSetHistoryPvpShowPermission* CSReqBody::mutable_historypvpshowpermission() {
  ::msg::CSReqSetHistoryPvpShowPermission* _msg = _internal_mutable_historypvpshowpermission();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.HistoryPvpShowPermission)
  return _msg;
}
inline void CSReqBody::set_allocated_historypvpshowpermission(::msg::CSReqSetHistoryPvpShowPermission* historypvpshowpermission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.historypvpshowpermission_);
  }
  if (historypvpshowpermission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(historypvpshowpermission));
    if (message_arena != submessage_arena) {
      historypvpshowpermission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, historypvpshowpermission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.historypvpshowpermission_ = historypvpshowpermission;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.HistoryPvpShowPermission)
}

// .msg.CSReqSearchTeam SearchTeam = 79;
inline bool CSReqBody::_internal_has_searchteam() const {
  return this != internal_default_instance() && _impl_.searchteam_ != nullptr;
}
inline bool CSReqBody::has_searchteam() const {
  return _internal_has_searchteam();
}
inline const ::msg::CSReqSearchTeam& CSReqBody::_internal_searchteam() const {
  const ::msg::CSReqSearchTeam* p = _impl_.searchteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSearchTeam&>(
      ::msg::_CSReqSearchTeam_default_instance_);
}
inline const ::msg::CSReqSearchTeam& CSReqBody::searchteam() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SearchTeam)
  return _internal_searchteam();
}
inline void CSReqBody::unsafe_arena_set_allocated_searchteam(
    ::msg::CSReqSearchTeam* searchteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.searchteam_);
  }
  _impl_.searchteam_ = searchteam;
  if (searchteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SearchTeam)
}
inline ::msg::CSReqSearchTeam* CSReqBody::release_searchteam() {
  
  ::msg::CSReqSearchTeam* temp = _impl_.searchteam_;
  _impl_.searchteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSearchTeam* CSReqBody::unsafe_arena_release_searchteam() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SearchTeam)
  
  ::msg::CSReqSearchTeam* temp = _impl_.searchteam_;
  _impl_.searchteam_ = nullptr;
  return temp;
}
inline ::msg::CSReqSearchTeam* CSReqBody::_internal_mutable_searchteam() {
  
  if (_impl_.searchteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSearchTeam>(GetArenaForAllocation());
    _impl_.searchteam_ = p;
  }
  return _impl_.searchteam_;
}
inline ::msg::CSReqSearchTeam* CSReqBody::mutable_searchteam() {
  ::msg::CSReqSearchTeam* _msg = _internal_mutable_searchteam();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SearchTeam)
  return _msg;
}
inline void CSReqBody::set_allocated_searchteam(::msg::CSReqSearchTeam* searchteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.searchteam_);
  }
  if (searchteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(searchteam));
    if (message_arena != submessage_arena) {
      searchteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, searchteam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.searchteam_ = searchteam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SearchTeam)
}

// .msg.CSReqApplyChat ApplyChat = 80;
inline bool CSReqBody::_internal_has_applychat() const {
  return this != internal_default_instance() && _impl_.applychat_ != nullptr;
}
inline bool CSReqBody::has_applychat() const {
  return _internal_has_applychat();
}
inline const ::msg::CSReqApplyChat& CSReqBody::_internal_applychat() const {
  const ::msg::CSReqApplyChat* p = _impl_.applychat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqApplyChat&>(
      ::msg::_CSReqApplyChat_default_instance_);
}
inline const ::msg::CSReqApplyChat& CSReqBody::applychat() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ApplyChat)
  return _internal_applychat();
}
inline void CSReqBody::unsafe_arena_set_allocated_applychat(
    ::msg::CSReqApplyChat* applychat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.applychat_);
  }
  _impl_.applychat_ = applychat;
  if (applychat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ApplyChat)
}
inline ::msg::CSReqApplyChat* CSReqBody::release_applychat() {
  
  ::msg::CSReqApplyChat* temp = _impl_.applychat_;
  _impl_.applychat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqApplyChat* CSReqBody::unsafe_arena_release_applychat() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ApplyChat)
  
  ::msg::CSReqApplyChat* temp = _impl_.applychat_;
  _impl_.applychat_ = nullptr;
  return temp;
}
inline ::msg::CSReqApplyChat* CSReqBody::_internal_mutable_applychat() {
  
  if (_impl_.applychat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqApplyChat>(GetArenaForAllocation());
    _impl_.applychat_ = p;
  }
  return _impl_.applychat_;
}
inline ::msg::CSReqApplyChat* CSReqBody::mutable_applychat() {
  ::msg::CSReqApplyChat* _msg = _internal_mutable_applychat();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ApplyChat)
  return _msg;
}
inline void CSReqBody::set_allocated_applychat(::msg::CSReqApplyChat* applychat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.applychat_);
  }
  if (applychat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applychat));
    if (message_arena != submessage_arena) {
      applychat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applychat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.applychat_ = applychat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ApplyChat)
}

// .msg.CSReqChatLogin ChatLogin = 81;
inline bool CSReqBody::_internal_has_chatlogin() const {
  return this != internal_default_instance() && _impl_.chatlogin_ != nullptr;
}
inline bool CSReqBody::has_chatlogin() const {
  return _internal_has_chatlogin();
}
inline const ::msg::CSReqChatLogin& CSReqBody::_internal_chatlogin() const {
  const ::msg::CSReqChatLogin* p = _impl_.chatlogin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqChatLogin&>(
      ::msg::_CSReqChatLogin_default_instance_);
}
inline const ::msg::CSReqChatLogin& CSReqBody::chatlogin() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ChatLogin)
  return _internal_chatlogin();
}
inline void CSReqBody::unsafe_arena_set_allocated_chatlogin(
    ::msg::CSReqChatLogin* chatlogin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chatlogin_);
  }
  _impl_.chatlogin_ = chatlogin;
  if (chatlogin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ChatLogin)
}
inline ::msg::CSReqChatLogin* CSReqBody::release_chatlogin() {
  
  ::msg::CSReqChatLogin* temp = _impl_.chatlogin_;
  _impl_.chatlogin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqChatLogin* CSReqBody::unsafe_arena_release_chatlogin() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ChatLogin)
  
  ::msg::CSReqChatLogin* temp = _impl_.chatlogin_;
  _impl_.chatlogin_ = nullptr;
  return temp;
}
inline ::msg::CSReqChatLogin* CSReqBody::_internal_mutable_chatlogin() {
  
  if (_impl_.chatlogin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqChatLogin>(GetArenaForAllocation());
    _impl_.chatlogin_ = p;
  }
  return _impl_.chatlogin_;
}
inline ::msg::CSReqChatLogin* CSReqBody::mutable_chatlogin() {
  ::msg::CSReqChatLogin* _msg = _internal_mutable_chatlogin();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ChatLogin)
  return _msg;
}
inline void CSReqBody::set_allocated_chatlogin(::msg::CSReqChatLogin* chatlogin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chatlogin_);
  }
  if (chatlogin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chatlogin));
    if (message_arena != submessage_arena) {
      chatlogin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chatlogin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chatlogin_ = chatlogin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ChatLogin)
}

// .msg.CSReqProbeNetDelay ProbeNetDelay = 82;
inline bool CSReqBody::_internal_has_probenetdelay() const {
  return this != internal_default_instance() && _impl_.probenetdelay_ != nullptr;
}
inline bool CSReqBody::has_probenetdelay() const {
  return _internal_has_probenetdelay();
}
inline const ::msg::CSReqProbeNetDelay& CSReqBody::_internal_probenetdelay() const {
  const ::msg::CSReqProbeNetDelay* p = _impl_.probenetdelay_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqProbeNetDelay&>(
      ::msg::_CSReqProbeNetDelay_default_instance_);
}
inline const ::msg::CSReqProbeNetDelay& CSReqBody::probenetdelay() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ProbeNetDelay)
  return _internal_probenetdelay();
}
inline void CSReqBody::unsafe_arena_set_allocated_probenetdelay(
    ::msg::CSReqProbeNetDelay* probenetdelay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.probenetdelay_);
  }
  _impl_.probenetdelay_ = probenetdelay;
  if (probenetdelay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ProbeNetDelay)
}
inline ::msg::CSReqProbeNetDelay* CSReqBody::release_probenetdelay() {
  
  ::msg::CSReqProbeNetDelay* temp = _impl_.probenetdelay_;
  _impl_.probenetdelay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqProbeNetDelay* CSReqBody::unsafe_arena_release_probenetdelay() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ProbeNetDelay)
  
  ::msg::CSReqProbeNetDelay* temp = _impl_.probenetdelay_;
  _impl_.probenetdelay_ = nullptr;
  return temp;
}
inline ::msg::CSReqProbeNetDelay* CSReqBody::_internal_mutable_probenetdelay() {
  
  if (_impl_.probenetdelay_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqProbeNetDelay>(GetArenaForAllocation());
    _impl_.probenetdelay_ = p;
  }
  return _impl_.probenetdelay_;
}
inline ::msg::CSReqProbeNetDelay* CSReqBody::mutable_probenetdelay() {
  ::msg::CSReqProbeNetDelay* _msg = _internal_mutable_probenetdelay();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ProbeNetDelay)
  return _msg;
}
inline void CSReqBody::set_allocated_probenetdelay(::msg::CSReqProbeNetDelay* probenetdelay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.probenetdelay_);
  }
  if (probenetdelay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(probenetdelay));
    if (message_arena != submessage_arena) {
      probenetdelay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, probenetdelay, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.probenetdelay_ = probenetdelay;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ProbeNetDelay)
}

// .msg.CSReqGetEggs GetEggs = 83;
inline bool CSReqBody::_internal_has_geteggs() const {
  return this != internal_default_instance() && _impl_.geteggs_ != nullptr;
}
inline bool CSReqBody::has_geteggs() const {
  return _internal_has_geteggs();
}
inline const ::msg::CSReqGetEggs& CSReqBody::_internal_geteggs() const {
  const ::msg::CSReqGetEggs* p = _impl_.geteggs_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetEggs&>(
      ::msg::_CSReqGetEggs_default_instance_);
}
inline const ::msg::CSReqGetEggs& CSReqBody::geteggs() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetEggs)
  return _internal_geteggs();
}
inline void CSReqBody::unsafe_arena_set_allocated_geteggs(
    ::msg::CSReqGetEggs* geteggs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.geteggs_);
  }
  _impl_.geteggs_ = geteggs;
  if (geteggs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetEggs)
}
inline ::msg::CSReqGetEggs* CSReqBody::release_geteggs() {
  
  ::msg::CSReqGetEggs* temp = _impl_.geteggs_;
  _impl_.geteggs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetEggs* CSReqBody::unsafe_arena_release_geteggs() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetEggs)
  
  ::msg::CSReqGetEggs* temp = _impl_.geteggs_;
  _impl_.geteggs_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetEggs* CSReqBody::_internal_mutable_geteggs() {
  
  if (_impl_.geteggs_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetEggs>(GetArenaForAllocation());
    _impl_.geteggs_ = p;
  }
  return _impl_.geteggs_;
}
inline ::msg::CSReqGetEggs* CSReqBody::mutable_geteggs() {
  ::msg::CSReqGetEggs* _msg = _internal_mutable_geteggs();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetEggs)
  return _msg;
}
inline void CSReqBody::set_allocated_geteggs(::msg::CSReqGetEggs* geteggs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.geteggs_);
  }
  if (geteggs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geteggs));
    if (message_arena != submessage_arena) {
      geteggs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geteggs, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.geteggs_ = geteggs;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetEggs)
}

// .msg.CSReqBuyGoods BuyGoods = 84;
inline bool CSReqBody::_internal_has_buygoods() const {
  return this != internal_default_instance() && _impl_.buygoods_ != nullptr;
}
inline bool CSReqBody::has_buygoods() const {
  return _internal_has_buygoods();
}
inline const ::msg::CSReqBuyGoods& CSReqBody::_internal_buygoods() const {
  const ::msg::CSReqBuyGoods* p = _impl_.buygoods_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqBuyGoods&>(
      ::msg::_CSReqBuyGoods_default_instance_);
}
inline const ::msg::CSReqBuyGoods& CSReqBody::buygoods() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.BuyGoods)
  return _internal_buygoods();
}
inline void CSReqBody::unsafe_arena_set_allocated_buygoods(
    ::msg::CSReqBuyGoods* buygoods) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buygoods_);
  }
  _impl_.buygoods_ = buygoods;
  if (buygoods) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.BuyGoods)
}
inline ::msg::CSReqBuyGoods* CSReqBody::release_buygoods() {
  
  ::msg::CSReqBuyGoods* temp = _impl_.buygoods_;
  _impl_.buygoods_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqBuyGoods* CSReqBody::unsafe_arena_release_buygoods() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.BuyGoods)
  
  ::msg::CSReqBuyGoods* temp = _impl_.buygoods_;
  _impl_.buygoods_ = nullptr;
  return temp;
}
inline ::msg::CSReqBuyGoods* CSReqBody::_internal_mutable_buygoods() {
  
  if (_impl_.buygoods_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqBuyGoods>(GetArenaForAllocation());
    _impl_.buygoods_ = p;
  }
  return _impl_.buygoods_;
}
inline ::msg::CSReqBuyGoods* CSReqBody::mutable_buygoods() {
  ::msg::CSReqBuyGoods* _msg = _internal_mutable_buygoods();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.BuyGoods)
  return _msg;
}
inline void CSReqBody::set_allocated_buygoods(::msg::CSReqBuyGoods* buygoods) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buygoods_);
  }
  if (buygoods) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buygoods));
    if (message_arena != submessage_arena) {
      buygoods = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buygoods, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buygoods_ = buygoods;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.BuyGoods)
}

// .msg.CSReqExchangePassportGoods ExchangePassportGoods = 85;
inline bool CSReqBody::_internal_has_exchangepassportgoods() const {
  return this != internal_default_instance() && _impl_.exchangepassportgoods_ != nullptr;
}
inline bool CSReqBody::has_exchangepassportgoods() const {
  return _internal_has_exchangepassportgoods();
}
inline const ::msg::CSReqExchangePassportGoods& CSReqBody::_internal_exchangepassportgoods() const {
  const ::msg::CSReqExchangePassportGoods* p = _impl_.exchangepassportgoods_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqExchangePassportGoods&>(
      ::msg::_CSReqExchangePassportGoods_default_instance_);
}
inline const ::msg::CSReqExchangePassportGoods& CSReqBody::exchangepassportgoods() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ExchangePassportGoods)
  return _internal_exchangepassportgoods();
}
inline void CSReqBody::unsafe_arena_set_allocated_exchangepassportgoods(
    ::msg::CSReqExchangePassportGoods* exchangepassportgoods) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchangepassportgoods_);
  }
  _impl_.exchangepassportgoods_ = exchangepassportgoods;
  if (exchangepassportgoods) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ExchangePassportGoods)
}
inline ::msg::CSReqExchangePassportGoods* CSReqBody::release_exchangepassportgoods() {
  
  ::msg::CSReqExchangePassportGoods* temp = _impl_.exchangepassportgoods_;
  _impl_.exchangepassportgoods_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqExchangePassportGoods* CSReqBody::unsafe_arena_release_exchangepassportgoods() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ExchangePassportGoods)
  
  ::msg::CSReqExchangePassportGoods* temp = _impl_.exchangepassportgoods_;
  _impl_.exchangepassportgoods_ = nullptr;
  return temp;
}
inline ::msg::CSReqExchangePassportGoods* CSReqBody::_internal_mutable_exchangepassportgoods() {
  
  if (_impl_.exchangepassportgoods_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqExchangePassportGoods>(GetArenaForAllocation());
    _impl_.exchangepassportgoods_ = p;
  }
  return _impl_.exchangepassportgoods_;
}
inline ::msg::CSReqExchangePassportGoods* CSReqBody::mutable_exchangepassportgoods() {
  ::msg::CSReqExchangePassportGoods* _msg = _internal_mutable_exchangepassportgoods();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ExchangePassportGoods)
  return _msg;
}
inline void CSReqBody::set_allocated_exchangepassportgoods(::msg::CSReqExchangePassportGoods* exchangepassportgoods) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchangepassportgoods_);
  }
  if (exchangepassportgoods) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exchangepassportgoods));
    if (message_arena != submessage_arena) {
      exchangepassportgoods = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exchangepassportgoods, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.exchangepassportgoods_ = exchangepassportgoods;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ExchangePassportGoods)
}

// .msg.CSReqUsePassportTaskCard UsePassportTaskCard = 86;
inline bool CSReqBody::_internal_has_usepassporttaskcard() const {
  return this != internal_default_instance() && _impl_.usepassporttaskcard_ != nullptr;
}
inline bool CSReqBody::has_usepassporttaskcard() const {
  return _internal_has_usepassporttaskcard();
}
inline const ::msg::CSReqUsePassportTaskCard& CSReqBody::_internal_usepassporttaskcard() const {
  const ::msg::CSReqUsePassportTaskCard* p = _impl_.usepassporttaskcard_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUsePassportTaskCard&>(
      ::msg::_CSReqUsePassportTaskCard_default_instance_);
}
inline const ::msg::CSReqUsePassportTaskCard& CSReqBody::usepassporttaskcard() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UsePassportTaskCard)
  return _internal_usepassporttaskcard();
}
inline void CSReqBody::unsafe_arena_set_allocated_usepassporttaskcard(
    ::msg::CSReqUsePassportTaskCard* usepassporttaskcard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usepassporttaskcard_);
  }
  _impl_.usepassporttaskcard_ = usepassporttaskcard;
  if (usepassporttaskcard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UsePassportTaskCard)
}
inline ::msg::CSReqUsePassportTaskCard* CSReqBody::release_usepassporttaskcard() {
  
  ::msg::CSReqUsePassportTaskCard* temp = _impl_.usepassporttaskcard_;
  _impl_.usepassporttaskcard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUsePassportTaskCard* CSReqBody::unsafe_arena_release_usepassporttaskcard() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UsePassportTaskCard)
  
  ::msg::CSReqUsePassportTaskCard* temp = _impl_.usepassporttaskcard_;
  _impl_.usepassporttaskcard_ = nullptr;
  return temp;
}
inline ::msg::CSReqUsePassportTaskCard* CSReqBody::_internal_mutable_usepassporttaskcard() {
  
  if (_impl_.usepassporttaskcard_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUsePassportTaskCard>(GetArenaForAllocation());
    _impl_.usepassporttaskcard_ = p;
  }
  return _impl_.usepassporttaskcard_;
}
inline ::msg::CSReqUsePassportTaskCard* CSReqBody::mutable_usepassporttaskcard() {
  ::msg::CSReqUsePassportTaskCard* _msg = _internal_mutable_usepassporttaskcard();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UsePassportTaskCard)
  return _msg;
}
inline void CSReqBody::set_allocated_usepassporttaskcard(::msg::CSReqUsePassportTaskCard* usepassporttaskcard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usepassporttaskcard_);
  }
  if (usepassporttaskcard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usepassporttaskcard));
    if (message_arena != submessage_arena) {
      usepassporttaskcard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usepassporttaskcard, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.usepassporttaskcard_ = usepassporttaskcard;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UsePassportTaskCard)
}

// .msg.CSReqOpenRandChest OpenRandChest = 87;
inline bool CSReqBody::_internal_has_openrandchest() const {
  return this != internal_default_instance() && _impl_.openrandchest_ != nullptr;
}
inline bool CSReqBody::has_openrandchest() const {
  return _internal_has_openrandchest();
}
inline const ::msg::CSReqOpenRandChest& CSReqBody::_internal_openrandchest() const {
  const ::msg::CSReqOpenRandChest* p = _impl_.openrandchest_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqOpenRandChest&>(
      ::msg::_CSReqOpenRandChest_default_instance_);
}
inline const ::msg::CSReqOpenRandChest& CSReqBody::openrandchest() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.OpenRandChest)
  return _internal_openrandchest();
}
inline void CSReqBody::unsafe_arena_set_allocated_openrandchest(
    ::msg::CSReqOpenRandChest* openrandchest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.openrandchest_);
  }
  _impl_.openrandchest_ = openrandchest;
  if (openrandchest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.OpenRandChest)
}
inline ::msg::CSReqOpenRandChest* CSReqBody::release_openrandchest() {
  
  ::msg::CSReqOpenRandChest* temp = _impl_.openrandchest_;
  _impl_.openrandchest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqOpenRandChest* CSReqBody::unsafe_arena_release_openrandchest() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.OpenRandChest)
  
  ::msg::CSReqOpenRandChest* temp = _impl_.openrandchest_;
  _impl_.openrandchest_ = nullptr;
  return temp;
}
inline ::msg::CSReqOpenRandChest* CSReqBody::_internal_mutable_openrandchest() {
  
  if (_impl_.openrandchest_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqOpenRandChest>(GetArenaForAllocation());
    _impl_.openrandchest_ = p;
  }
  return _impl_.openrandchest_;
}
inline ::msg::CSReqOpenRandChest* CSReqBody::mutable_openrandchest() {
  ::msg::CSReqOpenRandChest* _msg = _internal_mutable_openrandchest();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.OpenRandChest)
  return _msg;
}
inline void CSReqBody::set_allocated_openrandchest(::msg::CSReqOpenRandChest* openrandchest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.openrandchest_);
  }
  if (openrandchest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(openrandchest));
    if (message_arena != submessage_arena) {
      openrandchest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, openrandchest, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.openrandchest_ = openrandchest;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.OpenRandChest)
}

// .msg.CSReqEggLottery EggLottery = 88;
inline bool CSReqBody::_internal_has_egglottery() const {
  return this != internal_default_instance() && _impl_.egglottery_ != nullptr;
}
inline bool CSReqBody::has_egglottery() const {
  return _internal_has_egglottery();
}
inline const ::msg::CSReqEggLottery& CSReqBody::_internal_egglottery() const {
  const ::msg::CSReqEggLottery* p = _impl_.egglottery_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqEggLottery&>(
      ::msg::_CSReqEggLottery_default_instance_);
}
inline const ::msg::CSReqEggLottery& CSReqBody::egglottery() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.EggLottery)
  return _internal_egglottery();
}
inline void CSReqBody::unsafe_arena_set_allocated_egglottery(
    ::msg::CSReqEggLottery* egglottery) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.egglottery_);
  }
  _impl_.egglottery_ = egglottery;
  if (egglottery) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.EggLottery)
}
inline ::msg::CSReqEggLottery* CSReqBody::release_egglottery() {
  
  ::msg::CSReqEggLottery* temp = _impl_.egglottery_;
  _impl_.egglottery_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqEggLottery* CSReqBody::unsafe_arena_release_egglottery() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.EggLottery)
  
  ::msg::CSReqEggLottery* temp = _impl_.egglottery_;
  _impl_.egglottery_ = nullptr;
  return temp;
}
inline ::msg::CSReqEggLottery* CSReqBody::_internal_mutable_egglottery() {
  
  if (_impl_.egglottery_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqEggLottery>(GetArenaForAllocation());
    _impl_.egglottery_ = p;
  }
  return _impl_.egglottery_;
}
inline ::msg::CSReqEggLottery* CSReqBody::mutable_egglottery() {
  ::msg::CSReqEggLottery* _msg = _internal_mutable_egglottery();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.EggLottery)
  return _msg;
}
inline void CSReqBody::set_allocated_egglottery(::msg::CSReqEggLottery* egglottery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.egglottery_);
  }
  if (egglottery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(egglottery));
    if (message_arena != submessage_arena) {
      egglottery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, egglottery, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.egglottery_ = egglottery;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.EggLottery)
}

// .msg.CSReqQueryDiamondBalance QueryDiamondBalance = 89;
inline bool CSReqBody::_internal_has_querydiamondbalance() const {
  return this != internal_default_instance() && _impl_.querydiamondbalance_ != nullptr;
}
inline bool CSReqBody::has_querydiamondbalance() const {
  return _internal_has_querydiamondbalance();
}
inline const ::msg::CSReqQueryDiamondBalance& CSReqBody::_internal_querydiamondbalance() const {
  const ::msg::CSReqQueryDiamondBalance* p = _impl_.querydiamondbalance_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqQueryDiamondBalance&>(
      ::msg::_CSReqQueryDiamondBalance_default_instance_);
}
inline const ::msg::CSReqQueryDiamondBalance& CSReqBody::querydiamondbalance() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.QueryDiamondBalance)
  return _internal_querydiamondbalance();
}
inline void CSReqBody::unsafe_arena_set_allocated_querydiamondbalance(
    ::msg::CSReqQueryDiamondBalance* querydiamondbalance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.querydiamondbalance_);
  }
  _impl_.querydiamondbalance_ = querydiamondbalance;
  if (querydiamondbalance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.QueryDiamondBalance)
}
inline ::msg::CSReqQueryDiamondBalance* CSReqBody::release_querydiamondbalance() {
  
  ::msg::CSReqQueryDiamondBalance* temp = _impl_.querydiamondbalance_;
  _impl_.querydiamondbalance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqQueryDiamondBalance* CSReqBody::unsafe_arena_release_querydiamondbalance() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.QueryDiamondBalance)
  
  ::msg::CSReqQueryDiamondBalance* temp = _impl_.querydiamondbalance_;
  _impl_.querydiamondbalance_ = nullptr;
  return temp;
}
inline ::msg::CSReqQueryDiamondBalance* CSReqBody::_internal_mutable_querydiamondbalance() {
  
  if (_impl_.querydiamondbalance_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqQueryDiamondBalance>(GetArenaForAllocation());
    _impl_.querydiamondbalance_ = p;
  }
  return _impl_.querydiamondbalance_;
}
inline ::msg::CSReqQueryDiamondBalance* CSReqBody::mutable_querydiamondbalance() {
  ::msg::CSReqQueryDiamondBalance* _msg = _internal_mutable_querydiamondbalance();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.QueryDiamondBalance)
  return _msg;
}
inline void CSReqBody::set_allocated_querydiamondbalance(::msg::CSReqQueryDiamondBalance* querydiamondbalance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.querydiamondbalance_);
  }
  if (querydiamondbalance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(querydiamondbalance));
    if (message_arena != submessage_arena) {
      querydiamondbalance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, querydiamondbalance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.querydiamondbalance_ = querydiamondbalance;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.QueryDiamondBalance)
}

// .msg.CSReqUseItem UseItem = 90;
inline bool CSReqBody::_internal_has_useitem() const {
  return this != internal_default_instance() && _impl_.useitem_ != nullptr;
}
inline bool CSReqBody::has_useitem() const {
  return _internal_has_useitem();
}
inline const ::msg::CSReqUseItem& CSReqBody::_internal_useitem() const {
  const ::msg::CSReqUseItem* p = _impl_.useitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUseItem&>(
      ::msg::_CSReqUseItem_default_instance_);
}
inline const ::msg::CSReqUseItem& CSReqBody::useitem() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UseItem)
  return _internal_useitem();
}
inline void CSReqBody::unsafe_arena_set_allocated_useitem(
    ::msg::CSReqUseItem* useitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.useitem_);
  }
  _impl_.useitem_ = useitem;
  if (useitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UseItem)
}
inline ::msg::CSReqUseItem* CSReqBody::release_useitem() {
  
  ::msg::CSReqUseItem* temp = _impl_.useitem_;
  _impl_.useitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUseItem* CSReqBody::unsafe_arena_release_useitem() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UseItem)
  
  ::msg::CSReqUseItem* temp = _impl_.useitem_;
  _impl_.useitem_ = nullptr;
  return temp;
}
inline ::msg::CSReqUseItem* CSReqBody::_internal_mutable_useitem() {
  
  if (_impl_.useitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUseItem>(GetArenaForAllocation());
    _impl_.useitem_ = p;
  }
  return _impl_.useitem_;
}
inline ::msg::CSReqUseItem* CSReqBody::mutable_useitem() {
  ::msg::CSReqUseItem* _msg = _internal_mutable_useitem();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UseItem)
  return _msg;
}
inline void CSReqBody::set_allocated_useitem(::msg::CSReqUseItem* useitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.useitem_);
  }
  if (useitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(useitem));
    if (message_arena != submessage_arena) {
      useitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, useitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.useitem_ = useitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UseItem)
}

// .msg.CSReqUseExperienceCard UseExperienceCard = 91;
inline bool CSReqBody::_internal_has_useexperiencecard() const {
  return this != internal_default_instance() && _impl_.useexperiencecard_ != nullptr;
}
inline bool CSReqBody::has_useexperiencecard() const {
  return _internal_has_useexperiencecard();
}
inline const ::msg::CSReqUseExperienceCard& CSReqBody::_internal_useexperiencecard() const {
  const ::msg::CSReqUseExperienceCard* p = _impl_.useexperiencecard_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUseExperienceCard&>(
      ::msg::_CSReqUseExperienceCard_default_instance_);
}
inline const ::msg::CSReqUseExperienceCard& CSReqBody::useexperiencecard() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UseExperienceCard)
  return _internal_useexperiencecard();
}
inline void CSReqBody::unsafe_arena_set_allocated_useexperiencecard(
    ::msg::CSReqUseExperienceCard* useexperiencecard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.useexperiencecard_);
  }
  _impl_.useexperiencecard_ = useexperiencecard;
  if (useexperiencecard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UseExperienceCard)
}
inline ::msg::CSReqUseExperienceCard* CSReqBody::release_useexperiencecard() {
  
  ::msg::CSReqUseExperienceCard* temp = _impl_.useexperiencecard_;
  _impl_.useexperiencecard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUseExperienceCard* CSReqBody::unsafe_arena_release_useexperiencecard() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UseExperienceCard)
  
  ::msg::CSReqUseExperienceCard* temp = _impl_.useexperiencecard_;
  _impl_.useexperiencecard_ = nullptr;
  return temp;
}
inline ::msg::CSReqUseExperienceCard* CSReqBody::_internal_mutable_useexperiencecard() {
  
  if (_impl_.useexperiencecard_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUseExperienceCard>(GetArenaForAllocation());
    _impl_.useexperiencecard_ = p;
  }
  return _impl_.useexperiencecard_;
}
inline ::msg::CSReqUseExperienceCard* CSReqBody::mutable_useexperiencecard() {
  ::msg::CSReqUseExperienceCard* _msg = _internal_mutable_useexperiencecard();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UseExperienceCard)
  return _msg;
}
inline void CSReqBody::set_allocated_useexperiencecard(::msg::CSReqUseExperienceCard* useexperiencecard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.useexperiencecard_);
  }
  if (useexperiencecard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(useexperiencecard));
    if (message_arena != submessage_arena) {
      useexperiencecard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, useexperiencecard, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.useexperiencecard_ = useexperiencecard;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UseExperienceCard)
}

// .msg.CSReqRandTargetItem RandTargetItem = 92;
inline bool CSReqBody::_internal_has_randtargetitem() const {
  return this != internal_default_instance() && _impl_.randtargetitem_ != nullptr;
}
inline bool CSReqBody::has_randtargetitem() const {
  return _internal_has_randtargetitem();
}
inline const ::msg::CSReqRandTargetItem& CSReqBody::_internal_randtargetitem() const {
  const ::msg::CSReqRandTargetItem* p = _impl_.randtargetitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRandTargetItem&>(
      ::msg::_CSReqRandTargetItem_default_instance_);
}
inline const ::msg::CSReqRandTargetItem& CSReqBody::randtargetitem() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RandTargetItem)
  return _internal_randtargetitem();
}
inline void CSReqBody::unsafe_arena_set_allocated_randtargetitem(
    ::msg::CSReqRandTargetItem* randtargetitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.randtargetitem_);
  }
  _impl_.randtargetitem_ = randtargetitem;
  if (randtargetitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RandTargetItem)
}
inline ::msg::CSReqRandTargetItem* CSReqBody::release_randtargetitem() {
  
  ::msg::CSReqRandTargetItem* temp = _impl_.randtargetitem_;
  _impl_.randtargetitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRandTargetItem* CSReqBody::unsafe_arena_release_randtargetitem() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RandTargetItem)
  
  ::msg::CSReqRandTargetItem* temp = _impl_.randtargetitem_;
  _impl_.randtargetitem_ = nullptr;
  return temp;
}
inline ::msg::CSReqRandTargetItem* CSReqBody::_internal_mutable_randtargetitem() {
  
  if (_impl_.randtargetitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRandTargetItem>(GetArenaForAllocation());
    _impl_.randtargetitem_ = p;
  }
  return _impl_.randtargetitem_;
}
inline ::msg::CSReqRandTargetItem* CSReqBody::mutable_randtargetitem() {
  ::msg::CSReqRandTargetItem* _msg = _internal_mutable_randtargetitem();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RandTargetItem)
  return _msg;
}
inline void CSReqBody::set_allocated_randtargetitem(::msg::CSReqRandTargetItem* randtargetitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.randtargetitem_);
  }
  if (randtargetitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(randtargetitem));
    if (message_arena != submessage_arena) {
      randtargetitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, randtargetitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.randtargetitem_ = randtargetitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RandTargetItem)
}

// .msg.CSReqAddBlacklist AddBlacklist = 93;
inline bool CSReqBody::_internal_has_addblacklist() const {
  return this != internal_default_instance() && _impl_.addblacklist_ != nullptr;
}
inline bool CSReqBody::has_addblacklist() const {
  return _internal_has_addblacklist();
}
inline const ::msg::CSReqAddBlacklist& CSReqBody::_internal_addblacklist() const {
  const ::msg::CSReqAddBlacklist* p = _impl_.addblacklist_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqAddBlacklist&>(
      ::msg::_CSReqAddBlacklist_default_instance_);
}
inline const ::msg::CSReqAddBlacklist& CSReqBody::addblacklist() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.AddBlacklist)
  return _internal_addblacklist();
}
inline void CSReqBody::unsafe_arena_set_allocated_addblacklist(
    ::msg::CSReqAddBlacklist* addblacklist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.addblacklist_);
  }
  _impl_.addblacklist_ = addblacklist;
  if (addblacklist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.AddBlacklist)
}
inline ::msg::CSReqAddBlacklist* CSReqBody::release_addblacklist() {
  
  ::msg::CSReqAddBlacklist* temp = _impl_.addblacklist_;
  _impl_.addblacklist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqAddBlacklist* CSReqBody::unsafe_arena_release_addblacklist() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.AddBlacklist)
  
  ::msg::CSReqAddBlacklist* temp = _impl_.addblacklist_;
  _impl_.addblacklist_ = nullptr;
  return temp;
}
inline ::msg::CSReqAddBlacklist* CSReqBody::_internal_mutable_addblacklist() {
  
  if (_impl_.addblacklist_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqAddBlacklist>(GetArenaForAllocation());
    _impl_.addblacklist_ = p;
  }
  return _impl_.addblacklist_;
}
inline ::msg::CSReqAddBlacklist* CSReqBody::mutable_addblacklist() {
  ::msg::CSReqAddBlacklist* _msg = _internal_mutable_addblacklist();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.AddBlacklist)
  return _msg;
}
inline void CSReqBody::set_allocated_addblacklist(::msg::CSReqAddBlacklist* addblacklist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.addblacklist_);
  }
  if (addblacklist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(addblacklist));
    if (message_arena != submessage_arena) {
      addblacklist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addblacklist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.addblacklist_ = addblacklist;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.AddBlacklist)
}

// .msg.CSReqRemoveBlacklist RemoveBlacklist = 94;
inline bool CSReqBody::_internal_has_removeblacklist() const {
  return this != internal_default_instance() && _impl_.removeblacklist_ != nullptr;
}
inline bool CSReqBody::has_removeblacklist() const {
  return _internal_has_removeblacklist();
}
inline const ::msg::CSReqRemoveBlacklist& CSReqBody::_internal_removeblacklist() const {
  const ::msg::CSReqRemoveBlacklist* p = _impl_.removeblacklist_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRemoveBlacklist&>(
      ::msg::_CSReqRemoveBlacklist_default_instance_);
}
inline const ::msg::CSReqRemoveBlacklist& CSReqBody::removeblacklist() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RemoveBlacklist)
  return _internal_removeblacklist();
}
inline void CSReqBody::unsafe_arena_set_allocated_removeblacklist(
    ::msg::CSReqRemoveBlacklist* removeblacklist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removeblacklist_);
  }
  _impl_.removeblacklist_ = removeblacklist;
  if (removeblacklist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RemoveBlacklist)
}
inline ::msg::CSReqRemoveBlacklist* CSReqBody::release_removeblacklist() {
  
  ::msg::CSReqRemoveBlacklist* temp = _impl_.removeblacklist_;
  _impl_.removeblacklist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRemoveBlacklist* CSReqBody::unsafe_arena_release_removeblacklist() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RemoveBlacklist)
  
  ::msg::CSReqRemoveBlacklist* temp = _impl_.removeblacklist_;
  _impl_.removeblacklist_ = nullptr;
  return temp;
}
inline ::msg::CSReqRemoveBlacklist* CSReqBody::_internal_mutable_removeblacklist() {
  
  if (_impl_.removeblacklist_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRemoveBlacklist>(GetArenaForAllocation());
    _impl_.removeblacklist_ = p;
  }
  return _impl_.removeblacklist_;
}
inline ::msg::CSReqRemoveBlacklist* CSReqBody::mutable_removeblacklist() {
  ::msg::CSReqRemoveBlacklist* _msg = _internal_mutable_removeblacklist();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RemoveBlacklist)
  return _msg;
}
inline void CSReqBody::set_allocated_removeblacklist(::msg::CSReqRemoveBlacklist* removeblacklist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removeblacklist_);
  }
  if (removeblacklist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removeblacklist));
    if (message_arena != submessage_arena) {
      removeblacklist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removeblacklist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.removeblacklist_ = removeblacklist;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RemoveBlacklist)
}

// .msg.CSReqReportPlayerBirth ReportPlayerBirth = 95;
inline bool CSReqBody::_internal_has_reportplayerbirth() const {
  return this != internal_default_instance() && _impl_.reportplayerbirth_ != nullptr;
}
inline bool CSReqBody::has_reportplayerbirth() const {
  return _internal_has_reportplayerbirth();
}
inline const ::msg::CSReqReportPlayerBirth& CSReqBody::_internal_reportplayerbirth() const {
  const ::msg::CSReqReportPlayerBirth* p = _impl_.reportplayerbirth_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqReportPlayerBirth&>(
      ::msg::_CSReqReportPlayerBirth_default_instance_);
}
inline const ::msg::CSReqReportPlayerBirth& CSReqBody::reportplayerbirth() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ReportPlayerBirth)
  return _internal_reportplayerbirth();
}
inline void CSReqBody::unsafe_arena_set_allocated_reportplayerbirth(
    ::msg::CSReqReportPlayerBirth* reportplayerbirth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportplayerbirth_);
  }
  _impl_.reportplayerbirth_ = reportplayerbirth;
  if (reportplayerbirth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ReportPlayerBirth)
}
inline ::msg::CSReqReportPlayerBirth* CSReqBody::release_reportplayerbirth() {
  
  ::msg::CSReqReportPlayerBirth* temp = _impl_.reportplayerbirth_;
  _impl_.reportplayerbirth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqReportPlayerBirth* CSReqBody::unsafe_arena_release_reportplayerbirth() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ReportPlayerBirth)
  
  ::msg::CSReqReportPlayerBirth* temp = _impl_.reportplayerbirth_;
  _impl_.reportplayerbirth_ = nullptr;
  return temp;
}
inline ::msg::CSReqReportPlayerBirth* CSReqBody::_internal_mutable_reportplayerbirth() {
  
  if (_impl_.reportplayerbirth_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqReportPlayerBirth>(GetArenaForAllocation());
    _impl_.reportplayerbirth_ = p;
  }
  return _impl_.reportplayerbirth_;
}
inline ::msg::CSReqReportPlayerBirth* CSReqBody::mutable_reportplayerbirth() {
  ::msg::CSReqReportPlayerBirth* _msg = _internal_mutable_reportplayerbirth();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ReportPlayerBirth)
  return _msg;
}
inline void CSReqBody::set_allocated_reportplayerbirth(::msg::CSReqReportPlayerBirth* reportplayerbirth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportplayerbirth_);
  }
  if (reportplayerbirth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reportplayerbirth));
    if (message_arena != submessage_arena) {
      reportplayerbirth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reportplayerbirth, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reportplayerbirth_ = reportplayerbirth;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ReportPlayerBirth)
}

// .msg.CSReqReportInfoInput ReportInfoInput = 96;
inline bool CSReqBody::_internal_has_reportinfoinput() const {
  return this != internal_default_instance() && _impl_.reportinfoinput_ != nullptr;
}
inline bool CSReqBody::has_reportinfoinput() const {
  return _internal_has_reportinfoinput();
}
inline const ::msg::CSReqReportInfoInput& CSReqBody::_internal_reportinfoinput() const {
  const ::msg::CSReqReportInfoInput* p = _impl_.reportinfoinput_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqReportInfoInput&>(
      ::msg::_CSReqReportInfoInput_default_instance_);
}
inline const ::msg::CSReqReportInfoInput& CSReqBody::reportinfoinput() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ReportInfoInput)
  return _internal_reportinfoinput();
}
inline void CSReqBody::unsafe_arena_set_allocated_reportinfoinput(
    ::msg::CSReqReportInfoInput* reportinfoinput) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportinfoinput_);
  }
  _impl_.reportinfoinput_ = reportinfoinput;
  if (reportinfoinput) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ReportInfoInput)
}
inline ::msg::CSReqReportInfoInput* CSReqBody::release_reportinfoinput() {
  
  ::msg::CSReqReportInfoInput* temp = _impl_.reportinfoinput_;
  _impl_.reportinfoinput_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqReportInfoInput* CSReqBody::unsafe_arena_release_reportinfoinput() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ReportInfoInput)
  
  ::msg::CSReqReportInfoInput* temp = _impl_.reportinfoinput_;
  _impl_.reportinfoinput_ = nullptr;
  return temp;
}
inline ::msg::CSReqReportInfoInput* CSReqBody::_internal_mutable_reportinfoinput() {
  
  if (_impl_.reportinfoinput_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqReportInfoInput>(GetArenaForAllocation());
    _impl_.reportinfoinput_ = p;
  }
  return _impl_.reportinfoinput_;
}
inline ::msg::CSReqReportInfoInput* CSReqBody::mutable_reportinfoinput() {
  ::msg::CSReqReportInfoInput* _msg = _internal_mutable_reportinfoinput();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ReportInfoInput)
  return _msg;
}
inline void CSReqBody::set_allocated_reportinfoinput(::msg::CSReqReportInfoInput* reportinfoinput) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportinfoinput_);
  }
  if (reportinfoinput) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reportinfoinput));
    if (message_arena != submessage_arena) {
      reportinfoinput = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reportinfoinput, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reportinfoinput_ = reportinfoinput;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ReportInfoInput)
}

// .msg.CSReqSendVerificationCode SendVerificationCode = 97;
inline bool CSReqBody::_internal_has_sendverificationcode() const {
  return this != internal_default_instance() && _impl_.sendverificationcode_ != nullptr;
}
inline bool CSReqBody::has_sendverificationcode() const {
  return _internal_has_sendverificationcode();
}
inline const ::msg::CSReqSendVerificationCode& CSReqBody::_internal_sendverificationcode() const {
  const ::msg::CSReqSendVerificationCode* p = _impl_.sendverificationcode_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSendVerificationCode&>(
      ::msg::_CSReqSendVerificationCode_default_instance_);
}
inline const ::msg::CSReqSendVerificationCode& CSReqBody::sendverificationcode() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SendVerificationCode)
  return _internal_sendverificationcode();
}
inline void CSReqBody::unsafe_arena_set_allocated_sendverificationcode(
    ::msg::CSReqSendVerificationCode* sendverificationcode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sendverificationcode_);
  }
  _impl_.sendverificationcode_ = sendverificationcode;
  if (sendverificationcode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SendVerificationCode)
}
inline ::msg::CSReqSendVerificationCode* CSReqBody::release_sendverificationcode() {
  
  ::msg::CSReqSendVerificationCode* temp = _impl_.sendverificationcode_;
  _impl_.sendverificationcode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSendVerificationCode* CSReqBody::unsafe_arena_release_sendverificationcode() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SendVerificationCode)
  
  ::msg::CSReqSendVerificationCode* temp = _impl_.sendverificationcode_;
  _impl_.sendverificationcode_ = nullptr;
  return temp;
}
inline ::msg::CSReqSendVerificationCode* CSReqBody::_internal_mutable_sendverificationcode() {
  
  if (_impl_.sendverificationcode_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSendVerificationCode>(GetArenaForAllocation());
    _impl_.sendverificationcode_ = p;
  }
  return _impl_.sendverificationcode_;
}
inline ::msg::CSReqSendVerificationCode* CSReqBody::mutable_sendverificationcode() {
  ::msg::CSReqSendVerificationCode* _msg = _internal_mutable_sendverificationcode();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SendVerificationCode)
  return _msg;
}
inline void CSReqBody::set_allocated_sendverificationcode(::msg::CSReqSendVerificationCode* sendverificationcode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sendverificationcode_);
  }
  if (sendverificationcode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sendverificationcode));
    if (message_arena != submessage_arena) {
      sendverificationcode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sendverificationcode, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sendverificationcode_ = sendverificationcode;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SendVerificationCode)
}

// .msg.CSReqBindPhoneNumber BindPhoneNumber = 98;
inline bool CSReqBody::_internal_has_bindphonenumber() const {
  return this != internal_default_instance() && _impl_.bindphonenumber_ != nullptr;
}
inline bool CSReqBody::has_bindphonenumber() const {
  return _internal_has_bindphonenumber();
}
inline const ::msg::CSReqBindPhoneNumber& CSReqBody::_internal_bindphonenumber() const {
  const ::msg::CSReqBindPhoneNumber* p = _impl_.bindphonenumber_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqBindPhoneNumber&>(
      ::msg::_CSReqBindPhoneNumber_default_instance_);
}
inline const ::msg::CSReqBindPhoneNumber& CSReqBody::bindphonenumber() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.BindPhoneNumber)
  return _internal_bindphonenumber();
}
inline void CSReqBody::unsafe_arena_set_allocated_bindphonenumber(
    ::msg::CSReqBindPhoneNumber* bindphonenumber) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindphonenumber_);
  }
  _impl_.bindphonenumber_ = bindphonenumber;
  if (bindphonenumber) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.BindPhoneNumber)
}
inline ::msg::CSReqBindPhoneNumber* CSReqBody::release_bindphonenumber() {
  
  ::msg::CSReqBindPhoneNumber* temp = _impl_.bindphonenumber_;
  _impl_.bindphonenumber_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqBindPhoneNumber* CSReqBody::unsafe_arena_release_bindphonenumber() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.BindPhoneNumber)
  
  ::msg::CSReqBindPhoneNumber* temp = _impl_.bindphonenumber_;
  _impl_.bindphonenumber_ = nullptr;
  return temp;
}
inline ::msg::CSReqBindPhoneNumber* CSReqBody::_internal_mutable_bindphonenumber() {
  
  if (_impl_.bindphonenumber_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqBindPhoneNumber>(GetArenaForAllocation());
    _impl_.bindphonenumber_ = p;
  }
  return _impl_.bindphonenumber_;
}
inline ::msg::CSReqBindPhoneNumber* CSReqBody::mutable_bindphonenumber() {
  ::msg::CSReqBindPhoneNumber* _msg = _internal_mutable_bindphonenumber();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.BindPhoneNumber)
  return _msg;
}
inline void CSReqBody::set_allocated_bindphonenumber(::msg::CSReqBindPhoneNumber* bindphonenumber) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindphonenumber_);
  }
  if (bindphonenumber) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bindphonenumber));
    if (message_arena != submessage_arena) {
      bindphonenumber = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bindphonenumber, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bindphonenumber_ = bindphonenumber;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.BindPhoneNumber)
}

// .msg.CSReqWorldInvite WorldInvite = 99;
inline bool CSReqBody::_internal_has_worldinvite() const {
  return this != internal_default_instance() && _impl_.worldinvite_ != nullptr;
}
inline bool CSReqBody::has_worldinvite() const {
  return _internal_has_worldinvite();
}
inline const ::msg::CSReqWorldInvite& CSReqBody::_internal_worldinvite() const {
  const ::msg::CSReqWorldInvite* p = _impl_.worldinvite_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqWorldInvite&>(
      ::msg::_CSReqWorldInvite_default_instance_);
}
inline const ::msg::CSReqWorldInvite& CSReqBody::worldinvite() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.WorldInvite)
  return _internal_worldinvite();
}
inline void CSReqBody::unsafe_arena_set_allocated_worldinvite(
    ::msg::CSReqWorldInvite* worldinvite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.worldinvite_);
  }
  _impl_.worldinvite_ = worldinvite;
  if (worldinvite) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.WorldInvite)
}
inline ::msg::CSReqWorldInvite* CSReqBody::release_worldinvite() {
  
  ::msg::CSReqWorldInvite* temp = _impl_.worldinvite_;
  _impl_.worldinvite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqWorldInvite* CSReqBody::unsafe_arena_release_worldinvite() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.WorldInvite)
  
  ::msg::CSReqWorldInvite* temp = _impl_.worldinvite_;
  _impl_.worldinvite_ = nullptr;
  return temp;
}
inline ::msg::CSReqWorldInvite* CSReqBody::_internal_mutable_worldinvite() {
  
  if (_impl_.worldinvite_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqWorldInvite>(GetArenaForAllocation());
    _impl_.worldinvite_ = p;
  }
  return _impl_.worldinvite_;
}
inline ::msg::CSReqWorldInvite* CSReqBody::mutable_worldinvite() {
  ::msg::CSReqWorldInvite* _msg = _internal_mutable_worldinvite();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.WorldInvite)
  return _msg;
}
inline void CSReqBody::set_allocated_worldinvite(::msg::CSReqWorldInvite* worldinvite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.worldinvite_);
  }
  if (worldinvite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(worldinvite));
    if (message_arena != submessage_arena) {
      worldinvite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, worldinvite, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.worldinvite_ = worldinvite;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.WorldInvite)
}

// .msg.CSReqRemoveExpireItem RemoveExpireItem = 100;
inline bool CSReqBody::_internal_has_removeexpireitem() const {
  return this != internal_default_instance() && _impl_.removeexpireitem_ != nullptr;
}
inline bool CSReqBody::has_removeexpireitem() const {
  return _internal_has_removeexpireitem();
}
inline const ::msg::CSReqRemoveExpireItem& CSReqBody::_internal_removeexpireitem() const {
  const ::msg::CSReqRemoveExpireItem* p = _impl_.removeexpireitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRemoveExpireItem&>(
      ::msg::_CSReqRemoveExpireItem_default_instance_);
}
inline const ::msg::CSReqRemoveExpireItem& CSReqBody::removeexpireitem() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RemoveExpireItem)
  return _internal_removeexpireitem();
}
inline void CSReqBody::unsafe_arena_set_allocated_removeexpireitem(
    ::msg::CSReqRemoveExpireItem* removeexpireitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removeexpireitem_);
  }
  _impl_.removeexpireitem_ = removeexpireitem;
  if (removeexpireitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RemoveExpireItem)
}
inline ::msg::CSReqRemoveExpireItem* CSReqBody::release_removeexpireitem() {
  
  ::msg::CSReqRemoveExpireItem* temp = _impl_.removeexpireitem_;
  _impl_.removeexpireitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRemoveExpireItem* CSReqBody::unsafe_arena_release_removeexpireitem() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RemoveExpireItem)
  
  ::msg::CSReqRemoveExpireItem* temp = _impl_.removeexpireitem_;
  _impl_.removeexpireitem_ = nullptr;
  return temp;
}
inline ::msg::CSReqRemoveExpireItem* CSReqBody::_internal_mutable_removeexpireitem() {
  
  if (_impl_.removeexpireitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRemoveExpireItem>(GetArenaForAllocation());
    _impl_.removeexpireitem_ = p;
  }
  return _impl_.removeexpireitem_;
}
inline ::msg::CSReqRemoveExpireItem* CSReqBody::mutable_removeexpireitem() {
  ::msg::CSReqRemoveExpireItem* _msg = _internal_mutable_removeexpireitem();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RemoveExpireItem)
  return _msg;
}
inline void CSReqBody::set_allocated_removeexpireitem(::msg::CSReqRemoveExpireItem* removeexpireitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removeexpireitem_);
  }
  if (removeexpireitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removeexpireitem));
    if (message_arena != submessage_arena) {
      removeexpireitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removeexpireitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.removeexpireitem_ = removeexpireitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RemoveExpireItem)
}

// .msg.CSReqGetMallGoods GetMallGoods = 101;
inline bool CSReqBody::_internal_has_getmallgoods() const {
  return this != internal_default_instance() && _impl_.getmallgoods_ != nullptr;
}
inline bool CSReqBody::has_getmallgoods() const {
  return _internal_has_getmallgoods();
}
inline const ::msg::CSReqGetMallGoods& CSReqBody::_internal_getmallgoods() const {
  const ::msg::CSReqGetMallGoods* p = _impl_.getmallgoods_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetMallGoods&>(
      ::msg::_CSReqGetMallGoods_default_instance_);
}
inline const ::msg::CSReqGetMallGoods& CSReqBody::getmallgoods() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetMallGoods)
  return _internal_getmallgoods();
}
inline void CSReqBody::unsafe_arena_set_allocated_getmallgoods(
    ::msg::CSReqGetMallGoods* getmallgoods) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmallgoods_);
  }
  _impl_.getmallgoods_ = getmallgoods;
  if (getmallgoods) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetMallGoods)
}
inline ::msg::CSReqGetMallGoods* CSReqBody::release_getmallgoods() {
  
  ::msg::CSReqGetMallGoods* temp = _impl_.getmallgoods_;
  _impl_.getmallgoods_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetMallGoods* CSReqBody::unsafe_arena_release_getmallgoods() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetMallGoods)
  
  ::msg::CSReqGetMallGoods* temp = _impl_.getmallgoods_;
  _impl_.getmallgoods_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetMallGoods* CSReqBody::_internal_mutable_getmallgoods() {
  
  if (_impl_.getmallgoods_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetMallGoods>(GetArenaForAllocation());
    _impl_.getmallgoods_ = p;
  }
  return _impl_.getmallgoods_;
}
inline ::msg::CSReqGetMallGoods* CSReqBody::mutable_getmallgoods() {
  ::msg::CSReqGetMallGoods* _msg = _internal_mutable_getmallgoods();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetMallGoods)
  return _msg;
}
inline void CSReqBody::set_allocated_getmallgoods(::msg::CSReqGetMallGoods* getmallgoods) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmallgoods_);
  }
  if (getmallgoods) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getmallgoods));
    if (message_arena != submessage_arena) {
      getmallgoods = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getmallgoods, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getmallgoods_ = getmallgoods;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetMallGoods)
}

// .msg.CSReqBuyMallGoods BuyMallGoods = 102;
inline bool CSReqBody::_internal_has_buymallgoods() const {
  return this != internal_default_instance() && _impl_.buymallgoods_ != nullptr;
}
inline bool CSReqBody::has_buymallgoods() const {
  return _internal_has_buymallgoods();
}
inline const ::msg::CSReqBuyMallGoods& CSReqBody::_internal_buymallgoods() const {
  const ::msg::CSReqBuyMallGoods* p = _impl_.buymallgoods_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqBuyMallGoods&>(
      ::msg::_CSReqBuyMallGoods_default_instance_);
}
inline const ::msg::CSReqBuyMallGoods& CSReqBody::buymallgoods() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.BuyMallGoods)
  return _internal_buymallgoods();
}
inline void CSReqBody::unsafe_arena_set_allocated_buymallgoods(
    ::msg::CSReqBuyMallGoods* buymallgoods) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buymallgoods_);
  }
  _impl_.buymallgoods_ = buymallgoods;
  if (buymallgoods) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.BuyMallGoods)
}
inline ::msg::CSReqBuyMallGoods* CSReqBody::release_buymallgoods() {
  
  ::msg::CSReqBuyMallGoods* temp = _impl_.buymallgoods_;
  _impl_.buymallgoods_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqBuyMallGoods* CSReqBody::unsafe_arena_release_buymallgoods() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.BuyMallGoods)
  
  ::msg::CSReqBuyMallGoods* temp = _impl_.buymallgoods_;
  _impl_.buymallgoods_ = nullptr;
  return temp;
}
inline ::msg::CSReqBuyMallGoods* CSReqBody::_internal_mutable_buymallgoods() {
  
  if (_impl_.buymallgoods_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqBuyMallGoods>(GetArenaForAllocation());
    _impl_.buymallgoods_ = p;
  }
  return _impl_.buymallgoods_;
}
inline ::msg::CSReqBuyMallGoods* CSReqBody::mutable_buymallgoods() {
  ::msg::CSReqBuyMallGoods* _msg = _internal_mutable_buymallgoods();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.BuyMallGoods)
  return _msg;
}
inline void CSReqBody::set_allocated_buymallgoods(::msg::CSReqBuyMallGoods* buymallgoods) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buymallgoods_);
  }
  if (buymallgoods) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buymallgoods));
    if (message_arena != submessage_arena) {
      buymallgoods = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buymallgoods, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buymallgoods_ = buymallgoods;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.BuyMallGoods)
}

// .msg.CSReqBindSharingCode BindSharingCode = 103;
inline bool CSReqBody::_internal_has_bindsharingcode() const {
  return this != internal_default_instance() && _impl_.bindsharingcode_ != nullptr;
}
inline bool CSReqBody::has_bindsharingcode() const {
  return _internal_has_bindsharingcode();
}
inline const ::msg::CSReqBindSharingCode& CSReqBody::_internal_bindsharingcode() const {
  const ::msg::CSReqBindSharingCode* p = _impl_.bindsharingcode_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqBindSharingCode&>(
      ::msg::_CSReqBindSharingCode_default_instance_);
}
inline const ::msg::CSReqBindSharingCode& CSReqBody::bindsharingcode() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.BindSharingCode)
  return _internal_bindsharingcode();
}
inline void CSReqBody::unsafe_arena_set_allocated_bindsharingcode(
    ::msg::CSReqBindSharingCode* bindsharingcode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindsharingcode_);
  }
  _impl_.bindsharingcode_ = bindsharingcode;
  if (bindsharingcode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.BindSharingCode)
}
inline ::msg::CSReqBindSharingCode* CSReqBody::release_bindsharingcode() {
  
  ::msg::CSReqBindSharingCode* temp = _impl_.bindsharingcode_;
  _impl_.bindsharingcode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqBindSharingCode* CSReqBody::unsafe_arena_release_bindsharingcode() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.BindSharingCode)
  
  ::msg::CSReqBindSharingCode* temp = _impl_.bindsharingcode_;
  _impl_.bindsharingcode_ = nullptr;
  return temp;
}
inline ::msg::CSReqBindSharingCode* CSReqBody::_internal_mutable_bindsharingcode() {
  
  if (_impl_.bindsharingcode_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqBindSharingCode>(GetArenaForAllocation());
    _impl_.bindsharingcode_ = p;
  }
  return _impl_.bindsharingcode_;
}
inline ::msg::CSReqBindSharingCode* CSReqBody::mutable_bindsharingcode() {
  ::msg::CSReqBindSharingCode* _msg = _internal_mutable_bindsharingcode();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.BindSharingCode)
  return _msg;
}
inline void CSReqBody::set_allocated_bindsharingcode(::msg::CSReqBindSharingCode* bindsharingcode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindsharingcode_);
  }
  if (bindsharingcode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bindsharingcode));
    if (message_arena != submessage_arena) {
      bindsharingcode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bindsharingcode, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bindsharingcode_ = bindsharingcode;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.BindSharingCode)
}

// .msg.CSReqWXBlessBag WXBlessBag = 104;
inline bool CSReqBody::_internal_has_wxblessbag() const {
  return this != internal_default_instance() && _impl_.wxblessbag_ != nullptr;
}
inline bool CSReqBody::has_wxblessbag() const {
  return _internal_has_wxblessbag();
}
inline const ::msg::CSReqWXBlessBag& CSReqBody::_internal_wxblessbag() const {
  const ::msg::CSReqWXBlessBag* p = _impl_.wxblessbag_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqWXBlessBag&>(
      ::msg::_CSReqWXBlessBag_default_instance_);
}
inline const ::msg::CSReqWXBlessBag& CSReqBody::wxblessbag() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.WXBlessBag)
  return _internal_wxblessbag();
}
inline void CSReqBody::unsafe_arena_set_allocated_wxblessbag(
    ::msg::CSReqWXBlessBag* wxblessbag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxblessbag_);
  }
  _impl_.wxblessbag_ = wxblessbag;
  if (wxblessbag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.WXBlessBag)
}
inline ::msg::CSReqWXBlessBag* CSReqBody::release_wxblessbag() {
  
  ::msg::CSReqWXBlessBag* temp = _impl_.wxblessbag_;
  _impl_.wxblessbag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqWXBlessBag* CSReqBody::unsafe_arena_release_wxblessbag() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.WXBlessBag)
  
  ::msg::CSReqWXBlessBag* temp = _impl_.wxblessbag_;
  _impl_.wxblessbag_ = nullptr;
  return temp;
}
inline ::msg::CSReqWXBlessBag* CSReqBody::_internal_mutable_wxblessbag() {
  
  if (_impl_.wxblessbag_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqWXBlessBag>(GetArenaForAllocation());
    _impl_.wxblessbag_ = p;
  }
  return _impl_.wxblessbag_;
}
inline ::msg::CSReqWXBlessBag* CSReqBody::mutable_wxblessbag() {
  ::msg::CSReqWXBlessBag* _msg = _internal_mutable_wxblessbag();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.WXBlessBag)
  return _msg;
}
inline void CSReqBody::set_allocated_wxblessbag(::msg::CSReqWXBlessBag* wxblessbag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxblessbag_);
  }
  if (wxblessbag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wxblessbag));
    if (message_arena != submessage_arena) {
      wxblessbag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wxblessbag, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wxblessbag_ = wxblessbag;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.WXBlessBag)
}

// .msg.CSReqUpdateFriendsInGame UpdateFriendsInGame = 105;
inline bool CSReqBody::_internal_has_updatefriendsingame() const {
  return this != internal_default_instance() && _impl_.updatefriendsingame_ != nullptr;
}
inline bool CSReqBody::has_updatefriendsingame() const {
  return _internal_has_updatefriendsingame();
}
inline const ::msg::CSReqUpdateFriendsInGame& CSReqBody::_internal_updatefriendsingame() const {
  const ::msg::CSReqUpdateFriendsInGame* p = _impl_.updatefriendsingame_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUpdateFriendsInGame&>(
      ::msg::_CSReqUpdateFriendsInGame_default_instance_);
}
inline const ::msg::CSReqUpdateFriendsInGame& CSReqBody::updatefriendsingame() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UpdateFriendsInGame)
  return _internal_updatefriendsingame();
}
inline void CSReqBody::unsafe_arena_set_allocated_updatefriendsingame(
    ::msg::CSReqUpdateFriendsInGame* updatefriendsingame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatefriendsingame_);
  }
  _impl_.updatefriendsingame_ = updatefriendsingame;
  if (updatefriendsingame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UpdateFriendsInGame)
}
inline ::msg::CSReqUpdateFriendsInGame* CSReqBody::release_updatefriendsingame() {
  
  ::msg::CSReqUpdateFriendsInGame* temp = _impl_.updatefriendsingame_;
  _impl_.updatefriendsingame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUpdateFriendsInGame* CSReqBody::unsafe_arena_release_updatefriendsingame() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UpdateFriendsInGame)
  
  ::msg::CSReqUpdateFriendsInGame* temp = _impl_.updatefriendsingame_;
  _impl_.updatefriendsingame_ = nullptr;
  return temp;
}
inline ::msg::CSReqUpdateFriendsInGame* CSReqBody::_internal_mutable_updatefriendsingame() {
  
  if (_impl_.updatefriendsingame_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUpdateFriendsInGame>(GetArenaForAllocation());
    _impl_.updatefriendsingame_ = p;
  }
  return _impl_.updatefriendsingame_;
}
inline ::msg::CSReqUpdateFriendsInGame* CSReqBody::mutable_updatefriendsingame() {
  ::msg::CSReqUpdateFriendsInGame* _msg = _internal_mutable_updatefriendsingame();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UpdateFriendsInGame)
  return _msg;
}
inline void CSReqBody::set_allocated_updatefriendsingame(::msg::CSReqUpdateFriendsInGame* updatefriendsingame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatefriendsingame_);
  }
  if (updatefriendsingame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatefriendsingame));
    if (message_arena != submessage_arena) {
      updatefriendsingame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatefriendsingame, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updatefriendsingame_ = updatefriendsingame;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UpdateFriendsInGame)
}

// .msg.CSReqShareReward ShareReward = 106;
inline bool CSReqBody::_internal_has_sharereward() const {
  return this != internal_default_instance() && _impl_.sharereward_ != nullptr;
}
inline bool CSReqBody::has_sharereward() const {
  return _internal_has_sharereward();
}
inline const ::msg::CSReqShareReward& CSReqBody::_internal_sharereward() const {
  const ::msg::CSReqShareReward* p = _impl_.sharereward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqShareReward&>(
      ::msg::_CSReqShareReward_default_instance_);
}
inline const ::msg::CSReqShareReward& CSReqBody::sharereward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ShareReward)
  return _internal_sharereward();
}
inline void CSReqBody::unsafe_arena_set_allocated_sharereward(
    ::msg::CSReqShareReward* sharereward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sharereward_);
  }
  _impl_.sharereward_ = sharereward;
  if (sharereward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ShareReward)
}
inline ::msg::CSReqShareReward* CSReqBody::release_sharereward() {
  
  ::msg::CSReqShareReward* temp = _impl_.sharereward_;
  _impl_.sharereward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqShareReward* CSReqBody::unsafe_arena_release_sharereward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ShareReward)
  
  ::msg::CSReqShareReward* temp = _impl_.sharereward_;
  _impl_.sharereward_ = nullptr;
  return temp;
}
inline ::msg::CSReqShareReward* CSReqBody::_internal_mutable_sharereward() {
  
  if (_impl_.sharereward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqShareReward>(GetArenaForAllocation());
    _impl_.sharereward_ = p;
  }
  return _impl_.sharereward_;
}
inline ::msg::CSReqShareReward* CSReqBody::mutable_sharereward() {
  ::msg::CSReqShareReward* _msg = _internal_mutable_sharereward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ShareReward)
  return _msg;
}
inline void CSReqBody::set_allocated_sharereward(::msg::CSReqShareReward* sharereward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sharereward_);
  }
  if (sharereward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sharereward));
    if (message_arena != submessage_arena) {
      sharereward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sharereward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sharereward_ = sharereward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ShareReward)
}

// .msg.CSReqAllFightInfo AllFightInfo = 107;
inline bool CSReqBody::_internal_has_allfightinfo() const {
  return this != internal_default_instance() && _impl_.allfightinfo_ != nullptr;
}
inline bool CSReqBody::has_allfightinfo() const {
  return _internal_has_allfightinfo();
}
inline const ::msg::CSReqAllFightInfo& CSReqBody::_internal_allfightinfo() const {
  const ::msg::CSReqAllFightInfo* p = _impl_.allfightinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqAllFightInfo&>(
      ::msg::_CSReqAllFightInfo_default_instance_);
}
inline const ::msg::CSReqAllFightInfo& CSReqBody::allfightinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.AllFightInfo)
  return _internal_allfightinfo();
}
inline void CSReqBody::unsafe_arena_set_allocated_allfightinfo(
    ::msg::CSReqAllFightInfo* allfightinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.allfightinfo_);
  }
  _impl_.allfightinfo_ = allfightinfo;
  if (allfightinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.AllFightInfo)
}
inline ::msg::CSReqAllFightInfo* CSReqBody::release_allfightinfo() {
  
  ::msg::CSReqAllFightInfo* temp = _impl_.allfightinfo_;
  _impl_.allfightinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqAllFightInfo* CSReqBody::unsafe_arena_release_allfightinfo() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.AllFightInfo)
  
  ::msg::CSReqAllFightInfo* temp = _impl_.allfightinfo_;
  _impl_.allfightinfo_ = nullptr;
  return temp;
}
inline ::msg::CSReqAllFightInfo* CSReqBody::_internal_mutable_allfightinfo() {
  
  if (_impl_.allfightinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqAllFightInfo>(GetArenaForAllocation());
    _impl_.allfightinfo_ = p;
  }
  return _impl_.allfightinfo_;
}
inline ::msg::CSReqAllFightInfo* CSReqBody::mutable_allfightinfo() {
  ::msg::CSReqAllFightInfo* _msg = _internal_mutable_allfightinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.AllFightInfo)
  return _msg;
}
inline void CSReqBody::set_allocated_allfightinfo(::msg::CSReqAllFightInfo* allfightinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.allfightinfo_);
  }
  if (allfightinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(allfightinfo));
    if (message_arena != submessage_arena) {
      allfightinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allfightinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.allfightinfo_ = allfightinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.AllFightInfo)
}

// .msg.CSReqGetOldPlayer GetOldPlayer = 108;
inline bool CSReqBody::_internal_has_getoldplayer() const {
  return this != internal_default_instance() && _impl_.getoldplayer_ != nullptr;
}
inline bool CSReqBody::has_getoldplayer() const {
  return _internal_has_getoldplayer();
}
inline const ::msg::CSReqGetOldPlayer& CSReqBody::_internal_getoldplayer() const {
  const ::msg::CSReqGetOldPlayer* p = _impl_.getoldplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetOldPlayer&>(
      ::msg::_CSReqGetOldPlayer_default_instance_);
}
inline const ::msg::CSReqGetOldPlayer& CSReqBody::getoldplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetOldPlayer)
  return _internal_getoldplayer();
}
inline void CSReqBody::unsafe_arena_set_allocated_getoldplayer(
    ::msg::CSReqGetOldPlayer* getoldplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getoldplayer_);
  }
  _impl_.getoldplayer_ = getoldplayer;
  if (getoldplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetOldPlayer)
}
inline ::msg::CSReqGetOldPlayer* CSReqBody::release_getoldplayer() {
  
  ::msg::CSReqGetOldPlayer* temp = _impl_.getoldplayer_;
  _impl_.getoldplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetOldPlayer* CSReqBody::unsafe_arena_release_getoldplayer() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetOldPlayer)
  
  ::msg::CSReqGetOldPlayer* temp = _impl_.getoldplayer_;
  _impl_.getoldplayer_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetOldPlayer* CSReqBody::_internal_mutable_getoldplayer() {
  
  if (_impl_.getoldplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetOldPlayer>(GetArenaForAllocation());
    _impl_.getoldplayer_ = p;
  }
  return _impl_.getoldplayer_;
}
inline ::msg::CSReqGetOldPlayer* CSReqBody::mutable_getoldplayer() {
  ::msg::CSReqGetOldPlayer* _msg = _internal_mutable_getoldplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetOldPlayer)
  return _msg;
}
inline void CSReqBody::set_allocated_getoldplayer(::msg::CSReqGetOldPlayer* getoldplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getoldplayer_);
  }
  if (getoldplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getoldplayer));
    if (message_arena != submessage_arena) {
      getoldplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getoldplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getoldplayer_ = getoldplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetOldPlayer)
}

// .msg.CSReqBindOldPlayer BindOldPlayer = 109;
inline bool CSReqBody::_internal_has_bindoldplayer() const {
  return this != internal_default_instance() && _impl_.bindoldplayer_ != nullptr;
}
inline bool CSReqBody::has_bindoldplayer() const {
  return _internal_has_bindoldplayer();
}
inline const ::msg::CSReqBindOldPlayer& CSReqBody::_internal_bindoldplayer() const {
  const ::msg::CSReqBindOldPlayer* p = _impl_.bindoldplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqBindOldPlayer&>(
      ::msg::_CSReqBindOldPlayer_default_instance_);
}
inline const ::msg::CSReqBindOldPlayer& CSReqBody::bindoldplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.BindOldPlayer)
  return _internal_bindoldplayer();
}
inline void CSReqBody::unsafe_arena_set_allocated_bindoldplayer(
    ::msg::CSReqBindOldPlayer* bindoldplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindoldplayer_);
  }
  _impl_.bindoldplayer_ = bindoldplayer;
  if (bindoldplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.BindOldPlayer)
}
inline ::msg::CSReqBindOldPlayer* CSReqBody::release_bindoldplayer() {
  
  ::msg::CSReqBindOldPlayer* temp = _impl_.bindoldplayer_;
  _impl_.bindoldplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqBindOldPlayer* CSReqBody::unsafe_arena_release_bindoldplayer() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.BindOldPlayer)
  
  ::msg::CSReqBindOldPlayer* temp = _impl_.bindoldplayer_;
  _impl_.bindoldplayer_ = nullptr;
  return temp;
}
inline ::msg::CSReqBindOldPlayer* CSReqBody::_internal_mutable_bindoldplayer() {
  
  if (_impl_.bindoldplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqBindOldPlayer>(GetArenaForAllocation());
    _impl_.bindoldplayer_ = p;
  }
  return _impl_.bindoldplayer_;
}
inline ::msg::CSReqBindOldPlayer* CSReqBody::mutable_bindoldplayer() {
  ::msg::CSReqBindOldPlayer* _msg = _internal_mutable_bindoldplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.BindOldPlayer)
  return _msg;
}
inline void CSReqBody::set_allocated_bindoldplayer(::msg::CSReqBindOldPlayer* bindoldplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindoldplayer_);
  }
  if (bindoldplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bindoldplayer));
    if (message_arena != submessage_arena) {
      bindoldplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bindoldplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bindoldplayer_ = bindoldplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.BindOldPlayer)
}

// .msg.CSReqSendVerificationCodeWithCheckRedis SendVerificationCodeWithCheckRedis = 110;
inline bool CSReqBody::_internal_has_sendverificationcodewithcheckredis() const {
  return this != internal_default_instance() && _impl_.sendverificationcodewithcheckredis_ != nullptr;
}
inline bool CSReqBody::has_sendverificationcodewithcheckredis() const {
  return _internal_has_sendverificationcodewithcheckredis();
}
inline const ::msg::CSReqSendVerificationCodeWithCheckRedis& CSReqBody::_internal_sendverificationcodewithcheckredis() const {
  const ::msg::CSReqSendVerificationCodeWithCheckRedis* p = _impl_.sendverificationcodewithcheckredis_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSendVerificationCodeWithCheckRedis&>(
      ::msg::_CSReqSendVerificationCodeWithCheckRedis_default_instance_);
}
inline const ::msg::CSReqSendVerificationCodeWithCheckRedis& CSReqBody::sendverificationcodewithcheckredis() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SendVerificationCodeWithCheckRedis)
  return _internal_sendverificationcodewithcheckredis();
}
inline void CSReqBody::unsafe_arena_set_allocated_sendverificationcodewithcheckredis(
    ::msg::CSReqSendVerificationCodeWithCheckRedis* sendverificationcodewithcheckredis) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sendverificationcodewithcheckredis_);
  }
  _impl_.sendverificationcodewithcheckredis_ = sendverificationcodewithcheckredis;
  if (sendverificationcodewithcheckredis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SendVerificationCodeWithCheckRedis)
}
inline ::msg::CSReqSendVerificationCodeWithCheckRedis* CSReqBody::release_sendverificationcodewithcheckredis() {
  
  ::msg::CSReqSendVerificationCodeWithCheckRedis* temp = _impl_.sendverificationcodewithcheckredis_;
  _impl_.sendverificationcodewithcheckredis_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSendVerificationCodeWithCheckRedis* CSReqBody::unsafe_arena_release_sendverificationcodewithcheckredis() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SendVerificationCodeWithCheckRedis)
  
  ::msg::CSReqSendVerificationCodeWithCheckRedis* temp = _impl_.sendverificationcodewithcheckredis_;
  _impl_.sendverificationcodewithcheckredis_ = nullptr;
  return temp;
}
inline ::msg::CSReqSendVerificationCodeWithCheckRedis* CSReqBody::_internal_mutable_sendverificationcodewithcheckredis() {
  
  if (_impl_.sendverificationcodewithcheckredis_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSendVerificationCodeWithCheckRedis>(GetArenaForAllocation());
    _impl_.sendverificationcodewithcheckredis_ = p;
  }
  return _impl_.sendverificationcodewithcheckredis_;
}
inline ::msg::CSReqSendVerificationCodeWithCheckRedis* CSReqBody::mutable_sendverificationcodewithcheckredis() {
  ::msg::CSReqSendVerificationCodeWithCheckRedis* _msg = _internal_mutable_sendverificationcodewithcheckredis();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SendVerificationCodeWithCheckRedis)
  return _msg;
}
inline void CSReqBody::set_allocated_sendverificationcodewithcheckredis(::msg::CSReqSendVerificationCodeWithCheckRedis* sendverificationcodewithcheckredis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sendverificationcodewithcheckredis_);
  }
  if (sendverificationcodewithcheckredis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sendverificationcodewithcheckredis));
    if (message_arena != submessage_arena) {
      sendverificationcodewithcheckredis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sendverificationcodewithcheckredis, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sendverificationcodewithcheckredis_ = sendverificationcodewithcheckredis;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SendVerificationCodeWithCheckRedis)
}

// .msg.CSReqReportSetting ReportSetting = 111;
inline bool CSReqBody::_internal_has_reportsetting() const {
  return this != internal_default_instance() && _impl_.reportsetting_ != nullptr;
}
inline bool CSReqBody::has_reportsetting() const {
  return _internal_has_reportsetting();
}
inline const ::msg::CSReqReportSetting& CSReqBody::_internal_reportsetting() const {
  const ::msg::CSReqReportSetting* p = _impl_.reportsetting_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqReportSetting&>(
      ::msg::_CSReqReportSetting_default_instance_);
}
inline const ::msg::CSReqReportSetting& CSReqBody::reportsetting() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ReportSetting)
  return _internal_reportsetting();
}
inline void CSReqBody::unsafe_arena_set_allocated_reportsetting(
    ::msg::CSReqReportSetting* reportsetting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportsetting_);
  }
  _impl_.reportsetting_ = reportsetting;
  if (reportsetting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ReportSetting)
}
inline ::msg::CSReqReportSetting* CSReqBody::release_reportsetting() {
  
  ::msg::CSReqReportSetting* temp = _impl_.reportsetting_;
  _impl_.reportsetting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqReportSetting* CSReqBody::unsafe_arena_release_reportsetting() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ReportSetting)
  
  ::msg::CSReqReportSetting* temp = _impl_.reportsetting_;
  _impl_.reportsetting_ = nullptr;
  return temp;
}
inline ::msg::CSReqReportSetting* CSReqBody::_internal_mutable_reportsetting() {
  
  if (_impl_.reportsetting_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqReportSetting>(GetArenaForAllocation());
    _impl_.reportsetting_ = p;
  }
  return _impl_.reportsetting_;
}
inline ::msg::CSReqReportSetting* CSReqBody::mutable_reportsetting() {
  ::msg::CSReqReportSetting* _msg = _internal_mutable_reportsetting();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ReportSetting)
  return _msg;
}
inline void CSReqBody::set_allocated_reportsetting(::msg::CSReqReportSetting* reportsetting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportsetting_);
  }
  if (reportsetting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reportsetting));
    if (message_arena != submessage_arena) {
      reportsetting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reportsetting, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reportsetting_ = reportsetting;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ReportSetting)
}

// .msg.CSReqAntiData AntiData = 112;
inline bool CSReqBody::_internal_has_antidata() const {
  return this != internal_default_instance() && _impl_.antidata_ != nullptr;
}
inline bool CSReqBody::has_antidata() const {
  return _internal_has_antidata();
}
inline const ::msg::CSReqAntiData& CSReqBody::_internal_antidata() const {
  const ::msg::CSReqAntiData* p = _impl_.antidata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqAntiData&>(
      ::msg::_CSReqAntiData_default_instance_);
}
inline const ::msg::CSReqAntiData& CSReqBody::antidata() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.AntiData)
  return _internal_antidata();
}
inline void CSReqBody::unsafe_arena_set_allocated_antidata(
    ::msg::CSReqAntiData* antidata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.antidata_);
  }
  _impl_.antidata_ = antidata;
  if (antidata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.AntiData)
}
inline ::msg::CSReqAntiData* CSReqBody::release_antidata() {
  
  ::msg::CSReqAntiData* temp = _impl_.antidata_;
  _impl_.antidata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqAntiData* CSReqBody::unsafe_arena_release_antidata() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.AntiData)
  
  ::msg::CSReqAntiData* temp = _impl_.antidata_;
  _impl_.antidata_ = nullptr;
  return temp;
}
inline ::msg::CSReqAntiData* CSReqBody::_internal_mutable_antidata() {
  
  if (_impl_.antidata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqAntiData>(GetArenaForAllocation());
    _impl_.antidata_ = p;
  }
  return _impl_.antidata_;
}
inline ::msg::CSReqAntiData* CSReqBody::mutable_antidata() {
  ::msg::CSReqAntiData* _msg = _internal_mutable_antidata();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.AntiData)
  return _msg;
}
inline void CSReqBody::set_allocated_antidata(::msg::CSReqAntiData* antidata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.antidata_);
  }
  if (antidata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(antidata));
    if (message_arena != submessage_arena) {
      antidata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, antidata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.antidata_ = antidata;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.AntiData)
}

// .msg.CSReqTlogData TlogData = 113;
inline bool CSReqBody::_internal_has_tlogdata() const {
  return this != internal_default_instance() && _impl_.tlogdata_ != nullptr;
}
inline bool CSReqBody::has_tlogdata() const {
  return _internal_has_tlogdata();
}
inline const ::msg::CSReqTlogData& CSReqBody::_internal_tlogdata() const {
  const ::msg::CSReqTlogData* p = _impl_.tlogdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqTlogData&>(
      ::msg::_CSReqTlogData_default_instance_);
}
inline const ::msg::CSReqTlogData& CSReqBody::tlogdata() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.TlogData)
  return _internal_tlogdata();
}
inline void CSReqBody::unsafe_arena_set_allocated_tlogdata(
    ::msg::CSReqTlogData* tlogdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tlogdata_);
  }
  _impl_.tlogdata_ = tlogdata;
  if (tlogdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.TlogData)
}
inline ::msg::CSReqTlogData* CSReqBody::release_tlogdata() {
  
  ::msg::CSReqTlogData* temp = _impl_.tlogdata_;
  _impl_.tlogdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqTlogData* CSReqBody::unsafe_arena_release_tlogdata() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.TlogData)
  
  ::msg::CSReqTlogData* temp = _impl_.tlogdata_;
  _impl_.tlogdata_ = nullptr;
  return temp;
}
inline ::msg::CSReqTlogData* CSReqBody::_internal_mutable_tlogdata() {
  
  if (_impl_.tlogdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqTlogData>(GetArenaForAllocation());
    _impl_.tlogdata_ = p;
  }
  return _impl_.tlogdata_;
}
inline ::msg::CSReqTlogData* CSReqBody::mutable_tlogdata() {
  ::msg::CSReqTlogData* _msg = _internal_mutable_tlogdata();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.TlogData)
  return _msg;
}
inline void CSReqBody::set_allocated_tlogdata(::msg::CSReqTlogData* tlogdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tlogdata_);
  }
  if (tlogdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tlogdata));
    if (message_arena != submessage_arena) {
      tlogdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tlogdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tlogdata_ = tlogdata;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.TlogData)
}

// .msg.CSReqDaySign DaySign = 114;
inline bool CSReqBody::_internal_has_daysign() const {
  return this != internal_default_instance() && _impl_.daysign_ != nullptr;
}
inline bool CSReqBody::has_daysign() const {
  return _internal_has_daysign();
}
inline const ::msg::CSReqDaySign& CSReqBody::_internal_daysign() const {
  const ::msg::CSReqDaySign* p = _impl_.daysign_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqDaySign&>(
      ::msg::_CSReqDaySign_default_instance_);
}
inline const ::msg::CSReqDaySign& CSReqBody::daysign() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.DaySign)
  return _internal_daysign();
}
inline void CSReqBody::unsafe_arena_set_allocated_daysign(
    ::msg::CSReqDaySign* daysign) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.daysign_);
  }
  _impl_.daysign_ = daysign;
  if (daysign) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.DaySign)
}
inline ::msg::CSReqDaySign* CSReqBody::release_daysign() {
  
  ::msg::CSReqDaySign* temp = _impl_.daysign_;
  _impl_.daysign_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqDaySign* CSReqBody::unsafe_arena_release_daysign() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.DaySign)
  
  ::msg::CSReqDaySign* temp = _impl_.daysign_;
  _impl_.daysign_ = nullptr;
  return temp;
}
inline ::msg::CSReqDaySign* CSReqBody::_internal_mutable_daysign() {
  
  if (_impl_.daysign_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqDaySign>(GetArenaForAllocation());
    _impl_.daysign_ = p;
  }
  return _impl_.daysign_;
}
inline ::msg::CSReqDaySign* CSReqBody::mutable_daysign() {
  ::msg::CSReqDaySign* _msg = _internal_mutable_daysign();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.DaySign)
  return _msg;
}
inline void CSReqBody::set_allocated_daysign(::msg::CSReqDaySign* daysign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.daysign_);
  }
  if (daysign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(daysign));
    if (message_arena != submessage_arena) {
      daysign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, daysign, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.daysign_ = daysign;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.DaySign)
}

// .msg.CSReqDayFitAvoid DayFitAvoid = 115;
inline bool CSReqBody::_internal_has_dayfitavoid() const {
  return this != internal_default_instance() && _impl_.dayfitavoid_ != nullptr;
}
inline bool CSReqBody::has_dayfitavoid() const {
  return _internal_has_dayfitavoid();
}
inline const ::msg::CSReqDayFitAvoid& CSReqBody::_internal_dayfitavoid() const {
  const ::msg::CSReqDayFitAvoid* p = _impl_.dayfitavoid_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqDayFitAvoid&>(
      ::msg::_CSReqDayFitAvoid_default_instance_);
}
inline const ::msg::CSReqDayFitAvoid& CSReqBody::dayfitavoid() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.DayFitAvoid)
  return _internal_dayfitavoid();
}
inline void CSReqBody::unsafe_arena_set_allocated_dayfitavoid(
    ::msg::CSReqDayFitAvoid* dayfitavoid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dayfitavoid_);
  }
  _impl_.dayfitavoid_ = dayfitavoid;
  if (dayfitavoid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.DayFitAvoid)
}
inline ::msg::CSReqDayFitAvoid* CSReqBody::release_dayfitavoid() {
  
  ::msg::CSReqDayFitAvoid* temp = _impl_.dayfitavoid_;
  _impl_.dayfitavoid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqDayFitAvoid* CSReqBody::unsafe_arena_release_dayfitavoid() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.DayFitAvoid)
  
  ::msg::CSReqDayFitAvoid* temp = _impl_.dayfitavoid_;
  _impl_.dayfitavoid_ = nullptr;
  return temp;
}
inline ::msg::CSReqDayFitAvoid* CSReqBody::_internal_mutable_dayfitavoid() {
  
  if (_impl_.dayfitavoid_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqDayFitAvoid>(GetArenaForAllocation());
    _impl_.dayfitavoid_ = p;
  }
  return _impl_.dayfitavoid_;
}
inline ::msg::CSReqDayFitAvoid* CSReqBody::mutable_dayfitavoid() {
  ::msg::CSReqDayFitAvoid* _msg = _internal_mutable_dayfitavoid();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.DayFitAvoid)
  return _msg;
}
inline void CSReqBody::set_allocated_dayfitavoid(::msg::CSReqDayFitAvoid* dayfitavoid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dayfitavoid_);
  }
  if (dayfitavoid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dayfitavoid));
    if (message_arena != submessage_arena) {
      dayfitavoid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dayfitavoid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dayfitavoid_ = dayfitavoid;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.DayFitAvoid)
}

// .msg.CSReqShareCountAward ShareCountAward = 116;
inline bool CSReqBody::_internal_has_sharecountaward() const {
  return this != internal_default_instance() && _impl_.sharecountaward_ != nullptr;
}
inline bool CSReqBody::has_sharecountaward() const {
  return _internal_has_sharecountaward();
}
inline const ::msg::CSReqShareCountAward& CSReqBody::_internal_sharecountaward() const {
  const ::msg::CSReqShareCountAward* p = _impl_.sharecountaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqShareCountAward&>(
      ::msg::_CSReqShareCountAward_default_instance_);
}
inline const ::msg::CSReqShareCountAward& CSReqBody::sharecountaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ShareCountAward)
  return _internal_sharecountaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_sharecountaward(
    ::msg::CSReqShareCountAward* sharecountaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sharecountaward_);
  }
  _impl_.sharecountaward_ = sharecountaward;
  if (sharecountaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ShareCountAward)
}
inline ::msg::CSReqShareCountAward* CSReqBody::release_sharecountaward() {
  
  ::msg::CSReqShareCountAward* temp = _impl_.sharecountaward_;
  _impl_.sharecountaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqShareCountAward* CSReqBody::unsafe_arena_release_sharecountaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ShareCountAward)
  
  ::msg::CSReqShareCountAward* temp = _impl_.sharecountaward_;
  _impl_.sharecountaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqShareCountAward* CSReqBody::_internal_mutable_sharecountaward() {
  
  if (_impl_.sharecountaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqShareCountAward>(GetArenaForAllocation());
    _impl_.sharecountaward_ = p;
  }
  return _impl_.sharecountaward_;
}
inline ::msg::CSReqShareCountAward* CSReqBody::mutable_sharecountaward() {
  ::msg::CSReqShareCountAward* _msg = _internal_mutable_sharecountaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ShareCountAward)
  return _msg;
}
inline void CSReqBody::set_allocated_sharecountaward(::msg::CSReqShareCountAward* sharecountaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sharecountaward_);
  }
  if (sharecountaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sharecountaward));
    if (message_arena != submessage_arena) {
      sharecountaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sharecountaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sharecountaward_ = sharecountaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ShareCountAward)
}

// .msg.CSReqActItemExch ActItemExch = 117;
inline bool CSReqBody::_internal_has_actitemexch() const {
  return this != internal_default_instance() && _impl_.actitemexch_ != nullptr;
}
inline bool CSReqBody::has_actitemexch() const {
  return _internal_has_actitemexch();
}
inline const ::msg::CSReqActItemExch& CSReqBody::_internal_actitemexch() const {
  const ::msg::CSReqActItemExch* p = _impl_.actitemexch_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqActItemExch&>(
      ::msg::_CSReqActItemExch_default_instance_);
}
inline const ::msg::CSReqActItemExch& CSReqBody::actitemexch() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ActItemExch)
  return _internal_actitemexch();
}
inline void CSReqBody::unsafe_arena_set_allocated_actitemexch(
    ::msg::CSReqActItemExch* actitemexch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actitemexch_);
  }
  _impl_.actitemexch_ = actitemexch;
  if (actitemexch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ActItemExch)
}
inline ::msg::CSReqActItemExch* CSReqBody::release_actitemexch() {
  
  ::msg::CSReqActItemExch* temp = _impl_.actitemexch_;
  _impl_.actitemexch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqActItemExch* CSReqBody::unsafe_arena_release_actitemexch() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ActItemExch)
  
  ::msg::CSReqActItemExch* temp = _impl_.actitemexch_;
  _impl_.actitemexch_ = nullptr;
  return temp;
}
inline ::msg::CSReqActItemExch* CSReqBody::_internal_mutable_actitemexch() {
  
  if (_impl_.actitemexch_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqActItemExch>(GetArenaForAllocation());
    _impl_.actitemexch_ = p;
  }
  return _impl_.actitemexch_;
}
inline ::msg::CSReqActItemExch* CSReqBody::mutable_actitemexch() {
  ::msg::CSReqActItemExch* _msg = _internal_mutable_actitemexch();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ActItemExch)
  return _msg;
}
inline void CSReqBody::set_allocated_actitemexch(::msg::CSReqActItemExch* actitemexch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actitemexch_);
  }
  if (actitemexch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actitemexch));
    if (message_arena != submessage_arena) {
      actitemexch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actitemexch, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.actitemexch_ = actitemexch;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ActItemExch)
}

// .msg.CSReqRealationStar RealationStar = 118;
inline bool CSReqBody::_internal_has_realationstar() const {
  return this != internal_default_instance() && _impl_.realationstar_ != nullptr;
}
inline bool CSReqBody::has_realationstar() const {
  return _internal_has_realationstar();
}
inline const ::msg::CSReqRealationStar& CSReqBody::_internal_realationstar() const {
  const ::msg::CSReqRealationStar* p = _impl_.realationstar_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRealationStar&>(
      ::msg::_CSReqRealationStar_default_instance_);
}
inline const ::msg::CSReqRealationStar& CSReqBody::realationstar() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RealationStar)
  return _internal_realationstar();
}
inline void CSReqBody::unsafe_arena_set_allocated_realationstar(
    ::msg::CSReqRealationStar* realationstar) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.realationstar_);
  }
  _impl_.realationstar_ = realationstar;
  if (realationstar) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RealationStar)
}
inline ::msg::CSReqRealationStar* CSReqBody::release_realationstar() {
  
  ::msg::CSReqRealationStar* temp = _impl_.realationstar_;
  _impl_.realationstar_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRealationStar* CSReqBody::unsafe_arena_release_realationstar() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RealationStar)
  
  ::msg::CSReqRealationStar* temp = _impl_.realationstar_;
  _impl_.realationstar_ = nullptr;
  return temp;
}
inline ::msg::CSReqRealationStar* CSReqBody::_internal_mutable_realationstar() {
  
  if (_impl_.realationstar_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRealationStar>(GetArenaForAllocation());
    _impl_.realationstar_ = p;
  }
  return _impl_.realationstar_;
}
inline ::msg::CSReqRealationStar* CSReqBody::mutable_realationstar() {
  ::msg::CSReqRealationStar* _msg = _internal_mutable_realationstar();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RealationStar)
  return _msg;
}
inline void CSReqBody::set_allocated_realationstar(::msg::CSReqRealationStar* realationstar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.realationstar_);
  }
  if (realationstar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(realationstar));
    if (message_arena != submessage_arena) {
      realationstar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, realationstar, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.realationstar_ = realationstar;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RealationStar)
}

// .msg.CSReqGetRealationStarInviteSucc GetRealationStarInviteSucc = 119;
inline bool CSReqBody::_internal_has_getrealationstarinvitesucc() const {
  return this != internal_default_instance() && _impl_.getrealationstarinvitesucc_ != nullptr;
}
inline bool CSReqBody::has_getrealationstarinvitesucc() const {
  return _internal_has_getrealationstarinvitesucc();
}
inline const ::msg::CSReqGetRealationStarInviteSucc& CSReqBody::_internal_getrealationstarinvitesucc() const {
  const ::msg::CSReqGetRealationStarInviteSucc* p = _impl_.getrealationstarinvitesucc_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetRealationStarInviteSucc&>(
      ::msg::_CSReqGetRealationStarInviteSucc_default_instance_);
}
inline const ::msg::CSReqGetRealationStarInviteSucc& CSReqBody::getrealationstarinvitesucc() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetRealationStarInviteSucc)
  return _internal_getrealationstarinvitesucc();
}
inline void CSReqBody::unsafe_arena_set_allocated_getrealationstarinvitesucc(
    ::msg::CSReqGetRealationStarInviteSucc* getrealationstarinvitesucc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getrealationstarinvitesucc_);
  }
  _impl_.getrealationstarinvitesucc_ = getrealationstarinvitesucc;
  if (getrealationstarinvitesucc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetRealationStarInviteSucc)
}
inline ::msg::CSReqGetRealationStarInviteSucc* CSReqBody::release_getrealationstarinvitesucc() {
  
  ::msg::CSReqGetRealationStarInviteSucc* temp = _impl_.getrealationstarinvitesucc_;
  _impl_.getrealationstarinvitesucc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetRealationStarInviteSucc* CSReqBody::unsafe_arena_release_getrealationstarinvitesucc() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetRealationStarInviteSucc)
  
  ::msg::CSReqGetRealationStarInviteSucc* temp = _impl_.getrealationstarinvitesucc_;
  _impl_.getrealationstarinvitesucc_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetRealationStarInviteSucc* CSReqBody::_internal_mutable_getrealationstarinvitesucc() {
  
  if (_impl_.getrealationstarinvitesucc_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetRealationStarInviteSucc>(GetArenaForAllocation());
    _impl_.getrealationstarinvitesucc_ = p;
  }
  return _impl_.getrealationstarinvitesucc_;
}
inline ::msg::CSReqGetRealationStarInviteSucc* CSReqBody::mutable_getrealationstarinvitesucc() {
  ::msg::CSReqGetRealationStarInviteSucc* _msg = _internal_mutable_getrealationstarinvitesucc();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetRealationStarInviteSucc)
  return _msg;
}
inline void CSReqBody::set_allocated_getrealationstarinvitesucc(::msg::CSReqGetRealationStarInviteSucc* getrealationstarinvitesucc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getrealationstarinvitesucc_);
  }
  if (getrealationstarinvitesucc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getrealationstarinvitesucc));
    if (message_arena != submessage_arena) {
      getrealationstarinvitesucc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getrealationstarinvitesucc, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getrealationstarinvitesucc_ = getrealationstarinvitesucc;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetRealationStarInviteSucc)
}

// .msg.CSReqGetRealationStar GetRealationStar = 120;
inline bool CSReqBody::_internal_has_getrealationstar() const {
  return this != internal_default_instance() && _impl_.getrealationstar_ != nullptr;
}
inline bool CSReqBody::has_getrealationstar() const {
  return _internal_has_getrealationstar();
}
inline const ::msg::CSReqGetRealationStar& CSReqBody::_internal_getrealationstar() const {
  const ::msg::CSReqGetRealationStar* p = _impl_.getrealationstar_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetRealationStar&>(
      ::msg::_CSReqGetRealationStar_default_instance_);
}
inline const ::msg::CSReqGetRealationStar& CSReqBody::getrealationstar() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetRealationStar)
  return _internal_getrealationstar();
}
inline void CSReqBody::unsafe_arena_set_allocated_getrealationstar(
    ::msg::CSReqGetRealationStar* getrealationstar) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getrealationstar_);
  }
  _impl_.getrealationstar_ = getrealationstar;
  if (getrealationstar) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetRealationStar)
}
inline ::msg::CSReqGetRealationStar* CSReqBody::release_getrealationstar() {
  
  ::msg::CSReqGetRealationStar* temp = _impl_.getrealationstar_;
  _impl_.getrealationstar_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetRealationStar* CSReqBody::unsafe_arena_release_getrealationstar() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetRealationStar)
  
  ::msg::CSReqGetRealationStar* temp = _impl_.getrealationstar_;
  _impl_.getrealationstar_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetRealationStar* CSReqBody::_internal_mutable_getrealationstar() {
  
  if (_impl_.getrealationstar_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetRealationStar>(GetArenaForAllocation());
    _impl_.getrealationstar_ = p;
  }
  return _impl_.getrealationstar_;
}
inline ::msg::CSReqGetRealationStar* CSReqBody::mutable_getrealationstar() {
  ::msg::CSReqGetRealationStar* _msg = _internal_mutable_getrealationstar();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetRealationStar)
  return _msg;
}
inline void CSReqBody::set_allocated_getrealationstar(::msg::CSReqGetRealationStar* getrealationstar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getrealationstar_);
  }
  if (getrealationstar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getrealationstar));
    if (message_arena != submessage_arena) {
      getrealationstar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getrealationstar, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getrealationstar_ = getrealationstar;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetRealationStar)
}

// .msg.CSReqGetActRecord ReqActRecord = 121;
inline bool CSReqBody::_internal_has_reqactrecord() const {
  return this != internal_default_instance() && _impl_.reqactrecord_ != nullptr;
}
inline bool CSReqBody::has_reqactrecord() const {
  return _internal_has_reqactrecord();
}
inline const ::msg::CSReqGetActRecord& CSReqBody::_internal_reqactrecord() const {
  const ::msg::CSReqGetActRecord* p = _impl_.reqactrecord_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetActRecord&>(
      ::msg::_CSReqGetActRecord_default_instance_);
}
inline const ::msg::CSReqGetActRecord& CSReqBody::reqactrecord() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ReqActRecord)
  return _internal_reqactrecord();
}
inline void CSReqBody::unsafe_arena_set_allocated_reqactrecord(
    ::msg::CSReqGetActRecord* reqactrecord) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reqactrecord_);
  }
  _impl_.reqactrecord_ = reqactrecord;
  if (reqactrecord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ReqActRecord)
}
inline ::msg::CSReqGetActRecord* CSReqBody::release_reqactrecord() {
  
  ::msg::CSReqGetActRecord* temp = _impl_.reqactrecord_;
  _impl_.reqactrecord_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetActRecord* CSReqBody::unsafe_arena_release_reqactrecord() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ReqActRecord)
  
  ::msg::CSReqGetActRecord* temp = _impl_.reqactrecord_;
  _impl_.reqactrecord_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetActRecord* CSReqBody::_internal_mutable_reqactrecord() {
  
  if (_impl_.reqactrecord_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetActRecord>(GetArenaForAllocation());
    _impl_.reqactrecord_ = p;
  }
  return _impl_.reqactrecord_;
}
inline ::msg::CSReqGetActRecord* CSReqBody::mutable_reqactrecord() {
  ::msg::CSReqGetActRecord* _msg = _internal_mutable_reqactrecord();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ReqActRecord)
  return _msg;
}
inline void CSReqBody::set_allocated_reqactrecord(::msg::CSReqGetActRecord* reqactrecord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reqactrecord_);
  }
  if (reqactrecord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reqactrecord));
    if (message_arena != submessage_arena) {
      reqactrecord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reqactrecord, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reqactrecord_ = reqactrecord;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ReqActRecord)
}

// .msg.CSReqJoinVoiceTeam JoinVoiceTeam = 122;
inline bool CSReqBody::_internal_has_joinvoiceteam() const {
  return this != internal_default_instance() && _impl_.joinvoiceteam_ != nullptr;
}
inline bool CSReqBody::has_joinvoiceteam() const {
  return _internal_has_joinvoiceteam();
}
inline const ::msg::CSReqJoinVoiceTeam& CSReqBody::_internal_joinvoiceteam() const {
  const ::msg::CSReqJoinVoiceTeam* p = _impl_.joinvoiceteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqJoinVoiceTeam&>(
      ::msg::_CSReqJoinVoiceTeam_default_instance_);
}
inline const ::msg::CSReqJoinVoiceTeam& CSReqBody::joinvoiceteam() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.JoinVoiceTeam)
  return _internal_joinvoiceteam();
}
inline void CSReqBody::unsafe_arena_set_allocated_joinvoiceteam(
    ::msg::CSReqJoinVoiceTeam* joinvoiceteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joinvoiceteam_);
  }
  _impl_.joinvoiceteam_ = joinvoiceteam;
  if (joinvoiceteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.JoinVoiceTeam)
}
inline ::msg::CSReqJoinVoiceTeam* CSReqBody::release_joinvoiceteam() {
  
  ::msg::CSReqJoinVoiceTeam* temp = _impl_.joinvoiceteam_;
  _impl_.joinvoiceteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqJoinVoiceTeam* CSReqBody::unsafe_arena_release_joinvoiceteam() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.JoinVoiceTeam)
  
  ::msg::CSReqJoinVoiceTeam* temp = _impl_.joinvoiceteam_;
  _impl_.joinvoiceteam_ = nullptr;
  return temp;
}
inline ::msg::CSReqJoinVoiceTeam* CSReqBody::_internal_mutable_joinvoiceteam() {
  
  if (_impl_.joinvoiceteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqJoinVoiceTeam>(GetArenaForAllocation());
    _impl_.joinvoiceteam_ = p;
  }
  return _impl_.joinvoiceteam_;
}
inline ::msg::CSReqJoinVoiceTeam* CSReqBody::mutable_joinvoiceteam() {
  ::msg::CSReqJoinVoiceTeam* _msg = _internal_mutable_joinvoiceteam();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.JoinVoiceTeam)
  return _msg;
}
inline void CSReqBody::set_allocated_joinvoiceteam(::msg::CSReqJoinVoiceTeam* joinvoiceteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joinvoiceteam_);
  }
  if (joinvoiceteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joinvoiceteam));
    if (message_arena != submessage_arena) {
      joinvoiceteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joinvoiceteam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.joinvoiceteam_ = joinvoiceteam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.JoinVoiceTeam)
}

// .msg.CSReqJoinVoicePvp JoinVoicePvp = 123;
inline bool CSReqBody::_internal_has_joinvoicepvp() const {
  return this != internal_default_instance() && _impl_.joinvoicepvp_ != nullptr;
}
inline bool CSReqBody::has_joinvoicepvp() const {
  return _internal_has_joinvoicepvp();
}
inline const ::msg::CSReqJoinVoicePvp& CSReqBody::_internal_joinvoicepvp() const {
  const ::msg::CSReqJoinVoicePvp* p = _impl_.joinvoicepvp_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqJoinVoicePvp&>(
      ::msg::_CSReqJoinVoicePvp_default_instance_);
}
inline const ::msg::CSReqJoinVoicePvp& CSReqBody::joinvoicepvp() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.JoinVoicePvp)
  return _internal_joinvoicepvp();
}
inline void CSReqBody::unsafe_arena_set_allocated_joinvoicepvp(
    ::msg::CSReqJoinVoicePvp* joinvoicepvp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joinvoicepvp_);
  }
  _impl_.joinvoicepvp_ = joinvoicepvp;
  if (joinvoicepvp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.JoinVoicePvp)
}
inline ::msg::CSReqJoinVoicePvp* CSReqBody::release_joinvoicepvp() {
  
  ::msg::CSReqJoinVoicePvp* temp = _impl_.joinvoicepvp_;
  _impl_.joinvoicepvp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqJoinVoicePvp* CSReqBody::unsafe_arena_release_joinvoicepvp() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.JoinVoicePvp)
  
  ::msg::CSReqJoinVoicePvp* temp = _impl_.joinvoicepvp_;
  _impl_.joinvoicepvp_ = nullptr;
  return temp;
}
inline ::msg::CSReqJoinVoicePvp* CSReqBody::_internal_mutable_joinvoicepvp() {
  
  if (_impl_.joinvoicepvp_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqJoinVoicePvp>(GetArenaForAllocation());
    _impl_.joinvoicepvp_ = p;
  }
  return _impl_.joinvoicepvp_;
}
inline ::msg::CSReqJoinVoicePvp* CSReqBody::mutable_joinvoicepvp() {
  ::msg::CSReqJoinVoicePvp* _msg = _internal_mutable_joinvoicepvp();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.JoinVoicePvp)
  return _msg;
}
inline void CSReqBody::set_allocated_joinvoicepvp(::msg::CSReqJoinVoicePvp* joinvoicepvp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joinvoicepvp_);
  }
  if (joinvoicepvp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joinvoicepvp));
    if (message_arena != submessage_arena) {
      joinvoicepvp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joinvoicepvp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.joinvoicepvp_ = joinvoicepvp;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.JoinVoicePvp)
}

// .msg.CSReqJoinVoiceCamp JoinVoiceCamp = 124;
inline bool CSReqBody::_internal_has_joinvoicecamp() const {
  return this != internal_default_instance() && _impl_.joinvoicecamp_ != nullptr;
}
inline bool CSReqBody::has_joinvoicecamp() const {
  return _internal_has_joinvoicecamp();
}
inline const ::msg::CSReqJoinVoiceCamp& CSReqBody::_internal_joinvoicecamp() const {
  const ::msg::CSReqJoinVoiceCamp* p = _impl_.joinvoicecamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqJoinVoiceCamp&>(
      ::msg::_CSReqJoinVoiceCamp_default_instance_);
}
inline const ::msg::CSReqJoinVoiceCamp& CSReqBody::joinvoicecamp() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.JoinVoiceCamp)
  return _internal_joinvoicecamp();
}
inline void CSReqBody::unsafe_arena_set_allocated_joinvoicecamp(
    ::msg::CSReqJoinVoiceCamp* joinvoicecamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joinvoicecamp_);
  }
  _impl_.joinvoicecamp_ = joinvoicecamp;
  if (joinvoicecamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.JoinVoiceCamp)
}
inline ::msg::CSReqJoinVoiceCamp* CSReqBody::release_joinvoicecamp() {
  
  ::msg::CSReqJoinVoiceCamp* temp = _impl_.joinvoicecamp_;
  _impl_.joinvoicecamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqJoinVoiceCamp* CSReqBody::unsafe_arena_release_joinvoicecamp() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.JoinVoiceCamp)
  
  ::msg::CSReqJoinVoiceCamp* temp = _impl_.joinvoicecamp_;
  _impl_.joinvoicecamp_ = nullptr;
  return temp;
}
inline ::msg::CSReqJoinVoiceCamp* CSReqBody::_internal_mutable_joinvoicecamp() {
  
  if (_impl_.joinvoicecamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqJoinVoiceCamp>(GetArenaForAllocation());
    _impl_.joinvoicecamp_ = p;
  }
  return _impl_.joinvoicecamp_;
}
inline ::msg::CSReqJoinVoiceCamp* CSReqBody::mutable_joinvoicecamp() {
  ::msg::CSReqJoinVoiceCamp* _msg = _internal_mutable_joinvoicecamp();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.JoinVoiceCamp)
  return _msg;
}
inline void CSReqBody::set_allocated_joinvoicecamp(::msg::CSReqJoinVoiceCamp* joinvoicecamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joinvoicecamp_);
  }
  if (joinvoicecamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joinvoicecamp));
    if (message_arena != submessage_arena) {
      joinvoicecamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joinvoicecamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.joinvoicecamp_ = joinvoicecamp;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.JoinVoiceCamp)
}

// .msg.CSReqUserCountrySet UserCountrySet = 125;
inline bool CSReqBody::_internal_has_usercountryset() const {
  return this != internal_default_instance() && _impl_.usercountryset_ != nullptr;
}
inline bool CSReqBody::has_usercountryset() const {
  return _internal_has_usercountryset();
}
inline const ::msg::CSReqUserCountrySet& CSReqBody::_internal_usercountryset() const {
  const ::msg::CSReqUserCountrySet* p = _impl_.usercountryset_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUserCountrySet&>(
      ::msg::_CSReqUserCountrySet_default_instance_);
}
inline const ::msg::CSReqUserCountrySet& CSReqBody::usercountryset() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UserCountrySet)
  return _internal_usercountryset();
}
inline void CSReqBody::unsafe_arena_set_allocated_usercountryset(
    ::msg::CSReqUserCountrySet* usercountryset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usercountryset_);
  }
  _impl_.usercountryset_ = usercountryset;
  if (usercountryset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UserCountrySet)
}
inline ::msg::CSReqUserCountrySet* CSReqBody::release_usercountryset() {
  
  ::msg::CSReqUserCountrySet* temp = _impl_.usercountryset_;
  _impl_.usercountryset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUserCountrySet* CSReqBody::unsafe_arena_release_usercountryset() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UserCountrySet)
  
  ::msg::CSReqUserCountrySet* temp = _impl_.usercountryset_;
  _impl_.usercountryset_ = nullptr;
  return temp;
}
inline ::msg::CSReqUserCountrySet* CSReqBody::_internal_mutable_usercountryset() {
  
  if (_impl_.usercountryset_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUserCountrySet>(GetArenaForAllocation());
    _impl_.usercountryset_ = p;
  }
  return _impl_.usercountryset_;
}
inline ::msg::CSReqUserCountrySet* CSReqBody::mutable_usercountryset() {
  ::msg::CSReqUserCountrySet* _msg = _internal_mutable_usercountryset();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UserCountrySet)
  return _msg;
}
inline void CSReqBody::set_allocated_usercountryset(::msg::CSReqUserCountrySet* usercountryset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usercountryset_);
  }
  if (usercountryset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usercountryset));
    if (message_arena != submessage_arena) {
      usercountryset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usercountryset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.usercountryset_ = usercountryset;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UserCountrySet)
}

// .msg.CSReqOfflineInviteJoinTeam OfflineInviteJoinTeam = 126;
inline bool CSReqBody::_internal_has_offlineinvitejointeam() const {
  return this != internal_default_instance() && _impl_.offlineinvitejointeam_ != nullptr;
}
inline bool CSReqBody::has_offlineinvitejointeam() const {
  return _internal_has_offlineinvitejointeam();
}
inline const ::msg::CSReqOfflineInviteJoinTeam& CSReqBody::_internal_offlineinvitejointeam() const {
  const ::msg::CSReqOfflineInviteJoinTeam* p = _impl_.offlineinvitejointeam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqOfflineInviteJoinTeam&>(
      ::msg::_CSReqOfflineInviteJoinTeam_default_instance_);
}
inline const ::msg::CSReqOfflineInviteJoinTeam& CSReqBody::offlineinvitejointeam() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.OfflineInviteJoinTeam)
  return _internal_offlineinvitejointeam();
}
inline void CSReqBody::unsafe_arena_set_allocated_offlineinvitejointeam(
    ::msg::CSReqOfflineInviteJoinTeam* offlineinvitejointeam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offlineinvitejointeam_);
  }
  _impl_.offlineinvitejointeam_ = offlineinvitejointeam;
  if (offlineinvitejointeam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.OfflineInviteJoinTeam)
}
inline ::msg::CSReqOfflineInviteJoinTeam* CSReqBody::release_offlineinvitejointeam() {
  
  ::msg::CSReqOfflineInviteJoinTeam* temp = _impl_.offlineinvitejointeam_;
  _impl_.offlineinvitejointeam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqOfflineInviteJoinTeam* CSReqBody::unsafe_arena_release_offlineinvitejointeam() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.OfflineInviteJoinTeam)
  
  ::msg::CSReqOfflineInviteJoinTeam* temp = _impl_.offlineinvitejointeam_;
  _impl_.offlineinvitejointeam_ = nullptr;
  return temp;
}
inline ::msg::CSReqOfflineInviteJoinTeam* CSReqBody::_internal_mutable_offlineinvitejointeam() {
  
  if (_impl_.offlineinvitejointeam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqOfflineInviteJoinTeam>(GetArenaForAllocation());
    _impl_.offlineinvitejointeam_ = p;
  }
  return _impl_.offlineinvitejointeam_;
}
inline ::msg::CSReqOfflineInviteJoinTeam* CSReqBody::mutable_offlineinvitejointeam() {
  ::msg::CSReqOfflineInviteJoinTeam* _msg = _internal_mutable_offlineinvitejointeam();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.OfflineInviteJoinTeam)
  return _msg;
}
inline void CSReqBody::set_allocated_offlineinvitejointeam(::msg::CSReqOfflineInviteJoinTeam* offlineinvitejointeam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offlineinvitejointeam_);
  }
  if (offlineinvitejointeam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offlineinvitejointeam));
    if (message_arena != submessage_arena) {
      offlineinvitejointeam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offlineinvitejointeam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offlineinvitejointeam_ = offlineinvitejointeam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.OfflineInviteJoinTeam)
}

// .msg.CSReqObserve Observe = 127;
inline bool CSReqBody::_internal_has_observe() const {
  return this != internal_default_instance() && _impl_.observe_ != nullptr;
}
inline bool CSReqBody::has_observe() const {
  return _internal_has_observe();
}
inline const ::msg::CSReqObserve& CSReqBody::_internal_observe() const {
  const ::msg::CSReqObserve* p = _impl_.observe_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqObserve&>(
      ::msg::_CSReqObserve_default_instance_);
}
inline const ::msg::CSReqObserve& CSReqBody::observe() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.Observe)
  return _internal_observe();
}
inline void CSReqBody::unsafe_arena_set_allocated_observe(
    ::msg::CSReqObserve* observe) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observe_);
  }
  _impl_.observe_ = observe;
  if (observe) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.Observe)
}
inline ::msg::CSReqObserve* CSReqBody::release_observe() {
  
  ::msg::CSReqObserve* temp = _impl_.observe_;
  _impl_.observe_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqObserve* CSReqBody::unsafe_arena_release_observe() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.Observe)
  
  ::msg::CSReqObserve* temp = _impl_.observe_;
  _impl_.observe_ = nullptr;
  return temp;
}
inline ::msg::CSReqObserve* CSReqBody::_internal_mutable_observe() {
  
  if (_impl_.observe_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqObserve>(GetArenaForAllocation());
    _impl_.observe_ = p;
  }
  return _impl_.observe_;
}
inline ::msg::CSReqObserve* CSReqBody::mutable_observe() {
  ::msg::CSReqObserve* _msg = _internal_mutable_observe();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.Observe)
  return _msg;
}
inline void CSReqBody::set_allocated_observe(::msg::CSReqObserve* observe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observe_);
  }
  if (observe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observe));
    if (message_arena != submessage_arena) {
      observe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observe, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.observe_ = observe;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.Observe)
}

// .msg.CSReqGetRecommendPvp GetRecommendPvp = 128;
inline bool CSReqBody::_internal_has_getrecommendpvp() const {
  return this != internal_default_instance() && _impl_.getrecommendpvp_ != nullptr;
}
inline bool CSReqBody::has_getrecommendpvp() const {
  return _internal_has_getrecommendpvp();
}
inline const ::msg::CSReqGetRecommendPvp& CSReqBody::_internal_getrecommendpvp() const {
  const ::msg::CSReqGetRecommendPvp* p = _impl_.getrecommendpvp_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetRecommendPvp&>(
      ::msg::_CSReqGetRecommendPvp_default_instance_);
}
inline const ::msg::CSReqGetRecommendPvp& CSReqBody::getrecommendpvp() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetRecommendPvp)
  return _internal_getrecommendpvp();
}
inline void CSReqBody::unsafe_arena_set_allocated_getrecommendpvp(
    ::msg::CSReqGetRecommendPvp* getrecommendpvp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getrecommendpvp_);
  }
  _impl_.getrecommendpvp_ = getrecommendpvp;
  if (getrecommendpvp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetRecommendPvp)
}
inline ::msg::CSReqGetRecommendPvp* CSReqBody::release_getrecommendpvp() {
  
  ::msg::CSReqGetRecommendPvp* temp = _impl_.getrecommendpvp_;
  _impl_.getrecommendpvp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetRecommendPvp* CSReqBody::unsafe_arena_release_getrecommendpvp() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetRecommendPvp)
  
  ::msg::CSReqGetRecommendPvp* temp = _impl_.getrecommendpvp_;
  _impl_.getrecommendpvp_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetRecommendPvp* CSReqBody::_internal_mutable_getrecommendpvp() {
  
  if (_impl_.getrecommendpvp_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetRecommendPvp>(GetArenaForAllocation());
    _impl_.getrecommendpvp_ = p;
  }
  return _impl_.getrecommendpvp_;
}
inline ::msg::CSReqGetRecommendPvp* CSReqBody::mutable_getrecommendpvp() {
  ::msg::CSReqGetRecommendPvp* _msg = _internal_mutable_getrecommendpvp();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetRecommendPvp)
  return _msg;
}
inline void CSReqBody::set_allocated_getrecommendpvp(::msg::CSReqGetRecommendPvp* getrecommendpvp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getrecommendpvp_);
  }
  if (getrecommendpvp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getrecommendpvp));
    if (message_arena != submessage_arena) {
      getrecommendpvp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getrecommendpvp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getrecommendpvp_ = getrecommendpvp;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetRecommendPvp)
}

// .msg.CSReqObserveLogin ObserveLogin = 129;
inline bool CSReqBody::_internal_has_observelogin() const {
  return this != internal_default_instance() && _impl_.observelogin_ != nullptr;
}
inline bool CSReqBody::has_observelogin() const {
  return _internal_has_observelogin();
}
inline const ::msg::CSReqObserveLogin& CSReqBody::_internal_observelogin() const {
  const ::msg::CSReqObserveLogin* p = _impl_.observelogin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqObserveLogin&>(
      ::msg::_CSReqObserveLogin_default_instance_);
}
inline const ::msg::CSReqObserveLogin& CSReqBody::observelogin() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ObserveLogin)
  return _internal_observelogin();
}
inline void CSReqBody::unsafe_arena_set_allocated_observelogin(
    ::msg::CSReqObserveLogin* observelogin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observelogin_);
  }
  _impl_.observelogin_ = observelogin;
  if (observelogin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ObserveLogin)
}
inline ::msg::CSReqObserveLogin* CSReqBody::release_observelogin() {
  
  ::msg::CSReqObserveLogin* temp = _impl_.observelogin_;
  _impl_.observelogin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqObserveLogin* CSReqBody::unsafe_arena_release_observelogin() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ObserveLogin)
  
  ::msg::CSReqObserveLogin* temp = _impl_.observelogin_;
  _impl_.observelogin_ = nullptr;
  return temp;
}
inline ::msg::CSReqObserveLogin* CSReqBody::_internal_mutable_observelogin() {
  
  if (_impl_.observelogin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqObserveLogin>(GetArenaForAllocation());
    _impl_.observelogin_ = p;
  }
  return _impl_.observelogin_;
}
inline ::msg::CSReqObserveLogin* CSReqBody::mutable_observelogin() {
  ::msg::CSReqObserveLogin* _msg = _internal_mutable_observelogin();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ObserveLogin)
  return _msg;
}
inline void CSReqBody::set_allocated_observelogin(::msg::CSReqObserveLogin* observelogin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observelogin_);
  }
  if (observelogin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observelogin));
    if (message_arena != submessage_arena) {
      observelogin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observelogin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.observelogin_ = observelogin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ObserveLogin)
}

// .msg.CSReqQuitObserve QuitObserve = 130;
inline bool CSReqBody::_internal_has_quitobserve() const {
  return this != internal_default_instance() && _impl_.quitobserve_ != nullptr;
}
inline bool CSReqBody::has_quitobserve() const {
  return _internal_has_quitobserve();
}
inline const ::msg::CSReqQuitObserve& CSReqBody::_internal_quitobserve() const {
  const ::msg::CSReqQuitObserve* p = _impl_.quitobserve_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqQuitObserve&>(
      ::msg::_CSReqQuitObserve_default_instance_);
}
inline const ::msg::CSReqQuitObserve& CSReqBody::quitobserve() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.QuitObserve)
  return _internal_quitobserve();
}
inline void CSReqBody::unsafe_arena_set_allocated_quitobserve(
    ::msg::CSReqQuitObserve* quitobserve) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.quitobserve_);
  }
  _impl_.quitobserve_ = quitobserve;
  if (quitobserve) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.QuitObserve)
}
inline ::msg::CSReqQuitObserve* CSReqBody::release_quitobserve() {
  
  ::msg::CSReqQuitObserve* temp = _impl_.quitobserve_;
  _impl_.quitobserve_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqQuitObserve* CSReqBody::unsafe_arena_release_quitobserve() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.QuitObserve)
  
  ::msg::CSReqQuitObserve* temp = _impl_.quitobserve_;
  _impl_.quitobserve_ = nullptr;
  return temp;
}
inline ::msg::CSReqQuitObserve* CSReqBody::_internal_mutable_quitobserve() {
  
  if (_impl_.quitobserve_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqQuitObserve>(GetArenaForAllocation());
    _impl_.quitobserve_ = p;
  }
  return _impl_.quitobserve_;
}
inline ::msg::CSReqQuitObserve* CSReqBody::mutable_quitobserve() {
  ::msg::CSReqQuitObserve* _msg = _internal_mutable_quitobserve();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.QuitObserve)
  return _msg;
}
inline void CSReqBody::set_allocated_quitobserve(::msg::CSReqQuitObserve* quitobserve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.quitobserve_);
  }
  if (quitobserve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quitobserve));
    if (message_arena != submessage_arena) {
      quitobserve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quitobserve, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.quitobserve_ = quitobserve;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.QuitObserve)
}

// .msg.CSReqGetObserveInfo GetObserveInfo = 131;
inline bool CSReqBody::_internal_has_getobserveinfo() const {
  return this != internal_default_instance() && _impl_.getobserveinfo_ != nullptr;
}
inline bool CSReqBody::has_getobserveinfo() const {
  return _internal_has_getobserveinfo();
}
inline const ::msg::CSReqGetObserveInfo& CSReqBody::_internal_getobserveinfo() const {
  const ::msg::CSReqGetObserveInfo* p = _impl_.getobserveinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetObserveInfo&>(
      ::msg::_CSReqGetObserveInfo_default_instance_);
}
inline const ::msg::CSReqGetObserveInfo& CSReqBody::getobserveinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetObserveInfo)
  return _internal_getobserveinfo();
}
inline void CSReqBody::unsafe_arena_set_allocated_getobserveinfo(
    ::msg::CSReqGetObserveInfo* getobserveinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getobserveinfo_);
  }
  _impl_.getobserveinfo_ = getobserveinfo;
  if (getobserveinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetObserveInfo)
}
inline ::msg::CSReqGetObserveInfo* CSReqBody::release_getobserveinfo() {
  
  ::msg::CSReqGetObserveInfo* temp = _impl_.getobserveinfo_;
  _impl_.getobserveinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetObserveInfo* CSReqBody::unsafe_arena_release_getobserveinfo() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetObserveInfo)
  
  ::msg::CSReqGetObserveInfo* temp = _impl_.getobserveinfo_;
  _impl_.getobserveinfo_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetObserveInfo* CSReqBody::_internal_mutable_getobserveinfo() {
  
  if (_impl_.getobserveinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetObserveInfo>(GetArenaForAllocation());
    _impl_.getobserveinfo_ = p;
  }
  return _impl_.getobserveinfo_;
}
inline ::msg::CSReqGetObserveInfo* CSReqBody::mutable_getobserveinfo() {
  ::msg::CSReqGetObserveInfo* _msg = _internal_mutable_getobserveinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetObserveInfo)
  return _msg;
}
inline void CSReqBody::set_allocated_getobserveinfo(::msg::CSReqGetObserveInfo* getobserveinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getobserveinfo_);
  }
  if (getobserveinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getobserveinfo));
    if (message_arena != submessage_arena) {
      getobserveinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getobserveinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getobserveinfo_ = getobserveinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetObserveInfo)
}

// .msg.CSReqFreeFlow FreeFlow = 132;
inline bool CSReqBody::_internal_has_freeflow() const {
  return this != internal_default_instance() && _impl_.freeflow_ != nullptr;
}
inline bool CSReqBody::has_freeflow() const {
  return _internal_has_freeflow();
}
inline const ::msg::CSReqFreeFlow& CSReqBody::_internal_freeflow() const {
  const ::msg::CSReqFreeFlow* p = _impl_.freeflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqFreeFlow&>(
      ::msg::_CSReqFreeFlow_default_instance_);
}
inline const ::msg::CSReqFreeFlow& CSReqBody::freeflow() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.FreeFlow)
  return _internal_freeflow();
}
inline void CSReqBody::unsafe_arena_set_allocated_freeflow(
    ::msg::CSReqFreeFlow* freeflow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.freeflow_);
  }
  _impl_.freeflow_ = freeflow;
  if (freeflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.FreeFlow)
}
inline ::msg::CSReqFreeFlow* CSReqBody::release_freeflow() {
  
  ::msg::CSReqFreeFlow* temp = _impl_.freeflow_;
  _impl_.freeflow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqFreeFlow* CSReqBody::unsafe_arena_release_freeflow() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.FreeFlow)
  
  ::msg::CSReqFreeFlow* temp = _impl_.freeflow_;
  _impl_.freeflow_ = nullptr;
  return temp;
}
inline ::msg::CSReqFreeFlow* CSReqBody::_internal_mutable_freeflow() {
  
  if (_impl_.freeflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqFreeFlow>(GetArenaForAllocation());
    _impl_.freeflow_ = p;
  }
  return _impl_.freeflow_;
}
inline ::msg::CSReqFreeFlow* CSReqBody::mutable_freeflow() {
  ::msg::CSReqFreeFlow* _msg = _internal_mutable_freeflow();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.FreeFlow)
  return _msg;
}
inline void CSReqBody::set_allocated_freeflow(::msg::CSReqFreeFlow* freeflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.freeflow_);
  }
  if (freeflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freeflow));
    if (message_arena != submessage_arena) {
      freeflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freeflow, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.freeflow_ = freeflow;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.FreeFlow)
}

// .msg.CSReqSetPushToken SetPushToken = 133;
inline bool CSReqBody::_internal_has_setpushtoken() const {
  return this != internal_default_instance() && _impl_.setpushtoken_ != nullptr;
}
inline bool CSReqBody::has_setpushtoken() const {
  return _internal_has_setpushtoken();
}
inline const ::msg::CSReqSetPushToken& CSReqBody::_internal_setpushtoken() const {
  const ::msg::CSReqSetPushToken* p = _impl_.setpushtoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSetPushToken&>(
      ::msg::_CSReqSetPushToken_default_instance_);
}
inline const ::msg::CSReqSetPushToken& CSReqBody::setpushtoken() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SetPushToken)
  return _internal_setpushtoken();
}
inline void CSReqBody::unsafe_arena_set_allocated_setpushtoken(
    ::msg::CSReqSetPushToken* setpushtoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setpushtoken_);
  }
  _impl_.setpushtoken_ = setpushtoken;
  if (setpushtoken) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SetPushToken)
}
inline ::msg::CSReqSetPushToken* CSReqBody::release_setpushtoken() {
  
  ::msg::CSReqSetPushToken* temp = _impl_.setpushtoken_;
  _impl_.setpushtoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSetPushToken* CSReqBody::unsafe_arena_release_setpushtoken() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SetPushToken)
  
  ::msg::CSReqSetPushToken* temp = _impl_.setpushtoken_;
  _impl_.setpushtoken_ = nullptr;
  return temp;
}
inline ::msg::CSReqSetPushToken* CSReqBody::_internal_mutable_setpushtoken() {
  
  if (_impl_.setpushtoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSetPushToken>(GetArenaForAllocation());
    _impl_.setpushtoken_ = p;
  }
  return _impl_.setpushtoken_;
}
inline ::msg::CSReqSetPushToken* CSReqBody::mutable_setpushtoken() {
  ::msg::CSReqSetPushToken* _msg = _internal_mutable_setpushtoken();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SetPushToken)
  return _msg;
}
inline void CSReqBody::set_allocated_setpushtoken(::msg::CSReqSetPushToken* setpushtoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setpushtoken_);
  }
  if (setpushtoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setpushtoken));
    if (message_arena != submessage_arena) {
      setpushtoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setpushtoken, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setpushtoken_ = setpushtoken;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SetPushToken)
}

// .msg.CSReqTlogEvent TlogEvent = 134;
inline bool CSReqBody::_internal_has_tlogevent() const {
  return this != internal_default_instance() && _impl_.tlogevent_ != nullptr;
}
inline bool CSReqBody::has_tlogevent() const {
  return _internal_has_tlogevent();
}
inline const ::msg::CSReqTlogEvent& CSReqBody::_internal_tlogevent() const {
  const ::msg::CSReqTlogEvent* p = _impl_.tlogevent_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqTlogEvent&>(
      ::msg::_CSReqTlogEvent_default_instance_);
}
inline const ::msg::CSReqTlogEvent& CSReqBody::tlogevent() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.TlogEvent)
  return _internal_tlogevent();
}
inline void CSReqBody::unsafe_arena_set_allocated_tlogevent(
    ::msg::CSReqTlogEvent* tlogevent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tlogevent_);
  }
  _impl_.tlogevent_ = tlogevent;
  if (tlogevent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.TlogEvent)
}
inline ::msg::CSReqTlogEvent* CSReqBody::release_tlogevent() {
  
  ::msg::CSReqTlogEvent* temp = _impl_.tlogevent_;
  _impl_.tlogevent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqTlogEvent* CSReqBody::unsafe_arena_release_tlogevent() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.TlogEvent)
  
  ::msg::CSReqTlogEvent* temp = _impl_.tlogevent_;
  _impl_.tlogevent_ = nullptr;
  return temp;
}
inline ::msg::CSReqTlogEvent* CSReqBody::_internal_mutable_tlogevent() {
  
  if (_impl_.tlogevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqTlogEvent>(GetArenaForAllocation());
    _impl_.tlogevent_ = p;
  }
  return _impl_.tlogevent_;
}
inline ::msg::CSReqTlogEvent* CSReqBody::mutable_tlogevent() {
  ::msg::CSReqTlogEvent* _msg = _internal_mutable_tlogevent();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.TlogEvent)
  return _msg;
}
inline void CSReqBody::set_allocated_tlogevent(::msg::CSReqTlogEvent* tlogevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tlogevent_);
  }
  if (tlogevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tlogevent));
    if (message_arena != submessage_arena) {
      tlogevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tlogevent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tlogevent_ = tlogevent;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.TlogEvent)
}

// .msg.CSReqWxVVipAward WxVVipAward = 135;
inline bool CSReqBody::_internal_has_wxvvipaward() const {
  return this != internal_default_instance() && _impl_.wxvvipaward_ != nullptr;
}
inline bool CSReqBody::has_wxvvipaward() const {
  return _internal_has_wxvvipaward();
}
inline const ::msg::CSReqWxVVipAward& CSReqBody::_internal_wxvvipaward() const {
  const ::msg::CSReqWxVVipAward* p = _impl_.wxvvipaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqWxVVipAward&>(
      ::msg::_CSReqWxVVipAward_default_instance_);
}
inline const ::msg::CSReqWxVVipAward& CSReqBody::wxvvipaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.WxVVipAward)
  return _internal_wxvvipaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_wxvvipaward(
    ::msg::CSReqWxVVipAward* wxvvipaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxvvipaward_);
  }
  _impl_.wxvvipaward_ = wxvvipaward;
  if (wxvvipaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.WxVVipAward)
}
inline ::msg::CSReqWxVVipAward* CSReqBody::release_wxvvipaward() {
  
  ::msg::CSReqWxVVipAward* temp = _impl_.wxvvipaward_;
  _impl_.wxvvipaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqWxVVipAward* CSReqBody::unsafe_arena_release_wxvvipaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.WxVVipAward)
  
  ::msg::CSReqWxVVipAward* temp = _impl_.wxvvipaward_;
  _impl_.wxvvipaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqWxVVipAward* CSReqBody::_internal_mutable_wxvvipaward() {
  
  if (_impl_.wxvvipaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqWxVVipAward>(GetArenaForAllocation());
    _impl_.wxvvipaward_ = p;
  }
  return _impl_.wxvvipaward_;
}
inline ::msg::CSReqWxVVipAward* CSReqBody::mutable_wxvvipaward() {
  ::msg::CSReqWxVVipAward* _msg = _internal_mutable_wxvvipaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.WxVVipAward)
  return _msg;
}
inline void CSReqBody::set_allocated_wxvvipaward(::msg::CSReqWxVVipAward* wxvvipaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxvvipaward_);
  }
  if (wxvvipaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wxvvipaward));
    if (message_arena != submessage_arena) {
      wxvvipaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wxvvipaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wxvvipaward_ = wxvvipaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.WxVVipAward)
}

// .msg.CSReqGetRelationStarWX RelationStarWX = 136;
inline bool CSReqBody::_internal_has_relationstarwx() const {
  return this != internal_default_instance() && _impl_.relationstarwx_ != nullptr;
}
inline bool CSReqBody::has_relationstarwx() const {
  return _internal_has_relationstarwx();
}
inline const ::msg::CSReqGetRelationStarWX& CSReqBody::_internal_relationstarwx() const {
  const ::msg::CSReqGetRelationStarWX* p = _impl_.relationstarwx_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetRelationStarWX&>(
      ::msg::_CSReqGetRelationStarWX_default_instance_);
}
inline const ::msg::CSReqGetRelationStarWX& CSReqBody::relationstarwx() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RelationStarWX)
  return _internal_relationstarwx();
}
inline void CSReqBody::unsafe_arena_set_allocated_relationstarwx(
    ::msg::CSReqGetRelationStarWX* relationstarwx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relationstarwx_);
  }
  _impl_.relationstarwx_ = relationstarwx;
  if (relationstarwx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RelationStarWX)
}
inline ::msg::CSReqGetRelationStarWX* CSReqBody::release_relationstarwx() {
  
  ::msg::CSReqGetRelationStarWX* temp = _impl_.relationstarwx_;
  _impl_.relationstarwx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetRelationStarWX* CSReqBody::unsafe_arena_release_relationstarwx() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RelationStarWX)
  
  ::msg::CSReqGetRelationStarWX* temp = _impl_.relationstarwx_;
  _impl_.relationstarwx_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetRelationStarWX* CSReqBody::_internal_mutable_relationstarwx() {
  
  if (_impl_.relationstarwx_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetRelationStarWX>(GetArenaForAllocation());
    _impl_.relationstarwx_ = p;
  }
  return _impl_.relationstarwx_;
}
inline ::msg::CSReqGetRelationStarWX* CSReqBody::mutable_relationstarwx() {
  ::msg::CSReqGetRelationStarWX* _msg = _internal_mutable_relationstarwx();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RelationStarWX)
  return _msg;
}
inline void CSReqBody::set_allocated_relationstarwx(::msg::CSReqGetRelationStarWX* relationstarwx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relationstarwx_);
  }
  if (relationstarwx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relationstarwx));
    if (message_arena != submessage_arena) {
      relationstarwx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relationstarwx, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.relationstarwx_ = relationstarwx;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RelationStarWX)
}

// .msg.CSReqSendWxRedPacket SendWxRedPacket = 137;
inline bool CSReqBody::_internal_has_sendwxredpacket() const {
  return this != internal_default_instance() && _impl_.sendwxredpacket_ != nullptr;
}
inline bool CSReqBody::has_sendwxredpacket() const {
  return _internal_has_sendwxredpacket();
}
inline const ::msg::CSReqSendWxRedPacket& CSReqBody::_internal_sendwxredpacket() const {
  const ::msg::CSReqSendWxRedPacket* p = _impl_.sendwxredpacket_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSendWxRedPacket&>(
      ::msg::_CSReqSendWxRedPacket_default_instance_);
}
inline const ::msg::CSReqSendWxRedPacket& CSReqBody::sendwxredpacket() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SendWxRedPacket)
  return _internal_sendwxredpacket();
}
inline void CSReqBody::unsafe_arena_set_allocated_sendwxredpacket(
    ::msg::CSReqSendWxRedPacket* sendwxredpacket) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sendwxredpacket_);
  }
  _impl_.sendwxredpacket_ = sendwxredpacket;
  if (sendwxredpacket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SendWxRedPacket)
}
inline ::msg::CSReqSendWxRedPacket* CSReqBody::release_sendwxredpacket() {
  
  ::msg::CSReqSendWxRedPacket* temp = _impl_.sendwxredpacket_;
  _impl_.sendwxredpacket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSendWxRedPacket* CSReqBody::unsafe_arena_release_sendwxredpacket() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SendWxRedPacket)
  
  ::msg::CSReqSendWxRedPacket* temp = _impl_.sendwxredpacket_;
  _impl_.sendwxredpacket_ = nullptr;
  return temp;
}
inline ::msg::CSReqSendWxRedPacket* CSReqBody::_internal_mutable_sendwxredpacket() {
  
  if (_impl_.sendwxredpacket_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSendWxRedPacket>(GetArenaForAllocation());
    _impl_.sendwxredpacket_ = p;
  }
  return _impl_.sendwxredpacket_;
}
inline ::msg::CSReqSendWxRedPacket* CSReqBody::mutable_sendwxredpacket() {
  ::msg::CSReqSendWxRedPacket* _msg = _internal_mutable_sendwxredpacket();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SendWxRedPacket)
  return _msg;
}
inline void CSReqBody::set_allocated_sendwxredpacket(::msg::CSReqSendWxRedPacket* sendwxredpacket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sendwxredpacket_);
  }
  if (sendwxredpacket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sendwxredpacket));
    if (message_arena != submessage_arena) {
      sendwxredpacket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sendwxredpacket, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sendwxredpacket_ = sendwxredpacket;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SendWxRedPacket)
}

// .msg.CSReqRecvWxRedPacket RecvWxRedPacket = 138;
inline bool CSReqBody::_internal_has_recvwxredpacket() const {
  return this != internal_default_instance() && _impl_.recvwxredpacket_ != nullptr;
}
inline bool CSReqBody::has_recvwxredpacket() const {
  return _internal_has_recvwxredpacket();
}
inline const ::msg::CSReqRecvWxRedPacket& CSReqBody::_internal_recvwxredpacket() const {
  const ::msg::CSReqRecvWxRedPacket* p = _impl_.recvwxredpacket_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRecvWxRedPacket&>(
      ::msg::_CSReqRecvWxRedPacket_default_instance_);
}
inline const ::msg::CSReqRecvWxRedPacket& CSReqBody::recvwxredpacket() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RecvWxRedPacket)
  return _internal_recvwxredpacket();
}
inline void CSReqBody::unsafe_arena_set_allocated_recvwxredpacket(
    ::msg::CSReqRecvWxRedPacket* recvwxredpacket) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recvwxredpacket_);
  }
  _impl_.recvwxredpacket_ = recvwxredpacket;
  if (recvwxredpacket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RecvWxRedPacket)
}
inline ::msg::CSReqRecvWxRedPacket* CSReqBody::release_recvwxredpacket() {
  
  ::msg::CSReqRecvWxRedPacket* temp = _impl_.recvwxredpacket_;
  _impl_.recvwxredpacket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRecvWxRedPacket* CSReqBody::unsafe_arena_release_recvwxredpacket() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RecvWxRedPacket)
  
  ::msg::CSReqRecvWxRedPacket* temp = _impl_.recvwxredpacket_;
  _impl_.recvwxredpacket_ = nullptr;
  return temp;
}
inline ::msg::CSReqRecvWxRedPacket* CSReqBody::_internal_mutable_recvwxredpacket() {
  
  if (_impl_.recvwxredpacket_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRecvWxRedPacket>(GetArenaForAllocation());
    _impl_.recvwxredpacket_ = p;
  }
  return _impl_.recvwxredpacket_;
}
inline ::msg::CSReqRecvWxRedPacket* CSReqBody::mutable_recvwxredpacket() {
  ::msg::CSReqRecvWxRedPacket* _msg = _internal_mutable_recvwxredpacket();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RecvWxRedPacket)
  return _msg;
}
inline void CSReqBody::set_allocated_recvwxredpacket(::msg::CSReqRecvWxRedPacket* recvwxredpacket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recvwxredpacket_);
  }
  if (recvwxredpacket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recvwxredpacket));
    if (message_arena != submessage_arena) {
      recvwxredpacket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recvwxredpacket, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recvwxredpacket_ = recvwxredpacket;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RecvWxRedPacket)
}

// .msg.CSReqWxRedPktLike WxRedPktLike = 139;
inline bool CSReqBody::_internal_has_wxredpktlike() const {
  return this != internal_default_instance() && _impl_.wxredpktlike_ != nullptr;
}
inline bool CSReqBody::has_wxredpktlike() const {
  return _internal_has_wxredpktlike();
}
inline const ::msg::CSReqWxRedPktLike& CSReqBody::_internal_wxredpktlike() const {
  const ::msg::CSReqWxRedPktLike* p = _impl_.wxredpktlike_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqWxRedPktLike&>(
      ::msg::_CSReqWxRedPktLike_default_instance_);
}
inline const ::msg::CSReqWxRedPktLike& CSReqBody::wxredpktlike() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.WxRedPktLike)
  return _internal_wxredpktlike();
}
inline void CSReqBody::unsafe_arena_set_allocated_wxredpktlike(
    ::msg::CSReqWxRedPktLike* wxredpktlike) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxredpktlike_);
  }
  _impl_.wxredpktlike_ = wxredpktlike;
  if (wxredpktlike) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.WxRedPktLike)
}
inline ::msg::CSReqWxRedPktLike* CSReqBody::release_wxredpktlike() {
  
  ::msg::CSReqWxRedPktLike* temp = _impl_.wxredpktlike_;
  _impl_.wxredpktlike_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqWxRedPktLike* CSReqBody::unsafe_arena_release_wxredpktlike() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.WxRedPktLike)
  
  ::msg::CSReqWxRedPktLike* temp = _impl_.wxredpktlike_;
  _impl_.wxredpktlike_ = nullptr;
  return temp;
}
inline ::msg::CSReqWxRedPktLike* CSReqBody::_internal_mutable_wxredpktlike() {
  
  if (_impl_.wxredpktlike_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqWxRedPktLike>(GetArenaForAllocation());
    _impl_.wxredpktlike_ = p;
  }
  return _impl_.wxredpktlike_;
}
inline ::msg::CSReqWxRedPktLike* CSReqBody::mutable_wxredpktlike() {
  ::msg::CSReqWxRedPktLike* _msg = _internal_mutable_wxredpktlike();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.WxRedPktLike)
  return _msg;
}
inline void CSReqBody::set_allocated_wxredpktlike(::msg::CSReqWxRedPktLike* wxredpktlike) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxredpktlike_);
  }
  if (wxredpktlike) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wxredpktlike));
    if (message_arena != submessage_arena) {
      wxredpktlike = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wxredpktlike, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wxredpktlike_ = wxredpktlike;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.WxRedPktLike)
}

// .msg.CSReqWxRedPktRank WxRedPktRank = 140;
inline bool CSReqBody::_internal_has_wxredpktrank() const {
  return this != internal_default_instance() && _impl_.wxredpktrank_ != nullptr;
}
inline bool CSReqBody::has_wxredpktrank() const {
  return _internal_has_wxredpktrank();
}
inline const ::msg::CSReqWxRedPktRank& CSReqBody::_internal_wxredpktrank() const {
  const ::msg::CSReqWxRedPktRank* p = _impl_.wxredpktrank_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqWxRedPktRank&>(
      ::msg::_CSReqWxRedPktRank_default_instance_);
}
inline const ::msg::CSReqWxRedPktRank& CSReqBody::wxredpktrank() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.WxRedPktRank)
  return _internal_wxredpktrank();
}
inline void CSReqBody::unsafe_arena_set_allocated_wxredpktrank(
    ::msg::CSReqWxRedPktRank* wxredpktrank) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxredpktrank_);
  }
  _impl_.wxredpktrank_ = wxredpktrank;
  if (wxredpktrank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.WxRedPktRank)
}
inline ::msg::CSReqWxRedPktRank* CSReqBody::release_wxredpktrank() {
  
  ::msg::CSReqWxRedPktRank* temp = _impl_.wxredpktrank_;
  _impl_.wxredpktrank_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqWxRedPktRank* CSReqBody::unsafe_arena_release_wxredpktrank() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.WxRedPktRank)
  
  ::msg::CSReqWxRedPktRank* temp = _impl_.wxredpktrank_;
  _impl_.wxredpktrank_ = nullptr;
  return temp;
}
inline ::msg::CSReqWxRedPktRank* CSReqBody::_internal_mutable_wxredpktrank() {
  
  if (_impl_.wxredpktrank_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqWxRedPktRank>(GetArenaForAllocation());
    _impl_.wxredpktrank_ = p;
  }
  return _impl_.wxredpktrank_;
}
inline ::msg::CSReqWxRedPktRank* CSReqBody::mutable_wxredpktrank() {
  ::msg::CSReqWxRedPktRank* _msg = _internal_mutable_wxredpktrank();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.WxRedPktRank)
  return _msg;
}
inline void CSReqBody::set_allocated_wxredpktrank(::msg::CSReqWxRedPktRank* wxredpktrank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxredpktrank_);
  }
  if (wxredpktrank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wxredpktrank));
    if (message_arena != submessage_arena) {
      wxredpktrank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wxredpktrank, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wxredpktrank_ = wxredpktrank;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.WxRedPktRank)
}

// .msg.CSReqObservePrivilege SetObservePrivilege = 141;
inline bool CSReqBody::_internal_has_setobserveprivilege() const {
  return this != internal_default_instance() && _impl_.setobserveprivilege_ != nullptr;
}
inline bool CSReqBody::has_setobserveprivilege() const {
  return _internal_has_setobserveprivilege();
}
inline const ::msg::CSReqObservePrivilege& CSReqBody::_internal_setobserveprivilege() const {
  const ::msg::CSReqObservePrivilege* p = _impl_.setobserveprivilege_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqObservePrivilege&>(
      ::msg::_CSReqObservePrivilege_default_instance_);
}
inline const ::msg::CSReqObservePrivilege& CSReqBody::setobserveprivilege() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SetObservePrivilege)
  return _internal_setobserveprivilege();
}
inline void CSReqBody::unsafe_arena_set_allocated_setobserveprivilege(
    ::msg::CSReqObservePrivilege* setobserveprivilege) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setobserveprivilege_);
  }
  _impl_.setobserveprivilege_ = setobserveprivilege;
  if (setobserveprivilege) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SetObservePrivilege)
}
inline ::msg::CSReqObservePrivilege* CSReqBody::release_setobserveprivilege() {
  
  ::msg::CSReqObservePrivilege* temp = _impl_.setobserveprivilege_;
  _impl_.setobserveprivilege_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqObservePrivilege* CSReqBody::unsafe_arena_release_setobserveprivilege() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SetObservePrivilege)
  
  ::msg::CSReqObservePrivilege* temp = _impl_.setobserveprivilege_;
  _impl_.setobserveprivilege_ = nullptr;
  return temp;
}
inline ::msg::CSReqObservePrivilege* CSReqBody::_internal_mutable_setobserveprivilege() {
  
  if (_impl_.setobserveprivilege_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqObservePrivilege>(GetArenaForAllocation());
    _impl_.setobserveprivilege_ = p;
  }
  return _impl_.setobserveprivilege_;
}
inline ::msg::CSReqObservePrivilege* CSReqBody::mutable_setobserveprivilege() {
  ::msg::CSReqObservePrivilege* _msg = _internal_mutable_setobserveprivilege();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SetObservePrivilege)
  return _msg;
}
inline void CSReqBody::set_allocated_setobserveprivilege(::msg::CSReqObservePrivilege* setobserveprivilege) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setobserveprivilege_);
  }
  if (setobserveprivilege) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setobserveprivilege));
    if (message_arena != submessage_arena) {
      setobserveprivilege = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setobserveprivilege, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setobserveprivilege_ = setobserveprivilege;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SetObservePrivilege)
}

// .msg.CSReqPresetFastChat PresetFastChat = 142;
inline bool CSReqBody::_internal_has_presetfastchat() const {
  return this != internal_default_instance() && _impl_.presetfastchat_ != nullptr;
}
inline bool CSReqBody::has_presetfastchat() const {
  return _internal_has_presetfastchat();
}
inline const ::msg::CSReqPresetFastChat& CSReqBody::_internal_presetfastchat() const {
  const ::msg::CSReqPresetFastChat* p = _impl_.presetfastchat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPresetFastChat&>(
      ::msg::_CSReqPresetFastChat_default_instance_);
}
inline const ::msg::CSReqPresetFastChat& CSReqBody::presetfastchat() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PresetFastChat)
  return _internal_presetfastchat();
}
inline void CSReqBody::unsafe_arena_set_allocated_presetfastchat(
    ::msg::CSReqPresetFastChat* presetfastchat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.presetfastchat_);
  }
  _impl_.presetfastchat_ = presetfastchat;
  if (presetfastchat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PresetFastChat)
}
inline ::msg::CSReqPresetFastChat* CSReqBody::release_presetfastchat() {
  
  ::msg::CSReqPresetFastChat* temp = _impl_.presetfastchat_;
  _impl_.presetfastchat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPresetFastChat* CSReqBody::unsafe_arena_release_presetfastchat() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PresetFastChat)
  
  ::msg::CSReqPresetFastChat* temp = _impl_.presetfastchat_;
  _impl_.presetfastchat_ = nullptr;
  return temp;
}
inline ::msg::CSReqPresetFastChat* CSReqBody::_internal_mutable_presetfastchat() {
  
  if (_impl_.presetfastchat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPresetFastChat>(GetArenaForAllocation());
    _impl_.presetfastchat_ = p;
  }
  return _impl_.presetfastchat_;
}
inline ::msg::CSReqPresetFastChat* CSReqBody::mutable_presetfastchat() {
  ::msg::CSReqPresetFastChat* _msg = _internal_mutable_presetfastchat();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PresetFastChat)
  return _msg;
}
inline void CSReqBody::set_allocated_presetfastchat(::msg::CSReqPresetFastChat* presetfastchat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.presetfastchat_);
  }
  if (presetfastchat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(presetfastchat));
    if (message_arena != submessage_arena) {
      presetfastchat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, presetfastchat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.presetfastchat_ = presetfastchat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PresetFastChat)
}

// .msg.CSReqChangeSlotTeam ChangeSlotTeam = 143;
inline bool CSReqBody::_internal_has_changeslotteam() const {
  return this != internal_default_instance() && _impl_.changeslotteam_ != nullptr;
}
inline bool CSReqBody::has_changeslotteam() const {
  return _internal_has_changeslotteam();
}
inline const ::msg::CSReqChangeSlotTeam& CSReqBody::_internal_changeslotteam() const {
  const ::msg::CSReqChangeSlotTeam* p = _impl_.changeslotteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqChangeSlotTeam&>(
      ::msg::_CSReqChangeSlotTeam_default_instance_);
}
inline const ::msg::CSReqChangeSlotTeam& CSReqBody::changeslotteam() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ChangeSlotTeam)
  return _internal_changeslotteam();
}
inline void CSReqBody::unsafe_arena_set_allocated_changeslotteam(
    ::msg::CSReqChangeSlotTeam* changeslotteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changeslotteam_);
  }
  _impl_.changeslotteam_ = changeslotteam;
  if (changeslotteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ChangeSlotTeam)
}
inline ::msg::CSReqChangeSlotTeam* CSReqBody::release_changeslotteam() {
  
  ::msg::CSReqChangeSlotTeam* temp = _impl_.changeslotteam_;
  _impl_.changeslotteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqChangeSlotTeam* CSReqBody::unsafe_arena_release_changeslotteam() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ChangeSlotTeam)
  
  ::msg::CSReqChangeSlotTeam* temp = _impl_.changeslotteam_;
  _impl_.changeslotteam_ = nullptr;
  return temp;
}
inline ::msg::CSReqChangeSlotTeam* CSReqBody::_internal_mutable_changeslotteam() {
  
  if (_impl_.changeslotteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqChangeSlotTeam>(GetArenaForAllocation());
    _impl_.changeslotteam_ = p;
  }
  return _impl_.changeslotteam_;
}
inline ::msg::CSReqChangeSlotTeam* CSReqBody::mutable_changeslotteam() {
  ::msg::CSReqChangeSlotTeam* _msg = _internal_mutable_changeslotteam();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ChangeSlotTeam)
  return _msg;
}
inline void CSReqBody::set_allocated_changeslotteam(::msg::CSReqChangeSlotTeam* changeslotteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changeslotteam_);
  }
  if (changeslotteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(changeslotteam));
    if (message_arena != submessage_arena) {
      changeslotteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changeslotteam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.changeslotteam_ = changeslotteam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ChangeSlotTeam)
}

// .msg.CSReqChangeSubModeTeam ChangeSubModeTeam = 144;
inline bool CSReqBody::_internal_has_changesubmodeteam() const {
  return this != internal_default_instance() && _impl_.changesubmodeteam_ != nullptr;
}
inline bool CSReqBody::has_changesubmodeteam() const {
  return _internal_has_changesubmodeteam();
}
inline const ::msg::CSReqChangeSubModeTeam& CSReqBody::_internal_changesubmodeteam() const {
  const ::msg::CSReqChangeSubModeTeam* p = _impl_.changesubmodeteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqChangeSubModeTeam&>(
      ::msg::_CSReqChangeSubModeTeam_default_instance_);
}
inline const ::msg::CSReqChangeSubModeTeam& CSReqBody::changesubmodeteam() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ChangeSubModeTeam)
  return _internal_changesubmodeteam();
}
inline void CSReqBody::unsafe_arena_set_allocated_changesubmodeteam(
    ::msg::CSReqChangeSubModeTeam* changesubmodeteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changesubmodeteam_);
  }
  _impl_.changesubmodeteam_ = changesubmodeteam;
  if (changesubmodeteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ChangeSubModeTeam)
}
inline ::msg::CSReqChangeSubModeTeam* CSReqBody::release_changesubmodeteam() {
  
  ::msg::CSReqChangeSubModeTeam* temp = _impl_.changesubmodeteam_;
  _impl_.changesubmodeteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqChangeSubModeTeam* CSReqBody::unsafe_arena_release_changesubmodeteam() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ChangeSubModeTeam)
  
  ::msg::CSReqChangeSubModeTeam* temp = _impl_.changesubmodeteam_;
  _impl_.changesubmodeteam_ = nullptr;
  return temp;
}
inline ::msg::CSReqChangeSubModeTeam* CSReqBody::_internal_mutable_changesubmodeteam() {
  
  if (_impl_.changesubmodeteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqChangeSubModeTeam>(GetArenaForAllocation());
    _impl_.changesubmodeteam_ = p;
  }
  return _impl_.changesubmodeteam_;
}
inline ::msg::CSReqChangeSubModeTeam* CSReqBody::mutable_changesubmodeteam() {
  ::msg::CSReqChangeSubModeTeam* _msg = _internal_mutable_changesubmodeteam();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ChangeSubModeTeam)
  return _msg;
}
inline void CSReqBody::set_allocated_changesubmodeteam(::msg::CSReqChangeSubModeTeam* changesubmodeteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changesubmodeteam_);
  }
  if (changesubmodeteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(changesubmodeteam));
    if (message_arena != submessage_arena) {
      changesubmodeteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changesubmodeteam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.changesubmodeteam_ = changesubmodeteam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ChangeSubModeTeam)
}

// .msg.CSReqConfirmChangeSlotTeam ConfirmChangeSlotTeam = 145;
inline bool CSReqBody::_internal_has_confirmchangeslotteam() const {
  return this != internal_default_instance() && _impl_.confirmchangeslotteam_ != nullptr;
}
inline bool CSReqBody::has_confirmchangeslotteam() const {
  return _internal_has_confirmchangeslotteam();
}
inline const ::msg::CSReqConfirmChangeSlotTeam& CSReqBody::_internal_confirmchangeslotteam() const {
  const ::msg::CSReqConfirmChangeSlotTeam* p = _impl_.confirmchangeslotteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqConfirmChangeSlotTeam&>(
      ::msg::_CSReqConfirmChangeSlotTeam_default_instance_);
}
inline const ::msg::CSReqConfirmChangeSlotTeam& CSReqBody::confirmchangeslotteam() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ConfirmChangeSlotTeam)
  return _internal_confirmchangeslotteam();
}
inline void CSReqBody::unsafe_arena_set_allocated_confirmchangeslotteam(
    ::msg::CSReqConfirmChangeSlotTeam* confirmchangeslotteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.confirmchangeslotteam_);
  }
  _impl_.confirmchangeslotteam_ = confirmchangeslotteam;
  if (confirmchangeslotteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ConfirmChangeSlotTeam)
}
inline ::msg::CSReqConfirmChangeSlotTeam* CSReqBody::release_confirmchangeslotteam() {
  
  ::msg::CSReqConfirmChangeSlotTeam* temp = _impl_.confirmchangeslotteam_;
  _impl_.confirmchangeslotteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqConfirmChangeSlotTeam* CSReqBody::unsafe_arena_release_confirmchangeslotteam() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ConfirmChangeSlotTeam)
  
  ::msg::CSReqConfirmChangeSlotTeam* temp = _impl_.confirmchangeslotteam_;
  _impl_.confirmchangeslotteam_ = nullptr;
  return temp;
}
inline ::msg::CSReqConfirmChangeSlotTeam* CSReqBody::_internal_mutable_confirmchangeslotteam() {
  
  if (_impl_.confirmchangeslotteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqConfirmChangeSlotTeam>(GetArenaForAllocation());
    _impl_.confirmchangeslotteam_ = p;
  }
  return _impl_.confirmchangeslotteam_;
}
inline ::msg::CSReqConfirmChangeSlotTeam* CSReqBody::mutable_confirmchangeslotteam() {
  ::msg::CSReqConfirmChangeSlotTeam* _msg = _internal_mutable_confirmchangeslotteam();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ConfirmChangeSlotTeam)
  return _msg;
}
inline void CSReqBody::set_allocated_confirmchangeslotteam(::msg::CSReqConfirmChangeSlotTeam* confirmchangeslotteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.confirmchangeslotteam_);
  }
  if (confirmchangeslotteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(confirmchangeslotteam));
    if (message_arena != submessage_arena) {
      confirmchangeslotteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, confirmchangeslotteam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.confirmchangeslotteam_ = confirmchangeslotteam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ConfirmChangeSlotTeam)
}

// .msg.CSReqPvpRoundEnd PvpRoundEnd = 146;
inline bool CSReqBody::_internal_has_pvproundend() const {
  return this != internal_default_instance() && _impl_.pvproundend_ != nullptr;
}
inline bool CSReqBody::has_pvproundend() const {
  return _internal_has_pvproundend();
}
inline const ::msg::CSReqPvpRoundEnd& CSReqBody::_internal_pvproundend() const {
  const ::msg::CSReqPvpRoundEnd* p = _impl_.pvproundend_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPvpRoundEnd&>(
      ::msg::_CSReqPvpRoundEnd_default_instance_);
}
inline const ::msg::CSReqPvpRoundEnd& CSReqBody::pvproundend() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PvpRoundEnd)
  return _internal_pvproundend();
}
inline void CSReqBody::unsafe_arena_set_allocated_pvproundend(
    ::msg::CSReqPvpRoundEnd* pvproundend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvproundend_);
  }
  _impl_.pvproundend_ = pvproundend;
  if (pvproundend) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PvpRoundEnd)
}
inline ::msg::CSReqPvpRoundEnd* CSReqBody::release_pvproundend() {
  
  ::msg::CSReqPvpRoundEnd* temp = _impl_.pvproundend_;
  _impl_.pvproundend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPvpRoundEnd* CSReqBody::unsafe_arena_release_pvproundend() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PvpRoundEnd)
  
  ::msg::CSReqPvpRoundEnd* temp = _impl_.pvproundend_;
  _impl_.pvproundend_ = nullptr;
  return temp;
}
inline ::msg::CSReqPvpRoundEnd* CSReqBody::_internal_mutable_pvproundend() {
  
  if (_impl_.pvproundend_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPvpRoundEnd>(GetArenaForAllocation());
    _impl_.pvproundend_ = p;
  }
  return _impl_.pvproundend_;
}
inline ::msg::CSReqPvpRoundEnd* CSReqBody::mutable_pvproundend() {
  ::msg::CSReqPvpRoundEnd* _msg = _internal_mutable_pvproundend();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PvpRoundEnd)
  return _msg;
}
inline void CSReqBody::set_allocated_pvproundend(::msg::CSReqPvpRoundEnd* pvproundend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvproundend_);
  }
  if (pvproundend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvproundend));
    if (message_arena != submessage_arena) {
      pvproundend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvproundend, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvproundend_ = pvproundend;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PvpRoundEnd)
}

// .msg.CSReqObserveChatLogin ObserveChatLogin = 147;
inline bool CSReqBody::_internal_has_observechatlogin() const {
  return this != internal_default_instance() && _impl_.observechatlogin_ != nullptr;
}
inline bool CSReqBody::has_observechatlogin() const {
  return _internal_has_observechatlogin();
}
inline const ::msg::CSReqObserveChatLogin& CSReqBody::_internal_observechatlogin() const {
  const ::msg::CSReqObserveChatLogin* p = _impl_.observechatlogin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqObserveChatLogin&>(
      ::msg::_CSReqObserveChatLogin_default_instance_);
}
inline const ::msg::CSReqObserveChatLogin& CSReqBody::observechatlogin() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ObserveChatLogin)
  return _internal_observechatlogin();
}
inline void CSReqBody::unsafe_arena_set_allocated_observechatlogin(
    ::msg::CSReqObserveChatLogin* observechatlogin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observechatlogin_);
  }
  _impl_.observechatlogin_ = observechatlogin;
  if (observechatlogin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ObserveChatLogin)
}
inline ::msg::CSReqObserveChatLogin* CSReqBody::release_observechatlogin() {
  
  ::msg::CSReqObserveChatLogin* temp = _impl_.observechatlogin_;
  _impl_.observechatlogin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqObserveChatLogin* CSReqBody::unsafe_arena_release_observechatlogin() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ObserveChatLogin)
  
  ::msg::CSReqObserveChatLogin* temp = _impl_.observechatlogin_;
  _impl_.observechatlogin_ = nullptr;
  return temp;
}
inline ::msg::CSReqObserveChatLogin* CSReqBody::_internal_mutable_observechatlogin() {
  
  if (_impl_.observechatlogin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqObserveChatLogin>(GetArenaForAllocation());
    _impl_.observechatlogin_ = p;
  }
  return _impl_.observechatlogin_;
}
inline ::msg::CSReqObserveChatLogin* CSReqBody::mutable_observechatlogin() {
  ::msg::CSReqObserveChatLogin* _msg = _internal_mutable_observechatlogin();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ObserveChatLogin)
  return _msg;
}
inline void CSReqBody::set_allocated_observechatlogin(::msg::CSReqObserveChatLogin* observechatlogin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observechatlogin_);
  }
  if (observechatlogin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observechatlogin));
    if (message_arena != submessage_arena) {
      observechatlogin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observechatlogin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.observechatlogin_ = observechatlogin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ObserveChatLogin)
}

// .msg.CSReqPvpConfirm PvpConfirm = 148;
inline bool CSReqBody::_internal_has_pvpconfirm() const {
  return this != internal_default_instance() && _impl_.pvpconfirm_ != nullptr;
}
inline bool CSReqBody::has_pvpconfirm() const {
  return _internal_has_pvpconfirm();
}
inline const ::msg::CSReqPvpConfirm& CSReqBody::_internal_pvpconfirm() const {
  const ::msg::CSReqPvpConfirm* p = _impl_.pvpconfirm_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPvpConfirm&>(
      ::msg::_CSReqPvpConfirm_default_instance_);
}
inline const ::msg::CSReqPvpConfirm& CSReqBody::pvpconfirm() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PvpConfirm)
  return _internal_pvpconfirm();
}
inline void CSReqBody::unsafe_arena_set_allocated_pvpconfirm(
    ::msg::CSReqPvpConfirm* pvpconfirm) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpconfirm_);
  }
  _impl_.pvpconfirm_ = pvpconfirm;
  if (pvpconfirm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PvpConfirm)
}
inline ::msg::CSReqPvpConfirm* CSReqBody::release_pvpconfirm() {
  
  ::msg::CSReqPvpConfirm* temp = _impl_.pvpconfirm_;
  _impl_.pvpconfirm_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPvpConfirm* CSReqBody::unsafe_arena_release_pvpconfirm() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PvpConfirm)
  
  ::msg::CSReqPvpConfirm* temp = _impl_.pvpconfirm_;
  _impl_.pvpconfirm_ = nullptr;
  return temp;
}
inline ::msg::CSReqPvpConfirm* CSReqBody::_internal_mutable_pvpconfirm() {
  
  if (_impl_.pvpconfirm_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPvpConfirm>(GetArenaForAllocation());
    _impl_.pvpconfirm_ = p;
  }
  return _impl_.pvpconfirm_;
}
inline ::msg::CSReqPvpConfirm* CSReqBody::mutable_pvpconfirm() {
  ::msg::CSReqPvpConfirm* _msg = _internal_mutable_pvpconfirm();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PvpConfirm)
  return _msg;
}
inline void CSReqBody::set_allocated_pvpconfirm(::msg::CSReqPvpConfirm* pvpconfirm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpconfirm_);
  }
  if (pvpconfirm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvpconfirm));
    if (message_arena != submessage_arena) {
      pvpconfirm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpconfirm, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpconfirm_ = pvpconfirm;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PvpConfirm)
}

// .msg.CSReqActivityPicShare ActivityPicShare = 149;
inline bool CSReqBody::_internal_has_activitypicshare() const {
  return this != internal_default_instance() && _impl_.activitypicshare_ != nullptr;
}
inline bool CSReqBody::has_activitypicshare() const {
  return _internal_has_activitypicshare();
}
inline const ::msg::CSReqActivityPicShare& CSReqBody::_internal_activitypicshare() const {
  const ::msg::CSReqActivityPicShare* p = _impl_.activitypicshare_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqActivityPicShare&>(
      ::msg::_CSReqActivityPicShare_default_instance_);
}
inline const ::msg::CSReqActivityPicShare& CSReqBody::activitypicshare() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ActivityPicShare)
  return _internal_activitypicshare();
}
inline void CSReqBody::unsafe_arena_set_allocated_activitypicshare(
    ::msg::CSReqActivityPicShare* activitypicshare) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activitypicshare_);
  }
  _impl_.activitypicshare_ = activitypicshare;
  if (activitypicshare) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ActivityPicShare)
}
inline ::msg::CSReqActivityPicShare* CSReqBody::release_activitypicshare() {
  
  ::msg::CSReqActivityPicShare* temp = _impl_.activitypicshare_;
  _impl_.activitypicshare_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqActivityPicShare* CSReqBody::unsafe_arena_release_activitypicshare() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ActivityPicShare)
  
  ::msg::CSReqActivityPicShare* temp = _impl_.activitypicshare_;
  _impl_.activitypicshare_ = nullptr;
  return temp;
}
inline ::msg::CSReqActivityPicShare* CSReqBody::_internal_mutable_activitypicshare() {
  
  if (_impl_.activitypicshare_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqActivityPicShare>(GetArenaForAllocation());
    _impl_.activitypicshare_ = p;
  }
  return _impl_.activitypicshare_;
}
inline ::msg::CSReqActivityPicShare* CSReqBody::mutable_activitypicshare() {
  ::msg::CSReqActivityPicShare* _msg = _internal_mutable_activitypicshare();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ActivityPicShare)
  return _msg;
}
inline void CSReqBody::set_allocated_activitypicshare(::msg::CSReqActivityPicShare* activitypicshare) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activitypicshare_);
  }
  if (activitypicshare) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activitypicshare));
    if (message_arena != submessage_arena) {
      activitypicshare = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activitypicshare, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.activitypicshare_ = activitypicshare;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ActivityPicShare)
}

// .msg.CSReqBindOldBusinessPlayer BindOldBusinessPlayer = 150;
inline bool CSReqBody::_internal_has_bindoldbusinessplayer() const {
  return this != internal_default_instance() && _impl_.bindoldbusinessplayer_ != nullptr;
}
inline bool CSReqBody::has_bindoldbusinessplayer() const {
  return _internal_has_bindoldbusinessplayer();
}
inline const ::msg::CSReqBindOldBusinessPlayer& CSReqBody::_internal_bindoldbusinessplayer() const {
  const ::msg::CSReqBindOldBusinessPlayer* p = _impl_.bindoldbusinessplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqBindOldBusinessPlayer&>(
      ::msg::_CSReqBindOldBusinessPlayer_default_instance_);
}
inline const ::msg::CSReqBindOldBusinessPlayer& CSReqBody::bindoldbusinessplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.BindOldBusinessPlayer)
  return _internal_bindoldbusinessplayer();
}
inline void CSReqBody::unsafe_arena_set_allocated_bindoldbusinessplayer(
    ::msg::CSReqBindOldBusinessPlayer* bindoldbusinessplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindoldbusinessplayer_);
  }
  _impl_.bindoldbusinessplayer_ = bindoldbusinessplayer;
  if (bindoldbusinessplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.BindOldBusinessPlayer)
}
inline ::msg::CSReqBindOldBusinessPlayer* CSReqBody::release_bindoldbusinessplayer() {
  
  ::msg::CSReqBindOldBusinessPlayer* temp = _impl_.bindoldbusinessplayer_;
  _impl_.bindoldbusinessplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqBindOldBusinessPlayer* CSReqBody::unsafe_arena_release_bindoldbusinessplayer() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.BindOldBusinessPlayer)
  
  ::msg::CSReqBindOldBusinessPlayer* temp = _impl_.bindoldbusinessplayer_;
  _impl_.bindoldbusinessplayer_ = nullptr;
  return temp;
}
inline ::msg::CSReqBindOldBusinessPlayer* CSReqBody::_internal_mutable_bindoldbusinessplayer() {
  
  if (_impl_.bindoldbusinessplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqBindOldBusinessPlayer>(GetArenaForAllocation());
    _impl_.bindoldbusinessplayer_ = p;
  }
  return _impl_.bindoldbusinessplayer_;
}
inline ::msg::CSReqBindOldBusinessPlayer* CSReqBody::mutable_bindoldbusinessplayer() {
  ::msg::CSReqBindOldBusinessPlayer* _msg = _internal_mutable_bindoldbusinessplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.BindOldBusinessPlayer)
  return _msg;
}
inline void CSReqBody::set_allocated_bindoldbusinessplayer(::msg::CSReqBindOldBusinessPlayer* bindoldbusinessplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindoldbusinessplayer_);
  }
  if (bindoldbusinessplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bindoldbusinessplayer));
    if (message_arena != submessage_arena) {
      bindoldbusinessplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bindoldbusinessplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bindoldbusinessplayer_ = bindoldbusinessplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.BindOldBusinessPlayer)
}

// .msg.CSReqTranslate Translate = 151;
inline bool CSReqBody::_internal_has_translate() const {
  return this != internal_default_instance() && _impl_.translate_ != nullptr;
}
inline bool CSReqBody::has_translate() const {
  return _internal_has_translate();
}
inline const ::msg::CSReqTranslate& CSReqBody::_internal_translate() const {
  const ::msg::CSReqTranslate* p = _impl_.translate_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqTranslate&>(
      ::msg::_CSReqTranslate_default_instance_);
}
inline const ::msg::CSReqTranslate& CSReqBody::translate() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.Translate)
  return _internal_translate();
}
inline void CSReqBody::unsafe_arena_set_allocated_translate(
    ::msg::CSReqTranslate* translate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translate_);
  }
  _impl_.translate_ = translate;
  if (translate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.Translate)
}
inline ::msg::CSReqTranslate* CSReqBody::release_translate() {
  
  ::msg::CSReqTranslate* temp = _impl_.translate_;
  _impl_.translate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqTranslate* CSReqBody::unsafe_arena_release_translate() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.Translate)
  
  ::msg::CSReqTranslate* temp = _impl_.translate_;
  _impl_.translate_ = nullptr;
  return temp;
}
inline ::msg::CSReqTranslate* CSReqBody::_internal_mutable_translate() {
  
  if (_impl_.translate_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqTranslate>(GetArenaForAllocation());
    _impl_.translate_ = p;
  }
  return _impl_.translate_;
}
inline ::msg::CSReqTranslate* CSReqBody::mutable_translate() {
  ::msg::CSReqTranslate* _msg = _internal_mutable_translate();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.Translate)
  return _msg;
}
inline void CSReqBody::set_allocated_translate(::msg::CSReqTranslate* translate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translate_);
  }
  if (translate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translate));
    if (message_arena != submessage_arena) {
      translate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.translate_ = translate;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.Translate)
}

// .msg.CSReqSubmitQuestionnaire SubmitQuestionnaire = 152;
inline bool CSReqBody::_internal_has_submitquestionnaire() const {
  return this != internal_default_instance() && _impl_.submitquestionnaire_ != nullptr;
}
inline bool CSReqBody::has_submitquestionnaire() const {
  return _internal_has_submitquestionnaire();
}
inline const ::msg::CSReqSubmitQuestionnaire& CSReqBody::_internal_submitquestionnaire() const {
  const ::msg::CSReqSubmitQuestionnaire* p = _impl_.submitquestionnaire_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSubmitQuestionnaire&>(
      ::msg::_CSReqSubmitQuestionnaire_default_instance_);
}
inline const ::msg::CSReqSubmitQuestionnaire& CSReqBody::submitquestionnaire() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SubmitQuestionnaire)
  return _internal_submitquestionnaire();
}
inline void CSReqBody::unsafe_arena_set_allocated_submitquestionnaire(
    ::msg::CSReqSubmitQuestionnaire* submitquestionnaire) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submitquestionnaire_);
  }
  _impl_.submitquestionnaire_ = submitquestionnaire;
  if (submitquestionnaire) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SubmitQuestionnaire)
}
inline ::msg::CSReqSubmitQuestionnaire* CSReqBody::release_submitquestionnaire() {
  
  ::msg::CSReqSubmitQuestionnaire* temp = _impl_.submitquestionnaire_;
  _impl_.submitquestionnaire_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSubmitQuestionnaire* CSReqBody::unsafe_arena_release_submitquestionnaire() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SubmitQuestionnaire)
  
  ::msg::CSReqSubmitQuestionnaire* temp = _impl_.submitquestionnaire_;
  _impl_.submitquestionnaire_ = nullptr;
  return temp;
}
inline ::msg::CSReqSubmitQuestionnaire* CSReqBody::_internal_mutable_submitquestionnaire() {
  
  if (_impl_.submitquestionnaire_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSubmitQuestionnaire>(GetArenaForAllocation());
    _impl_.submitquestionnaire_ = p;
  }
  return _impl_.submitquestionnaire_;
}
inline ::msg::CSReqSubmitQuestionnaire* CSReqBody::mutable_submitquestionnaire() {
  ::msg::CSReqSubmitQuestionnaire* _msg = _internal_mutable_submitquestionnaire();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SubmitQuestionnaire)
  return _msg;
}
inline void CSReqBody::set_allocated_submitquestionnaire(::msg::CSReqSubmitQuestionnaire* submitquestionnaire) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submitquestionnaire_);
  }
  if (submitquestionnaire) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submitquestionnaire));
    if (message_arena != submessage_arena) {
      submitquestionnaire = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submitquestionnaire, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.submitquestionnaire_ = submitquestionnaire;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SubmitQuestionnaire)
}

// .msg.CSReqCancelChangeSlot CancelChangeSlot = 153;
inline bool CSReqBody::_internal_has_cancelchangeslot() const {
  return this != internal_default_instance() && _impl_.cancelchangeslot_ != nullptr;
}
inline bool CSReqBody::has_cancelchangeslot() const {
  return _internal_has_cancelchangeslot();
}
inline const ::msg::CSReqCancelChangeSlot& CSReqBody::_internal_cancelchangeslot() const {
  const ::msg::CSReqCancelChangeSlot* p = _impl_.cancelchangeslot_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqCancelChangeSlot&>(
      ::msg::_CSReqCancelChangeSlot_default_instance_);
}
inline const ::msg::CSReqCancelChangeSlot& CSReqBody::cancelchangeslot() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.CancelChangeSlot)
  return _internal_cancelchangeslot();
}
inline void CSReqBody::unsafe_arena_set_allocated_cancelchangeslot(
    ::msg::CSReqCancelChangeSlot* cancelchangeslot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cancelchangeslot_);
  }
  _impl_.cancelchangeslot_ = cancelchangeslot;
  if (cancelchangeslot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.CancelChangeSlot)
}
inline ::msg::CSReqCancelChangeSlot* CSReqBody::release_cancelchangeslot() {
  
  ::msg::CSReqCancelChangeSlot* temp = _impl_.cancelchangeslot_;
  _impl_.cancelchangeslot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqCancelChangeSlot* CSReqBody::unsafe_arena_release_cancelchangeslot() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.CancelChangeSlot)
  
  ::msg::CSReqCancelChangeSlot* temp = _impl_.cancelchangeslot_;
  _impl_.cancelchangeslot_ = nullptr;
  return temp;
}
inline ::msg::CSReqCancelChangeSlot* CSReqBody::_internal_mutable_cancelchangeslot() {
  
  if (_impl_.cancelchangeslot_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqCancelChangeSlot>(GetArenaForAllocation());
    _impl_.cancelchangeslot_ = p;
  }
  return _impl_.cancelchangeslot_;
}
inline ::msg::CSReqCancelChangeSlot* CSReqBody::mutable_cancelchangeslot() {
  ::msg::CSReqCancelChangeSlot* _msg = _internal_mutable_cancelchangeslot();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.CancelChangeSlot)
  return _msg;
}
inline void CSReqBody::set_allocated_cancelchangeslot(::msg::CSReqCancelChangeSlot* cancelchangeslot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cancelchangeslot_);
  }
  if (cancelchangeslot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancelchangeslot));
    if (message_arena != submessage_arena) {
      cancelchangeslot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancelchangeslot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cancelchangeslot_ = cancelchangeslot;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.CancelChangeSlot)
}

// .msg.CSReqSetChessSkin SetChessSkin = 154;
inline bool CSReqBody::_internal_has_setchessskin() const {
  return this != internal_default_instance() && _impl_.setchessskin_ != nullptr;
}
inline bool CSReqBody::has_setchessskin() const {
  return _internal_has_setchessskin();
}
inline const ::msg::CSReqSetChessSkin& CSReqBody::_internal_setchessskin() const {
  const ::msg::CSReqSetChessSkin* p = _impl_.setchessskin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSetChessSkin&>(
      ::msg::_CSReqSetChessSkin_default_instance_);
}
inline const ::msg::CSReqSetChessSkin& CSReqBody::setchessskin() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SetChessSkin)
  return _internal_setchessskin();
}
inline void CSReqBody::unsafe_arena_set_allocated_setchessskin(
    ::msg::CSReqSetChessSkin* setchessskin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setchessskin_);
  }
  _impl_.setchessskin_ = setchessskin;
  if (setchessskin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SetChessSkin)
}
inline ::msg::CSReqSetChessSkin* CSReqBody::release_setchessskin() {
  
  ::msg::CSReqSetChessSkin* temp = _impl_.setchessskin_;
  _impl_.setchessskin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSetChessSkin* CSReqBody::unsafe_arena_release_setchessskin() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SetChessSkin)
  
  ::msg::CSReqSetChessSkin* temp = _impl_.setchessskin_;
  _impl_.setchessskin_ = nullptr;
  return temp;
}
inline ::msg::CSReqSetChessSkin* CSReqBody::_internal_mutable_setchessskin() {
  
  if (_impl_.setchessskin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSetChessSkin>(GetArenaForAllocation());
    _impl_.setchessskin_ = p;
  }
  return _impl_.setchessskin_;
}
inline ::msg::CSReqSetChessSkin* CSReqBody::mutable_setchessskin() {
  ::msg::CSReqSetChessSkin* _msg = _internal_mutable_setchessskin();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SetChessSkin)
  return _msg;
}
inline void CSReqBody::set_allocated_setchessskin(::msg::CSReqSetChessSkin* setchessskin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setchessskin_);
  }
  if (setchessskin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setchessskin));
    if (message_arena != submessage_arena) {
      setchessskin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setchessskin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setchessskin_ = setchessskin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SetChessSkin)
}

// .msg.CSReqUnsetChessSkin UnsetChessSkin = 155;
inline bool CSReqBody::_internal_has_unsetchessskin() const {
  return this != internal_default_instance() && _impl_.unsetchessskin_ != nullptr;
}
inline bool CSReqBody::has_unsetchessskin() const {
  return _internal_has_unsetchessskin();
}
inline const ::msg::CSReqUnsetChessSkin& CSReqBody::_internal_unsetchessskin() const {
  const ::msg::CSReqUnsetChessSkin* p = _impl_.unsetchessskin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUnsetChessSkin&>(
      ::msg::_CSReqUnsetChessSkin_default_instance_);
}
inline const ::msg::CSReqUnsetChessSkin& CSReqBody::unsetchessskin() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UnsetChessSkin)
  return _internal_unsetchessskin();
}
inline void CSReqBody::unsafe_arena_set_allocated_unsetchessskin(
    ::msg::CSReqUnsetChessSkin* unsetchessskin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetchessskin_);
  }
  _impl_.unsetchessskin_ = unsetchessskin;
  if (unsetchessskin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UnsetChessSkin)
}
inline ::msg::CSReqUnsetChessSkin* CSReqBody::release_unsetchessskin() {
  
  ::msg::CSReqUnsetChessSkin* temp = _impl_.unsetchessskin_;
  _impl_.unsetchessskin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUnsetChessSkin* CSReqBody::unsafe_arena_release_unsetchessskin() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UnsetChessSkin)
  
  ::msg::CSReqUnsetChessSkin* temp = _impl_.unsetchessskin_;
  _impl_.unsetchessskin_ = nullptr;
  return temp;
}
inline ::msg::CSReqUnsetChessSkin* CSReqBody::_internal_mutable_unsetchessskin() {
  
  if (_impl_.unsetchessskin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUnsetChessSkin>(GetArenaForAllocation());
    _impl_.unsetchessskin_ = p;
  }
  return _impl_.unsetchessskin_;
}
inline ::msg::CSReqUnsetChessSkin* CSReqBody::mutable_unsetchessskin() {
  ::msg::CSReqUnsetChessSkin* _msg = _internal_mutable_unsetchessskin();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UnsetChessSkin)
  return _msg;
}
inline void CSReqBody::set_allocated_unsetchessskin(::msg::CSReqUnsetChessSkin* unsetchessskin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetchessskin_);
  }
  if (unsetchessskin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unsetchessskin));
    if (message_arena != submessage_arena) {
      unsetchessskin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsetchessskin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unsetchessskin_ = unsetchessskin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UnsetChessSkin)
}

// .msg.CSReqCompose Compose = 156;
inline bool CSReqBody::_internal_has_compose() const {
  return this != internal_default_instance() && _impl_.compose_ != nullptr;
}
inline bool CSReqBody::has_compose() const {
  return _internal_has_compose();
}
inline const ::msg::CSReqCompose& CSReqBody::_internal_compose() const {
  const ::msg::CSReqCompose* p = _impl_.compose_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqCompose&>(
      ::msg::_CSReqCompose_default_instance_);
}
inline const ::msg::CSReqCompose& CSReqBody::compose() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.Compose)
  return _internal_compose();
}
inline void CSReqBody::unsafe_arena_set_allocated_compose(
    ::msg::CSReqCompose* compose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.compose_);
  }
  _impl_.compose_ = compose;
  if (compose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.Compose)
}
inline ::msg::CSReqCompose* CSReqBody::release_compose() {
  
  ::msg::CSReqCompose* temp = _impl_.compose_;
  _impl_.compose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqCompose* CSReqBody::unsafe_arena_release_compose() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.Compose)
  
  ::msg::CSReqCompose* temp = _impl_.compose_;
  _impl_.compose_ = nullptr;
  return temp;
}
inline ::msg::CSReqCompose* CSReqBody::_internal_mutable_compose() {
  
  if (_impl_.compose_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqCompose>(GetArenaForAllocation());
    _impl_.compose_ = p;
  }
  return _impl_.compose_;
}
inline ::msg::CSReqCompose* CSReqBody::mutable_compose() {
  ::msg::CSReqCompose* _msg = _internal_mutable_compose();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.Compose)
  return _msg;
}
inline void CSReqBody::set_allocated_compose(::msg::CSReqCompose* compose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.compose_);
  }
  if (compose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compose));
    if (message_arena != submessage_arena) {
      compose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.compose_ = compose;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.Compose)
}

// .msg.CSReqOffHelpReddot OffHelpReddot = 157;
inline bool CSReqBody::_internal_has_offhelpreddot() const {
  return this != internal_default_instance() && _impl_.offhelpreddot_ != nullptr;
}
inline bool CSReqBody::has_offhelpreddot() const {
  return _internal_has_offhelpreddot();
}
inline const ::msg::CSReqOffHelpReddot& CSReqBody::_internal_offhelpreddot() const {
  const ::msg::CSReqOffHelpReddot* p = _impl_.offhelpreddot_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqOffHelpReddot&>(
      ::msg::_CSReqOffHelpReddot_default_instance_);
}
inline const ::msg::CSReqOffHelpReddot& CSReqBody::offhelpreddot() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.OffHelpReddot)
  return _internal_offhelpreddot();
}
inline void CSReqBody::unsafe_arena_set_allocated_offhelpreddot(
    ::msg::CSReqOffHelpReddot* offhelpreddot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offhelpreddot_);
  }
  _impl_.offhelpreddot_ = offhelpreddot;
  if (offhelpreddot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.OffHelpReddot)
}
inline ::msg::CSReqOffHelpReddot* CSReqBody::release_offhelpreddot() {
  
  ::msg::CSReqOffHelpReddot* temp = _impl_.offhelpreddot_;
  _impl_.offhelpreddot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqOffHelpReddot* CSReqBody::unsafe_arena_release_offhelpreddot() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.OffHelpReddot)
  
  ::msg::CSReqOffHelpReddot* temp = _impl_.offhelpreddot_;
  _impl_.offhelpreddot_ = nullptr;
  return temp;
}
inline ::msg::CSReqOffHelpReddot* CSReqBody::_internal_mutable_offhelpreddot() {
  
  if (_impl_.offhelpreddot_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqOffHelpReddot>(GetArenaForAllocation());
    _impl_.offhelpreddot_ = p;
  }
  return _impl_.offhelpreddot_;
}
inline ::msg::CSReqOffHelpReddot* CSReqBody::mutable_offhelpreddot() {
  ::msg::CSReqOffHelpReddot* _msg = _internal_mutable_offhelpreddot();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.OffHelpReddot)
  return _msg;
}
inline void CSReqBody::set_allocated_offhelpreddot(::msg::CSReqOffHelpReddot* offhelpreddot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offhelpreddot_);
  }
  if (offhelpreddot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offhelpreddot));
    if (message_arena != submessage_arena) {
      offhelpreddot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offhelpreddot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offhelpreddot_ = offhelpreddot;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.OffHelpReddot)
}

// .msg.CSReqVideo Video = 160;
inline bool CSReqBody::_internal_has_video() const {
  return this != internal_default_instance() && _impl_.video_ != nullptr;
}
inline bool CSReqBody::has_video() const {
  return _internal_has_video();
}
inline const ::msg::CSReqVideo& CSReqBody::_internal_video() const {
  const ::msg::CSReqVideo* p = _impl_.video_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqVideo&>(
      ::msg::_CSReqVideo_default_instance_);
}
inline const ::msg::CSReqVideo& CSReqBody::video() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.Video)
  return _internal_video();
}
inline void CSReqBody::unsafe_arena_set_allocated_video(
    ::msg::CSReqVideo* video) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.video_);
  }
  _impl_.video_ = video;
  if (video) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.Video)
}
inline ::msg::CSReqVideo* CSReqBody::release_video() {
  
  ::msg::CSReqVideo* temp = _impl_.video_;
  _impl_.video_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqVideo* CSReqBody::unsafe_arena_release_video() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.Video)
  
  ::msg::CSReqVideo* temp = _impl_.video_;
  _impl_.video_ = nullptr;
  return temp;
}
inline ::msg::CSReqVideo* CSReqBody::_internal_mutable_video() {
  
  if (_impl_.video_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqVideo>(GetArenaForAllocation());
    _impl_.video_ = p;
  }
  return _impl_.video_;
}
inline ::msg::CSReqVideo* CSReqBody::mutable_video() {
  ::msg::CSReqVideo* _msg = _internal_mutable_video();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.Video)
  return _msg;
}
inline void CSReqBody::set_allocated_video(::msg::CSReqVideo* video) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.video_);
  }
  if (video) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(video));
    if (message_arena != submessage_arena) {
      video = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.video_ = video;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.Video)
}

// .msg.CSReqChangeLanguage ChangeLanguage = 161;
inline bool CSReqBody::_internal_has_changelanguage() const {
  return this != internal_default_instance() && _impl_.changelanguage_ != nullptr;
}
inline bool CSReqBody::has_changelanguage() const {
  return _internal_has_changelanguage();
}
inline const ::msg::CSReqChangeLanguage& CSReqBody::_internal_changelanguage() const {
  const ::msg::CSReqChangeLanguage* p = _impl_.changelanguage_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqChangeLanguage&>(
      ::msg::_CSReqChangeLanguage_default_instance_);
}
inline const ::msg::CSReqChangeLanguage& CSReqBody::changelanguage() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ChangeLanguage)
  return _internal_changelanguage();
}
inline void CSReqBody::unsafe_arena_set_allocated_changelanguage(
    ::msg::CSReqChangeLanguage* changelanguage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changelanguage_);
  }
  _impl_.changelanguage_ = changelanguage;
  if (changelanguage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ChangeLanguage)
}
inline ::msg::CSReqChangeLanguage* CSReqBody::release_changelanguage() {
  
  ::msg::CSReqChangeLanguage* temp = _impl_.changelanguage_;
  _impl_.changelanguage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqChangeLanguage* CSReqBody::unsafe_arena_release_changelanguage() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ChangeLanguage)
  
  ::msg::CSReqChangeLanguage* temp = _impl_.changelanguage_;
  _impl_.changelanguage_ = nullptr;
  return temp;
}
inline ::msg::CSReqChangeLanguage* CSReqBody::_internal_mutable_changelanguage() {
  
  if (_impl_.changelanguage_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqChangeLanguage>(GetArenaForAllocation());
    _impl_.changelanguage_ = p;
  }
  return _impl_.changelanguage_;
}
inline ::msg::CSReqChangeLanguage* CSReqBody::mutable_changelanguage() {
  ::msg::CSReqChangeLanguage* _msg = _internal_mutable_changelanguage();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ChangeLanguage)
  return _msg;
}
inline void CSReqBody::set_allocated_changelanguage(::msg::CSReqChangeLanguage* changelanguage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changelanguage_);
  }
  if (changelanguage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(changelanguage));
    if (message_arena != submessage_arena) {
      changelanguage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changelanguage, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.changelanguage_ = changelanguage;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ChangeLanguage)
}

// .msg.CSReqReportVideoPlay VideoPlay = 162;
inline bool CSReqBody::_internal_has_videoplay() const {
  return this != internal_default_instance() && _impl_.videoplay_ != nullptr;
}
inline bool CSReqBody::has_videoplay() const {
  return _internal_has_videoplay();
}
inline const ::msg::CSReqReportVideoPlay& CSReqBody::_internal_videoplay() const {
  const ::msg::CSReqReportVideoPlay* p = _impl_.videoplay_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqReportVideoPlay&>(
      ::msg::_CSReqReportVideoPlay_default_instance_);
}
inline const ::msg::CSReqReportVideoPlay& CSReqBody::videoplay() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.VideoPlay)
  return _internal_videoplay();
}
inline void CSReqBody::unsafe_arena_set_allocated_videoplay(
    ::msg::CSReqReportVideoPlay* videoplay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.videoplay_);
  }
  _impl_.videoplay_ = videoplay;
  if (videoplay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.VideoPlay)
}
inline ::msg::CSReqReportVideoPlay* CSReqBody::release_videoplay() {
  
  ::msg::CSReqReportVideoPlay* temp = _impl_.videoplay_;
  _impl_.videoplay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqReportVideoPlay* CSReqBody::unsafe_arena_release_videoplay() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.VideoPlay)
  
  ::msg::CSReqReportVideoPlay* temp = _impl_.videoplay_;
  _impl_.videoplay_ = nullptr;
  return temp;
}
inline ::msg::CSReqReportVideoPlay* CSReqBody::_internal_mutable_videoplay() {
  
  if (_impl_.videoplay_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqReportVideoPlay>(GetArenaForAllocation());
    _impl_.videoplay_ = p;
  }
  return _impl_.videoplay_;
}
inline ::msg::CSReqReportVideoPlay* CSReqBody::mutable_videoplay() {
  ::msg::CSReqReportVideoPlay* _msg = _internal_mutable_videoplay();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.VideoPlay)
  return _msg;
}
inline void CSReqBody::set_allocated_videoplay(::msg::CSReqReportVideoPlay* videoplay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.videoplay_);
  }
  if (videoplay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(videoplay));
    if (message_arena != submessage_arena) {
      videoplay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, videoplay, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.videoplay_ = videoplay;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.VideoPlay)
}

// .msg.CSReqSetProvince SetProvince = 163;
inline bool CSReqBody::_internal_has_setprovince() const {
  return this != internal_default_instance() && _impl_.setprovince_ != nullptr;
}
inline bool CSReqBody::has_setprovince() const {
  return _internal_has_setprovince();
}
inline const ::msg::CSReqSetProvince& CSReqBody::_internal_setprovince() const {
  const ::msg::CSReqSetProvince* p = _impl_.setprovince_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSetProvince&>(
      ::msg::_CSReqSetProvince_default_instance_);
}
inline const ::msg::CSReqSetProvince& CSReqBody::setprovince() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SetProvince)
  return _internal_setprovince();
}
inline void CSReqBody::unsafe_arena_set_allocated_setprovince(
    ::msg::CSReqSetProvince* setprovince) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setprovince_);
  }
  _impl_.setprovince_ = setprovince;
  if (setprovince) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SetProvince)
}
inline ::msg::CSReqSetProvince* CSReqBody::release_setprovince() {
  
  ::msg::CSReqSetProvince* temp = _impl_.setprovince_;
  _impl_.setprovince_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSetProvince* CSReqBody::unsafe_arena_release_setprovince() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SetProvince)
  
  ::msg::CSReqSetProvince* temp = _impl_.setprovince_;
  _impl_.setprovince_ = nullptr;
  return temp;
}
inline ::msg::CSReqSetProvince* CSReqBody::_internal_mutable_setprovince() {
  
  if (_impl_.setprovince_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSetProvince>(GetArenaForAllocation());
    _impl_.setprovince_ = p;
  }
  return _impl_.setprovince_;
}
inline ::msg::CSReqSetProvince* CSReqBody::mutable_setprovince() {
  ::msg::CSReqSetProvince* _msg = _internal_mutable_setprovince();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SetProvince)
  return _msg;
}
inline void CSReqBody::set_allocated_setprovince(::msg::CSReqSetProvince* setprovince) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setprovince_);
  }
  if (setprovince) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setprovince));
    if (message_arena != submessage_arena) {
      setprovince = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setprovince, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setprovince_ = setprovince;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SetProvince)
}

// .msg.CSReqLongyuanVoice LongyuanVoice = 164;
inline bool CSReqBody::_internal_has_longyuanvoice() const {
  return this != internal_default_instance() && _impl_.longyuanvoice_ != nullptr;
}
inline bool CSReqBody::has_longyuanvoice() const {
  return _internal_has_longyuanvoice();
}
inline const ::msg::CSReqLongyuanVoice& CSReqBody::_internal_longyuanvoice() const {
  const ::msg::CSReqLongyuanVoice* p = _impl_.longyuanvoice_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqLongyuanVoice&>(
      ::msg::_CSReqLongyuanVoice_default_instance_);
}
inline const ::msg::CSReqLongyuanVoice& CSReqBody::longyuanvoice() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.LongyuanVoice)
  return _internal_longyuanvoice();
}
inline void CSReqBody::unsafe_arena_set_allocated_longyuanvoice(
    ::msg::CSReqLongyuanVoice* longyuanvoice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.longyuanvoice_);
  }
  _impl_.longyuanvoice_ = longyuanvoice;
  if (longyuanvoice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.LongyuanVoice)
}
inline ::msg::CSReqLongyuanVoice* CSReqBody::release_longyuanvoice() {
  
  ::msg::CSReqLongyuanVoice* temp = _impl_.longyuanvoice_;
  _impl_.longyuanvoice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqLongyuanVoice* CSReqBody::unsafe_arena_release_longyuanvoice() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.LongyuanVoice)
  
  ::msg::CSReqLongyuanVoice* temp = _impl_.longyuanvoice_;
  _impl_.longyuanvoice_ = nullptr;
  return temp;
}
inline ::msg::CSReqLongyuanVoice* CSReqBody::_internal_mutable_longyuanvoice() {
  
  if (_impl_.longyuanvoice_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqLongyuanVoice>(GetArenaForAllocation());
    _impl_.longyuanvoice_ = p;
  }
  return _impl_.longyuanvoice_;
}
inline ::msg::CSReqLongyuanVoice* CSReqBody::mutable_longyuanvoice() {
  ::msg::CSReqLongyuanVoice* _msg = _internal_mutable_longyuanvoice();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.LongyuanVoice)
  return _msg;
}
inline void CSReqBody::set_allocated_longyuanvoice(::msg::CSReqLongyuanVoice* longyuanvoice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.longyuanvoice_);
  }
  if (longyuanvoice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(longyuanvoice));
    if (message_arena != submessage_arena) {
      longyuanvoice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, longyuanvoice, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.longyuanvoice_ = longyuanvoice;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.LongyuanVoice)
}

// .msg.CSReqEnrollTournament EnrollTournament = 165;
inline bool CSReqBody::_internal_has_enrolltournament() const {
  return this != internal_default_instance() && _impl_.enrolltournament_ != nullptr;
}
inline bool CSReqBody::has_enrolltournament() const {
  return _internal_has_enrolltournament();
}
inline const ::msg::CSReqEnrollTournament& CSReqBody::_internal_enrolltournament() const {
  const ::msg::CSReqEnrollTournament* p = _impl_.enrolltournament_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqEnrollTournament&>(
      ::msg::_CSReqEnrollTournament_default_instance_);
}
inline const ::msg::CSReqEnrollTournament& CSReqBody::enrolltournament() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.EnrollTournament)
  return _internal_enrolltournament();
}
inline void CSReqBody::unsafe_arena_set_allocated_enrolltournament(
    ::msg::CSReqEnrollTournament* enrolltournament) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enrolltournament_);
  }
  _impl_.enrolltournament_ = enrolltournament;
  if (enrolltournament) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.EnrollTournament)
}
inline ::msg::CSReqEnrollTournament* CSReqBody::release_enrolltournament() {
  
  ::msg::CSReqEnrollTournament* temp = _impl_.enrolltournament_;
  _impl_.enrolltournament_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqEnrollTournament* CSReqBody::unsafe_arena_release_enrolltournament() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.EnrollTournament)
  
  ::msg::CSReqEnrollTournament* temp = _impl_.enrolltournament_;
  _impl_.enrolltournament_ = nullptr;
  return temp;
}
inline ::msg::CSReqEnrollTournament* CSReqBody::_internal_mutable_enrolltournament() {
  
  if (_impl_.enrolltournament_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqEnrollTournament>(GetArenaForAllocation());
    _impl_.enrolltournament_ = p;
  }
  return _impl_.enrolltournament_;
}
inline ::msg::CSReqEnrollTournament* CSReqBody::mutable_enrolltournament() {
  ::msg::CSReqEnrollTournament* _msg = _internal_mutable_enrolltournament();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.EnrollTournament)
  return _msg;
}
inline void CSReqBody::set_allocated_enrolltournament(::msg::CSReqEnrollTournament* enrolltournament) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enrolltournament_);
  }
  if (enrolltournament) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enrolltournament));
    if (message_arena != submessage_arena) {
      enrolltournament = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enrolltournament, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.enrolltournament_ = enrolltournament;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.EnrollTournament)
}

// .msg.CSReqJoinTournamentRoom JoinTournamentRoom = 166;
inline bool CSReqBody::_internal_has_jointournamentroom() const {
  return this != internal_default_instance() && _impl_.jointournamentroom_ != nullptr;
}
inline bool CSReqBody::has_jointournamentroom() const {
  return _internal_has_jointournamentroom();
}
inline const ::msg::CSReqJoinTournamentRoom& CSReqBody::_internal_jointournamentroom() const {
  const ::msg::CSReqJoinTournamentRoom* p = _impl_.jointournamentroom_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqJoinTournamentRoom&>(
      ::msg::_CSReqJoinTournamentRoom_default_instance_);
}
inline const ::msg::CSReqJoinTournamentRoom& CSReqBody::jointournamentroom() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.JoinTournamentRoom)
  return _internal_jointournamentroom();
}
inline void CSReqBody::unsafe_arena_set_allocated_jointournamentroom(
    ::msg::CSReqJoinTournamentRoom* jointournamentroom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jointournamentroom_);
  }
  _impl_.jointournamentroom_ = jointournamentroom;
  if (jointournamentroom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.JoinTournamentRoom)
}
inline ::msg::CSReqJoinTournamentRoom* CSReqBody::release_jointournamentroom() {
  
  ::msg::CSReqJoinTournamentRoom* temp = _impl_.jointournamentroom_;
  _impl_.jointournamentroom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqJoinTournamentRoom* CSReqBody::unsafe_arena_release_jointournamentroom() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.JoinTournamentRoom)
  
  ::msg::CSReqJoinTournamentRoom* temp = _impl_.jointournamentroom_;
  _impl_.jointournamentroom_ = nullptr;
  return temp;
}
inline ::msg::CSReqJoinTournamentRoom* CSReqBody::_internal_mutable_jointournamentroom() {
  
  if (_impl_.jointournamentroom_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqJoinTournamentRoom>(GetArenaForAllocation());
    _impl_.jointournamentroom_ = p;
  }
  return _impl_.jointournamentroom_;
}
inline ::msg::CSReqJoinTournamentRoom* CSReqBody::mutable_jointournamentroom() {
  ::msg::CSReqJoinTournamentRoom* _msg = _internal_mutable_jointournamentroom();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.JoinTournamentRoom)
  return _msg;
}
inline void CSReqBody::set_allocated_jointournamentroom(::msg::CSReqJoinTournamentRoom* jointournamentroom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jointournamentroom_);
  }
  if (jointournamentroom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jointournamentroom));
    if (message_arena != submessage_arena) {
      jointournamentroom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jointournamentroom, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.jointournamentroom_ = jointournamentroom;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.JoinTournamentRoom)
}

// .msg.CSReqTournamentPointAward TournamentPointAward = 167;
inline bool CSReqBody::_internal_has_tournamentpointaward() const {
  return this != internal_default_instance() && _impl_.tournamentpointaward_ != nullptr;
}
inline bool CSReqBody::has_tournamentpointaward() const {
  return _internal_has_tournamentpointaward();
}
inline const ::msg::CSReqTournamentPointAward& CSReqBody::_internal_tournamentpointaward() const {
  const ::msg::CSReqTournamentPointAward* p = _impl_.tournamentpointaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqTournamentPointAward&>(
      ::msg::_CSReqTournamentPointAward_default_instance_);
}
inline const ::msg::CSReqTournamentPointAward& CSReqBody::tournamentpointaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.TournamentPointAward)
  return _internal_tournamentpointaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_tournamentpointaward(
    ::msg::CSReqTournamentPointAward* tournamentpointaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentpointaward_);
  }
  _impl_.tournamentpointaward_ = tournamentpointaward;
  if (tournamentpointaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.TournamentPointAward)
}
inline ::msg::CSReqTournamentPointAward* CSReqBody::release_tournamentpointaward() {
  
  ::msg::CSReqTournamentPointAward* temp = _impl_.tournamentpointaward_;
  _impl_.tournamentpointaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqTournamentPointAward* CSReqBody::unsafe_arena_release_tournamentpointaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.TournamentPointAward)
  
  ::msg::CSReqTournamentPointAward* temp = _impl_.tournamentpointaward_;
  _impl_.tournamentpointaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqTournamentPointAward* CSReqBody::_internal_mutable_tournamentpointaward() {
  
  if (_impl_.tournamentpointaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqTournamentPointAward>(GetArenaForAllocation());
    _impl_.tournamentpointaward_ = p;
  }
  return _impl_.tournamentpointaward_;
}
inline ::msg::CSReqTournamentPointAward* CSReqBody::mutable_tournamentpointaward() {
  ::msg::CSReqTournamentPointAward* _msg = _internal_mutable_tournamentpointaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.TournamentPointAward)
  return _msg;
}
inline void CSReqBody::set_allocated_tournamentpointaward(::msg::CSReqTournamentPointAward* tournamentpointaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentpointaward_);
  }
  if (tournamentpointaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tournamentpointaward));
    if (message_arena != submessage_arena) {
      tournamentpointaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tournamentpointaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tournamentpointaward_ = tournamentpointaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.TournamentPointAward)
}

// .msg.CSReqDealWebMail DealWebMail = 168;
inline bool CSReqBody::_internal_has_dealwebmail() const {
  return this != internal_default_instance() && _impl_.dealwebmail_ != nullptr;
}
inline bool CSReqBody::has_dealwebmail() const {
  return _internal_has_dealwebmail();
}
inline const ::msg::CSReqDealWebMail& CSReqBody::_internal_dealwebmail() const {
  const ::msg::CSReqDealWebMail* p = _impl_.dealwebmail_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqDealWebMail&>(
      ::msg::_CSReqDealWebMail_default_instance_);
}
inline const ::msg::CSReqDealWebMail& CSReqBody::dealwebmail() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.DealWebMail)
  return _internal_dealwebmail();
}
inline void CSReqBody::unsafe_arena_set_allocated_dealwebmail(
    ::msg::CSReqDealWebMail* dealwebmail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dealwebmail_);
  }
  _impl_.dealwebmail_ = dealwebmail;
  if (dealwebmail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.DealWebMail)
}
inline ::msg::CSReqDealWebMail* CSReqBody::release_dealwebmail() {
  
  ::msg::CSReqDealWebMail* temp = _impl_.dealwebmail_;
  _impl_.dealwebmail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqDealWebMail* CSReqBody::unsafe_arena_release_dealwebmail() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.DealWebMail)
  
  ::msg::CSReqDealWebMail* temp = _impl_.dealwebmail_;
  _impl_.dealwebmail_ = nullptr;
  return temp;
}
inline ::msg::CSReqDealWebMail* CSReqBody::_internal_mutable_dealwebmail() {
  
  if (_impl_.dealwebmail_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqDealWebMail>(GetArenaForAllocation());
    _impl_.dealwebmail_ = p;
  }
  return _impl_.dealwebmail_;
}
inline ::msg::CSReqDealWebMail* CSReqBody::mutable_dealwebmail() {
  ::msg::CSReqDealWebMail* _msg = _internal_mutable_dealwebmail();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.DealWebMail)
  return _msg;
}
inline void CSReqBody::set_allocated_dealwebmail(::msg::CSReqDealWebMail* dealwebmail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dealwebmail_);
  }
  if (dealwebmail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dealwebmail));
    if (message_arena != submessage_arena) {
      dealwebmail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dealwebmail, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dealwebmail_ = dealwebmail;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.DealWebMail)
}

// .msg.CSReqGetEnrollPlayers GetEnrollPlayers = 169;
inline bool CSReqBody::_internal_has_getenrollplayers() const {
  return this != internal_default_instance() && _impl_.getenrollplayers_ != nullptr;
}
inline bool CSReqBody::has_getenrollplayers() const {
  return _internal_has_getenrollplayers();
}
inline const ::msg::CSReqGetEnrollPlayers& CSReqBody::_internal_getenrollplayers() const {
  const ::msg::CSReqGetEnrollPlayers* p = _impl_.getenrollplayers_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetEnrollPlayers&>(
      ::msg::_CSReqGetEnrollPlayers_default_instance_);
}
inline const ::msg::CSReqGetEnrollPlayers& CSReqBody::getenrollplayers() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetEnrollPlayers)
  return _internal_getenrollplayers();
}
inline void CSReqBody::unsafe_arena_set_allocated_getenrollplayers(
    ::msg::CSReqGetEnrollPlayers* getenrollplayers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getenrollplayers_);
  }
  _impl_.getenrollplayers_ = getenrollplayers;
  if (getenrollplayers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetEnrollPlayers)
}
inline ::msg::CSReqGetEnrollPlayers* CSReqBody::release_getenrollplayers() {
  
  ::msg::CSReqGetEnrollPlayers* temp = _impl_.getenrollplayers_;
  _impl_.getenrollplayers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetEnrollPlayers* CSReqBody::unsafe_arena_release_getenrollplayers() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetEnrollPlayers)
  
  ::msg::CSReqGetEnrollPlayers* temp = _impl_.getenrollplayers_;
  _impl_.getenrollplayers_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetEnrollPlayers* CSReqBody::_internal_mutable_getenrollplayers() {
  
  if (_impl_.getenrollplayers_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetEnrollPlayers>(GetArenaForAllocation());
    _impl_.getenrollplayers_ = p;
  }
  return _impl_.getenrollplayers_;
}
inline ::msg::CSReqGetEnrollPlayers* CSReqBody::mutable_getenrollplayers() {
  ::msg::CSReqGetEnrollPlayers* _msg = _internal_mutable_getenrollplayers();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetEnrollPlayers)
  return _msg;
}
inline void CSReqBody::set_allocated_getenrollplayers(::msg::CSReqGetEnrollPlayers* getenrollplayers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getenrollplayers_);
  }
  if (getenrollplayers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getenrollplayers));
    if (message_arena != submessage_arena) {
      getenrollplayers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getenrollplayers, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getenrollplayers_ = getenrollplayers;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetEnrollPlayers)
}

// .msg.CSReqChallengeAgain ChallengeAgain = 170;
inline bool CSReqBody::_internal_has_challengeagain() const {
  return this != internal_default_instance() && _impl_.challengeagain_ != nullptr;
}
inline bool CSReqBody::has_challengeagain() const {
  return _internal_has_challengeagain();
}
inline const ::msg::CSReqChallengeAgain& CSReqBody::_internal_challengeagain() const {
  const ::msg::CSReqChallengeAgain* p = _impl_.challengeagain_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqChallengeAgain&>(
      ::msg::_CSReqChallengeAgain_default_instance_);
}
inline const ::msg::CSReqChallengeAgain& CSReqBody::challengeagain() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ChallengeAgain)
  return _internal_challengeagain();
}
inline void CSReqBody::unsafe_arena_set_allocated_challengeagain(
    ::msg::CSReqChallengeAgain* challengeagain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.challengeagain_);
  }
  _impl_.challengeagain_ = challengeagain;
  if (challengeagain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ChallengeAgain)
}
inline ::msg::CSReqChallengeAgain* CSReqBody::release_challengeagain() {
  
  ::msg::CSReqChallengeAgain* temp = _impl_.challengeagain_;
  _impl_.challengeagain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqChallengeAgain* CSReqBody::unsafe_arena_release_challengeagain() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ChallengeAgain)
  
  ::msg::CSReqChallengeAgain* temp = _impl_.challengeagain_;
  _impl_.challengeagain_ = nullptr;
  return temp;
}
inline ::msg::CSReqChallengeAgain* CSReqBody::_internal_mutable_challengeagain() {
  
  if (_impl_.challengeagain_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqChallengeAgain>(GetArenaForAllocation());
    _impl_.challengeagain_ = p;
  }
  return _impl_.challengeagain_;
}
inline ::msg::CSReqChallengeAgain* CSReqBody::mutable_challengeagain() {
  ::msg::CSReqChallengeAgain* _msg = _internal_mutable_challengeagain();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ChallengeAgain)
  return _msg;
}
inline void CSReqBody::set_allocated_challengeagain(::msg::CSReqChallengeAgain* challengeagain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.challengeagain_);
  }
  if (challengeagain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(challengeagain));
    if (message_arena != submessage_arena) {
      challengeagain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, challengeagain, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.challengeagain_ = challengeagain;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ChallengeAgain)
}

// .msg.CSReqHistoryChatMsg HistoryChat = 171;
inline bool CSReqBody::_internal_has_historychat() const {
  return this != internal_default_instance() && _impl_.historychat_ != nullptr;
}
inline bool CSReqBody::has_historychat() const {
  return _internal_has_historychat();
}
inline const ::msg::CSReqHistoryChatMsg& CSReqBody::_internal_historychat() const {
  const ::msg::CSReqHistoryChatMsg* p = _impl_.historychat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqHistoryChatMsg&>(
      ::msg::_CSReqHistoryChatMsg_default_instance_);
}
inline const ::msg::CSReqHistoryChatMsg& CSReqBody::historychat() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.HistoryChat)
  return _internal_historychat();
}
inline void CSReqBody::unsafe_arena_set_allocated_historychat(
    ::msg::CSReqHistoryChatMsg* historychat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.historychat_);
  }
  _impl_.historychat_ = historychat;
  if (historychat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.HistoryChat)
}
inline ::msg::CSReqHistoryChatMsg* CSReqBody::release_historychat() {
  
  ::msg::CSReqHistoryChatMsg* temp = _impl_.historychat_;
  _impl_.historychat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqHistoryChatMsg* CSReqBody::unsafe_arena_release_historychat() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.HistoryChat)
  
  ::msg::CSReqHistoryChatMsg* temp = _impl_.historychat_;
  _impl_.historychat_ = nullptr;
  return temp;
}
inline ::msg::CSReqHistoryChatMsg* CSReqBody::_internal_mutable_historychat() {
  
  if (_impl_.historychat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqHistoryChatMsg>(GetArenaForAllocation());
    _impl_.historychat_ = p;
  }
  return _impl_.historychat_;
}
inline ::msg::CSReqHistoryChatMsg* CSReqBody::mutable_historychat() {
  ::msg::CSReqHistoryChatMsg* _msg = _internal_mutable_historychat();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.HistoryChat)
  return _msg;
}
inline void CSReqBody::set_allocated_historychat(::msg::CSReqHistoryChatMsg* historychat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.historychat_);
  }
  if (historychat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(historychat));
    if (message_arena != submessage_arena) {
      historychat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, historychat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.historychat_ = historychat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.HistoryChat)
}

// .msg.CSReqSetFriendInvisible SetFriendInvisible = 172;
inline bool CSReqBody::_internal_has_setfriendinvisible() const {
  return this != internal_default_instance() && _impl_.setfriendinvisible_ != nullptr;
}
inline bool CSReqBody::has_setfriendinvisible() const {
  return _internal_has_setfriendinvisible();
}
inline const ::msg::CSReqSetFriendInvisible& CSReqBody::_internal_setfriendinvisible() const {
  const ::msg::CSReqSetFriendInvisible* p = _impl_.setfriendinvisible_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSetFriendInvisible&>(
      ::msg::_CSReqSetFriendInvisible_default_instance_);
}
inline const ::msg::CSReqSetFriendInvisible& CSReqBody::setfriendinvisible() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SetFriendInvisible)
  return _internal_setfriendinvisible();
}
inline void CSReqBody::unsafe_arena_set_allocated_setfriendinvisible(
    ::msg::CSReqSetFriendInvisible* setfriendinvisible) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setfriendinvisible_);
  }
  _impl_.setfriendinvisible_ = setfriendinvisible;
  if (setfriendinvisible) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SetFriendInvisible)
}
inline ::msg::CSReqSetFriendInvisible* CSReqBody::release_setfriendinvisible() {
  
  ::msg::CSReqSetFriendInvisible* temp = _impl_.setfriendinvisible_;
  _impl_.setfriendinvisible_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSetFriendInvisible* CSReqBody::unsafe_arena_release_setfriendinvisible() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SetFriendInvisible)
  
  ::msg::CSReqSetFriendInvisible* temp = _impl_.setfriendinvisible_;
  _impl_.setfriendinvisible_ = nullptr;
  return temp;
}
inline ::msg::CSReqSetFriendInvisible* CSReqBody::_internal_mutable_setfriendinvisible() {
  
  if (_impl_.setfriendinvisible_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSetFriendInvisible>(GetArenaForAllocation());
    _impl_.setfriendinvisible_ = p;
  }
  return _impl_.setfriendinvisible_;
}
inline ::msg::CSReqSetFriendInvisible* CSReqBody::mutable_setfriendinvisible() {
  ::msg::CSReqSetFriendInvisible* _msg = _internal_mutable_setfriendinvisible();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SetFriendInvisible)
  return _msg;
}
inline void CSReqBody::set_allocated_setfriendinvisible(::msg::CSReqSetFriendInvisible* setfriendinvisible) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setfriendinvisible_);
  }
  if (setfriendinvisible) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setfriendinvisible));
    if (message_arena != submessage_arena) {
      setfriendinvisible = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setfriendinvisible, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setfriendinvisible_ = setfriendinvisible;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SetFriendInvisible)
}

// .msg.CSReqGetObserveAward GetObserveAward = 173;
inline bool CSReqBody::_internal_has_getobserveaward() const {
  return this != internal_default_instance() && _impl_.getobserveaward_ != nullptr;
}
inline bool CSReqBody::has_getobserveaward() const {
  return _internal_has_getobserveaward();
}
inline const ::msg::CSReqGetObserveAward& CSReqBody::_internal_getobserveaward() const {
  const ::msg::CSReqGetObserveAward* p = _impl_.getobserveaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetObserveAward&>(
      ::msg::_CSReqGetObserveAward_default_instance_);
}
inline const ::msg::CSReqGetObserveAward& CSReqBody::getobserveaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetObserveAward)
  return _internal_getobserveaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_getobserveaward(
    ::msg::CSReqGetObserveAward* getobserveaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getobserveaward_);
  }
  _impl_.getobserveaward_ = getobserveaward;
  if (getobserveaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetObserveAward)
}
inline ::msg::CSReqGetObserveAward* CSReqBody::release_getobserveaward() {
  
  ::msg::CSReqGetObserveAward* temp = _impl_.getobserveaward_;
  _impl_.getobserveaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetObserveAward* CSReqBody::unsafe_arena_release_getobserveaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetObserveAward)
  
  ::msg::CSReqGetObserveAward* temp = _impl_.getobserveaward_;
  _impl_.getobserveaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetObserveAward* CSReqBody::_internal_mutable_getobserveaward() {
  
  if (_impl_.getobserveaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetObserveAward>(GetArenaForAllocation());
    _impl_.getobserveaward_ = p;
  }
  return _impl_.getobserveaward_;
}
inline ::msg::CSReqGetObserveAward* CSReqBody::mutable_getobserveaward() {
  ::msg::CSReqGetObserveAward* _msg = _internal_mutable_getobserveaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetObserveAward)
  return _msg;
}
inline void CSReqBody::set_allocated_getobserveaward(::msg::CSReqGetObserveAward* getobserveaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getobserveaward_);
  }
  if (getobserveaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getobserveaward));
    if (message_arena != submessage_arena) {
      getobserveaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getobserveaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getobserveaward_ = getobserveaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetObserveAward)
}

// .msg.CSReqInviteObserve InviteObserve = 174;
inline bool CSReqBody::_internal_has_inviteobserve() const {
  return this != internal_default_instance() && _impl_.inviteobserve_ != nullptr;
}
inline bool CSReqBody::has_inviteobserve() const {
  return _internal_has_inviteobserve();
}
inline const ::msg::CSReqInviteObserve& CSReqBody::_internal_inviteobserve() const {
  const ::msg::CSReqInviteObserve* p = _impl_.inviteobserve_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqInviteObserve&>(
      ::msg::_CSReqInviteObserve_default_instance_);
}
inline const ::msg::CSReqInviteObserve& CSReqBody::inviteobserve() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.InviteObserve)
  return _internal_inviteobserve();
}
inline void CSReqBody::unsafe_arena_set_allocated_inviteobserve(
    ::msg::CSReqInviteObserve* inviteobserve) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inviteobserve_);
  }
  _impl_.inviteobserve_ = inviteobserve;
  if (inviteobserve) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.InviteObserve)
}
inline ::msg::CSReqInviteObserve* CSReqBody::release_inviteobserve() {
  
  ::msg::CSReqInviteObserve* temp = _impl_.inviteobserve_;
  _impl_.inviteobserve_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqInviteObserve* CSReqBody::unsafe_arena_release_inviteobserve() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.InviteObserve)
  
  ::msg::CSReqInviteObserve* temp = _impl_.inviteobserve_;
  _impl_.inviteobserve_ = nullptr;
  return temp;
}
inline ::msg::CSReqInviteObserve* CSReqBody::_internal_mutable_inviteobserve() {
  
  if (_impl_.inviteobserve_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqInviteObserve>(GetArenaForAllocation());
    _impl_.inviteobserve_ = p;
  }
  return _impl_.inviteobserve_;
}
inline ::msg::CSReqInviteObserve* CSReqBody::mutable_inviteobserve() {
  ::msg::CSReqInviteObserve* _msg = _internal_mutable_inviteobserve();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.InviteObserve)
  return _msg;
}
inline void CSReqBody::set_allocated_inviteobserve(::msg::CSReqInviteObserve* inviteobserve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inviteobserve_);
  }
  if (inviteobserve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inviteobserve));
    if (message_arena != submessage_arena) {
      inviteobserve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inviteobserve, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.inviteobserve_ = inviteobserve;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.InviteObserve)
}

// .msg.CSReqRejectObserve RejectObserve = 175;
inline bool CSReqBody::_internal_has_rejectobserve() const {
  return this != internal_default_instance() && _impl_.rejectobserve_ != nullptr;
}
inline bool CSReqBody::has_rejectobserve() const {
  return _internal_has_rejectobserve();
}
inline const ::msg::CSReqRejectObserve& CSReqBody::_internal_rejectobserve() const {
  const ::msg::CSReqRejectObserve* p = _impl_.rejectobserve_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRejectObserve&>(
      ::msg::_CSReqRejectObserve_default_instance_);
}
inline const ::msg::CSReqRejectObserve& CSReqBody::rejectobserve() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RejectObserve)
  return _internal_rejectobserve();
}
inline void CSReqBody::unsafe_arena_set_allocated_rejectobserve(
    ::msg::CSReqRejectObserve* rejectobserve) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rejectobserve_);
  }
  _impl_.rejectobserve_ = rejectobserve;
  if (rejectobserve) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RejectObserve)
}
inline ::msg::CSReqRejectObserve* CSReqBody::release_rejectobserve() {
  
  ::msg::CSReqRejectObserve* temp = _impl_.rejectobserve_;
  _impl_.rejectobserve_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRejectObserve* CSReqBody::unsafe_arena_release_rejectobserve() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RejectObserve)
  
  ::msg::CSReqRejectObserve* temp = _impl_.rejectobserve_;
  _impl_.rejectobserve_ = nullptr;
  return temp;
}
inline ::msg::CSReqRejectObserve* CSReqBody::_internal_mutable_rejectobserve() {
  
  if (_impl_.rejectobserve_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRejectObserve>(GetArenaForAllocation());
    _impl_.rejectobserve_ = p;
  }
  return _impl_.rejectobserve_;
}
inline ::msg::CSReqRejectObserve* CSReqBody::mutable_rejectobserve() {
  ::msg::CSReqRejectObserve* _msg = _internal_mutable_rejectobserve();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RejectObserve)
  return _msg;
}
inline void CSReqBody::set_allocated_rejectobserve(::msg::CSReqRejectObserve* rejectobserve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rejectobserve_);
  }
  if (rejectobserve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rejectobserve));
    if (message_arena != submessage_arena) {
      rejectobserve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rejectobserve, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rejectobserve_ = rejectobserve;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RejectObserve)
}

// .msg.CSReqGetTxPlayer GetTxPlayer = 176;
inline bool CSReqBody::_internal_has_gettxplayer() const {
  return this != internal_default_instance() && _impl_.gettxplayer_ != nullptr;
}
inline bool CSReqBody::has_gettxplayer() const {
  return _internal_has_gettxplayer();
}
inline const ::msg::CSReqGetTxPlayer& CSReqBody::_internal_gettxplayer() const {
  const ::msg::CSReqGetTxPlayer* p = _impl_.gettxplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetTxPlayer&>(
      ::msg::_CSReqGetTxPlayer_default_instance_);
}
inline const ::msg::CSReqGetTxPlayer& CSReqBody::gettxplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetTxPlayer)
  return _internal_gettxplayer();
}
inline void CSReqBody::unsafe_arena_set_allocated_gettxplayer(
    ::msg::CSReqGetTxPlayer* gettxplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gettxplayer_);
  }
  _impl_.gettxplayer_ = gettxplayer;
  if (gettxplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetTxPlayer)
}
inline ::msg::CSReqGetTxPlayer* CSReqBody::release_gettxplayer() {
  
  ::msg::CSReqGetTxPlayer* temp = _impl_.gettxplayer_;
  _impl_.gettxplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetTxPlayer* CSReqBody::unsafe_arena_release_gettxplayer() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetTxPlayer)
  
  ::msg::CSReqGetTxPlayer* temp = _impl_.gettxplayer_;
  _impl_.gettxplayer_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetTxPlayer* CSReqBody::_internal_mutable_gettxplayer() {
  
  if (_impl_.gettxplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetTxPlayer>(GetArenaForAllocation());
    _impl_.gettxplayer_ = p;
  }
  return _impl_.gettxplayer_;
}
inline ::msg::CSReqGetTxPlayer* CSReqBody::mutable_gettxplayer() {
  ::msg::CSReqGetTxPlayer* _msg = _internal_mutable_gettxplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetTxPlayer)
  return _msg;
}
inline void CSReqBody::set_allocated_gettxplayer(::msg::CSReqGetTxPlayer* gettxplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gettxplayer_);
  }
  if (gettxplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gettxplayer));
    if (message_arena != submessage_arena) {
      gettxplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gettxplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gettxplayer_ = gettxplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetTxPlayer)
}

// .msg.CSReqChooseTxPlayer ChooseTxPlayer = 177;
inline bool CSReqBody::_internal_has_choosetxplayer() const {
  return this != internal_default_instance() && _impl_.choosetxplayer_ != nullptr;
}
inline bool CSReqBody::has_choosetxplayer() const {
  return _internal_has_choosetxplayer();
}
inline const ::msg::CSReqChooseTxPlayer& CSReqBody::_internal_choosetxplayer() const {
  const ::msg::CSReqChooseTxPlayer* p = _impl_.choosetxplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqChooseTxPlayer&>(
      ::msg::_CSReqChooseTxPlayer_default_instance_);
}
inline const ::msg::CSReqChooseTxPlayer& CSReqBody::choosetxplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ChooseTxPlayer)
  return _internal_choosetxplayer();
}
inline void CSReqBody::unsafe_arena_set_allocated_choosetxplayer(
    ::msg::CSReqChooseTxPlayer* choosetxplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.choosetxplayer_);
  }
  _impl_.choosetxplayer_ = choosetxplayer;
  if (choosetxplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ChooseTxPlayer)
}
inline ::msg::CSReqChooseTxPlayer* CSReqBody::release_choosetxplayer() {
  
  ::msg::CSReqChooseTxPlayer* temp = _impl_.choosetxplayer_;
  _impl_.choosetxplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqChooseTxPlayer* CSReqBody::unsafe_arena_release_choosetxplayer() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ChooseTxPlayer)
  
  ::msg::CSReqChooseTxPlayer* temp = _impl_.choosetxplayer_;
  _impl_.choosetxplayer_ = nullptr;
  return temp;
}
inline ::msg::CSReqChooseTxPlayer* CSReqBody::_internal_mutable_choosetxplayer() {
  
  if (_impl_.choosetxplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqChooseTxPlayer>(GetArenaForAllocation());
    _impl_.choosetxplayer_ = p;
  }
  return _impl_.choosetxplayer_;
}
inline ::msg::CSReqChooseTxPlayer* CSReqBody::mutable_choosetxplayer() {
  ::msg::CSReqChooseTxPlayer* _msg = _internal_mutable_choosetxplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ChooseTxPlayer)
  return _msg;
}
inline void CSReqBody::set_allocated_choosetxplayer(::msg::CSReqChooseTxPlayer* choosetxplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.choosetxplayer_);
  }
  if (choosetxplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(choosetxplayer));
    if (message_arena != submessage_arena) {
      choosetxplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, choosetxplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.choosetxplayer_ = choosetxplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ChooseTxPlayer)
}

// .msg.CSReqGetThirdPvpInfo GetThirdPvpInfo = 178;
inline bool CSReqBody::_internal_has_getthirdpvpinfo() const {
  return this != internal_default_instance() && _impl_.getthirdpvpinfo_ != nullptr;
}
inline bool CSReqBody::has_getthirdpvpinfo() const {
  return _internal_has_getthirdpvpinfo();
}
inline const ::msg::CSReqGetThirdPvpInfo& CSReqBody::_internal_getthirdpvpinfo() const {
  const ::msg::CSReqGetThirdPvpInfo* p = _impl_.getthirdpvpinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetThirdPvpInfo&>(
      ::msg::_CSReqGetThirdPvpInfo_default_instance_);
}
inline const ::msg::CSReqGetThirdPvpInfo& CSReqBody::getthirdpvpinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetThirdPvpInfo)
  return _internal_getthirdpvpinfo();
}
inline void CSReqBody::unsafe_arena_set_allocated_getthirdpvpinfo(
    ::msg::CSReqGetThirdPvpInfo* getthirdpvpinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getthirdpvpinfo_);
  }
  _impl_.getthirdpvpinfo_ = getthirdpvpinfo;
  if (getthirdpvpinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetThirdPvpInfo)
}
inline ::msg::CSReqGetThirdPvpInfo* CSReqBody::release_getthirdpvpinfo() {
  
  ::msg::CSReqGetThirdPvpInfo* temp = _impl_.getthirdpvpinfo_;
  _impl_.getthirdpvpinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetThirdPvpInfo* CSReqBody::unsafe_arena_release_getthirdpvpinfo() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetThirdPvpInfo)
  
  ::msg::CSReqGetThirdPvpInfo* temp = _impl_.getthirdpvpinfo_;
  _impl_.getthirdpvpinfo_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetThirdPvpInfo* CSReqBody::_internal_mutable_getthirdpvpinfo() {
  
  if (_impl_.getthirdpvpinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetThirdPvpInfo>(GetArenaForAllocation());
    _impl_.getthirdpvpinfo_ = p;
  }
  return _impl_.getthirdpvpinfo_;
}
inline ::msg::CSReqGetThirdPvpInfo* CSReqBody::mutable_getthirdpvpinfo() {
  ::msg::CSReqGetThirdPvpInfo* _msg = _internal_mutable_getthirdpvpinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetThirdPvpInfo)
  return _msg;
}
inline void CSReqBody::set_allocated_getthirdpvpinfo(::msg::CSReqGetThirdPvpInfo* getthirdpvpinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getthirdpvpinfo_);
  }
  if (getthirdpvpinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getthirdpvpinfo));
    if (message_arena != submessage_arena) {
      getthirdpvpinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getthirdpvpinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getthirdpvpinfo_ = getthirdpvpinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetThirdPvpInfo)
}

// .msg.CSReqMarkPlayerGuide MarkPlayerGuide = 179;
inline bool CSReqBody::_internal_has_markplayerguide() const {
  return this != internal_default_instance() && _impl_.markplayerguide_ != nullptr;
}
inline bool CSReqBody::has_markplayerguide() const {
  return _internal_has_markplayerguide();
}
inline const ::msg::CSReqMarkPlayerGuide& CSReqBody::_internal_markplayerguide() const {
  const ::msg::CSReqMarkPlayerGuide* p = _impl_.markplayerguide_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqMarkPlayerGuide&>(
      ::msg::_CSReqMarkPlayerGuide_default_instance_);
}
inline const ::msg::CSReqMarkPlayerGuide& CSReqBody::markplayerguide() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.MarkPlayerGuide)
  return _internal_markplayerguide();
}
inline void CSReqBody::unsafe_arena_set_allocated_markplayerguide(
    ::msg::CSReqMarkPlayerGuide* markplayerguide) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.markplayerguide_);
  }
  _impl_.markplayerguide_ = markplayerguide;
  if (markplayerguide) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.MarkPlayerGuide)
}
inline ::msg::CSReqMarkPlayerGuide* CSReqBody::release_markplayerguide() {
  
  ::msg::CSReqMarkPlayerGuide* temp = _impl_.markplayerguide_;
  _impl_.markplayerguide_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqMarkPlayerGuide* CSReqBody::unsafe_arena_release_markplayerguide() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.MarkPlayerGuide)
  
  ::msg::CSReqMarkPlayerGuide* temp = _impl_.markplayerguide_;
  _impl_.markplayerguide_ = nullptr;
  return temp;
}
inline ::msg::CSReqMarkPlayerGuide* CSReqBody::_internal_mutable_markplayerguide() {
  
  if (_impl_.markplayerguide_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqMarkPlayerGuide>(GetArenaForAllocation());
    _impl_.markplayerguide_ = p;
  }
  return _impl_.markplayerguide_;
}
inline ::msg::CSReqMarkPlayerGuide* CSReqBody::mutable_markplayerguide() {
  ::msg::CSReqMarkPlayerGuide* _msg = _internal_mutable_markplayerguide();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.MarkPlayerGuide)
  return _msg;
}
inline void CSReqBody::set_allocated_markplayerguide(::msg::CSReqMarkPlayerGuide* markplayerguide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.markplayerguide_);
  }
  if (markplayerguide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(markplayerguide));
    if (message_arena != submessage_arena) {
      markplayerguide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, markplayerguide, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.markplayerguide_ = markplayerguide;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.MarkPlayerGuide)
}

// .msg.CSReqMarkChessSkinClicked MarkChessSkinClicked = 180;
inline bool CSReqBody::_internal_has_markchessskinclicked() const {
  return this != internal_default_instance() && _impl_.markchessskinclicked_ != nullptr;
}
inline bool CSReqBody::has_markchessskinclicked() const {
  return _internal_has_markchessskinclicked();
}
inline const ::msg::CSReqMarkChessSkinClicked& CSReqBody::_internal_markchessskinclicked() const {
  const ::msg::CSReqMarkChessSkinClicked* p = _impl_.markchessskinclicked_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqMarkChessSkinClicked&>(
      ::msg::_CSReqMarkChessSkinClicked_default_instance_);
}
inline const ::msg::CSReqMarkChessSkinClicked& CSReqBody::markchessskinclicked() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.MarkChessSkinClicked)
  return _internal_markchessskinclicked();
}
inline void CSReqBody::unsafe_arena_set_allocated_markchessskinclicked(
    ::msg::CSReqMarkChessSkinClicked* markchessskinclicked) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.markchessskinclicked_);
  }
  _impl_.markchessskinclicked_ = markchessskinclicked;
  if (markchessskinclicked) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.MarkChessSkinClicked)
}
inline ::msg::CSReqMarkChessSkinClicked* CSReqBody::release_markchessskinclicked() {
  
  ::msg::CSReqMarkChessSkinClicked* temp = _impl_.markchessskinclicked_;
  _impl_.markchessskinclicked_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqMarkChessSkinClicked* CSReqBody::unsafe_arena_release_markchessskinclicked() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.MarkChessSkinClicked)
  
  ::msg::CSReqMarkChessSkinClicked* temp = _impl_.markchessskinclicked_;
  _impl_.markchessskinclicked_ = nullptr;
  return temp;
}
inline ::msg::CSReqMarkChessSkinClicked* CSReqBody::_internal_mutable_markchessskinclicked() {
  
  if (_impl_.markchessskinclicked_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqMarkChessSkinClicked>(GetArenaForAllocation());
    _impl_.markchessskinclicked_ = p;
  }
  return _impl_.markchessskinclicked_;
}
inline ::msg::CSReqMarkChessSkinClicked* CSReqBody::mutable_markchessskinclicked() {
  ::msg::CSReqMarkChessSkinClicked* _msg = _internal_mutable_markchessskinclicked();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.MarkChessSkinClicked)
  return _msg;
}
inline void CSReqBody::set_allocated_markchessskinclicked(::msg::CSReqMarkChessSkinClicked* markchessskinclicked) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.markchessskinclicked_);
  }
  if (markchessskinclicked) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(markchessskinclicked));
    if (message_arena != submessage_arena) {
      markchessskinclicked = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, markchessskinclicked, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.markchessskinclicked_ = markchessskinclicked;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.MarkChessSkinClicked)
}

// .msg.CSReqRecruitInvitePlayer RecruitInvitePlayer = 181;
inline bool CSReqBody::_internal_has_recruitinviteplayer() const {
  return this != internal_default_instance() && _impl_.recruitinviteplayer_ != nullptr;
}
inline bool CSReqBody::has_recruitinviteplayer() const {
  return _internal_has_recruitinviteplayer();
}
inline const ::msg::CSReqRecruitInvitePlayer& CSReqBody::_internal_recruitinviteplayer() const {
  const ::msg::CSReqRecruitInvitePlayer* p = _impl_.recruitinviteplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRecruitInvitePlayer&>(
      ::msg::_CSReqRecruitInvitePlayer_default_instance_);
}
inline const ::msg::CSReqRecruitInvitePlayer& CSReqBody::recruitinviteplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RecruitInvitePlayer)
  return _internal_recruitinviteplayer();
}
inline void CSReqBody::unsafe_arena_set_allocated_recruitinviteplayer(
    ::msg::CSReqRecruitInvitePlayer* recruitinviteplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recruitinviteplayer_);
  }
  _impl_.recruitinviteplayer_ = recruitinviteplayer;
  if (recruitinviteplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RecruitInvitePlayer)
}
inline ::msg::CSReqRecruitInvitePlayer* CSReqBody::release_recruitinviteplayer() {
  
  ::msg::CSReqRecruitInvitePlayer* temp = _impl_.recruitinviteplayer_;
  _impl_.recruitinviteplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRecruitInvitePlayer* CSReqBody::unsafe_arena_release_recruitinviteplayer() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RecruitInvitePlayer)
  
  ::msg::CSReqRecruitInvitePlayer* temp = _impl_.recruitinviteplayer_;
  _impl_.recruitinviteplayer_ = nullptr;
  return temp;
}
inline ::msg::CSReqRecruitInvitePlayer* CSReqBody::_internal_mutable_recruitinviteplayer() {
  
  if (_impl_.recruitinviteplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRecruitInvitePlayer>(GetArenaForAllocation());
    _impl_.recruitinviteplayer_ = p;
  }
  return _impl_.recruitinviteplayer_;
}
inline ::msg::CSReqRecruitInvitePlayer* CSReqBody::mutable_recruitinviteplayer() {
  ::msg::CSReqRecruitInvitePlayer* _msg = _internal_mutable_recruitinviteplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RecruitInvitePlayer)
  return _msg;
}
inline void CSReqBody::set_allocated_recruitinviteplayer(::msg::CSReqRecruitInvitePlayer* recruitinviteplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recruitinviteplayer_);
  }
  if (recruitinviteplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recruitinviteplayer));
    if (message_arena != submessage_arena) {
      recruitinviteplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recruitinviteplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recruitinviteplayer_ = recruitinviteplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RecruitInvitePlayer)
}

// .msg.CSReqRecruitBindInviter RecruitBindInviter = 182;
inline bool CSReqBody::_internal_has_recruitbindinviter() const {
  return this != internal_default_instance() && _impl_.recruitbindinviter_ != nullptr;
}
inline bool CSReqBody::has_recruitbindinviter() const {
  return _internal_has_recruitbindinviter();
}
inline const ::msg::CSReqRecruitBindInviter& CSReqBody::_internal_recruitbindinviter() const {
  const ::msg::CSReqRecruitBindInviter* p = _impl_.recruitbindinviter_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRecruitBindInviter&>(
      ::msg::_CSReqRecruitBindInviter_default_instance_);
}
inline const ::msg::CSReqRecruitBindInviter& CSReqBody::recruitbindinviter() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RecruitBindInviter)
  return _internal_recruitbindinviter();
}
inline void CSReqBody::unsafe_arena_set_allocated_recruitbindinviter(
    ::msg::CSReqRecruitBindInviter* recruitbindinviter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recruitbindinviter_);
  }
  _impl_.recruitbindinviter_ = recruitbindinviter;
  if (recruitbindinviter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RecruitBindInviter)
}
inline ::msg::CSReqRecruitBindInviter* CSReqBody::release_recruitbindinviter() {
  
  ::msg::CSReqRecruitBindInviter* temp = _impl_.recruitbindinviter_;
  _impl_.recruitbindinviter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRecruitBindInviter* CSReqBody::unsafe_arena_release_recruitbindinviter() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RecruitBindInviter)
  
  ::msg::CSReqRecruitBindInviter* temp = _impl_.recruitbindinviter_;
  _impl_.recruitbindinviter_ = nullptr;
  return temp;
}
inline ::msg::CSReqRecruitBindInviter* CSReqBody::_internal_mutable_recruitbindinviter() {
  
  if (_impl_.recruitbindinviter_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRecruitBindInviter>(GetArenaForAllocation());
    _impl_.recruitbindinviter_ = p;
  }
  return _impl_.recruitbindinviter_;
}
inline ::msg::CSReqRecruitBindInviter* CSReqBody::mutable_recruitbindinviter() {
  ::msg::CSReqRecruitBindInviter* _msg = _internal_mutable_recruitbindinviter();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RecruitBindInviter)
  return _msg;
}
inline void CSReqBody::set_allocated_recruitbindinviter(::msg::CSReqRecruitBindInviter* recruitbindinviter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recruitbindinviter_);
  }
  if (recruitbindinviter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recruitbindinviter));
    if (message_arena != submessage_arena) {
      recruitbindinviter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recruitbindinviter, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recruitbindinviter_ = recruitbindinviter;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RecruitBindInviter)
}

// .msg.CSReqQueryPs4Entitlements QueryPs4Entitlements = 183;
inline bool CSReqBody::_internal_has_queryps4entitlements() const {
  return this != internal_default_instance() && _impl_.queryps4entitlements_ != nullptr;
}
inline bool CSReqBody::has_queryps4entitlements() const {
  return _internal_has_queryps4entitlements();
}
inline const ::msg::CSReqQueryPs4Entitlements& CSReqBody::_internal_queryps4entitlements() const {
  const ::msg::CSReqQueryPs4Entitlements* p = _impl_.queryps4entitlements_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqQueryPs4Entitlements&>(
      ::msg::_CSReqQueryPs4Entitlements_default_instance_);
}
inline const ::msg::CSReqQueryPs4Entitlements& CSReqBody::queryps4entitlements() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.QueryPs4Entitlements)
  return _internal_queryps4entitlements();
}
inline void CSReqBody::unsafe_arena_set_allocated_queryps4entitlements(
    ::msg::CSReqQueryPs4Entitlements* queryps4entitlements) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.queryps4entitlements_);
  }
  _impl_.queryps4entitlements_ = queryps4entitlements;
  if (queryps4entitlements) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.QueryPs4Entitlements)
}
inline ::msg::CSReqQueryPs4Entitlements* CSReqBody::release_queryps4entitlements() {
  
  ::msg::CSReqQueryPs4Entitlements* temp = _impl_.queryps4entitlements_;
  _impl_.queryps4entitlements_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqQueryPs4Entitlements* CSReqBody::unsafe_arena_release_queryps4entitlements() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.QueryPs4Entitlements)
  
  ::msg::CSReqQueryPs4Entitlements* temp = _impl_.queryps4entitlements_;
  _impl_.queryps4entitlements_ = nullptr;
  return temp;
}
inline ::msg::CSReqQueryPs4Entitlements* CSReqBody::_internal_mutable_queryps4entitlements() {
  
  if (_impl_.queryps4entitlements_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqQueryPs4Entitlements>(GetArenaForAllocation());
    _impl_.queryps4entitlements_ = p;
  }
  return _impl_.queryps4entitlements_;
}
inline ::msg::CSReqQueryPs4Entitlements* CSReqBody::mutable_queryps4entitlements() {
  ::msg::CSReqQueryPs4Entitlements* _msg = _internal_mutable_queryps4entitlements();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.QueryPs4Entitlements)
  return _msg;
}
inline void CSReqBody::set_allocated_queryps4entitlements(::msg::CSReqQueryPs4Entitlements* queryps4entitlements) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.queryps4entitlements_);
  }
  if (queryps4entitlements) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(queryps4entitlements));
    if (message_arena != submessage_arena) {
      queryps4entitlements = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queryps4entitlements, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.queryps4entitlements_ = queryps4entitlements;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.QueryPs4Entitlements)
}

// .msg.CSReqActDaySign ActDaySign = 184;
inline bool CSReqBody::_internal_has_actdaysign() const {
  return this != internal_default_instance() && _impl_.actdaysign_ != nullptr;
}
inline bool CSReqBody::has_actdaysign() const {
  return _internal_has_actdaysign();
}
inline const ::msg::CSReqActDaySign& CSReqBody::_internal_actdaysign() const {
  const ::msg::CSReqActDaySign* p = _impl_.actdaysign_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqActDaySign&>(
      ::msg::_CSReqActDaySign_default_instance_);
}
inline const ::msg::CSReqActDaySign& CSReqBody::actdaysign() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ActDaySign)
  return _internal_actdaysign();
}
inline void CSReqBody::unsafe_arena_set_allocated_actdaysign(
    ::msg::CSReqActDaySign* actdaysign) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actdaysign_);
  }
  _impl_.actdaysign_ = actdaysign;
  if (actdaysign) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ActDaySign)
}
inline ::msg::CSReqActDaySign* CSReqBody::release_actdaysign() {
  
  ::msg::CSReqActDaySign* temp = _impl_.actdaysign_;
  _impl_.actdaysign_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqActDaySign* CSReqBody::unsafe_arena_release_actdaysign() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ActDaySign)
  
  ::msg::CSReqActDaySign* temp = _impl_.actdaysign_;
  _impl_.actdaysign_ = nullptr;
  return temp;
}
inline ::msg::CSReqActDaySign* CSReqBody::_internal_mutable_actdaysign() {
  
  if (_impl_.actdaysign_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqActDaySign>(GetArenaForAllocation());
    _impl_.actdaysign_ = p;
  }
  return _impl_.actdaysign_;
}
inline ::msg::CSReqActDaySign* CSReqBody::mutable_actdaysign() {
  ::msg::CSReqActDaySign* _msg = _internal_mutable_actdaysign();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ActDaySign)
  return _msg;
}
inline void CSReqBody::set_allocated_actdaysign(::msg::CSReqActDaySign* actdaysign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actdaysign_);
  }
  if (actdaysign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actdaysign));
    if (message_arena != submessage_arena) {
      actdaysign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actdaysign, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.actdaysign_ = actdaysign;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ActDaySign)
}

// .msg.CSReqHaveThirdPvp HaveThirdPvpInfo = 185;
inline bool CSReqBody::_internal_has_havethirdpvpinfo() const {
  return this != internal_default_instance() && _impl_.havethirdpvpinfo_ != nullptr;
}
inline bool CSReqBody::has_havethirdpvpinfo() const {
  return _internal_has_havethirdpvpinfo();
}
inline const ::msg::CSReqHaveThirdPvp& CSReqBody::_internal_havethirdpvpinfo() const {
  const ::msg::CSReqHaveThirdPvp* p = _impl_.havethirdpvpinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqHaveThirdPvp&>(
      ::msg::_CSReqHaveThirdPvp_default_instance_);
}
inline const ::msg::CSReqHaveThirdPvp& CSReqBody::havethirdpvpinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.HaveThirdPvpInfo)
  return _internal_havethirdpvpinfo();
}
inline void CSReqBody::unsafe_arena_set_allocated_havethirdpvpinfo(
    ::msg::CSReqHaveThirdPvp* havethirdpvpinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.havethirdpvpinfo_);
  }
  _impl_.havethirdpvpinfo_ = havethirdpvpinfo;
  if (havethirdpvpinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.HaveThirdPvpInfo)
}
inline ::msg::CSReqHaveThirdPvp* CSReqBody::release_havethirdpvpinfo() {
  
  ::msg::CSReqHaveThirdPvp* temp = _impl_.havethirdpvpinfo_;
  _impl_.havethirdpvpinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqHaveThirdPvp* CSReqBody::unsafe_arena_release_havethirdpvpinfo() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.HaveThirdPvpInfo)
  
  ::msg::CSReqHaveThirdPvp* temp = _impl_.havethirdpvpinfo_;
  _impl_.havethirdpvpinfo_ = nullptr;
  return temp;
}
inline ::msg::CSReqHaveThirdPvp* CSReqBody::_internal_mutable_havethirdpvpinfo() {
  
  if (_impl_.havethirdpvpinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqHaveThirdPvp>(GetArenaForAllocation());
    _impl_.havethirdpvpinfo_ = p;
  }
  return _impl_.havethirdpvpinfo_;
}
inline ::msg::CSReqHaveThirdPvp* CSReqBody::mutable_havethirdpvpinfo() {
  ::msg::CSReqHaveThirdPvp* _msg = _internal_mutable_havethirdpvpinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.HaveThirdPvpInfo)
  return _msg;
}
inline void CSReqBody::set_allocated_havethirdpvpinfo(::msg::CSReqHaveThirdPvp* havethirdpvpinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.havethirdpvpinfo_);
  }
  if (havethirdpvpinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(havethirdpvpinfo));
    if (message_arena != submessage_arena) {
      havethirdpvpinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, havethirdpvpinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.havethirdpvpinfo_ = havethirdpvpinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.HaveThirdPvpInfo)
}

// .msg.CSReqActivityMall ActivityMall = 186;
inline bool CSReqBody::_internal_has_activitymall() const {
  return this != internal_default_instance() && _impl_.activitymall_ != nullptr;
}
inline bool CSReqBody::has_activitymall() const {
  return _internal_has_activitymall();
}
inline const ::msg::CSReqActivityMall& CSReqBody::_internal_activitymall() const {
  const ::msg::CSReqActivityMall* p = _impl_.activitymall_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqActivityMall&>(
      ::msg::_CSReqActivityMall_default_instance_);
}
inline const ::msg::CSReqActivityMall& CSReqBody::activitymall() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ActivityMall)
  return _internal_activitymall();
}
inline void CSReqBody::unsafe_arena_set_allocated_activitymall(
    ::msg::CSReqActivityMall* activitymall) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activitymall_);
  }
  _impl_.activitymall_ = activitymall;
  if (activitymall) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ActivityMall)
}
inline ::msg::CSReqActivityMall* CSReqBody::release_activitymall() {
  
  ::msg::CSReqActivityMall* temp = _impl_.activitymall_;
  _impl_.activitymall_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqActivityMall* CSReqBody::unsafe_arena_release_activitymall() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ActivityMall)
  
  ::msg::CSReqActivityMall* temp = _impl_.activitymall_;
  _impl_.activitymall_ = nullptr;
  return temp;
}
inline ::msg::CSReqActivityMall* CSReqBody::_internal_mutable_activitymall() {
  
  if (_impl_.activitymall_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqActivityMall>(GetArenaForAllocation());
    _impl_.activitymall_ = p;
  }
  return _impl_.activitymall_;
}
inline ::msg::CSReqActivityMall* CSReqBody::mutable_activitymall() {
  ::msg::CSReqActivityMall* _msg = _internal_mutable_activitymall();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ActivityMall)
  return _msg;
}
inline void CSReqBody::set_allocated_activitymall(::msg::CSReqActivityMall* activitymall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activitymall_);
  }
  if (activitymall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activitymall));
    if (message_arena != submessage_arena) {
      activitymall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activitymall, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.activitymall_ = activitymall;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ActivityMall)
}

// .msg.CSReqPsOnly PsOnly = 187;
inline bool CSReqBody::_internal_has_psonly() const {
  return this != internal_default_instance() && _impl_.psonly_ != nullptr;
}
inline bool CSReqBody::has_psonly() const {
  return _internal_has_psonly();
}
inline const ::msg::CSReqPsOnly& CSReqBody::_internal_psonly() const {
  const ::msg::CSReqPsOnly* p = _impl_.psonly_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPsOnly&>(
      ::msg::_CSReqPsOnly_default_instance_);
}
inline const ::msg::CSReqPsOnly& CSReqBody::psonly() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PsOnly)
  return _internal_psonly();
}
inline void CSReqBody::unsafe_arena_set_allocated_psonly(
    ::msg::CSReqPsOnly* psonly) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.psonly_);
  }
  _impl_.psonly_ = psonly;
  if (psonly) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PsOnly)
}
inline ::msg::CSReqPsOnly* CSReqBody::release_psonly() {
  
  ::msg::CSReqPsOnly* temp = _impl_.psonly_;
  _impl_.psonly_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPsOnly* CSReqBody::unsafe_arena_release_psonly() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PsOnly)
  
  ::msg::CSReqPsOnly* temp = _impl_.psonly_;
  _impl_.psonly_ = nullptr;
  return temp;
}
inline ::msg::CSReqPsOnly* CSReqBody::_internal_mutable_psonly() {
  
  if (_impl_.psonly_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPsOnly>(GetArenaForAllocation());
    _impl_.psonly_ = p;
  }
  return _impl_.psonly_;
}
inline ::msg::CSReqPsOnly* CSReqBody::mutable_psonly() {
  ::msg::CSReqPsOnly* _msg = _internal_mutable_psonly();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PsOnly)
  return _msg;
}
inline void CSReqBody::set_allocated_psonly(::msg::CSReqPsOnly* psonly) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.psonly_);
  }
  if (psonly) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psonly));
    if (message_arena != submessage_arena) {
      psonly = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psonly, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.psonly_ = psonly;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PsOnly)
}

// .msg.CSReqChangeChannelType ChangeChannelType = 188;
inline bool CSReqBody::_internal_has_changechanneltype() const {
  return this != internal_default_instance() && _impl_.changechanneltype_ != nullptr;
}
inline bool CSReqBody::has_changechanneltype() const {
  return _internal_has_changechanneltype();
}
inline const ::msg::CSReqChangeChannelType& CSReqBody::_internal_changechanneltype() const {
  const ::msg::CSReqChangeChannelType* p = _impl_.changechanneltype_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqChangeChannelType&>(
      ::msg::_CSReqChangeChannelType_default_instance_);
}
inline const ::msg::CSReqChangeChannelType& CSReqBody::changechanneltype() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ChangeChannelType)
  return _internal_changechanneltype();
}
inline void CSReqBody::unsafe_arena_set_allocated_changechanneltype(
    ::msg::CSReqChangeChannelType* changechanneltype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changechanneltype_);
  }
  _impl_.changechanneltype_ = changechanneltype;
  if (changechanneltype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ChangeChannelType)
}
inline ::msg::CSReqChangeChannelType* CSReqBody::release_changechanneltype() {
  
  ::msg::CSReqChangeChannelType* temp = _impl_.changechanneltype_;
  _impl_.changechanneltype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqChangeChannelType* CSReqBody::unsafe_arena_release_changechanneltype() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ChangeChannelType)
  
  ::msg::CSReqChangeChannelType* temp = _impl_.changechanneltype_;
  _impl_.changechanneltype_ = nullptr;
  return temp;
}
inline ::msg::CSReqChangeChannelType* CSReqBody::_internal_mutable_changechanneltype() {
  
  if (_impl_.changechanneltype_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqChangeChannelType>(GetArenaForAllocation());
    _impl_.changechanneltype_ = p;
  }
  return _impl_.changechanneltype_;
}
inline ::msg::CSReqChangeChannelType* CSReqBody::mutable_changechanneltype() {
  ::msg::CSReqChangeChannelType* _msg = _internal_mutable_changechanneltype();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ChangeChannelType)
  return _msg;
}
inline void CSReqBody::set_allocated_changechanneltype(::msg::CSReqChangeChannelType* changechanneltype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changechanneltype_);
  }
  if (changechanneltype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(changechanneltype));
    if (message_arena != submessage_arena) {
      changechanneltype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changechanneltype, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.changechanneltype_ = changechanneltype;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ChangeChannelType)
}

// .msg.CSReqCustomCardOpt CustomCardOpt = 189;
inline bool CSReqBody::_internal_has_customcardopt() const {
  return this != internal_default_instance() && _impl_.customcardopt_ != nullptr;
}
inline bool CSReqBody::has_customcardopt() const {
  return _internal_has_customcardopt();
}
inline const ::msg::CSReqCustomCardOpt& CSReqBody::_internal_customcardopt() const {
  const ::msg::CSReqCustomCardOpt* p = _impl_.customcardopt_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqCustomCardOpt&>(
      ::msg::_CSReqCustomCardOpt_default_instance_);
}
inline const ::msg::CSReqCustomCardOpt& CSReqBody::customcardopt() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.CustomCardOpt)
  return _internal_customcardopt();
}
inline void CSReqBody::unsafe_arena_set_allocated_customcardopt(
    ::msg::CSReqCustomCardOpt* customcardopt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.customcardopt_);
  }
  _impl_.customcardopt_ = customcardopt;
  if (customcardopt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.CustomCardOpt)
}
inline ::msg::CSReqCustomCardOpt* CSReqBody::release_customcardopt() {
  
  ::msg::CSReqCustomCardOpt* temp = _impl_.customcardopt_;
  _impl_.customcardopt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqCustomCardOpt* CSReqBody::unsafe_arena_release_customcardopt() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.CustomCardOpt)
  
  ::msg::CSReqCustomCardOpt* temp = _impl_.customcardopt_;
  _impl_.customcardopt_ = nullptr;
  return temp;
}
inline ::msg::CSReqCustomCardOpt* CSReqBody::_internal_mutable_customcardopt() {
  
  if (_impl_.customcardopt_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqCustomCardOpt>(GetArenaForAllocation());
    _impl_.customcardopt_ = p;
  }
  return _impl_.customcardopt_;
}
inline ::msg::CSReqCustomCardOpt* CSReqBody::mutable_customcardopt() {
  ::msg::CSReqCustomCardOpt* _msg = _internal_mutable_customcardopt();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.CustomCardOpt)
  return _msg;
}
inline void CSReqBody::set_allocated_customcardopt(::msg::CSReqCustomCardOpt* customcardopt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.customcardopt_);
  }
  if (customcardopt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customcardopt));
    if (message_arena != submessage_arena) {
      customcardopt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customcardopt, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.customcardopt_ = customcardopt;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.CustomCardOpt)
}

// .msg.CSReqStaticsReport StaticsReport = 190;
inline bool CSReqBody::_internal_has_staticsreport() const {
  return this != internal_default_instance() && _impl_.staticsreport_ != nullptr;
}
inline bool CSReqBody::has_staticsreport() const {
  return _internal_has_staticsreport();
}
inline const ::msg::CSReqStaticsReport& CSReqBody::_internal_staticsreport() const {
  const ::msg::CSReqStaticsReport* p = _impl_.staticsreport_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqStaticsReport&>(
      ::msg::_CSReqStaticsReport_default_instance_);
}
inline const ::msg::CSReqStaticsReport& CSReqBody::staticsreport() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.StaticsReport)
  return _internal_staticsreport();
}
inline void CSReqBody::unsafe_arena_set_allocated_staticsreport(
    ::msg::CSReqStaticsReport* staticsreport) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.staticsreport_);
  }
  _impl_.staticsreport_ = staticsreport;
  if (staticsreport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.StaticsReport)
}
inline ::msg::CSReqStaticsReport* CSReqBody::release_staticsreport() {
  
  ::msg::CSReqStaticsReport* temp = _impl_.staticsreport_;
  _impl_.staticsreport_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqStaticsReport* CSReqBody::unsafe_arena_release_staticsreport() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.StaticsReport)
  
  ::msg::CSReqStaticsReport* temp = _impl_.staticsreport_;
  _impl_.staticsreport_ = nullptr;
  return temp;
}
inline ::msg::CSReqStaticsReport* CSReqBody::_internal_mutable_staticsreport() {
  
  if (_impl_.staticsreport_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqStaticsReport>(GetArenaForAllocation());
    _impl_.staticsreport_ = p;
  }
  return _impl_.staticsreport_;
}
inline ::msg::CSReqStaticsReport* CSReqBody::mutable_staticsreport() {
  ::msg::CSReqStaticsReport* _msg = _internal_mutable_staticsreport();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.StaticsReport)
  return _msg;
}
inline void CSReqBody::set_allocated_staticsreport(::msg::CSReqStaticsReport* staticsreport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.staticsreport_);
  }
  if (staticsreport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(staticsreport));
    if (message_arena != submessage_arena) {
      staticsreport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, staticsreport, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.staticsreport_ = staticsreport;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.StaticsReport)
}

// .msg.CSReqChampionHistory ChampionHistory = 191;
inline bool CSReqBody::_internal_has_championhistory() const {
  return this != internal_default_instance() && _impl_.championhistory_ != nullptr;
}
inline bool CSReqBody::has_championhistory() const {
  return _internal_has_championhistory();
}
inline const ::msg::CSReqChampionHistory& CSReqBody::_internal_championhistory() const {
  const ::msg::CSReqChampionHistory* p = _impl_.championhistory_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqChampionHistory&>(
      ::msg::_CSReqChampionHistory_default_instance_);
}
inline const ::msg::CSReqChampionHistory& CSReqBody::championhistory() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ChampionHistory)
  return _internal_championhistory();
}
inline void CSReqBody::unsafe_arena_set_allocated_championhistory(
    ::msg::CSReqChampionHistory* championhistory) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.championhistory_);
  }
  _impl_.championhistory_ = championhistory;
  if (championhistory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ChampionHistory)
}
inline ::msg::CSReqChampionHistory* CSReqBody::release_championhistory() {
  
  ::msg::CSReqChampionHistory* temp = _impl_.championhistory_;
  _impl_.championhistory_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqChampionHistory* CSReqBody::unsafe_arena_release_championhistory() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ChampionHistory)
  
  ::msg::CSReqChampionHistory* temp = _impl_.championhistory_;
  _impl_.championhistory_ = nullptr;
  return temp;
}
inline ::msg::CSReqChampionHistory* CSReqBody::_internal_mutable_championhistory() {
  
  if (_impl_.championhistory_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqChampionHistory>(GetArenaForAllocation());
    _impl_.championhistory_ = p;
  }
  return _impl_.championhistory_;
}
inline ::msg::CSReqChampionHistory* CSReqBody::mutable_championhistory() {
  ::msg::CSReqChampionHistory* _msg = _internal_mutable_championhistory();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ChampionHistory)
  return _msg;
}
inline void CSReqBody::set_allocated_championhistory(::msg::CSReqChampionHistory* championhistory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.championhistory_);
  }
  if (championhistory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(championhistory));
    if (message_arena != submessage_arena) {
      championhistory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, championhistory, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.championhistory_ = championhistory;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ChampionHistory)
}

// .msg.CSReqTournamentLastTopRank TournamentLastTopRank = 192;
inline bool CSReqBody::_internal_has_tournamentlasttoprank() const {
  return this != internal_default_instance() && _impl_.tournamentlasttoprank_ != nullptr;
}
inline bool CSReqBody::has_tournamentlasttoprank() const {
  return _internal_has_tournamentlasttoprank();
}
inline const ::msg::CSReqTournamentLastTopRank& CSReqBody::_internal_tournamentlasttoprank() const {
  const ::msg::CSReqTournamentLastTopRank* p = _impl_.tournamentlasttoprank_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqTournamentLastTopRank&>(
      ::msg::_CSReqTournamentLastTopRank_default_instance_);
}
inline const ::msg::CSReqTournamentLastTopRank& CSReqBody::tournamentlasttoprank() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.TournamentLastTopRank)
  return _internal_tournamentlasttoprank();
}
inline void CSReqBody::unsafe_arena_set_allocated_tournamentlasttoprank(
    ::msg::CSReqTournamentLastTopRank* tournamentlasttoprank) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentlasttoprank_);
  }
  _impl_.tournamentlasttoprank_ = tournamentlasttoprank;
  if (tournamentlasttoprank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.TournamentLastTopRank)
}
inline ::msg::CSReqTournamentLastTopRank* CSReqBody::release_tournamentlasttoprank() {
  
  ::msg::CSReqTournamentLastTopRank* temp = _impl_.tournamentlasttoprank_;
  _impl_.tournamentlasttoprank_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqTournamentLastTopRank* CSReqBody::unsafe_arena_release_tournamentlasttoprank() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.TournamentLastTopRank)
  
  ::msg::CSReqTournamentLastTopRank* temp = _impl_.tournamentlasttoprank_;
  _impl_.tournamentlasttoprank_ = nullptr;
  return temp;
}
inline ::msg::CSReqTournamentLastTopRank* CSReqBody::_internal_mutable_tournamentlasttoprank() {
  
  if (_impl_.tournamentlasttoprank_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqTournamentLastTopRank>(GetArenaForAllocation());
    _impl_.tournamentlasttoprank_ = p;
  }
  return _impl_.tournamentlasttoprank_;
}
inline ::msg::CSReqTournamentLastTopRank* CSReqBody::mutable_tournamentlasttoprank() {
  ::msg::CSReqTournamentLastTopRank* _msg = _internal_mutable_tournamentlasttoprank();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.TournamentLastTopRank)
  return _msg;
}
inline void CSReqBody::set_allocated_tournamentlasttoprank(::msg::CSReqTournamentLastTopRank* tournamentlasttoprank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentlasttoprank_);
  }
  if (tournamentlasttoprank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tournamentlasttoprank));
    if (message_arena != submessage_arena) {
      tournamentlasttoprank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tournamentlasttoprank, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tournamentlasttoprank_ = tournamentlasttoprank;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.TournamentLastTopRank)
}

// .msg.CSReqBigWinnerExpandMatch BigWinnerExpandMatch = 193;
inline bool CSReqBody::_internal_has_bigwinnerexpandmatch() const {
  return this != internal_default_instance() && _impl_.bigwinnerexpandmatch_ != nullptr;
}
inline bool CSReqBody::has_bigwinnerexpandmatch() const {
  return _internal_has_bigwinnerexpandmatch();
}
inline const ::msg::CSReqBigWinnerExpandMatch& CSReqBody::_internal_bigwinnerexpandmatch() const {
  const ::msg::CSReqBigWinnerExpandMatch* p = _impl_.bigwinnerexpandmatch_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqBigWinnerExpandMatch&>(
      ::msg::_CSReqBigWinnerExpandMatch_default_instance_);
}
inline const ::msg::CSReqBigWinnerExpandMatch& CSReqBody::bigwinnerexpandmatch() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.BigWinnerExpandMatch)
  return _internal_bigwinnerexpandmatch();
}
inline void CSReqBody::unsafe_arena_set_allocated_bigwinnerexpandmatch(
    ::msg::CSReqBigWinnerExpandMatch* bigwinnerexpandmatch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bigwinnerexpandmatch_);
  }
  _impl_.bigwinnerexpandmatch_ = bigwinnerexpandmatch;
  if (bigwinnerexpandmatch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.BigWinnerExpandMatch)
}
inline ::msg::CSReqBigWinnerExpandMatch* CSReqBody::release_bigwinnerexpandmatch() {
  
  ::msg::CSReqBigWinnerExpandMatch* temp = _impl_.bigwinnerexpandmatch_;
  _impl_.bigwinnerexpandmatch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqBigWinnerExpandMatch* CSReqBody::unsafe_arena_release_bigwinnerexpandmatch() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.BigWinnerExpandMatch)
  
  ::msg::CSReqBigWinnerExpandMatch* temp = _impl_.bigwinnerexpandmatch_;
  _impl_.bigwinnerexpandmatch_ = nullptr;
  return temp;
}
inline ::msg::CSReqBigWinnerExpandMatch* CSReqBody::_internal_mutable_bigwinnerexpandmatch() {
  
  if (_impl_.bigwinnerexpandmatch_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqBigWinnerExpandMatch>(GetArenaForAllocation());
    _impl_.bigwinnerexpandmatch_ = p;
  }
  return _impl_.bigwinnerexpandmatch_;
}
inline ::msg::CSReqBigWinnerExpandMatch* CSReqBody::mutable_bigwinnerexpandmatch() {
  ::msg::CSReqBigWinnerExpandMatch* _msg = _internal_mutable_bigwinnerexpandmatch();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.BigWinnerExpandMatch)
  return _msg;
}
inline void CSReqBody::set_allocated_bigwinnerexpandmatch(::msg::CSReqBigWinnerExpandMatch* bigwinnerexpandmatch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bigwinnerexpandmatch_);
  }
  if (bigwinnerexpandmatch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bigwinnerexpandmatch));
    if (message_arena != submessage_arena) {
      bigwinnerexpandmatch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bigwinnerexpandmatch, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bigwinnerexpandmatch_ = bigwinnerexpandmatch;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.BigWinnerExpandMatch)
}

// .msg.CSReqBigWinnerDailyAward BigWinnerDailyAward = 194;
inline bool CSReqBody::_internal_has_bigwinnerdailyaward() const {
  return this != internal_default_instance() && _impl_.bigwinnerdailyaward_ != nullptr;
}
inline bool CSReqBody::has_bigwinnerdailyaward() const {
  return _internal_has_bigwinnerdailyaward();
}
inline const ::msg::CSReqBigWinnerDailyAward& CSReqBody::_internal_bigwinnerdailyaward() const {
  const ::msg::CSReqBigWinnerDailyAward* p = _impl_.bigwinnerdailyaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqBigWinnerDailyAward&>(
      ::msg::_CSReqBigWinnerDailyAward_default_instance_);
}
inline const ::msg::CSReqBigWinnerDailyAward& CSReqBody::bigwinnerdailyaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.BigWinnerDailyAward)
  return _internal_bigwinnerdailyaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_bigwinnerdailyaward(
    ::msg::CSReqBigWinnerDailyAward* bigwinnerdailyaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bigwinnerdailyaward_);
  }
  _impl_.bigwinnerdailyaward_ = bigwinnerdailyaward;
  if (bigwinnerdailyaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.BigWinnerDailyAward)
}
inline ::msg::CSReqBigWinnerDailyAward* CSReqBody::release_bigwinnerdailyaward() {
  
  ::msg::CSReqBigWinnerDailyAward* temp = _impl_.bigwinnerdailyaward_;
  _impl_.bigwinnerdailyaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqBigWinnerDailyAward* CSReqBody::unsafe_arena_release_bigwinnerdailyaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.BigWinnerDailyAward)
  
  ::msg::CSReqBigWinnerDailyAward* temp = _impl_.bigwinnerdailyaward_;
  _impl_.bigwinnerdailyaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqBigWinnerDailyAward* CSReqBody::_internal_mutable_bigwinnerdailyaward() {
  
  if (_impl_.bigwinnerdailyaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqBigWinnerDailyAward>(GetArenaForAllocation());
    _impl_.bigwinnerdailyaward_ = p;
  }
  return _impl_.bigwinnerdailyaward_;
}
inline ::msg::CSReqBigWinnerDailyAward* CSReqBody::mutable_bigwinnerdailyaward() {
  ::msg::CSReqBigWinnerDailyAward* _msg = _internal_mutable_bigwinnerdailyaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.BigWinnerDailyAward)
  return _msg;
}
inline void CSReqBody::set_allocated_bigwinnerdailyaward(::msg::CSReqBigWinnerDailyAward* bigwinnerdailyaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bigwinnerdailyaward_);
  }
  if (bigwinnerdailyaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bigwinnerdailyaward));
    if (message_arena != submessage_arena) {
      bigwinnerdailyaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bigwinnerdailyaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bigwinnerdailyaward_ = bigwinnerdailyaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.BigWinnerDailyAward)
}

// .msg.CSReqBigWinnerScoreHistory BigWinnerScoreHistory = 195;
inline bool CSReqBody::_internal_has_bigwinnerscorehistory() const {
  return this != internal_default_instance() && _impl_.bigwinnerscorehistory_ != nullptr;
}
inline bool CSReqBody::has_bigwinnerscorehistory() const {
  return _internal_has_bigwinnerscorehistory();
}
inline const ::msg::CSReqBigWinnerScoreHistory& CSReqBody::_internal_bigwinnerscorehistory() const {
  const ::msg::CSReqBigWinnerScoreHistory* p = _impl_.bigwinnerscorehistory_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqBigWinnerScoreHistory&>(
      ::msg::_CSReqBigWinnerScoreHistory_default_instance_);
}
inline const ::msg::CSReqBigWinnerScoreHistory& CSReqBody::bigwinnerscorehistory() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.BigWinnerScoreHistory)
  return _internal_bigwinnerscorehistory();
}
inline void CSReqBody::unsafe_arena_set_allocated_bigwinnerscorehistory(
    ::msg::CSReqBigWinnerScoreHistory* bigwinnerscorehistory) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bigwinnerscorehistory_);
  }
  _impl_.bigwinnerscorehistory_ = bigwinnerscorehistory;
  if (bigwinnerscorehistory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.BigWinnerScoreHistory)
}
inline ::msg::CSReqBigWinnerScoreHistory* CSReqBody::release_bigwinnerscorehistory() {
  
  ::msg::CSReqBigWinnerScoreHistory* temp = _impl_.bigwinnerscorehistory_;
  _impl_.bigwinnerscorehistory_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqBigWinnerScoreHistory* CSReqBody::unsafe_arena_release_bigwinnerscorehistory() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.BigWinnerScoreHistory)
  
  ::msg::CSReqBigWinnerScoreHistory* temp = _impl_.bigwinnerscorehistory_;
  _impl_.bigwinnerscorehistory_ = nullptr;
  return temp;
}
inline ::msg::CSReqBigWinnerScoreHistory* CSReqBody::_internal_mutable_bigwinnerscorehistory() {
  
  if (_impl_.bigwinnerscorehistory_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqBigWinnerScoreHistory>(GetArenaForAllocation());
    _impl_.bigwinnerscorehistory_ = p;
  }
  return _impl_.bigwinnerscorehistory_;
}
inline ::msg::CSReqBigWinnerScoreHistory* CSReqBody::mutable_bigwinnerscorehistory() {
  ::msg::CSReqBigWinnerScoreHistory* _msg = _internal_mutable_bigwinnerscorehistory();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.BigWinnerScoreHistory)
  return _msg;
}
inline void CSReqBody::set_allocated_bigwinnerscorehistory(::msg::CSReqBigWinnerScoreHistory* bigwinnerscorehistory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bigwinnerscorehistory_);
  }
  if (bigwinnerscorehistory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bigwinnerscorehistory));
    if (message_arena != submessage_arena) {
      bigwinnerscorehistory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bigwinnerscorehistory, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bigwinnerscorehistory_ = bigwinnerscorehistory;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.BigWinnerScoreHistory)
}

// .msg.CSReqSmeltItem SmeltItem = 196;
inline bool CSReqBody::_internal_has_smeltitem() const {
  return this != internal_default_instance() && _impl_.smeltitem_ != nullptr;
}
inline bool CSReqBody::has_smeltitem() const {
  return _internal_has_smeltitem();
}
inline const ::msg::CSReqSmeltItem& CSReqBody::_internal_smeltitem() const {
  const ::msg::CSReqSmeltItem* p = _impl_.smeltitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSmeltItem&>(
      ::msg::_CSReqSmeltItem_default_instance_);
}
inline const ::msg::CSReqSmeltItem& CSReqBody::smeltitem() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SmeltItem)
  return _internal_smeltitem();
}
inline void CSReqBody::unsafe_arena_set_allocated_smeltitem(
    ::msg::CSReqSmeltItem* smeltitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.smeltitem_);
  }
  _impl_.smeltitem_ = smeltitem;
  if (smeltitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SmeltItem)
}
inline ::msg::CSReqSmeltItem* CSReqBody::release_smeltitem() {
  
  ::msg::CSReqSmeltItem* temp = _impl_.smeltitem_;
  _impl_.smeltitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSmeltItem* CSReqBody::unsafe_arena_release_smeltitem() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SmeltItem)
  
  ::msg::CSReqSmeltItem* temp = _impl_.smeltitem_;
  _impl_.smeltitem_ = nullptr;
  return temp;
}
inline ::msg::CSReqSmeltItem* CSReqBody::_internal_mutable_smeltitem() {
  
  if (_impl_.smeltitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSmeltItem>(GetArenaForAllocation());
    _impl_.smeltitem_ = p;
  }
  return _impl_.smeltitem_;
}
inline ::msg::CSReqSmeltItem* CSReqBody::mutable_smeltitem() {
  ::msg::CSReqSmeltItem* _msg = _internal_mutable_smeltitem();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SmeltItem)
  return _msg;
}
inline void CSReqBody::set_allocated_smeltitem(::msg::CSReqSmeltItem* smeltitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.smeltitem_);
  }
  if (smeltitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(smeltitem));
    if (message_arena != submessage_arena) {
      smeltitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smeltitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.smeltitem_ = smeltitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SmeltItem)
}

// .msg.CSReqPVEUpTalentLevel PVEUpTalentLevel = 197;
inline bool CSReqBody::_internal_has_pveuptalentlevel() const {
  return this != internal_default_instance() && _impl_.pveuptalentlevel_ != nullptr;
}
inline bool CSReqBody::has_pveuptalentlevel() const {
  return _internal_has_pveuptalentlevel();
}
inline const ::msg::CSReqPVEUpTalentLevel& CSReqBody::_internal_pveuptalentlevel() const {
  const ::msg::CSReqPVEUpTalentLevel* p = _impl_.pveuptalentlevel_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPVEUpTalentLevel&>(
      ::msg::_CSReqPVEUpTalentLevel_default_instance_);
}
inline const ::msg::CSReqPVEUpTalentLevel& CSReqBody::pveuptalentlevel() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PVEUpTalentLevel)
  return _internal_pveuptalentlevel();
}
inline void CSReqBody::unsafe_arena_set_allocated_pveuptalentlevel(
    ::msg::CSReqPVEUpTalentLevel* pveuptalentlevel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pveuptalentlevel_);
  }
  _impl_.pveuptalentlevel_ = pveuptalentlevel;
  if (pveuptalentlevel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PVEUpTalentLevel)
}
inline ::msg::CSReqPVEUpTalentLevel* CSReqBody::release_pveuptalentlevel() {
  
  ::msg::CSReqPVEUpTalentLevel* temp = _impl_.pveuptalentlevel_;
  _impl_.pveuptalentlevel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPVEUpTalentLevel* CSReqBody::unsafe_arena_release_pveuptalentlevel() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PVEUpTalentLevel)
  
  ::msg::CSReqPVEUpTalentLevel* temp = _impl_.pveuptalentlevel_;
  _impl_.pveuptalentlevel_ = nullptr;
  return temp;
}
inline ::msg::CSReqPVEUpTalentLevel* CSReqBody::_internal_mutable_pveuptalentlevel() {
  
  if (_impl_.pveuptalentlevel_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPVEUpTalentLevel>(GetArenaForAllocation());
    _impl_.pveuptalentlevel_ = p;
  }
  return _impl_.pveuptalentlevel_;
}
inline ::msg::CSReqPVEUpTalentLevel* CSReqBody::mutable_pveuptalentlevel() {
  ::msg::CSReqPVEUpTalentLevel* _msg = _internal_mutable_pveuptalentlevel();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PVEUpTalentLevel)
  return _msg;
}
inline void CSReqBody::set_allocated_pveuptalentlevel(::msg::CSReqPVEUpTalentLevel* pveuptalentlevel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pveuptalentlevel_);
  }
  if (pveuptalentlevel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pveuptalentlevel));
    if (message_arena != submessage_arena) {
      pveuptalentlevel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pveuptalentlevel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pveuptalentlevel_ = pveuptalentlevel;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PVEUpTalentLevel)
}

// .msg.CSReqPVELuckyAward LuckyAward = 198;
inline bool CSReqBody::_internal_has_luckyaward() const {
  return this != internal_default_instance() && _impl_.luckyaward_ != nullptr;
}
inline bool CSReqBody::has_luckyaward() const {
  return _internal_has_luckyaward();
}
inline const ::msg::CSReqPVELuckyAward& CSReqBody::_internal_luckyaward() const {
  const ::msg::CSReqPVELuckyAward* p = _impl_.luckyaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPVELuckyAward&>(
      ::msg::_CSReqPVELuckyAward_default_instance_);
}
inline const ::msg::CSReqPVELuckyAward& CSReqBody::luckyaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.LuckyAward)
  return _internal_luckyaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_luckyaward(
    ::msg::CSReqPVELuckyAward* luckyaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.luckyaward_);
  }
  _impl_.luckyaward_ = luckyaward;
  if (luckyaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.LuckyAward)
}
inline ::msg::CSReqPVELuckyAward* CSReqBody::release_luckyaward() {
  
  ::msg::CSReqPVELuckyAward* temp = _impl_.luckyaward_;
  _impl_.luckyaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPVELuckyAward* CSReqBody::unsafe_arena_release_luckyaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.LuckyAward)
  
  ::msg::CSReqPVELuckyAward* temp = _impl_.luckyaward_;
  _impl_.luckyaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqPVELuckyAward* CSReqBody::_internal_mutable_luckyaward() {
  
  if (_impl_.luckyaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPVELuckyAward>(GetArenaForAllocation());
    _impl_.luckyaward_ = p;
  }
  return _impl_.luckyaward_;
}
inline ::msg::CSReqPVELuckyAward* CSReqBody::mutable_luckyaward() {
  ::msg::CSReqPVELuckyAward* _msg = _internal_mutable_luckyaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.LuckyAward)
  return _msg;
}
inline void CSReqBody::set_allocated_luckyaward(::msg::CSReqPVELuckyAward* luckyaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.luckyaward_);
  }
  if (luckyaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(luckyaward));
    if (message_arena != submessage_arena) {
      luckyaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, luckyaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.luckyaward_ = luckyaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.LuckyAward)
}

// .msg.CSReqApplyChannel ApplyChannel = 199;
inline bool CSReqBody::_internal_has_applychannel() const {
  return this != internal_default_instance() && _impl_.applychannel_ != nullptr;
}
inline bool CSReqBody::has_applychannel() const {
  return _internal_has_applychannel();
}
inline const ::msg::CSReqApplyChannel& CSReqBody::_internal_applychannel() const {
  const ::msg::CSReqApplyChannel* p = _impl_.applychannel_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqApplyChannel&>(
      ::msg::_CSReqApplyChannel_default_instance_);
}
inline const ::msg::CSReqApplyChannel& CSReqBody::applychannel() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ApplyChannel)
  return _internal_applychannel();
}
inline void CSReqBody::unsafe_arena_set_allocated_applychannel(
    ::msg::CSReqApplyChannel* applychannel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.applychannel_);
  }
  _impl_.applychannel_ = applychannel;
  if (applychannel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ApplyChannel)
}
inline ::msg::CSReqApplyChannel* CSReqBody::release_applychannel() {
  
  ::msg::CSReqApplyChannel* temp = _impl_.applychannel_;
  _impl_.applychannel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqApplyChannel* CSReqBody::unsafe_arena_release_applychannel() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ApplyChannel)
  
  ::msg::CSReqApplyChannel* temp = _impl_.applychannel_;
  _impl_.applychannel_ = nullptr;
  return temp;
}
inline ::msg::CSReqApplyChannel* CSReqBody::_internal_mutable_applychannel() {
  
  if (_impl_.applychannel_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqApplyChannel>(GetArenaForAllocation());
    _impl_.applychannel_ = p;
  }
  return _impl_.applychannel_;
}
inline ::msg::CSReqApplyChannel* CSReqBody::mutable_applychannel() {
  ::msg::CSReqApplyChannel* _msg = _internal_mutable_applychannel();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ApplyChannel)
  return _msg;
}
inline void CSReqBody::set_allocated_applychannel(::msg::CSReqApplyChannel* applychannel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.applychannel_);
  }
  if (applychannel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applychannel));
    if (message_arena != submessage_arena) {
      applychannel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applychannel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.applychannel_ = applychannel;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ApplyChannel)
}

// .msg.CSReqTeamOP TeamOP = 300;
inline bool CSReqBody::_internal_has_teamop() const {
  return this != internal_default_instance() && _impl_.teamop_ != nullptr;
}
inline bool CSReqBody::has_teamop() const {
  return _internal_has_teamop();
}
inline const ::msg::CSReqTeamOP& CSReqBody::_internal_teamop() const {
  const ::msg::CSReqTeamOP* p = _impl_.teamop_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqTeamOP&>(
      ::msg::_CSReqTeamOP_default_instance_);
}
inline const ::msg::CSReqTeamOP& CSReqBody::teamop() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.TeamOP)
  return _internal_teamop();
}
inline void CSReqBody::unsafe_arena_set_allocated_teamop(
    ::msg::CSReqTeamOP* teamop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamop_);
  }
  _impl_.teamop_ = teamop;
  if (teamop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.TeamOP)
}
inline ::msg::CSReqTeamOP* CSReqBody::release_teamop() {
  
  ::msg::CSReqTeamOP* temp = _impl_.teamop_;
  _impl_.teamop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqTeamOP* CSReqBody::unsafe_arena_release_teamop() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.TeamOP)
  
  ::msg::CSReqTeamOP* temp = _impl_.teamop_;
  _impl_.teamop_ = nullptr;
  return temp;
}
inline ::msg::CSReqTeamOP* CSReqBody::_internal_mutable_teamop() {
  
  if (_impl_.teamop_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqTeamOP>(GetArenaForAllocation());
    _impl_.teamop_ = p;
  }
  return _impl_.teamop_;
}
inline ::msg::CSReqTeamOP* CSReqBody::mutable_teamop() {
  ::msg::CSReqTeamOP* _msg = _internal_mutable_teamop();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.TeamOP)
  return _msg;
}
inline void CSReqBody::set_allocated_teamop(::msg::CSReqTeamOP* teamop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamop_);
  }
  if (teamop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teamop));
    if (message_arena != submessage_arena) {
      teamop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamop, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.teamop_ = teamop;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.TeamOP)
}

// .msg.CSReqOBTeamInfo OBTeamInfo = 301;
inline bool CSReqBody::_internal_has_obteaminfo() const {
  return this != internal_default_instance() && _impl_.obteaminfo_ != nullptr;
}
inline bool CSReqBody::has_obteaminfo() const {
  return _internal_has_obteaminfo();
}
inline const ::msg::CSReqOBTeamInfo& CSReqBody::_internal_obteaminfo() const {
  const ::msg::CSReqOBTeamInfo* p = _impl_.obteaminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqOBTeamInfo&>(
      ::msg::_CSReqOBTeamInfo_default_instance_);
}
inline const ::msg::CSReqOBTeamInfo& CSReqBody::obteaminfo() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.OBTeamInfo)
  return _internal_obteaminfo();
}
inline void CSReqBody::unsafe_arena_set_allocated_obteaminfo(
    ::msg::CSReqOBTeamInfo* obteaminfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obteaminfo_);
  }
  _impl_.obteaminfo_ = obteaminfo;
  if (obteaminfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.OBTeamInfo)
}
inline ::msg::CSReqOBTeamInfo* CSReqBody::release_obteaminfo() {
  
  ::msg::CSReqOBTeamInfo* temp = _impl_.obteaminfo_;
  _impl_.obteaminfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqOBTeamInfo* CSReqBody::unsafe_arena_release_obteaminfo() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.OBTeamInfo)
  
  ::msg::CSReqOBTeamInfo* temp = _impl_.obteaminfo_;
  _impl_.obteaminfo_ = nullptr;
  return temp;
}
inline ::msg::CSReqOBTeamInfo* CSReqBody::_internal_mutable_obteaminfo() {
  
  if (_impl_.obteaminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqOBTeamInfo>(GetArenaForAllocation());
    _impl_.obteaminfo_ = p;
  }
  return _impl_.obteaminfo_;
}
inline ::msg::CSReqOBTeamInfo* CSReqBody::mutable_obteaminfo() {
  ::msg::CSReqOBTeamInfo* _msg = _internal_mutable_obteaminfo();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.OBTeamInfo)
  return _msg;
}
inline void CSReqBody::set_allocated_obteaminfo(::msg::CSReqOBTeamInfo* obteaminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obteaminfo_);
  }
  if (obteaminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obteaminfo));
    if (message_arena != submessage_arena) {
      obteaminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obteaminfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.obteaminfo_ = obteaminfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.OBTeamInfo)
}

// .msg.CSReqReportHeadIconUrl HeadIconUrl = 302;
inline bool CSReqBody::_internal_has_headiconurl() const {
  return this != internal_default_instance() && _impl_.headiconurl_ != nullptr;
}
inline bool CSReqBody::has_headiconurl() const {
  return _internal_has_headiconurl();
}
inline const ::msg::CSReqReportHeadIconUrl& CSReqBody::_internal_headiconurl() const {
  const ::msg::CSReqReportHeadIconUrl* p = _impl_.headiconurl_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqReportHeadIconUrl&>(
      ::msg::_CSReqReportHeadIconUrl_default_instance_);
}
inline const ::msg::CSReqReportHeadIconUrl& CSReqBody::headiconurl() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.HeadIconUrl)
  return _internal_headiconurl();
}
inline void CSReqBody::unsafe_arena_set_allocated_headiconurl(
    ::msg::CSReqReportHeadIconUrl* headiconurl) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.headiconurl_);
  }
  _impl_.headiconurl_ = headiconurl;
  if (headiconurl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.HeadIconUrl)
}
inline ::msg::CSReqReportHeadIconUrl* CSReqBody::release_headiconurl() {
  
  ::msg::CSReqReportHeadIconUrl* temp = _impl_.headiconurl_;
  _impl_.headiconurl_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqReportHeadIconUrl* CSReqBody::unsafe_arena_release_headiconurl() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.HeadIconUrl)
  
  ::msg::CSReqReportHeadIconUrl* temp = _impl_.headiconurl_;
  _impl_.headiconurl_ = nullptr;
  return temp;
}
inline ::msg::CSReqReportHeadIconUrl* CSReqBody::_internal_mutable_headiconurl() {
  
  if (_impl_.headiconurl_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqReportHeadIconUrl>(GetArenaForAllocation());
    _impl_.headiconurl_ = p;
  }
  return _impl_.headiconurl_;
}
inline ::msg::CSReqReportHeadIconUrl* CSReqBody::mutable_headiconurl() {
  ::msg::CSReqReportHeadIconUrl* _msg = _internal_mutable_headiconurl();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.HeadIconUrl)
  return _msg;
}
inline void CSReqBody::set_allocated_headiconurl(::msg::CSReqReportHeadIconUrl* headiconurl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.headiconurl_);
  }
  if (headiconurl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(headiconurl));
    if (message_arena != submessage_arena) {
      headiconurl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, headiconurl, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.headiconurl_ = headiconurl;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.HeadIconUrl)
}

// .msg.CSReqGetPvpServerGroup GetPvpServerGroup = 303;
inline bool CSReqBody::_internal_has_getpvpservergroup() const {
  return this != internal_default_instance() && _impl_.getpvpservergroup_ != nullptr;
}
inline bool CSReqBody::has_getpvpservergroup() const {
  return _internal_has_getpvpservergroup();
}
inline const ::msg::CSReqGetPvpServerGroup& CSReqBody::_internal_getpvpservergroup() const {
  const ::msg::CSReqGetPvpServerGroup* p = _impl_.getpvpservergroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetPvpServerGroup&>(
      ::msg::_CSReqGetPvpServerGroup_default_instance_);
}
inline const ::msg::CSReqGetPvpServerGroup& CSReqBody::getpvpservergroup() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetPvpServerGroup)
  return _internal_getpvpservergroup();
}
inline void CSReqBody::unsafe_arena_set_allocated_getpvpservergroup(
    ::msg::CSReqGetPvpServerGroup* getpvpservergroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getpvpservergroup_);
  }
  _impl_.getpvpservergroup_ = getpvpservergroup;
  if (getpvpservergroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetPvpServerGroup)
}
inline ::msg::CSReqGetPvpServerGroup* CSReqBody::release_getpvpservergroup() {
  
  ::msg::CSReqGetPvpServerGroup* temp = _impl_.getpvpservergroup_;
  _impl_.getpvpservergroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetPvpServerGroup* CSReqBody::unsafe_arena_release_getpvpservergroup() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetPvpServerGroup)
  
  ::msg::CSReqGetPvpServerGroup* temp = _impl_.getpvpservergroup_;
  _impl_.getpvpservergroup_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetPvpServerGroup* CSReqBody::_internal_mutable_getpvpservergroup() {
  
  if (_impl_.getpvpservergroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetPvpServerGroup>(GetArenaForAllocation());
    _impl_.getpvpservergroup_ = p;
  }
  return _impl_.getpvpservergroup_;
}
inline ::msg::CSReqGetPvpServerGroup* CSReqBody::mutable_getpvpservergroup() {
  ::msg::CSReqGetPvpServerGroup* _msg = _internal_mutable_getpvpservergroup();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetPvpServerGroup)
  return _msg;
}
inline void CSReqBody::set_allocated_getpvpservergroup(::msg::CSReqGetPvpServerGroup* getpvpservergroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getpvpservergroup_);
  }
  if (getpvpservergroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getpvpservergroup));
    if (message_arena != submessage_arena) {
      getpvpservergroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getpvpservergroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getpvpservergroup_ = getpvpservergroup;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetPvpServerGroup)
}

// .msg.CSReqReportPvpInfo ReportPvpInfo = 304;
inline bool CSReqBody::_internal_has_reportpvpinfo() const {
  return this != internal_default_instance() && _impl_.reportpvpinfo_ != nullptr;
}
inline bool CSReqBody::has_reportpvpinfo() const {
  return _internal_has_reportpvpinfo();
}
inline const ::msg::CSReqReportPvpInfo& CSReqBody::_internal_reportpvpinfo() const {
  const ::msg::CSReqReportPvpInfo* p = _impl_.reportpvpinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqReportPvpInfo&>(
      ::msg::_CSReqReportPvpInfo_default_instance_);
}
inline const ::msg::CSReqReportPvpInfo& CSReqBody::reportpvpinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ReportPvpInfo)
  return _internal_reportpvpinfo();
}
inline void CSReqBody::unsafe_arena_set_allocated_reportpvpinfo(
    ::msg::CSReqReportPvpInfo* reportpvpinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportpvpinfo_);
  }
  _impl_.reportpvpinfo_ = reportpvpinfo;
  if (reportpvpinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ReportPvpInfo)
}
inline ::msg::CSReqReportPvpInfo* CSReqBody::release_reportpvpinfo() {
  
  ::msg::CSReqReportPvpInfo* temp = _impl_.reportpvpinfo_;
  _impl_.reportpvpinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqReportPvpInfo* CSReqBody::unsafe_arena_release_reportpvpinfo() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ReportPvpInfo)
  
  ::msg::CSReqReportPvpInfo* temp = _impl_.reportpvpinfo_;
  _impl_.reportpvpinfo_ = nullptr;
  return temp;
}
inline ::msg::CSReqReportPvpInfo* CSReqBody::_internal_mutable_reportpvpinfo() {
  
  if (_impl_.reportpvpinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqReportPvpInfo>(GetArenaForAllocation());
    _impl_.reportpvpinfo_ = p;
  }
  return _impl_.reportpvpinfo_;
}
inline ::msg::CSReqReportPvpInfo* CSReqBody::mutable_reportpvpinfo() {
  ::msg::CSReqReportPvpInfo* _msg = _internal_mutable_reportpvpinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ReportPvpInfo)
  return _msg;
}
inline void CSReqBody::set_allocated_reportpvpinfo(::msg::CSReqReportPvpInfo* reportpvpinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportpvpinfo_);
  }
  if (reportpvpinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reportpvpinfo));
    if (message_arena != submessage_arena) {
      reportpvpinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reportpvpinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reportpvpinfo_ = reportpvpinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ReportPvpInfo)
}

// .msg.CSReqChoosePlayer ChoosePlayer = 305;
inline bool CSReqBody::_internal_has_chooseplayer() const {
  return this != internal_default_instance() && _impl_.chooseplayer_ != nullptr;
}
inline bool CSReqBody::has_chooseplayer() const {
  return _internal_has_chooseplayer();
}
inline const ::msg::CSReqChoosePlayer& CSReqBody::_internal_chooseplayer() const {
  const ::msg::CSReqChoosePlayer* p = _impl_.chooseplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqChoosePlayer&>(
      ::msg::_CSReqChoosePlayer_default_instance_);
}
inline const ::msg::CSReqChoosePlayer& CSReqBody::chooseplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ChoosePlayer)
  return _internal_chooseplayer();
}
inline void CSReqBody::unsafe_arena_set_allocated_chooseplayer(
    ::msg::CSReqChoosePlayer* chooseplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chooseplayer_);
  }
  _impl_.chooseplayer_ = chooseplayer;
  if (chooseplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ChoosePlayer)
}
inline ::msg::CSReqChoosePlayer* CSReqBody::release_chooseplayer() {
  
  ::msg::CSReqChoosePlayer* temp = _impl_.chooseplayer_;
  _impl_.chooseplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqChoosePlayer* CSReqBody::unsafe_arena_release_chooseplayer() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ChoosePlayer)
  
  ::msg::CSReqChoosePlayer* temp = _impl_.chooseplayer_;
  _impl_.chooseplayer_ = nullptr;
  return temp;
}
inline ::msg::CSReqChoosePlayer* CSReqBody::_internal_mutable_chooseplayer() {
  
  if (_impl_.chooseplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqChoosePlayer>(GetArenaForAllocation());
    _impl_.chooseplayer_ = p;
  }
  return _impl_.chooseplayer_;
}
inline ::msg::CSReqChoosePlayer* CSReqBody::mutable_chooseplayer() {
  ::msg::CSReqChoosePlayer* _msg = _internal_mutable_chooseplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ChoosePlayer)
  return _msg;
}
inline void CSReqBody::set_allocated_chooseplayer(::msg::CSReqChoosePlayer* chooseplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chooseplayer_);
  }
  if (chooseplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chooseplayer));
    if (message_arena != submessage_arena) {
      chooseplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chooseplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chooseplayer_ = chooseplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ChoosePlayer)
}

// .msg.CSReqPingTest PingTest = 306;
inline bool CSReqBody::_internal_has_pingtest() const {
  return this != internal_default_instance() && _impl_.pingtest_ != nullptr;
}
inline bool CSReqBody::has_pingtest() const {
  return _internal_has_pingtest();
}
inline const ::msg::CSReqPingTest& CSReqBody::_internal_pingtest() const {
  const ::msg::CSReqPingTest* p = _impl_.pingtest_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPingTest&>(
      ::msg::_CSReqPingTest_default_instance_);
}
inline const ::msg::CSReqPingTest& CSReqBody::pingtest() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PingTest)
  return _internal_pingtest();
}
inline void CSReqBody::unsafe_arena_set_allocated_pingtest(
    ::msg::CSReqPingTest* pingtest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pingtest_);
  }
  _impl_.pingtest_ = pingtest;
  if (pingtest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PingTest)
}
inline ::msg::CSReqPingTest* CSReqBody::release_pingtest() {
  
  ::msg::CSReqPingTest* temp = _impl_.pingtest_;
  _impl_.pingtest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPingTest* CSReqBody::unsafe_arena_release_pingtest() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PingTest)
  
  ::msg::CSReqPingTest* temp = _impl_.pingtest_;
  _impl_.pingtest_ = nullptr;
  return temp;
}
inline ::msg::CSReqPingTest* CSReqBody::_internal_mutable_pingtest() {
  
  if (_impl_.pingtest_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPingTest>(GetArenaForAllocation());
    _impl_.pingtest_ = p;
  }
  return _impl_.pingtest_;
}
inline ::msg::CSReqPingTest* CSReqBody::mutable_pingtest() {
  ::msg::CSReqPingTest* _msg = _internal_mutable_pingtest();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PingTest)
  return _msg;
}
inline void CSReqBody::set_allocated_pingtest(::msg::CSReqPingTest* pingtest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pingtest_);
  }
  if (pingtest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pingtest));
    if (message_arena != submessage_arena) {
      pingtest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pingtest, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pingtest_ = pingtest;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PingTest)
}

// .msg.CSReqReportRegionInfo ReportRegionInfo = 307;
inline bool CSReqBody::_internal_has_reportregioninfo() const {
  return this != internal_default_instance() && _impl_.reportregioninfo_ != nullptr;
}
inline bool CSReqBody::has_reportregioninfo() const {
  return _internal_has_reportregioninfo();
}
inline const ::msg::CSReqReportRegionInfo& CSReqBody::_internal_reportregioninfo() const {
  const ::msg::CSReqReportRegionInfo* p = _impl_.reportregioninfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqReportRegionInfo&>(
      ::msg::_CSReqReportRegionInfo_default_instance_);
}
inline const ::msg::CSReqReportRegionInfo& CSReqBody::reportregioninfo() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ReportRegionInfo)
  return _internal_reportregioninfo();
}
inline void CSReqBody::unsafe_arena_set_allocated_reportregioninfo(
    ::msg::CSReqReportRegionInfo* reportregioninfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportregioninfo_);
  }
  _impl_.reportregioninfo_ = reportregioninfo;
  if (reportregioninfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ReportRegionInfo)
}
inline ::msg::CSReqReportRegionInfo* CSReqBody::release_reportregioninfo() {
  
  ::msg::CSReqReportRegionInfo* temp = _impl_.reportregioninfo_;
  _impl_.reportregioninfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqReportRegionInfo* CSReqBody::unsafe_arena_release_reportregioninfo() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ReportRegionInfo)
  
  ::msg::CSReqReportRegionInfo* temp = _impl_.reportregioninfo_;
  _impl_.reportregioninfo_ = nullptr;
  return temp;
}
inline ::msg::CSReqReportRegionInfo* CSReqBody::_internal_mutable_reportregioninfo() {
  
  if (_impl_.reportregioninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqReportRegionInfo>(GetArenaForAllocation());
    _impl_.reportregioninfo_ = p;
  }
  return _impl_.reportregioninfo_;
}
inline ::msg::CSReqReportRegionInfo* CSReqBody::mutable_reportregioninfo() {
  ::msg::CSReqReportRegionInfo* _msg = _internal_mutable_reportregioninfo();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ReportRegionInfo)
  return _msg;
}
inline void CSReqBody::set_allocated_reportregioninfo(::msg::CSReqReportRegionInfo* reportregioninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportregioninfo_);
  }
  if (reportregioninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reportregioninfo));
    if (message_arena != submessage_arena) {
      reportregioninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reportregioninfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reportregioninfo_ = reportregioninfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ReportRegionInfo)
}

// .msg.CSReqRecalledPlayer RecalledPlaeyr = 308;
inline bool CSReqBody::_internal_has_recalledplaeyr() const {
  return this != internal_default_instance() && _impl_.recalledplaeyr_ != nullptr;
}
inline bool CSReqBody::has_recalledplaeyr() const {
  return _internal_has_recalledplaeyr();
}
inline const ::msg::CSReqRecalledPlayer& CSReqBody::_internal_recalledplaeyr() const {
  const ::msg::CSReqRecalledPlayer* p = _impl_.recalledplaeyr_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRecalledPlayer&>(
      ::msg::_CSReqRecalledPlayer_default_instance_);
}
inline const ::msg::CSReqRecalledPlayer& CSReqBody::recalledplaeyr() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RecalledPlaeyr)
  return _internal_recalledplaeyr();
}
inline void CSReqBody::unsafe_arena_set_allocated_recalledplaeyr(
    ::msg::CSReqRecalledPlayer* recalledplaeyr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recalledplaeyr_);
  }
  _impl_.recalledplaeyr_ = recalledplaeyr;
  if (recalledplaeyr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RecalledPlaeyr)
}
inline ::msg::CSReqRecalledPlayer* CSReqBody::release_recalledplaeyr() {
  
  ::msg::CSReqRecalledPlayer* temp = _impl_.recalledplaeyr_;
  _impl_.recalledplaeyr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRecalledPlayer* CSReqBody::unsafe_arena_release_recalledplaeyr() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RecalledPlaeyr)
  
  ::msg::CSReqRecalledPlayer* temp = _impl_.recalledplaeyr_;
  _impl_.recalledplaeyr_ = nullptr;
  return temp;
}
inline ::msg::CSReqRecalledPlayer* CSReqBody::_internal_mutable_recalledplaeyr() {
  
  if (_impl_.recalledplaeyr_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRecalledPlayer>(GetArenaForAllocation());
    _impl_.recalledplaeyr_ = p;
  }
  return _impl_.recalledplaeyr_;
}
inline ::msg::CSReqRecalledPlayer* CSReqBody::mutable_recalledplaeyr() {
  ::msg::CSReqRecalledPlayer* _msg = _internal_mutable_recalledplaeyr();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RecalledPlaeyr)
  return _msg;
}
inline void CSReqBody::set_allocated_recalledplaeyr(::msg::CSReqRecalledPlayer* recalledplaeyr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recalledplaeyr_);
  }
  if (recalledplaeyr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recalledplaeyr));
    if (message_arena != submessage_arena) {
      recalledplaeyr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recalledplaeyr, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recalledplaeyr_ = recalledplaeyr;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RecalledPlaeyr)
}

// .msg.CSReqWebLogin WebLogin = 309;
inline bool CSReqBody::_internal_has_weblogin() const {
  return this != internal_default_instance() && _impl_.weblogin_ != nullptr;
}
inline bool CSReqBody::has_weblogin() const {
  return _internal_has_weblogin();
}
inline const ::msg::CSReqWebLogin& CSReqBody::_internal_weblogin() const {
  const ::msg::CSReqWebLogin* p = _impl_.weblogin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqWebLogin&>(
      ::msg::_CSReqWebLogin_default_instance_);
}
inline const ::msg::CSReqWebLogin& CSReqBody::weblogin() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.WebLogin)
  return _internal_weblogin();
}
inline void CSReqBody::unsafe_arena_set_allocated_weblogin(
    ::msg::CSReqWebLogin* weblogin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weblogin_);
  }
  _impl_.weblogin_ = weblogin;
  if (weblogin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.WebLogin)
}
inline ::msg::CSReqWebLogin* CSReqBody::release_weblogin() {
  
  ::msg::CSReqWebLogin* temp = _impl_.weblogin_;
  _impl_.weblogin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqWebLogin* CSReqBody::unsafe_arena_release_weblogin() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.WebLogin)
  
  ::msg::CSReqWebLogin* temp = _impl_.weblogin_;
  _impl_.weblogin_ = nullptr;
  return temp;
}
inline ::msg::CSReqWebLogin* CSReqBody::_internal_mutable_weblogin() {
  
  if (_impl_.weblogin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqWebLogin>(GetArenaForAllocation());
    _impl_.weblogin_ = p;
  }
  return _impl_.weblogin_;
}
inline ::msg::CSReqWebLogin* CSReqBody::mutable_weblogin() {
  ::msg::CSReqWebLogin* _msg = _internal_mutable_weblogin();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.WebLogin)
  return _msg;
}
inline void CSReqBody::set_allocated_weblogin(::msg::CSReqWebLogin* weblogin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weblogin_);
  }
  if (weblogin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weblogin));
    if (message_arena != submessage_arena) {
      weblogin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weblogin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.weblogin_ = weblogin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.WebLogin)
}

// .msg.CSReqInviteCodeReset InviteCodeReset = 310;
inline bool CSReqBody::_internal_has_invitecodereset() const {
  return this != internal_default_instance() && _impl_.invitecodereset_ != nullptr;
}
inline bool CSReqBody::has_invitecodereset() const {
  return _internal_has_invitecodereset();
}
inline const ::msg::CSReqInviteCodeReset& CSReqBody::_internal_invitecodereset() const {
  const ::msg::CSReqInviteCodeReset* p = _impl_.invitecodereset_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqInviteCodeReset&>(
      ::msg::_CSReqInviteCodeReset_default_instance_);
}
inline const ::msg::CSReqInviteCodeReset& CSReqBody::invitecodereset() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.InviteCodeReset)
  return _internal_invitecodereset();
}
inline void CSReqBody::unsafe_arena_set_allocated_invitecodereset(
    ::msg::CSReqInviteCodeReset* invitecodereset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invitecodereset_);
  }
  _impl_.invitecodereset_ = invitecodereset;
  if (invitecodereset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.InviteCodeReset)
}
inline ::msg::CSReqInviteCodeReset* CSReqBody::release_invitecodereset() {
  
  ::msg::CSReqInviteCodeReset* temp = _impl_.invitecodereset_;
  _impl_.invitecodereset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqInviteCodeReset* CSReqBody::unsafe_arena_release_invitecodereset() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.InviteCodeReset)
  
  ::msg::CSReqInviteCodeReset* temp = _impl_.invitecodereset_;
  _impl_.invitecodereset_ = nullptr;
  return temp;
}
inline ::msg::CSReqInviteCodeReset* CSReqBody::_internal_mutable_invitecodereset() {
  
  if (_impl_.invitecodereset_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqInviteCodeReset>(GetArenaForAllocation());
    _impl_.invitecodereset_ = p;
  }
  return _impl_.invitecodereset_;
}
inline ::msg::CSReqInviteCodeReset* CSReqBody::mutable_invitecodereset() {
  ::msg::CSReqInviteCodeReset* _msg = _internal_mutable_invitecodereset();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.InviteCodeReset)
  return _msg;
}
inline void CSReqBody::set_allocated_invitecodereset(::msg::CSReqInviteCodeReset* invitecodereset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invitecodereset_);
  }
  if (invitecodereset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitecodereset));
    if (message_arena != submessage_arena) {
      invitecodereset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invitecodereset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.invitecodereset_ = invitecodereset;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.InviteCodeReset)
}

// .msg.CSReqRecallReward RecallReward = 311;
inline bool CSReqBody::_internal_has_recallreward() const {
  return this != internal_default_instance() && _impl_.recallreward_ != nullptr;
}
inline bool CSReqBody::has_recallreward() const {
  return _internal_has_recallreward();
}
inline const ::msg::CSReqRecallReward& CSReqBody::_internal_recallreward() const {
  const ::msg::CSReqRecallReward* p = _impl_.recallreward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRecallReward&>(
      ::msg::_CSReqRecallReward_default_instance_);
}
inline const ::msg::CSReqRecallReward& CSReqBody::recallreward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RecallReward)
  return _internal_recallreward();
}
inline void CSReqBody::unsafe_arena_set_allocated_recallreward(
    ::msg::CSReqRecallReward* recallreward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recallreward_);
  }
  _impl_.recallreward_ = recallreward;
  if (recallreward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RecallReward)
}
inline ::msg::CSReqRecallReward* CSReqBody::release_recallreward() {
  
  ::msg::CSReqRecallReward* temp = _impl_.recallreward_;
  _impl_.recallreward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRecallReward* CSReqBody::unsafe_arena_release_recallreward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RecallReward)
  
  ::msg::CSReqRecallReward* temp = _impl_.recallreward_;
  _impl_.recallreward_ = nullptr;
  return temp;
}
inline ::msg::CSReqRecallReward* CSReqBody::_internal_mutable_recallreward() {
  
  if (_impl_.recallreward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRecallReward>(GetArenaForAllocation());
    _impl_.recallreward_ = p;
  }
  return _impl_.recallreward_;
}
inline ::msg::CSReqRecallReward* CSReqBody::mutable_recallreward() {
  ::msg::CSReqRecallReward* _msg = _internal_mutable_recallreward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RecallReward)
  return _msg;
}
inline void CSReqBody::set_allocated_recallreward(::msg::CSReqRecallReward* recallreward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recallreward_);
  }
  if (recallreward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recallreward));
    if (message_arena != submessage_arena) {
      recallreward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recallreward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recallreward_ = recallreward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RecallReward)
}

// .msg.CSReqSwitchToCommonMatch SwitchToCommonMatch = 312;
inline bool CSReqBody::_internal_has_switchtocommonmatch() const {
  return this != internal_default_instance() && _impl_.switchtocommonmatch_ != nullptr;
}
inline bool CSReqBody::has_switchtocommonmatch() const {
  return _internal_has_switchtocommonmatch();
}
inline const ::msg::CSReqSwitchToCommonMatch& CSReqBody::_internal_switchtocommonmatch() const {
  const ::msg::CSReqSwitchToCommonMatch* p = _impl_.switchtocommonmatch_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSwitchToCommonMatch&>(
      ::msg::_CSReqSwitchToCommonMatch_default_instance_);
}
inline const ::msg::CSReqSwitchToCommonMatch& CSReqBody::switchtocommonmatch() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SwitchToCommonMatch)
  return _internal_switchtocommonmatch();
}
inline void CSReqBody::unsafe_arena_set_allocated_switchtocommonmatch(
    ::msg::CSReqSwitchToCommonMatch* switchtocommonmatch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.switchtocommonmatch_);
  }
  _impl_.switchtocommonmatch_ = switchtocommonmatch;
  if (switchtocommonmatch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SwitchToCommonMatch)
}
inline ::msg::CSReqSwitchToCommonMatch* CSReqBody::release_switchtocommonmatch() {
  
  ::msg::CSReqSwitchToCommonMatch* temp = _impl_.switchtocommonmatch_;
  _impl_.switchtocommonmatch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSwitchToCommonMatch* CSReqBody::unsafe_arena_release_switchtocommonmatch() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SwitchToCommonMatch)
  
  ::msg::CSReqSwitchToCommonMatch* temp = _impl_.switchtocommonmatch_;
  _impl_.switchtocommonmatch_ = nullptr;
  return temp;
}
inline ::msg::CSReqSwitchToCommonMatch* CSReqBody::_internal_mutable_switchtocommonmatch() {
  
  if (_impl_.switchtocommonmatch_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSwitchToCommonMatch>(GetArenaForAllocation());
    _impl_.switchtocommonmatch_ = p;
  }
  return _impl_.switchtocommonmatch_;
}
inline ::msg::CSReqSwitchToCommonMatch* CSReqBody::mutable_switchtocommonmatch() {
  ::msg::CSReqSwitchToCommonMatch* _msg = _internal_mutable_switchtocommonmatch();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SwitchToCommonMatch)
  return _msg;
}
inline void CSReqBody::set_allocated_switchtocommonmatch(::msg::CSReqSwitchToCommonMatch* switchtocommonmatch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.switchtocommonmatch_);
  }
  if (switchtocommonmatch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(switchtocommonmatch));
    if (message_arena != submessage_arena) {
      switchtocommonmatch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, switchtocommonmatch, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.switchtocommonmatch_ = switchtocommonmatch;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SwitchToCommonMatch)
}

// .msg.CSReqSwitchModeInTeam SwitchModeInTeam = 320;
inline bool CSReqBody::_internal_has_switchmodeinteam() const {
  return this != internal_default_instance() && _impl_.switchmodeinteam_ != nullptr;
}
inline bool CSReqBody::has_switchmodeinteam() const {
  return _internal_has_switchmodeinteam();
}
inline const ::msg::CSReqSwitchModeInTeam& CSReqBody::_internal_switchmodeinteam() const {
  const ::msg::CSReqSwitchModeInTeam* p = _impl_.switchmodeinteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSwitchModeInTeam&>(
      ::msg::_CSReqSwitchModeInTeam_default_instance_);
}
inline const ::msg::CSReqSwitchModeInTeam& CSReqBody::switchmodeinteam() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SwitchModeInTeam)
  return _internal_switchmodeinteam();
}
inline void CSReqBody::unsafe_arena_set_allocated_switchmodeinteam(
    ::msg::CSReqSwitchModeInTeam* switchmodeinteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.switchmodeinteam_);
  }
  _impl_.switchmodeinteam_ = switchmodeinteam;
  if (switchmodeinteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SwitchModeInTeam)
}
inline ::msg::CSReqSwitchModeInTeam* CSReqBody::release_switchmodeinteam() {
  
  ::msg::CSReqSwitchModeInTeam* temp = _impl_.switchmodeinteam_;
  _impl_.switchmodeinteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSwitchModeInTeam* CSReqBody::unsafe_arena_release_switchmodeinteam() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SwitchModeInTeam)
  
  ::msg::CSReqSwitchModeInTeam* temp = _impl_.switchmodeinteam_;
  _impl_.switchmodeinteam_ = nullptr;
  return temp;
}
inline ::msg::CSReqSwitchModeInTeam* CSReqBody::_internal_mutable_switchmodeinteam() {
  
  if (_impl_.switchmodeinteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSwitchModeInTeam>(GetArenaForAllocation());
    _impl_.switchmodeinteam_ = p;
  }
  return _impl_.switchmodeinteam_;
}
inline ::msg::CSReqSwitchModeInTeam* CSReqBody::mutable_switchmodeinteam() {
  ::msg::CSReqSwitchModeInTeam* _msg = _internal_mutable_switchmodeinteam();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SwitchModeInTeam)
  return _msg;
}
inline void CSReqBody::set_allocated_switchmodeinteam(::msg::CSReqSwitchModeInTeam* switchmodeinteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.switchmodeinteam_);
  }
  if (switchmodeinteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(switchmodeinteam));
    if (message_arena != submessage_arena) {
      switchmodeinteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, switchmodeinteam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.switchmodeinteam_ = switchmodeinteam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SwitchModeInTeam)
}

// .msg.CSReqGetTNRoomState GetTNRoomState = 321;
inline bool CSReqBody::_internal_has_gettnroomstate() const {
  return this != internal_default_instance() && _impl_.gettnroomstate_ != nullptr;
}
inline bool CSReqBody::has_gettnroomstate() const {
  return _internal_has_gettnroomstate();
}
inline const ::msg::CSReqGetTNRoomState& CSReqBody::_internal_gettnroomstate() const {
  const ::msg::CSReqGetTNRoomState* p = _impl_.gettnroomstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetTNRoomState&>(
      ::msg::_CSReqGetTNRoomState_default_instance_);
}
inline const ::msg::CSReqGetTNRoomState& CSReqBody::gettnroomstate() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetTNRoomState)
  return _internal_gettnroomstate();
}
inline void CSReqBody::unsafe_arena_set_allocated_gettnroomstate(
    ::msg::CSReqGetTNRoomState* gettnroomstate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gettnroomstate_);
  }
  _impl_.gettnroomstate_ = gettnroomstate;
  if (gettnroomstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetTNRoomState)
}
inline ::msg::CSReqGetTNRoomState* CSReqBody::release_gettnroomstate() {
  
  ::msg::CSReqGetTNRoomState* temp = _impl_.gettnroomstate_;
  _impl_.gettnroomstate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetTNRoomState* CSReqBody::unsafe_arena_release_gettnroomstate() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetTNRoomState)
  
  ::msg::CSReqGetTNRoomState* temp = _impl_.gettnroomstate_;
  _impl_.gettnroomstate_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetTNRoomState* CSReqBody::_internal_mutable_gettnroomstate() {
  
  if (_impl_.gettnroomstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetTNRoomState>(GetArenaForAllocation());
    _impl_.gettnroomstate_ = p;
  }
  return _impl_.gettnroomstate_;
}
inline ::msg::CSReqGetTNRoomState* CSReqBody::mutable_gettnroomstate() {
  ::msg::CSReqGetTNRoomState* _msg = _internal_mutable_gettnroomstate();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetTNRoomState)
  return _msg;
}
inline void CSReqBody::set_allocated_gettnroomstate(::msg::CSReqGetTNRoomState* gettnroomstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gettnroomstate_);
  }
  if (gettnroomstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gettnroomstate));
    if (message_arena != submessage_arena) {
      gettnroomstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gettnroomstate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gettnroomstate_ = gettnroomstate;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetTNRoomState)
}

// .msg.CSReqWorkshopMatch WorkshopMatch = 330;
inline bool CSReqBody::_internal_has_workshopmatch() const {
  return this != internal_default_instance() && _impl_.workshopmatch_ != nullptr;
}
inline bool CSReqBody::has_workshopmatch() const {
  return _internal_has_workshopmatch();
}
inline const ::msg::CSReqWorkshopMatch& CSReqBody::_internal_workshopmatch() const {
  const ::msg::CSReqWorkshopMatch* p = _impl_.workshopmatch_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqWorkshopMatch&>(
      ::msg::_CSReqWorkshopMatch_default_instance_);
}
inline const ::msg::CSReqWorkshopMatch& CSReqBody::workshopmatch() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.WorkshopMatch)
  return _internal_workshopmatch();
}
inline void CSReqBody::unsafe_arena_set_allocated_workshopmatch(
    ::msg::CSReqWorkshopMatch* workshopmatch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.workshopmatch_);
  }
  _impl_.workshopmatch_ = workshopmatch;
  if (workshopmatch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.WorkshopMatch)
}
inline ::msg::CSReqWorkshopMatch* CSReqBody::release_workshopmatch() {
  
  ::msg::CSReqWorkshopMatch* temp = _impl_.workshopmatch_;
  _impl_.workshopmatch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqWorkshopMatch* CSReqBody::unsafe_arena_release_workshopmatch() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.WorkshopMatch)
  
  ::msg::CSReqWorkshopMatch* temp = _impl_.workshopmatch_;
  _impl_.workshopmatch_ = nullptr;
  return temp;
}
inline ::msg::CSReqWorkshopMatch* CSReqBody::_internal_mutable_workshopmatch() {
  
  if (_impl_.workshopmatch_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqWorkshopMatch>(GetArenaForAllocation());
    _impl_.workshopmatch_ = p;
  }
  return _impl_.workshopmatch_;
}
inline ::msg::CSReqWorkshopMatch* CSReqBody::mutable_workshopmatch() {
  ::msg::CSReqWorkshopMatch* _msg = _internal_mutable_workshopmatch();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.WorkshopMatch)
  return _msg;
}
inline void CSReqBody::set_allocated_workshopmatch(::msg::CSReqWorkshopMatch* workshopmatch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.workshopmatch_);
  }
  if (workshopmatch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workshopmatch));
    if (message_arena != submessage_arena) {
      workshopmatch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workshopmatch, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.workshopmatch_ = workshopmatch;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.WorkshopMatch)
}

// .msg.CSReqBuyWorkshopTicket BuyWorkshopTicket = 331;
inline bool CSReqBody::_internal_has_buyworkshopticket() const {
  return this != internal_default_instance() && _impl_.buyworkshopticket_ != nullptr;
}
inline bool CSReqBody::has_buyworkshopticket() const {
  return _internal_has_buyworkshopticket();
}
inline const ::msg::CSReqBuyWorkshopTicket& CSReqBody::_internal_buyworkshopticket() const {
  const ::msg::CSReqBuyWorkshopTicket* p = _impl_.buyworkshopticket_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqBuyWorkshopTicket&>(
      ::msg::_CSReqBuyWorkshopTicket_default_instance_);
}
inline const ::msg::CSReqBuyWorkshopTicket& CSReqBody::buyworkshopticket() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.BuyWorkshopTicket)
  return _internal_buyworkshopticket();
}
inline void CSReqBody::unsafe_arena_set_allocated_buyworkshopticket(
    ::msg::CSReqBuyWorkshopTicket* buyworkshopticket) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buyworkshopticket_);
  }
  _impl_.buyworkshopticket_ = buyworkshopticket;
  if (buyworkshopticket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.BuyWorkshopTicket)
}
inline ::msg::CSReqBuyWorkshopTicket* CSReqBody::release_buyworkshopticket() {
  
  ::msg::CSReqBuyWorkshopTicket* temp = _impl_.buyworkshopticket_;
  _impl_.buyworkshopticket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqBuyWorkshopTicket* CSReqBody::unsafe_arena_release_buyworkshopticket() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.BuyWorkshopTicket)
  
  ::msg::CSReqBuyWorkshopTicket* temp = _impl_.buyworkshopticket_;
  _impl_.buyworkshopticket_ = nullptr;
  return temp;
}
inline ::msg::CSReqBuyWorkshopTicket* CSReqBody::_internal_mutable_buyworkshopticket() {
  
  if (_impl_.buyworkshopticket_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqBuyWorkshopTicket>(GetArenaForAllocation());
    _impl_.buyworkshopticket_ = p;
  }
  return _impl_.buyworkshopticket_;
}
inline ::msg::CSReqBuyWorkshopTicket* CSReqBody::mutable_buyworkshopticket() {
  ::msg::CSReqBuyWorkshopTicket* _msg = _internal_mutable_buyworkshopticket();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.BuyWorkshopTicket)
  return _msg;
}
inline void CSReqBody::set_allocated_buyworkshopticket(::msg::CSReqBuyWorkshopTicket* buyworkshopticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buyworkshopticket_);
  }
  if (buyworkshopticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buyworkshopticket));
    if (message_arena != submessage_arena) {
      buyworkshopticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buyworkshopticket, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buyworkshopticket_ = buyworkshopticket;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.BuyWorkshopTicket)
}

// .msg.CSReqFavouriteWorkshopMap FavouriteWorkshopMap = 332;
inline bool CSReqBody::_internal_has_favouriteworkshopmap() const {
  return this != internal_default_instance() && _impl_.favouriteworkshopmap_ != nullptr;
}
inline bool CSReqBody::has_favouriteworkshopmap() const {
  return _internal_has_favouriteworkshopmap();
}
inline const ::msg::CSReqFavouriteWorkshopMap& CSReqBody::_internal_favouriteworkshopmap() const {
  const ::msg::CSReqFavouriteWorkshopMap* p = _impl_.favouriteworkshopmap_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqFavouriteWorkshopMap&>(
      ::msg::_CSReqFavouriteWorkshopMap_default_instance_);
}
inline const ::msg::CSReqFavouriteWorkshopMap& CSReqBody::favouriteworkshopmap() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.FavouriteWorkshopMap)
  return _internal_favouriteworkshopmap();
}
inline void CSReqBody::unsafe_arena_set_allocated_favouriteworkshopmap(
    ::msg::CSReqFavouriteWorkshopMap* favouriteworkshopmap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.favouriteworkshopmap_);
  }
  _impl_.favouriteworkshopmap_ = favouriteworkshopmap;
  if (favouriteworkshopmap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.FavouriteWorkshopMap)
}
inline ::msg::CSReqFavouriteWorkshopMap* CSReqBody::release_favouriteworkshopmap() {
  
  ::msg::CSReqFavouriteWorkshopMap* temp = _impl_.favouriteworkshopmap_;
  _impl_.favouriteworkshopmap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqFavouriteWorkshopMap* CSReqBody::unsafe_arena_release_favouriteworkshopmap() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.FavouriteWorkshopMap)
  
  ::msg::CSReqFavouriteWorkshopMap* temp = _impl_.favouriteworkshopmap_;
  _impl_.favouriteworkshopmap_ = nullptr;
  return temp;
}
inline ::msg::CSReqFavouriteWorkshopMap* CSReqBody::_internal_mutable_favouriteworkshopmap() {
  
  if (_impl_.favouriteworkshopmap_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqFavouriteWorkshopMap>(GetArenaForAllocation());
    _impl_.favouriteworkshopmap_ = p;
  }
  return _impl_.favouriteworkshopmap_;
}
inline ::msg::CSReqFavouriteWorkshopMap* CSReqBody::mutable_favouriteworkshopmap() {
  ::msg::CSReqFavouriteWorkshopMap* _msg = _internal_mutable_favouriteworkshopmap();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.FavouriteWorkshopMap)
  return _msg;
}
inline void CSReqBody::set_allocated_favouriteworkshopmap(::msg::CSReqFavouriteWorkshopMap* favouriteworkshopmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.favouriteworkshopmap_);
  }
  if (favouriteworkshopmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(favouriteworkshopmap));
    if (message_arena != submessage_arena) {
      favouriteworkshopmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, favouriteworkshopmap, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.favouriteworkshopmap_ = favouriteworkshopmap;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.FavouriteWorkshopMap)
}

// .msg.CSReqShortcutMapsOP ShortcutMapsOP = 333;
inline bool CSReqBody::_internal_has_shortcutmapsop() const {
  return this != internal_default_instance() && _impl_.shortcutmapsop_ != nullptr;
}
inline bool CSReqBody::has_shortcutmapsop() const {
  return _internal_has_shortcutmapsop();
}
inline const ::msg::CSReqShortcutMapsOP& CSReqBody::_internal_shortcutmapsop() const {
  const ::msg::CSReqShortcutMapsOP* p = _impl_.shortcutmapsop_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqShortcutMapsOP&>(
      ::msg::_CSReqShortcutMapsOP_default_instance_);
}
inline const ::msg::CSReqShortcutMapsOP& CSReqBody::shortcutmapsop() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ShortcutMapsOP)
  return _internal_shortcutmapsop();
}
inline void CSReqBody::unsafe_arena_set_allocated_shortcutmapsop(
    ::msg::CSReqShortcutMapsOP* shortcutmapsop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shortcutmapsop_);
  }
  _impl_.shortcutmapsop_ = shortcutmapsop;
  if (shortcutmapsop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ShortcutMapsOP)
}
inline ::msg::CSReqShortcutMapsOP* CSReqBody::release_shortcutmapsop() {
  
  ::msg::CSReqShortcutMapsOP* temp = _impl_.shortcutmapsop_;
  _impl_.shortcutmapsop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqShortcutMapsOP* CSReqBody::unsafe_arena_release_shortcutmapsop() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ShortcutMapsOP)
  
  ::msg::CSReqShortcutMapsOP* temp = _impl_.shortcutmapsop_;
  _impl_.shortcutmapsop_ = nullptr;
  return temp;
}
inline ::msg::CSReqShortcutMapsOP* CSReqBody::_internal_mutable_shortcutmapsop() {
  
  if (_impl_.shortcutmapsop_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqShortcutMapsOP>(GetArenaForAllocation());
    _impl_.shortcutmapsop_ = p;
  }
  return _impl_.shortcutmapsop_;
}
inline ::msg::CSReqShortcutMapsOP* CSReqBody::mutable_shortcutmapsop() {
  ::msg::CSReqShortcutMapsOP* _msg = _internal_mutable_shortcutmapsop();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ShortcutMapsOP)
  return _msg;
}
inline void CSReqBody::set_allocated_shortcutmapsop(::msg::CSReqShortcutMapsOP* shortcutmapsop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shortcutmapsop_);
  }
  if (shortcutmapsop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shortcutmapsop));
    if (message_arena != submessage_arena) {
      shortcutmapsop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shortcutmapsop, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shortcutmapsop_ = shortcutmapsop;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ShortcutMapsOP)
}

// .msg.CSReqPlayersTournamentInfo PlayersTournamentInfo = 334;
inline bool CSReqBody::_internal_has_playerstournamentinfo() const {
  return this != internal_default_instance() && _impl_.playerstournamentinfo_ != nullptr;
}
inline bool CSReqBody::has_playerstournamentinfo() const {
  return _internal_has_playerstournamentinfo();
}
inline const ::msg::CSReqPlayersTournamentInfo& CSReqBody::_internal_playerstournamentinfo() const {
  const ::msg::CSReqPlayersTournamentInfo* p = _impl_.playerstournamentinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPlayersTournamentInfo&>(
      ::msg::_CSReqPlayersTournamentInfo_default_instance_);
}
inline const ::msg::CSReqPlayersTournamentInfo& CSReqBody::playerstournamentinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PlayersTournamentInfo)
  return _internal_playerstournamentinfo();
}
inline void CSReqBody::unsafe_arena_set_allocated_playerstournamentinfo(
    ::msg::CSReqPlayersTournamentInfo* playerstournamentinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerstournamentinfo_);
  }
  _impl_.playerstournamentinfo_ = playerstournamentinfo;
  if (playerstournamentinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PlayersTournamentInfo)
}
inline ::msg::CSReqPlayersTournamentInfo* CSReqBody::release_playerstournamentinfo() {
  
  ::msg::CSReqPlayersTournamentInfo* temp = _impl_.playerstournamentinfo_;
  _impl_.playerstournamentinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPlayersTournamentInfo* CSReqBody::unsafe_arena_release_playerstournamentinfo() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PlayersTournamentInfo)
  
  ::msg::CSReqPlayersTournamentInfo* temp = _impl_.playerstournamentinfo_;
  _impl_.playerstournamentinfo_ = nullptr;
  return temp;
}
inline ::msg::CSReqPlayersTournamentInfo* CSReqBody::_internal_mutable_playerstournamentinfo() {
  
  if (_impl_.playerstournamentinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPlayersTournamentInfo>(GetArenaForAllocation());
    _impl_.playerstournamentinfo_ = p;
  }
  return _impl_.playerstournamentinfo_;
}
inline ::msg::CSReqPlayersTournamentInfo* CSReqBody::mutable_playerstournamentinfo() {
  ::msg::CSReqPlayersTournamentInfo* _msg = _internal_mutable_playerstournamentinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PlayersTournamentInfo)
  return _msg;
}
inline void CSReqBody::set_allocated_playerstournamentinfo(::msg::CSReqPlayersTournamentInfo* playerstournamentinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerstournamentinfo_);
  }
  if (playerstournamentinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerstournamentinfo));
    if (message_arena != submessage_arena) {
      playerstournamentinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerstournamentinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerstournamentinfo_ = playerstournamentinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PlayersTournamentInfo)
}

// .msg.CSReqScoreWorkshopMap ScoreWorkshopMap = 335;
inline bool CSReqBody::_internal_has_scoreworkshopmap() const {
  return this != internal_default_instance() && _impl_.scoreworkshopmap_ != nullptr;
}
inline bool CSReqBody::has_scoreworkshopmap() const {
  return _internal_has_scoreworkshopmap();
}
inline const ::msg::CSReqScoreWorkshopMap& CSReqBody::_internal_scoreworkshopmap() const {
  const ::msg::CSReqScoreWorkshopMap* p = _impl_.scoreworkshopmap_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqScoreWorkshopMap&>(
      ::msg::_CSReqScoreWorkshopMap_default_instance_);
}
inline const ::msg::CSReqScoreWorkshopMap& CSReqBody::scoreworkshopmap() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ScoreWorkshopMap)
  return _internal_scoreworkshopmap();
}
inline void CSReqBody::unsafe_arena_set_allocated_scoreworkshopmap(
    ::msg::CSReqScoreWorkshopMap* scoreworkshopmap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scoreworkshopmap_);
  }
  _impl_.scoreworkshopmap_ = scoreworkshopmap;
  if (scoreworkshopmap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ScoreWorkshopMap)
}
inline ::msg::CSReqScoreWorkshopMap* CSReqBody::release_scoreworkshopmap() {
  
  ::msg::CSReqScoreWorkshopMap* temp = _impl_.scoreworkshopmap_;
  _impl_.scoreworkshopmap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqScoreWorkshopMap* CSReqBody::unsafe_arena_release_scoreworkshopmap() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ScoreWorkshopMap)
  
  ::msg::CSReqScoreWorkshopMap* temp = _impl_.scoreworkshopmap_;
  _impl_.scoreworkshopmap_ = nullptr;
  return temp;
}
inline ::msg::CSReqScoreWorkshopMap* CSReqBody::_internal_mutable_scoreworkshopmap() {
  
  if (_impl_.scoreworkshopmap_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqScoreWorkshopMap>(GetArenaForAllocation());
    _impl_.scoreworkshopmap_ = p;
  }
  return _impl_.scoreworkshopmap_;
}
inline ::msg::CSReqScoreWorkshopMap* CSReqBody::mutable_scoreworkshopmap() {
  ::msg::CSReqScoreWorkshopMap* _msg = _internal_mutable_scoreworkshopmap();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ScoreWorkshopMap)
  return _msg;
}
inline void CSReqBody::set_allocated_scoreworkshopmap(::msg::CSReqScoreWorkshopMap* scoreworkshopmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scoreworkshopmap_);
  }
  if (scoreworkshopmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scoreworkshopmap));
    if (message_arena != submessage_arena) {
      scoreworkshopmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scoreworkshopmap, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scoreworkshopmap_ = scoreworkshopmap;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ScoreWorkshopMap)
}

// .msg.CSReqMapsVisitedByFriends MapsVisitedByFriends = 336;
inline bool CSReqBody::_internal_has_mapsvisitedbyfriends() const {
  return this != internal_default_instance() && _impl_.mapsvisitedbyfriends_ != nullptr;
}
inline bool CSReqBody::has_mapsvisitedbyfriends() const {
  return _internal_has_mapsvisitedbyfriends();
}
inline const ::msg::CSReqMapsVisitedByFriends& CSReqBody::_internal_mapsvisitedbyfriends() const {
  const ::msg::CSReqMapsVisitedByFriends* p = _impl_.mapsvisitedbyfriends_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqMapsVisitedByFriends&>(
      ::msg::_CSReqMapsVisitedByFriends_default_instance_);
}
inline const ::msg::CSReqMapsVisitedByFriends& CSReqBody::mapsvisitedbyfriends() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.MapsVisitedByFriends)
  return _internal_mapsvisitedbyfriends();
}
inline void CSReqBody::unsafe_arena_set_allocated_mapsvisitedbyfriends(
    ::msg::CSReqMapsVisitedByFriends* mapsvisitedbyfriends) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mapsvisitedbyfriends_);
  }
  _impl_.mapsvisitedbyfriends_ = mapsvisitedbyfriends;
  if (mapsvisitedbyfriends) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.MapsVisitedByFriends)
}
inline ::msg::CSReqMapsVisitedByFriends* CSReqBody::release_mapsvisitedbyfriends() {
  
  ::msg::CSReqMapsVisitedByFriends* temp = _impl_.mapsvisitedbyfriends_;
  _impl_.mapsvisitedbyfriends_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqMapsVisitedByFriends* CSReqBody::unsafe_arena_release_mapsvisitedbyfriends() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.MapsVisitedByFriends)
  
  ::msg::CSReqMapsVisitedByFriends* temp = _impl_.mapsvisitedbyfriends_;
  _impl_.mapsvisitedbyfriends_ = nullptr;
  return temp;
}
inline ::msg::CSReqMapsVisitedByFriends* CSReqBody::_internal_mutable_mapsvisitedbyfriends() {
  
  if (_impl_.mapsvisitedbyfriends_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqMapsVisitedByFriends>(GetArenaForAllocation());
    _impl_.mapsvisitedbyfriends_ = p;
  }
  return _impl_.mapsvisitedbyfriends_;
}
inline ::msg::CSReqMapsVisitedByFriends* CSReqBody::mutable_mapsvisitedbyfriends() {
  ::msg::CSReqMapsVisitedByFriends* _msg = _internal_mutable_mapsvisitedbyfriends();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.MapsVisitedByFriends)
  return _msg;
}
inline void CSReqBody::set_allocated_mapsvisitedbyfriends(::msg::CSReqMapsVisitedByFriends* mapsvisitedbyfriends) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mapsvisitedbyfriends_);
  }
  if (mapsvisitedbyfriends) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapsvisitedbyfriends));
    if (message_arena != submessage_arena) {
      mapsvisitedbyfriends = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mapsvisitedbyfriends, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mapsvisitedbyfriends_ = mapsvisitedbyfriends;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.MapsVisitedByFriends)
}

// .msg.CSReqVerifyRealName VerifyRealName = 350;
inline bool CSReqBody::_internal_has_verifyrealname() const {
  return this != internal_default_instance() && _impl_.verifyrealname_ != nullptr;
}
inline bool CSReqBody::has_verifyrealname() const {
  return _internal_has_verifyrealname();
}
inline const ::msg::CSReqVerifyRealName& CSReqBody::_internal_verifyrealname() const {
  const ::msg::CSReqVerifyRealName* p = _impl_.verifyrealname_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqVerifyRealName&>(
      ::msg::_CSReqVerifyRealName_default_instance_);
}
inline const ::msg::CSReqVerifyRealName& CSReqBody::verifyrealname() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.VerifyRealName)
  return _internal_verifyrealname();
}
inline void CSReqBody::unsafe_arena_set_allocated_verifyrealname(
    ::msg::CSReqVerifyRealName* verifyrealname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.verifyrealname_);
  }
  _impl_.verifyrealname_ = verifyrealname;
  if (verifyrealname) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.VerifyRealName)
}
inline ::msg::CSReqVerifyRealName* CSReqBody::release_verifyrealname() {
  
  ::msg::CSReqVerifyRealName* temp = _impl_.verifyrealname_;
  _impl_.verifyrealname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqVerifyRealName* CSReqBody::unsafe_arena_release_verifyrealname() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.VerifyRealName)
  
  ::msg::CSReqVerifyRealName* temp = _impl_.verifyrealname_;
  _impl_.verifyrealname_ = nullptr;
  return temp;
}
inline ::msg::CSReqVerifyRealName* CSReqBody::_internal_mutable_verifyrealname() {
  
  if (_impl_.verifyrealname_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqVerifyRealName>(GetArenaForAllocation());
    _impl_.verifyrealname_ = p;
  }
  return _impl_.verifyrealname_;
}
inline ::msg::CSReqVerifyRealName* CSReqBody::mutable_verifyrealname() {
  ::msg::CSReqVerifyRealName* _msg = _internal_mutable_verifyrealname();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.VerifyRealName)
  return _msg;
}
inline void CSReqBody::set_allocated_verifyrealname(::msg::CSReqVerifyRealName* verifyrealname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.verifyrealname_);
  }
  if (verifyrealname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(verifyrealname));
    if (message_arena != submessage_arena) {
      verifyrealname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verifyrealname, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.verifyrealname_ = verifyrealname;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.VerifyRealName)
}

// .msg.CSReqFakePay FakePay = 351;
inline bool CSReqBody::_internal_has_fakepay() const {
  return this != internal_default_instance() && _impl_.fakepay_ != nullptr;
}
inline bool CSReqBody::has_fakepay() const {
  return _internal_has_fakepay();
}
inline const ::msg::CSReqFakePay& CSReqBody::_internal_fakepay() const {
  const ::msg::CSReqFakePay* p = _impl_.fakepay_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqFakePay&>(
      ::msg::_CSReqFakePay_default_instance_);
}
inline const ::msg::CSReqFakePay& CSReqBody::fakepay() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.FakePay)
  return _internal_fakepay();
}
inline void CSReqBody::unsafe_arena_set_allocated_fakepay(
    ::msg::CSReqFakePay* fakepay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fakepay_);
  }
  _impl_.fakepay_ = fakepay;
  if (fakepay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.FakePay)
}
inline ::msg::CSReqFakePay* CSReqBody::release_fakepay() {
  
  ::msg::CSReqFakePay* temp = _impl_.fakepay_;
  _impl_.fakepay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqFakePay* CSReqBody::unsafe_arena_release_fakepay() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.FakePay)
  
  ::msg::CSReqFakePay* temp = _impl_.fakepay_;
  _impl_.fakepay_ = nullptr;
  return temp;
}
inline ::msg::CSReqFakePay* CSReqBody::_internal_mutable_fakepay() {
  
  if (_impl_.fakepay_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqFakePay>(GetArenaForAllocation());
    _impl_.fakepay_ = p;
  }
  return _impl_.fakepay_;
}
inline ::msg::CSReqFakePay* CSReqBody::mutable_fakepay() {
  ::msg::CSReqFakePay* _msg = _internal_mutable_fakepay();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.FakePay)
  return _msg;
}
inline void CSReqBody::set_allocated_fakepay(::msg::CSReqFakePay* fakepay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fakepay_);
  }
  if (fakepay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fakepay));
    if (message_arena != submessage_arena) {
      fakepay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fakepay, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fakepay_ = fakepay;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.FakePay)
}

// .msg.CSReqGuildCreate GuildCreate = 360;
inline bool CSReqBody::_internal_has_guildcreate() const {
  return this != internal_default_instance() && _impl_.guildcreate_ != nullptr;
}
inline bool CSReqBody::has_guildcreate() const {
  return _internal_has_guildcreate();
}
inline const ::msg::CSReqGuildCreate& CSReqBody::_internal_guildcreate() const {
  const ::msg::CSReqGuildCreate* p = _impl_.guildcreate_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGuildCreate&>(
      ::msg::_CSReqGuildCreate_default_instance_);
}
inline const ::msg::CSReqGuildCreate& CSReqBody::guildcreate() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GuildCreate)
  return _internal_guildcreate();
}
inline void CSReqBody::unsafe_arena_set_allocated_guildcreate(
    ::msg::CSReqGuildCreate* guildcreate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildcreate_);
  }
  _impl_.guildcreate_ = guildcreate;
  if (guildcreate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GuildCreate)
}
inline ::msg::CSReqGuildCreate* CSReqBody::release_guildcreate() {
  
  ::msg::CSReqGuildCreate* temp = _impl_.guildcreate_;
  _impl_.guildcreate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGuildCreate* CSReqBody::unsafe_arena_release_guildcreate() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GuildCreate)
  
  ::msg::CSReqGuildCreate* temp = _impl_.guildcreate_;
  _impl_.guildcreate_ = nullptr;
  return temp;
}
inline ::msg::CSReqGuildCreate* CSReqBody::_internal_mutable_guildcreate() {
  
  if (_impl_.guildcreate_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGuildCreate>(GetArenaForAllocation());
    _impl_.guildcreate_ = p;
  }
  return _impl_.guildcreate_;
}
inline ::msg::CSReqGuildCreate* CSReqBody::mutable_guildcreate() {
  ::msg::CSReqGuildCreate* _msg = _internal_mutable_guildcreate();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GuildCreate)
  return _msg;
}
inline void CSReqBody::set_allocated_guildcreate(::msg::CSReqGuildCreate* guildcreate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildcreate_);
  }
  if (guildcreate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildcreate));
    if (message_arena != submessage_arena) {
      guildcreate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildcreate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildcreate_ = guildcreate;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GuildCreate)
}

// .msg.CSReqGuildApply GuildApply = 361;
inline bool CSReqBody::_internal_has_guildapply() const {
  return this != internal_default_instance() && _impl_.guildapply_ != nullptr;
}
inline bool CSReqBody::has_guildapply() const {
  return _internal_has_guildapply();
}
inline const ::msg::CSReqGuildApply& CSReqBody::_internal_guildapply() const {
  const ::msg::CSReqGuildApply* p = _impl_.guildapply_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGuildApply&>(
      ::msg::_CSReqGuildApply_default_instance_);
}
inline const ::msg::CSReqGuildApply& CSReqBody::guildapply() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GuildApply)
  return _internal_guildapply();
}
inline void CSReqBody::unsafe_arena_set_allocated_guildapply(
    ::msg::CSReqGuildApply* guildapply) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildapply_);
  }
  _impl_.guildapply_ = guildapply;
  if (guildapply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GuildApply)
}
inline ::msg::CSReqGuildApply* CSReqBody::release_guildapply() {
  
  ::msg::CSReqGuildApply* temp = _impl_.guildapply_;
  _impl_.guildapply_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGuildApply* CSReqBody::unsafe_arena_release_guildapply() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GuildApply)
  
  ::msg::CSReqGuildApply* temp = _impl_.guildapply_;
  _impl_.guildapply_ = nullptr;
  return temp;
}
inline ::msg::CSReqGuildApply* CSReqBody::_internal_mutable_guildapply() {
  
  if (_impl_.guildapply_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGuildApply>(GetArenaForAllocation());
    _impl_.guildapply_ = p;
  }
  return _impl_.guildapply_;
}
inline ::msg::CSReqGuildApply* CSReqBody::mutable_guildapply() {
  ::msg::CSReqGuildApply* _msg = _internal_mutable_guildapply();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GuildApply)
  return _msg;
}
inline void CSReqBody::set_allocated_guildapply(::msg::CSReqGuildApply* guildapply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildapply_);
  }
  if (guildapply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildapply));
    if (message_arena != submessage_arena) {
      guildapply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildapply, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildapply_ = guildapply;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GuildApply)
}

// .msg.CSReqGuildHome GuildHome = 362;
inline bool CSReqBody::_internal_has_guildhome() const {
  return this != internal_default_instance() && _impl_.guildhome_ != nullptr;
}
inline bool CSReqBody::has_guildhome() const {
  return _internal_has_guildhome();
}
inline const ::msg::CSReqGuildHome& CSReqBody::_internal_guildhome() const {
  const ::msg::CSReqGuildHome* p = _impl_.guildhome_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGuildHome&>(
      ::msg::_CSReqGuildHome_default_instance_);
}
inline const ::msg::CSReqGuildHome& CSReqBody::guildhome() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GuildHome)
  return _internal_guildhome();
}
inline void CSReqBody::unsafe_arena_set_allocated_guildhome(
    ::msg::CSReqGuildHome* guildhome) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildhome_);
  }
  _impl_.guildhome_ = guildhome;
  if (guildhome) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GuildHome)
}
inline ::msg::CSReqGuildHome* CSReqBody::release_guildhome() {
  
  ::msg::CSReqGuildHome* temp = _impl_.guildhome_;
  _impl_.guildhome_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGuildHome* CSReqBody::unsafe_arena_release_guildhome() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GuildHome)
  
  ::msg::CSReqGuildHome* temp = _impl_.guildhome_;
  _impl_.guildhome_ = nullptr;
  return temp;
}
inline ::msg::CSReqGuildHome* CSReqBody::_internal_mutable_guildhome() {
  
  if (_impl_.guildhome_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGuildHome>(GetArenaForAllocation());
    _impl_.guildhome_ = p;
  }
  return _impl_.guildhome_;
}
inline ::msg::CSReqGuildHome* CSReqBody::mutable_guildhome() {
  ::msg::CSReqGuildHome* _msg = _internal_mutable_guildhome();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GuildHome)
  return _msg;
}
inline void CSReqBody::set_allocated_guildhome(::msg::CSReqGuildHome* guildhome) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildhome_);
  }
  if (guildhome) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildhome));
    if (message_arena != submessage_arena) {
      guildhome = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildhome, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildhome_ = guildhome;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GuildHome)
}

// .msg.CSReqGuildInfo GuildInfo = 364;
inline bool CSReqBody::_internal_has_guildinfo() const {
  return this != internal_default_instance() && _impl_.guildinfo_ != nullptr;
}
inline bool CSReqBody::has_guildinfo() const {
  return _internal_has_guildinfo();
}
inline const ::msg::CSReqGuildInfo& CSReqBody::_internal_guildinfo() const {
  const ::msg::CSReqGuildInfo* p = _impl_.guildinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGuildInfo&>(
      ::msg::_CSReqGuildInfo_default_instance_);
}
inline const ::msg::CSReqGuildInfo& CSReqBody::guildinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GuildInfo)
  return _internal_guildinfo();
}
inline void CSReqBody::unsafe_arena_set_allocated_guildinfo(
    ::msg::CSReqGuildInfo* guildinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildinfo_);
  }
  _impl_.guildinfo_ = guildinfo;
  if (guildinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GuildInfo)
}
inline ::msg::CSReqGuildInfo* CSReqBody::release_guildinfo() {
  
  ::msg::CSReqGuildInfo* temp = _impl_.guildinfo_;
  _impl_.guildinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGuildInfo* CSReqBody::unsafe_arena_release_guildinfo() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GuildInfo)
  
  ::msg::CSReqGuildInfo* temp = _impl_.guildinfo_;
  _impl_.guildinfo_ = nullptr;
  return temp;
}
inline ::msg::CSReqGuildInfo* CSReqBody::_internal_mutable_guildinfo() {
  
  if (_impl_.guildinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGuildInfo>(GetArenaForAllocation());
    _impl_.guildinfo_ = p;
  }
  return _impl_.guildinfo_;
}
inline ::msg::CSReqGuildInfo* CSReqBody::mutable_guildinfo() {
  ::msg::CSReqGuildInfo* _msg = _internal_mutable_guildinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GuildInfo)
  return _msg;
}
inline void CSReqBody::set_allocated_guildinfo(::msg::CSReqGuildInfo* guildinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildinfo_);
  }
  if (guildinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildinfo));
    if (message_arena != submessage_arena) {
      guildinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildinfo_ = guildinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GuildInfo)
}

// .msg.CSReqGuildApprove GuildApprove = 365;
inline bool CSReqBody::_internal_has_guildapprove() const {
  return this != internal_default_instance() && _impl_.guildapprove_ != nullptr;
}
inline bool CSReqBody::has_guildapprove() const {
  return _internal_has_guildapprove();
}
inline const ::msg::CSReqGuildApprove& CSReqBody::_internal_guildapprove() const {
  const ::msg::CSReqGuildApprove* p = _impl_.guildapprove_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGuildApprove&>(
      ::msg::_CSReqGuildApprove_default_instance_);
}
inline const ::msg::CSReqGuildApprove& CSReqBody::guildapprove() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GuildApprove)
  return _internal_guildapprove();
}
inline void CSReqBody::unsafe_arena_set_allocated_guildapprove(
    ::msg::CSReqGuildApprove* guildapprove) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildapprove_);
  }
  _impl_.guildapprove_ = guildapprove;
  if (guildapprove) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GuildApprove)
}
inline ::msg::CSReqGuildApprove* CSReqBody::release_guildapprove() {
  
  ::msg::CSReqGuildApprove* temp = _impl_.guildapprove_;
  _impl_.guildapprove_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGuildApprove* CSReqBody::unsafe_arena_release_guildapprove() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GuildApprove)
  
  ::msg::CSReqGuildApprove* temp = _impl_.guildapprove_;
  _impl_.guildapprove_ = nullptr;
  return temp;
}
inline ::msg::CSReqGuildApprove* CSReqBody::_internal_mutable_guildapprove() {
  
  if (_impl_.guildapprove_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGuildApprove>(GetArenaForAllocation());
    _impl_.guildapprove_ = p;
  }
  return _impl_.guildapprove_;
}
inline ::msg::CSReqGuildApprove* CSReqBody::mutable_guildapprove() {
  ::msg::CSReqGuildApprove* _msg = _internal_mutable_guildapprove();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GuildApprove)
  return _msg;
}
inline void CSReqBody::set_allocated_guildapprove(::msg::CSReqGuildApprove* guildapprove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildapprove_);
  }
  if (guildapprove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildapprove));
    if (message_arena != submessage_arena) {
      guildapprove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildapprove, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildapprove_ = guildapprove;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GuildApprove)
}

// .msg.CSReqGuildSetRole GuildRole = 366;
inline bool CSReqBody::_internal_has_guildrole() const {
  return this != internal_default_instance() && _impl_.guildrole_ != nullptr;
}
inline bool CSReqBody::has_guildrole() const {
  return _internal_has_guildrole();
}
inline const ::msg::CSReqGuildSetRole& CSReqBody::_internal_guildrole() const {
  const ::msg::CSReqGuildSetRole* p = _impl_.guildrole_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGuildSetRole&>(
      ::msg::_CSReqGuildSetRole_default_instance_);
}
inline const ::msg::CSReqGuildSetRole& CSReqBody::guildrole() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GuildRole)
  return _internal_guildrole();
}
inline void CSReqBody::unsafe_arena_set_allocated_guildrole(
    ::msg::CSReqGuildSetRole* guildrole) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildrole_);
  }
  _impl_.guildrole_ = guildrole;
  if (guildrole) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GuildRole)
}
inline ::msg::CSReqGuildSetRole* CSReqBody::release_guildrole() {
  
  ::msg::CSReqGuildSetRole* temp = _impl_.guildrole_;
  _impl_.guildrole_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGuildSetRole* CSReqBody::unsafe_arena_release_guildrole() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GuildRole)
  
  ::msg::CSReqGuildSetRole* temp = _impl_.guildrole_;
  _impl_.guildrole_ = nullptr;
  return temp;
}
inline ::msg::CSReqGuildSetRole* CSReqBody::_internal_mutable_guildrole() {
  
  if (_impl_.guildrole_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGuildSetRole>(GetArenaForAllocation());
    _impl_.guildrole_ = p;
  }
  return _impl_.guildrole_;
}
inline ::msg::CSReqGuildSetRole* CSReqBody::mutable_guildrole() {
  ::msg::CSReqGuildSetRole* _msg = _internal_mutable_guildrole();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GuildRole)
  return _msg;
}
inline void CSReqBody::set_allocated_guildrole(::msg::CSReqGuildSetRole* guildrole) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildrole_);
  }
  if (guildrole) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildrole));
    if (message_arena != submessage_arena) {
      guildrole = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildrole, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildrole_ = guildrole;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GuildRole)
}

// .msg.CSReqGuildModify GuildModify = 367;
inline bool CSReqBody::_internal_has_guildmodify() const {
  return this != internal_default_instance() && _impl_.guildmodify_ != nullptr;
}
inline bool CSReqBody::has_guildmodify() const {
  return _internal_has_guildmodify();
}
inline const ::msg::CSReqGuildModify& CSReqBody::_internal_guildmodify() const {
  const ::msg::CSReqGuildModify* p = _impl_.guildmodify_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGuildModify&>(
      ::msg::_CSReqGuildModify_default_instance_);
}
inline const ::msg::CSReqGuildModify& CSReqBody::guildmodify() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GuildModify)
  return _internal_guildmodify();
}
inline void CSReqBody::unsafe_arena_set_allocated_guildmodify(
    ::msg::CSReqGuildModify* guildmodify) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildmodify_);
  }
  _impl_.guildmodify_ = guildmodify;
  if (guildmodify) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GuildModify)
}
inline ::msg::CSReqGuildModify* CSReqBody::release_guildmodify() {
  
  ::msg::CSReqGuildModify* temp = _impl_.guildmodify_;
  _impl_.guildmodify_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGuildModify* CSReqBody::unsafe_arena_release_guildmodify() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GuildModify)
  
  ::msg::CSReqGuildModify* temp = _impl_.guildmodify_;
  _impl_.guildmodify_ = nullptr;
  return temp;
}
inline ::msg::CSReqGuildModify* CSReqBody::_internal_mutable_guildmodify() {
  
  if (_impl_.guildmodify_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGuildModify>(GetArenaForAllocation());
    _impl_.guildmodify_ = p;
  }
  return _impl_.guildmodify_;
}
inline ::msg::CSReqGuildModify* CSReqBody::mutable_guildmodify() {
  ::msg::CSReqGuildModify* _msg = _internal_mutable_guildmodify();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GuildModify)
  return _msg;
}
inline void CSReqBody::set_allocated_guildmodify(::msg::CSReqGuildModify* guildmodify) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildmodify_);
  }
  if (guildmodify) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildmodify));
    if (message_arena != submessage_arena) {
      guildmodify = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildmodify, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildmodify_ = guildmodify;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GuildModify)
}

// .msg.CSReqGuildKickoff GuildKickoff = 368;
inline bool CSReqBody::_internal_has_guildkickoff() const {
  return this != internal_default_instance() && _impl_.guildkickoff_ != nullptr;
}
inline bool CSReqBody::has_guildkickoff() const {
  return _internal_has_guildkickoff();
}
inline const ::msg::CSReqGuildKickoff& CSReqBody::_internal_guildkickoff() const {
  const ::msg::CSReqGuildKickoff* p = _impl_.guildkickoff_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGuildKickoff&>(
      ::msg::_CSReqGuildKickoff_default_instance_);
}
inline const ::msg::CSReqGuildKickoff& CSReqBody::guildkickoff() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GuildKickoff)
  return _internal_guildkickoff();
}
inline void CSReqBody::unsafe_arena_set_allocated_guildkickoff(
    ::msg::CSReqGuildKickoff* guildkickoff) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildkickoff_);
  }
  _impl_.guildkickoff_ = guildkickoff;
  if (guildkickoff) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GuildKickoff)
}
inline ::msg::CSReqGuildKickoff* CSReqBody::release_guildkickoff() {
  
  ::msg::CSReqGuildKickoff* temp = _impl_.guildkickoff_;
  _impl_.guildkickoff_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGuildKickoff* CSReqBody::unsafe_arena_release_guildkickoff() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GuildKickoff)
  
  ::msg::CSReqGuildKickoff* temp = _impl_.guildkickoff_;
  _impl_.guildkickoff_ = nullptr;
  return temp;
}
inline ::msg::CSReqGuildKickoff* CSReqBody::_internal_mutable_guildkickoff() {
  
  if (_impl_.guildkickoff_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGuildKickoff>(GetArenaForAllocation());
    _impl_.guildkickoff_ = p;
  }
  return _impl_.guildkickoff_;
}
inline ::msg::CSReqGuildKickoff* CSReqBody::mutable_guildkickoff() {
  ::msg::CSReqGuildKickoff* _msg = _internal_mutable_guildkickoff();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GuildKickoff)
  return _msg;
}
inline void CSReqBody::set_allocated_guildkickoff(::msg::CSReqGuildKickoff* guildkickoff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildkickoff_);
  }
  if (guildkickoff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildkickoff));
    if (message_arena != submessage_arena) {
      guildkickoff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildkickoff, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildkickoff_ = guildkickoff;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GuildKickoff)
}

// .msg.CSReqGuildDismiss GuildDismiss = 369;
inline bool CSReqBody::_internal_has_guilddismiss() const {
  return this != internal_default_instance() && _impl_.guilddismiss_ != nullptr;
}
inline bool CSReqBody::has_guilddismiss() const {
  return _internal_has_guilddismiss();
}
inline const ::msg::CSReqGuildDismiss& CSReqBody::_internal_guilddismiss() const {
  const ::msg::CSReqGuildDismiss* p = _impl_.guilddismiss_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGuildDismiss&>(
      ::msg::_CSReqGuildDismiss_default_instance_);
}
inline const ::msg::CSReqGuildDismiss& CSReqBody::guilddismiss() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GuildDismiss)
  return _internal_guilddismiss();
}
inline void CSReqBody::unsafe_arena_set_allocated_guilddismiss(
    ::msg::CSReqGuildDismiss* guilddismiss) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guilddismiss_);
  }
  _impl_.guilddismiss_ = guilddismiss;
  if (guilddismiss) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GuildDismiss)
}
inline ::msg::CSReqGuildDismiss* CSReqBody::release_guilddismiss() {
  
  ::msg::CSReqGuildDismiss* temp = _impl_.guilddismiss_;
  _impl_.guilddismiss_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGuildDismiss* CSReqBody::unsafe_arena_release_guilddismiss() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GuildDismiss)
  
  ::msg::CSReqGuildDismiss* temp = _impl_.guilddismiss_;
  _impl_.guilddismiss_ = nullptr;
  return temp;
}
inline ::msg::CSReqGuildDismiss* CSReqBody::_internal_mutable_guilddismiss() {
  
  if (_impl_.guilddismiss_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGuildDismiss>(GetArenaForAllocation());
    _impl_.guilddismiss_ = p;
  }
  return _impl_.guilddismiss_;
}
inline ::msg::CSReqGuildDismiss* CSReqBody::mutable_guilddismiss() {
  ::msg::CSReqGuildDismiss* _msg = _internal_mutable_guilddismiss();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GuildDismiss)
  return _msg;
}
inline void CSReqBody::set_allocated_guilddismiss(::msg::CSReqGuildDismiss* guilddismiss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guilddismiss_);
  }
  if (guilddismiss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guilddismiss));
    if (message_arena != submessage_arena) {
      guilddismiss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guilddismiss, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guilddismiss_ = guilddismiss;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GuildDismiss)
}

// .msg.CSReqGuildExit GuildExit = 370;
inline bool CSReqBody::_internal_has_guildexit() const {
  return this != internal_default_instance() && _impl_.guildexit_ != nullptr;
}
inline bool CSReqBody::has_guildexit() const {
  return _internal_has_guildexit();
}
inline const ::msg::CSReqGuildExit& CSReqBody::_internal_guildexit() const {
  const ::msg::CSReqGuildExit* p = _impl_.guildexit_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGuildExit&>(
      ::msg::_CSReqGuildExit_default_instance_);
}
inline const ::msg::CSReqGuildExit& CSReqBody::guildexit() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GuildExit)
  return _internal_guildexit();
}
inline void CSReqBody::unsafe_arena_set_allocated_guildexit(
    ::msg::CSReqGuildExit* guildexit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildexit_);
  }
  _impl_.guildexit_ = guildexit;
  if (guildexit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GuildExit)
}
inline ::msg::CSReqGuildExit* CSReqBody::release_guildexit() {
  
  ::msg::CSReqGuildExit* temp = _impl_.guildexit_;
  _impl_.guildexit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGuildExit* CSReqBody::unsafe_arena_release_guildexit() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GuildExit)
  
  ::msg::CSReqGuildExit* temp = _impl_.guildexit_;
  _impl_.guildexit_ = nullptr;
  return temp;
}
inline ::msg::CSReqGuildExit* CSReqBody::_internal_mutable_guildexit() {
  
  if (_impl_.guildexit_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGuildExit>(GetArenaForAllocation());
    _impl_.guildexit_ = p;
  }
  return _impl_.guildexit_;
}
inline ::msg::CSReqGuildExit* CSReqBody::mutable_guildexit() {
  ::msg::CSReqGuildExit* _msg = _internal_mutable_guildexit();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GuildExit)
  return _msg;
}
inline void CSReqBody::set_allocated_guildexit(::msg::CSReqGuildExit* guildexit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildexit_);
  }
  if (guildexit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildexit));
    if (message_arena != submessage_arena) {
      guildexit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildexit, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildexit_ = guildexit;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GuildExit)
}

// .msg.CSReqGuildChat GuildChat = 371;
inline bool CSReqBody::_internal_has_guildchat() const {
  return this != internal_default_instance() && _impl_.guildchat_ != nullptr;
}
inline bool CSReqBody::has_guildchat() const {
  return _internal_has_guildchat();
}
inline const ::msg::CSReqGuildChat& CSReqBody::_internal_guildchat() const {
  const ::msg::CSReqGuildChat* p = _impl_.guildchat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGuildChat&>(
      ::msg::_CSReqGuildChat_default_instance_);
}
inline const ::msg::CSReqGuildChat& CSReqBody::guildchat() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GuildChat)
  return _internal_guildchat();
}
inline void CSReqBody::unsafe_arena_set_allocated_guildchat(
    ::msg::CSReqGuildChat* guildchat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildchat_);
  }
  _impl_.guildchat_ = guildchat;
  if (guildchat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GuildChat)
}
inline ::msg::CSReqGuildChat* CSReqBody::release_guildchat() {
  
  ::msg::CSReqGuildChat* temp = _impl_.guildchat_;
  _impl_.guildchat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGuildChat* CSReqBody::unsafe_arena_release_guildchat() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GuildChat)
  
  ::msg::CSReqGuildChat* temp = _impl_.guildchat_;
  _impl_.guildchat_ = nullptr;
  return temp;
}
inline ::msg::CSReqGuildChat* CSReqBody::_internal_mutable_guildchat() {
  
  if (_impl_.guildchat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGuildChat>(GetArenaForAllocation());
    _impl_.guildchat_ = p;
  }
  return _impl_.guildchat_;
}
inline ::msg::CSReqGuildChat* CSReqBody::mutable_guildchat() {
  ::msg::CSReqGuildChat* _msg = _internal_mutable_guildchat();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GuildChat)
  return _msg;
}
inline void CSReqBody::set_allocated_guildchat(::msg::CSReqGuildChat* guildchat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildchat_);
  }
  if (guildchat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildchat));
    if (message_arena != submessage_arena) {
      guildchat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildchat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildchat_ = guildchat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GuildChat)
}

// .msg.CSReqGuildList GuildList = 372;
inline bool CSReqBody::_internal_has_guildlist() const {
  return this != internal_default_instance() && _impl_.guildlist_ != nullptr;
}
inline bool CSReqBody::has_guildlist() const {
  return _internal_has_guildlist();
}
inline const ::msg::CSReqGuildList& CSReqBody::_internal_guildlist() const {
  const ::msg::CSReqGuildList* p = _impl_.guildlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGuildList&>(
      ::msg::_CSReqGuildList_default_instance_);
}
inline const ::msg::CSReqGuildList& CSReqBody::guildlist() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GuildList)
  return _internal_guildlist();
}
inline void CSReqBody::unsafe_arena_set_allocated_guildlist(
    ::msg::CSReqGuildList* guildlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildlist_);
  }
  _impl_.guildlist_ = guildlist;
  if (guildlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GuildList)
}
inline ::msg::CSReqGuildList* CSReqBody::release_guildlist() {
  
  ::msg::CSReqGuildList* temp = _impl_.guildlist_;
  _impl_.guildlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGuildList* CSReqBody::unsafe_arena_release_guildlist() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GuildList)
  
  ::msg::CSReqGuildList* temp = _impl_.guildlist_;
  _impl_.guildlist_ = nullptr;
  return temp;
}
inline ::msg::CSReqGuildList* CSReqBody::_internal_mutable_guildlist() {
  
  if (_impl_.guildlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGuildList>(GetArenaForAllocation());
    _impl_.guildlist_ = p;
  }
  return _impl_.guildlist_;
}
inline ::msg::CSReqGuildList* CSReqBody::mutable_guildlist() {
  ::msg::CSReqGuildList* _msg = _internal_mutable_guildlist();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GuildList)
  return _msg;
}
inline void CSReqBody::set_allocated_guildlist(::msg::CSReqGuildList* guildlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildlist_);
  }
  if (guildlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildlist));
    if (message_arena != submessage_arena) {
      guildlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildlist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildlist_ = guildlist;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GuildList)
}

// .msg.CSReqGuildRecommendPlayers GuildRecommendPlayers = 373;
inline bool CSReqBody::_internal_has_guildrecommendplayers() const {
  return this != internal_default_instance() && _impl_.guildrecommendplayers_ != nullptr;
}
inline bool CSReqBody::has_guildrecommendplayers() const {
  return _internal_has_guildrecommendplayers();
}
inline const ::msg::CSReqGuildRecommendPlayers& CSReqBody::_internal_guildrecommendplayers() const {
  const ::msg::CSReqGuildRecommendPlayers* p = _impl_.guildrecommendplayers_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGuildRecommendPlayers&>(
      ::msg::_CSReqGuildRecommendPlayers_default_instance_);
}
inline const ::msg::CSReqGuildRecommendPlayers& CSReqBody::guildrecommendplayers() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GuildRecommendPlayers)
  return _internal_guildrecommendplayers();
}
inline void CSReqBody::unsafe_arena_set_allocated_guildrecommendplayers(
    ::msg::CSReqGuildRecommendPlayers* guildrecommendplayers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildrecommendplayers_);
  }
  _impl_.guildrecommendplayers_ = guildrecommendplayers;
  if (guildrecommendplayers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GuildRecommendPlayers)
}
inline ::msg::CSReqGuildRecommendPlayers* CSReqBody::release_guildrecommendplayers() {
  
  ::msg::CSReqGuildRecommendPlayers* temp = _impl_.guildrecommendplayers_;
  _impl_.guildrecommendplayers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGuildRecommendPlayers* CSReqBody::unsafe_arena_release_guildrecommendplayers() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GuildRecommendPlayers)
  
  ::msg::CSReqGuildRecommendPlayers* temp = _impl_.guildrecommendplayers_;
  _impl_.guildrecommendplayers_ = nullptr;
  return temp;
}
inline ::msg::CSReqGuildRecommendPlayers* CSReqBody::_internal_mutable_guildrecommendplayers() {
  
  if (_impl_.guildrecommendplayers_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGuildRecommendPlayers>(GetArenaForAllocation());
    _impl_.guildrecommendplayers_ = p;
  }
  return _impl_.guildrecommendplayers_;
}
inline ::msg::CSReqGuildRecommendPlayers* CSReqBody::mutable_guildrecommendplayers() {
  ::msg::CSReqGuildRecommendPlayers* _msg = _internal_mutable_guildrecommendplayers();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GuildRecommendPlayers)
  return _msg;
}
inline void CSReqBody::set_allocated_guildrecommendplayers(::msg::CSReqGuildRecommendPlayers* guildrecommendplayers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildrecommendplayers_);
  }
  if (guildrecommendplayers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildrecommendplayers));
    if (message_arena != submessage_arena) {
      guildrecommendplayers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildrecommendplayers, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildrecommendplayers_ = guildrecommendplayers;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GuildRecommendPlayers)
}

// .msg.CSReqGuildInviteList GuildInviteList = 374;
inline bool CSReqBody::_internal_has_guildinvitelist() const {
  return this != internal_default_instance() && _impl_.guildinvitelist_ != nullptr;
}
inline bool CSReqBody::has_guildinvitelist() const {
  return _internal_has_guildinvitelist();
}
inline const ::msg::CSReqGuildInviteList& CSReqBody::_internal_guildinvitelist() const {
  const ::msg::CSReqGuildInviteList* p = _impl_.guildinvitelist_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGuildInviteList&>(
      ::msg::_CSReqGuildInviteList_default_instance_);
}
inline const ::msg::CSReqGuildInviteList& CSReqBody::guildinvitelist() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GuildInviteList)
  return _internal_guildinvitelist();
}
inline void CSReqBody::unsafe_arena_set_allocated_guildinvitelist(
    ::msg::CSReqGuildInviteList* guildinvitelist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildinvitelist_);
  }
  _impl_.guildinvitelist_ = guildinvitelist;
  if (guildinvitelist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GuildInviteList)
}
inline ::msg::CSReqGuildInviteList* CSReqBody::release_guildinvitelist() {
  
  ::msg::CSReqGuildInviteList* temp = _impl_.guildinvitelist_;
  _impl_.guildinvitelist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGuildInviteList* CSReqBody::unsafe_arena_release_guildinvitelist() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GuildInviteList)
  
  ::msg::CSReqGuildInviteList* temp = _impl_.guildinvitelist_;
  _impl_.guildinvitelist_ = nullptr;
  return temp;
}
inline ::msg::CSReqGuildInviteList* CSReqBody::_internal_mutable_guildinvitelist() {
  
  if (_impl_.guildinvitelist_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGuildInviteList>(GetArenaForAllocation());
    _impl_.guildinvitelist_ = p;
  }
  return _impl_.guildinvitelist_;
}
inline ::msg::CSReqGuildInviteList* CSReqBody::mutable_guildinvitelist() {
  ::msg::CSReqGuildInviteList* _msg = _internal_mutable_guildinvitelist();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GuildInviteList)
  return _msg;
}
inline void CSReqBody::set_allocated_guildinvitelist(::msg::CSReqGuildInviteList* guildinvitelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildinvitelist_);
  }
  if (guildinvitelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildinvitelist));
    if (message_arena != submessage_arena) {
      guildinvitelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildinvitelist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildinvitelist_ = guildinvitelist;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GuildInviteList)
}

// .msg.CSReqGuildInvite GuildInvite = 375;
inline bool CSReqBody::_internal_has_guildinvite() const {
  return this != internal_default_instance() && _impl_.guildinvite_ != nullptr;
}
inline bool CSReqBody::has_guildinvite() const {
  return _internal_has_guildinvite();
}
inline const ::msg::CSReqGuildInvite& CSReqBody::_internal_guildinvite() const {
  const ::msg::CSReqGuildInvite* p = _impl_.guildinvite_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGuildInvite&>(
      ::msg::_CSReqGuildInvite_default_instance_);
}
inline const ::msg::CSReqGuildInvite& CSReqBody::guildinvite() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GuildInvite)
  return _internal_guildinvite();
}
inline void CSReqBody::unsafe_arena_set_allocated_guildinvite(
    ::msg::CSReqGuildInvite* guildinvite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildinvite_);
  }
  _impl_.guildinvite_ = guildinvite;
  if (guildinvite) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GuildInvite)
}
inline ::msg::CSReqGuildInvite* CSReqBody::release_guildinvite() {
  
  ::msg::CSReqGuildInvite* temp = _impl_.guildinvite_;
  _impl_.guildinvite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGuildInvite* CSReqBody::unsafe_arena_release_guildinvite() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GuildInvite)
  
  ::msg::CSReqGuildInvite* temp = _impl_.guildinvite_;
  _impl_.guildinvite_ = nullptr;
  return temp;
}
inline ::msg::CSReqGuildInvite* CSReqBody::_internal_mutable_guildinvite() {
  
  if (_impl_.guildinvite_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGuildInvite>(GetArenaForAllocation());
    _impl_.guildinvite_ = p;
  }
  return _impl_.guildinvite_;
}
inline ::msg::CSReqGuildInvite* CSReqBody::mutable_guildinvite() {
  ::msg::CSReqGuildInvite* _msg = _internal_mutable_guildinvite();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GuildInvite)
  return _msg;
}
inline void CSReqBody::set_allocated_guildinvite(::msg::CSReqGuildInvite* guildinvite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildinvite_);
  }
  if (guildinvite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildinvite));
    if (message_arena != submessage_arena) {
      guildinvite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildinvite, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildinvite_ = guildinvite;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GuildInvite)
}

// .msg.CSReqGuildResign GuildResign = 376;
inline bool CSReqBody::_internal_has_guildresign() const {
  return this != internal_default_instance() && _impl_.guildresign_ != nullptr;
}
inline bool CSReqBody::has_guildresign() const {
  return _internal_has_guildresign();
}
inline const ::msg::CSReqGuildResign& CSReqBody::_internal_guildresign() const {
  const ::msg::CSReqGuildResign* p = _impl_.guildresign_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGuildResign&>(
      ::msg::_CSReqGuildResign_default_instance_);
}
inline const ::msg::CSReqGuildResign& CSReqBody::guildresign() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GuildResign)
  return _internal_guildresign();
}
inline void CSReqBody::unsafe_arena_set_allocated_guildresign(
    ::msg::CSReqGuildResign* guildresign) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildresign_);
  }
  _impl_.guildresign_ = guildresign;
  if (guildresign) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GuildResign)
}
inline ::msg::CSReqGuildResign* CSReqBody::release_guildresign() {
  
  ::msg::CSReqGuildResign* temp = _impl_.guildresign_;
  _impl_.guildresign_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGuildResign* CSReqBody::unsafe_arena_release_guildresign() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GuildResign)
  
  ::msg::CSReqGuildResign* temp = _impl_.guildresign_;
  _impl_.guildresign_ = nullptr;
  return temp;
}
inline ::msg::CSReqGuildResign* CSReqBody::_internal_mutable_guildresign() {
  
  if (_impl_.guildresign_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGuildResign>(GetArenaForAllocation());
    _impl_.guildresign_ = p;
  }
  return _impl_.guildresign_;
}
inline ::msg::CSReqGuildResign* CSReqBody::mutable_guildresign() {
  ::msg::CSReqGuildResign* _msg = _internal_mutable_guildresign();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GuildResign)
  return _msg;
}
inline void CSReqBody::set_allocated_guildresign(::msg::CSReqGuildResign* guildresign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildresign_);
  }
  if (guildresign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildresign));
    if (message_arena != submessage_arena) {
      guildresign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildresign, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildresign_ = guildresign;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GuildResign)
}

// .msg.CSReqGuildRejectInvite GuildRejectInvite = 377;
inline bool CSReqBody::_internal_has_guildrejectinvite() const {
  return this != internal_default_instance() && _impl_.guildrejectinvite_ != nullptr;
}
inline bool CSReqBody::has_guildrejectinvite() const {
  return _internal_has_guildrejectinvite();
}
inline const ::msg::CSReqGuildRejectInvite& CSReqBody::_internal_guildrejectinvite() const {
  const ::msg::CSReqGuildRejectInvite* p = _impl_.guildrejectinvite_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGuildRejectInvite&>(
      ::msg::_CSReqGuildRejectInvite_default_instance_);
}
inline const ::msg::CSReqGuildRejectInvite& CSReqBody::guildrejectinvite() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GuildRejectInvite)
  return _internal_guildrejectinvite();
}
inline void CSReqBody::unsafe_arena_set_allocated_guildrejectinvite(
    ::msg::CSReqGuildRejectInvite* guildrejectinvite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildrejectinvite_);
  }
  _impl_.guildrejectinvite_ = guildrejectinvite;
  if (guildrejectinvite) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GuildRejectInvite)
}
inline ::msg::CSReqGuildRejectInvite* CSReqBody::release_guildrejectinvite() {
  
  ::msg::CSReqGuildRejectInvite* temp = _impl_.guildrejectinvite_;
  _impl_.guildrejectinvite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGuildRejectInvite* CSReqBody::unsafe_arena_release_guildrejectinvite() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GuildRejectInvite)
  
  ::msg::CSReqGuildRejectInvite* temp = _impl_.guildrejectinvite_;
  _impl_.guildrejectinvite_ = nullptr;
  return temp;
}
inline ::msg::CSReqGuildRejectInvite* CSReqBody::_internal_mutable_guildrejectinvite() {
  
  if (_impl_.guildrejectinvite_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGuildRejectInvite>(GetArenaForAllocation());
    _impl_.guildrejectinvite_ = p;
  }
  return _impl_.guildrejectinvite_;
}
inline ::msg::CSReqGuildRejectInvite* CSReqBody::mutable_guildrejectinvite() {
  ::msg::CSReqGuildRejectInvite* _msg = _internal_mutable_guildrejectinvite();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GuildRejectInvite)
  return _msg;
}
inline void CSReqBody::set_allocated_guildrejectinvite(::msg::CSReqGuildRejectInvite* guildrejectinvite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildrejectinvite_);
  }
  if (guildrejectinvite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildrejectinvite));
    if (message_arena != submessage_arena) {
      guildrejectinvite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildrejectinvite, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildrejectinvite_ = guildrejectinvite;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GuildRejectInvite)
}

// .msg.CSReqGetVngCommentAward GetVngCommentAward = 390;
inline bool CSReqBody::_internal_has_getvngcommentaward() const {
  return this != internal_default_instance() && _impl_.getvngcommentaward_ != nullptr;
}
inline bool CSReqBody::has_getvngcommentaward() const {
  return _internal_has_getvngcommentaward();
}
inline const ::msg::CSReqGetVngCommentAward& CSReqBody::_internal_getvngcommentaward() const {
  const ::msg::CSReqGetVngCommentAward* p = _impl_.getvngcommentaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetVngCommentAward&>(
      ::msg::_CSReqGetVngCommentAward_default_instance_);
}
inline const ::msg::CSReqGetVngCommentAward& CSReqBody::getvngcommentaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetVngCommentAward)
  return _internal_getvngcommentaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_getvngcommentaward(
    ::msg::CSReqGetVngCommentAward* getvngcommentaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getvngcommentaward_);
  }
  _impl_.getvngcommentaward_ = getvngcommentaward;
  if (getvngcommentaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetVngCommentAward)
}
inline ::msg::CSReqGetVngCommentAward* CSReqBody::release_getvngcommentaward() {
  
  ::msg::CSReqGetVngCommentAward* temp = _impl_.getvngcommentaward_;
  _impl_.getvngcommentaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetVngCommentAward* CSReqBody::unsafe_arena_release_getvngcommentaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetVngCommentAward)
  
  ::msg::CSReqGetVngCommentAward* temp = _impl_.getvngcommentaward_;
  _impl_.getvngcommentaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetVngCommentAward* CSReqBody::_internal_mutable_getvngcommentaward() {
  
  if (_impl_.getvngcommentaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetVngCommentAward>(GetArenaForAllocation());
    _impl_.getvngcommentaward_ = p;
  }
  return _impl_.getvngcommentaward_;
}
inline ::msg::CSReqGetVngCommentAward* CSReqBody::mutable_getvngcommentaward() {
  ::msg::CSReqGetVngCommentAward* _msg = _internal_mutable_getvngcommentaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetVngCommentAward)
  return _msg;
}
inline void CSReqBody::set_allocated_getvngcommentaward(::msg::CSReqGetVngCommentAward* getvngcommentaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getvngcommentaward_);
  }
  if (getvngcommentaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getvngcommentaward));
    if (message_arena != submessage_arena) {
      getvngcommentaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getvngcommentaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getvngcommentaward_ = getvngcommentaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetVngCommentAward)
}

// .msg.CSReqLevelupChest LevelupChest = 391;
inline bool CSReqBody::_internal_has_levelupchest() const {
  return this != internal_default_instance() && _impl_.levelupchest_ != nullptr;
}
inline bool CSReqBody::has_levelupchest() const {
  return _internal_has_levelupchest();
}
inline const ::msg::CSReqLevelupChest& CSReqBody::_internal_levelupchest() const {
  const ::msg::CSReqLevelupChest* p = _impl_.levelupchest_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqLevelupChest&>(
      ::msg::_CSReqLevelupChest_default_instance_);
}
inline const ::msg::CSReqLevelupChest& CSReqBody::levelupchest() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.LevelupChest)
  return _internal_levelupchest();
}
inline void CSReqBody::unsafe_arena_set_allocated_levelupchest(
    ::msg::CSReqLevelupChest* levelupchest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.levelupchest_);
  }
  _impl_.levelupchest_ = levelupchest;
  if (levelupchest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.LevelupChest)
}
inline ::msg::CSReqLevelupChest* CSReqBody::release_levelupchest() {
  
  ::msg::CSReqLevelupChest* temp = _impl_.levelupchest_;
  _impl_.levelupchest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqLevelupChest* CSReqBody::unsafe_arena_release_levelupchest() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.LevelupChest)
  
  ::msg::CSReqLevelupChest* temp = _impl_.levelupchest_;
  _impl_.levelupchest_ = nullptr;
  return temp;
}
inline ::msg::CSReqLevelupChest* CSReqBody::_internal_mutable_levelupchest() {
  
  if (_impl_.levelupchest_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqLevelupChest>(GetArenaForAllocation());
    _impl_.levelupchest_ = p;
  }
  return _impl_.levelupchest_;
}
inline ::msg::CSReqLevelupChest* CSReqBody::mutable_levelupchest() {
  ::msg::CSReqLevelupChest* _msg = _internal_mutable_levelupchest();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.LevelupChest)
  return _msg;
}
inline void CSReqBody::set_allocated_levelupchest(::msg::CSReqLevelupChest* levelupchest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.levelupchest_);
  }
  if (levelupchest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(levelupchest));
    if (message_arena != submessage_arena) {
      levelupchest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, levelupchest, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.levelupchest_ = levelupchest;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.LevelupChest)
}

// .msg.CSReqWatchAd WatchAd = 392;
inline bool CSReqBody::_internal_has_watchad() const {
  return this != internal_default_instance() && _impl_.watchad_ != nullptr;
}
inline bool CSReqBody::has_watchad() const {
  return _internal_has_watchad();
}
inline const ::msg::CSReqWatchAd& CSReqBody::_internal_watchad() const {
  const ::msg::CSReqWatchAd* p = _impl_.watchad_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqWatchAd&>(
      ::msg::_CSReqWatchAd_default_instance_);
}
inline const ::msg::CSReqWatchAd& CSReqBody::watchad() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.WatchAd)
  return _internal_watchad();
}
inline void CSReqBody::unsafe_arena_set_allocated_watchad(
    ::msg::CSReqWatchAd* watchad) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.watchad_);
  }
  _impl_.watchad_ = watchad;
  if (watchad) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.WatchAd)
}
inline ::msg::CSReqWatchAd* CSReqBody::release_watchad() {
  
  ::msg::CSReqWatchAd* temp = _impl_.watchad_;
  _impl_.watchad_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqWatchAd* CSReqBody::unsafe_arena_release_watchad() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.WatchAd)
  
  ::msg::CSReqWatchAd* temp = _impl_.watchad_;
  _impl_.watchad_ = nullptr;
  return temp;
}
inline ::msg::CSReqWatchAd* CSReqBody::_internal_mutable_watchad() {
  
  if (_impl_.watchad_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqWatchAd>(GetArenaForAllocation());
    _impl_.watchad_ = p;
  }
  return _impl_.watchad_;
}
inline ::msg::CSReqWatchAd* CSReqBody::mutable_watchad() {
  ::msg::CSReqWatchAd* _msg = _internal_mutable_watchad();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.WatchAd)
  return _msg;
}
inline void CSReqBody::set_allocated_watchad(::msg::CSReqWatchAd* watchad) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.watchad_);
  }
  if (watchad) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(watchad));
    if (message_arena != submessage_arena) {
      watchad = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, watchad, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.watchad_ = watchad;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.WatchAd)
}

// .msg.CSReqQueryPsTournamentRoom PsTournamentRoom = 393;
inline bool CSReqBody::_internal_has_pstournamentroom() const {
  return this != internal_default_instance() && _impl_.pstournamentroom_ != nullptr;
}
inline bool CSReqBody::has_pstournamentroom() const {
  return _internal_has_pstournamentroom();
}
inline const ::msg::CSReqQueryPsTournamentRoom& CSReqBody::_internal_pstournamentroom() const {
  const ::msg::CSReqQueryPsTournamentRoom* p = _impl_.pstournamentroom_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqQueryPsTournamentRoom&>(
      ::msg::_CSReqQueryPsTournamentRoom_default_instance_);
}
inline const ::msg::CSReqQueryPsTournamentRoom& CSReqBody::pstournamentroom() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PsTournamentRoom)
  return _internal_pstournamentroom();
}
inline void CSReqBody::unsafe_arena_set_allocated_pstournamentroom(
    ::msg::CSReqQueryPsTournamentRoom* pstournamentroom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pstournamentroom_);
  }
  _impl_.pstournamentroom_ = pstournamentroom;
  if (pstournamentroom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PsTournamentRoom)
}
inline ::msg::CSReqQueryPsTournamentRoom* CSReqBody::release_pstournamentroom() {
  
  ::msg::CSReqQueryPsTournamentRoom* temp = _impl_.pstournamentroom_;
  _impl_.pstournamentroom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqQueryPsTournamentRoom* CSReqBody::unsafe_arena_release_pstournamentroom() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PsTournamentRoom)
  
  ::msg::CSReqQueryPsTournamentRoom* temp = _impl_.pstournamentroom_;
  _impl_.pstournamentroom_ = nullptr;
  return temp;
}
inline ::msg::CSReqQueryPsTournamentRoom* CSReqBody::_internal_mutable_pstournamentroom() {
  
  if (_impl_.pstournamentroom_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqQueryPsTournamentRoom>(GetArenaForAllocation());
    _impl_.pstournamentroom_ = p;
  }
  return _impl_.pstournamentroom_;
}
inline ::msg::CSReqQueryPsTournamentRoom* CSReqBody::mutable_pstournamentroom() {
  ::msg::CSReqQueryPsTournamentRoom* _msg = _internal_mutable_pstournamentroom();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PsTournamentRoom)
  return _msg;
}
inline void CSReqBody::set_allocated_pstournamentroom(::msg::CSReqQueryPsTournamentRoom* pstournamentroom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pstournamentroom_);
  }
  if (pstournamentroom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pstournamentroom));
    if (message_arena != submessage_arena) {
      pstournamentroom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pstournamentroom, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pstournamentroom_ = pstournamentroom;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PsTournamentRoom)
}

// .msg.CSReqGetAdCumulateAward GetAdCumulateAward = 394;
inline bool CSReqBody::_internal_has_getadcumulateaward() const {
  return this != internal_default_instance() && _impl_.getadcumulateaward_ != nullptr;
}
inline bool CSReqBody::has_getadcumulateaward() const {
  return _internal_has_getadcumulateaward();
}
inline const ::msg::CSReqGetAdCumulateAward& CSReqBody::_internal_getadcumulateaward() const {
  const ::msg::CSReqGetAdCumulateAward* p = _impl_.getadcumulateaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetAdCumulateAward&>(
      ::msg::_CSReqGetAdCumulateAward_default_instance_);
}
inline const ::msg::CSReqGetAdCumulateAward& CSReqBody::getadcumulateaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetAdCumulateAward)
  return _internal_getadcumulateaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_getadcumulateaward(
    ::msg::CSReqGetAdCumulateAward* getadcumulateaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getadcumulateaward_);
  }
  _impl_.getadcumulateaward_ = getadcumulateaward;
  if (getadcumulateaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetAdCumulateAward)
}
inline ::msg::CSReqGetAdCumulateAward* CSReqBody::release_getadcumulateaward() {
  
  ::msg::CSReqGetAdCumulateAward* temp = _impl_.getadcumulateaward_;
  _impl_.getadcumulateaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetAdCumulateAward* CSReqBody::unsafe_arena_release_getadcumulateaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetAdCumulateAward)
  
  ::msg::CSReqGetAdCumulateAward* temp = _impl_.getadcumulateaward_;
  _impl_.getadcumulateaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetAdCumulateAward* CSReqBody::_internal_mutable_getadcumulateaward() {
  
  if (_impl_.getadcumulateaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetAdCumulateAward>(GetArenaForAllocation());
    _impl_.getadcumulateaward_ = p;
  }
  return _impl_.getadcumulateaward_;
}
inline ::msg::CSReqGetAdCumulateAward* CSReqBody::mutable_getadcumulateaward() {
  ::msg::CSReqGetAdCumulateAward* _msg = _internal_mutable_getadcumulateaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetAdCumulateAward)
  return _msg;
}
inline void CSReqBody::set_allocated_getadcumulateaward(::msg::CSReqGetAdCumulateAward* getadcumulateaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getadcumulateaward_);
  }
  if (getadcumulateaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getadcumulateaward));
    if (message_arena != submessage_arena) {
      getadcumulateaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getadcumulateaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getadcumulateaward_ = getadcumulateaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetAdCumulateAward)
}

// .msg.CSReqSetMessengerPos SetMessengerPos = 535;
inline bool CSReqBody::_internal_has_setmessengerpos() const {
  return this != internal_default_instance() && _impl_.setmessengerpos_ != nullptr;
}
inline bool CSReqBody::has_setmessengerpos() const {
  return _internal_has_setmessengerpos();
}
inline const ::msg::CSReqSetMessengerPos& CSReqBody::_internal_setmessengerpos() const {
  const ::msg::CSReqSetMessengerPos* p = _impl_.setmessengerpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSetMessengerPos&>(
      ::msg::_CSReqSetMessengerPos_default_instance_);
}
inline const ::msg::CSReqSetMessengerPos& CSReqBody::setmessengerpos() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SetMessengerPos)
  return _internal_setmessengerpos();
}
inline void CSReqBody::unsafe_arena_set_allocated_setmessengerpos(
    ::msg::CSReqSetMessengerPos* setmessengerpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setmessengerpos_);
  }
  _impl_.setmessengerpos_ = setmessengerpos;
  if (setmessengerpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SetMessengerPos)
}
inline ::msg::CSReqSetMessengerPos* CSReqBody::release_setmessengerpos() {
  
  ::msg::CSReqSetMessengerPos* temp = _impl_.setmessengerpos_;
  _impl_.setmessengerpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSetMessengerPos* CSReqBody::unsafe_arena_release_setmessengerpos() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SetMessengerPos)
  
  ::msg::CSReqSetMessengerPos* temp = _impl_.setmessengerpos_;
  _impl_.setmessengerpos_ = nullptr;
  return temp;
}
inline ::msg::CSReqSetMessengerPos* CSReqBody::_internal_mutable_setmessengerpos() {
  
  if (_impl_.setmessengerpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSetMessengerPos>(GetArenaForAllocation());
    _impl_.setmessengerpos_ = p;
  }
  return _impl_.setmessengerpos_;
}
inline ::msg::CSReqSetMessengerPos* CSReqBody::mutable_setmessengerpos() {
  ::msg::CSReqSetMessengerPos* _msg = _internal_mutable_setmessengerpos();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SetMessengerPos)
  return _msg;
}
inline void CSReqBody::set_allocated_setmessengerpos(::msg::CSReqSetMessengerPos* setmessengerpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setmessengerpos_);
  }
  if (setmessengerpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setmessengerpos));
    if (message_arena != submessage_arena) {
      setmessengerpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setmessengerpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setmessengerpos_ = setmessengerpos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SetMessengerPos)
}

// .msg.CSReqUpdateAntiAddictionTime UpdateAntiAddictionTime = 553;
inline bool CSReqBody::_internal_has_updateantiaddictiontime() const {
  return this != internal_default_instance() && _impl_.updateantiaddictiontime_ != nullptr;
}
inline bool CSReqBody::has_updateantiaddictiontime() const {
  return _internal_has_updateantiaddictiontime();
}
inline const ::msg::CSReqUpdateAntiAddictionTime& CSReqBody::_internal_updateantiaddictiontime() const {
  const ::msg::CSReqUpdateAntiAddictionTime* p = _impl_.updateantiaddictiontime_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUpdateAntiAddictionTime&>(
      ::msg::_CSReqUpdateAntiAddictionTime_default_instance_);
}
inline const ::msg::CSReqUpdateAntiAddictionTime& CSReqBody::updateantiaddictiontime() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UpdateAntiAddictionTime)
  return _internal_updateantiaddictiontime();
}
inline void CSReqBody::unsafe_arena_set_allocated_updateantiaddictiontime(
    ::msg::CSReqUpdateAntiAddictionTime* updateantiaddictiontime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updateantiaddictiontime_);
  }
  _impl_.updateantiaddictiontime_ = updateantiaddictiontime;
  if (updateantiaddictiontime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UpdateAntiAddictionTime)
}
inline ::msg::CSReqUpdateAntiAddictionTime* CSReqBody::release_updateantiaddictiontime() {
  
  ::msg::CSReqUpdateAntiAddictionTime* temp = _impl_.updateantiaddictiontime_;
  _impl_.updateantiaddictiontime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUpdateAntiAddictionTime* CSReqBody::unsafe_arena_release_updateantiaddictiontime() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UpdateAntiAddictionTime)
  
  ::msg::CSReqUpdateAntiAddictionTime* temp = _impl_.updateantiaddictiontime_;
  _impl_.updateantiaddictiontime_ = nullptr;
  return temp;
}
inline ::msg::CSReqUpdateAntiAddictionTime* CSReqBody::_internal_mutable_updateantiaddictiontime() {
  
  if (_impl_.updateantiaddictiontime_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUpdateAntiAddictionTime>(GetArenaForAllocation());
    _impl_.updateantiaddictiontime_ = p;
  }
  return _impl_.updateantiaddictiontime_;
}
inline ::msg::CSReqUpdateAntiAddictionTime* CSReqBody::mutable_updateantiaddictiontime() {
  ::msg::CSReqUpdateAntiAddictionTime* _msg = _internal_mutable_updateantiaddictiontime();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UpdateAntiAddictionTime)
  return _msg;
}
inline void CSReqBody::set_allocated_updateantiaddictiontime(::msg::CSReqUpdateAntiAddictionTime* updateantiaddictiontime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updateantiaddictiontime_);
  }
  if (updateantiaddictiontime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updateantiaddictiontime));
    if (message_arena != submessage_arena) {
      updateantiaddictiontime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updateantiaddictiontime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updateantiaddictiontime_ = updateantiaddictiontime;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UpdateAntiAddictionTime)
}

// .msg.CSReqCancelReconnect CancelReconnect = 554;
inline bool CSReqBody::_internal_has_cancelreconnect() const {
  return this != internal_default_instance() && _impl_.cancelreconnect_ != nullptr;
}
inline bool CSReqBody::has_cancelreconnect() const {
  return _internal_has_cancelreconnect();
}
inline const ::msg::CSReqCancelReconnect& CSReqBody::_internal_cancelreconnect() const {
  const ::msg::CSReqCancelReconnect* p = _impl_.cancelreconnect_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqCancelReconnect&>(
      ::msg::_CSReqCancelReconnect_default_instance_);
}
inline const ::msg::CSReqCancelReconnect& CSReqBody::cancelreconnect() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.CancelReconnect)
  return _internal_cancelreconnect();
}
inline void CSReqBody::unsafe_arena_set_allocated_cancelreconnect(
    ::msg::CSReqCancelReconnect* cancelreconnect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cancelreconnect_);
  }
  _impl_.cancelreconnect_ = cancelreconnect;
  if (cancelreconnect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.CancelReconnect)
}
inline ::msg::CSReqCancelReconnect* CSReqBody::release_cancelreconnect() {
  
  ::msg::CSReqCancelReconnect* temp = _impl_.cancelreconnect_;
  _impl_.cancelreconnect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqCancelReconnect* CSReqBody::unsafe_arena_release_cancelreconnect() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.CancelReconnect)
  
  ::msg::CSReqCancelReconnect* temp = _impl_.cancelreconnect_;
  _impl_.cancelreconnect_ = nullptr;
  return temp;
}
inline ::msg::CSReqCancelReconnect* CSReqBody::_internal_mutable_cancelreconnect() {
  
  if (_impl_.cancelreconnect_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqCancelReconnect>(GetArenaForAllocation());
    _impl_.cancelreconnect_ = p;
  }
  return _impl_.cancelreconnect_;
}
inline ::msg::CSReqCancelReconnect* CSReqBody::mutable_cancelreconnect() {
  ::msg::CSReqCancelReconnect* _msg = _internal_mutable_cancelreconnect();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.CancelReconnect)
  return _msg;
}
inline void CSReqBody::set_allocated_cancelreconnect(::msg::CSReqCancelReconnect* cancelreconnect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cancelreconnect_);
  }
  if (cancelreconnect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancelreconnect));
    if (message_arena != submessage_arena) {
      cancelreconnect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancelreconnect, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cancelreconnect_ = cancelreconnect;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.CancelReconnect)
}

// .msg.CSReqReconnect Reconnect = 556;
inline bool CSReqBody::_internal_has_reconnect() const {
  return this != internal_default_instance() && _impl_.reconnect_ != nullptr;
}
inline bool CSReqBody::has_reconnect() const {
  return _internal_has_reconnect();
}
inline const ::msg::CSReqReconnect& CSReqBody::_internal_reconnect() const {
  const ::msg::CSReqReconnect* p = _impl_.reconnect_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqReconnect&>(
      ::msg::_CSReqReconnect_default_instance_);
}
inline const ::msg::CSReqReconnect& CSReqBody::reconnect() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.Reconnect)
  return _internal_reconnect();
}
inline void CSReqBody::unsafe_arena_set_allocated_reconnect(
    ::msg::CSReqReconnect* reconnect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reconnect_);
  }
  _impl_.reconnect_ = reconnect;
  if (reconnect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.Reconnect)
}
inline ::msg::CSReqReconnect* CSReqBody::release_reconnect() {
  
  ::msg::CSReqReconnect* temp = _impl_.reconnect_;
  _impl_.reconnect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqReconnect* CSReqBody::unsafe_arena_release_reconnect() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.Reconnect)
  
  ::msg::CSReqReconnect* temp = _impl_.reconnect_;
  _impl_.reconnect_ = nullptr;
  return temp;
}
inline ::msg::CSReqReconnect* CSReqBody::_internal_mutable_reconnect() {
  
  if (_impl_.reconnect_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqReconnect>(GetArenaForAllocation());
    _impl_.reconnect_ = p;
  }
  return _impl_.reconnect_;
}
inline ::msg::CSReqReconnect* CSReqBody::mutable_reconnect() {
  ::msg::CSReqReconnect* _msg = _internal_mutable_reconnect();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.Reconnect)
  return _msg;
}
inline void CSReqBody::set_allocated_reconnect(::msg::CSReqReconnect* reconnect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reconnect_);
  }
  if (reconnect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reconnect));
    if (message_arena != submessage_arena) {
      reconnect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reconnect, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reconnect_ = reconnect;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.Reconnect)
}

// .msg.CSReqPassThrough PassThrough = 563;
inline bool CSReqBody::_internal_has_passthrough() const {
  return this != internal_default_instance() && _impl_.passthrough_ != nullptr;
}
inline bool CSReqBody::has_passthrough() const {
  return _internal_has_passthrough();
}
inline const ::msg::CSReqPassThrough& CSReqBody::_internal_passthrough() const {
  const ::msg::CSReqPassThrough* p = _impl_.passthrough_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPassThrough&>(
      ::msg::_CSReqPassThrough_default_instance_);
}
inline const ::msg::CSReqPassThrough& CSReqBody::passthrough() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PassThrough)
  return _internal_passthrough();
}
inline void CSReqBody::unsafe_arena_set_allocated_passthrough(
    ::msg::CSReqPassThrough* passthrough) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passthrough_);
  }
  _impl_.passthrough_ = passthrough;
  if (passthrough) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PassThrough)
}
inline ::msg::CSReqPassThrough* CSReqBody::release_passthrough() {
  
  ::msg::CSReqPassThrough* temp = _impl_.passthrough_;
  _impl_.passthrough_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPassThrough* CSReqBody::unsafe_arena_release_passthrough() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PassThrough)
  
  ::msg::CSReqPassThrough* temp = _impl_.passthrough_;
  _impl_.passthrough_ = nullptr;
  return temp;
}
inline ::msg::CSReqPassThrough* CSReqBody::_internal_mutable_passthrough() {
  
  if (_impl_.passthrough_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPassThrough>(GetArenaForAllocation());
    _impl_.passthrough_ = p;
  }
  return _impl_.passthrough_;
}
inline ::msg::CSReqPassThrough* CSReqBody::mutable_passthrough() {
  ::msg::CSReqPassThrough* _msg = _internal_mutable_passthrough();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PassThrough)
  return _msg;
}
inline void CSReqBody::set_allocated_passthrough(::msg::CSReqPassThrough* passthrough) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passthrough_);
  }
  if (passthrough) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(passthrough));
    if (message_arena != submessage_arena) {
      passthrough = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, passthrough, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.passthrough_ = passthrough;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PassThrough)
}

// .msg.CSReqVisitPlayer VisitPlayer = 564;
inline bool CSReqBody::_internal_has_visitplayer() const {
  return this != internal_default_instance() && _impl_.visitplayer_ != nullptr;
}
inline bool CSReqBody::has_visitplayer() const {
  return _internal_has_visitplayer();
}
inline const ::msg::CSReqVisitPlayer& CSReqBody::_internal_visitplayer() const {
  const ::msg::CSReqVisitPlayer* p = _impl_.visitplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqVisitPlayer&>(
      ::msg::_CSReqVisitPlayer_default_instance_);
}
inline const ::msg::CSReqVisitPlayer& CSReqBody::visitplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.VisitPlayer)
  return _internal_visitplayer();
}
inline void CSReqBody::unsafe_arena_set_allocated_visitplayer(
    ::msg::CSReqVisitPlayer* visitplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.visitplayer_);
  }
  _impl_.visitplayer_ = visitplayer;
  if (visitplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.VisitPlayer)
}
inline ::msg::CSReqVisitPlayer* CSReqBody::release_visitplayer() {
  
  ::msg::CSReqVisitPlayer* temp = _impl_.visitplayer_;
  _impl_.visitplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqVisitPlayer* CSReqBody::unsafe_arena_release_visitplayer() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.VisitPlayer)
  
  ::msg::CSReqVisitPlayer* temp = _impl_.visitplayer_;
  _impl_.visitplayer_ = nullptr;
  return temp;
}
inline ::msg::CSReqVisitPlayer* CSReqBody::_internal_mutable_visitplayer() {
  
  if (_impl_.visitplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqVisitPlayer>(GetArenaForAllocation());
    _impl_.visitplayer_ = p;
  }
  return _impl_.visitplayer_;
}
inline ::msg::CSReqVisitPlayer* CSReqBody::mutable_visitplayer() {
  ::msg::CSReqVisitPlayer* _msg = _internal_mutable_visitplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.VisitPlayer)
  return _msg;
}
inline void CSReqBody::set_allocated_visitplayer(::msg::CSReqVisitPlayer* visitplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.visitplayer_);
  }
  if (visitplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visitplayer));
    if (message_arena != submessage_arena) {
      visitplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visitplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.visitplayer_ = visitplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.VisitPlayer)
}

// .msg.CSReqLeaveGameEarly LeaveGameEarly = 565;
inline bool CSReqBody::_internal_has_leavegameearly() const {
  return this != internal_default_instance() && _impl_.leavegameearly_ != nullptr;
}
inline bool CSReqBody::has_leavegameearly() const {
  return _internal_has_leavegameearly();
}
inline const ::msg::CSReqLeaveGameEarly& CSReqBody::_internal_leavegameearly() const {
  const ::msg::CSReqLeaveGameEarly* p = _impl_.leavegameearly_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqLeaveGameEarly&>(
      ::msg::_CSReqLeaveGameEarly_default_instance_);
}
inline const ::msg::CSReqLeaveGameEarly& CSReqBody::leavegameearly() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.LeaveGameEarly)
  return _internal_leavegameearly();
}
inline void CSReqBody::unsafe_arena_set_allocated_leavegameearly(
    ::msg::CSReqLeaveGameEarly* leavegameearly) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leavegameearly_);
  }
  _impl_.leavegameearly_ = leavegameearly;
  if (leavegameearly) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.LeaveGameEarly)
}
inline ::msg::CSReqLeaveGameEarly* CSReqBody::release_leavegameearly() {
  
  ::msg::CSReqLeaveGameEarly* temp = _impl_.leavegameearly_;
  _impl_.leavegameearly_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqLeaveGameEarly* CSReqBody::unsafe_arena_release_leavegameearly() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.LeaveGameEarly)
  
  ::msg::CSReqLeaveGameEarly* temp = _impl_.leavegameearly_;
  _impl_.leavegameearly_ = nullptr;
  return temp;
}
inline ::msg::CSReqLeaveGameEarly* CSReqBody::_internal_mutable_leavegameearly() {
  
  if (_impl_.leavegameearly_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqLeaveGameEarly>(GetArenaForAllocation());
    _impl_.leavegameearly_ = p;
  }
  return _impl_.leavegameearly_;
}
inline ::msg::CSReqLeaveGameEarly* CSReqBody::mutable_leavegameearly() {
  ::msg::CSReqLeaveGameEarly* _msg = _internal_mutable_leavegameearly();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.LeaveGameEarly)
  return _msg;
}
inline void CSReqBody::set_allocated_leavegameearly(::msg::CSReqLeaveGameEarly* leavegameearly) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leavegameearly_);
  }
  if (leavegameearly) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leavegameearly));
    if (message_arena != submessage_arena) {
      leavegameearly = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leavegameearly, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.leavegameearly_ = leavegameearly;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.LeaveGameEarly)
}

// .msg.CSReqGDCommonBin GDCommonBin = 566;
inline bool CSReqBody::_internal_has_gdcommonbin() const {
  return this != internal_default_instance() && _impl_.gdcommonbin_ != nullptr;
}
inline bool CSReqBody::has_gdcommonbin() const {
  return _internal_has_gdcommonbin();
}
inline const ::msg::CSReqGDCommonBin& CSReqBody::_internal_gdcommonbin() const {
  const ::msg::CSReqGDCommonBin* p = _impl_.gdcommonbin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGDCommonBin&>(
      ::msg::_CSReqGDCommonBin_default_instance_);
}
inline const ::msg::CSReqGDCommonBin& CSReqBody::gdcommonbin() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GDCommonBin)
  return _internal_gdcommonbin();
}
inline void CSReqBody::unsafe_arena_set_allocated_gdcommonbin(
    ::msg::CSReqGDCommonBin* gdcommonbin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gdcommonbin_);
  }
  _impl_.gdcommonbin_ = gdcommonbin;
  if (gdcommonbin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GDCommonBin)
}
inline ::msg::CSReqGDCommonBin* CSReqBody::release_gdcommonbin() {
  
  ::msg::CSReqGDCommonBin* temp = _impl_.gdcommonbin_;
  _impl_.gdcommonbin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGDCommonBin* CSReqBody::unsafe_arena_release_gdcommonbin() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GDCommonBin)
  
  ::msg::CSReqGDCommonBin* temp = _impl_.gdcommonbin_;
  _impl_.gdcommonbin_ = nullptr;
  return temp;
}
inline ::msg::CSReqGDCommonBin* CSReqBody::_internal_mutable_gdcommonbin() {
  
  if (_impl_.gdcommonbin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGDCommonBin>(GetArenaForAllocation());
    _impl_.gdcommonbin_ = p;
  }
  return _impl_.gdcommonbin_;
}
inline ::msg::CSReqGDCommonBin* CSReqBody::mutable_gdcommonbin() {
  ::msg::CSReqGDCommonBin* _msg = _internal_mutable_gdcommonbin();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GDCommonBin)
  return _msg;
}
inline void CSReqBody::set_allocated_gdcommonbin(::msg::CSReqGDCommonBin* gdcommonbin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gdcommonbin_);
  }
  if (gdcommonbin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gdcommonbin));
    if (message_arena != submessage_arena) {
      gdcommonbin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gdcommonbin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gdcommonbin_ = gdcommonbin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GDCommonBin)
}

// .msg.CSReqGDCommonBinData GDBinData = 567;
inline bool CSReqBody::_internal_has_gdbindata() const {
  return this != internal_default_instance() && _impl_.gdbindata_ != nullptr;
}
inline bool CSReqBody::has_gdbindata() const {
  return _internal_has_gdbindata();
}
inline const ::msg::CSReqGDCommonBinData& CSReqBody::_internal_gdbindata() const {
  const ::msg::CSReqGDCommonBinData* p = _impl_.gdbindata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGDCommonBinData&>(
      ::msg::_CSReqGDCommonBinData_default_instance_);
}
inline const ::msg::CSReqGDCommonBinData& CSReqBody::gdbindata() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GDBinData)
  return _internal_gdbindata();
}
inline void CSReqBody::unsafe_arena_set_allocated_gdbindata(
    ::msg::CSReqGDCommonBinData* gdbindata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gdbindata_);
  }
  _impl_.gdbindata_ = gdbindata;
  if (gdbindata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GDBinData)
}
inline ::msg::CSReqGDCommonBinData* CSReqBody::release_gdbindata() {
  
  ::msg::CSReqGDCommonBinData* temp = _impl_.gdbindata_;
  _impl_.gdbindata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGDCommonBinData* CSReqBody::unsafe_arena_release_gdbindata() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GDBinData)
  
  ::msg::CSReqGDCommonBinData* temp = _impl_.gdbindata_;
  _impl_.gdbindata_ = nullptr;
  return temp;
}
inline ::msg::CSReqGDCommonBinData* CSReqBody::_internal_mutable_gdbindata() {
  
  if (_impl_.gdbindata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGDCommonBinData>(GetArenaForAllocation());
    _impl_.gdbindata_ = p;
  }
  return _impl_.gdbindata_;
}
inline ::msg::CSReqGDCommonBinData* CSReqBody::mutable_gdbindata() {
  ::msg::CSReqGDCommonBinData* _msg = _internal_mutable_gdbindata();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GDBinData)
  return _msg;
}
inline void CSReqBody::set_allocated_gdbindata(::msg::CSReqGDCommonBinData* gdbindata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gdbindata_);
  }
  if (gdbindata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gdbindata));
    if (message_arena != submessage_arena) {
      gdbindata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gdbindata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gdbindata_ = gdbindata;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GDBinData)
}

// .msg.CSReqAutoBattleOP AutoBattleOP = 568;
inline bool CSReqBody::_internal_has_autobattleop() const {
  return this != internal_default_instance() && _impl_.autobattleop_ != nullptr;
}
inline bool CSReqBody::has_autobattleop() const {
  return _internal_has_autobattleop();
}
inline const ::msg::CSReqAutoBattleOP& CSReqBody::_internal_autobattleop() const {
  const ::msg::CSReqAutoBattleOP* p = _impl_.autobattleop_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqAutoBattleOP&>(
      ::msg::_CSReqAutoBattleOP_default_instance_);
}
inline const ::msg::CSReqAutoBattleOP& CSReqBody::autobattleop() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.AutoBattleOP)
  return _internal_autobattleop();
}
inline void CSReqBody::unsafe_arena_set_allocated_autobattleop(
    ::msg::CSReqAutoBattleOP* autobattleop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autobattleop_);
  }
  _impl_.autobattleop_ = autobattleop;
  if (autobattleop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.AutoBattleOP)
}
inline ::msg::CSReqAutoBattleOP* CSReqBody::release_autobattleop() {
  
  ::msg::CSReqAutoBattleOP* temp = _impl_.autobattleop_;
  _impl_.autobattleop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqAutoBattleOP* CSReqBody::unsafe_arena_release_autobattleop() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.AutoBattleOP)
  
  ::msg::CSReqAutoBattleOP* temp = _impl_.autobattleop_;
  _impl_.autobattleop_ = nullptr;
  return temp;
}
inline ::msg::CSReqAutoBattleOP* CSReqBody::_internal_mutable_autobattleop() {
  
  if (_impl_.autobattleop_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqAutoBattleOP>(GetArenaForAllocation());
    _impl_.autobattleop_ = p;
  }
  return _impl_.autobattleop_;
}
inline ::msg::CSReqAutoBattleOP* CSReqBody::mutable_autobattleop() {
  ::msg::CSReqAutoBattleOP* _msg = _internal_mutable_autobattleop();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.AutoBattleOP)
  return _msg;
}
inline void CSReqBody::set_allocated_autobattleop(::msg::CSReqAutoBattleOP* autobattleop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autobattleop_);
  }
  if (autobattleop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autobattleop));
    if (message_arena != submessage_arena) {
      autobattleop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autobattleop, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.autobattleop_ = autobattleop;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.AutoBattleOP)
}

// .msg.CSReqRestrictUser RestrictUser = 569;
inline bool CSReqBody::_internal_has_restrictuser() const {
  return this != internal_default_instance() && _impl_.restrictuser_ != nullptr;
}
inline bool CSReqBody::has_restrictuser() const {
  return _internal_has_restrictuser();
}
inline const ::msg::CSReqRestrictUser& CSReqBody::_internal_restrictuser() const {
  const ::msg::CSReqRestrictUser* p = _impl_.restrictuser_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRestrictUser&>(
      ::msg::_CSReqRestrictUser_default_instance_);
}
inline const ::msg::CSReqRestrictUser& CSReqBody::restrictuser() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RestrictUser)
  return _internal_restrictuser();
}
inline void CSReqBody::unsafe_arena_set_allocated_restrictuser(
    ::msg::CSReqRestrictUser* restrictuser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.restrictuser_);
  }
  _impl_.restrictuser_ = restrictuser;
  if (restrictuser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RestrictUser)
}
inline ::msg::CSReqRestrictUser* CSReqBody::release_restrictuser() {
  
  ::msg::CSReqRestrictUser* temp = _impl_.restrictuser_;
  _impl_.restrictuser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRestrictUser* CSReqBody::unsafe_arena_release_restrictuser() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RestrictUser)
  
  ::msg::CSReqRestrictUser* temp = _impl_.restrictuser_;
  _impl_.restrictuser_ = nullptr;
  return temp;
}
inline ::msg::CSReqRestrictUser* CSReqBody::_internal_mutable_restrictuser() {
  
  if (_impl_.restrictuser_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRestrictUser>(GetArenaForAllocation());
    _impl_.restrictuser_ = p;
  }
  return _impl_.restrictuser_;
}
inline ::msg::CSReqRestrictUser* CSReqBody::mutable_restrictuser() {
  ::msg::CSReqRestrictUser* _msg = _internal_mutable_restrictuser();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RestrictUser)
  return _msg;
}
inline void CSReqBody::set_allocated_restrictuser(::msg::CSReqRestrictUser* restrictuser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.restrictuser_);
  }
  if (restrictuser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(restrictuser));
    if (message_arena != submessage_arena) {
      restrictuser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restrictuser, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.restrictuser_ = restrictuser;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RestrictUser)
}

// .msg.CSReqEquipSelectRate EquipSelectRate = 570;
inline bool CSReqBody::_internal_has_equipselectrate() const {
  return this != internal_default_instance() && _impl_.equipselectrate_ != nullptr;
}
inline bool CSReqBody::has_equipselectrate() const {
  return _internal_has_equipselectrate();
}
inline const ::msg::CSReqEquipSelectRate& CSReqBody::_internal_equipselectrate() const {
  const ::msg::CSReqEquipSelectRate* p = _impl_.equipselectrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqEquipSelectRate&>(
      ::msg::_CSReqEquipSelectRate_default_instance_);
}
inline const ::msg::CSReqEquipSelectRate& CSReqBody::equipselectrate() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.EquipSelectRate)
  return _internal_equipselectrate();
}
inline void CSReqBody::unsafe_arena_set_allocated_equipselectrate(
    ::msg::CSReqEquipSelectRate* equipselectrate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.equipselectrate_);
  }
  _impl_.equipselectrate_ = equipselectrate;
  if (equipselectrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.EquipSelectRate)
}
inline ::msg::CSReqEquipSelectRate* CSReqBody::release_equipselectrate() {
  
  ::msg::CSReqEquipSelectRate* temp = _impl_.equipselectrate_;
  _impl_.equipselectrate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqEquipSelectRate* CSReqBody::unsafe_arena_release_equipselectrate() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.EquipSelectRate)
  
  ::msg::CSReqEquipSelectRate* temp = _impl_.equipselectrate_;
  _impl_.equipselectrate_ = nullptr;
  return temp;
}
inline ::msg::CSReqEquipSelectRate* CSReqBody::_internal_mutable_equipselectrate() {
  
  if (_impl_.equipselectrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqEquipSelectRate>(GetArenaForAllocation());
    _impl_.equipselectrate_ = p;
  }
  return _impl_.equipselectrate_;
}
inline ::msg::CSReqEquipSelectRate* CSReqBody::mutable_equipselectrate() {
  ::msg::CSReqEquipSelectRate* _msg = _internal_mutable_equipselectrate();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.EquipSelectRate)
  return _msg;
}
inline void CSReqBody::set_allocated_equipselectrate(::msg::CSReqEquipSelectRate* equipselectrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.equipselectrate_);
  }
  if (equipselectrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(equipselectrate));
    if (message_arena != submessage_arena) {
      equipselectrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equipselectrate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.equipselectrate_ = equipselectrate;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.EquipSelectRate)
}

// .msg.CSReqReportAbsent ReportAbsent = 571;
inline bool CSReqBody::_internal_has_reportabsent() const {
  return this != internal_default_instance() && _impl_.reportabsent_ != nullptr;
}
inline bool CSReqBody::has_reportabsent() const {
  return _internal_has_reportabsent();
}
inline const ::msg::CSReqReportAbsent& CSReqBody::_internal_reportabsent() const {
  const ::msg::CSReqReportAbsent* p = _impl_.reportabsent_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqReportAbsent&>(
      ::msg::_CSReqReportAbsent_default_instance_);
}
inline const ::msg::CSReqReportAbsent& CSReqBody::reportabsent() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ReportAbsent)
  return _internal_reportabsent();
}
inline void CSReqBody::unsafe_arena_set_allocated_reportabsent(
    ::msg::CSReqReportAbsent* reportabsent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportabsent_);
  }
  _impl_.reportabsent_ = reportabsent;
  if (reportabsent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ReportAbsent)
}
inline ::msg::CSReqReportAbsent* CSReqBody::release_reportabsent() {
  
  ::msg::CSReqReportAbsent* temp = _impl_.reportabsent_;
  _impl_.reportabsent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqReportAbsent* CSReqBody::unsafe_arena_release_reportabsent() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ReportAbsent)
  
  ::msg::CSReqReportAbsent* temp = _impl_.reportabsent_;
  _impl_.reportabsent_ = nullptr;
  return temp;
}
inline ::msg::CSReqReportAbsent* CSReqBody::_internal_mutable_reportabsent() {
  
  if (_impl_.reportabsent_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqReportAbsent>(GetArenaForAllocation());
    _impl_.reportabsent_ = p;
  }
  return _impl_.reportabsent_;
}
inline ::msg::CSReqReportAbsent* CSReqBody::mutable_reportabsent() {
  ::msg::CSReqReportAbsent* _msg = _internal_mutable_reportabsent();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ReportAbsent)
  return _msg;
}
inline void CSReqBody::set_allocated_reportabsent(::msg::CSReqReportAbsent* reportabsent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportabsent_);
  }
  if (reportabsent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reportabsent));
    if (message_arena != submessage_arena) {
      reportabsent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reportabsent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reportabsent_ = reportabsent;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ReportAbsent)
}

// .msg.CSReqRecommendWeek RecommendWeek = 600;
inline bool CSReqBody::_internal_has_recommendweek() const {
  return this != internal_default_instance() && _impl_.recommendweek_ != nullptr;
}
inline bool CSReqBody::has_recommendweek() const {
  return _internal_has_recommendweek();
}
inline const ::msg::CSReqRecommendWeek& CSReqBody::_internal_recommendweek() const {
  const ::msg::CSReqRecommendWeek* p = _impl_.recommendweek_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRecommendWeek&>(
      ::msg::_CSReqRecommendWeek_default_instance_);
}
inline const ::msg::CSReqRecommendWeek& CSReqBody::recommendweek() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RecommendWeek)
  return _internal_recommendweek();
}
inline void CSReqBody::unsafe_arena_set_allocated_recommendweek(
    ::msg::CSReqRecommendWeek* recommendweek) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendweek_);
  }
  _impl_.recommendweek_ = recommendweek;
  if (recommendweek) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RecommendWeek)
}
inline ::msg::CSReqRecommendWeek* CSReqBody::release_recommendweek() {
  
  ::msg::CSReqRecommendWeek* temp = _impl_.recommendweek_;
  _impl_.recommendweek_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRecommendWeek* CSReqBody::unsafe_arena_release_recommendweek() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RecommendWeek)
  
  ::msg::CSReqRecommendWeek* temp = _impl_.recommendweek_;
  _impl_.recommendweek_ = nullptr;
  return temp;
}
inline ::msg::CSReqRecommendWeek* CSReqBody::_internal_mutable_recommendweek() {
  
  if (_impl_.recommendweek_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRecommendWeek>(GetArenaForAllocation());
    _impl_.recommendweek_ = p;
  }
  return _impl_.recommendweek_;
}
inline ::msg::CSReqRecommendWeek* CSReqBody::mutable_recommendweek() {
  ::msg::CSReqRecommendWeek* _msg = _internal_mutable_recommendweek();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RecommendWeek)
  return _msg;
}
inline void CSReqBody::set_allocated_recommendweek(::msg::CSReqRecommendWeek* recommendweek) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendweek_);
  }
  if (recommendweek) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommendweek));
    if (message_arena != submessage_arena) {
      recommendweek = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommendweek, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recommendweek_ = recommendweek;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RecommendWeek)
}

// .msg.CSReqRecommendOfficial RecommendOfficial = 601;
inline bool CSReqBody::_internal_has_recommendofficial() const {
  return this != internal_default_instance() && _impl_.recommendofficial_ != nullptr;
}
inline bool CSReqBody::has_recommendofficial() const {
  return _internal_has_recommendofficial();
}
inline const ::msg::CSReqRecommendOfficial& CSReqBody::_internal_recommendofficial() const {
  const ::msg::CSReqRecommendOfficial* p = _impl_.recommendofficial_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRecommendOfficial&>(
      ::msg::_CSReqRecommendOfficial_default_instance_);
}
inline const ::msg::CSReqRecommendOfficial& CSReqBody::recommendofficial() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RecommendOfficial)
  return _internal_recommendofficial();
}
inline void CSReqBody::unsafe_arena_set_allocated_recommendofficial(
    ::msg::CSReqRecommendOfficial* recommendofficial) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendofficial_);
  }
  _impl_.recommendofficial_ = recommendofficial;
  if (recommendofficial) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RecommendOfficial)
}
inline ::msg::CSReqRecommendOfficial* CSReqBody::release_recommendofficial() {
  
  ::msg::CSReqRecommendOfficial* temp = _impl_.recommendofficial_;
  _impl_.recommendofficial_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRecommendOfficial* CSReqBody::unsafe_arena_release_recommendofficial() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RecommendOfficial)
  
  ::msg::CSReqRecommendOfficial* temp = _impl_.recommendofficial_;
  _impl_.recommendofficial_ = nullptr;
  return temp;
}
inline ::msg::CSReqRecommendOfficial* CSReqBody::_internal_mutable_recommendofficial() {
  
  if (_impl_.recommendofficial_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRecommendOfficial>(GetArenaForAllocation());
    _impl_.recommendofficial_ = p;
  }
  return _impl_.recommendofficial_;
}
inline ::msg::CSReqRecommendOfficial* CSReqBody::mutable_recommendofficial() {
  ::msg::CSReqRecommendOfficial* _msg = _internal_mutable_recommendofficial();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RecommendOfficial)
  return _msg;
}
inline void CSReqBody::set_allocated_recommendofficial(::msg::CSReqRecommendOfficial* recommendofficial) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendofficial_);
  }
  if (recommendofficial) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommendofficial));
    if (message_arena != submessage_arena) {
      recommendofficial = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommendofficial, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recommendofficial_ = recommendofficial;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RecommendOfficial)
}

// .msg.CSReqRecommendLatest RecommendLatest = 602;
inline bool CSReqBody::_internal_has_recommendlatest() const {
  return this != internal_default_instance() && _impl_.recommendlatest_ != nullptr;
}
inline bool CSReqBody::has_recommendlatest() const {
  return _internal_has_recommendlatest();
}
inline const ::msg::CSReqRecommendLatest& CSReqBody::_internal_recommendlatest() const {
  const ::msg::CSReqRecommendLatest* p = _impl_.recommendlatest_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRecommendLatest&>(
      ::msg::_CSReqRecommendLatest_default_instance_);
}
inline const ::msg::CSReqRecommendLatest& CSReqBody::recommendlatest() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RecommendLatest)
  return _internal_recommendlatest();
}
inline void CSReqBody::unsafe_arena_set_allocated_recommendlatest(
    ::msg::CSReqRecommendLatest* recommendlatest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendlatest_);
  }
  _impl_.recommendlatest_ = recommendlatest;
  if (recommendlatest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RecommendLatest)
}
inline ::msg::CSReqRecommendLatest* CSReqBody::release_recommendlatest() {
  
  ::msg::CSReqRecommendLatest* temp = _impl_.recommendlatest_;
  _impl_.recommendlatest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRecommendLatest* CSReqBody::unsafe_arena_release_recommendlatest() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RecommendLatest)
  
  ::msg::CSReqRecommendLatest* temp = _impl_.recommendlatest_;
  _impl_.recommendlatest_ = nullptr;
  return temp;
}
inline ::msg::CSReqRecommendLatest* CSReqBody::_internal_mutable_recommendlatest() {
  
  if (_impl_.recommendlatest_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRecommendLatest>(GetArenaForAllocation());
    _impl_.recommendlatest_ = p;
  }
  return _impl_.recommendlatest_;
}
inline ::msg::CSReqRecommendLatest* CSReqBody::mutable_recommendlatest() {
  ::msg::CSReqRecommendLatest* _msg = _internal_mutable_recommendlatest();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RecommendLatest)
  return _msg;
}
inline void CSReqBody::set_allocated_recommendlatest(::msg::CSReqRecommendLatest* recommendlatest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendlatest_);
  }
  if (recommendlatest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommendlatest));
    if (message_arena != submessage_arena) {
      recommendlatest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommendlatest, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recommendlatest_ = recommendlatest;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RecommendLatest)
}

// .msg.CSReqRecommendHistory RecommendHistory = 603;
inline bool CSReqBody::_internal_has_recommendhistory() const {
  return this != internal_default_instance() && _impl_.recommendhistory_ != nullptr;
}
inline bool CSReqBody::has_recommendhistory() const {
  return _internal_has_recommendhistory();
}
inline const ::msg::CSReqRecommendHistory& CSReqBody::_internal_recommendhistory() const {
  const ::msg::CSReqRecommendHistory* p = _impl_.recommendhistory_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRecommendHistory&>(
      ::msg::_CSReqRecommendHistory_default_instance_);
}
inline const ::msg::CSReqRecommendHistory& CSReqBody::recommendhistory() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RecommendHistory)
  return _internal_recommendhistory();
}
inline void CSReqBody::unsafe_arena_set_allocated_recommendhistory(
    ::msg::CSReqRecommendHistory* recommendhistory) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendhistory_);
  }
  _impl_.recommendhistory_ = recommendhistory;
  if (recommendhistory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RecommendHistory)
}
inline ::msg::CSReqRecommendHistory* CSReqBody::release_recommendhistory() {
  
  ::msg::CSReqRecommendHistory* temp = _impl_.recommendhistory_;
  _impl_.recommendhistory_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRecommendHistory* CSReqBody::unsafe_arena_release_recommendhistory() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RecommendHistory)
  
  ::msg::CSReqRecommendHistory* temp = _impl_.recommendhistory_;
  _impl_.recommendhistory_ = nullptr;
  return temp;
}
inline ::msg::CSReqRecommendHistory* CSReqBody::_internal_mutable_recommendhistory() {
  
  if (_impl_.recommendhistory_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRecommendHistory>(GetArenaForAllocation());
    _impl_.recommendhistory_ = p;
  }
  return _impl_.recommendhistory_;
}
inline ::msg::CSReqRecommendHistory* CSReqBody::mutable_recommendhistory() {
  ::msg::CSReqRecommendHistory* _msg = _internal_mutable_recommendhistory();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RecommendHistory)
  return _msg;
}
inline void CSReqBody::set_allocated_recommendhistory(::msg::CSReqRecommendHistory* recommendhistory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendhistory_);
  }
  if (recommendhistory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommendhistory));
    if (message_arena != submessage_arena) {
      recommendhistory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommendhistory, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recommendhistory_ = recommendhistory;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RecommendHistory)
}

// .msg.CSReqRecommendCollect RecommendCollect = 604;
inline bool CSReqBody::_internal_has_recommendcollect() const {
  return this != internal_default_instance() && _impl_.recommendcollect_ != nullptr;
}
inline bool CSReqBody::has_recommendcollect() const {
  return _internal_has_recommendcollect();
}
inline const ::msg::CSReqRecommendCollect& CSReqBody::_internal_recommendcollect() const {
  const ::msg::CSReqRecommendCollect* p = _impl_.recommendcollect_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRecommendCollect&>(
      ::msg::_CSReqRecommendCollect_default_instance_);
}
inline const ::msg::CSReqRecommendCollect& CSReqBody::recommendcollect() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RecommendCollect)
  return _internal_recommendcollect();
}
inline void CSReqBody::unsafe_arena_set_allocated_recommendcollect(
    ::msg::CSReqRecommendCollect* recommendcollect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendcollect_);
  }
  _impl_.recommendcollect_ = recommendcollect;
  if (recommendcollect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RecommendCollect)
}
inline ::msg::CSReqRecommendCollect* CSReqBody::release_recommendcollect() {
  
  ::msg::CSReqRecommendCollect* temp = _impl_.recommendcollect_;
  _impl_.recommendcollect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRecommendCollect* CSReqBody::unsafe_arena_release_recommendcollect() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RecommendCollect)
  
  ::msg::CSReqRecommendCollect* temp = _impl_.recommendcollect_;
  _impl_.recommendcollect_ = nullptr;
  return temp;
}
inline ::msg::CSReqRecommendCollect* CSReqBody::_internal_mutable_recommendcollect() {
  
  if (_impl_.recommendcollect_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRecommendCollect>(GetArenaForAllocation());
    _impl_.recommendcollect_ = p;
  }
  return _impl_.recommendcollect_;
}
inline ::msg::CSReqRecommendCollect* CSReqBody::mutable_recommendcollect() {
  ::msg::CSReqRecommendCollect* _msg = _internal_mutable_recommendcollect();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RecommendCollect)
  return _msg;
}
inline void CSReqBody::set_allocated_recommendcollect(::msg::CSReqRecommendCollect* recommendcollect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendcollect_);
  }
  if (recommendcollect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommendcollect));
    if (message_arena != submessage_arena) {
      recommendcollect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommendcollect, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recommendcollect_ = recommendcollect;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RecommendCollect)
}

// .msg.CSReqRecommendSet RecommendSet = 605;
inline bool CSReqBody::_internal_has_recommendset() const {
  return this != internal_default_instance() && _impl_.recommendset_ != nullptr;
}
inline bool CSReqBody::has_recommendset() const {
  return _internal_has_recommendset();
}
inline const ::msg::CSReqRecommendSet& CSReqBody::_internal_recommendset() const {
  const ::msg::CSReqRecommendSet* p = _impl_.recommendset_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRecommendSet&>(
      ::msg::_CSReqRecommendSet_default_instance_);
}
inline const ::msg::CSReqRecommendSet& CSReqBody::recommendset() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RecommendSet)
  return _internal_recommendset();
}
inline void CSReqBody::unsafe_arena_set_allocated_recommendset(
    ::msg::CSReqRecommendSet* recommendset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendset_);
  }
  _impl_.recommendset_ = recommendset;
  if (recommendset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RecommendSet)
}
inline ::msg::CSReqRecommendSet* CSReqBody::release_recommendset() {
  
  ::msg::CSReqRecommendSet* temp = _impl_.recommendset_;
  _impl_.recommendset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRecommendSet* CSReqBody::unsafe_arena_release_recommendset() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RecommendSet)
  
  ::msg::CSReqRecommendSet* temp = _impl_.recommendset_;
  _impl_.recommendset_ = nullptr;
  return temp;
}
inline ::msg::CSReqRecommendSet* CSReqBody::_internal_mutable_recommendset() {
  
  if (_impl_.recommendset_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRecommendSet>(GetArenaForAllocation());
    _impl_.recommendset_ = p;
  }
  return _impl_.recommendset_;
}
inline ::msg::CSReqRecommendSet* CSReqBody::mutable_recommendset() {
  ::msg::CSReqRecommendSet* _msg = _internal_mutable_recommendset();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RecommendSet)
  return _msg;
}
inline void CSReqBody::set_allocated_recommendset(::msg::CSReqRecommendSet* recommendset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendset_);
  }
  if (recommendset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommendset));
    if (message_arena != submessage_arena) {
      recommendset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommendset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recommendset_ = recommendset;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RecommendSet)
}

// .msg.CSReqRecommendGetCollection RecommendGetCollection = 606;
inline bool CSReqBody::_internal_has_recommendgetcollection() const {
  return this != internal_default_instance() && _impl_.recommendgetcollection_ != nullptr;
}
inline bool CSReqBody::has_recommendgetcollection() const {
  return _internal_has_recommendgetcollection();
}
inline const ::msg::CSReqRecommendGetCollection& CSReqBody::_internal_recommendgetcollection() const {
  const ::msg::CSReqRecommendGetCollection* p = _impl_.recommendgetcollection_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRecommendGetCollection&>(
      ::msg::_CSReqRecommendGetCollection_default_instance_);
}
inline const ::msg::CSReqRecommendGetCollection& CSReqBody::recommendgetcollection() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RecommendGetCollection)
  return _internal_recommendgetcollection();
}
inline void CSReqBody::unsafe_arena_set_allocated_recommendgetcollection(
    ::msg::CSReqRecommendGetCollection* recommendgetcollection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendgetcollection_);
  }
  _impl_.recommendgetcollection_ = recommendgetcollection;
  if (recommendgetcollection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RecommendGetCollection)
}
inline ::msg::CSReqRecommendGetCollection* CSReqBody::release_recommendgetcollection() {
  
  ::msg::CSReqRecommendGetCollection* temp = _impl_.recommendgetcollection_;
  _impl_.recommendgetcollection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRecommendGetCollection* CSReqBody::unsafe_arena_release_recommendgetcollection() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RecommendGetCollection)
  
  ::msg::CSReqRecommendGetCollection* temp = _impl_.recommendgetcollection_;
  _impl_.recommendgetcollection_ = nullptr;
  return temp;
}
inline ::msg::CSReqRecommendGetCollection* CSReqBody::_internal_mutable_recommendgetcollection() {
  
  if (_impl_.recommendgetcollection_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRecommendGetCollection>(GetArenaForAllocation());
    _impl_.recommendgetcollection_ = p;
  }
  return _impl_.recommendgetcollection_;
}
inline ::msg::CSReqRecommendGetCollection* CSReqBody::mutable_recommendgetcollection() {
  ::msg::CSReqRecommendGetCollection* _msg = _internal_mutable_recommendgetcollection();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RecommendGetCollection)
  return _msg;
}
inline void CSReqBody::set_allocated_recommendgetcollection(::msg::CSReqRecommendGetCollection* recommendgetcollection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendgetcollection_);
  }
  if (recommendgetcollection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommendgetcollection));
    if (message_arena != submessage_arena) {
      recommendgetcollection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommendgetcollection, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recommendgetcollection_ = recommendgetcollection;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RecommendGetCollection)
}

// .msg.CSReqRecommendEquip RecommendEquip = 607;
inline bool CSReqBody::_internal_has_recommendequip() const {
  return this != internal_default_instance() && _impl_.recommendequip_ != nullptr;
}
inline bool CSReqBody::has_recommendequip() const {
  return _internal_has_recommendequip();
}
inline const ::msg::CSReqRecommendEquip& CSReqBody::_internal_recommendequip() const {
  const ::msg::CSReqRecommendEquip* p = _impl_.recommendequip_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRecommendEquip&>(
      ::msg::_CSReqRecommendEquip_default_instance_);
}
inline const ::msg::CSReqRecommendEquip& CSReqBody::recommendequip() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RecommendEquip)
  return _internal_recommendequip();
}
inline void CSReqBody::unsafe_arena_set_allocated_recommendequip(
    ::msg::CSReqRecommendEquip* recommendequip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendequip_);
  }
  _impl_.recommendequip_ = recommendequip;
  if (recommendequip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RecommendEquip)
}
inline ::msg::CSReqRecommendEquip* CSReqBody::release_recommendequip() {
  
  ::msg::CSReqRecommendEquip* temp = _impl_.recommendequip_;
  _impl_.recommendequip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRecommendEquip* CSReqBody::unsafe_arena_release_recommendequip() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RecommendEquip)
  
  ::msg::CSReqRecommendEquip* temp = _impl_.recommendequip_;
  _impl_.recommendequip_ = nullptr;
  return temp;
}
inline ::msg::CSReqRecommendEquip* CSReqBody::_internal_mutable_recommendequip() {
  
  if (_impl_.recommendequip_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRecommendEquip>(GetArenaForAllocation());
    _impl_.recommendequip_ = p;
  }
  return _impl_.recommendequip_;
}
inline ::msg::CSReqRecommendEquip* CSReqBody::mutable_recommendequip() {
  ::msg::CSReqRecommendEquip* _msg = _internal_mutable_recommendequip();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RecommendEquip)
  return _msg;
}
inline void CSReqBody::set_allocated_recommendequip(::msg::CSReqRecommendEquip* recommendequip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendequip_);
  }
  if (recommendequip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommendequip));
    if (message_arena != submessage_arena) {
      recommendequip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommendequip, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recommendequip_ = recommendequip;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RecommendEquip)
}

// .msg.CSReqLoginCancel LoginCancel = 608;
inline bool CSReqBody::_internal_has_logincancel() const {
  return this != internal_default_instance() && _impl_.logincancel_ != nullptr;
}
inline bool CSReqBody::has_logincancel() const {
  return _internal_has_logincancel();
}
inline const ::msg::CSReqLoginCancel& CSReqBody::_internal_logincancel() const {
  const ::msg::CSReqLoginCancel* p = _impl_.logincancel_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqLoginCancel&>(
      ::msg::_CSReqLoginCancel_default_instance_);
}
inline const ::msg::CSReqLoginCancel& CSReqBody::logincancel() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.LoginCancel)
  return _internal_logincancel();
}
inline void CSReqBody::unsafe_arena_set_allocated_logincancel(
    ::msg::CSReqLoginCancel* logincancel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logincancel_);
  }
  _impl_.logincancel_ = logincancel;
  if (logincancel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.LoginCancel)
}
inline ::msg::CSReqLoginCancel* CSReqBody::release_logincancel() {
  
  ::msg::CSReqLoginCancel* temp = _impl_.logincancel_;
  _impl_.logincancel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqLoginCancel* CSReqBody::unsafe_arena_release_logincancel() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.LoginCancel)
  
  ::msg::CSReqLoginCancel* temp = _impl_.logincancel_;
  _impl_.logincancel_ = nullptr;
  return temp;
}
inline ::msg::CSReqLoginCancel* CSReqBody::_internal_mutable_logincancel() {
  
  if (_impl_.logincancel_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqLoginCancel>(GetArenaForAllocation());
    _impl_.logincancel_ = p;
  }
  return _impl_.logincancel_;
}
inline ::msg::CSReqLoginCancel* CSReqBody::mutable_logincancel() {
  ::msg::CSReqLoginCancel* _msg = _internal_mutable_logincancel();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.LoginCancel)
  return _msg;
}
inline void CSReqBody::set_allocated_logincancel(::msg::CSReqLoginCancel* logincancel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logincancel_);
  }
  if (logincancel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logincancel));
    if (message_arena != submessage_arena) {
      logincancel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logincancel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.logincancel_ = logincancel;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.LoginCancel)
}

// .msg.CSReqConvertDebris ConvertDebris = 609;
inline bool CSReqBody::_internal_has_convertdebris() const {
  return this != internal_default_instance() && _impl_.convertdebris_ != nullptr;
}
inline bool CSReqBody::has_convertdebris() const {
  return _internal_has_convertdebris();
}
inline const ::msg::CSReqConvertDebris& CSReqBody::_internal_convertdebris() const {
  const ::msg::CSReqConvertDebris* p = _impl_.convertdebris_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqConvertDebris&>(
      ::msg::_CSReqConvertDebris_default_instance_);
}
inline const ::msg::CSReqConvertDebris& CSReqBody::convertdebris() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ConvertDebris)
  return _internal_convertdebris();
}
inline void CSReqBody::unsafe_arena_set_allocated_convertdebris(
    ::msg::CSReqConvertDebris* convertdebris) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.convertdebris_);
  }
  _impl_.convertdebris_ = convertdebris;
  if (convertdebris) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ConvertDebris)
}
inline ::msg::CSReqConvertDebris* CSReqBody::release_convertdebris() {
  
  ::msg::CSReqConvertDebris* temp = _impl_.convertdebris_;
  _impl_.convertdebris_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqConvertDebris* CSReqBody::unsafe_arena_release_convertdebris() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ConvertDebris)
  
  ::msg::CSReqConvertDebris* temp = _impl_.convertdebris_;
  _impl_.convertdebris_ = nullptr;
  return temp;
}
inline ::msg::CSReqConvertDebris* CSReqBody::_internal_mutable_convertdebris() {
  
  if (_impl_.convertdebris_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqConvertDebris>(GetArenaForAllocation());
    _impl_.convertdebris_ = p;
  }
  return _impl_.convertdebris_;
}
inline ::msg::CSReqConvertDebris* CSReqBody::mutable_convertdebris() {
  ::msg::CSReqConvertDebris* _msg = _internal_mutable_convertdebris();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ConvertDebris)
  return _msg;
}
inline void CSReqBody::set_allocated_convertdebris(::msg::CSReqConvertDebris* convertdebris) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.convertdebris_);
  }
  if (convertdebris) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(convertdebris));
    if (message_arena != submessage_arena) {
      convertdebris = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convertdebris, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.convertdebris_ = convertdebris;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ConvertDebris)
}

// .msg.CSReqUseProtectionCard ProtectionCard = 610;
inline bool CSReqBody::_internal_has_protectioncard() const {
  return this != internal_default_instance() && _impl_.protectioncard_ != nullptr;
}
inline bool CSReqBody::has_protectioncard() const {
  return _internal_has_protectioncard();
}
inline const ::msg::CSReqUseProtectionCard& CSReqBody::_internal_protectioncard() const {
  const ::msg::CSReqUseProtectionCard* p = _impl_.protectioncard_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUseProtectionCard&>(
      ::msg::_CSReqUseProtectionCard_default_instance_);
}
inline const ::msg::CSReqUseProtectionCard& CSReqBody::protectioncard() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ProtectionCard)
  return _internal_protectioncard();
}
inline void CSReqBody::unsafe_arena_set_allocated_protectioncard(
    ::msg::CSReqUseProtectionCard* protectioncard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.protectioncard_);
  }
  _impl_.protectioncard_ = protectioncard;
  if (protectioncard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ProtectionCard)
}
inline ::msg::CSReqUseProtectionCard* CSReqBody::release_protectioncard() {
  
  ::msg::CSReqUseProtectionCard* temp = _impl_.protectioncard_;
  _impl_.protectioncard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUseProtectionCard* CSReqBody::unsafe_arena_release_protectioncard() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ProtectionCard)
  
  ::msg::CSReqUseProtectionCard* temp = _impl_.protectioncard_;
  _impl_.protectioncard_ = nullptr;
  return temp;
}
inline ::msg::CSReqUseProtectionCard* CSReqBody::_internal_mutable_protectioncard() {
  
  if (_impl_.protectioncard_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUseProtectionCard>(GetArenaForAllocation());
    _impl_.protectioncard_ = p;
  }
  return _impl_.protectioncard_;
}
inline ::msg::CSReqUseProtectionCard* CSReqBody::mutable_protectioncard() {
  ::msg::CSReqUseProtectionCard* _msg = _internal_mutable_protectioncard();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ProtectionCard)
  return _msg;
}
inline void CSReqBody::set_allocated_protectioncard(::msg::CSReqUseProtectionCard* protectioncard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.protectioncard_);
  }
  if (protectioncard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protectioncard));
    if (message_arena != submessage_arena) {
      protectioncard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protectioncard, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.protectioncard_ = protectioncard;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ProtectionCard)
}

// .msg.CSReqUsePassportCard UsePassportCard = 611;
inline bool CSReqBody::_internal_has_usepassportcard() const {
  return this != internal_default_instance() && _impl_.usepassportcard_ != nullptr;
}
inline bool CSReqBody::has_usepassportcard() const {
  return _internal_has_usepassportcard();
}
inline const ::msg::CSReqUsePassportCard& CSReqBody::_internal_usepassportcard() const {
  const ::msg::CSReqUsePassportCard* p = _impl_.usepassportcard_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUsePassportCard&>(
      ::msg::_CSReqUsePassportCard_default_instance_);
}
inline const ::msg::CSReqUsePassportCard& CSReqBody::usepassportcard() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UsePassportCard)
  return _internal_usepassportcard();
}
inline void CSReqBody::unsafe_arena_set_allocated_usepassportcard(
    ::msg::CSReqUsePassportCard* usepassportcard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usepassportcard_);
  }
  _impl_.usepassportcard_ = usepassportcard;
  if (usepassportcard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UsePassportCard)
}
inline ::msg::CSReqUsePassportCard* CSReqBody::release_usepassportcard() {
  
  ::msg::CSReqUsePassportCard* temp = _impl_.usepassportcard_;
  _impl_.usepassportcard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUsePassportCard* CSReqBody::unsafe_arena_release_usepassportcard() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UsePassportCard)
  
  ::msg::CSReqUsePassportCard* temp = _impl_.usepassportcard_;
  _impl_.usepassportcard_ = nullptr;
  return temp;
}
inline ::msg::CSReqUsePassportCard* CSReqBody::_internal_mutable_usepassportcard() {
  
  if (_impl_.usepassportcard_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUsePassportCard>(GetArenaForAllocation());
    _impl_.usepassportcard_ = p;
  }
  return _impl_.usepassportcard_;
}
inline ::msg::CSReqUsePassportCard* CSReqBody::mutable_usepassportcard() {
  ::msg::CSReqUsePassportCard* _msg = _internal_mutable_usepassportcard();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UsePassportCard)
  return _msg;
}
inline void CSReqBody::set_allocated_usepassportcard(::msg::CSReqUsePassportCard* usepassportcard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usepassportcard_);
  }
  if (usepassportcard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usepassportcard));
    if (message_arena != submessage_arena) {
      usepassportcard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usepassportcard, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.usepassportcard_ = usepassportcard;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UsePassportCard)
}

// .msg.CSReqSetMedal SetMedal = 612;
inline bool CSReqBody::_internal_has_setmedal() const {
  return this != internal_default_instance() && _impl_.setmedal_ != nullptr;
}
inline bool CSReqBody::has_setmedal() const {
  return _internal_has_setmedal();
}
inline const ::msg::CSReqSetMedal& CSReqBody::_internal_setmedal() const {
  const ::msg::CSReqSetMedal* p = _impl_.setmedal_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSetMedal&>(
      ::msg::_CSReqSetMedal_default_instance_);
}
inline const ::msg::CSReqSetMedal& CSReqBody::setmedal() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SetMedal)
  return _internal_setmedal();
}
inline void CSReqBody::unsafe_arena_set_allocated_setmedal(
    ::msg::CSReqSetMedal* setmedal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setmedal_);
  }
  _impl_.setmedal_ = setmedal;
  if (setmedal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SetMedal)
}
inline ::msg::CSReqSetMedal* CSReqBody::release_setmedal() {
  
  ::msg::CSReqSetMedal* temp = _impl_.setmedal_;
  _impl_.setmedal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSetMedal* CSReqBody::unsafe_arena_release_setmedal() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SetMedal)
  
  ::msg::CSReqSetMedal* temp = _impl_.setmedal_;
  _impl_.setmedal_ = nullptr;
  return temp;
}
inline ::msg::CSReqSetMedal* CSReqBody::_internal_mutable_setmedal() {
  
  if (_impl_.setmedal_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSetMedal>(GetArenaForAllocation());
    _impl_.setmedal_ = p;
  }
  return _impl_.setmedal_;
}
inline ::msg::CSReqSetMedal* CSReqBody::mutable_setmedal() {
  ::msg::CSReqSetMedal* _msg = _internal_mutable_setmedal();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SetMedal)
  return _msg;
}
inline void CSReqBody::set_allocated_setmedal(::msg::CSReqSetMedal* setmedal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setmedal_);
  }
  if (setmedal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setmedal));
    if (message_arena != submessage_arena) {
      setmedal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setmedal, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setmedal_ = setmedal;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SetMedal)
}

// .msg.CSReqUnSetMedal UnSetMedal = 613;
inline bool CSReqBody::_internal_has_unsetmedal() const {
  return this != internal_default_instance() && _impl_.unsetmedal_ != nullptr;
}
inline bool CSReqBody::has_unsetmedal() const {
  return _internal_has_unsetmedal();
}
inline const ::msg::CSReqUnSetMedal& CSReqBody::_internal_unsetmedal() const {
  const ::msg::CSReqUnSetMedal* p = _impl_.unsetmedal_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUnSetMedal&>(
      ::msg::_CSReqUnSetMedal_default_instance_);
}
inline const ::msg::CSReqUnSetMedal& CSReqBody::unsetmedal() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UnSetMedal)
  return _internal_unsetmedal();
}
inline void CSReqBody::unsafe_arena_set_allocated_unsetmedal(
    ::msg::CSReqUnSetMedal* unsetmedal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetmedal_);
  }
  _impl_.unsetmedal_ = unsetmedal;
  if (unsetmedal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UnSetMedal)
}
inline ::msg::CSReqUnSetMedal* CSReqBody::release_unsetmedal() {
  
  ::msg::CSReqUnSetMedal* temp = _impl_.unsetmedal_;
  _impl_.unsetmedal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUnSetMedal* CSReqBody::unsafe_arena_release_unsetmedal() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UnSetMedal)
  
  ::msg::CSReqUnSetMedal* temp = _impl_.unsetmedal_;
  _impl_.unsetmedal_ = nullptr;
  return temp;
}
inline ::msg::CSReqUnSetMedal* CSReqBody::_internal_mutable_unsetmedal() {
  
  if (_impl_.unsetmedal_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUnSetMedal>(GetArenaForAllocation());
    _impl_.unsetmedal_ = p;
  }
  return _impl_.unsetmedal_;
}
inline ::msg::CSReqUnSetMedal* CSReqBody::mutable_unsetmedal() {
  ::msg::CSReqUnSetMedal* _msg = _internal_mutable_unsetmedal();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UnSetMedal)
  return _msg;
}
inline void CSReqBody::set_allocated_unsetmedal(::msg::CSReqUnSetMedal* unsetmedal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetmedal_);
  }
  if (unsetmedal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unsetmedal));
    if (message_arena != submessage_arena) {
      unsetmedal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsetmedal, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unsetmedal_ = unsetmedal;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UnSetMedal)
}

// .msg.CSReqPlayerMedals PlayerMedals = 614;
inline bool CSReqBody::_internal_has_playermedals() const {
  return this != internal_default_instance() && _impl_.playermedals_ != nullptr;
}
inline bool CSReqBody::has_playermedals() const {
  return _internal_has_playermedals();
}
inline const ::msg::CSReqPlayerMedals& CSReqBody::_internal_playermedals() const {
  const ::msg::CSReqPlayerMedals* p = _impl_.playermedals_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPlayerMedals&>(
      ::msg::_CSReqPlayerMedals_default_instance_);
}
inline const ::msg::CSReqPlayerMedals& CSReqBody::playermedals() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PlayerMedals)
  return _internal_playermedals();
}
inline void CSReqBody::unsafe_arena_set_allocated_playermedals(
    ::msg::CSReqPlayerMedals* playermedals) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playermedals_);
  }
  _impl_.playermedals_ = playermedals;
  if (playermedals) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PlayerMedals)
}
inline ::msg::CSReqPlayerMedals* CSReqBody::release_playermedals() {
  
  ::msg::CSReqPlayerMedals* temp = _impl_.playermedals_;
  _impl_.playermedals_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPlayerMedals* CSReqBody::unsafe_arena_release_playermedals() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PlayerMedals)
  
  ::msg::CSReqPlayerMedals* temp = _impl_.playermedals_;
  _impl_.playermedals_ = nullptr;
  return temp;
}
inline ::msg::CSReqPlayerMedals* CSReqBody::_internal_mutable_playermedals() {
  
  if (_impl_.playermedals_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPlayerMedals>(GetArenaForAllocation());
    _impl_.playermedals_ = p;
  }
  return _impl_.playermedals_;
}
inline ::msg::CSReqPlayerMedals* CSReqBody::mutable_playermedals() {
  ::msg::CSReqPlayerMedals* _msg = _internal_mutable_playermedals();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PlayerMedals)
  return _msg;
}
inline void CSReqBody::set_allocated_playermedals(::msg::CSReqPlayerMedals* playermedals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playermedals_);
  }
  if (playermedals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playermedals));
    if (message_arena != submessage_arena) {
      playermedals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playermedals, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playermedals_ = playermedals;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PlayerMedals)
}

// .msg.CSReqUpdateHotDot UpdateHotDot = 615;
inline bool CSReqBody::_internal_has_updatehotdot() const {
  return this != internal_default_instance() && _impl_.updatehotdot_ != nullptr;
}
inline bool CSReqBody::has_updatehotdot() const {
  return _internal_has_updatehotdot();
}
inline const ::msg::CSReqUpdateHotDot& CSReqBody::_internal_updatehotdot() const {
  const ::msg::CSReqUpdateHotDot* p = _impl_.updatehotdot_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUpdateHotDot&>(
      ::msg::_CSReqUpdateHotDot_default_instance_);
}
inline const ::msg::CSReqUpdateHotDot& CSReqBody::updatehotdot() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UpdateHotDot)
  return _internal_updatehotdot();
}
inline void CSReqBody::unsafe_arena_set_allocated_updatehotdot(
    ::msg::CSReqUpdateHotDot* updatehotdot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatehotdot_);
  }
  _impl_.updatehotdot_ = updatehotdot;
  if (updatehotdot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UpdateHotDot)
}
inline ::msg::CSReqUpdateHotDot* CSReqBody::release_updatehotdot() {
  
  ::msg::CSReqUpdateHotDot* temp = _impl_.updatehotdot_;
  _impl_.updatehotdot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUpdateHotDot* CSReqBody::unsafe_arena_release_updatehotdot() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UpdateHotDot)
  
  ::msg::CSReqUpdateHotDot* temp = _impl_.updatehotdot_;
  _impl_.updatehotdot_ = nullptr;
  return temp;
}
inline ::msg::CSReqUpdateHotDot* CSReqBody::_internal_mutable_updatehotdot() {
  
  if (_impl_.updatehotdot_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUpdateHotDot>(GetArenaForAllocation());
    _impl_.updatehotdot_ = p;
  }
  return _impl_.updatehotdot_;
}
inline ::msg::CSReqUpdateHotDot* CSReqBody::mutable_updatehotdot() {
  ::msg::CSReqUpdateHotDot* _msg = _internal_mutable_updatehotdot();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UpdateHotDot)
  return _msg;
}
inline void CSReqBody::set_allocated_updatehotdot(::msg::CSReqUpdateHotDot* updatehotdot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatehotdot_);
  }
  if (updatehotdot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatehotdot));
    if (message_arena != submessage_arena) {
      updatehotdot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatehotdot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updatehotdot_ = updatehotdot;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UpdateHotDot)
}

// .msg.CSReqQueryHotDot QueryHotDot = 616;
inline bool CSReqBody::_internal_has_queryhotdot() const {
  return this != internal_default_instance() && _impl_.queryhotdot_ != nullptr;
}
inline bool CSReqBody::has_queryhotdot() const {
  return _internal_has_queryhotdot();
}
inline const ::msg::CSReqQueryHotDot& CSReqBody::_internal_queryhotdot() const {
  const ::msg::CSReqQueryHotDot* p = _impl_.queryhotdot_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqQueryHotDot&>(
      ::msg::_CSReqQueryHotDot_default_instance_);
}
inline const ::msg::CSReqQueryHotDot& CSReqBody::queryhotdot() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.QueryHotDot)
  return _internal_queryhotdot();
}
inline void CSReqBody::unsafe_arena_set_allocated_queryhotdot(
    ::msg::CSReqQueryHotDot* queryhotdot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.queryhotdot_);
  }
  _impl_.queryhotdot_ = queryhotdot;
  if (queryhotdot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.QueryHotDot)
}
inline ::msg::CSReqQueryHotDot* CSReqBody::release_queryhotdot() {
  
  ::msg::CSReqQueryHotDot* temp = _impl_.queryhotdot_;
  _impl_.queryhotdot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqQueryHotDot* CSReqBody::unsafe_arena_release_queryhotdot() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.QueryHotDot)
  
  ::msg::CSReqQueryHotDot* temp = _impl_.queryhotdot_;
  _impl_.queryhotdot_ = nullptr;
  return temp;
}
inline ::msg::CSReqQueryHotDot* CSReqBody::_internal_mutable_queryhotdot() {
  
  if (_impl_.queryhotdot_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqQueryHotDot>(GetArenaForAllocation());
    _impl_.queryhotdot_ = p;
  }
  return _impl_.queryhotdot_;
}
inline ::msg::CSReqQueryHotDot* CSReqBody::mutable_queryhotdot() {
  ::msg::CSReqQueryHotDot* _msg = _internal_mutable_queryhotdot();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.QueryHotDot)
  return _msg;
}
inline void CSReqBody::set_allocated_queryhotdot(::msg::CSReqQueryHotDot* queryhotdot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.queryhotdot_);
  }
  if (queryhotdot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(queryhotdot));
    if (message_arena != submessage_arena) {
      queryhotdot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queryhotdot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.queryhotdot_ = queryhotdot;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.QueryHotDot)
}

// .msg.CSReqSetCache SetCache = 617;
inline bool CSReqBody::_internal_has_setcache() const {
  return this != internal_default_instance() && _impl_.setcache_ != nullptr;
}
inline bool CSReqBody::has_setcache() const {
  return _internal_has_setcache();
}
inline const ::msg::CSReqSetCache& CSReqBody::_internal_setcache() const {
  const ::msg::CSReqSetCache* p = _impl_.setcache_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSetCache&>(
      ::msg::_CSReqSetCache_default_instance_);
}
inline const ::msg::CSReqSetCache& CSReqBody::setcache() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SetCache)
  return _internal_setcache();
}
inline void CSReqBody::unsafe_arena_set_allocated_setcache(
    ::msg::CSReqSetCache* setcache) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setcache_);
  }
  _impl_.setcache_ = setcache;
  if (setcache) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SetCache)
}
inline ::msg::CSReqSetCache* CSReqBody::release_setcache() {
  
  ::msg::CSReqSetCache* temp = _impl_.setcache_;
  _impl_.setcache_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSetCache* CSReqBody::unsafe_arena_release_setcache() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SetCache)
  
  ::msg::CSReqSetCache* temp = _impl_.setcache_;
  _impl_.setcache_ = nullptr;
  return temp;
}
inline ::msg::CSReqSetCache* CSReqBody::_internal_mutable_setcache() {
  
  if (_impl_.setcache_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSetCache>(GetArenaForAllocation());
    _impl_.setcache_ = p;
  }
  return _impl_.setcache_;
}
inline ::msg::CSReqSetCache* CSReqBody::mutable_setcache() {
  ::msg::CSReqSetCache* _msg = _internal_mutable_setcache();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SetCache)
  return _msg;
}
inline void CSReqBody::set_allocated_setcache(::msg::CSReqSetCache* setcache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setcache_);
  }
  if (setcache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setcache));
    if (message_arena != submessage_arena) {
      setcache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setcache, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setcache_ = setcache;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SetCache)
}

// .msg.CSReqGetCache GetCache = 618;
inline bool CSReqBody::_internal_has_getcache() const {
  return this != internal_default_instance() && _impl_.getcache_ != nullptr;
}
inline bool CSReqBody::has_getcache() const {
  return _internal_has_getcache();
}
inline const ::msg::CSReqGetCache& CSReqBody::_internal_getcache() const {
  const ::msg::CSReqGetCache* p = _impl_.getcache_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetCache&>(
      ::msg::_CSReqGetCache_default_instance_);
}
inline const ::msg::CSReqGetCache& CSReqBody::getcache() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetCache)
  return _internal_getcache();
}
inline void CSReqBody::unsafe_arena_set_allocated_getcache(
    ::msg::CSReqGetCache* getcache) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getcache_);
  }
  _impl_.getcache_ = getcache;
  if (getcache) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetCache)
}
inline ::msg::CSReqGetCache* CSReqBody::release_getcache() {
  
  ::msg::CSReqGetCache* temp = _impl_.getcache_;
  _impl_.getcache_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetCache* CSReqBody::unsafe_arena_release_getcache() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetCache)
  
  ::msg::CSReqGetCache* temp = _impl_.getcache_;
  _impl_.getcache_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetCache* CSReqBody::_internal_mutable_getcache() {
  
  if (_impl_.getcache_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetCache>(GetArenaForAllocation());
    _impl_.getcache_ = p;
  }
  return _impl_.getcache_;
}
inline ::msg::CSReqGetCache* CSReqBody::mutable_getcache() {
  ::msg::CSReqGetCache* _msg = _internal_mutable_getcache();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetCache)
  return _msg;
}
inline void CSReqBody::set_allocated_getcache(::msg::CSReqGetCache* getcache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getcache_);
  }
  if (getcache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getcache));
    if (message_arena != submessage_arena) {
      getcache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getcache, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getcache_ = getcache;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetCache)
}

// .msg.CSReqBuyChallengeCount BuyChallengeCount = 619;
inline bool CSReqBody::_internal_has_buychallengecount() const {
  return this != internal_default_instance() && _impl_.buychallengecount_ != nullptr;
}
inline bool CSReqBody::has_buychallengecount() const {
  return _internal_has_buychallengecount();
}
inline const ::msg::CSReqBuyChallengeCount& CSReqBody::_internal_buychallengecount() const {
  const ::msg::CSReqBuyChallengeCount* p = _impl_.buychallengecount_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqBuyChallengeCount&>(
      ::msg::_CSReqBuyChallengeCount_default_instance_);
}
inline const ::msg::CSReqBuyChallengeCount& CSReqBody::buychallengecount() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.BuyChallengeCount)
  return _internal_buychallengecount();
}
inline void CSReqBody::unsafe_arena_set_allocated_buychallengecount(
    ::msg::CSReqBuyChallengeCount* buychallengecount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buychallengecount_);
  }
  _impl_.buychallengecount_ = buychallengecount;
  if (buychallengecount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.BuyChallengeCount)
}
inline ::msg::CSReqBuyChallengeCount* CSReqBody::release_buychallengecount() {
  
  ::msg::CSReqBuyChallengeCount* temp = _impl_.buychallengecount_;
  _impl_.buychallengecount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqBuyChallengeCount* CSReqBody::unsafe_arena_release_buychallengecount() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.BuyChallengeCount)
  
  ::msg::CSReqBuyChallengeCount* temp = _impl_.buychallengecount_;
  _impl_.buychallengecount_ = nullptr;
  return temp;
}
inline ::msg::CSReqBuyChallengeCount* CSReqBody::_internal_mutable_buychallengecount() {
  
  if (_impl_.buychallengecount_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqBuyChallengeCount>(GetArenaForAllocation());
    _impl_.buychallengecount_ = p;
  }
  return _impl_.buychallengecount_;
}
inline ::msg::CSReqBuyChallengeCount* CSReqBody::mutable_buychallengecount() {
  ::msg::CSReqBuyChallengeCount* _msg = _internal_mutable_buychallengecount();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.BuyChallengeCount)
  return _msg;
}
inline void CSReqBody::set_allocated_buychallengecount(::msg::CSReqBuyChallengeCount* buychallengecount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buychallengecount_);
  }
  if (buychallengecount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buychallengecount));
    if (message_arena != submessage_arena) {
      buychallengecount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buychallengecount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buychallengecount_ = buychallengecount;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.BuyChallengeCount)
}

// .msg.CSReqGetPveRank GetPveRank = 620;
inline bool CSReqBody::_internal_has_getpverank() const {
  return this != internal_default_instance() && _impl_.getpverank_ != nullptr;
}
inline bool CSReqBody::has_getpverank() const {
  return _internal_has_getpverank();
}
inline const ::msg::CSReqGetPveRank& CSReqBody::_internal_getpverank() const {
  const ::msg::CSReqGetPveRank* p = _impl_.getpverank_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetPveRank&>(
      ::msg::_CSReqGetPveRank_default_instance_);
}
inline const ::msg::CSReqGetPveRank& CSReqBody::getpverank() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetPveRank)
  return _internal_getpverank();
}
inline void CSReqBody::unsafe_arena_set_allocated_getpverank(
    ::msg::CSReqGetPveRank* getpverank) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getpverank_);
  }
  _impl_.getpverank_ = getpverank;
  if (getpverank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetPveRank)
}
inline ::msg::CSReqGetPveRank* CSReqBody::release_getpverank() {
  
  ::msg::CSReqGetPveRank* temp = _impl_.getpverank_;
  _impl_.getpverank_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetPveRank* CSReqBody::unsafe_arena_release_getpverank() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetPveRank)
  
  ::msg::CSReqGetPveRank* temp = _impl_.getpverank_;
  _impl_.getpverank_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetPveRank* CSReqBody::_internal_mutable_getpverank() {
  
  if (_impl_.getpverank_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetPveRank>(GetArenaForAllocation());
    _impl_.getpverank_ = p;
  }
  return _impl_.getpverank_;
}
inline ::msg::CSReqGetPveRank* CSReqBody::mutable_getpverank() {
  ::msg::CSReqGetPveRank* _msg = _internal_mutable_getpverank();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetPveRank)
  return _msg;
}
inline void CSReqBody::set_allocated_getpverank(::msg::CSReqGetPveRank* getpverank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getpverank_);
  }
  if (getpverank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getpverank));
    if (message_arena != submessage_arena) {
      getpverank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getpverank, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getpverank_ = getpverank;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetPveRank)
}

// .msg.CSReqLogin AuthAccount = 621;
inline bool CSReqBody::_internal_has_authaccount() const {
  return this != internal_default_instance() && _impl_.authaccount_ != nullptr;
}
inline bool CSReqBody::has_authaccount() const {
  return _internal_has_authaccount();
}
inline const ::msg::CSReqLogin& CSReqBody::_internal_authaccount() const {
  const ::msg::CSReqLogin* p = _impl_.authaccount_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqLogin&>(
      ::msg::_CSReqLogin_default_instance_);
}
inline const ::msg::CSReqLogin& CSReqBody::authaccount() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.AuthAccount)
  return _internal_authaccount();
}
inline void CSReqBody::unsafe_arena_set_allocated_authaccount(
    ::msg::CSReqLogin* authaccount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.authaccount_);
  }
  _impl_.authaccount_ = authaccount;
  if (authaccount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.AuthAccount)
}
inline ::msg::CSReqLogin* CSReqBody::release_authaccount() {
  
  ::msg::CSReqLogin* temp = _impl_.authaccount_;
  _impl_.authaccount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqLogin* CSReqBody::unsafe_arena_release_authaccount() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.AuthAccount)
  
  ::msg::CSReqLogin* temp = _impl_.authaccount_;
  _impl_.authaccount_ = nullptr;
  return temp;
}
inline ::msg::CSReqLogin* CSReqBody::_internal_mutable_authaccount() {
  
  if (_impl_.authaccount_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqLogin>(GetArenaForAllocation());
    _impl_.authaccount_ = p;
  }
  return _impl_.authaccount_;
}
inline ::msg::CSReqLogin* CSReqBody::mutable_authaccount() {
  ::msg::CSReqLogin* _msg = _internal_mutable_authaccount();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.AuthAccount)
  return _msg;
}
inline void CSReqBody::set_allocated_authaccount(::msg::CSReqLogin* authaccount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.authaccount_);
  }
  if (authaccount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authaccount));
    if (message_arena != submessage_arena) {
      authaccount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authaccount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.authaccount_ = authaccount;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.AuthAccount)
}

// .msg.CSReqUnbindAccount UnbindAccount = 622;
inline bool CSReqBody::_internal_has_unbindaccount() const {
  return this != internal_default_instance() && _impl_.unbindaccount_ != nullptr;
}
inline bool CSReqBody::has_unbindaccount() const {
  return _internal_has_unbindaccount();
}
inline const ::msg::CSReqUnbindAccount& CSReqBody::_internal_unbindaccount() const {
  const ::msg::CSReqUnbindAccount* p = _impl_.unbindaccount_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUnbindAccount&>(
      ::msg::_CSReqUnbindAccount_default_instance_);
}
inline const ::msg::CSReqUnbindAccount& CSReqBody::unbindaccount() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UnbindAccount)
  return _internal_unbindaccount();
}
inline void CSReqBody::unsafe_arena_set_allocated_unbindaccount(
    ::msg::CSReqUnbindAccount* unbindaccount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unbindaccount_);
  }
  _impl_.unbindaccount_ = unbindaccount;
  if (unbindaccount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UnbindAccount)
}
inline ::msg::CSReqUnbindAccount* CSReqBody::release_unbindaccount() {
  
  ::msg::CSReqUnbindAccount* temp = _impl_.unbindaccount_;
  _impl_.unbindaccount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUnbindAccount* CSReqBody::unsafe_arena_release_unbindaccount() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UnbindAccount)
  
  ::msg::CSReqUnbindAccount* temp = _impl_.unbindaccount_;
  _impl_.unbindaccount_ = nullptr;
  return temp;
}
inline ::msg::CSReqUnbindAccount* CSReqBody::_internal_mutable_unbindaccount() {
  
  if (_impl_.unbindaccount_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUnbindAccount>(GetArenaForAllocation());
    _impl_.unbindaccount_ = p;
  }
  return _impl_.unbindaccount_;
}
inline ::msg::CSReqUnbindAccount* CSReqBody::mutable_unbindaccount() {
  ::msg::CSReqUnbindAccount* _msg = _internal_mutable_unbindaccount();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UnbindAccount)
  return _msg;
}
inline void CSReqBody::set_allocated_unbindaccount(::msg::CSReqUnbindAccount* unbindaccount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unbindaccount_);
  }
  if (unbindaccount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unbindaccount));
    if (message_arena != submessage_arena) {
      unbindaccount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unbindaccount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unbindaccount_ = unbindaccount;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UnbindAccount)
}

// .msg.CSReqBagToItem BagToItem = 623;
inline bool CSReqBody::_internal_has_bagtoitem() const {
  return this != internal_default_instance() && _impl_.bagtoitem_ != nullptr;
}
inline bool CSReqBody::has_bagtoitem() const {
  return _internal_has_bagtoitem();
}
inline const ::msg::CSReqBagToItem& CSReqBody::_internal_bagtoitem() const {
  const ::msg::CSReqBagToItem* p = _impl_.bagtoitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqBagToItem&>(
      ::msg::_CSReqBagToItem_default_instance_);
}
inline const ::msg::CSReqBagToItem& CSReqBody::bagtoitem() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.BagToItem)
  return _internal_bagtoitem();
}
inline void CSReqBody::unsafe_arena_set_allocated_bagtoitem(
    ::msg::CSReqBagToItem* bagtoitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bagtoitem_);
  }
  _impl_.bagtoitem_ = bagtoitem;
  if (bagtoitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.BagToItem)
}
inline ::msg::CSReqBagToItem* CSReqBody::release_bagtoitem() {
  
  ::msg::CSReqBagToItem* temp = _impl_.bagtoitem_;
  _impl_.bagtoitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqBagToItem* CSReqBody::unsafe_arena_release_bagtoitem() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.BagToItem)
  
  ::msg::CSReqBagToItem* temp = _impl_.bagtoitem_;
  _impl_.bagtoitem_ = nullptr;
  return temp;
}
inline ::msg::CSReqBagToItem* CSReqBody::_internal_mutable_bagtoitem() {
  
  if (_impl_.bagtoitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqBagToItem>(GetArenaForAllocation());
    _impl_.bagtoitem_ = p;
  }
  return _impl_.bagtoitem_;
}
inline ::msg::CSReqBagToItem* CSReqBody::mutable_bagtoitem() {
  ::msg::CSReqBagToItem* _msg = _internal_mutable_bagtoitem();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.BagToItem)
  return _msg;
}
inline void CSReqBody::set_allocated_bagtoitem(::msg::CSReqBagToItem* bagtoitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bagtoitem_);
  }
  if (bagtoitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bagtoitem));
    if (message_arena != submessage_arena) {
      bagtoitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bagtoitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bagtoitem_ = bagtoitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.BagToItem)
}

// .msg.CSReqIdentifyItem IdentifyItem = 624;
inline bool CSReqBody::_internal_has_identifyitem() const {
  return this != internal_default_instance() && _impl_.identifyitem_ != nullptr;
}
inline bool CSReqBody::has_identifyitem() const {
  return _internal_has_identifyitem();
}
inline const ::msg::CSReqIdentifyItem& CSReqBody::_internal_identifyitem() const {
  const ::msg::CSReqIdentifyItem* p = _impl_.identifyitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqIdentifyItem&>(
      ::msg::_CSReqIdentifyItem_default_instance_);
}
inline const ::msg::CSReqIdentifyItem& CSReqBody::identifyitem() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.IdentifyItem)
  return _internal_identifyitem();
}
inline void CSReqBody::unsafe_arena_set_allocated_identifyitem(
    ::msg::CSReqIdentifyItem* identifyitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifyitem_);
  }
  _impl_.identifyitem_ = identifyitem;
  if (identifyitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.IdentifyItem)
}
inline ::msg::CSReqIdentifyItem* CSReqBody::release_identifyitem() {
  
  ::msg::CSReqIdentifyItem* temp = _impl_.identifyitem_;
  _impl_.identifyitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqIdentifyItem* CSReqBody::unsafe_arena_release_identifyitem() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.IdentifyItem)
  
  ::msg::CSReqIdentifyItem* temp = _impl_.identifyitem_;
  _impl_.identifyitem_ = nullptr;
  return temp;
}
inline ::msg::CSReqIdentifyItem* CSReqBody::_internal_mutable_identifyitem() {
  
  if (_impl_.identifyitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqIdentifyItem>(GetArenaForAllocation());
    _impl_.identifyitem_ = p;
  }
  return _impl_.identifyitem_;
}
inline ::msg::CSReqIdentifyItem* CSReqBody::mutable_identifyitem() {
  ::msg::CSReqIdentifyItem* _msg = _internal_mutable_identifyitem();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.IdentifyItem)
  return _msg;
}
inline void CSReqBody::set_allocated_identifyitem(::msg::CSReqIdentifyItem* identifyitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifyitem_);
  }
  if (identifyitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifyitem));
    if (message_arena != submessage_arena) {
      identifyitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifyitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.identifyitem_ = identifyitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.IdentifyItem)
}

// .msg.CSReqInsetItemAffix InsetItemAffix = 625;
inline bool CSReqBody::_internal_has_insetitemaffix() const {
  return this != internal_default_instance() && _impl_.insetitemaffix_ != nullptr;
}
inline bool CSReqBody::has_insetitemaffix() const {
  return _internal_has_insetitemaffix();
}
inline const ::msg::CSReqInsetItemAffix& CSReqBody::_internal_insetitemaffix() const {
  const ::msg::CSReqInsetItemAffix* p = _impl_.insetitemaffix_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqInsetItemAffix&>(
      ::msg::_CSReqInsetItemAffix_default_instance_);
}
inline const ::msg::CSReqInsetItemAffix& CSReqBody::insetitemaffix() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.InsetItemAffix)
  return _internal_insetitemaffix();
}
inline void CSReqBody::unsafe_arena_set_allocated_insetitemaffix(
    ::msg::CSReqInsetItemAffix* insetitemaffix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.insetitemaffix_);
  }
  _impl_.insetitemaffix_ = insetitemaffix;
  if (insetitemaffix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.InsetItemAffix)
}
inline ::msg::CSReqInsetItemAffix* CSReqBody::release_insetitemaffix() {
  
  ::msg::CSReqInsetItemAffix* temp = _impl_.insetitemaffix_;
  _impl_.insetitemaffix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqInsetItemAffix* CSReqBody::unsafe_arena_release_insetitemaffix() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.InsetItemAffix)
  
  ::msg::CSReqInsetItemAffix* temp = _impl_.insetitemaffix_;
  _impl_.insetitemaffix_ = nullptr;
  return temp;
}
inline ::msg::CSReqInsetItemAffix* CSReqBody::_internal_mutable_insetitemaffix() {
  
  if (_impl_.insetitemaffix_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqInsetItemAffix>(GetArenaForAllocation());
    _impl_.insetitemaffix_ = p;
  }
  return _impl_.insetitemaffix_;
}
inline ::msg::CSReqInsetItemAffix* CSReqBody::mutable_insetitemaffix() {
  ::msg::CSReqInsetItemAffix* _msg = _internal_mutable_insetitemaffix();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.InsetItemAffix)
  return _msg;
}
inline void CSReqBody::set_allocated_insetitemaffix(::msg::CSReqInsetItemAffix* insetitemaffix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.insetitemaffix_);
  }
  if (insetitemaffix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insetitemaffix));
    if (message_arena != submessage_arena) {
      insetitemaffix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insetitemaffix, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.insetitemaffix_ = insetitemaffix;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.InsetItemAffix)
}

// .msg.CSReqUnsetItemAffix UnsetItemAffix = 626;
inline bool CSReqBody::_internal_has_unsetitemaffix() const {
  return this != internal_default_instance() && _impl_.unsetitemaffix_ != nullptr;
}
inline bool CSReqBody::has_unsetitemaffix() const {
  return _internal_has_unsetitemaffix();
}
inline const ::msg::CSReqUnsetItemAffix& CSReqBody::_internal_unsetitemaffix() const {
  const ::msg::CSReqUnsetItemAffix* p = _impl_.unsetitemaffix_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUnsetItemAffix&>(
      ::msg::_CSReqUnsetItemAffix_default_instance_);
}
inline const ::msg::CSReqUnsetItemAffix& CSReqBody::unsetitemaffix() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UnsetItemAffix)
  return _internal_unsetitemaffix();
}
inline void CSReqBody::unsafe_arena_set_allocated_unsetitemaffix(
    ::msg::CSReqUnsetItemAffix* unsetitemaffix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetitemaffix_);
  }
  _impl_.unsetitemaffix_ = unsetitemaffix;
  if (unsetitemaffix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UnsetItemAffix)
}
inline ::msg::CSReqUnsetItemAffix* CSReqBody::release_unsetitemaffix() {
  
  ::msg::CSReqUnsetItemAffix* temp = _impl_.unsetitemaffix_;
  _impl_.unsetitemaffix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUnsetItemAffix* CSReqBody::unsafe_arena_release_unsetitemaffix() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UnsetItemAffix)
  
  ::msg::CSReqUnsetItemAffix* temp = _impl_.unsetitemaffix_;
  _impl_.unsetitemaffix_ = nullptr;
  return temp;
}
inline ::msg::CSReqUnsetItemAffix* CSReqBody::_internal_mutable_unsetitemaffix() {
  
  if (_impl_.unsetitemaffix_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUnsetItemAffix>(GetArenaForAllocation());
    _impl_.unsetitemaffix_ = p;
  }
  return _impl_.unsetitemaffix_;
}
inline ::msg::CSReqUnsetItemAffix* CSReqBody::mutable_unsetitemaffix() {
  ::msg::CSReqUnsetItemAffix* _msg = _internal_mutable_unsetitemaffix();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UnsetItemAffix)
  return _msg;
}
inline void CSReqBody::set_allocated_unsetitemaffix(::msg::CSReqUnsetItemAffix* unsetitemaffix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetitemaffix_);
  }
  if (unsetitemaffix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unsetitemaffix));
    if (message_arena != submessage_arena) {
      unsetitemaffix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsetitemaffix, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unsetitemaffix_ = unsetitemaffix;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UnsetItemAffix)
}

// .msg.CSReqSetDefaultAttributes SetDefaultAttributes = 627;
inline bool CSReqBody::_internal_has_setdefaultattributes() const {
  return this != internal_default_instance() && _impl_.setdefaultattributes_ != nullptr;
}
inline bool CSReqBody::has_setdefaultattributes() const {
  return _internal_has_setdefaultattributes();
}
inline const ::msg::CSReqSetDefaultAttributes& CSReqBody::_internal_setdefaultattributes() const {
  const ::msg::CSReqSetDefaultAttributes* p = _impl_.setdefaultattributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSetDefaultAttributes&>(
      ::msg::_CSReqSetDefaultAttributes_default_instance_);
}
inline const ::msg::CSReqSetDefaultAttributes& CSReqBody::setdefaultattributes() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SetDefaultAttributes)
  return _internal_setdefaultattributes();
}
inline void CSReqBody::unsafe_arena_set_allocated_setdefaultattributes(
    ::msg::CSReqSetDefaultAttributes* setdefaultattributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setdefaultattributes_);
  }
  _impl_.setdefaultattributes_ = setdefaultattributes;
  if (setdefaultattributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SetDefaultAttributes)
}
inline ::msg::CSReqSetDefaultAttributes* CSReqBody::release_setdefaultattributes() {
  
  ::msg::CSReqSetDefaultAttributes* temp = _impl_.setdefaultattributes_;
  _impl_.setdefaultattributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSetDefaultAttributes* CSReqBody::unsafe_arena_release_setdefaultattributes() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SetDefaultAttributes)
  
  ::msg::CSReqSetDefaultAttributes* temp = _impl_.setdefaultattributes_;
  _impl_.setdefaultattributes_ = nullptr;
  return temp;
}
inline ::msg::CSReqSetDefaultAttributes* CSReqBody::_internal_mutable_setdefaultattributes() {
  
  if (_impl_.setdefaultattributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSetDefaultAttributes>(GetArenaForAllocation());
    _impl_.setdefaultattributes_ = p;
  }
  return _impl_.setdefaultattributes_;
}
inline ::msg::CSReqSetDefaultAttributes* CSReqBody::mutable_setdefaultattributes() {
  ::msg::CSReqSetDefaultAttributes* _msg = _internal_mutable_setdefaultattributes();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SetDefaultAttributes)
  return _msg;
}
inline void CSReqBody::set_allocated_setdefaultattributes(::msg::CSReqSetDefaultAttributes* setdefaultattributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setdefaultattributes_);
  }
  if (setdefaultattributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setdefaultattributes));
    if (message_arena != submessage_arena) {
      setdefaultattributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setdefaultattributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setdefaultattributes_ = setdefaultattributes;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SetDefaultAttributes)
}

// .msg.CSReqCheckCancel CheckCancel = 628;
inline bool CSReqBody::_internal_has_checkcancel() const {
  return this != internal_default_instance() && _impl_.checkcancel_ != nullptr;
}
inline bool CSReqBody::has_checkcancel() const {
  return _internal_has_checkcancel();
}
inline const ::msg::CSReqCheckCancel& CSReqBody::_internal_checkcancel() const {
  const ::msg::CSReqCheckCancel* p = _impl_.checkcancel_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqCheckCancel&>(
      ::msg::_CSReqCheckCancel_default_instance_);
}
inline const ::msg::CSReqCheckCancel& CSReqBody::checkcancel() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.CheckCancel)
  return _internal_checkcancel();
}
inline void CSReqBody::unsafe_arena_set_allocated_checkcancel(
    ::msg::CSReqCheckCancel* checkcancel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.checkcancel_);
  }
  _impl_.checkcancel_ = checkcancel;
  if (checkcancel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.CheckCancel)
}
inline ::msg::CSReqCheckCancel* CSReqBody::release_checkcancel() {
  
  ::msg::CSReqCheckCancel* temp = _impl_.checkcancel_;
  _impl_.checkcancel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqCheckCancel* CSReqBody::unsafe_arena_release_checkcancel() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.CheckCancel)
  
  ::msg::CSReqCheckCancel* temp = _impl_.checkcancel_;
  _impl_.checkcancel_ = nullptr;
  return temp;
}
inline ::msg::CSReqCheckCancel* CSReqBody::_internal_mutable_checkcancel() {
  
  if (_impl_.checkcancel_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqCheckCancel>(GetArenaForAllocation());
    _impl_.checkcancel_ = p;
  }
  return _impl_.checkcancel_;
}
inline ::msg::CSReqCheckCancel* CSReqBody::mutable_checkcancel() {
  ::msg::CSReqCheckCancel* _msg = _internal_mutable_checkcancel();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.CheckCancel)
  return _msg;
}
inline void CSReqBody::set_allocated_checkcancel(::msg::CSReqCheckCancel* checkcancel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.checkcancel_);
  }
  if (checkcancel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(checkcancel));
    if (message_arena != submessage_arena) {
      checkcancel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkcancel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.checkcancel_ = checkcancel;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.CheckCancel)
}

// .msg.CSReqCancelAccount CancelAccount = 629;
inline bool CSReqBody::_internal_has_cancelaccount() const {
  return this != internal_default_instance() && _impl_.cancelaccount_ != nullptr;
}
inline bool CSReqBody::has_cancelaccount() const {
  return _internal_has_cancelaccount();
}
inline const ::msg::CSReqCancelAccount& CSReqBody::_internal_cancelaccount() const {
  const ::msg::CSReqCancelAccount* p = _impl_.cancelaccount_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqCancelAccount&>(
      ::msg::_CSReqCancelAccount_default_instance_);
}
inline const ::msg::CSReqCancelAccount& CSReqBody::cancelaccount() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.CancelAccount)
  return _internal_cancelaccount();
}
inline void CSReqBody::unsafe_arena_set_allocated_cancelaccount(
    ::msg::CSReqCancelAccount* cancelaccount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cancelaccount_);
  }
  _impl_.cancelaccount_ = cancelaccount;
  if (cancelaccount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.CancelAccount)
}
inline ::msg::CSReqCancelAccount* CSReqBody::release_cancelaccount() {
  
  ::msg::CSReqCancelAccount* temp = _impl_.cancelaccount_;
  _impl_.cancelaccount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqCancelAccount* CSReqBody::unsafe_arena_release_cancelaccount() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.CancelAccount)
  
  ::msg::CSReqCancelAccount* temp = _impl_.cancelaccount_;
  _impl_.cancelaccount_ = nullptr;
  return temp;
}
inline ::msg::CSReqCancelAccount* CSReqBody::_internal_mutable_cancelaccount() {
  
  if (_impl_.cancelaccount_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqCancelAccount>(GetArenaForAllocation());
    _impl_.cancelaccount_ = p;
  }
  return _impl_.cancelaccount_;
}
inline ::msg::CSReqCancelAccount* CSReqBody::mutable_cancelaccount() {
  ::msg::CSReqCancelAccount* _msg = _internal_mutable_cancelaccount();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.CancelAccount)
  return _msg;
}
inline void CSReqBody::set_allocated_cancelaccount(::msg::CSReqCancelAccount* cancelaccount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cancelaccount_);
  }
  if (cancelaccount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancelaccount));
    if (message_arena != submessage_arena) {
      cancelaccount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancelaccount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cancelaccount_ = cancelaccount;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.CancelAccount)
}

// .msg.CSReqOAuthApp OAuthApp = 630;
inline bool CSReqBody::_internal_has_oauthapp() const {
  return this != internal_default_instance() && _impl_.oauthapp_ != nullptr;
}
inline bool CSReqBody::has_oauthapp() const {
  return _internal_has_oauthapp();
}
inline const ::msg::CSReqOAuthApp& CSReqBody::_internal_oauthapp() const {
  const ::msg::CSReqOAuthApp* p = _impl_.oauthapp_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqOAuthApp&>(
      ::msg::_CSReqOAuthApp_default_instance_);
}
inline const ::msg::CSReqOAuthApp& CSReqBody::oauthapp() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.OAuthApp)
  return _internal_oauthapp();
}
inline void CSReqBody::unsafe_arena_set_allocated_oauthapp(
    ::msg::CSReqOAuthApp* oauthapp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oauthapp_);
  }
  _impl_.oauthapp_ = oauthapp;
  if (oauthapp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.OAuthApp)
}
inline ::msg::CSReqOAuthApp* CSReqBody::release_oauthapp() {
  
  ::msg::CSReqOAuthApp* temp = _impl_.oauthapp_;
  _impl_.oauthapp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqOAuthApp* CSReqBody::unsafe_arena_release_oauthapp() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.OAuthApp)
  
  ::msg::CSReqOAuthApp* temp = _impl_.oauthapp_;
  _impl_.oauthapp_ = nullptr;
  return temp;
}
inline ::msg::CSReqOAuthApp* CSReqBody::_internal_mutable_oauthapp() {
  
  if (_impl_.oauthapp_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqOAuthApp>(GetArenaForAllocation());
    _impl_.oauthapp_ = p;
  }
  return _impl_.oauthapp_;
}
inline ::msg::CSReqOAuthApp* CSReqBody::mutable_oauthapp() {
  ::msg::CSReqOAuthApp* _msg = _internal_mutable_oauthapp();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.OAuthApp)
  return _msg;
}
inline void CSReqBody::set_allocated_oauthapp(::msg::CSReqOAuthApp* oauthapp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oauthapp_);
  }
  if (oauthapp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oauthapp));
    if (message_arena != submessage_arena) {
      oauthapp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oauthapp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.oauthapp_ = oauthapp;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.OAuthApp)
}

// .msg.CSReqGetSelfNumRankData GetSelfNumRankData = 631;
inline bool CSReqBody::_internal_has_getselfnumrankdata() const {
  return this != internal_default_instance() && _impl_.getselfnumrankdata_ != nullptr;
}
inline bool CSReqBody::has_getselfnumrankdata() const {
  return _internal_has_getselfnumrankdata();
}
inline const ::msg::CSReqGetSelfNumRankData& CSReqBody::_internal_getselfnumrankdata() const {
  const ::msg::CSReqGetSelfNumRankData* p = _impl_.getselfnumrankdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetSelfNumRankData&>(
      ::msg::_CSReqGetSelfNumRankData_default_instance_);
}
inline const ::msg::CSReqGetSelfNumRankData& CSReqBody::getselfnumrankdata() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetSelfNumRankData)
  return _internal_getselfnumrankdata();
}
inline void CSReqBody::unsafe_arena_set_allocated_getselfnumrankdata(
    ::msg::CSReqGetSelfNumRankData* getselfnumrankdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getselfnumrankdata_);
  }
  _impl_.getselfnumrankdata_ = getselfnumrankdata;
  if (getselfnumrankdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetSelfNumRankData)
}
inline ::msg::CSReqGetSelfNumRankData* CSReqBody::release_getselfnumrankdata() {
  
  ::msg::CSReqGetSelfNumRankData* temp = _impl_.getselfnumrankdata_;
  _impl_.getselfnumrankdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetSelfNumRankData* CSReqBody::unsafe_arena_release_getselfnumrankdata() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetSelfNumRankData)
  
  ::msg::CSReqGetSelfNumRankData* temp = _impl_.getselfnumrankdata_;
  _impl_.getselfnumrankdata_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetSelfNumRankData* CSReqBody::_internal_mutable_getselfnumrankdata() {
  
  if (_impl_.getselfnumrankdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetSelfNumRankData>(GetArenaForAllocation());
    _impl_.getselfnumrankdata_ = p;
  }
  return _impl_.getselfnumrankdata_;
}
inline ::msg::CSReqGetSelfNumRankData* CSReqBody::mutable_getselfnumrankdata() {
  ::msg::CSReqGetSelfNumRankData* _msg = _internal_mutable_getselfnumrankdata();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetSelfNumRankData)
  return _msg;
}
inline void CSReqBody::set_allocated_getselfnumrankdata(::msg::CSReqGetSelfNumRankData* getselfnumrankdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getselfnumrankdata_);
  }
  if (getselfnumrankdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getselfnumrankdata));
    if (message_arena != submessage_arena) {
      getselfnumrankdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getselfnumrankdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getselfnumrankdata_ = getselfnumrankdata;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetSelfNumRankData)
}

// .msg.CSReqUpdateCardGroup UpdateCardGroup = 632;
inline bool CSReqBody::_internal_has_updatecardgroup() const {
  return this != internal_default_instance() && _impl_.updatecardgroup_ != nullptr;
}
inline bool CSReqBody::has_updatecardgroup() const {
  return _internal_has_updatecardgroup();
}
inline const ::msg::CSReqUpdateCardGroup& CSReqBody::_internal_updatecardgroup() const {
  const ::msg::CSReqUpdateCardGroup* p = _impl_.updatecardgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUpdateCardGroup&>(
      ::msg::_CSReqUpdateCardGroup_default_instance_);
}
inline const ::msg::CSReqUpdateCardGroup& CSReqBody::updatecardgroup() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UpdateCardGroup)
  return _internal_updatecardgroup();
}
inline void CSReqBody::unsafe_arena_set_allocated_updatecardgroup(
    ::msg::CSReqUpdateCardGroup* updatecardgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatecardgroup_);
  }
  _impl_.updatecardgroup_ = updatecardgroup;
  if (updatecardgroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UpdateCardGroup)
}
inline ::msg::CSReqUpdateCardGroup* CSReqBody::release_updatecardgroup() {
  
  ::msg::CSReqUpdateCardGroup* temp = _impl_.updatecardgroup_;
  _impl_.updatecardgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUpdateCardGroup* CSReqBody::unsafe_arena_release_updatecardgroup() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UpdateCardGroup)
  
  ::msg::CSReqUpdateCardGroup* temp = _impl_.updatecardgroup_;
  _impl_.updatecardgroup_ = nullptr;
  return temp;
}
inline ::msg::CSReqUpdateCardGroup* CSReqBody::_internal_mutable_updatecardgroup() {
  
  if (_impl_.updatecardgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUpdateCardGroup>(GetArenaForAllocation());
    _impl_.updatecardgroup_ = p;
  }
  return _impl_.updatecardgroup_;
}
inline ::msg::CSReqUpdateCardGroup* CSReqBody::mutable_updatecardgroup() {
  ::msg::CSReqUpdateCardGroup* _msg = _internal_mutable_updatecardgroup();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UpdateCardGroup)
  return _msg;
}
inline void CSReqBody::set_allocated_updatecardgroup(::msg::CSReqUpdateCardGroup* updatecardgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatecardgroup_);
  }
  if (updatecardgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatecardgroup));
    if (message_arena != submessage_arena) {
      updatecardgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatecardgroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updatecardgroup_ = updatecardgroup;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UpdateCardGroup)
}

// .msg.CSReqUpdateCardGroupName UpdateCardGroupName = 633;
inline bool CSReqBody::_internal_has_updatecardgroupname() const {
  return this != internal_default_instance() && _impl_.updatecardgroupname_ != nullptr;
}
inline bool CSReqBody::has_updatecardgroupname() const {
  return _internal_has_updatecardgroupname();
}
inline const ::msg::CSReqUpdateCardGroupName& CSReqBody::_internal_updatecardgroupname() const {
  const ::msg::CSReqUpdateCardGroupName* p = _impl_.updatecardgroupname_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUpdateCardGroupName&>(
      ::msg::_CSReqUpdateCardGroupName_default_instance_);
}
inline const ::msg::CSReqUpdateCardGroupName& CSReqBody::updatecardgroupname() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UpdateCardGroupName)
  return _internal_updatecardgroupname();
}
inline void CSReqBody::unsafe_arena_set_allocated_updatecardgroupname(
    ::msg::CSReqUpdateCardGroupName* updatecardgroupname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatecardgroupname_);
  }
  _impl_.updatecardgroupname_ = updatecardgroupname;
  if (updatecardgroupname) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UpdateCardGroupName)
}
inline ::msg::CSReqUpdateCardGroupName* CSReqBody::release_updatecardgroupname() {
  
  ::msg::CSReqUpdateCardGroupName* temp = _impl_.updatecardgroupname_;
  _impl_.updatecardgroupname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUpdateCardGroupName* CSReqBody::unsafe_arena_release_updatecardgroupname() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UpdateCardGroupName)
  
  ::msg::CSReqUpdateCardGroupName* temp = _impl_.updatecardgroupname_;
  _impl_.updatecardgroupname_ = nullptr;
  return temp;
}
inline ::msg::CSReqUpdateCardGroupName* CSReqBody::_internal_mutable_updatecardgroupname() {
  
  if (_impl_.updatecardgroupname_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUpdateCardGroupName>(GetArenaForAllocation());
    _impl_.updatecardgroupname_ = p;
  }
  return _impl_.updatecardgroupname_;
}
inline ::msg::CSReqUpdateCardGroupName* CSReqBody::mutable_updatecardgroupname() {
  ::msg::CSReqUpdateCardGroupName* _msg = _internal_mutable_updatecardgroupname();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UpdateCardGroupName)
  return _msg;
}
inline void CSReqBody::set_allocated_updatecardgroupname(::msg::CSReqUpdateCardGroupName* updatecardgroupname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatecardgroupname_);
  }
  if (updatecardgroupname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatecardgroupname));
    if (message_arena != submessage_arena) {
      updatecardgroupname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatecardgroupname, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updatecardgroupname_ = updatecardgroupname;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UpdateCardGroupName)
}

// .msg.CSReqBuyPveBuff BuyPveBuff = 634;
inline bool CSReqBody::_internal_has_buypvebuff() const {
  return this != internal_default_instance() && _impl_.buypvebuff_ != nullptr;
}
inline bool CSReqBody::has_buypvebuff() const {
  return _internal_has_buypvebuff();
}
inline const ::msg::CSReqBuyPveBuff& CSReqBody::_internal_buypvebuff() const {
  const ::msg::CSReqBuyPveBuff* p = _impl_.buypvebuff_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqBuyPveBuff&>(
      ::msg::_CSReqBuyPveBuff_default_instance_);
}
inline const ::msg::CSReqBuyPveBuff& CSReqBody::buypvebuff() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.BuyPveBuff)
  return _internal_buypvebuff();
}
inline void CSReqBody::unsafe_arena_set_allocated_buypvebuff(
    ::msg::CSReqBuyPveBuff* buypvebuff) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buypvebuff_);
  }
  _impl_.buypvebuff_ = buypvebuff;
  if (buypvebuff) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.BuyPveBuff)
}
inline ::msg::CSReqBuyPveBuff* CSReqBody::release_buypvebuff() {
  
  ::msg::CSReqBuyPveBuff* temp = _impl_.buypvebuff_;
  _impl_.buypvebuff_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqBuyPveBuff* CSReqBody::unsafe_arena_release_buypvebuff() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.BuyPveBuff)
  
  ::msg::CSReqBuyPveBuff* temp = _impl_.buypvebuff_;
  _impl_.buypvebuff_ = nullptr;
  return temp;
}
inline ::msg::CSReqBuyPveBuff* CSReqBody::_internal_mutable_buypvebuff() {
  
  if (_impl_.buypvebuff_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqBuyPveBuff>(GetArenaForAllocation());
    _impl_.buypvebuff_ = p;
  }
  return _impl_.buypvebuff_;
}
inline ::msg::CSReqBuyPveBuff* CSReqBody::mutable_buypvebuff() {
  ::msg::CSReqBuyPveBuff* _msg = _internal_mutable_buypvebuff();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.BuyPveBuff)
  return _msg;
}
inline void CSReqBody::set_allocated_buypvebuff(::msg::CSReqBuyPveBuff* buypvebuff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buypvebuff_);
  }
  if (buypvebuff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buypvebuff));
    if (message_arena != submessage_arena) {
      buypvebuff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buypvebuff, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buypvebuff_ = buypvebuff;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.BuyPveBuff)
}

// .msg.CSReqSetCardGroup SetCardGroup = 635;
inline bool CSReqBody::_internal_has_setcardgroup() const {
  return this != internal_default_instance() && _impl_.setcardgroup_ != nullptr;
}
inline bool CSReqBody::has_setcardgroup() const {
  return _internal_has_setcardgroup();
}
inline const ::msg::CSReqSetCardGroup& CSReqBody::_internal_setcardgroup() const {
  const ::msg::CSReqSetCardGroup* p = _impl_.setcardgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSetCardGroup&>(
      ::msg::_CSReqSetCardGroup_default_instance_);
}
inline const ::msg::CSReqSetCardGroup& CSReqBody::setcardgroup() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SetCardGroup)
  return _internal_setcardgroup();
}
inline void CSReqBody::unsafe_arena_set_allocated_setcardgroup(
    ::msg::CSReqSetCardGroup* setcardgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setcardgroup_);
  }
  _impl_.setcardgroup_ = setcardgroup;
  if (setcardgroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SetCardGroup)
}
inline ::msg::CSReqSetCardGroup* CSReqBody::release_setcardgroup() {
  
  ::msg::CSReqSetCardGroup* temp = _impl_.setcardgroup_;
  _impl_.setcardgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSetCardGroup* CSReqBody::unsafe_arena_release_setcardgroup() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SetCardGroup)
  
  ::msg::CSReqSetCardGroup* temp = _impl_.setcardgroup_;
  _impl_.setcardgroup_ = nullptr;
  return temp;
}
inline ::msg::CSReqSetCardGroup* CSReqBody::_internal_mutable_setcardgroup() {
  
  if (_impl_.setcardgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSetCardGroup>(GetArenaForAllocation());
    _impl_.setcardgroup_ = p;
  }
  return _impl_.setcardgroup_;
}
inline ::msg::CSReqSetCardGroup* CSReqBody::mutable_setcardgroup() {
  ::msg::CSReqSetCardGroup* _msg = _internal_mutable_setcardgroup();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SetCardGroup)
  return _msg;
}
inline void CSReqBody::set_allocated_setcardgroup(::msg::CSReqSetCardGroup* setcardgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setcardgroup_);
  }
  if (setcardgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setcardgroup));
    if (message_arena != submessage_arena) {
      setcardgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setcardgroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setcardgroup_ = setcardgroup;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SetCardGroup)
}

// .msg.CSReqBuyPveChessTemplate BuyPveChessTemplate = 636;
inline bool CSReqBody::_internal_has_buypvechesstemplate() const {
  return this != internal_default_instance() && _impl_.buypvechesstemplate_ != nullptr;
}
inline bool CSReqBody::has_buypvechesstemplate() const {
  return _internal_has_buypvechesstemplate();
}
inline const ::msg::CSReqBuyPveChessTemplate& CSReqBody::_internal_buypvechesstemplate() const {
  const ::msg::CSReqBuyPveChessTemplate* p = _impl_.buypvechesstemplate_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqBuyPveChessTemplate&>(
      ::msg::_CSReqBuyPveChessTemplate_default_instance_);
}
inline const ::msg::CSReqBuyPveChessTemplate& CSReqBody::buypvechesstemplate() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.BuyPveChessTemplate)
  return _internal_buypvechesstemplate();
}
inline void CSReqBody::unsafe_arena_set_allocated_buypvechesstemplate(
    ::msg::CSReqBuyPveChessTemplate* buypvechesstemplate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buypvechesstemplate_);
  }
  _impl_.buypvechesstemplate_ = buypvechesstemplate;
  if (buypvechesstemplate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.BuyPveChessTemplate)
}
inline ::msg::CSReqBuyPveChessTemplate* CSReqBody::release_buypvechesstemplate() {
  
  ::msg::CSReqBuyPveChessTemplate* temp = _impl_.buypvechesstemplate_;
  _impl_.buypvechesstemplate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqBuyPveChessTemplate* CSReqBody::unsafe_arena_release_buypvechesstemplate() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.BuyPveChessTemplate)
  
  ::msg::CSReqBuyPveChessTemplate* temp = _impl_.buypvechesstemplate_;
  _impl_.buypvechesstemplate_ = nullptr;
  return temp;
}
inline ::msg::CSReqBuyPveChessTemplate* CSReqBody::_internal_mutable_buypvechesstemplate() {
  
  if (_impl_.buypvechesstemplate_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqBuyPveChessTemplate>(GetArenaForAllocation());
    _impl_.buypvechesstemplate_ = p;
  }
  return _impl_.buypvechesstemplate_;
}
inline ::msg::CSReqBuyPveChessTemplate* CSReqBody::mutable_buypvechesstemplate() {
  ::msg::CSReqBuyPveChessTemplate* _msg = _internal_mutable_buypvechesstemplate();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.BuyPveChessTemplate)
  return _msg;
}
inline void CSReqBody::set_allocated_buypvechesstemplate(::msg::CSReqBuyPveChessTemplate* buypvechesstemplate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buypvechesstemplate_);
  }
  if (buypvechesstemplate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buypvechesstemplate));
    if (message_arena != submessage_arena) {
      buypvechesstemplate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buypvechesstemplate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buypvechesstemplate_ = buypvechesstemplate;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.BuyPveChessTemplate)
}

// .msg.CSReqPveUnlockChessTemplate PveUnlockChessTemplate = 637;
inline bool CSReqBody::_internal_has_pveunlockchesstemplate() const {
  return this != internal_default_instance() && _impl_.pveunlockchesstemplate_ != nullptr;
}
inline bool CSReqBody::has_pveunlockchesstemplate() const {
  return _internal_has_pveunlockchesstemplate();
}
inline const ::msg::CSReqPveUnlockChessTemplate& CSReqBody::_internal_pveunlockchesstemplate() const {
  const ::msg::CSReqPveUnlockChessTemplate* p = _impl_.pveunlockchesstemplate_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPveUnlockChessTemplate&>(
      ::msg::_CSReqPveUnlockChessTemplate_default_instance_);
}
inline const ::msg::CSReqPveUnlockChessTemplate& CSReqBody::pveunlockchesstemplate() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PveUnlockChessTemplate)
  return _internal_pveunlockchesstemplate();
}
inline void CSReqBody::unsafe_arena_set_allocated_pveunlockchesstemplate(
    ::msg::CSReqPveUnlockChessTemplate* pveunlockchesstemplate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pveunlockchesstemplate_);
  }
  _impl_.pveunlockchesstemplate_ = pveunlockchesstemplate;
  if (pveunlockchesstemplate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PveUnlockChessTemplate)
}
inline ::msg::CSReqPveUnlockChessTemplate* CSReqBody::release_pveunlockchesstemplate() {
  
  ::msg::CSReqPveUnlockChessTemplate* temp = _impl_.pveunlockchesstemplate_;
  _impl_.pveunlockchesstemplate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPveUnlockChessTemplate* CSReqBody::unsafe_arena_release_pveunlockchesstemplate() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PveUnlockChessTemplate)
  
  ::msg::CSReqPveUnlockChessTemplate* temp = _impl_.pveunlockchesstemplate_;
  _impl_.pveunlockchesstemplate_ = nullptr;
  return temp;
}
inline ::msg::CSReqPveUnlockChessTemplate* CSReqBody::_internal_mutable_pveunlockchesstemplate() {
  
  if (_impl_.pveunlockchesstemplate_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPveUnlockChessTemplate>(GetArenaForAllocation());
    _impl_.pveunlockchesstemplate_ = p;
  }
  return _impl_.pveunlockchesstemplate_;
}
inline ::msg::CSReqPveUnlockChessTemplate* CSReqBody::mutable_pveunlockchesstemplate() {
  ::msg::CSReqPveUnlockChessTemplate* _msg = _internal_mutable_pveunlockchesstemplate();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PveUnlockChessTemplate)
  return _msg;
}
inline void CSReqBody::set_allocated_pveunlockchesstemplate(::msg::CSReqPveUnlockChessTemplate* pveunlockchesstemplate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pveunlockchesstemplate_);
  }
  if (pveunlockchesstemplate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pveunlockchesstemplate));
    if (message_arena != submessage_arena) {
      pveunlockchesstemplate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pveunlockchesstemplate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pveunlockchesstemplate_ = pveunlockchesstemplate;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PveUnlockChessTemplate)
}

// .msg.CSReqPveSetTeamDeBuff PveSetTeamDeBuff = 638;
inline bool CSReqBody::_internal_has_pvesetteamdebuff() const {
  return this != internal_default_instance() && _impl_.pvesetteamdebuff_ != nullptr;
}
inline bool CSReqBody::has_pvesetteamdebuff() const {
  return _internal_has_pvesetteamdebuff();
}
inline const ::msg::CSReqPveSetTeamDeBuff& CSReqBody::_internal_pvesetteamdebuff() const {
  const ::msg::CSReqPveSetTeamDeBuff* p = _impl_.pvesetteamdebuff_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPveSetTeamDeBuff&>(
      ::msg::_CSReqPveSetTeamDeBuff_default_instance_);
}
inline const ::msg::CSReqPveSetTeamDeBuff& CSReqBody::pvesetteamdebuff() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PveSetTeamDeBuff)
  return _internal_pvesetteamdebuff();
}
inline void CSReqBody::unsafe_arena_set_allocated_pvesetteamdebuff(
    ::msg::CSReqPveSetTeamDeBuff* pvesetteamdebuff) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvesetteamdebuff_);
  }
  _impl_.pvesetteamdebuff_ = pvesetteamdebuff;
  if (pvesetteamdebuff) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PveSetTeamDeBuff)
}
inline ::msg::CSReqPveSetTeamDeBuff* CSReqBody::release_pvesetteamdebuff() {
  
  ::msg::CSReqPveSetTeamDeBuff* temp = _impl_.pvesetteamdebuff_;
  _impl_.pvesetteamdebuff_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPveSetTeamDeBuff* CSReqBody::unsafe_arena_release_pvesetteamdebuff() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PveSetTeamDeBuff)
  
  ::msg::CSReqPveSetTeamDeBuff* temp = _impl_.pvesetteamdebuff_;
  _impl_.pvesetteamdebuff_ = nullptr;
  return temp;
}
inline ::msg::CSReqPveSetTeamDeBuff* CSReqBody::_internal_mutable_pvesetteamdebuff() {
  
  if (_impl_.pvesetteamdebuff_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPveSetTeamDeBuff>(GetArenaForAllocation());
    _impl_.pvesetteamdebuff_ = p;
  }
  return _impl_.pvesetteamdebuff_;
}
inline ::msg::CSReqPveSetTeamDeBuff* CSReqBody::mutable_pvesetteamdebuff() {
  ::msg::CSReqPveSetTeamDeBuff* _msg = _internal_mutable_pvesetteamdebuff();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PveSetTeamDeBuff)
  return _msg;
}
inline void CSReqBody::set_allocated_pvesetteamdebuff(::msg::CSReqPveSetTeamDeBuff* pvesetteamdebuff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvesetteamdebuff_);
  }
  if (pvesetteamdebuff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvesetteamdebuff));
    if (message_arena != submessage_arena) {
      pvesetteamdebuff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvesetteamdebuff, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvesetteamdebuff_ = pvesetteamdebuff;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PveSetTeamDeBuff)
}

// .msg.CSReqChoseCardGroup ChoseCardGroup = 639;
inline bool CSReqBody::_internal_has_chosecardgroup() const {
  return this != internal_default_instance() && _impl_.chosecardgroup_ != nullptr;
}
inline bool CSReqBody::has_chosecardgroup() const {
  return _internal_has_chosecardgroup();
}
inline const ::msg::CSReqChoseCardGroup& CSReqBody::_internal_chosecardgroup() const {
  const ::msg::CSReqChoseCardGroup* p = _impl_.chosecardgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqChoseCardGroup&>(
      ::msg::_CSReqChoseCardGroup_default_instance_);
}
inline const ::msg::CSReqChoseCardGroup& CSReqBody::chosecardgroup() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.ChoseCardGroup)
  return _internal_chosecardgroup();
}
inline void CSReqBody::unsafe_arena_set_allocated_chosecardgroup(
    ::msg::CSReqChoseCardGroup* chosecardgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chosecardgroup_);
  }
  _impl_.chosecardgroup_ = chosecardgroup;
  if (chosecardgroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.ChoseCardGroup)
}
inline ::msg::CSReqChoseCardGroup* CSReqBody::release_chosecardgroup() {
  
  ::msg::CSReqChoseCardGroup* temp = _impl_.chosecardgroup_;
  _impl_.chosecardgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqChoseCardGroup* CSReqBody::unsafe_arena_release_chosecardgroup() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.ChoseCardGroup)
  
  ::msg::CSReqChoseCardGroup* temp = _impl_.chosecardgroup_;
  _impl_.chosecardgroup_ = nullptr;
  return temp;
}
inline ::msg::CSReqChoseCardGroup* CSReqBody::_internal_mutable_chosecardgroup() {
  
  if (_impl_.chosecardgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqChoseCardGroup>(GetArenaForAllocation());
    _impl_.chosecardgroup_ = p;
  }
  return _impl_.chosecardgroup_;
}
inline ::msg::CSReqChoseCardGroup* CSReqBody::mutable_chosecardgroup() {
  ::msg::CSReqChoseCardGroup* _msg = _internal_mutable_chosecardgroup();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.ChoseCardGroup)
  return _msg;
}
inline void CSReqBody::set_allocated_chosecardgroup(::msg::CSReqChoseCardGroup* chosecardgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chosecardgroup_);
  }
  if (chosecardgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chosecardgroup));
    if (message_arena != submessage_arena) {
      chosecardgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chosecardgroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chosecardgroup_ = chosecardgroup;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.ChoseCardGroup)
}

// .msg.CSReqRemoveOvertimeBuff RemoveOvertimeBuff = 640;
inline bool CSReqBody::_internal_has_removeovertimebuff() const {
  return this != internal_default_instance() && _impl_.removeovertimebuff_ != nullptr;
}
inline bool CSReqBody::has_removeovertimebuff() const {
  return _internal_has_removeovertimebuff();
}
inline const ::msg::CSReqRemoveOvertimeBuff& CSReqBody::_internal_removeovertimebuff() const {
  const ::msg::CSReqRemoveOvertimeBuff* p = _impl_.removeovertimebuff_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRemoveOvertimeBuff&>(
      ::msg::_CSReqRemoveOvertimeBuff_default_instance_);
}
inline const ::msg::CSReqRemoveOvertimeBuff& CSReqBody::removeovertimebuff() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RemoveOvertimeBuff)
  return _internal_removeovertimebuff();
}
inline void CSReqBody::unsafe_arena_set_allocated_removeovertimebuff(
    ::msg::CSReqRemoveOvertimeBuff* removeovertimebuff) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removeovertimebuff_);
  }
  _impl_.removeovertimebuff_ = removeovertimebuff;
  if (removeovertimebuff) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RemoveOvertimeBuff)
}
inline ::msg::CSReqRemoveOvertimeBuff* CSReqBody::release_removeovertimebuff() {
  
  ::msg::CSReqRemoveOvertimeBuff* temp = _impl_.removeovertimebuff_;
  _impl_.removeovertimebuff_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRemoveOvertimeBuff* CSReqBody::unsafe_arena_release_removeovertimebuff() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RemoveOvertimeBuff)
  
  ::msg::CSReqRemoveOvertimeBuff* temp = _impl_.removeovertimebuff_;
  _impl_.removeovertimebuff_ = nullptr;
  return temp;
}
inline ::msg::CSReqRemoveOvertimeBuff* CSReqBody::_internal_mutable_removeovertimebuff() {
  
  if (_impl_.removeovertimebuff_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRemoveOvertimeBuff>(GetArenaForAllocation());
    _impl_.removeovertimebuff_ = p;
  }
  return _impl_.removeovertimebuff_;
}
inline ::msg::CSReqRemoveOvertimeBuff* CSReqBody::mutable_removeovertimebuff() {
  ::msg::CSReqRemoveOvertimeBuff* _msg = _internal_mutable_removeovertimebuff();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RemoveOvertimeBuff)
  return _msg;
}
inline void CSReqBody::set_allocated_removeovertimebuff(::msg::CSReqRemoveOvertimeBuff* removeovertimebuff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removeovertimebuff_);
  }
  if (removeovertimebuff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removeovertimebuff));
    if (message_arena != submessage_arena) {
      removeovertimebuff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removeovertimebuff, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.removeovertimebuff_ = removeovertimebuff;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RemoveOvertimeBuff)
}

// .msg.CSRspUpdateNewCardGroupSign UpdateNewCardGroupSign = 643;
inline bool CSReqBody::_internal_has_updatenewcardgroupsign() const {
  return this != internal_default_instance() && _impl_.updatenewcardgroupsign_ != nullptr;
}
inline bool CSReqBody::has_updatenewcardgroupsign() const {
  return _internal_has_updatenewcardgroupsign();
}
inline const ::msg::CSRspUpdateNewCardGroupSign& CSReqBody::_internal_updatenewcardgroupsign() const {
  const ::msg::CSRspUpdateNewCardGroupSign* p = _impl_.updatenewcardgroupsign_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUpdateNewCardGroupSign&>(
      ::msg::_CSRspUpdateNewCardGroupSign_default_instance_);
}
inline const ::msg::CSRspUpdateNewCardGroupSign& CSReqBody::updatenewcardgroupsign() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UpdateNewCardGroupSign)
  return _internal_updatenewcardgroupsign();
}
inline void CSReqBody::unsafe_arena_set_allocated_updatenewcardgroupsign(
    ::msg::CSRspUpdateNewCardGroupSign* updatenewcardgroupsign) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatenewcardgroupsign_);
  }
  _impl_.updatenewcardgroupsign_ = updatenewcardgroupsign;
  if (updatenewcardgroupsign) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UpdateNewCardGroupSign)
}
inline ::msg::CSRspUpdateNewCardGroupSign* CSReqBody::release_updatenewcardgroupsign() {
  
  ::msg::CSRspUpdateNewCardGroupSign* temp = _impl_.updatenewcardgroupsign_;
  _impl_.updatenewcardgroupsign_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUpdateNewCardGroupSign* CSReqBody::unsafe_arena_release_updatenewcardgroupsign() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UpdateNewCardGroupSign)
  
  ::msg::CSRspUpdateNewCardGroupSign* temp = _impl_.updatenewcardgroupsign_;
  _impl_.updatenewcardgroupsign_ = nullptr;
  return temp;
}
inline ::msg::CSRspUpdateNewCardGroupSign* CSReqBody::_internal_mutable_updatenewcardgroupsign() {
  
  if (_impl_.updatenewcardgroupsign_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUpdateNewCardGroupSign>(GetArenaForAllocation());
    _impl_.updatenewcardgroupsign_ = p;
  }
  return _impl_.updatenewcardgroupsign_;
}
inline ::msg::CSRspUpdateNewCardGroupSign* CSReqBody::mutable_updatenewcardgroupsign() {
  ::msg::CSRspUpdateNewCardGroupSign* _msg = _internal_mutable_updatenewcardgroupsign();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UpdateNewCardGroupSign)
  return _msg;
}
inline void CSReqBody::set_allocated_updatenewcardgroupsign(::msg::CSRspUpdateNewCardGroupSign* updatenewcardgroupsign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatenewcardgroupsign_);
  }
  if (updatenewcardgroupsign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatenewcardgroupsign));
    if (message_arena != submessage_arena) {
      updatenewcardgroupsign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatenewcardgroupsign, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updatenewcardgroupsign_ = updatenewcardgroupsign;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UpdateNewCardGroupSign)
}

// .msg.CSReqTDGetOnHookAward TDGetOnHookAward = 644;
inline bool CSReqBody::_internal_has_tdgetonhookaward() const {
  return this != internal_default_instance() && _impl_.tdgetonhookaward_ != nullptr;
}
inline bool CSReqBody::has_tdgetonhookaward() const {
  return _internal_has_tdgetonhookaward();
}
inline const ::msg::CSReqTDGetOnHookAward& CSReqBody::_internal_tdgetonhookaward() const {
  const ::msg::CSReqTDGetOnHookAward* p = _impl_.tdgetonhookaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqTDGetOnHookAward&>(
      ::msg::_CSReqTDGetOnHookAward_default_instance_);
}
inline const ::msg::CSReqTDGetOnHookAward& CSReqBody::tdgetonhookaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.TDGetOnHookAward)
  return _internal_tdgetonhookaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_tdgetonhookaward(
    ::msg::CSReqTDGetOnHookAward* tdgetonhookaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdgetonhookaward_);
  }
  _impl_.tdgetonhookaward_ = tdgetonhookaward;
  if (tdgetonhookaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.TDGetOnHookAward)
}
inline ::msg::CSReqTDGetOnHookAward* CSReqBody::release_tdgetonhookaward() {
  
  ::msg::CSReqTDGetOnHookAward* temp = _impl_.tdgetonhookaward_;
  _impl_.tdgetonhookaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqTDGetOnHookAward* CSReqBody::unsafe_arena_release_tdgetonhookaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.TDGetOnHookAward)
  
  ::msg::CSReqTDGetOnHookAward* temp = _impl_.tdgetonhookaward_;
  _impl_.tdgetonhookaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqTDGetOnHookAward* CSReqBody::_internal_mutable_tdgetonhookaward() {
  
  if (_impl_.tdgetonhookaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqTDGetOnHookAward>(GetArenaForAllocation());
    _impl_.tdgetonhookaward_ = p;
  }
  return _impl_.tdgetonhookaward_;
}
inline ::msg::CSReqTDGetOnHookAward* CSReqBody::mutable_tdgetonhookaward() {
  ::msg::CSReqTDGetOnHookAward* _msg = _internal_mutable_tdgetonhookaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.TDGetOnHookAward)
  return _msg;
}
inline void CSReqBody::set_allocated_tdgetonhookaward(::msg::CSReqTDGetOnHookAward* tdgetonhookaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdgetonhookaward_);
  }
  if (tdgetonhookaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tdgetonhookaward));
    if (message_arena != submessage_arena) {
      tdgetonhookaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tdgetonhookaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tdgetonhookaward_ = tdgetonhookaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.TDGetOnHookAward)
}

// .msg.CsReqTDDraw TDDraw = 645;
inline bool CSReqBody::_internal_has_tddraw() const {
  return this != internal_default_instance() && _impl_.tddraw_ != nullptr;
}
inline bool CSReqBody::has_tddraw() const {
  return _internal_has_tddraw();
}
inline const ::msg::CsReqTDDraw& CSReqBody::_internal_tddraw() const {
  const ::msg::CsReqTDDraw* p = _impl_.tddraw_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CsReqTDDraw&>(
      ::msg::_CsReqTDDraw_default_instance_);
}
inline const ::msg::CsReqTDDraw& CSReqBody::tddraw() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.TDDraw)
  return _internal_tddraw();
}
inline void CSReqBody::unsafe_arena_set_allocated_tddraw(
    ::msg::CsReqTDDraw* tddraw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tddraw_);
  }
  _impl_.tddraw_ = tddraw;
  if (tddraw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.TDDraw)
}
inline ::msg::CsReqTDDraw* CSReqBody::release_tddraw() {
  
  ::msg::CsReqTDDraw* temp = _impl_.tddraw_;
  _impl_.tddraw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CsReqTDDraw* CSReqBody::unsafe_arena_release_tddraw() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.TDDraw)
  
  ::msg::CsReqTDDraw* temp = _impl_.tddraw_;
  _impl_.tddraw_ = nullptr;
  return temp;
}
inline ::msg::CsReqTDDraw* CSReqBody::_internal_mutable_tddraw() {
  
  if (_impl_.tddraw_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CsReqTDDraw>(GetArenaForAllocation());
    _impl_.tddraw_ = p;
  }
  return _impl_.tddraw_;
}
inline ::msg::CsReqTDDraw* CSReqBody::mutable_tddraw() {
  ::msg::CsReqTDDraw* _msg = _internal_mutable_tddraw();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.TDDraw)
  return _msg;
}
inline void CSReqBody::set_allocated_tddraw(::msg::CsReqTDDraw* tddraw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tddraw_);
  }
  if (tddraw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tddraw));
    if (message_arena != submessage_arena) {
      tddraw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tddraw, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tddraw_ = tddraw;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.TDDraw)
}

// .msg.CsReqTDBuyCard TDBuyCard = 646;
inline bool CSReqBody::_internal_has_tdbuycard() const {
  return this != internal_default_instance() && _impl_.tdbuycard_ != nullptr;
}
inline bool CSReqBody::has_tdbuycard() const {
  return _internal_has_tdbuycard();
}
inline const ::msg::CsReqTDBuyCard& CSReqBody::_internal_tdbuycard() const {
  const ::msg::CsReqTDBuyCard* p = _impl_.tdbuycard_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CsReqTDBuyCard&>(
      ::msg::_CsReqTDBuyCard_default_instance_);
}
inline const ::msg::CsReqTDBuyCard& CSReqBody::tdbuycard() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.TDBuyCard)
  return _internal_tdbuycard();
}
inline void CSReqBody::unsafe_arena_set_allocated_tdbuycard(
    ::msg::CsReqTDBuyCard* tdbuycard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdbuycard_);
  }
  _impl_.tdbuycard_ = tdbuycard;
  if (tdbuycard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.TDBuyCard)
}
inline ::msg::CsReqTDBuyCard* CSReqBody::release_tdbuycard() {
  
  ::msg::CsReqTDBuyCard* temp = _impl_.tdbuycard_;
  _impl_.tdbuycard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CsReqTDBuyCard* CSReqBody::unsafe_arena_release_tdbuycard() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.TDBuyCard)
  
  ::msg::CsReqTDBuyCard* temp = _impl_.tdbuycard_;
  _impl_.tdbuycard_ = nullptr;
  return temp;
}
inline ::msg::CsReqTDBuyCard* CSReqBody::_internal_mutable_tdbuycard() {
  
  if (_impl_.tdbuycard_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CsReqTDBuyCard>(GetArenaForAllocation());
    _impl_.tdbuycard_ = p;
  }
  return _impl_.tdbuycard_;
}
inline ::msg::CsReqTDBuyCard* CSReqBody::mutable_tdbuycard() {
  ::msg::CsReqTDBuyCard* _msg = _internal_mutable_tdbuycard();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.TDBuyCard)
  return _msg;
}
inline void CSReqBody::set_allocated_tdbuycard(::msg::CsReqTDBuyCard* tdbuycard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdbuycard_);
  }
  if (tdbuycard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tdbuycard));
    if (message_arena != submessage_arena) {
      tdbuycard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tdbuycard, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tdbuycard_ = tdbuycard;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.TDBuyCard)
}

// .msg.CSReqTDSetCardGroup TDSetCardGroup = 647;
inline bool CSReqBody::_internal_has_tdsetcardgroup() const {
  return this != internal_default_instance() && _impl_.tdsetcardgroup_ != nullptr;
}
inline bool CSReqBody::has_tdsetcardgroup() const {
  return _internal_has_tdsetcardgroup();
}
inline const ::msg::CSReqTDSetCardGroup& CSReqBody::_internal_tdsetcardgroup() const {
  const ::msg::CSReqTDSetCardGroup* p = _impl_.tdsetcardgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqTDSetCardGroup&>(
      ::msg::_CSReqTDSetCardGroup_default_instance_);
}
inline const ::msg::CSReqTDSetCardGroup& CSReqBody::tdsetcardgroup() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.TDSetCardGroup)
  return _internal_tdsetcardgroup();
}
inline void CSReqBody::unsafe_arena_set_allocated_tdsetcardgroup(
    ::msg::CSReqTDSetCardGroup* tdsetcardgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdsetcardgroup_);
  }
  _impl_.tdsetcardgroup_ = tdsetcardgroup;
  if (tdsetcardgroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.TDSetCardGroup)
}
inline ::msg::CSReqTDSetCardGroup* CSReqBody::release_tdsetcardgroup() {
  
  ::msg::CSReqTDSetCardGroup* temp = _impl_.tdsetcardgroup_;
  _impl_.tdsetcardgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqTDSetCardGroup* CSReqBody::unsafe_arena_release_tdsetcardgroup() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.TDSetCardGroup)
  
  ::msg::CSReqTDSetCardGroup* temp = _impl_.tdsetcardgroup_;
  _impl_.tdsetcardgroup_ = nullptr;
  return temp;
}
inline ::msg::CSReqTDSetCardGroup* CSReqBody::_internal_mutable_tdsetcardgroup() {
  
  if (_impl_.tdsetcardgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqTDSetCardGroup>(GetArenaForAllocation());
    _impl_.tdsetcardgroup_ = p;
  }
  return _impl_.tdsetcardgroup_;
}
inline ::msg::CSReqTDSetCardGroup* CSReqBody::mutable_tdsetcardgroup() {
  ::msg::CSReqTDSetCardGroup* _msg = _internal_mutable_tdsetcardgroup();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.TDSetCardGroup)
  return _msg;
}
inline void CSReqBody::set_allocated_tdsetcardgroup(::msg::CSReqTDSetCardGroup* tdsetcardgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdsetcardgroup_);
  }
  if (tdsetcardgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tdsetcardgroup));
    if (message_arena != submessage_arena) {
      tdsetcardgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tdsetcardgroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tdsetcardgroup_ = tdsetcardgroup;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.TDSetCardGroup)
}

// .msg.CSReqTDLevelUp TDLevelUp = 648;
inline bool CSReqBody::_internal_has_tdlevelup() const {
  return this != internal_default_instance() && _impl_.tdlevelup_ != nullptr;
}
inline bool CSReqBody::has_tdlevelup() const {
  return _internal_has_tdlevelup();
}
inline const ::msg::CSReqTDLevelUp& CSReqBody::_internal_tdlevelup() const {
  const ::msg::CSReqTDLevelUp* p = _impl_.tdlevelup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqTDLevelUp&>(
      ::msg::_CSReqTDLevelUp_default_instance_);
}
inline const ::msg::CSReqTDLevelUp& CSReqBody::tdlevelup() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.TDLevelUp)
  return _internal_tdlevelup();
}
inline void CSReqBody::unsafe_arena_set_allocated_tdlevelup(
    ::msg::CSReqTDLevelUp* tdlevelup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdlevelup_);
  }
  _impl_.tdlevelup_ = tdlevelup;
  if (tdlevelup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.TDLevelUp)
}
inline ::msg::CSReqTDLevelUp* CSReqBody::release_tdlevelup() {
  
  ::msg::CSReqTDLevelUp* temp = _impl_.tdlevelup_;
  _impl_.tdlevelup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqTDLevelUp* CSReqBody::unsafe_arena_release_tdlevelup() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.TDLevelUp)
  
  ::msg::CSReqTDLevelUp* temp = _impl_.tdlevelup_;
  _impl_.tdlevelup_ = nullptr;
  return temp;
}
inline ::msg::CSReqTDLevelUp* CSReqBody::_internal_mutable_tdlevelup() {
  
  if (_impl_.tdlevelup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqTDLevelUp>(GetArenaForAllocation());
    _impl_.tdlevelup_ = p;
  }
  return _impl_.tdlevelup_;
}
inline ::msg::CSReqTDLevelUp* CSReqBody::mutable_tdlevelup() {
  ::msg::CSReqTDLevelUp* _msg = _internal_mutable_tdlevelup();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.TDLevelUp)
  return _msg;
}
inline void CSReqBody::set_allocated_tdlevelup(::msg::CSReqTDLevelUp* tdlevelup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdlevelup_);
  }
  if (tdlevelup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tdlevelup));
    if (message_arena != submessage_arena) {
      tdlevelup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tdlevelup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tdlevelup_ = tdlevelup;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.TDLevelUp)
}

// .msg.CSReqTDEquip TDEquip = 649;
inline bool CSReqBody::_internal_has_tdequip() const {
  return this != internal_default_instance() && _impl_.tdequip_ != nullptr;
}
inline bool CSReqBody::has_tdequip() const {
  return _internal_has_tdequip();
}
inline const ::msg::CSReqTDEquip& CSReqBody::_internal_tdequip() const {
  const ::msg::CSReqTDEquip* p = _impl_.tdequip_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqTDEquip&>(
      ::msg::_CSReqTDEquip_default_instance_);
}
inline const ::msg::CSReqTDEquip& CSReqBody::tdequip() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.TDEquip)
  return _internal_tdequip();
}
inline void CSReqBody::unsafe_arena_set_allocated_tdequip(
    ::msg::CSReqTDEquip* tdequip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdequip_);
  }
  _impl_.tdequip_ = tdequip;
  if (tdequip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.TDEquip)
}
inline ::msg::CSReqTDEquip* CSReqBody::release_tdequip() {
  
  ::msg::CSReqTDEquip* temp = _impl_.tdequip_;
  _impl_.tdequip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqTDEquip* CSReqBody::unsafe_arena_release_tdequip() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.TDEquip)
  
  ::msg::CSReqTDEquip* temp = _impl_.tdequip_;
  _impl_.tdequip_ = nullptr;
  return temp;
}
inline ::msg::CSReqTDEquip* CSReqBody::_internal_mutable_tdequip() {
  
  if (_impl_.tdequip_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqTDEquip>(GetArenaForAllocation());
    _impl_.tdequip_ = p;
  }
  return _impl_.tdequip_;
}
inline ::msg::CSReqTDEquip* CSReqBody::mutable_tdequip() {
  ::msg::CSReqTDEquip* _msg = _internal_mutable_tdequip();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.TDEquip)
  return _msg;
}
inline void CSReqBody::set_allocated_tdequip(::msg::CSReqTDEquip* tdequip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdequip_);
  }
  if (tdequip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tdequip));
    if (message_arena != submessage_arena) {
      tdequip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tdequip, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tdequip_ = tdequip;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.TDEquip)
}

// .msg.CSReqMentorUpdateSetting MentorUpdateSetting = 650;
inline bool CSReqBody::_internal_has_mentorupdatesetting() const {
  return this != internal_default_instance() && _impl_.mentorupdatesetting_ != nullptr;
}
inline bool CSReqBody::has_mentorupdatesetting() const {
  return _internal_has_mentorupdatesetting();
}
inline const ::msg::CSReqMentorUpdateSetting& CSReqBody::_internal_mentorupdatesetting() const {
  const ::msg::CSReqMentorUpdateSetting* p = _impl_.mentorupdatesetting_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqMentorUpdateSetting&>(
      ::msg::_CSReqMentorUpdateSetting_default_instance_);
}
inline const ::msg::CSReqMentorUpdateSetting& CSReqBody::mentorupdatesetting() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.MentorUpdateSetting)
  return _internal_mentorupdatesetting();
}
inline void CSReqBody::unsafe_arena_set_allocated_mentorupdatesetting(
    ::msg::CSReqMentorUpdateSetting* mentorupdatesetting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorupdatesetting_);
  }
  _impl_.mentorupdatesetting_ = mentorupdatesetting;
  if (mentorupdatesetting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.MentorUpdateSetting)
}
inline ::msg::CSReqMentorUpdateSetting* CSReqBody::release_mentorupdatesetting() {
  
  ::msg::CSReqMentorUpdateSetting* temp = _impl_.mentorupdatesetting_;
  _impl_.mentorupdatesetting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqMentorUpdateSetting* CSReqBody::unsafe_arena_release_mentorupdatesetting() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.MentorUpdateSetting)
  
  ::msg::CSReqMentorUpdateSetting* temp = _impl_.mentorupdatesetting_;
  _impl_.mentorupdatesetting_ = nullptr;
  return temp;
}
inline ::msg::CSReqMentorUpdateSetting* CSReqBody::_internal_mutable_mentorupdatesetting() {
  
  if (_impl_.mentorupdatesetting_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqMentorUpdateSetting>(GetArenaForAllocation());
    _impl_.mentorupdatesetting_ = p;
  }
  return _impl_.mentorupdatesetting_;
}
inline ::msg::CSReqMentorUpdateSetting* CSReqBody::mutable_mentorupdatesetting() {
  ::msg::CSReqMentorUpdateSetting* _msg = _internal_mutable_mentorupdatesetting();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.MentorUpdateSetting)
  return _msg;
}
inline void CSReqBody::set_allocated_mentorupdatesetting(::msg::CSReqMentorUpdateSetting* mentorupdatesetting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorupdatesetting_);
  }
  if (mentorupdatesetting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorupdatesetting));
    if (message_arena != submessage_arena) {
      mentorupdatesetting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorupdatesetting, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorupdatesetting_ = mentorupdatesetting;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.MentorUpdateSetting)
}

// .msg.CSReqMentorInvite MentorInvite = 651;
inline bool CSReqBody::_internal_has_mentorinvite() const {
  return this != internal_default_instance() && _impl_.mentorinvite_ != nullptr;
}
inline bool CSReqBody::has_mentorinvite() const {
  return _internal_has_mentorinvite();
}
inline const ::msg::CSReqMentorInvite& CSReqBody::_internal_mentorinvite() const {
  const ::msg::CSReqMentorInvite* p = _impl_.mentorinvite_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqMentorInvite&>(
      ::msg::_CSReqMentorInvite_default_instance_);
}
inline const ::msg::CSReqMentorInvite& CSReqBody::mentorinvite() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.MentorInvite)
  return _internal_mentorinvite();
}
inline void CSReqBody::unsafe_arena_set_allocated_mentorinvite(
    ::msg::CSReqMentorInvite* mentorinvite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorinvite_);
  }
  _impl_.mentorinvite_ = mentorinvite;
  if (mentorinvite) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.MentorInvite)
}
inline ::msg::CSReqMentorInvite* CSReqBody::release_mentorinvite() {
  
  ::msg::CSReqMentorInvite* temp = _impl_.mentorinvite_;
  _impl_.mentorinvite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqMentorInvite* CSReqBody::unsafe_arena_release_mentorinvite() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.MentorInvite)
  
  ::msg::CSReqMentorInvite* temp = _impl_.mentorinvite_;
  _impl_.mentorinvite_ = nullptr;
  return temp;
}
inline ::msg::CSReqMentorInvite* CSReqBody::_internal_mutable_mentorinvite() {
  
  if (_impl_.mentorinvite_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqMentorInvite>(GetArenaForAllocation());
    _impl_.mentorinvite_ = p;
  }
  return _impl_.mentorinvite_;
}
inline ::msg::CSReqMentorInvite* CSReqBody::mutable_mentorinvite() {
  ::msg::CSReqMentorInvite* _msg = _internal_mutable_mentorinvite();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.MentorInvite)
  return _msg;
}
inline void CSReqBody::set_allocated_mentorinvite(::msg::CSReqMentorInvite* mentorinvite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorinvite_);
  }
  if (mentorinvite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorinvite));
    if (message_arena != submessage_arena) {
      mentorinvite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorinvite, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorinvite_ = mentorinvite;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.MentorInvite)
}

// .msg.CSReqMentorConfirmInvite MentorConfirmInvite = 652;
inline bool CSReqBody::_internal_has_mentorconfirminvite() const {
  return this != internal_default_instance() && _impl_.mentorconfirminvite_ != nullptr;
}
inline bool CSReqBody::has_mentorconfirminvite() const {
  return _internal_has_mentorconfirminvite();
}
inline const ::msg::CSReqMentorConfirmInvite& CSReqBody::_internal_mentorconfirminvite() const {
  const ::msg::CSReqMentorConfirmInvite* p = _impl_.mentorconfirminvite_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqMentorConfirmInvite&>(
      ::msg::_CSReqMentorConfirmInvite_default_instance_);
}
inline const ::msg::CSReqMentorConfirmInvite& CSReqBody::mentorconfirminvite() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.MentorConfirmInvite)
  return _internal_mentorconfirminvite();
}
inline void CSReqBody::unsafe_arena_set_allocated_mentorconfirminvite(
    ::msg::CSReqMentorConfirmInvite* mentorconfirminvite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorconfirminvite_);
  }
  _impl_.mentorconfirminvite_ = mentorconfirminvite;
  if (mentorconfirminvite) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.MentorConfirmInvite)
}
inline ::msg::CSReqMentorConfirmInvite* CSReqBody::release_mentorconfirminvite() {
  
  ::msg::CSReqMentorConfirmInvite* temp = _impl_.mentorconfirminvite_;
  _impl_.mentorconfirminvite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqMentorConfirmInvite* CSReqBody::unsafe_arena_release_mentorconfirminvite() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.MentorConfirmInvite)
  
  ::msg::CSReqMentorConfirmInvite* temp = _impl_.mentorconfirminvite_;
  _impl_.mentorconfirminvite_ = nullptr;
  return temp;
}
inline ::msg::CSReqMentorConfirmInvite* CSReqBody::_internal_mutable_mentorconfirminvite() {
  
  if (_impl_.mentorconfirminvite_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqMentorConfirmInvite>(GetArenaForAllocation());
    _impl_.mentorconfirminvite_ = p;
  }
  return _impl_.mentorconfirminvite_;
}
inline ::msg::CSReqMentorConfirmInvite* CSReqBody::mutable_mentorconfirminvite() {
  ::msg::CSReqMentorConfirmInvite* _msg = _internal_mutable_mentorconfirminvite();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.MentorConfirmInvite)
  return _msg;
}
inline void CSReqBody::set_allocated_mentorconfirminvite(::msg::CSReqMentorConfirmInvite* mentorconfirminvite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorconfirminvite_);
  }
  if (mentorconfirminvite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorconfirminvite));
    if (message_arena != submessage_arena) {
      mentorconfirminvite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorconfirminvite, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorconfirminvite_ = mentorconfirminvite;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.MentorConfirmInvite)
}

// .msg.CSReqMentorRecommendList MentorRecommendList = 653;
inline bool CSReqBody::_internal_has_mentorrecommendlist() const {
  return this != internal_default_instance() && _impl_.mentorrecommendlist_ != nullptr;
}
inline bool CSReqBody::has_mentorrecommendlist() const {
  return _internal_has_mentorrecommendlist();
}
inline const ::msg::CSReqMentorRecommendList& CSReqBody::_internal_mentorrecommendlist() const {
  const ::msg::CSReqMentorRecommendList* p = _impl_.mentorrecommendlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqMentorRecommendList&>(
      ::msg::_CSReqMentorRecommendList_default_instance_);
}
inline const ::msg::CSReqMentorRecommendList& CSReqBody::mentorrecommendlist() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.MentorRecommendList)
  return _internal_mentorrecommendlist();
}
inline void CSReqBody::unsafe_arena_set_allocated_mentorrecommendlist(
    ::msg::CSReqMentorRecommendList* mentorrecommendlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorrecommendlist_);
  }
  _impl_.mentorrecommendlist_ = mentorrecommendlist;
  if (mentorrecommendlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.MentorRecommendList)
}
inline ::msg::CSReqMentorRecommendList* CSReqBody::release_mentorrecommendlist() {
  
  ::msg::CSReqMentorRecommendList* temp = _impl_.mentorrecommendlist_;
  _impl_.mentorrecommendlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqMentorRecommendList* CSReqBody::unsafe_arena_release_mentorrecommendlist() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.MentorRecommendList)
  
  ::msg::CSReqMentorRecommendList* temp = _impl_.mentorrecommendlist_;
  _impl_.mentorrecommendlist_ = nullptr;
  return temp;
}
inline ::msg::CSReqMentorRecommendList* CSReqBody::_internal_mutable_mentorrecommendlist() {
  
  if (_impl_.mentorrecommendlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqMentorRecommendList>(GetArenaForAllocation());
    _impl_.mentorrecommendlist_ = p;
  }
  return _impl_.mentorrecommendlist_;
}
inline ::msg::CSReqMentorRecommendList* CSReqBody::mutable_mentorrecommendlist() {
  ::msg::CSReqMentorRecommendList* _msg = _internal_mutable_mentorrecommendlist();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.MentorRecommendList)
  return _msg;
}
inline void CSReqBody::set_allocated_mentorrecommendlist(::msg::CSReqMentorRecommendList* mentorrecommendlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorrecommendlist_);
  }
  if (mentorrecommendlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorrecommendlist));
    if (message_arena != submessage_arena) {
      mentorrecommendlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorrecommendlist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorrecommendlist_ = mentorrecommendlist;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.MentorRecommendList)
}

// .msg.CSReqMentorGetTaskAward MentorGetTaskAward = 654;
inline bool CSReqBody::_internal_has_mentorgettaskaward() const {
  return this != internal_default_instance() && _impl_.mentorgettaskaward_ != nullptr;
}
inline bool CSReqBody::has_mentorgettaskaward() const {
  return _internal_has_mentorgettaskaward();
}
inline const ::msg::CSReqMentorGetTaskAward& CSReqBody::_internal_mentorgettaskaward() const {
  const ::msg::CSReqMentorGetTaskAward* p = _impl_.mentorgettaskaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqMentorGetTaskAward&>(
      ::msg::_CSReqMentorGetTaskAward_default_instance_);
}
inline const ::msg::CSReqMentorGetTaskAward& CSReqBody::mentorgettaskaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.MentorGetTaskAward)
  return _internal_mentorgettaskaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_mentorgettaskaward(
    ::msg::CSReqMentorGetTaskAward* mentorgettaskaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorgettaskaward_);
  }
  _impl_.mentorgettaskaward_ = mentorgettaskaward;
  if (mentorgettaskaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.MentorGetTaskAward)
}
inline ::msg::CSReqMentorGetTaskAward* CSReqBody::release_mentorgettaskaward() {
  
  ::msg::CSReqMentorGetTaskAward* temp = _impl_.mentorgettaskaward_;
  _impl_.mentorgettaskaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqMentorGetTaskAward* CSReqBody::unsafe_arena_release_mentorgettaskaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.MentorGetTaskAward)
  
  ::msg::CSReqMentorGetTaskAward* temp = _impl_.mentorgettaskaward_;
  _impl_.mentorgettaskaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqMentorGetTaskAward* CSReqBody::_internal_mutable_mentorgettaskaward() {
  
  if (_impl_.mentorgettaskaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqMentorGetTaskAward>(GetArenaForAllocation());
    _impl_.mentorgettaskaward_ = p;
  }
  return _impl_.mentorgettaskaward_;
}
inline ::msg::CSReqMentorGetTaskAward* CSReqBody::mutable_mentorgettaskaward() {
  ::msg::CSReqMentorGetTaskAward* _msg = _internal_mutable_mentorgettaskaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.MentorGetTaskAward)
  return _msg;
}
inline void CSReqBody::set_allocated_mentorgettaskaward(::msg::CSReqMentorGetTaskAward* mentorgettaskaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorgettaskaward_);
  }
  if (mentorgettaskaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorgettaskaward));
    if (message_arena != submessage_arena) {
      mentorgettaskaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorgettaskaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorgettaskaward_ = mentorgettaskaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.MentorGetTaskAward)
}

// .msg.CSReqMentorGraduate MentorGraduate = 655;
inline bool CSReqBody::_internal_has_mentorgraduate() const {
  return this != internal_default_instance() && _impl_.mentorgraduate_ != nullptr;
}
inline bool CSReqBody::has_mentorgraduate() const {
  return _internal_has_mentorgraduate();
}
inline const ::msg::CSReqMentorGraduate& CSReqBody::_internal_mentorgraduate() const {
  const ::msg::CSReqMentorGraduate* p = _impl_.mentorgraduate_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqMentorGraduate&>(
      ::msg::_CSReqMentorGraduate_default_instance_);
}
inline const ::msg::CSReqMentorGraduate& CSReqBody::mentorgraduate() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.MentorGraduate)
  return _internal_mentorgraduate();
}
inline void CSReqBody::unsafe_arena_set_allocated_mentorgraduate(
    ::msg::CSReqMentorGraduate* mentorgraduate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorgraduate_);
  }
  _impl_.mentorgraduate_ = mentorgraduate;
  if (mentorgraduate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.MentorGraduate)
}
inline ::msg::CSReqMentorGraduate* CSReqBody::release_mentorgraduate() {
  
  ::msg::CSReqMentorGraduate* temp = _impl_.mentorgraduate_;
  _impl_.mentorgraduate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqMentorGraduate* CSReqBody::unsafe_arena_release_mentorgraduate() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.MentorGraduate)
  
  ::msg::CSReqMentorGraduate* temp = _impl_.mentorgraduate_;
  _impl_.mentorgraduate_ = nullptr;
  return temp;
}
inline ::msg::CSReqMentorGraduate* CSReqBody::_internal_mutable_mentorgraduate() {
  
  if (_impl_.mentorgraduate_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqMentorGraduate>(GetArenaForAllocation());
    _impl_.mentorgraduate_ = p;
  }
  return _impl_.mentorgraduate_;
}
inline ::msg::CSReqMentorGraduate* CSReqBody::mutable_mentorgraduate() {
  ::msg::CSReqMentorGraduate* _msg = _internal_mutable_mentorgraduate();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.MentorGraduate)
  return _msg;
}
inline void CSReqBody::set_allocated_mentorgraduate(::msg::CSReqMentorGraduate* mentorgraduate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorgraduate_);
  }
  if (mentorgraduate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorgraduate));
    if (message_arena != submessage_arena) {
      mentorgraduate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorgraduate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorgraduate_ = mentorgraduate;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.MentorGraduate)
}

// .msg.CSReqMentorRelieveRelation MentorRelieveRelation = 656;
inline bool CSReqBody::_internal_has_mentorrelieverelation() const {
  return this != internal_default_instance() && _impl_.mentorrelieverelation_ != nullptr;
}
inline bool CSReqBody::has_mentorrelieverelation() const {
  return _internal_has_mentorrelieverelation();
}
inline const ::msg::CSReqMentorRelieveRelation& CSReqBody::_internal_mentorrelieverelation() const {
  const ::msg::CSReqMentorRelieveRelation* p = _impl_.mentorrelieverelation_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqMentorRelieveRelation&>(
      ::msg::_CSReqMentorRelieveRelation_default_instance_);
}
inline const ::msg::CSReqMentorRelieveRelation& CSReqBody::mentorrelieverelation() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.MentorRelieveRelation)
  return _internal_mentorrelieverelation();
}
inline void CSReqBody::unsafe_arena_set_allocated_mentorrelieverelation(
    ::msg::CSReqMentorRelieveRelation* mentorrelieverelation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorrelieverelation_);
  }
  _impl_.mentorrelieverelation_ = mentorrelieverelation;
  if (mentorrelieverelation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.MentorRelieveRelation)
}
inline ::msg::CSReqMentorRelieveRelation* CSReqBody::release_mentorrelieverelation() {
  
  ::msg::CSReqMentorRelieveRelation* temp = _impl_.mentorrelieverelation_;
  _impl_.mentorrelieverelation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqMentorRelieveRelation* CSReqBody::unsafe_arena_release_mentorrelieverelation() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.MentorRelieveRelation)
  
  ::msg::CSReqMentorRelieveRelation* temp = _impl_.mentorrelieverelation_;
  _impl_.mentorrelieverelation_ = nullptr;
  return temp;
}
inline ::msg::CSReqMentorRelieveRelation* CSReqBody::_internal_mutable_mentorrelieverelation() {
  
  if (_impl_.mentorrelieverelation_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqMentorRelieveRelation>(GetArenaForAllocation());
    _impl_.mentorrelieverelation_ = p;
  }
  return _impl_.mentorrelieverelation_;
}
inline ::msg::CSReqMentorRelieveRelation* CSReqBody::mutable_mentorrelieverelation() {
  ::msg::CSReqMentorRelieveRelation* _msg = _internal_mutable_mentorrelieverelation();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.MentorRelieveRelation)
  return _msg;
}
inline void CSReqBody::set_allocated_mentorrelieverelation(::msg::CSReqMentorRelieveRelation* mentorrelieverelation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorrelieverelation_);
  }
  if (mentorrelieverelation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorrelieverelation));
    if (message_arena != submessage_arena) {
      mentorrelieverelation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorrelieverelation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorrelieverelation_ = mentorrelieverelation;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.MentorRelieveRelation)
}

// .msg.CSReqGetMentorInfo GetMentorInfo = 657;
inline bool CSReqBody::_internal_has_getmentorinfo() const {
  return this != internal_default_instance() && _impl_.getmentorinfo_ != nullptr;
}
inline bool CSReqBody::has_getmentorinfo() const {
  return _internal_has_getmentorinfo();
}
inline const ::msg::CSReqGetMentorInfo& CSReqBody::_internal_getmentorinfo() const {
  const ::msg::CSReqGetMentorInfo* p = _impl_.getmentorinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetMentorInfo&>(
      ::msg::_CSReqGetMentorInfo_default_instance_);
}
inline const ::msg::CSReqGetMentorInfo& CSReqBody::getmentorinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetMentorInfo)
  return _internal_getmentorinfo();
}
inline void CSReqBody::unsafe_arena_set_allocated_getmentorinfo(
    ::msg::CSReqGetMentorInfo* getmentorinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmentorinfo_);
  }
  _impl_.getmentorinfo_ = getmentorinfo;
  if (getmentorinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetMentorInfo)
}
inline ::msg::CSReqGetMentorInfo* CSReqBody::release_getmentorinfo() {
  
  ::msg::CSReqGetMentorInfo* temp = _impl_.getmentorinfo_;
  _impl_.getmentorinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetMentorInfo* CSReqBody::unsafe_arena_release_getmentorinfo() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetMentorInfo)
  
  ::msg::CSReqGetMentorInfo* temp = _impl_.getmentorinfo_;
  _impl_.getmentorinfo_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetMentorInfo* CSReqBody::_internal_mutable_getmentorinfo() {
  
  if (_impl_.getmentorinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetMentorInfo>(GetArenaForAllocation());
    _impl_.getmentorinfo_ = p;
  }
  return _impl_.getmentorinfo_;
}
inline ::msg::CSReqGetMentorInfo* CSReqBody::mutable_getmentorinfo() {
  ::msg::CSReqGetMentorInfo* _msg = _internal_mutable_getmentorinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetMentorInfo)
  return _msg;
}
inline void CSReqBody::set_allocated_getmentorinfo(::msg::CSReqGetMentorInfo* getmentorinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmentorinfo_);
  }
  if (getmentorinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getmentorinfo));
    if (message_arena != submessage_arena) {
      getmentorinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getmentorinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getmentorinfo_ = getmentorinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetMentorInfo)
}

// .msg.CSReqMentorGetInviteMsg MentorGetInviteMsg = 658;
inline bool CSReqBody::_internal_has_mentorgetinvitemsg() const {
  return this != internal_default_instance() && _impl_.mentorgetinvitemsg_ != nullptr;
}
inline bool CSReqBody::has_mentorgetinvitemsg() const {
  return _internal_has_mentorgetinvitemsg();
}
inline const ::msg::CSReqMentorGetInviteMsg& CSReqBody::_internal_mentorgetinvitemsg() const {
  const ::msg::CSReqMentorGetInviteMsg* p = _impl_.mentorgetinvitemsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqMentorGetInviteMsg&>(
      ::msg::_CSReqMentorGetInviteMsg_default_instance_);
}
inline const ::msg::CSReqMentorGetInviteMsg& CSReqBody::mentorgetinvitemsg() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.MentorGetInviteMsg)
  return _internal_mentorgetinvitemsg();
}
inline void CSReqBody::unsafe_arena_set_allocated_mentorgetinvitemsg(
    ::msg::CSReqMentorGetInviteMsg* mentorgetinvitemsg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorgetinvitemsg_);
  }
  _impl_.mentorgetinvitemsg_ = mentorgetinvitemsg;
  if (mentorgetinvitemsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.MentorGetInviteMsg)
}
inline ::msg::CSReqMentorGetInviteMsg* CSReqBody::release_mentorgetinvitemsg() {
  
  ::msg::CSReqMentorGetInviteMsg* temp = _impl_.mentorgetinvitemsg_;
  _impl_.mentorgetinvitemsg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqMentorGetInviteMsg* CSReqBody::unsafe_arena_release_mentorgetinvitemsg() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.MentorGetInviteMsg)
  
  ::msg::CSReqMentorGetInviteMsg* temp = _impl_.mentorgetinvitemsg_;
  _impl_.mentorgetinvitemsg_ = nullptr;
  return temp;
}
inline ::msg::CSReqMentorGetInviteMsg* CSReqBody::_internal_mutable_mentorgetinvitemsg() {
  
  if (_impl_.mentorgetinvitemsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqMentorGetInviteMsg>(GetArenaForAllocation());
    _impl_.mentorgetinvitemsg_ = p;
  }
  return _impl_.mentorgetinvitemsg_;
}
inline ::msg::CSReqMentorGetInviteMsg* CSReqBody::mutable_mentorgetinvitemsg() {
  ::msg::CSReqMentorGetInviteMsg* _msg = _internal_mutable_mentorgetinvitemsg();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.MentorGetInviteMsg)
  return _msg;
}
inline void CSReqBody::set_allocated_mentorgetinvitemsg(::msg::CSReqMentorGetInviteMsg* mentorgetinvitemsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorgetinvitemsg_);
  }
  if (mentorgetinvitemsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorgetinvitemsg));
    if (message_arena != submessage_arena) {
      mentorgetinvitemsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorgetinvitemsg, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorgetinvitemsg_ = mentorgetinvitemsg;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.MentorGetInviteMsg)
}

// .msg.CSReqUpdateCardGroupBetter UpdateCardGroupBetter = 659;
inline bool CSReqBody::_internal_has_updatecardgroupbetter() const {
  return this != internal_default_instance() && _impl_.updatecardgroupbetter_ != nullptr;
}
inline bool CSReqBody::has_updatecardgroupbetter() const {
  return _internal_has_updatecardgroupbetter();
}
inline const ::msg::CSReqUpdateCardGroupBetter& CSReqBody::_internal_updatecardgroupbetter() const {
  const ::msg::CSReqUpdateCardGroupBetter* p = _impl_.updatecardgroupbetter_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUpdateCardGroupBetter&>(
      ::msg::_CSReqUpdateCardGroupBetter_default_instance_);
}
inline const ::msg::CSReqUpdateCardGroupBetter& CSReqBody::updatecardgroupbetter() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UpdateCardGroupBetter)
  return _internal_updatecardgroupbetter();
}
inline void CSReqBody::unsafe_arena_set_allocated_updatecardgroupbetter(
    ::msg::CSReqUpdateCardGroupBetter* updatecardgroupbetter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatecardgroupbetter_);
  }
  _impl_.updatecardgroupbetter_ = updatecardgroupbetter;
  if (updatecardgroupbetter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UpdateCardGroupBetter)
}
inline ::msg::CSReqUpdateCardGroupBetter* CSReqBody::release_updatecardgroupbetter() {
  
  ::msg::CSReqUpdateCardGroupBetter* temp = _impl_.updatecardgroupbetter_;
  _impl_.updatecardgroupbetter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUpdateCardGroupBetter* CSReqBody::unsafe_arena_release_updatecardgroupbetter() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UpdateCardGroupBetter)
  
  ::msg::CSReqUpdateCardGroupBetter* temp = _impl_.updatecardgroupbetter_;
  _impl_.updatecardgroupbetter_ = nullptr;
  return temp;
}
inline ::msg::CSReqUpdateCardGroupBetter* CSReqBody::_internal_mutable_updatecardgroupbetter() {
  
  if (_impl_.updatecardgroupbetter_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUpdateCardGroupBetter>(GetArenaForAllocation());
    _impl_.updatecardgroupbetter_ = p;
  }
  return _impl_.updatecardgroupbetter_;
}
inline ::msg::CSReqUpdateCardGroupBetter* CSReqBody::mutable_updatecardgroupbetter() {
  ::msg::CSReqUpdateCardGroupBetter* _msg = _internal_mutable_updatecardgroupbetter();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UpdateCardGroupBetter)
  return _msg;
}
inline void CSReqBody::set_allocated_updatecardgroupbetter(::msg::CSReqUpdateCardGroupBetter* updatecardgroupbetter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatecardgroupbetter_);
  }
  if (updatecardgroupbetter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatecardgroupbetter));
    if (message_arena != submessage_arena) {
      updatecardgroupbetter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatecardgroupbetter, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updatecardgroupbetter_ = updatecardgroupbetter;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UpdateCardGroupBetter)
}

// .msg.CSReqUpdateCardGroupSetting UpdateCardGroupSetting = 660;
inline bool CSReqBody::_internal_has_updatecardgroupsetting() const {
  return this != internal_default_instance() && _impl_.updatecardgroupsetting_ != nullptr;
}
inline bool CSReqBody::has_updatecardgroupsetting() const {
  return _internal_has_updatecardgroupsetting();
}
inline const ::msg::CSReqUpdateCardGroupSetting& CSReqBody::_internal_updatecardgroupsetting() const {
  const ::msg::CSReqUpdateCardGroupSetting* p = _impl_.updatecardgroupsetting_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqUpdateCardGroupSetting&>(
      ::msg::_CSReqUpdateCardGroupSetting_default_instance_);
}
inline const ::msg::CSReqUpdateCardGroupSetting& CSReqBody::updatecardgroupsetting() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.UpdateCardGroupSetting)
  return _internal_updatecardgroupsetting();
}
inline void CSReqBody::unsafe_arena_set_allocated_updatecardgroupsetting(
    ::msg::CSReqUpdateCardGroupSetting* updatecardgroupsetting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatecardgroupsetting_);
  }
  _impl_.updatecardgroupsetting_ = updatecardgroupsetting;
  if (updatecardgroupsetting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.UpdateCardGroupSetting)
}
inline ::msg::CSReqUpdateCardGroupSetting* CSReqBody::release_updatecardgroupsetting() {
  
  ::msg::CSReqUpdateCardGroupSetting* temp = _impl_.updatecardgroupsetting_;
  _impl_.updatecardgroupsetting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqUpdateCardGroupSetting* CSReqBody::unsafe_arena_release_updatecardgroupsetting() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.UpdateCardGroupSetting)
  
  ::msg::CSReqUpdateCardGroupSetting* temp = _impl_.updatecardgroupsetting_;
  _impl_.updatecardgroupsetting_ = nullptr;
  return temp;
}
inline ::msg::CSReqUpdateCardGroupSetting* CSReqBody::_internal_mutable_updatecardgroupsetting() {
  
  if (_impl_.updatecardgroupsetting_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqUpdateCardGroupSetting>(GetArenaForAllocation());
    _impl_.updatecardgroupsetting_ = p;
  }
  return _impl_.updatecardgroupsetting_;
}
inline ::msg::CSReqUpdateCardGroupSetting* CSReqBody::mutable_updatecardgroupsetting() {
  ::msg::CSReqUpdateCardGroupSetting* _msg = _internal_mutable_updatecardgroupsetting();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.UpdateCardGroupSetting)
  return _msg;
}
inline void CSReqBody::set_allocated_updatecardgroupsetting(::msg::CSReqUpdateCardGroupSetting* updatecardgroupsetting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatecardgroupsetting_);
  }
  if (updatecardgroupsetting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatecardgroupsetting));
    if (message_arena != submessage_arena) {
      updatecardgroupsetting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatecardgroupsetting, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updatecardgroupsetting_ = updatecardgroupsetting;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.UpdateCardGroupSetting)
}

// .msg.CSReqSetContent SetContent = 661;
inline bool CSReqBody::_internal_has_setcontent() const {
  return this != internal_default_instance() && _impl_.setcontent_ != nullptr;
}
inline bool CSReqBody::has_setcontent() const {
  return _internal_has_setcontent();
}
inline const ::msg::CSReqSetContent& CSReqBody::_internal_setcontent() const {
  const ::msg::CSReqSetContent* p = _impl_.setcontent_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSetContent&>(
      ::msg::_CSReqSetContent_default_instance_);
}
inline const ::msg::CSReqSetContent& CSReqBody::setcontent() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SetContent)
  return _internal_setcontent();
}
inline void CSReqBody::unsafe_arena_set_allocated_setcontent(
    ::msg::CSReqSetContent* setcontent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setcontent_);
  }
  _impl_.setcontent_ = setcontent;
  if (setcontent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SetContent)
}
inline ::msg::CSReqSetContent* CSReqBody::release_setcontent() {
  
  ::msg::CSReqSetContent* temp = _impl_.setcontent_;
  _impl_.setcontent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSetContent* CSReqBody::unsafe_arena_release_setcontent() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SetContent)
  
  ::msg::CSReqSetContent* temp = _impl_.setcontent_;
  _impl_.setcontent_ = nullptr;
  return temp;
}
inline ::msg::CSReqSetContent* CSReqBody::_internal_mutable_setcontent() {
  
  if (_impl_.setcontent_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSetContent>(GetArenaForAllocation());
    _impl_.setcontent_ = p;
  }
  return _impl_.setcontent_;
}
inline ::msg::CSReqSetContent* CSReqBody::mutable_setcontent() {
  ::msg::CSReqSetContent* _msg = _internal_mutable_setcontent();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SetContent)
  return _msg;
}
inline void CSReqBody::set_allocated_setcontent(::msg::CSReqSetContent* setcontent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setcontent_);
  }
  if (setcontent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setcontent));
    if (message_arena != submessage_arena) {
      setcontent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setcontent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setcontent_ = setcontent;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SetContent)
}

// .msg.CSReqGetBalance GetBalance = 662;
inline bool CSReqBody::_internal_has_getbalance() const {
  return this != internal_default_instance() && _impl_.getbalance_ != nullptr;
}
inline bool CSReqBody::has_getbalance() const {
  return _internal_has_getbalance();
}
inline const ::msg::CSReqGetBalance& CSReqBody::_internal_getbalance() const {
  const ::msg::CSReqGetBalance* p = _impl_.getbalance_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetBalance&>(
      ::msg::_CSReqGetBalance_default_instance_);
}
inline const ::msg::CSReqGetBalance& CSReqBody::getbalance() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetBalance)
  return _internal_getbalance();
}
inline void CSReqBody::unsafe_arena_set_allocated_getbalance(
    ::msg::CSReqGetBalance* getbalance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getbalance_);
  }
  _impl_.getbalance_ = getbalance;
  if (getbalance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetBalance)
}
inline ::msg::CSReqGetBalance* CSReqBody::release_getbalance() {
  
  ::msg::CSReqGetBalance* temp = _impl_.getbalance_;
  _impl_.getbalance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetBalance* CSReqBody::unsafe_arena_release_getbalance() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetBalance)
  
  ::msg::CSReqGetBalance* temp = _impl_.getbalance_;
  _impl_.getbalance_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetBalance* CSReqBody::_internal_mutable_getbalance() {
  
  if (_impl_.getbalance_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetBalance>(GetArenaForAllocation());
    _impl_.getbalance_ = p;
  }
  return _impl_.getbalance_;
}
inline ::msg::CSReqGetBalance* CSReqBody::mutable_getbalance() {
  ::msg::CSReqGetBalance* _msg = _internal_mutable_getbalance();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetBalance)
  return _msg;
}
inline void CSReqBody::set_allocated_getbalance(::msg::CSReqGetBalance* getbalance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getbalance_);
  }
  if (getbalance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getbalance));
    if (message_arena != submessage_arena) {
      getbalance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getbalance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getbalance_ = getbalance;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetBalance)
}

// .msg.CSReqRechargeBalance RechargeBalance = 663;
inline bool CSReqBody::_internal_has_rechargebalance() const {
  return this != internal_default_instance() && _impl_.rechargebalance_ != nullptr;
}
inline bool CSReqBody::has_rechargebalance() const {
  return _internal_has_rechargebalance();
}
inline const ::msg::CSReqRechargeBalance& CSReqBody::_internal_rechargebalance() const {
  const ::msg::CSReqRechargeBalance* p = _impl_.rechargebalance_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqRechargeBalance&>(
      ::msg::_CSReqRechargeBalance_default_instance_);
}
inline const ::msg::CSReqRechargeBalance& CSReqBody::rechargebalance() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.RechargeBalance)
  return _internal_rechargebalance();
}
inline void CSReqBody::unsafe_arena_set_allocated_rechargebalance(
    ::msg::CSReqRechargeBalance* rechargebalance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rechargebalance_);
  }
  _impl_.rechargebalance_ = rechargebalance;
  if (rechargebalance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.RechargeBalance)
}
inline ::msg::CSReqRechargeBalance* CSReqBody::release_rechargebalance() {
  
  ::msg::CSReqRechargeBalance* temp = _impl_.rechargebalance_;
  _impl_.rechargebalance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqRechargeBalance* CSReqBody::unsafe_arena_release_rechargebalance() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.RechargeBalance)
  
  ::msg::CSReqRechargeBalance* temp = _impl_.rechargebalance_;
  _impl_.rechargebalance_ = nullptr;
  return temp;
}
inline ::msg::CSReqRechargeBalance* CSReqBody::_internal_mutable_rechargebalance() {
  
  if (_impl_.rechargebalance_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqRechargeBalance>(GetArenaForAllocation());
    _impl_.rechargebalance_ = p;
  }
  return _impl_.rechargebalance_;
}
inline ::msg::CSReqRechargeBalance* CSReqBody::mutable_rechargebalance() {
  ::msg::CSReqRechargeBalance* _msg = _internal_mutable_rechargebalance();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.RechargeBalance)
  return _msg;
}
inline void CSReqBody::set_allocated_rechargebalance(::msg::CSReqRechargeBalance* rechargebalance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rechargebalance_);
  }
  if (rechargebalance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rechargebalance));
    if (message_arena != submessage_arena) {
      rechargebalance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rechargebalance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rechargebalance_ = rechargebalance;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.RechargeBalance)
}

// .msg.CSReqWithdrawBalance WithdrawBalance = 664;
inline bool CSReqBody::_internal_has_withdrawbalance() const {
  return this != internal_default_instance() && _impl_.withdrawbalance_ != nullptr;
}
inline bool CSReqBody::has_withdrawbalance() const {
  return _internal_has_withdrawbalance();
}
inline const ::msg::CSReqWithdrawBalance& CSReqBody::_internal_withdrawbalance() const {
  const ::msg::CSReqWithdrawBalance* p = _impl_.withdrawbalance_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqWithdrawBalance&>(
      ::msg::_CSReqWithdrawBalance_default_instance_);
}
inline const ::msg::CSReqWithdrawBalance& CSReqBody::withdrawbalance() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.WithdrawBalance)
  return _internal_withdrawbalance();
}
inline void CSReqBody::unsafe_arena_set_allocated_withdrawbalance(
    ::msg::CSReqWithdrawBalance* withdrawbalance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.withdrawbalance_);
  }
  _impl_.withdrawbalance_ = withdrawbalance;
  if (withdrawbalance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.WithdrawBalance)
}
inline ::msg::CSReqWithdrawBalance* CSReqBody::release_withdrawbalance() {
  
  ::msg::CSReqWithdrawBalance* temp = _impl_.withdrawbalance_;
  _impl_.withdrawbalance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqWithdrawBalance* CSReqBody::unsafe_arena_release_withdrawbalance() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.WithdrawBalance)
  
  ::msg::CSReqWithdrawBalance* temp = _impl_.withdrawbalance_;
  _impl_.withdrawbalance_ = nullptr;
  return temp;
}
inline ::msg::CSReqWithdrawBalance* CSReqBody::_internal_mutable_withdrawbalance() {
  
  if (_impl_.withdrawbalance_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqWithdrawBalance>(GetArenaForAllocation());
    _impl_.withdrawbalance_ = p;
  }
  return _impl_.withdrawbalance_;
}
inline ::msg::CSReqWithdrawBalance* CSReqBody::mutable_withdrawbalance() {
  ::msg::CSReqWithdrawBalance* _msg = _internal_mutable_withdrawbalance();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.WithdrawBalance)
  return _msg;
}
inline void CSReqBody::set_allocated_withdrawbalance(::msg::CSReqWithdrawBalance* withdrawbalance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.withdrawbalance_);
  }
  if (withdrawbalance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(withdrawbalance));
    if (message_arena != submessage_arena) {
      withdrawbalance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdrawbalance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.withdrawbalance_ = withdrawbalance;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.WithdrawBalance)
}

// .msg.CSReqPersonalRecommendMall PersonalRecommendMall = 665;
inline bool CSReqBody::_internal_has_personalrecommendmall() const {
  return this != internal_default_instance() && _impl_.personalrecommendmall_ != nullptr;
}
inline bool CSReqBody::has_personalrecommendmall() const {
  return _internal_has_personalrecommendmall();
}
inline const ::msg::CSReqPersonalRecommendMall& CSReqBody::_internal_personalrecommendmall() const {
  const ::msg::CSReqPersonalRecommendMall* p = _impl_.personalrecommendmall_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqPersonalRecommendMall&>(
      ::msg::_CSReqPersonalRecommendMall_default_instance_);
}
inline const ::msg::CSReqPersonalRecommendMall& CSReqBody::personalrecommendmall() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.PersonalRecommendMall)
  return _internal_personalrecommendmall();
}
inline void CSReqBody::unsafe_arena_set_allocated_personalrecommendmall(
    ::msg::CSReqPersonalRecommendMall* personalrecommendmall) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.personalrecommendmall_);
  }
  _impl_.personalrecommendmall_ = personalrecommendmall;
  if (personalrecommendmall) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.PersonalRecommendMall)
}
inline ::msg::CSReqPersonalRecommendMall* CSReqBody::release_personalrecommendmall() {
  
  ::msg::CSReqPersonalRecommendMall* temp = _impl_.personalrecommendmall_;
  _impl_.personalrecommendmall_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqPersonalRecommendMall* CSReqBody::unsafe_arena_release_personalrecommendmall() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.PersonalRecommendMall)
  
  ::msg::CSReqPersonalRecommendMall* temp = _impl_.personalrecommendmall_;
  _impl_.personalrecommendmall_ = nullptr;
  return temp;
}
inline ::msg::CSReqPersonalRecommendMall* CSReqBody::_internal_mutable_personalrecommendmall() {
  
  if (_impl_.personalrecommendmall_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqPersonalRecommendMall>(GetArenaForAllocation());
    _impl_.personalrecommendmall_ = p;
  }
  return _impl_.personalrecommendmall_;
}
inline ::msg::CSReqPersonalRecommendMall* CSReqBody::mutable_personalrecommendmall() {
  ::msg::CSReqPersonalRecommendMall* _msg = _internal_mutable_personalrecommendmall();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.PersonalRecommendMall)
  return _msg;
}
inline void CSReqBody::set_allocated_personalrecommendmall(::msg::CSReqPersonalRecommendMall* personalrecommendmall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.personalrecommendmall_);
  }
  if (personalrecommendmall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(personalrecommendmall));
    if (message_arena != submessage_arena) {
      personalrecommendmall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, personalrecommendmall, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.personalrecommendmall_ = personalrecommendmall;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.PersonalRecommendMall)
}

// .msg.CSReqGetMedalChestAward GetMedalChestAward = 666;
inline bool CSReqBody::_internal_has_getmedalchestaward() const {
  return this != internal_default_instance() && _impl_.getmedalchestaward_ != nullptr;
}
inline bool CSReqBody::has_getmedalchestaward() const {
  return _internal_has_getmedalchestaward();
}
inline const ::msg::CSReqGetMedalChestAward& CSReqBody::_internal_getmedalchestaward() const {
  const ::msg::CSReqGetMedalChestAward* p = _impl_.getmedalchestaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqGetMedalChestAward&>(
      ::msg::_CSReqGetMedalChestAward_default_instance_);
}
inline const ::msg::CSReqGetMedalChestAward& CSReqBody::getmedalchestaward() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.GetMedalChestAward)
  return _internal_getmedalchestaward();
}
inline void CSReqBody::unsafe_arena_set_allocated_getmedalchestaward(
    ::msg::CSReqGetMedalChestAward* getmedalchestaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmedalchestaward_);
  }
  _impl_.getmedalchestaward_ = getmedalchestaward;
  if (getmedalchestaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.GetMedalChestAward)
}
inline ::msg::CSReqGetMedalChestAward* CSReqBody::release_getmedalchestaward() {
  
  ::msg::CSReqGetMedalChestAward* temp = _impl_.getmedalchestaward_;
  _impl_.getmedalchestaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqGetMedalChestAward* CSReqBody::unsafe_arena_release_getmedalchestaward() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.GetMedalChestAward)
  
  ::msg::CSReqGetMedalChestAward* temp = _impl_.getmedalchestaward_;
  _impl_.getmedalchestaward_ = nullptr;
  return temp;
}
inline ::msg::CSReqGetMedalChestAward* CSReqBody::_internal_mutable_getmedalchestaward() {
  
  if (_impl_.getmedalchestaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqGetMedalChestAward>(GetArenaForAllocation());
    _impl_.getmedalchestaward_ = p;
  }
  return _impl_.getmedalchestaward_;
}
inline ::msg::CSReqGetMedalChestAward* CSReqBody::mutable_getmedalchestaward() {
  ::msg::CSReqGetMedalChestAward* _msg = _internal_mutable_getmedalchestaward();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.GetMedalChestAward)
  return _msg;
}
inline void CSReqBody::set_allocated_getmedalchestaward(::msg::CSReqGetMedalChestAward* getmedalchestaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmedalchestaward_);
  }
  if (getmedalchestaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getmedalchestaward));
    if (message_arena != submessage_arena) {
      getmedalchestaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getmedalchestaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getmedalchestaward_ = getmedalchestaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.GetMedalChestAward)
}

// .msg.CSReqSetItemAutoUse SetItemAutoUse = 667;
inline bool CSReqBody::_internal_has_setitemautouse() const {
  return this != internal_default_instance() && _impl_.setitemautouse_ != nullptr;
}
inline bool CSReqBody::has_setitemautouse() const {
  return _internal_has_setitemautouse();
}
inline const ::msg::CSReqSetItemAutoUse& CSReqBody::_internal_setitemautouse() const {
  const ::msg::CSReqSetItemAutoUse* p = _impl_.setitemautouse_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSReqSetItemAutoUse&>(
      ::msg::_CSReqSetItemAutoUse_default_instance_);
}
inline const ::msg::CSReqSetItemAutoUse& CSReqBody::setitemautouse() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBody.SetItemAutoUse)
  return _internal_setitemautouse();
}
inline void CSReqBody::unsafe_arena_set_allocated_setitemautouse(
    ::msg::CSReqSetItemAutoUse* setitemautouse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setitemautouse_);
  }
  _impl_.setitemautouse_ = setitemautouse;
  if (setitemautouse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqBody.SetItemAutoUse)
}
inline ::msg::CSReqSetItemAutoUse* CSReqBody::release_setitemautouse() {
  
  ::msg::CSReqSetItemAutoUse* temp = _impl_.setitemautouse_;
  _impl_.setitemautouse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSReqSetItemAutoUse* CSReqBody::unsafe_arena_release_setitemautouse() {
  // @@protoc_insertion_point(field_release:msg.CSReqBody.SetItemAutoUse)
  
  ::msg::CSReqSetItemAutoUse* temp = _impl_.setitemautouse_;
  _impl_.setitemautouse_ = nullptr;
  return temp;
}
inline ::msg::CSReqSetItemAutoUse* CSReqBody::_internal_mutable_setitemautouse() {
  
  if (_impl_.setitemautouse_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSReqSetItemAutoUse>(GetArenaForAllocation());
    _impl_.setitemautouse_ = p;
  }
  return _impl_.setitemautouse_;
}
inline ::msg::CSReqSetItemAutoUse* CSReqBody::mutable_setitemautouse() {
  ::msg::CSReqSetItemAutoUse* _msg = _internal_mutable_setitemautouse();
  // @@protoc_insertion_point(field_mutable:msg.CSReqBody.SetItemAutoUse)
  return _msg;
}
inline void CSReqBody::set_allocated_setitemautouse(::msg::CSReqSetItemAutoUse* setitemautouse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setitemautouse_);
  }
  if (setitemautouse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setitemautouse));
    if (message_arena != submessage_arena) {
      setitemautouse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setitemautouse, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setitemautouse_ = setitemautouse;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqBody.SetItemAutoUse)
}

// -------------------------------------------------------------------

// CSRspBody

// uint64 Seq = 1;
inline void CSRspBody::clear_seq() {
  _impl_.seq_ = uint64_t{0u};
}
inline uint64_t CSRspBody::_internal_seq() const {
  return _impl_.seq_;
}
inline uint64_t CSRspBody::seq() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.Seq)
  return _internal_seq();
}
inline void CSRspBody::_internal_set_seq(uint64_t value) {
  
  _impl_.seq_ = value;
}
inline void CSRspBody::set_seq(uint64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:msg.CSRspBody.Seq)
}

// .msg.RESULT ErrCode = 2;
inline void CSRspBody::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline ::msg::RESULT CSRspBody::_internal_errcode() const {
  return static_cast< ::msg::RESULT >(_impl_.errcode_);
}
inline ::msg::RESULT CSRspBody::errcode() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ErrCode)
  return _internal_errcode();
}
inline void CSRspBody::_internal_set_errcode(::msg::RESULT value) {
  
  _impl_.errcode_ = value;
}
inline void CSRspBody::set_errcode(::msg::RESULT value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:msg.CSRspBody.ErrCode)
}

// string ErrMsg = 3;
inline void CSRspBody::clear_errmsg() {
  _impl_.errmsg_.ClearToEmpty();
}
inline const std::string& CSRspBody::errmsg() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ErrMsg)
  return _internal_errmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSRspBody::set_errmsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSRspBody.ErrMsg)
}
inline std::string* CSRspBody::mutable_errmsg() {
  std::string* _s = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ErrMsg)
  return _s;
}
inline const std::string& CSRspBody::_internal_errmsg() const {
  return _impl_.errmsg_.Get();
}
inline void CSRspBody::_internal_set_errmsg(const std::string& value) {
  
  _impl_.errmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* CSRspBody::_internal_mutable_errmsg() {
  
  return _impl_.errmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* CSRspBody::release_errmsg() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ErrMsg)
  return _impl_.errmsg_.Release();
}
inline void CSRspBody::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  _impl_.errmsg_.SetAllocated(errmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errmsg_.IsDefault()) {
    _impl_.errmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ErrMsg)
}

// .msg.CSRspHeart Heart = 4;
inline bool CSRspBody::_internal_has_heart() const {
  return this != internal_default_instance() && _impl_.heart_ != nullptr;
}
inline bool CSRspBody::has_heart() const {
  return _internal_has_heart();
}
inline const ::msg::CSRspHeart& CSRspBody::_internal_heart() const {
  const ::msg::CSRspHeart* p = _impl_.heart_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspHeart&>(
      ::msg::_CSRspHeart_default_instance_);
}
inline const ::msg::CSRspHeart& CSRspBody::heart() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.Heart)
  return _internal_heart();
}
inline void CSRspBody::unsafe_arena_set_allocated_heart(
    ::msg::CSRspHeart* heart) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.heart_);
  }
  _impl_.heart_ = heart;
  if (heart) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.Heart)
}
inline ::msg::CSRspHeart* CSRspBody::release_heart() {
  
  ::msg::CSRspHeart* temp = _impl_.heart_;
  _impl_.heart_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspHeart* CSRspBody::unsafe_arena_release_heart() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.Heart)
  
  ::msg::CSRspHeart* temp = _impl_.heart_;
  _impl_.heart_ = nullptr;
  return temp;
}
inline ::msg::CSRspHeart* CSRspBody::_internal_mutable_heart() {
  
  if (_impl_.heart_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspHeart>(GetArenaForAllocation());
    _impl_.heart_ = p;
  }
  return _impl_.heart_;
}
inline ::msg::CSRspHeart* CSRspBody::mutable_heart() {
  ::msg::CSRspHeart* _msg = _internal_mutable_heart();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.Heart)
  return _msg;
}
inline void CSRspBody::set_allocated_heart(::msg::CSRspHeart* heart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.heart_);
  }
  if (heart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heart));
    if (message_arena != submessage_arena) {
      heart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heart, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.heart_ = heart;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.Heart)
}

// .msg.CSRspLogin Login = 5;
inline bool CSRspBody::_internal_has_login() const {
  return this != internal_default_instance() && _impl_.login_ != nullptr;
}
inline bool CSRspBody::has_login() const {
  return _internal_has_login();
}
inline const ::msg::CSRspLogin& CSRspBody::_internal_login() const {
  const ::msg::CSRspLogin* p = _impl_.login_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspLogin&>(
      ::msg::_CSRspLogin_default_instance_);
}
inline const ::msg::CSRspLogin& CSRspBody::login() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.Login)
  return _internal_login();
}
inline void CSRspBody::unsafe_arena_set_allocated_login(
    ::msg::CSRspLogin* login) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.login_);
  }
  _impl_.login_ = login;
  if (login) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.Login)
}
inline ::msg::CSRspLogin* CSRspBody::release_login() {
  
  ::msg::CSRspLogin* temp = _impl_.login_;
  _impl_.login_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspLogin* CSRspBody::unsafe_arena_release_login() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.Login)
  
  ::msg::CSRspLogin* temp = _impl_.login_;
  _impl_.login_ = nullptr;
  return temp;
}
inline ::msg::CSRspLogin* CSRspBody::_internal_mutable_login() {
  
  if (_impl_.login_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspLogin>(GetArenaForAllocation());
    _impl_.login_ = p;
  }
  return _impl_.login_;
}
inline ::msg::CSRspLogin* CSRspBody::mutable_login() {
  ::msg::CSRspLogin* _msg = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.Login)
  return _msg;
}
inline void CSRspBody::set_allocated_login(::msg::CSRspLogin* login) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.login_);
  }
  if (login) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login));
    if (message_arena != submessage_arena) {
      login = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.login_ = login;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.Login)
}

// .msg.CSRspVersionCheck VersionCheck = 6;
inline bool CSRspBody::_internal_has_versioncheck() const {
  return this != internal_default_instance() && _impl_.versioncheck_ != nullptr;
}
inline bool CSRspBody::has_versioncheck() const {
  return _internal_has_versioncheck();
}
inline const ::msg::CSRspVersionCheck& CSRspBody::_internal_versioncheck() const {
  const ::msg::CSRspVersionCheck* p = _impl_.versioncheck_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspVersionCheck&>(
      ::msg::_CSRspVersionCheck_default_instance_);
}
inline const ::msg::CSRspVersionCheck& CSRspBody::versioncheck() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.VersionCheck)
  return _internal_versioncheck();
}
inline void CSRspBody::unsafe_arena_set_allocated_versioncheck(
    ::msg::CSRspVersionCheck* versioncheck) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.versioncheck_);
  }
  _impl_.versioncheck_ = versioncheck;
  if (versioncheck) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.VersionCheck)
}
inline ::msg::CSRspVersionCheck* CSRspBody::release_versioncheck() {
  
  ::msg::CSRspVersionCheck* temp = _impl_.versioncheck_;
  _impl_.versioncheck_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspVersionCheck* CSRspBody::unsafe_arena_release_versioncheck() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.VersionCheck)
  
  ::msg::CSRspVersionCheck* temp = _impl_.versioncheck_;
  _impl_.versioncheck_ = nullptr;
  return temp;
}
inline ::msg::CSRspVersionCheck* CSRspBody::_internal_mutable_versioncheck() {
  
  if (_impl_.versioncheck_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspVersionCheck>(GetArenaForAllocation());
    _impl_.versioncheck_ = p;
  }
  return _impl_.versioncheck_;
}
inline ::msg::CSRspVersionCheck* CSRspBody::mutable_versioncheck() {
  ::msg::CSRspVersionCheck* _msg = _internal_mutable_versioncheck();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.VersionCheck)
  return _msg;
}
inline void CSRspBody::set_allocated_versioncheck(::msg::CSRspVersionCheck* versioncheck) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.versioncheck_);
  }
  if (versioncheck) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(versioncheck));
    if (message_arena != submessage_arena) {
      versioncheck = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, versioncheck, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.versioncheck_ = versioncheck;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.VersionCheck)
}

// .msg.CSRspResourceVersionCheck ResourceVersionCheck = 7;
inline bool CSRspBody::_internal_has_resourceversioncheck() const {
  return this != internal_default_instance() && _impl_.resourceversioncheck_ != nullptr;
}
inline bool CSRspBody::has_resourceversioncheck() const {
  return _internal_has_resourceversioncheck();
}
inline const ::msg::CSRspResourceVersionCheck& CSRspBody::_internal_resourceversioncheck() const {
  const ::msg::CSRspResourceVersionCheck* p = _impl_.resourceversioncheck_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspResourceVersionCheck&>(
      ::msg::_CSRspResourceVersionCheck_default_instance_);
}
inline const ::msg::CSRspResourceVersionCheck& CSRspBody::resourceversioncheck() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ResourceVersionCheck)
  return _internal_resourceversioncheck();
}
inline void CSRspBody::unsafe_arena_set_allocated_resourceversioncheck(
    ::msg::CSRspResourceVersionCheck* resourceversioncheck) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resourceversioncheck_);
  }
  _impl_.resourceversioncheck_ = resourceversioncheck;
  if (resourceversioncheck) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ResourceVersionCheck)
}
inline ::msg::CSRspResourceVersionCheck* CSRspBody::release_resourceversioncheck() {
  
  ::msg::CSRspResourceVersionCheck* temp = _impl_.resourceversioncheck_;
  _impl_.resourceversioncheck_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspResourceVersionCheck* CSRspBody::unsafe_arena_release_resourceversioncheck() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ResourceVersionCheck)
  
  ::msg::CSRspResourceVersionCheck* temp = _impl_.resourceversioncheck_;
  _impl_.resourceversioncheck_ = nullptr;
  return temp;
}
inline ::msg::CSRspResourceVersionCheck* CSRspBody::_internal_mutable_resourceversioncheck() {
  
  if (_impl_.resourceversioncheck_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspResourceVersionCheck>(GetArenaForAllocation());
    _impl_.resourceversioncheck_ = p;
  }
  return _impl_.resourceversioncheck_;
}
inline ::msg::CSRspResourceVersionCheck* CSRspBody::mutable_resourceversioncheck() {
  ::msg::CSRspResourceVersionCheck* _msg = _internal_mutable_resourceversioncheck();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ResourceVersionCheck)
  return _msg;
}
inline void CSRspBody::set_allocated_resourceversioncheck(::msg::CSRspResourceVersionCheck* resourceversioncheck) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resourceversioncheck_);
  }
  if (resourceversioncheck) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resourceversioncheck));
    if (message_arena != submessage_arena) {
      resourceversioncheck = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resourceversioncheck, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resourceversioncheck_ = resourceversioncheck;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ResourceVersionCheck)
}

// .msg.CSRspApplyHallServer ApplyHallServer = 8;
inline bool CSRspBody::_internal_has_applyhallserver() const {
  return this != internal_default_instance() && _impl_.applyhallserver_ != nullptr;
}
inline bool CSRspBody::has_applyhallserver() const {
  return _internal_has_applyhallserver();
}
inline const ::msg::CSRspApplyHallServer& CSRspBody::_internal_applyhallserver() const {
  const ::msg::CSRspApplyHallServer* p = _impl_.applyhallserver_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspApplyHallServer&>(
      ::msg::_CSRspApplyHallServer_default_instance_);
}
inline const ::msg::CSRspApplyHallServer& CSRspBody::applyhallserver() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ApplyHallServer)
  return _internal_applyhallserver();
}
inline void CSRspBody::unsafe_arena_set_allocated_applyhallserver(
    ::msg::CSRspApplyHallServer* applyhallserver) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.applyhallserver_);
  }
  _impl_.applyhallserver_ = applyhallserver;
  if (applyhallserver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ApplyHallServer)
}
inline ::msg::CSRspApplyHallServer* CSRspBody::release_applyhallserver() {
  
  ::msg::CSRspApplyHallServer* temp = _impl_.applyhallserver_;
  _impl_.applyhallserver_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspApplyHallServer* CSRspBody::unsafe_arena_release_applyhallserver() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ApplyHallServer)
  
  ::msg::CSRspApplyHallServer* temp = _impl_.applyhallserver_;
  _impl_.applyhallserver_ = nullptr;
  return temp;
}
inline ::msg::CSRspApplyHallServer* CSRspBody::_internal_mutable_applyhallserver() {
  
  if (_impl_.applyhallserver_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspApplyHallServer>(GetArenaForAllocation());
    _impl_.applyhallserver_ = p;
  }
  return _impl_.applyhallserver_;
}
inline ::msg::CSRspApplyHallServer* CSRspBody::mutable_applyhallserver() {
  ::msg::CSRspApplyHallServer* _msg = _internal_mutable_applyhallserver();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ApplyHallServer)
  return _msg;
}
inline void CSRspBody::set_allocated_applyhallserver(::msg::CSRspApplyHallServer* applyhallserver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.applyhallserver_);
  }
  if (applyhallserver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applyhallserver));
    if (message_arena != submessage_arena) {
      applyhallserver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applyhallserver, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.applyhallserver_ = applyhallserver;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ApplyHallServer)
}

// .msg.CSRspGetNumRank GetNumRank = 9;
inline bool CSRspBody::_internal_has_getnumrank() const {
  return this != internal_default_instance() && _impl_.getnumrank_ != nullptr;
}
inline bool CSRspBody::has_getnumrank() const {
  return _internal_has_getnumrank();
}
inline const ::msg::CSRspGetNumRank& CSRspBody::_internal_getnumrank() const {
  const ::msg::CSRspGetNumRank* p = _impl_.getnumrank_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetNumRank&>(
      ::msg::_CSRspGetNumRank_default_instance_);
}
inline const ::msg::CSRspGetNumRank& CSRspBody::getnumrank() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetNumRank)
  return _internal_getnumrank();
}
inline void CSRspBody::unsafe_arena_set_allocated_getnumrank(
    ::msg::CSRspGetNumRank* getnumrank) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getnumrank_);
  }
  _impl_.getnumrank_ = getnumrank;
  if (getnumrank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetNumRank)
}
inline ::msg::CSRspGetNumRank* CSRspBody::release_getnumrank() {
  
  ::msg::CSRspGetNumRank* temp = _impl_.getnumrank_;
  _impl_.getnumrank_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetNumRank* CSRspBody::unsafe_arena_release_getnumrank() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetNumRank)
  
  ::msg::CSRspGetNumRank* temp = _impl_.getnumrank_;
  _impl_.getnumrank_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetNumRank* CSRspBody::_internal_mutable_getnumrank() {
  
  if (_impl_.getnumrank_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetNumRank>(GetArenaForAllocation());
    _impl_.getnumrank_ = p;
  }
  return _impl_.getnumrank_;
}
inline ::msg::CSRspGetNumRank* CSRspBody::mutable_getnumrank() {
  ::msg::CSRspGetNumRank* _msg = _internal_mutable_getnumrank();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetNumRank)
  return _msg;
}
inline void CSRspBody::set_allocated_getnumrank(::msg::CSRspGetNumRank* getnumrank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getnumrank_);
  }
  if (getnumrank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getnumrank));
    if (message_arena != submessage_arena) {
      getnumrank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getnumrank, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getnumrank_ = getnumrank;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetNumRank)
}

// .msg.CSRspWorldChat WorldChat = 10;
inline bool CSRspBody::_internal_has_worldchat() const {
  return this != internal_default_instance() && _impl_.worldchat_ != nullptr;
}
inline bool CSRspBody::has_worldchat() const {
  return _internal_has_worldchat();
}
inline const ::msg::CSRspWorldChat& CSRspBody::_internal_worldchat() const {
  const ::msg::CSRspWorldChat* p = _impl_.worldchat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspWorldChat&>(
      ::msg::_CSRspWorldChat_default_instance_);
}
inline const ::msg::CSRspWorldChat& CSRspBody::worldchat() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.WorldChat)
  return _internal_worldchat();
}
inline void CSRspBody::unsafe_arena_set_allocated_worldchat(
    ::msg::CSRspWorldChat* worldchat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.worldchat_);
  }
  _impl_.worldchat_ = worldchat;
  if (worldchat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.WorldChat)
}
inline ::msg::CSRspWorldChat* CSRspBody::release_worldchat() {
  
  ::msg::CSRspWorldChat* temp = _impl_.worldchat_;
  _impl_.worldchat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspWorldChat* CSRspBody::unsafe_arena_release_worldchat() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.WorldChat)
  
  ::msg::CSRspWorldChat* temp = _impl_.worldchat_;
  _impl_.worldchat_ = nullptr;
  return temp;
}
inline ::msg::CSRspWorldChat* CSRspBody::_internal_mutable_worldchat() {
  
  if (_impl_.worldchat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspWorldChat>(GetArenaForAllocation());
    _impl_.worldchat_ = p;
  }
  return _impl_.worldchat_;
}
inline ::msg::CSRspWorldChat* CSRspBody::mutable_worldchat() {
  ::msg::CSRspWorldChat* _msg = _internal_mutable_worldchat();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.WorldChat)
  return _msg;
}
inline void CSRspBody::set_allocated_worldchat(::msg::CSRspWorldChat* worldchat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.worldchat_);
  }
  if (worldchat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(worldchat));
    if (message_arena != submessage_arena) {
      worldchat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, worldchat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.worldchat_ = worldchat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.WorldChat)
}

// .msg.CSRspPlayersBaseInfo PlayersBaseInfo = 11;
inline bool CSRspBody::_internal_has_playersbaseinfo() const {
  return this != internal_default_instance() && _impl_.playersbaseinfo_ != nullptr;
}
inline bool CSRspBody::has_playersbaseinfo() const {
  return _internal_has_playersbaseinfo();
}
inline const ::msg::CSRspPlayersBaseInfo& CSRspBody::_internal_playersbaseinfo() const {
  const ::msg::CSRspPlayersBaseInfo* p = _impl_.playersbaseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPlayersBaseInfo&>(
      ::msg::_CSRspPlayersBaseInfo_default_instance_);
}
inline const ::msg::CSRspPlayersBaseInfo& CSRspBody::playersbaseinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PlayersBaseInfo)
  return _internal_playersbaseinfo();
}
inline void CSRspBody::unsafe_arena_set_allocated_playersbaseinfo(
    ::msg::CSRspPlayersBaseInfo* playersbaseinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playersbaseinfo_);
  }
  _impl_.playersbaseinfo_ = playersbaseinfo;
  if (playersbaseinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PlayersBaseInfo)
}
inline ::msg::CSRspPlayersBaseInfo* CSRspBody::release_playersbaseinfo() {
  
  ::msg::CSRspPlayersBaseInfo* temp = _impl_.playersbaseinfo_;
  _impl_.playersbaseinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPlayersBaseInfo* CSRspBody::unsafe_arena_release_playersbaseinfo() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PlayersBaseInfo)
  
  ::msg::CSRspPlayersBaseInfo* temp = _impl_.playersbaseinfo_;
  _impl_.playersbaseinfo_ = nullptr;
  return temp;
}
inline ::msg::CSRspPlayersBaseInfo* CSRspBody::_internal_mutable_playersbaseinfo() {
  
  if (_impl_.playersbaseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPlayersBaseInfo>(GetArenaForAllocation());
    _impl_.playersbaseinfo_ = p;
  }
  return _impl_.playersbaseinfo_;
}
inline ::msg::CSRspPlayersBaseInfo* CSRspBody::mutable_playersbaseinfo() {
  ::msg::CSRspPlayersBaseInfo* _msg = _internal_mutable_playersbaseinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PlayersBaseInfo)
  return _msg;
}
inline void CSRspBody::set_allocated_playersbaseinfo(::msg::CSRspPlayersBaseInfo* playersbaseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playersbaseinfo_);
  }
  if (playersbaseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playersbaseinfo));
    if (message_arena != submessage_arena) {
      playersbaseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playersbaseinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playersbaseinfo_ = playersbaseinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PlayersBaseInfo)
}

// .msg.CSRspPlayerDetailInfo PlayerDetailInfo = 12;
inline bool CSRspBody::_internal_has_playerdetailinfo() const {
  return this != internal_default_instance() && _impl_.playerdetailinfo_ != nullptr;
}
inline bool CSRspBody::has_playerdetailinfo() const {
  return _internal_has_playerdetailinfo();
}
inline const ::msg::CSRspPlayerDetailInfo& CSRspBody::_internal_playerdetailinfo() const {
  const ::msg::CSRspPlayerDetailInfo* p = _impl_.playerdetailinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPlayerDetailInfo&>(
      ::msg::_CSRspPlayerDetailInfo_default_instance_);
}
inline const ::msg::CSRspPlayerDetailInfo& CSRspBody::playerdetailinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PlayerDetailInfo)
  return _internal_playerdetailinfo();
}
inline void CSRspBody::unsafe_arena_set_allocated_playerdetailinfo(
    ::msg::CSRspPlayerDetailInfo* playerdetailinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerdetailinfo_);
  }
  _impl_.playerdetailinfo_ = playerdetailinfo;
  if (playerdetailinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PlayerDetailInfo)
}
inline ::msg::CSRspPlayerDetailInfo* CSRspBody::release_playerdetailinfo() {
  
  ::msg::CSRspPlayerDetailInfo* temp = _impl_.playerdetailinfo_;
  _impl_.playerdetailinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPlayerDetailInfo* CSRspBody::unsafe_arena_release_playerdetailinfo() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PlayerDetailInfo)
  
  ::msg::CSRspPlayerDetailInfo* temp = _impl_.playerdetailinfo_;
  _impl_.playerdetailinfo_ = nullptr;
  return temp;
}
inline ::msg::CSRspPlayerDetailInfo* CSRspBody::_internal_mutable_playerdetailinfo() {
  
  if (_impl_.playerdetailinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPlayerDetailInfo>(GetArenaForAllocation());
    _impl_.playerdetailinfo_ = p;
  }
  return _impl_.playerdetailinfo_;
}
inline ::msg::CSRspPlayerDetailInfo* CSRspBody::mutable_playerdetailinfo() {
  ::msg::CSRspPlayerDetailInfo* _msg = _internal_mutable_playerdetailinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PlayerDetailInfo)
  return _msg;
}
inline void CSRspBody::set_allocated_playerdetailinfo(::msg::CSRspPlayerDetailInfo* playerdetailinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerdetailinfo_);
  }
  if (playerdetailinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdetailinfo));
    if (message_arena != submessage_arena) {
      playerdetailinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerdetailinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerdetailinfo_ = playerdetailinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PlayerDetailInfo)
}

// .msg.CSRspReadMail ReadMail = 13;
inline bool CSRspBody::_internal_has_readmail() const {
  return this != internal_default_instance() && _impl_.readmail_ != nullptr;
}
inline bool CSRspBody::has_readmail() const {
  return _internal_has_readmail();
}
inline const ::msg::CSRspReadMail& CSRspBody::_internal_readmail() const {
  const ::msg::CSRspReadMail* p = _impl_.readmail_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspReadMail&>(
      ::msg::_CSRspReadMail_default_instance_);
}
inline const ::msg::CSRspReadMail& CSRspBody::readmail() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ReadMail)
  return _internal_readmail();
}
inline void CSRspBody::unsafe_arena_set_allocated_readmail(
    ::msg::CSRspReadMail* readmail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.readmail_);
  }
  _impl_.readmail_ = readmail;
  if (readmail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ReadMail)
}
inline ::msg::CSRspReadMail* CSRspBody::release_readmail() {
  
  ::msg::CSRspReadMail* temp = _impl_.readmail_;
  _impl_.readmail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspReadMail* CSRspBody::unsafe_arena_release_readmail() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ReadMail)
  
  ::msg::CSRspReadMail* temp = _impl_.readmail_;
  _impl_.readmail_ = nullptr;
  return temp;
}
inline ::msg::CSRspReadMail* CSRspBody::_internal_mutable_readmail() {
  
  if (_impl_.readmail_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspReadMail>(GetArenaForAllocation());
    _impl_.readmail_ = p;
  }
  return _impl_.readmail_;
}
inline ::msg::CSRspReadMail* CSRspBody::mutable_readmail() {
  ::msg::CSRspReadMail* _msg = _internal_mutable_readmail();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ReadMail)
  return _msg;
}
inline void CSRspBody::set_allocated_readmail(::msg::CSRspReadMail* readmail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.readmail_);
  }
  if (readmail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(readmail));
    if (message_arena != submessage_arena) {
      readmail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, readmail, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.readmail_ = readmail;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ReadMail)
}

// .msg.CSRspGetMailAward GetMailAward = 14;
inline bool CSRspBody::_internal_has_getmailaward() const {
  return this != internal_default_instance() && _impl_.getmailaward_ != nullptr;
}
inline bool CSRspBody::has_getmailaward() const {
  return _internal_has_getmailaward();
}
inline const ::msg::CSRspGetMailAward& CSRspBody::_internal_getmailaward() const {
  const ::msg::CSRspGetMailAward* p = _impl_.getmailaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetMailAward&>(
      ::msg::_CSRspGetMailAward_default_instance_);
}
inline const ::msg::CSRspGetMailAward& CSRspBody::getmailaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetMailAward)
  return _internal_getmailaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_getmailaward(
    ::msg::CSRspGetMailAward* getmailaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmailaward_);
  }
  _impl_.getmailaward_ = getmailaward;
  if (getmailaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetMailAward)
}
inline ::msg::CSRspGetMailAward* CSRspBody::release_getmailaward() {
  
  ::msg::CSRspGetMailAward* temp = _impl_.getmailaward_;
  _impl_.getmailaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetMailAward* CSRspBody::unsafe_arena_release_getmailaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetMailAward)
  
  ::msg::CSRspGetMailAward* temp = _impl_.getmailaward_;
  _impl_.getmailaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetMailAward* CSRspBody::_internal_mutable_getmailaward() {
  
  if (_impl_.getmailaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetMailAward>(GetArenaForAllocation());
    _impl_.getmailaward_ = p;
  }
  return _impl_.getmailaward_;
}
inline ::msg::CSRspGetMailAward* CSRspBody::mutable_getmailaward() {
  ::msg::CSRspGetMailAward* _msg = _internal_mutable_getmailaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetMailAward)
  return _msg;
}
inline void CSRspBody::set_allocated_getmailaward(::msg::CSRspGetMailAward* getmailaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmailaward_);
  }
  if (getmailaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getmailaward));
    if (message_arena != submessage_arena) {
      getmailaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getmailaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getmailaward_ = getmailaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetMailAward)
}

// .msg.CSRspBuyEgg BuyEgg = 15;
inline bool CSRspBody::_internal_has_buyegg() const {
  return this != internal_default_instance() && _impl_.buyegg_ != nullptr;
}
inline bool CSRspBody::has_buyegg() const {
  return _internal_has_buyegg();
}
inline const ::msg::CSRspBuyEgg& CSRspBody::_internal_buyegg() const {
  const ::msg::CSRspBuyEgg* p = _impl_.buyegg_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspBuyEgg&>(
      ::msg::_CSRspBuyEgg_default_instance_);
}
inline const ::msg::CSRspBuyEgg& CSRspBody::buyegg() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.BuyEgg)
  return _internal_buyegg();
}
inline void CSRspBody::unsafe_arena_set_allocated_buyegg(
    ::msg::CSRspBuyEgg* buyegg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buyegg_);
  }
  _impl_.buyegg_ = buyegg;
  if (buyegg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.BuyEgg)
}
inline ::msg::CSRspBuyEgg* CSRspBody::release_buyegg() {
  
  ::msg::CSRspBuyEgg* temp = _impl_.buyegg_;
  _impl_.buyegg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspBuyEgg* CSRspBody::unsafe_arena_release_buyegg() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.BuyEgg)
  
  ::msg::CSRspBuyEgg* temp = _impl_.buyegg_;
  _impl_.buyegg_ = nullptr;
  return temp;
}
inline ::msg::CSRspBuyEgg* CSRspBody::_internal_mutable_buyegg() {
  
  if (_impl_.buyegg_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspBuyEgg>(GetArenaForAllocation());
    _impl_.buyegg_ = p;
  }
  return _impl_.buyegg_;
}
inline ::msg::CSRspBuyEgg* CSRspBody::mutable_buyegg() {
  ::msg::CSRspBuyEgg* _msg = _internal_mutable_buyegg();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.BuyEgg)
  return _msg;
}
inline void CSRspBody::set_allocated_buyegg(::msg::CSRspBuyEgg* buyegg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buyegg_);
  }
  if (buyegg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buyegg));
    if (message_arena != submessage_arena) {
      buyegg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buyegg, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buyegg_ = buyegg;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.BuyEgg)
}

// .msg.CSRspUserNameSet UserNameSet = 16;
inline bool CSRspBody::_internal_has_usernameset() const {
  return this != internal_default_instance() && _impl_.usernameset_ != nullptr;
}
inline bool CSRspBody::has_usernameset() const {
  return _internal_has_usernameset();
}
inline const ::msg::CSRspUserNameSet& CSRspBody::_internal_usernameset() const {
  const ::msg::CSRspUserNameSet* p = _impl_.usernameset_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUserNameSet&>(
      ::msg::_CSRspUserNameSet_default_instance_);
}
inline const ::msg::CSRspUserNameSet& CSRspBody::usernameset() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UserNameSet)
  return _internal_usernameset();
}
inline void CSRspBody::unsafe_arena_set_allocated_usernameset(
    ::msg::CSRspUserNameSet* usernameset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usernameset_);
  }
  _impl_.usernameset_ = usernameset;
  if (usernameset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UserNameSet)
}
inline ::msg::CSRspUserNameSet* CSRspBody::release_usernameset() {
  
  ::msg::CSRspUserNameSet* temp = _impl_.usernameset_;
  _impl_.usernameset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUserNameSet* CSRspBody::unsafe_arena_release_usernameset() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UserNameSet)
  
  ::msg::CSRspUserNameSet* temp = _impl_.usernameset_;
  _impl_.usernameset_ = nullptr;
  return temp;
}
inline ::msg::CSRspUserNameSet* CSRspBody::_internal_mutable_usernameset() {
  
  if (_impl_.usernameset_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUserNameSet>(GetArenaForAllocation());
    _impl_.usernameset_ = p;
  }
  return _impl_.usernameset_;
}
inline ::msg::CSRspUserNameSet* CSRspBody::mutable_usernameset() {
  ::msg::CSRspUserNameSet* _msg = _internal_mutable_usernameset();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UserNameSet)
  return _msg;
}
inline void CSRspBody::set_allocated_usernameset(::msg::CSRspUserNameSet* usernameset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usernameset_);
  }
  if (usernameset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usernameset));
    if (message_arena != submessage_arena) {
      usernameset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usernameset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.usernameset_ = usernameset;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UserNameSet)
}

// .msg.CSRspUserNameRandom UserNameRandom = 17;
inline bool CSRspBody::_internal_has_usernamerandom() const {
  return this != internal_default_instance() && _impl_.usernamerandom_ != nullptr;
}
inline bool CSRspBody::has_usernamerandom() const {
  return _internal_has_usernamerandom();
}
inline const ::msg::CSRspUserNameRandom& CSRspBody::_internal_usernamerandom() const {
  const ::msg::CSRspUserNameRandom* p = _impl_.usernamerandom_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUserNameRandom&>(
      ::msg::_CSRspUserNameRandom_default_instance_);
}
inline const ::msg::CSRspUserNameRandom& CSRspBody::usernamerandom() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UserNameRandom)
  return _internal_usernamerandom();
}
inline void CSRspBody::unsafe_arena_set_allocated_usernamerandom(
    ::msg::CSRspUserNameRandom* usernamerandom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usernamerandom_);
  }
  _impl_.usernamerandom_ = usernamerandom;
  if (usernamerandom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UserNameRandom)
}
inline ::msg::CSRspUserNameRandom* CSRspBody::release_usernamerandom() {
  
  ::msg::CSRspUserNameRandom* temp = _impl_.usernamerandom_;
  _impl_.usernamerandom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUserNameRandom* CSRspBody::unsafe_arena_release_usernamerandom() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UserNameRandom)
  
  ::msg::CSRspUserNameRandom* temp = _impl_.usernamerandom_;
  _impl_.usernamerandom_ = nullptr;
  return temp;
}
inline ::msg::CSRspUserNameRandom* CSRspBody::_internal_mutable_usernamerandom() {
  
  if (_impl_.usernamerandom_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUserNameRandom>(GetArenaForAllocation());
    _impl_.usernamerandom_ = p;
  }
  return _impl_.usernamerandom_;
}
inline ::msg::CSRspUserNameRandom* CSRspBody::mutable_usernamerandom() {
  ::msg::CSRspUserNameRandom* _msg = _internal_mutable_usernamerandom();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UserNameRandom)
  return _msg;
}
inline void CSRspBody::set_allocated_usernamerandom(::msg::CSRspUserNameRandom* usernamerandom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usernamerandom_);
  }
  if (usernamerandom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usernamerandom));
    if (message_arena != submessage_arena) {
      usernamerandom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usernamerandom, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.usernamerandom_ = usernamerandom;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UserNameRandom)
}

// .msg.CSRspHeadPicSet HeadPicSet = 18;
inline bool CSRspBody::_internal_has_headpicset() const {
  return this != internal_default_instance() && _impl_.headpicset_ != nullptr;
}
inline bool CSRspBody::has_headpicset() const {
  return _internal_has_headpicset();
}
inline const ::msg::CSRspHeadPicSet& CSRspBody::_internal_headpicset() const {
  const ::msg::CSRspHeadPicSet* p = _impl_.headpicset_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspHeadPicSet&>(
      ::msg::_CSRspHeadPicSet_default_instance_);
}
inline const ::msg::CSRspHeadPicSet& CSRspBody::headpicset() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.HeadPicSet)
  return _internal_headpicset();
}
inline void CSRspBody::unsafe_arena_set_allocated_headpicset(
    ::msg::CSRspHeadPicSet* headpicset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.headpicset_);
  }
  _impl_.headpicset_ = headpicset;
  if (headpicset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.HeadPicSet)
}
inline ::msg::CSRspHeadPicSet* CSRspBody::release_headpicset() {
  
  ::msg::CSRspHeadPicSet* temp = _impl_.headpicset_;
  _impl_.headpicset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspHeadPicSet* CSRspBody::unsafe_arena_release_headpicset() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.HeadPicSet)
  
  ::msg::CSRspHeadPicSet* temp = _impl_.headpicset_;
  _impl_.headpicset_ = nullptr;
  return temp;
}
inline ::msg::CSRspHeadPicSet* CSRspBody::_internal_mutable_headpicset() {
  
  if (_impl_.headpicset_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspHeadPicSet>(GetArenaForAllocation());
    _impl_.headpicset_ = p;
  }
  return _impl_.headpicset_;
}
inline ::msg::CSRspHeadPicSet* CSRspBody::mutable_headpicset() {
  ::msg::CSRspHeadPicSet* _msg = _internal_mutable_headpicset();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.HeadPicSet)
  return _msg;
}
inline void CSRspBody::set_allocated_headpicset(::msg::CSRspHeadPicSet* headpicset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.headpicset_);
  }
  if (headpicset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(headpicset));
    if (message_arena != submessage_arena) {
      headpicset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, headpicset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.headpicset_ = headpicset;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.HeadPicSet)
}

// .msg.CSRspDressChessPlayer DressChessPlayer = 19;
inline bool CSRspBody::_internal_has_dresschessplayer() const {
  return this != internal_default_instance() && _impl_.dresschessplayer_ != nullptr;
}
inline bool CSRspBody::has_dresschessplayer() const {
  return _internal_has_dresschessplayer();
}
inline const ::msg::CSRspDressChessPlayer& CSRspBody::_internal_dresschessplayer() const {
  const ::msg::CSRspDressChessPlayer* p = _impl_.dresschessplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspDressChessPlayer&>(
      ::msg::_CSRspDressChessPlayer_default_instance_);
}
inline const ::msg::CSRspDressChessPlayer& CSRspBody::dresschessplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.DressChessPlayer)
  return _internal_dresschessplayer();
}
inline void CSRspBody::unsafe_arena_set_allocated_dresschessplayer(
    ::msg::CSRspDressChessPlayer* dresschessplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dresschessplayer_);
  }
  _impl_.dresschessplayer_ = dresschessplayer;
  if (dresschessplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.DressChessPlayer)
}
inline ::msg::CSRspDressChessPlayer* CSRspBody::release_dresschessplayer() {
  
  ::msg::CSRspDressChessPlayer* temp = _impl_.dresschessplayer_;
  _impl_.dresschessplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspDressChessPlayer* CSRspBody::unsafe_arena_release_dresschessplayer() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.DressChessPlayer)
  
  ::msg::CSRspDressChessPlayer* temp = _impl_.dresschessplayer_;
  _impl_.dresschessplayer_ = nullptr;
  return temp;
}
inline ::msg::CSRspDressChessPlayer* CSRspBody::_internal_mutable_dresschessplayer() {
  
  if (_impl_.dresschessplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspDressChessPlayer>(GetArenaForAllocation());
    _impl_.dresschessplayer_ = p;
  }
  return _impl_.dresschessplayer_;
}
inline ::msg::CSRspDressChessPlayer* CSRspBody::mutable_dresschessplayer() {
  ::msg::CSRspDressChessPlayer* _msg = _internal_mutable_dresschessplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.DressChessPlayer)
  return _msg;
}
inline void CSRspBody::set_allocated_dresschessplayer(::msg::CSRspDressChessPlayer* dresschessplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dresschessplayer_);
  }
  if (dresschessplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dresschessplayer));
    if (message_arena != submessage_arena) {
      dresschessplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dresschessplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dresschessplayer_ = dresschessplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.DressChessPlayer)
}

// .msg.CSRspDressScene DressScene = 20;
inline bool CSRspBody::_internal_has_dressscene() const {
  return this != internal_default_instance() && _impl_.dressscene_ != nullptr;
}
inline bool CSRspBody::has_dressscene() const {
  return _internal_has_dressscene();
}
inline const ::msg::CSRspDressScene& CSRspBody::_internal_dressscene() const {
  const ::msg::CSRspDressScene* p = _impl_.dressscene_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspDressScene&>(
      ::msg::_CSRspDressScene_default_instance_);
}
inline const ::msg::CSRspDressScene& CSRspBody::dressscene() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.DressScene)
  return _internal_dressscene();
}
inline void CSRspBody::unsafe_arena_set_allocated_dressscene(
    ::msg::CSRspDressScene* dressscene) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dressscene_);
  }
  _impl_.dressscene_ = dressscene;
  if (dressscene) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.DressScene)
}
inline ::msg::CSRspDressScene* CSRspBody::release_dressscene() {
  
  ::msg::CSRspDressScene* temp = _impl_.dressscene_;
  _impl_.dressscene_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspDressScene* CSRspBody::unsafe_arena_release_dressscene() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.DressScene)
  
  ::msg::CSRspDressScene* temp = _impl_.dressscene_;
  _impl_.dressscene_ = nullptr;
  return temp;
}
inline ::msg::CSRspDressScene* CSRspBody::_internal_mutable_dressscene() {
  
  if (_impl_.dressscene_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspDressScene>(GetArenaForAllocation());
    _impl_.dressscene_ = p;
  }
  return _impl_.dressscene_;
}
inline ::msg::CSRspDressScene* CSRspBody::mutable_dressscene() {
  ::msg::CSRspDressScene* _msg = _internal_mutable_dressscene();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.DressScene)
  return _msg;
}
inline void CSRspBody::set_allocated_dressscene(::msg::CSRspDressScene* dressscene) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dressscene_);
  }
  if (dressscene) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dressscene));
    if (message_arena != submessage_arena) {
      dressscene = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dressscene, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dressscene_ = dressscene;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.DressScene)
}

// .msg.CSRspPvpLogin PvpLogin = 21;
inline bool CSRspBody::_internal_has_pvplogin() const {
  return this != internal_default_instance() && _impl_.pvplogin_ != nullptr;
}
inline bool CSRspBody::has_pvplogin() const {
  return _internal_has_pvplogin();
}
inline const ::msg::CSRspPvpLogin& CSRspBody::_internal_pvplogin() const {
  const ::msg::CSRspPvpLogin* p = _impl_.pvplogin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPvpLogin&>(
      ::msg::_CSRspPvpLogin_default_instance_);
}
inline const ::msg::CSRspPvpLogin& CSRspBody::pvplogin() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PvpLogin)
  return _internal_pvplogin();
}
inline void CSRspBody::unsafe_arena_set_allocated_pvplogin(
    ::msg::CSRspPvpLogin* pvplogin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvplogin_);
  }
  _impl_.pvplogin_ = pvplogin;
  if (pvplogin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PvpLogin)
}
inline ::msg::CSRspPvpLogin* CSRspBody::release_pvplogin() {
  
  ::msg::CSRspPvpLogin* temp = _impl_.pvplogin_;
  _impl_.pvplogin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPvpLogin* CSRspBody::unsafe_arena_release_pvplogin() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PvpLogin)
  
  ::msg::CSRspPvpLogin* temp = _impl_.pvplogin_;
  _impl_.pvplogin_ = nullptr;
  return temp;
}
inline ::msg::CSRspPvpLogin* CSRspBody::_internal_mutable_pvplogin() {
  
  if (_impl_.pvplogin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPvpLogin>(GetArenaForAllocation());
    _impl_.pvplogin_ = p;
  }
  return _impl_.pvplogin_;
}
inline ::msg::CSRspPvpLogin* CSRspBody::mutable_pvplogin() {
  ::msg::CSRspPvpLogin* _msg = _internal_mutable_pvplogin();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PvpLogin)
  return _msg;
}
inline void CSRspBody::set_allocated_pvplogin(::msg::CSRspPvpLogin* pvplogin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvplogin_);
  }
  if (pvplogin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvplogin));
    if (message_arena != submessage_arena) {
      pvplogin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvplogin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvplogin_ = pvplogin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PvpLogin)
}

// .msg.CSRspPvpEnd PvpEnd = 24;
inline bool CSRspBody::_internal_has_pvpend() const {
  return this != internal_default_instance() && _impl_.pvpend_ != nullptr;
}
inline bool CSRspBody::has_pvpend() const {
  return _internal_has_pvpend();
}
inline const ::msg::CSRspPvpEnd& CSRspBody::_internal_pvpend() const {
  const ::msg::CSRspPvpEnd* p = _impl_.pvpend_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPvpEnd&>(
      ::msg::_CSRspPvpEnd_default_instance_);
}
inline const ::msg::CSRspPvpEnd& CSRspBody::pvpend() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PvpEnd)
  return _internal_pvpend();
}
inline void CSRspBody::unsafe_arena_set_allocated_pvpend(
    ::msg::CSRspPvpEnd* pvpend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpend_);
  }
  _impl_.pvpend_ = pvpend;
  if (pvpend) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PvpEnd)
}
inline ::msg::CSRspPvpEnd* CSRspBody::release_pvpend() {
  
  ::msg::CSRspPvpEnd* temp = _impl_.pvpend_;
  _impl_.pvpend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPvpEnd* CSRspBody::unsafe_arena_release_pvpend() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PvpEnd)
  
  ::msg::CSRspPvpEnd* temp = _impl_.pvpend_;
  _impl_.pvpend_ = nullptr;
  return temp;
}
inline ::msg::CSRspPvpEnd* CSRspBody::_internal_mutable_pvpend() {
  
  if (_impl_.pvpend_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPvpEnd>(GetArenaForAllocation());
    _impl_.pvpend_ = p;
  }
  return _impl_.pvpend_;
}
inline ::msg::CSRspPvpEnd* CSRspBody::mutable_pvpend() {
  ::msg::CSRspPvpEnd* _msg = _internal_mutable_pvpend();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PvpEnd)
  return _msg;
}
inline void CSRspBody::set_allocated_pvpend(::msg::CSRspPvpEnd* pvpend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpend_);
  }
  if (pvpend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvpend));
    if (message_arena != submessage_arena) {
      pvpend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpend, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpend_ = pvpend;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PvpEnd)
}

// .msg.CSRspPlayerFinish PlayerFinish = 25;
inline bool CSRspBody::_internal_has_playerfinish() const {
  return this != internal_default_instance() && _impl_.playerfinish_ != nullptr;
}
inline bool CSRspBody::has_playerfinish() const {
  return _internal_has_playerfinish();
}
inline const ::msg::CSRspPlayerFinish& CSRspBody::_internal_playerfinish() const {
  const ::msg::CSRspPlayerFinish* p = _impl_.playerfinish_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPlayerFinish&>(
      ::msg::_CSRspPlayerFinish_default_instance_);
}
inline const ::msg::CSRspPlayerFinish& CSRspBody::playerfinish() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PlayerFinish)
  return _internal_playerfinish();
}
inline void CSRspBody::unsafe_arena_set_allocated_playerfinish(
    ::msg::CSRspPlayerFinish* playerfinish) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerfinish_);
  }
  _impl_.playerfinish_ = playerfinish;
  if (playerfinish) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PlayerFinish)
}
inline ::msg::CSRspPlayerFinish* CSRspBody::release_playerfinish() {
  
  ::msg::CSRspPlayerFinish* temp = _impl_.playerfinish_;
  _impl_.playerfinish_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPlayerFinish* CSRspBody::unsafe_arena_release_playerfinish() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PlayerFinish)
  
  ::msg::CSRspPlayerFinish* temp = _impl_.playerfinish_;
  _impl_.playerfinish_ = nullptr;
  return temp;
}
inline ::msg::CSRspPlayerFinish* CSRspBody::_internal_mutable_playerfinish() {
  
  if (_impl_.playerfinish_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPlayerFinish>(GetArenaForAllocation());
    _impl_.playerfinish_ = p;
  }
  return _impl_.playerfinish_;
}
inline ::msg::CSRspPlayerFinish* CSRspBody::mutable_playerfinish() {
  ::msg::CSRspPlayerFinish* _msg = _internal_mutable_playerfinish();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PlayerFinish)
  return _msg;
}
inline void CSRspBody::set_allocated_playerfinish(::msg::CSRspPlayerFinish* playerfinish) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerfinish_);
  }
  if (playerfinish) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerfinish));
    if (message_arena != submessage_arena) {
      playerfinish = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerfinish, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerfinish_ = playerfinish;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PlayerFinish)
}

// .msg.CSRspPlayerQuit PlayerQuit = 26;
inline bool CSRspBody::_internal_has_playerquit() const {
  return this != internal_default_instance() && _impl_.playerquit_ != nullptr;
}
inline bool CSRspBody::has_playerquit() const {
  return _internal_has_playerquit();
}
inline const ::msg::CSRspPlayerQuit& CSRspBody::_internal_playerquit() const {
  const ::msg::CSRspPlayerQuit* p = _impl_.playerquit_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPlayerQuit&>(
      ::msg::_CSRspPlayerQuit_default_instance_);
}
inline const ::msg::CSRspPlayerQuit& CSRspBody::playerquit() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PlayerQuit)
  return _internal_playerquit();
}
inline void CSRspBody::unsafe_arena_set_allocated_playerquit(
    ::msg::CSRspPlayerQuit* playerquit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerquit_);
  }
  _impl_.playerquit_ = playerquit;
  if (playerquit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PlayerQuit)
}
inline ::msg::CSRspPlayerQuit* CSRspBody::release_playerquit() {
  
  ::msg::CSRspPlayerQuit* temp = _impl_.playerquit_;
  _impl_.playerquit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPlayerQuit* CSRspBody::unsafe_arena_release_playerquit() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PlayerQuit)
  
  ::msg::CSRspPlayerQuit* temp = _impl_.playerquit_;
  _impl_.playerquit_ = nullptr;
  return temp;
}
inline ::msg::CSRspPlayerQuit* CSRspBody::_internal_mutable_playerquit() {
  
  if (_impl_.playerquit_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPlayerQuit>(GetArenaForAllocation());
    _impl_.playerquit_ = p;
  }
  return _impl_.playerquit_;
}
inline ::msg::CSRspPlayerQuit* CSRspBody::mutable_playerquit() {
  ::msg::CSRspPlayerQuit* _msg = _internal_mutable_playerquit();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PlayerQuit)
  return _msg;
}
inline void CSRspBody::set_allocated_playerquit(::msg::CSRspPlayerQuit* playerquit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerquit_);
  }
  if (playerquit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerquit));
    if (message_arena != submessage_arena) {
      playerquit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerquit, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerquit_ = playerquit;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PlayerQuit)
}

// .msg.CSRspSellItem SellItem = 27;
inline bool CSRspBody::_internal_has_sellitem() const {
  return this != internal_default_instance() && _impl_.sellitem_ != nullptr;
}
inline bool CSRspBody::has_sellitem() const {
  return _internal_has_sellitem();
}
inline const ::msg::CSRspSellItem& CSRspBody::_internal_sellitem() const {
  const ::msg::CSRspSellItem* p = _impl_.sellitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSellItem&>(
      ::msg::_CSRspSellItem_default_instance_);
}
inline const ::msg::CSRspSellItem& CSRspBody::sellitem() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SellItem)
  return _internal_sellitem();
}
inline void CSRspBody::unsafe_arena_set_allocated_sellitem(
    ::msg::CSRspSellItem* sellitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sellitem_);
  }
  _impl_.sellitem_ = sellitem;
  if (sellitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SellItem)
}
inline ::msg::CSRspSellItem* CSRspBody::release_sellitem() {
  
  ::msg::CSRspSellItem* temp = _impl_.sellitem_;
  _impl_.sellitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSellItem* CSRspBody::unsafe_arena_release_sellitem() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SellItem)
  
  ::msg::CSRspSellItem* temp = _impl_.sellitem_;
  _impl_.sellitem_ = nullptr;
  return temp;
}
inline ::msg::CSRspSellItem* CSRspBody::_internal_mutable_sellitem() {
  
  if (_impl_.sellitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSellItem>(GetArenaForAllocation());
    _impl_.sellitem_ = p;
  }
  return _impl_.sellitem_;
}
inline ::msg::CSRspSellItem* CSRspBody::mutable_sellitem() {
  ::msg::CSRspSellItem* _msg = _internal_mutable_sellitem();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SellItem)
  return _msg;
}
inline void CSRspBody::set_allocated_sellitem(::msg::CSRspSellItem* sellitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sellitem_);
  }
  if (sellitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sellitem));
    if (message_arena != submessage_arena) {
      sellitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sellitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sellitem_ = sellitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SellItem)
}

// .msg.CSRspGetEvalAward GetEvalAward = 28;
inline bool CSRspBody::_internal_has_getevalaward() const {
  return this != internal_default_instance() && _impl_.getevalaward_ != nullptr;
}
inline bool CSRspBody::has_getevalaward() const {
  return _internal_has_getevalaward();
}
inline const ::msg::CSRspGetEvalAward& CSRspBody::_internal_getevalaward() const {
  const ::msg::CSRspGetEvalAward* p = _impl_.getevalaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetEvalAward&>(
      ::msg::_CSRspGetEvalAward_default_instance_);
}
inline const ::msg::CSRspGetEvalAward& CSRspBody::getevalaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetEvalAward)
  return _internal_getevalaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_getevalaward(
    ::msg::CSRspGetEvalAward* getevalaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getevalaward_);
  }
  _impl_.getevalaward_ = getevalaward;
  if (getevalaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetEvalAward)
}
inline ::msg::CSRspGetEvalAward* CSRspBody::release_getevalaward() {
  
  ::msg::CSRspGetEvalAward* temp = _impl_.getevalaward_;
  _impl_.getevalaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetEvalAward* CSRspBody::unsafe_arena_release_getevalaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetEvalAward)
  
  ::msg::CSRspGetEvalAward* temp = _impl_.getevalaward_;
  _impl_.getevalaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetEvalAward* CSRspBody::_internal_mutable_getevalaward() {
  
  if (_impl_.getevalaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetEvalAward>(GetArenaForAllocation());
    _impl_.getevalaward_ = p;
  }
  return _impl_.getevalaward_;
}
inline ::msg::CSRspGetEvalAward* CSRspBody::mutable_getevalaward() {
  ::msg::CSRspGetEvalAward* _msg = _internal_mutable_getevalaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetEvalAward)
  return _msg;
}
inline void CSRspBody::set_allocated_getevalaward(::msg::CSRspGetEvalAward* getevalaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getevalaward_);
  }
  if (getevalaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getevalaward));
    if (message_arena != submessage_arena) {
      getevalaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getevalaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getevalaward_ = getevalaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetEvalAward)
}

// .msg.CSRspUseChessPlayer UseChessPlayer = 29;
inline bool CSRspBody::_internal_has_usechessplayer() const {
  return this != internal_default_instance() && _impl_.usechessplayer_ != nullptr;
}
inline bool CSRspBody::has_usechessplayer() const {
  return _internal_has_usechessplayer();
}
inline const ::msg::CSRspUseChessPlayer& CSRspBody::_internal_usechessplayer() const {
  const ::msg::CSRspUseChessPlayer* p = _impl_.usechessplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUseChessPlayer&>(
      ::msg::_CSRspUseChessPlayer_default_instance_);
}
inline const ::msg::CSRspUseChessPlayer& CSRspBody::usechessplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UseChessPlayer)
  return _internal_usechessplayer();
}
inline void CSRspBody::unsafe_arena_set_allocated_usechessplayer(
    ::msg::CSRspUseChessPlayer* usechessplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usechessplayer_);
  }
  _impl_.usechessplayer_ = usechessplayer;
  if (usechessplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UseChessPlayer)
}
inline ::msg::CSRspUseChessPlayer* CSRspBody::release_usechessplayer() {
  
  ::msg::CSRspUseChessPlayer* temp = _impl_.usechessplayer_;
  _impl_.usechessplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUseChessPlayer* CSRspBody::unsafe_arena_release_usechessplayer() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UseChessPlayer)
  
  ::msg::CSRspUseChessPlayer* temp = _impl_.usechessplayer_;
  _impl_.usechessplayer_ = nullptr;
  return temp;
}
inline ::msg::CSRspUseChessPlayer* CSRspBody::_internal_mutable_usechessplayer() {
  
  if (_impl_.usechessplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUseChessPlayer>(GetArenaForAllocation());
    _impl_.usechessplayer_ = p;
  }
  return _impl_.usechessplayer_;
}
inline ::msg::CSRspUseChessPlayer* CSRspBody::mutable_usechessplayer() {
  ::msg::CSRspUseChessPlayer* _msg = _internal_mutable_usechessplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UseChessPlayer)
  return _msg;
}
inline void CSRspBody::set_allocated_usechessplayer(::msg::CSRspUseChessPlayer* usechessplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usechessplayer_);
  }
  if (usechessplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usechessplayer));
    if (message_arena != submessage_arena) {
      usechessplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usechessplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.usechessplayer_ = usechessplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UseChessPlayer)
}

// .msg.CSRspGuidReport GuidReport = 30;
inline bool CSRspBody::_internal_has_guidreport() const {
  return this != internal_default_instance() && _impl_.guidreport_ != nullptr;
}
inline bool CSRspBody::has_guidreport() const {
  return _internal_has_guidreport();
}
inline const ::msg::CSRspGuidReport& CSRspBody::_internal_guidreport() const {
  const ::msg::CSRspGuidReport* p = _impl_.guidreport_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGuidReport&>(
      ::msg::_CSRspGuidReport_default_instance_);
}
inline const ::msg::CSRspGuidReport& CSRspBody::guidreport() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GuidReport)
  return _internal_guidreport();
}
inline void CSRspBody::unsafe_arena_set_allocated_guidreport(
    ::msg::CSRspGuidReport* guidreport) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guidreport_);
  }
  _impl_.guidreport_ = guidreport;
  if (guidreport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GuidReport)
}
inline ::msg::CSRspGuidReport* CSRspBody::release_guidreport() {
  
  ::msg::CSRspGuidReport* temp = _impl_.guidreport_;
  _impl_.guidreport_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGuidReport* CSRspBody::unsafe_arena_release_guidreport() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GuidReport)
  
  ::msg::CSRspGuidReport* temp = _impl_.guidreport_;
  _impl_.guidreport_ = nullptr;
  return temp;
}
inline ::msg::CSRspGuidReport* CSRspBody::_internal_mutable_guidreport() {
  
  if (_impl_.guidreport_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGuidReport>(GetArenaForAllocation());
    _impl_.guidreport_ = p;
  }
  return _impl_.guidreport_;
}
inline ::msg::CSRspGuidReport* CSRspBody::mutable_guidreport() {
  ::msg::CSRspGuidReport* _msg = _internal_mutable_guidreport();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GuidReport)
  return _msg;
}
inline void CSRspBody::set_allocated_guidreport(::msg::CSRspGuidReport* guidreport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guidreport_);
  }
  if (guidreport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guidreport));
    if (message_arena != submessage_arena) {
      guidreport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guidreport, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guidreport_ = guidreport;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GuidReport)
}

// .msg.CSRspGetCodeAward GetCodeAward = 31;
inline bool CSRspBody::_internal_has_getcodeaward() const {
  return this != internal_default_instance() && _impl_.getcodeaward_ != nullptr;
}
inline bool CSRspBody::has_getcodeaward() const {
  return _internal_has_getcodeaward();
}
inline const ::msg::CSRspGetCodeAward& CSRspBody::_internal_getcodeaward() const {
  const ::msg::CSRspGetCodeAward* p = _impl_.getcodeaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetCodeAward&>(
      ::msg::_CSRspGetCodeAward_default_instance_);
}
inline const ::msg::CSRspGetCodeAward& CSRspBody::getcodeaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetCodeAward)
  return _internal_getcodeaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_getcodeaward(
    ::msg::CSRspGetCodeAward* getcodeaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getcodeaward_);
  }
  _impl_.getcodeaward_ = getcodeaward;
  if (getcodeaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetCodeAward)
}
inline ::msg::CSRspGetCodeAward* CSRspBody::release_getcodeaward() {
  
  ::msg::CSRspGetCodeAward* temp = _impl_.getcodeaward_;
  _impl_.getcodeaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetCodeAward* CSRspBody::unsafe_arena_release_getcodeaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetCodeAward)
  
  ::msg::CSRspGetCodeAward* temp = _impl_.getcodeaward_;
  _impl_.getcodeaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetCodeAward* CSRspBody::_internal_mutable_getcodeaward() {
  
  if (_impl_.getcodeaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetCodeAward>(GetArenaForAllocation());
    _impl_.getcodeaward_ = p;
  }
  return _impl_.getcodeaward_;
}
inline ::msg::CSRspGetCodeAward* CSRspBody::mutable_getcodeaward() {
  ::msg::CSRspGetCodeAward* _msg = _internal_mutable_getcodeaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetCodeAward)
  return _msg;
}
inline void CSRspBody::set_allocated_getcodeaward(::msg::CSRspGetCodeAward* getcodeaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getcodeaward_);
  }
  if (getcodeaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getcodeaward));
    if (message_arena != submessage_arena) {
      getcodeaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getcodeaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getcodeaward_ = getcodeaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetCodeAward)
}

// .msg.CSRspRoundReport RoundReport = 32;
inline bool CSRspBody::_internal_has_roundreport() const {
  return this != internal_default_instance() && _impl_.roundreport_ != nullptr;
}
inline bool CSRspBody::has_roundreport() const {
  return _internal_has_roundreport();
}
inline const ::msg::CSRspRoundReport& CSRspBody::_internal_roundreport() const {
  const ::msg::CSRspRoundReport* p = _impl_.roundreport_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRoundReport&>(
      ::msg::_CSRspRoundReport_default_instance_);
}
inline const ::msg::CSRspRoundReport& CSRspBody::roundreport() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RoundReport)
  return _internal_roundreport();
}
inline void CSRspBody::unsafe_arena_set_allocated_roundreport(
    ::msg::CSRspRoundReport* roundreport) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roundreport_);
  }
  _impl_.roundreport_ = roundreport;
  if (roundreport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RoundReport)
}
inline ::msg::CSRspRoundReport* CSRspBody::release_roundreport() {
  
  ::msg::CSRspRoundReport* temp = _impl_.roundreport_;
  _impl_.roundreport_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRoundReport* CSRspBody::unsafe_arena_release_roundreport() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RoundReport)
  
  ::msg::CSRspRoundReport* temp = _impl_.roundreport_;
  _impl_.roundreport_ = nullptr;
  return temp;
}
inline ::msg::CSRspRoundReport* CSRspBody::_internal_mutable_roundreport() {
  
  if (_impl_.roundreport_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRoundReport>(GetArenaForAllocation());
    _impl_.roundreport_ = p;
  }
  return _impl_.roundreport_;
}
inline ::msg::CSRspRoundReport* CSRspBody::mutable_roundreport() {
  ::msg::CSRspRoundReport* _msg = _internal_mutable_roundreport();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RoundReport)
  return _msg;
}
inline void CSRspBody::set_allocated_roundreport(::msg::CSRspRoundReport* roundreport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roundreport_);
  }
  if (roundreport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roundreport));
    if (message_arena != submessage_arena) {
      roundreport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roundreport, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.roundreport_ = roundreport;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RoundReport)
}

// .msg.CSRspLoadingProgress LoadingProgress = 33;
inline bool CSRspBody::_internal_has_loadingprogress() const {
  return this != internal_default_instance() && _impl_.loadingprogress_ != nullptr;
}
inline bool CSRspBody::has_loadingprogress() const {
  return _internal_has_loadingprogress();
}
inline const ::msg::CSRspLoadingProgress& CSRspBody::_internal_loadingprogress() const {
  const ::msg::CSRspLoadingProgress* p = _impl_.loadingprogress_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspLoadingProgress&>(
      ::msg::_CSRspLoadingProgress_default_instance_);
}
inline const ::msg::CSRspLoadingProgress& CSRspBody::loadingprogress() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.LoadingProgress)
  return _internal_loadingprogress();
}
inline void CSRspBody::unsafe_arena_set_allocated_loadingprogress(
    ::msg::CSRspLoadingProgress* loadingprogress) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loadingprogress_);
  }
  _impl_.loadingprogress_ = loadingprogress;
  if (loadingprogress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.LoadingProgress)
}
inline ::msg::CSRspLoadingProgress* CSRspBody::release_loadingprogress() {
  
  ::msg::CSRspLoadingProgress* temp = _impl_.loadingprogress_;
  _impl_.loadingprogress_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspLoadingProgress* CSRspBody::unsafe_arena_release_loadingprogress() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.LoadingProgress)
  
  ::msg::CSRspLoadingProgress* temp = _impl_.loadingprogress_;
  _impl_.loadingprogress_ = nullptr;
  return temp;
}
inline ::msg::CSRspLoadingProgress* CSRspBody::_internal_mutable_loadingprogress() {
  
  if (_impl_.loadingprogress_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspLoadingProgress>(GetArenaForAllocation());
    _impl_.loadingprogress_ = p;
  }
  return _impl_.loadingprogress_;
}
inline ::msg::CSRspLoadingProgress* CSRspBody::mutable_loadingprogress() {
  ::msg::CSRspLoadingProgress* _msg = _internal_mutable_loadingprogress();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.LoadingProgress)
  return _msg;
}
inline void CSRspBody::set_allocated_loadingprogress(::msg::CSRspLoadingProgress* loadingprogress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loadingprogress_);
  }
  if (loadingprogress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loadingprogress));
    if (message_arena != submessage_arena) {
      loadingprogress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loadingprogress, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.loadingprogress_ = loadingprogress;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.LoadingProgress)
}

// .msg.CSRspPvpChat PvpChat = 34;
inline bool CSRspBody::_internal_has_pvpchat() const {
  return this != internal_default_instance() && _impl_.pvpchat_ != nullptr;
}
inline bool CSRspBody::has_pvpchat() const {
  return _internal_has_pvpchat();
}
inline const ::msg::CSRspPvpChat& CSRspBody::_internal_pvpchat() const {
  const ::msg::CSRspPvpChat* p = _impl_.pvpchat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPvpChat&>(
      ::msg::_CSRspPvpChat_default_instance_);
}
inline const ::msg::CSRspPvpChat& CSRspBody::pvpchat() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PvpChat)
  return _internal_pvpchat();
}
inline void CSRspBody::unsafe_arena_set_allocated_pvpchat(
    ::msg::CSRspPvpChat* pvpchat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpchat_);
  }
  _impl_.pvpchat_ = pvpchat;
  if (pvpchat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PvpChat)
}
inline ::msg::CSRspPvpChat* CSRspBody::release_pvpchat() {
  
  ::msg::CSRspPvpChat* temp = _impl_.pvpchat_;
  _impl_.pvpchat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPvpChat* CSRspBody::unsafe_arena_release_pvpchat() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PvpChat)
  
  ::msg::CSRspPvpChat* temp = _impl_.pvpchat_;
  _impl_.pvpchat_ = nullptr;
  return temp;
}
inline ::msg::CSRspPvpChat* CSRspBody::_internal_mutable_pvpchat() {
  
  if (_impl_.pvpchat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPvpChat>(GetArenaForAllocation());
    _impl_.pvpchat_ = p;
  }
  return _impl_.pvpchat_;
}
inline ::msg::CSRspPvpChat* CSRspBody::mutable_pvpchat() {
  ::msg::CSRspPvpChat* _msg = _internal_mutable_pvpchat();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PvpChat)
  return _msg;
}
inline void CSRspBody::set_allocated_pvpchat(::msg::CSRspPvpChat* pvpchat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpchat_);
  }
  if (pvpchat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvpchat));
    if (message_arena != submessage_arena) {
      pvpchat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpchat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpchat_ = pvpchat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PvpChat)
}

// .msg.CSRspChessCombine ChessCombine = 35;
inline bool CSRspBody::_internal_has_chesscombine() const {
  return this != internal_default_instance() && _impl_.chesscombine_ != nullptr;
}
inline bool CSRspBody::has_chesscombine() const {
  return _internal_has_chesscombine();
}
inline const ::msg::CSRspChessCombine& CSRspBody::_internal_chesscombine() const {
  const ::msg::CSRspChessCombine* p = _impl_.chesscombine_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspChessCombine&>(
      ::msg::_CSRspChessCombine_default_instance_);
}
inline const ::msg::CSRspChessCombine& CSRspBody::chesscombine() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ChessCombine)
  return _internal_chesscombine();
}
inline void CSRspBody::unsafe_arena_set_allocated_chesscombine(
    ::msg::CSRspChessCombine* chesscombine) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chesscombine_);
  }
  _impl_.chesscombine_ = chesscombine;
  if (chesscombine) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ChessCombine)
}
inline ::msg::CSRspChessCombine* CSRspBody::release_chesscombine() {
  
  ::msg::CSRspChessCombine* temp = _impl_.chesscombine_;
  _impl_.chesscombine_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspChessCombine* CSRspBody::unsafe_arena_release_chesscombine() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ChessCombine)
  
  ::msg::CSRspChessCombine* temp = _impl_.chesscombine_;
  _impl_.chesscombine_ = nullptr;
  return temp;
}
inline ::msg::CSRspChessCombine* CSRspBody::_internal_mutable_chesscombine() {
  
  if (_impl_.chesscombine_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspChessCombine>(GetArenaForAllocation());
    _impl_.chesscombine_ = p;
  }
  return _impl_.chesscombine_;
}
inline ::msg::CSRspChessCombine* CSRspBody::mutable_chesscombine() {
  ::msg::CSRspChessCombine* _msg = _internal_mutable_chesscombine();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ChessCombine)
  return _msg;
}
inline void CSRspBody::set_allocated_chesscombine(::msg::CSRspChessCombine* chesscombine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chesscombine_);
  }
  if (chesscombine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chesscombine));
    if (message_arena != submessage_arena) {
      chesscombine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chesscombine, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chesscombine_ = chesscombine;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ChessCombine)
}

// .msg.CSRspExpose Expose = 36;
inline bool CSRspBody::_internal_has_expose() const {
  return this != internal_default_instance() && _impl_.expose_ != nullptr;
}
inline bool CSRspBody::has_expose() const {
  return _internal_has_expose();
}
inline const ::msg::CSRspExpose& CSRspBody::_internal_expose() const {
  const ::msg::CSRspExpose* p = _impl_.expose_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspExpose&>(
      ::msg::_CSRspExpose_default_instance_);
}
inline const ::msg::CSRspExpose& CSRspBody::expose() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.Expose)
  return _internal_expose();
}
inline void CSRspBody::unsafe_arena_set_allocated_expose(
    ::msg::CSRspExpose* expose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expose_);
  }
  _impl_.expose_ = expose;
  if (expose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.Expose)
}
inline ::msg::CSRspExpose* CSRspBody::release_expose() {
  
  ::msg::CSRspExpose* temp = _impl_.expose_;
  _impl_.expose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspExpose* CSRspBody::unsafe_arena_release_expose() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.Expose)
  
  ::msg::CSRspExpose* temp = _impl_.expose_;
  _impl_.expose_ = nullptr;
  return temp;
}
inline ::msg::CSRspExpose* CSRspBody::_internal_mutable_expose() {
  
  if (_impl_.expose_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspExpose>(GetArenaForAllocation());
    _impl_.expose_ = p;
  }
  return _impl_.expose_;
}
inline ::msg::CSRspExpose* CSRspBody::mutable_expose() {
  ::msg::CSRspExpose* _msg = _internal_mutable_expose();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.Expose)
  return _msg;
}
inline void CSRspBody::set_allocated_expose(::msg::CSRspExpose* expose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expose_);
  }
  if (expose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expose));
    if (message_arena != submessage_arena) {
      expose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expose_ = expose;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.Expose)
}

// .msg.CSRspApplyOrderId ApplyOrderId = 37;
inline bool CSRspBody::_internal_has_applyorderid() const {
  return this != internal_default_instance() && _impl_.applyorderid_ != nullptr;
}
inline bool CSRspBody::has_applyorderid() const {
  return _internal_has_applyorderid();
}
inline const ::msg::CSRspApplyOrderId& CSRspBody::_internal_applyorderid() const {
  const ::msg::CSRspApplyOrderId* p = _impl_.applyorderid_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspApplyOrderId&>(
      ::msg::_CSRspApplyOrderId_default_instance_);
}
inline const ::msg::CSRspApplyOrderId& CSRspBody::applyorderid() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ApplyOrderId)
  return _internal_applyorderid();
}
inline void CSRspBody::unsafe_arena_set_allocated_applyorderid(
    ::msg::CSRspApplyOrderId* applyorderid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.applyorderid_);
  }
  _impl_.applyorderid_ = applyorderid;
  if (applyorderid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ApplyOrderId)
}
inline ::msg::CSRspApplyOrderId* CSRspBody::release_applyorderid() {
  
  ::msg::CSRspApplyOrderId* temp = _impl_.applyorderid_;
  _impl_.applyorderid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspApplyOrderId* CSRspBody::unsafe_arena_release_applyorderid() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ApplyOrderId)
  
  ::msg::CSRspApplyOrderId* temp = _impl_.applyorderid_;
  _impl_.applyorderid_ = nullptr;
  return temp;
}
inline ::msg::CSRspApplyOrderId* CSRspBody::_internal_mutable_applyorderid() {
  
  if (_impl_.applyorderid_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspApplyOrderId>(GetArenaForAllocation());
    _impl_.applyorderid_ = p;
  }
  return _impl_.applyorderid_;
}
inline ::msg::CSRspApplyOrderId* CSRspBody::mutable_applyorderid() {
  ::msg::CSRspApplyOrderId* _msg = _internal_mutable_applyorderid();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ApplyOrderId)
  return _msg;
}
inline void CSRspBody::set_allocated_applyorderid(::msg::CSRspApplyOrderId* applyorderid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.applyorderid_);
  }
  if (applyorderid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applyorderid));
    if (message_arena != submessage_arena) {
      applyorderid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applyorderid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.applyorderid_ = applyorderid;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ApplyOrderId)
}

// .msg.CSRspReportOrderInfo ReportOrderInfo = 38;
inline bool CSRspBody::_internal_has_reportorderinfo() const {
  return this != internal_default_instance() && _impl_.reportorderinfo_ != nullptr;
}
inline bool CSRspBody::has_reportorderinfo() const {
  return _internal_has_reportorderinfo();
}
inline const ::msg::CSRspReportOrderInfo& CSRspBody::_internal_reportorderinfo() const {
  const ::msg::CSRspReportOrderInfo* p = _impl_.reportorderinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspReportOrderInfo&>(
      ::msg::_CSRspReportOrderInfo_default_instance_);
}
inline const ::msg::CSRspReportOrderInfo& CSRspBody::reportorderinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ReportOrderInfo)
  return _internal_reportorderinfo();
}
inline void CSRspBody::unsafe_arena_set_allocated_reportorderinfo(
    ::msg::CSRspReportOrderInfo* reportorderinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportorderinfo_);
  }
  _impl_.reportorderinfo_ = reportorderinfo;
  if (reportorderinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ReportOrderInfo)
}
inline ::msg::CSRspReportOrderInfo* CSRspBody::release_reportorderinfo() {
  
  ::msg::CSRspReportOrderInfo* temp = _impl_.reportorderinfo_;
  _impl_.reportorderinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspReportOrderInfo* CSRspBody::unsafe_arena_release_reportorderinfo() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ReportOrderInfo)
  
  ::msg::CSRspReportOrderInfo* temp = _impl_.reportorderinfo_;
  _impl_.reportorderinfo_ = nullptr;
  return temp;
}
inline ::msg::CSRspReportOrderInfo* CSRspBody::_internal_mutable_reportorderinfo() {
  
  if (_impl_.reportorderinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspReportOrderInfo>(GetArenaForAllocation());
    _impl_.reportorderinfo_ = p;
  }
  return _impl_.reportorderinfo_;
}
inline ::msg::CSRspReportOrderInfo* CSRspBody::mutable_reportorderinfo() {
  ::msg::CSRspReportOrderInfo* _msg = _internal_mutable_reportorderinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ReportOrderInfo)
  return _msg;
}
inline void CSRspBody::set_allocated_reportorderinfo(::msg::CSRspReportOrderInfo* reportorderinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportorderinfo_);
  }
  if (reportorderinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reportorderinfo));
    if (message_arena != submessage_arena) {
      reportorderinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reportorderinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reportorderinfo_ = reportorderinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ReportOrderInfo)
}

// .msg.CSRspSetItem SetItem = 39;
inline bool CSRspBody::_internal_has_setitem() const {
  return this != internal_default_instance() && _impl_.setitem_ != nullptr;
}
inline bool CSRspBody::has_setitem() const {
  return _internal_has_setitem();
}
inline const ::msg::CSRspSetItem& CSRspBody::_internal_setitem() const {
  const ::msg::CSRspSetItem* p = _impl_.setitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSetItem&>(
      ::msg::_CSRspSetItem_default_instance_);
}
inline const ::msg::CSRspSetItem& CSRspBody::setitem() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SetItem)
  return _internal_setitem();
}
inline void CSRspBody::unsafe_arena_set_allocated_setitem(
    ::msg::CSRspSetItem* setitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setitem_);
  }
  _impl_.setitem_ = setitem;
  if (setitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SetItem)
}
inline ::msg::CSRspSetItem* CSRspBody::release_setitem() {
  
  ::msg::CSRspSetItem* temp = _impl_.setitem_;
  _impl_.setitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSetItem* CSRspBody::unsafe_arena_release_setitem() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SetItem)
  
  ::msg::CSRspSetItem* temp = _impl_.setitem_;
  _impl_.setitem_ = nullptr;
  return temp;
}
inline ::msg::CSRspSetItem* CSRspBody::_internal_mutable_setitem() {
  
  if (_impl_.setitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSetItem>(GetArenaForAllocation());
    _impl_.setitem_ = p;
  }
  return _impl_.setitem_;
}
inline ::msg::CSRspSetItem* CSRspBody::mutable_setitem() {
  ::msg::CSRspSetItem* _msg = _internal_mutable_setitem();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SetItem)
  return _msg;
}
inline void CSRspBody::set_allocated_setitem(::msg::CSRspSetItem* setitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setitem_);
  }
  if (setitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setitem));
    if (message_arena != submessage_arena) {
      setitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setitem_ = setitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SetItem)
}

// .msg.CSRspUnsetItem UnsetItem = 40;
inline bool CSRspBody::_internal_has_unsetitem() const {
  return this != internal_default_instance() && _impl_.unsetitem_ != nullptr;
}
inline bool CSRspBody::has_unsetitem() const {
  return _internal_has_unsetitem();
}
inline const ::msg::CSRspUnsetItem& CSRspBody::_internal_unsetitem() const {
  const ::msg::CSRspUnsetItem* p = _impl_.unsetitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUnsetItem&>(
      ::msg::_CSRspUnsetItem_default_instance_);
}
inline const ::msg::CSRspUnsetItem& CSRspBody::unsetitem() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UnsetItem)
  return _internal_unsetitem();
}
inline void CSRspBody::unsafe_arena_set_allocated_unsetitem(
    ::msg::CSRspUnsetItem* unsetitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetitem_);
  }
  _impl_.unsetitem_ = unsetitem;
  if (unsetitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UnsetItem)
}
inline ::msg::CSRspUnsetItem* CSRspBody::release_unsetitem() {
  
  ::msg::CSRspUnsetItem* temp = _impl_.unsetitem_;
  _impl_.unsetitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUnsetItem* CSRspBody::unsafe_arena_release_unsetitem() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UnsetItem)
  
  ::msg::CSRspUnsetItem* temp = _impl_.unsetitem_;
  _impl_.unsetitem_ = nullptr;
  return temp;
}
inline ::msg::CSRspUnsetItem* CSRspBody::_internal_mutable_unsetitem() {
  
  if (_impl_.unsetitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUnsetItem>(GetArenaForAllocation());
    _impl_.unsetitem_ = p;
  }
  return _impl_.unsetitem_;
}
inline ::msg::CSRspUnsetItem* CSRspBody::mutable_unsetitem() {
  ::msg::CSRspUnsetItem* _msg = _internal_mutable_unsetitem();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UnsetItem)
  return _msg;
}
inline void CSRspBody::set_allocated_unsetitem(::msg::CSRspUnsetItem* unsetitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetitem_);
  }
  if (unsetitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unsetitem));
    if (message_arena != submessage_arena) {
      unsetitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsetitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unsetitem_ = unsetitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UnsetItem)
}

// .msg.CSRspRandomItem RandomItem = 41;
inline bool CSRspBody::_internal_has_randomitem() const {
  return this != internal_default_instance() && _impl_.randomitem_ != nullptr;
}
inline bool CSRspBody::has_randomitem() const {
  return _internal_has_randomitem();
}
inline const ::msg::CSRspRandomItem& CSRspBody::_internal_randomitem() const {
  const ::msg::CSRspRandomItem* p = _impl_.randomitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRandomItem&>(
      ::msg::_CSRspRandomItem_default_instance_);
}
inline const ::msg::CSRspRandomItem& CSRspBody::randomitem() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RandomItem)
  return _internal_randomitem();
}
inline void CSRspBody::unsafe_arena_set_allocated_randomitem(
    ::msg::CSRspRandomItem* randomitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.randomitem_);
  }
  _impl_.randomitem_ = randomitem;
  if (randomitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RandomItem)
}
inline ::msg::CSRspRandomItem* CSRspBody::release_randomitem() {
  
  ::msg::CSRspRandomItem* temp = _impl_.randomitem_;
  _impl_.randomitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRandomItem* CSRspBody::unsafe_arena_release_randomitem() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RandomItem)
  
  ::msg::CSRspRandomItem* temp = _impl_.randomitem_;
  _impl_.randomitem_ = nullptr;
  return temp;
}
inline ::msg::CSRspRandomItem* CSRspBody::_internal_mutable_randomitem() {
  
  if (_impl_.randomitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRandomItem>(GetArenaForAllocation());
    _impl_.randomitem_ = p;
  }
  return _impl_.randomitem_;
}
inline ::msg::CSRspRandomItem* CSRspBody::mutable_randomitem() {
  ::msg::CSRspRandomItem* _msg = _internal_mutable_randomitem();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RandomItem)
  return _msg;
}
inline void CSRspBody::set_allocated_randomitem(::msg::CSRspRandomItem* randomitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.randomitem_);
  }
  if (randomitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(randomitem));
    if (message_arena != submessage_arena) {
      randomitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, randomitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.randomitem_ = randomitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RandomItem)
}

// .msg.CSRspChat Chat = 42;
inline bool CSRspBody::_internal_has_chat() const {
  return this != internal_default_instance() && _impl_.chat_ != nullptr;
}
inline bool CSRspBody::has_chat() const {
  return _internal_has_chat();
}
inline const ::msg::CSRspChat& CSRspBody::_internal_chat() const {
  const ::msg::CSRspChat* p = _impl_.chat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspChat&>(
      ::msg::_CSRspChat_default_instance_);
}
inline const ::msg::CSRspChat& CSRspBody::chat() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.Chat)
  return _internal_chat();
}
inline void CSRspBody::unsafe_arena_set_allocated_chat(
    ::msg::CSRspChat* chat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chat_);
  }
  _impl_.chat_ = chat;
  if (chat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.Chat)
}
inline ::msg::CSRspChat* CSRspBody::release_chat() {
  
  ::msg::CSRspChat* temp = _impl_.chat_;
  _impl_.chat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspChat* CSRspBody::unsafe_arena_release_chat() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.Chat)
  
  ::msg::CSRspChat* temp = _impl_.chat_;
  _impl_.chat_ = nullptr;
  return temp;
}
inline ::msg::CSRspChat* CSRspBody::_internal_mutable_chat() {
  
  if (_impl_.chat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspChat>(GetArenaForAllocation());
    _impl_.chat_ = p;
  }
  return _impl_.chat_;
}
inline ::msg::CSRspChat* CSRspBody::mutable_chat() {
  ::msg::CSRspChat* _msg = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.Chat)
  return _msg;
}
inline void CSRspBody::set_allocated_chat(::msg::CSRspChat* chat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chat_);
  }
  if (chat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat));
    if (message_arena != submessage_arena) {
      chat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chat_ = chat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.Chat)
}

// .msg.CSRspSetChessPlayer SetChessPlayer = 43;
inline bool CSRspBody::_internal_has_setchessplayer() const {
  return this != internal_default_instance() && _impl_.setchessplayer_ != nullptr;
}
inline bool CSRspBody::has_setchessplayer() const {
  return _internal_has_setchessplayer();
}
inline const ::msg::CSRspSetChessPlayer& CSRspBody::_internal_setchessplayer() const {
  const ::msg::CSRspSetChessPlayer* p = _impl_.setchessplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSetChessPlayer&>(
      ::msg::_CSRspSetChessPlayer_default_instance_);
}
inline const ::msg::CSRspSetChessPlayer& CSRspBody::setchessplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SetChessPlayer)
  return _internal_setchessplayer();
}
inline void CSRspBody::unsafe_arena_set_allocated_setchessplayer(
    ::msg::CSRspSetChessPlayer* setchessplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setchessplayer_);
  }
  _impl_.setchessplayer_ = setchessplayer;
  if (setchessplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SetChessPlayer)
}
inline ::msg::CSRspSetChessPlayer* CSRspBody::release_setchessplayer() {
  
  ::msg::CSRspSetChessPlayer* temp = _impl_.setchessplayer_;
  _impl_.setchessplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSetChessPlayer* CSRspBody::unsafe_arena_release_setchessplayer() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SetChessPlayer)
  
  ::msg::CSRspSetChessPlayer* temp = _impl_.setchessplayer_;
  _impl_.setchessplayer_ = nullptr;
  return temp;
}
inline ::msg::CSRspSetChessPlayer* CSRspBody::_internal_mutable_setchessplayer() {
  
  if (_impl_.setchessplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSetChessPlayer>(GetArenaForAllocation());
    _impl_.setchessplayer_ = p;
  }
  return _impl_.setchessplayer_;
}
inline ::msg::CSRspSetChessPlayer* CSRspBody::mutable_setchessplayer() {
  ::msg::CSRspSetChessPlayer* _msg = _internal_mutable_setchessplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SetChessPlayer)
  return _msg;
}
inline void CSRspBody::set_allocated_setchessplayer(::msg::CSRspSetChessPlayer* setchessplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setchessplayer_);
  }
  if (setchessplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setchessplayer));
    if (message_arena != submessage_arena) {
      setchessplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setchessplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setchessplayer_ = setchessplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SetChessPlayer)
}

// .msg.CSRspUnsetChessPlayer UnsetChessPlayer = 44;
inline bool CSRspBody::_internal_has_unsetchessplayer() const {
  return this != internal_default_instance() && _impl_.unsetchessplayer_ != nullptr;
}
inline bool CSRspBody::has_unsetchessplayer() const {
  return _internal_has_unsetchessplayer();
}
inline const ::msg::CSRspUnsetChessPlayer& CSRspBody::_internal_unsetchessplayer() const {
  const ::msg::CSRspUnsetChessPlayer* p = _impl_.unsetchessplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUnsetChessPlayer&>(
      ::msg::_CSRspUnsetChessPlayer_default_instance_);
}
inline const ::msg::CSRspUnsetChessPlayer& CSRspBody::unsetchessplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UnsetChessPlayer)
  return _internal_unsetchessplayer();
}
inline void CSRspBody::unsafe_arena_set_allocated_unsetchessplayer(
    ::msg::CSRspUnsetChessPlayer* unsetchessplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetchessplayer_);
  }
  _impl_.unsetchessplayer_ = unsetchessplayer;
  if (unsetchessplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UnsetChessPlayer)
}
inline ::msg::CSRspUnsetChessPlayer* CSRspBody::release_unsetchessplayer() {
  
  ::msg::CSRspUnsetChessPlayer* temp = _impl_.unsetchessplayer_;
  _impl_.unsetchessplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUnsetChessPlayer* CSRspBody::unsafe_arena_release_unsetchessplayer() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UnsetChessPlayer)
  
  ::msg::CSRspUnsetChessPlayer* temp = _impl_.unsetchessplayer_;
  _impl_.unsetchessplayer_ = nullptr;
  return temp;
}
inline ::msg::CSRspUnsetChessPlayer* CSRspBody::_internal_mutable_unsetchessplayer() {
  
  if (_impl_.unsetchessplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUnsetChessPlayer>(GetArenaForAllocation());
    _impl_.unsetchessplayer_ = p;
  }
  return _impl_.unsetchessplayer_;
}
inline ::msg::CSRspUnsetChessPlayer* CSRspBody::mutable_unsetchessplayer() {
  ::msg::CSRspUnsetChessPlayer* _msg = _internal_mutable_unsetchessplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UnsetChessPlayer)
  return _msg;
}
inline void CSRspBody::set_allocated_unsetchessplayer(::msg::CSRspUnsetChessPlayer* unsetchessplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetchessplayer_);
  }
  if (unsetchessplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unsetchessplayer));
    if (message_arena != submessage_arena) {
      unsetchessplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsetchessplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unsetchessplayer_ = unsetchessplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UnsetChessPlayer)
}

// .msg.CSRspGetFansList GetFansList = 45;
inline bool CSRspBody::_internal_has_getfanslist() const {
  return this != internal_default_instance() && _impl_.getfanslist_ != nullptr;
}
inline bool CSRspBody::has_getfanslist() const {
  return _internal_has_getfanslist();
}
inline const ::msg::CSRspGetFansList& CSRspBody::_internal_getfanslist() const {
  const ::msg::CSRspGetFansList* p = _impl_.getfanslist_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetFansList&>(
      ::msg::_CSRspGetFansList_default_instance_);
}
inline const ::msg::CSRspGetFansList& CSRspBody::getfanslist() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetFansList)
  return _internal_getfanslist();
}
inline void CSRspBody::unsafe_arena_set_allocated_getfanslist(
    ::msg::CSRspGetFansList* getfanslist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getfanslist_);
  }
  _impl_.getfanslist_ = getfanslist;
  if (getfanslist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetFansList)
}
inline ::msg::CSRspGetFansList* CSRspBody::release_getfanslist() {
  
  ::msg::CSRspGetFansList* temp = _impl_.getfanslist_;
  _impl_.getfanslist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetFansList* CSRspBody::unsafe_arena_release_getfanslist() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetFansList)
  
  ::msg::CSRspGetFansList* temp = _impl_.getfanslist_;
  _impl_.getfanslist_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetFansList* CSRspBody::_internal_mutable_getfanslist() {
  
  if (_impl_.getfanslist_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetFansList>(GetArenaForAllocation());
    _impl_.getfanslist_ = p;
  }
  return _impl_.getfanslist_;
}
inline ::msg::CSRspGetFansList* CSRspBody::mutable_getfanslist() {
  ::msg::CSRspGetFansList* _msg = _internal_mutable_getfanslist();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetFansList)
  return _msg;
}
inline void CSRspBody::set_allocated_getfanslist(::msg::CSRspGetFansList* getfanslist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getfanslist_);
  }
  if (getfanslist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getfanslist));
    if (message_arena != submessage_arena) {
      getfanslist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getfanslist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getfanslist_ = getfanslist;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetFansList)
}

// .msg.CSRspFollowPlayer FollowPlayer = 46;
inline bool CSRspBody::_internal_has_followplayer() const {
  return this != internal_default_instance() && _impl_.followplayer_ != nullptr;
}
inline bool CSRspBody::has_followplayer() const {
  return _internal_has_followplayer();
}
inline const ::msg::CSRspFollowPlayer& CSRspBody::_internal_followplayer() const {
  const ::msg::CSRspFollowPlayer* p = _impl_.followplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspFollowPlayer&>(
      ::msg::_CSRspFollowPlayer_default_instance_);
}
inline const ::msg::CSRspFollowPlayer& CSRspBody::followplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.FollowPlayer)
  return _internal_followplayer();
}
inline void CSRspBody::unsafe_arena_set_allocated_followplayer(
    ::msg::CSRspFollowPlayer* followplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.followplayer_);
  }
  _impl_.followplayer_ = followplayer;
  if (followplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.FollowPlayer)
}
inline ::msg::CSRspFollowPlayer* CSRspBody::release_followplayer() {
  
  ::msg::CSRspFollowPlayer* temp = _impl_.followplayer_;
  _impl_.followplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspFollowPlayer* CSRspBody::unsafe_arena_release_followplayer() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.FollowPlayer)
  
  ::msg::CSRspFollowPlayer* temp = _impl_.followplayer_;
  _impl_.followplayer_ = nullptr;
  return temp;
}
inline ::msg::CSRspFollowPlayer* CSRspBody::_internal_mutable_followplayer() {
  
  if (_impl_.followplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspFollowPlayer>(GetArenaForAllocation());
    _impl_.followplayer_ = p;
  }
  return _impl_.followplayer_;
}
inline ::msg::CSRspFollowPlayer* CSRspBody::mutable_followplayer() {
  ::msg::CSRspFollowPlayer* _msg = _internal_mutable_followplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.FollowPlayer)
  return _msg;
}
inline void CSRspBody::set_allocated_followplayer(::msg::CSRspFollowPlayer* followplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.followplayer_);
  }
  if (followplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(followplayer));
    if (message_arena != submessage_arena) {
      followplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, followplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.followplayer_ = followplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.FollowPlayer)
}

// .msg.CSRspUnfollowPlayer UnfollowPlayer = 47;
inline bool CSRspBody::_internal_has_unfollowplayer() const {
  return this != internal_default_instance() && _impl_.unfollowplayer_ != nullptr;
}
inline bool CSRspBody::has_unfollowplayer() const {
  return _internal_has_unfollowplayer();
}
inline const ::msg::CSRspUnfollowPlayer& CSRspBody::_internal_unfollowplayer() const {
  const ::msg::CSRspUnfollowPlayer* p = _impl_.unfollowplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUnfollowPlayer&>(
      ::msg::_CSRspUnfollowPlayer_default_instance_);
}
inline const ::msg::CSRspUnfollowPlayer& CSRspBody::unfollowplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UnfollowPlayer)
  return _internal_unfollowplayer();
}
inline void CSRspBody::unsafe_arena_set_allocated_unfollowplayer(
    ::msg::CSRspUnfollowPlayer* unfollowplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unfollowplayer_);
  }
  _impl_.unfollowplayer_ = unfollowplayer;
  if (unfollowplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UnfollowPlayer)
}
inline ::msg::CSRspUnfollowPlayer* CSRspBody::release_unfollowplayer() {
  
  ::msg::CSRspUnfollowPlayer* temp = _impl_.unfollowplayer_;
  _impl_.unfollowplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUnfollowPlayer* CSRspBody::unsafe_arena_release_unfollowplayer() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UnfollowPlayer)
  
  ::msg::CSRspUnfollowPlayer* temp = _impl_.unfollowplayer_;
  _impl_.unfollowplayer_ = nullptr;
  return temp;
}
inline ::msg::CSRspUnfollowPlayer* CSRspBody::_internal_mutable_unfollowplayer() {
  
  if (_impl_.unfollowplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUnfollowPlayer>(GetArenaForAllocation());
    _impl_.unfollowplayer_ = p;
  }
  return _impl_.unfollowplayer_;
}
inline ::msg::CSRspUnfollowPlayer* CSRspBody::mutable_unfollowplayer() {
  ::msg::CSRspUnfollowPlayer* _msg = _internal_mutable_unfollowplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UnfollowPlayer)
  return _msg;
}
inline void CSRspBody::set_allocated_unfollowplayer(::msg::CSRspUnfollowPlayer* unfollowplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unfollowplayer_);
  }
  if (unfollowplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unfollowplayer));
    if (message_arena != submessage_arena) {
      unfollowplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unfollowplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unfollowplayer_ = unfollowplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UnfollowPlayer)
}

// .msg.CSRspPlayersStatusInfo PlayersStatusInfo = 48;
inline bool CSRspBody::_internal_has_playersstatusinfo() const {
  return this != internal_default_instance() && _impl_.playersstatusinfo_ != nullptr;
}
inline bool CSRspBody::has_playersstatusinfo() const {
  return _internal_has_playersstatusinfo();
}
inline const ::msg::CSRspPlayersStatusInfo& CSRspBody::_internal_playersstatusinfo() const {
  const ::msg::CSRspPlayersStatusInfo* p = _impl_.playersstatusinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPlayersStatusInfo&>(
      ::msg::_CSRspPlayersStatusInfo_default_instance_);
}
inline const ::msg::CSRspPlayersStatusInfo& CSRspBody::playersstatusinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PlayersStatusInfo)
  return _internal_playersstatusinfo();
}
inline void CSRspBody::unsafe_arena_set_allocated_playersstatusinfo(
    ::msg::CSRspPlayersStatusInfo* playersstatusinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playersstatusinfo_);
  }
  _impl_.playersstatusinfo_ = playersstatusinfo;
  if (playersstatusinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PlayersStatusInfo)
}
inline ::msg::CSRspPlayersStatusInfo* CSRspBody::release_playersstatusinfo() {
  
  ::msg::CSRspPlayersStatusInfo* temp = _impl_.playersstatusinfo_;
  _impl_.playersstatusinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPlayersStatusInfo* CSRspBody::unsafe_arena_release_playersstatusinfo() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PlayersStatusInfo)
  
  ::msg::CSRspPlayersStatusInfo* temp = _impl_.playersstatusinfo_;
  _impl_.playersstatusinfo_ = nullptr;
  return temp;
}
inline ::msg::CSRspPlayersStatusInfo* CSRspBody::_internal_mutable_playersstatusinfo() {
  
  if (_impl_.playersstatusinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPlayersStatusInfo>(GetArenaForAllocation());
    _impl_.playersstatusinfo_ = p;
  }
  return _impl_.playersstatusinfo_;
}
inline ::msg::CSRspPlayersStatusInfo* CSRspBody::mutable_playersstatusinfo() {
  ::msg::CSRspPlayersStatusInfo* _msg = _internal_mutable_playersstatusinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PlayersStatusInfo)
  return _msg;
}
inline void CSRspBody::set_allocated_playersstatusinfo(::msg::CSRspPlayersStatusInfo* playersstatusinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playersstatusinfo_);
  }
  if (playersstatusinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playersstatusinfo));
    if (message_arena != submessage_arena) {
      playersstatusinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playersstatusinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playersstatusinfo_ = playersstatusinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PlayersStatusInfo)
}

// .msg.CSRspInviteJoinTeam InviteJoinTeam = 49;
inline bool CSRspBody::_internal_has_invitejointeam() const {
  return this != internal_default_instance() && _impl_.invitejointeam_ != nullptr;
}
inline bool CSRspBody::has_invitejointeam() const {
  return _internal_has_invitejointeam();
}
inline const ::msg::CSRspInviteJoinTeam& CSRspBody::_internal_invitejointeam() const {
  const ::msg::CSRspInviteJoinTeam* p = _impl_.invitejointeam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspInviteJoinTeam&>(
      ::msg::_CSRspInviteJoinTeam_default_instance_);
}
inline const ::msg::CSRspInviteJoinTeam& CSRspBody::invitejointeam() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.InviteJoinTeam)
  return _internal_invitejointeam();
}
inline void CSRspBody::unsafe_arena_set_allocated_invitejointeam(
    ::msg::CSRspInviteJoinTeam* invitejointeam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invitejointeam_);
  }
  _impl_.invitejointeam_ = invitejointeam;
  if (invitejointeam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.InviteJoinTeam)
}
inline ::msg::CSRspInviteJoinTeam* CSRspBody::release_invitejointeam() {
  
  ::msg::CSRspInviteJoinTeam* temp = _impl_.invitejointeam_;
  _impl_.invitejointeam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspInviteJoinTeam* CSRspBody::unsafe_arena_release_invitejointeam() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.InviteJoinTeam)
  
  ::msg::CSRspInviteJoinTeam* temp = _impl_.invitejointeam_;
  _impl_.invitejointeam_ = nullptr;
  return temp;
}
inline ::msg::CSRspInviteJoinTeam* CSRspBody::_internal_mutable_invitejointeam() {
  
  if (_impl_.invitejointeam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspInviteJoinTeam>(GetArenaForAllocation());
    _impl_.invitejointeam_ = p;
  }
  return _impl_.invitejointeam_;
}
inline ::msg::CSRspInviteJoinTeam* CSRspBody::mutable_invitejointeam() {
  ::msg::CSRspInviteJoinTeam* _msg = _internal_mutable_invitejointeam();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.InviteJoinTeam)
  return _msg;
}
inline void CSRspBody::set_allocated_invitejointeam(::msg::CSRspInviteJoinTeam* invitejointeam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invitejointeam_);
  }
  if (invitejointeam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitejointeam));
    if (message_arena != submessage_arena) {
      invitejointeam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invitejointeam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.invitejointeam_ = invitejointeam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.InviteJoinTeam)
}

// .msg.CSRspJoinTeam JoinTeam = 50;
inline bool CSRspBody::_internal_has_jointeam() const {
  return this != internal_default_instance() && _impl_.jointeam_ != nullptr;
}
inline bool CSRspBody::has_jointeam() const {
  return _internal_has_jointeam();
}
inline const ::msg::CSRspJoinTeam& CSRspBody::_internal_jointeam() const {
  const ::msg::CSRspJoinTeam* p = _impl_.jointeam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspJoinTeam&>(
      ::msg::_CSRspJoinTeam_default_instance_);
}
inline const ::msg::CSRspJoinTeam& CSRspBody::jointeam() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.JoinTeam)
  return _internal_jointeam();
}
inline void CSRspBody::unsafe_arena_set_allocated_jointeam(
    ::msg::CSRspJoinTeam* jointeam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jointeam_);
  }
  _impl_.jointeam_ = jointeam;
  if (jointeam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.JoinTeam)
}
inline ::msg::CSRspJoinTeam* CSRspBody::release_jointeam() {
  
  ::msg::CSRspJoinTeam* temp = _impl_.jointeam_;
  _impl_.jointeam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspJoinTeam* CSRspBody::unsafe_arena_release_jointeam() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.JoinTeam)
  
  ::msg::CSRspJoinTeam* temp = _impl_.jointeam_;
  _impl_.jointeam_ = nullptr;
  return temp;
}
inline ::msg::CSRspJoinTeam* CSRspBody::_internal_mutable_jointeam() {
  
  if (_impl_.jointeam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspJoinTeam>(GetArenaForAllocation());
    _impl_.jointeam_ = p;
  }
  return _impl_.jointeam_;
}
inline ::msg::CSRspJoinTeam* CSRspBody::mutable_jointeam() {
  ::msg::CSRspJoinTeam* _msg = _internal_mutable_jointeam();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.JoinTeam)
  return _msg;
}
inline void CSRspBody::set_allocated_jointeam(::msg::CSRspJoinTeam* jointeam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jointeam_);
  }
  if (jointeam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jointeam));
    if (message_arena != submessage_arena) {
      jointeam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jointeam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.jointeam_ = jointeam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.JoinTeam)
}

// .msg.CSRspReportPayResponse ReportPayResponse = 51;
inline bool CSRspBody::_internal_has_reportpayresponse() const {
  return this != internal_default_instance() && _impl_.reportpayresponse_ != nullptr;
}
inline bool CSRspBody::has_reportpayresponse() const {
  return _internal_has_reportpayresponse();
}
inline const ::msg::CSRspReportPayResponse& CSRspBody::_internal_reportpayresponse() const {
  const ::msg::CSRspReportPayResponse* p = _impl_.reportpayresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspReportPayResponse&>(
      ::msg::_CSRspReportPayResponse_default_instance_);
}
inline const ::msg::CSRspReportPayResponse& CSRspBody::reportpayresponse() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ReportPayResponse)
  return _internal_reportpayresponse();
}
inline void CSRspBody::unsafe_arena_set_allocated_reportpayresponse(
    ::msg::CSRspReportPayResponse* reportpayresponse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportpayresponse_);
  }
  _impl_.reportpayresponse_ = reportpayresponse;
  if (reportpayresponse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ReportPayResponse)
}
inline ::msg::CSRspReportPayResponse* CSRspBody::release_reportpayresponse() {
  
  ::msg::CSRspReportPayResponse* temp = _impl_.reportpayresponse_;
  _impl_.reportpayresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspReportPayResponse* CSRspBody::unsafe_arena_release_reportpayresponse() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ReportPayResponse)
  
  ::msg::CSRspReportPayResponse* temp = _impl_.reportpayresponse_;
  _impl_.reportpayresponse_ = nullptr;
  return temp;
}
inline ::msg::CSRspReportPayResponse* CSRspBody::_internal_mutable_reportpayresponse() {
  
  if (_impl_.reportpayresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspReportPayResponse>(GetArenaForAllocation());
    _impl_.reportpayresponse_ = p;
  }
  return _impl_.reportpayresponse_;
}
inline ::msg::CSRspReportPayResponse* CSRspBody::mutable_reportpayresponse() {
  ::msg::CSRspReportPayResponse* _msg = _internal_mutable_reportpayresponse();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ReportPayResponse)
  return _msg;
}
inline void CSRspBody::set_allocated_reportpayresponse(::msg::CSRspReportPayResponse* reportpayresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportpayresponse_);
  }
  if (reportpayresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reportpayresponse));
    if (message_arena != submessage_arena) {
      reportpayresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reportpayresponse, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reportpayresponse_ = reportpayresponse;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ReportPayResponse)
}

// .msg.CSRspRejectJoinTeam RejectJoinTeam = 52;
inline bool CSRspBody::_internal_has_rejectjointeam() const {
  return this != internal_default_instance() && _impl_.rejectjointeam_ != nullptr;
}
inline bool CSRspBody::has_rejectjointeam() const {
  return _internal_has_rejectjointeam();
}
inline const ::msg::CSRspRejectJoinTeam& CSRspBody::_internal_rejectjointeam() const {
  const ::msg::CSRspRejectJoinTeam* p = _impl_.rejectjointeam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRejectJoinTeam&>(
      ::msg::_CSRspRejectJoinTeam_default_instance_);
}
inline const ::msg::CSRspRejectJoinTeam& CSRspBody::rejectjointeam() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RejectJoinTeam)
  return _internal_rejectjointeam();
}
inline void CSRspBody::unsafe_arena_set_allocated_rejectjointeam(
    ::msg::CSRspRejectJoinTeam* rejectjointeam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rejectjointeam_);
  }
  _impl_.rejectjointeam_ = rejectjointeam;
  if (rejectjointeam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RejectJoinTeam)
}
inline ::msg::CSRspRejectJoinTeam* CSRspBody::release_rejectjointeam() {
  
  ::msg::CSRspRejectJoinTeam* temp = _impl_.rejectjointeam_;
  _impl_.rejectjointeam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRejectJoinTeam* CSRspBody::unsafe_arena_release_rejectjointeam() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RejectJoinTeam)
  
  ::msg::CSRspRejectJoinTeam* temp = _impl_.rejectjointeam_;
  _impl_.rejectjointeam_ = nullptr;
  return temp;
}
inline ::msg::CSRspRejectJoinTeam* CSRspBody::_internal_mutable_rejectjointeam() {
  
  if (_impl_.rejectjointeam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRejectJoinTeam>(GetArenaForAllocation());
    _impl_.rejectjointeam_ = p;
  }
  return _impl_.rejectjointeam_;
}
inline ::msg::CSRspRejectJoinTeam* CSRspBody::mutable_rejectjointeam() {
  ::msg::CSRspRejectJoinTeam* _msg = _internal_mutable_rejectjointeam();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RejectJoinTeam)
  return _msg;
}
inline void CSRspBody::set_allocated_rejectjointeam(::msg::CSRspRejectJoinTeam* rejectjointeam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rejectjointeam_);
  }
  if (rejectjointeam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rejectjointeam));
    if (message_arena != submessage_arena) {
      rejectjointeam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rejectjointeam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rejectjointeam_ = rejectjointeam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RejectJoinTeam)
}

// .msg.CSRspShieldChat ShieldChat = 53;
inline bool CSRspBody::_internal_has_shieldchat() const {
  return this != internal_default_instance() && _impl_.shieldchat_ != nullptr;
}
inline bool CSRspBody::has_shieldchat() const {
  return _internal_has_shieldchat();
}
inline const ::msg::CSRspShieldChat& CSRspBody::_internal_shieldchat() const {
  const ::msg::CSRspShieldChat* p = _impl_.shieldchat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspShieldChat&>(
      ::msg::_CSRspShieldChat_default_instance_);
}
inline const ::msg::CSRspShieldChat& CSRspBody::shieldchat() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ShieldChat)
  return _internal_shieldchat();
}
inline void CSRspBody::unsafe_arena_set_allocated_shieldchat(
    ::msg::CSRspShieldChat* shieldchat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shieldchat_);
  }
  _impl_.shieldchat_ = shieldchat;
  if (shieldchat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ShieldChat)
}
inline ::msg::CSRspShieldChat* CSRspBody::release_shieldchat() {
  
  ::msg::CSRspShieldChat* temp = _impl_.shieldchat_;
  _impl_.shieldchat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspShieldChat* CSRspBody::unsafe_arena_release_shieldchat() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ShieldChat)
  
  ::msg::CSRspShieldChat* temp = _impl_.shieldchat_;
  _impl_.shieldchat_ = nullptr;
  return temp;
}
inline ::msg::CSRspShieldChat* CSRspBody::_internal_mutable_shieldchat() {
  
  if (_impl_.shieldchat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspShieldChat>(GetArenaForAllocation());
    _impl_.shieldchat_ = p;
  }
  return _impl_.shieldchat_;
}
inline ::msg::CSRspShieldChat* CSRspBody::mutable_shieldchat() {
  ::msg::CSRspShieldChat* _msg = _internal_mutable_shieldchat();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ShieldChat)
  return _msg;
}
inline void CSRspBody::set_allocated_shieldchat(::msg::CSRspShieldChat* shieldchat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shieldchat_);
  }
  if (shieldchat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shieldchat));
    if (message_arena != submessage_arena) {
      shieldchat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shieldchat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shieldchat_ = shieldchat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ShieldChat)
}

// .msg.CSRspBuyPassportLevel BuyPassportLevel = 54;
inline bool CSRspBody::_internal_has_buypassportlevel() const {
  return this != internal_default_instance() && _impl_.buypassportlevel_ != nullptr;
}
inline bool CSRspBody::has_buypassportlevel() const {
  return _internal_has_buypassportlevel();
}
inline const ::msg::CSRspBuyPassportLevel& CSRspBody::_internal_buypassportlevel() const {
  const ::msg::CSRspBuyPassportLevel* p = _impl_.buypassportlevel_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspBuyPassportLevel&>(
      ::msg::_CSRspBuyPassportLevel_default_instance_);
}
inline const ::msg::CSRspBuyPassportLevel& CSRspBody::buypassportlevel() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.BuyPassportLevel)
  return _internal_buypassportlevel();
}
inline void CSRspBody::unsafe_arena_set_allocated_buypassportlevel(
    ::msg::CSRspBuyPassportLevel* buypassportlevel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buypassportlevel_);
  }
  _impl_.buypassportlevel_ = buypassportlevel;
  if (buypassportlevel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.BuyPassportLevel)
}
inline ::msg::CSRspBuyPassportLevel* CSRspBody::release_buypassportlevel() {
  
  ::msg::CSRspBuyPassportLevel* temp = _impl_.buypassportlevel_;
  _impl_.buypassportlevel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspBuyPassportLevel* CSRspBody::unsafe_arena_release_buypassportlevel() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.BuyPassportLevel)
  
  ::msg::CSRspBuyPassportLevel* temp = _impl_.buypassportlevel_;
  _impl_.buypassportlevel_ = nullptr;
  return temp;
}
inline ::msg::CSRspBuyPassportLevel* CSRspBody::_internal_mutable_buypassportlevel() {
  
  if (_impl_.buypassportlevel_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspBuyPassportLevel>(GetArenaForAllocation());
    _impl_.buypassportlevel_ = p;
  }
  return _impl_.buypassportlevel_;
}
inline ::msg::CSRspBuyPassportLevel* CSRspBody::mutable_buypassportlevel() {
  ::msg::CSRspBuyPassportLevel* _msg = _internal_mutable_buypassportlevel();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.BuyPassportLevel)
  return _msg;
}
inline void CSRspBody::set_allocated_buypassportlevel(::msg::CSRspBuyPassportLevel* buypassportlevel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buypassportlevel_);
  }
  if (buypassportlevel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buypassportlevel));
    if (message_arena != submessage_arena) {
      buypassportlevel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buypassportlevel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buypassportlevel_ = buypassportlevel;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.BuyPassportLevel)
}

// .msg.CSRspUpgradePassport UpgradePassport = 55;
inline bool CSRspBody::_internal_has_upgradepassport() const {
  return this != internal_default_instance() && _impl_.upgradepassport_ != nullptr;
}
inline bool CSRspBody::has_upgradepassport() const {
  return _internal_has_upgradepassport();
}
inline const ::msg::CSRspUpgradePassport& CSRspBody::_internal_upgradepassport() const {
  const ::msg::CSRspUpgradePassport* p = _impl_.upgradepassport_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUpgradePassport&>(
      ::msg::_CSRspUpgradePassport_default_instance_);
}
inline const ::msg::CSRspUpgradePassport& CSRspBody::upgradepassport() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UpgradePassport)
  return _internal_upgradepassport();
}
inline void CSRspBody::unsafe_arena_set_allocated_upgradepassport(
    ::msg::CSRspUpgradePassport* upgradepassport) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upgradepassport_);
  }
  _impl_.upgradepassport_ = upgradepassport;
  if (upgradepassport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UpgradePassport)
}
inline ::msg::CSRspUpgradePassport* CSRspBody::release_upgradepassport() {
  
  ::msg::CSRspUpgradePassport* temp = _impl_.upgradepassport_;
  _impl_.upgradepassport_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUpgradePassport* CSRspBody::unsafe_arena_release_upgradepassport() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UpgradePassport)
  
  ::msg::CSRspUpgradePassport* temp = _impl_.upgradepassport_;
  _impl_.upgradepassport_ = nullptr;
  return temp;
}
inline ::msg::CSRspUpgradePassport* CSRspBody::_internal_mutable_upgradepassport() {
  
  if (_impl_.upgradepassport_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUpgradePassport>(GetArenaForAllocation());
    _impl_.upgradepassport_ = p;
  }
  return _impl_.upgradepassport_;
}
inline ::msg::CSRspUpgradePassport* CSRspBody::mutable_upgradepassport() {
  ::msg::CSRspUpgradePassport* _msg = _internal_mutable_upgradepassport();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UpgradePassport)
  return _msg;
}
inline void CSRspBody::set_allocated_upgradepassport(::msg::CSRspUpgradePassport* upgradepassport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upgradepassport_);
  }
  if (upgradepassport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upgradepassport));
    if (message_arena != submessage_arena) {
      upgradepassport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upgradepassport, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.upgradepassport_ = upgradepassport;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UpgradePassport)
}

// .msg.CSRspGetPassportLevelAward GetPassportLevelAward = 56;
inline bool CSRspBody::_internal_has_getpassportlevelaward() const {
  return this != internal_default_instance() && _impl_.getpassportlevelaward_ != nullptr;
}
inline bool CSRspBody::has_getpassportlevelaward() const {
  return _internal_has_getpassportlevelaward();
}
inline const ::msg::CSRspGetPassportLevelAward& CSRspBody::_internal_getpassportlevelaward() const {
  const ::msg::CSRspGetPassportLevelAward* p = _impl_.getpassportlevelaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetPassportLevelAward&>(
      ::msg::_CSRspGetPassportLevelAward_default_instance_);
}
inline const ::msg::CSRspGetPassportLevelAward& CSRspBody::getpassportlevelaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetPassportLevelAward)
  return _internal_getpassportlevelaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_getpassportlevelaward(
    ::msg::CSRspGetPassportLevelAward* getpassportlevelaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getpassportlevelaward_);
  }
  _impl_.getpassportlevelaward_ = getpassportlevelaward;
  if (getpassportlevelaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetPassportLevelAward)
}
inline ::msg::CSRspGetPassportLevelAward* CSRspBody::release_getpassportlevelaward() {
  
  ::msg::CSRspGetPassportLevelAward* temp = _impl_.getpassportlevelaward_;
  _impl_.getpassportlevelaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetPassportLevelAward* CSRspBody::unsafe_arena_release_getpassportlevelaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetPassportLevelAward)
  
  ::msg::CSRspGetPassportLevelAward* temp = _impl_.getpassportlevelaward_;
  _impl_.getpassportlevelaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetPassportLevelAward* CSRspBody::_internal_mutable_getpassportlevelaward() {
  
  if (_impl_.getpassportlevelaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetPassportLevelAward>(GetArenaForAllocation());
    _impl_.getpassportlevelaward_ = p;
  }
  return _impl_.getpassportlevelaward_;
}
inline ::msg::CSRspGetPassportLevelAward* CSRspBody::mutable_getpassportlevelaward() {
  ::msg::CSRspGetPassportLevelAward* _msg = _internal_mutable_getpassportlevelaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetPassportLevelAward)
  return _msg;
}
inline void CSRspBody::set_allocated_getpassportlevelaward(::msg::CSRspGetPassportLevelAward* getpassportlevelaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getpassportlevelaward_);
  }
  if (getpassportlevelaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getpassportlevelaward));
    if (message_arena != submessage_arena) {
      getpassportlevelaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getpassportlevelaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getpassportlevelaward_ = getpassportlevelaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetPassportLevelAward)
}

// .msg.CSRspGetPassportTaskAward GetPassportTaskAward = 57;
inline bool CSRspBody::_internal_has_getpassporttaskaward() const {
  return this != internal_default_instance() && _impl_.getpassporttaskaward_ != nullptr;
}
inline bool CSRspBody::has_getpassporttaskaward() const {
  return _internal_has_getpassporttaskaward();
}
inline const ::msg::CSRspGetPassportTaskAward& CSRspBody::_internal_getpassporttaskaward() const {
  const ::msg::CSRspGetPassportTaskAward* p = _impl_.getpassporttaskaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetPassportTaskAward&>(
      ::msg::_CSRspGetPassportTaskAward_default_instance_);
}
inline const ::msg::CSRspGetPassportTaskAward& CSRspBody::getpassporttaskaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetPassportTaskAward)
  return _internal_getpassporttaskaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_getpassporttaskaward(
    ::msg::CSRspGetPassportTaskAward* getpassporttaskaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getpassporttaskaward_);
  }
  _impl_.getpassporttaskaward_ = getpassporttaskaward;
  if (getpassporttaskaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetPassportTaskAward)
}
inline ::msg::CSRspGetPassportTaskAward* CSRspBody::release_getpassporttaskaward() {
  
  ::msg::CSRspGetPassportTaskAward* temp = _impl_.getpassporttaskaward_;
  _impl_.getpassporttaskaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetPassportTaskAward* CSRspBody::unsafe_arena_release_getpassporttaskaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetPassportTaskAward)
  
  ::msg::CSRspGetPassportTaskAward* temp = _impl_.getpassporttaskaward_;
  _impl_.getpassporttaskaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetPassportTaskAward* CSRspBody::_internal_mutable_getpassporttaskaward() {
  
  if (_impl_.getpassporttaskaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetPassportTaskAward>(GetArenaForAllocation());
    _impl_.getpassporttaskaward_ = p;
  }
  return _impl_.getpassporttaskaward_;
}
inline ::msg::CSRspGetPassportTaskAward* CSRspBody::mutable_getpassporttaskaward() {
  ::msg::CSRspGetPassportTaskAward* _msg = _internal_mutable_getpassporttaskaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetPassportTaskAward)
  return _msg;
}
inline void CSRspBody::set_allocated_getpassporttaskaward(::msg::CSRspGetPassportTaskAward* getpassporttaskaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getpassporttaskaward_);
  }
  if (getpassporttaskaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getpassporttaskaward));
    if (message_arena != submessage_arena) {
      getpassporttaskaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getpassporttaskaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getpassporttaskaward_ = getpassporttaskaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetPassportTaskAward)
}

// .msg.CSRspTelBook TelBook = 58;
inline bool CSRspBody::_internal_has_telbook() const {
  return this != internal_default_instance() && _impl_.telbook_ != nullptr;
}
inline bool CSRspBody::has_telbook() const {
  return _internal_has_telbook();
}
inline const ::msg::CSRspTelBook& CSRspBody::_internal_telbook() const {
  const ::msg::CSRspTelBook* p = _impl_.telbook_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspTelBook&>(
      ::msg::_CSRspTelBook_default_instance_);
}
inline const ::msg::CSRspTelBook& CSRspBody::telbook() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.TelBook)
  return _internal_telbook();
}
inline void CSRspBody::unsafe_arena_set_allocated_telbook(
    ::msg::CSRspTelBook* telbook) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.telbook_);
  }
  _impl_.telbook_ = telbook;
  if (telbook) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.TelBook)
}
inline ::msg::CSRspTelBook* CSRspBody::release_telbook() {
  
  ::msg::CSRspTelBook* temp = _impl_.telbook_;
  _impl_.telbook_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspTelBook* CSRspBody::unsafe_arena_release_telbook() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.TelBook)
  
  ::msg::CSRspTelBook* temp = _impl_.telbook_;
  _impl_.telbook_ = nullptr;
  return temp;
}
inline ::msg::CSRspTelBook* CSRspBody::_internal_mutable_telbook() {
  
  if (_impl_.telbook_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspTelBook>(GetArenaForAllocation());
    _impl_.telbook_ = p;
  }
  return _impl_.telbook_;
}
inline ::msg::CSRspTelBook* CSRspBody::mutable_telbook() {
  ::msg::CSRspTelBook* _msg = _internal_mutable_telbook();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.TelBook)
  return _msg;
}
inline void CSRspBody::set_allocated_telbook(::msg::CSRspTelBook* telbook) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.telbook_);
  }
  if (telbook) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telbook));
    if (message_arena != submessage_arena) {
      telbook = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telbook, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.telbook_ = telbook;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.TelBook)
}

// .msg.CSRspActivatePassport ActivatePassport = 59;
inline bool CSRspBody::_internal_has_activatepassport() const {
  return this != internal_default_instance() && _impl_.activatepassport_ != nullptr;
}
inline bool CSRspBody::has_activatepassport() const {
  return _internal_has_activatepassport();
}
inline const ::msg::CSRspActivatePassport& CSRspBody::_internal_activatepassport() const {
  const ::msg::CSRspActivatePassport* p = _impl_.activatepassport_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspActivatePassport&>(
      ::msg::_CSRspActivatePassport_default_instance_);
}
inline const ::msg::CSRspActivatePassport& CSRspBody::activatepassport() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ActivatePassport)
  return _internal_activatepassport();
}
inline void CSRspBody::unsafe_arena_set_allocated_activatepassport(
    ::msg::CSRspActivatePassport* activatepassport) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activatepassport_);
  }
  _impl_.activatepassport_ = activatepassport;
  if (activatepassport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ActivatePassport)
}
inline ::msg::CSRspActivatePassport* CSRspBody::release_activatepassport() {
  
  ::msg::CSRspActivatePassport* temp = _impl_.activatepassport_;
  _impl_.activatepassport_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspActivatePassport* CSRspBody::unsafe_arena_release_activatepassport() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ActivatePassport)
  
  ::msg::CSRspActivatePassport* temp = _impl_.activatepassport_;
  _impl_.activatepassport_ = nullptr;
  return temp;
}
inline ::msg::CSRspActivatePassport* CSRspBody::_internal_mutable_activatepassport() {
  
  if (_impl_.activatepassport_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspActivatePassport>(GetArenaForAllocation());
    _impl_.activatepassport_ = p;
  }
  return _impl_.activatepassport_;
}
inline ::msg::CSRspActivatePassport* CSRspBody::mutable_activatepassport() {
  ::msg::CSRspActivatePassport* _msg = _internal_mutable_activatepassport();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ActivatePassport)
  return _msg;
}
inline void CSRspBody::set_allocated_activatepassport(::msg::CSRspActivatePassport* activatepassport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activatepassport_);
  }
  if (activatepassport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activatepassport));
    if (message_arena != submessage_arena) {
      activatepassport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activatepassport, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.activatepassport_ = activatepassport;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ActivatePassport)
}

// .msg.CSRspRankSeasonEval RankSeasonEval = 60;
inline bool CSRspBody::_internal_has_rankseasoneval() const {
  return this != internal_default_instance() && _impl_.rankseasoneval_ != nullptr;
}
inline bool CSRspBody::has_rankseasoneval() const {
  return _internal_has_rankseasoneval();
}
inline const ::msg::CSRspRankSeasonEval& CSRspBody::_internal_rankseasoneval() const {
  const ::msg::CSRspRankSeasonEval* p = _impl_.rankseasoneval_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRankSeasonEval&>(
      ::msg::_CSRspRankSeasonEval_default_instance_);
}
inline const ::msg::CSRspRankSeasonEval& CSRspBody::rankseasoneval() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RankSeasonEval)
  return _internal_rankseasoneval();
}
inline void CSRspBody::unsafe_arena_set_allocated_rankseasoneval(
    ::msg::CSRspRankSeasonEval* rankseasoneval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rankseasoneval_);
  }
  _impl_.rankseasoneval_ = rankseasoneval;
  if (rankseasoneval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RankSeasonEval)
}
inline ::msg::CSRspRankSeasonEval* CSRspBody::release_rankseasoneval() {
  
  ::msg::CSRspRankSeasonEval* temp = _impl_.rankseasoneval_;
  _impl_.rankseasoneval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRankSeasonEval* CSRspBody::unsafe_arena_release_rankseasoneval() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RankSeasonEval)
  
  ::msg::CSRspRankSeasonEval* temp = _impl_.rankseasoneval_;
  _impl_.rankseasoneval_ = nullptr;
  return temp;
}
inline ::msg::CSRspRankSeasonEval* CSRspBody::_internal_mutable_rankseasoneval() {
  
  if (_impl_.rankseasoneval_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRankSeasonEval>(GetArenaForAllocation());
    _impl_.rankseasoneval_ = p;
  }
  return _impl_.rankseasoneval_;
}
inline ::msg::CSRspRankSeasonEval* CSRspBody::mutable_rankseasoneval() {
  ::msg::CSRspRankSeasonEval* _msg = _internal_mutable_rankseasoneval();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RankSeasonEval)
  return _msg;
}
inline void CSRspBody::set_allocated_rankseasoneval(::msg::CSRspRankSeasonEval* rankseasoneval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rankseasoneval_);
  }
  if (rankseasoneval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rankseasoneval));
    if (message_arena != submessage_arena) {
      rankseasoneval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rankseasoneval, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rankseasoneval_ = rankseasoneval;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RankSeasonEval)
}

// .msg.CSRspBindAccount BindAccount = 61;
inline bool CSRspBody::_internal_has_bindaccount() const {
  return this != internal_default_instance() && _impl_.bindaccount_ != nullptr;
}
inline bool CSRspBody::has_bindaccount() const {
  return _internal_has_bindaccount();
}
inline const ::msg::CSRspBindAccount& CSRspBody::_internal_bindaccount() const {
  const ::msg::CSRspBindAccount* p = _impl_.bindaccount_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspBindAccount&>(
      ::msg::_CSRspBindAccount_default_instance_);
}
inline const ::msg::CSRspBindAccount& CSRspBody::bindaccount() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.BindAccount)
  return _internal_bindaccount();
}
inline void CSRspBody::unsafe_arena_set_allocated_bindaccount(
    ::msg::CSRspBindAccount* bindaccount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindaccount_);
  }
  _impl_.bindaccount_ = bindaccount;
  if (bindaccount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.BindAccount)
}
inline ::msg::CSRspBindAccount* CSRspBody::release_bindaccount() {
  
  ::msg::CSRspBindAccount* temp = _impl_.bindaccount_;
  _impl_.bindaccount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspBindAccount* CSRspBody::unsafe_arena_release_bindaccount() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.BindAccount)
  
  ::msg::CSRspBindAccount* temp = _impl_.bindaccount_;
  _impl_.bindaccount_ = nullptr;
  return temp;
}
inline ::msg::CSRspBindAccount* CSRspBody::_internal_mutable_bindaccount() {
  
  if (_impl_.bindaccount_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspBindAccount>(GetArenaForAllocation());
    _impl_.bindaccount_ = p;
  }
  return _impl_.bindaccount_;
}
inline ::msg::CSRspBindAccount* CSRspBody::mutable_bindaccount() {
  ::msg::CSRspBindAccount* _msg = _internal_mutable_bindaccount();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.BindAccount)
  return _msg;
}
inline void CSRspBody::set_allocated_bindaccount(::msg::CSRspBindAccount* bindaccount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindaccount_);
  }
  if (bindaccount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bindaccount));
    if (message_arena != submessage_arena) {
      bindaccount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bindaccount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bindaccount_ = bindaccount;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.BindAccount)
}

// .msg.CSRspIncAdShowCount IncAdsShowCount = 62;
inline bool CSRspBody::_internal_has_incadsshowcount() const {
  return this != internal_default_instance() && _impl_.incadsshowcount_ != nullptr;
}
inline bool CSRspBody::has_incadsshowcount() const {
  return _internal_has_incadsshowcount();
}
inline const ::msg::CSRspIncAdShowCount& CSRspBody::_internal_incadsshowcount() const {
  const ::msg::CSRspIncAdShowCount* p = _impl_.incadsshowcount_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspIncAdShowCount&>(
      ::msg::_CSRspIncAdShowCount_default_instance_);
}
inline const ::msg::CSRspIncAdShowCount& CSRspBody::incadsshowcount() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.IncAdsShowCount)
  return _internal_incadsshowcount();
}
inline void CSRspBody::unsafe_arena_set_allocated_incadsshowcount(
    ::msg::CSRspIncAdShowCount* incadsshowcount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.incadsshowcount_);
  }
  _impl_.incadsshowcount_ = incadsshowcount;
  if (incadsshowcount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.IncAdsShowCount)
}
inline ::msg::CSRspIncAdShowCount* CSRspBody::release_incadsshowcount() {
  
  ::msg::CSRspIncAdShowCount* temp = _impl_.incadsshowcount_;
  _impl_.incadsshowcount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspIncAdShowCount* CSRspBody::unsafe_arena_release_incadsshowcount() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.IncAdsShowCount)
  
  ::msg::CSRspIncAdShowCount* temp = _impl_.incadsshowcount_;
  _impl_.incadsshowcount_ = nullptr;
  return temp;
}
inline ::msg::CSRspIncAdShowCount* CSRspBody::_internal_mutable_incadsshowcount() {
  
  if (_impl_.incadsshowcount_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspIncAdShowCount>(GetArenaForAllocation());
    _impl_.incadsshowcount_ = p;
  }
  return _impl_.incadsshowcount_;
}
inline ::msg::CSRspIncAdShowCount* CSRspBody::mutable_incadsshowcount() {
  ::msg::CSRspIncAdShowCount* _msg = _internal_mutable_incadsshowcount();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.IncAdsShowCount)
  return _msg;
}
inline void CSRspBody::set_allocated_incadsshowcount(::msg::CSRspIncAdShowCount* incadsshowcount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.incadsshowcount_);
  }
  if (incadsshowcount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(incadsshowcount));
    if (message_arena != submessage_arena) {
      incadsshowcount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, incadsshowcount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.incadsshowcount_ = incadsshowcount;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.IncAdsShowCount)
}

// .msg.CSRspUseBonusCard UseBonusCard = 63;
inline bool CSRspBody::_internal_has_usebonuscard() const {
  return this != internal_default_instance() && _impl_.usebonuscard_ != nullptr;
}
inline bool CSRspBody::has_usebonuscard() const {
  return _internal_has_usebonuscard();
}
inline const ::msg::CSRspUseBonusCard& CSRspBody::_internal_usebonuscard() const {
  const ::msg::CSRspUseBonusCard* p = _impl_.usebonuscard_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUseBonusCard&>(
      ::msg::_CSRspUseBonusCard_default_instance_);
}
inline const ::msg::CSRspUseBonusCard& CSRspBody::usebonuscard() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UseBonusCard)
  return _internal_usebonuscard();
}
inline void CSRspBody::unsafe_arena_set_allocated_usebonuscard(
    ::msg::CSRspUseBonusCard* usebonuscard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usebonuscard_);
  }
  _impl_.usebonuscard_ = usebonuscard;
  if (usebonuscard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UseBonusCard)
}
inline ::msg::CSRspUseBonusCard* CSRspBody::release_usebonuscard() {
  
  ::msg::CSRspUseBonusCard* temp = _impl_.usebonuscard_;
  _impl_.usebonuscard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUseBonusCard* CSRspBody::unsafe_arena_release_usebonuscard() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UseBonusCard)
  
  ::msg::CSRspUseBonusCard* temp = _impl_.usebonuscard_;
  _impl_.usebonuscard_ = nullptr;
  return temp;
}
inline ::msg::CSRspUseBonusCard* CSRspBody::_internal_mutable_usebonuscard() {
  
  if (_impl_.usebonuscard_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUseBonusCard>(GetArenaForAllocation());
    _impl_.usebonuscard_ = p;
  }
  return _impl_.usebonuscard_;
}
inline ::msg::CSRspUseBonusCard* CSRspBody::mutable_usebonuscard() {
  ::msg::CSRspUseBonusCard* _msg = _internal_mutable_usebonuscard();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UseBonusCard)
  return _msg;
}
inline void CSRspBody::set_allocated_usebonuscard(::msg::CSRspUseBonusCard* usebonuscard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usebonuscard_);
  }
  if (usebonuscard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usebonuscard));
    if (message_arena != submessage_arena) {
      usebonuscard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usebonuscard, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.usebonuscard_ = usebonuscard;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UseBonusCard)
}

// .msg.CSRspGetSeasonAward GetSeasonAward = 64;
inline bool CSRspBody::_internal_has_getseasonaward() const {
  return this != internal_default_instance() && _impl_.getseasonaward_ != nullptr;
}
inline bool CSRspBody::has_getseasonaward() const {
  return _internal_has_getseasonaward();
}
inline const ::msg::CSRspGetSeasonAward& CSRspBody::_internal_getseasonaward() const {
  const ::msg::CSRspGetSeasonAward* p = _impl_.getseasonaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetSeasonAward&>(
      ::msg::_CSRspGetSeasonAward_default_instance_);
}
inline const ::msg::CSRspGetSeasonAward& CSRspBody::getseasonaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetSeasonAward)
  return _internal_getseasonaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_getseasonaward(
    ::msg::CSRspGetSeasonAward* getseasonaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getseasonaward_);
  }
  _impl_.getseasonaward_ = getseasonaward;
  if (getseasonaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetSeasonAward)
}
inline ::msg::CSRspGetSeasonAward* CSRspBody::release_getseasonaward() {
  
  ::msg::CSRspGetSeasonAward* temp = _impl_.getseasonaward_;
  _impl_.getseasonaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetSeasonAward* CSRspBody::unsafe_arena_release_getseasonaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetSeasonAward)
  
  ::msg::CSRspGetSeasonAward* temp = _impl_.getseasonaward_;
  _impl_.getseasonaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetSeasonAward* CSRspBody::_internal_mutable_getseasonaward() {
  
  if (_impl_.getseasonaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetSeasonAward>(GetArenaForAllocation());
    _impl_.getseasonaward_ = p;
  }
  return _impl_.getseasonaward_;
}
inline ::msg::CSRspGetSeasonAward* CSRspBody::mutable_getseasonaward() {
  ::msg::CSRspGetSeasonAward* _msg = _internal_mutable_getseasonaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetSeasonAward)
  return _msg;
}
inline void CSRspBody::set_allocated_getseasonaward(::msg::CSRspGetSeasonAward* getseasonaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getseasonaward_);
  }
  if (getseasonaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getseasonaward));
    if (message_arena != submessage_arena) {
      getseasonaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getseasonaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getseasonaward_ = getseasonaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetSeasonAward)
}

// .msg.CSRspGetAlphaActivityAward GetAlphaActivityAward = 65;
inline bool CSRspBody::_internal_has_getalphaactivityaward() const {
  return this != internal_default_instance() && _impl_.getalphaactivityaward_ != nullptr;
}
inline bool CSRspBody::has_getalphaactivityaward() const {
  return _internal_has_getalphaactivityaward();
}
inline const ::msg::CSRspGetAlphaActivityAward& CSRspBody::_internal_getalphaactivityaward() const {
  const ::msg::CSRspGetAlphaActivityAward* p = _impl_.getalphaactivityaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetAlphaActivityAward&>(
      ::msg::_CSRspGetAlphaActivityAward_default_instance_);
}
inline const ::msg::CSRspGetAlphaActivityAward& CSRspBody::getalphaactivityaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetAlphaActivityAward)
  return _internal_getalphaactivityaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_getalphaactivityaward(
    ::msg::CSRspGetAlphaActivityAward* getalphaactivityaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getalphaactivityaward_);
  }
  _impl_.getalphaactivityaward_ = getalphaactivityaward;
  if (getalphaactivityaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetAlphaActivityAward)
}
inline ::msg::CSRspGetAlphaActivityAward* CSRspBody::release_getalphaactivityaward() {
  
  ::msg::CSRspGetAlphaActivityAward* temp = _impl_.getalphaactivityaward_;
  _impl_.getalphaactivityaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetAlphaActivityAward* CSRspBody::unsafe_arena_release_getalphaactivityaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetAlphaActivityAward)
  
  ::msg::CSRspGetAlphaActivityAward* temp = _impl_.getalphaactivityaward_;
  _impl_.getalphaactivityaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetAlphaActivityAward* CSRspBody::_internal_mutable_getalphaactivityaward() {
  
  if (_impl_.getalphaactivityaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetAlphaActivityAward>(GetArenaForAllocation());
    _impl_.getalphaactivityaward_ = p;
  }
  return _impl_.getalphaactivityaward_;
}
inline ::msg::CSRspGetAlphaActivityAward* CSRspBody::mutable_getalphaactivityaward() {
  ::msg::CSRspGetAlphaActivityAward* _msg = _internal_mutable_getalphaactivityaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetAlphaActivityAward)
  return _msg;
}
inline void CSRspBody::set_allocated_getalphaactivityaward(::msg::CSRspGetAlphaActivityAward* getalphaactivityaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getalphaactivityaward_);
  }
  if (getalphaactivityaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getalphaactivityaward));
    if (message_arena != submessage_arena) {
      getalphaactivityaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getalphaactivityaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getalphaactivityaward_ = getalphaactivityaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetAlphaActivityAward)
}

// .msg.CSRspGetLanguageData GetLanguageData = 66;
inline bool CSRspBody::_internal_has_getlanguagedata() const {
  return this != internal_default_instance() && _impl_.getlanguagedata_ != nullptr;
}
inline bool CSRspBody::has_getlanguagedata() const {
  return _internal_has_getlanguagedata();
}
inline const ::msg::CSRspGetLanguageData& CSRspBody::_internal_getlanguagedata() const {
  const ::msg::CSRspGetLanguageData* p = _impl_.getlanguagedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetLanguageData&>(
      ::msg::_CSRspGetLanguageData_default_instance_);
}
inline const ::msg::CSRspGetLanguageData& CSRspBody::getlanguagedata() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetLanguageData)
  return _internal_getlanguagedata();
}
inline void CSRspBody::unsafe_arena_set_allocated_getlanguagedata(
    ::msg::CSRspGetLanguageData* getlanguagedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getlanguagedata_);
  }
  _impl_.getlanguagedata_ = getlanguagedata;
  if (getlanguagedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetLanguageData)
}
inline ::msg::CSRspGetLanguageData* CSRspBody::release_getlanguagedata() {
  
  ::msg::CSRspGetLanguageData* temp = _impl_.getlanguagedata_;
  _impl_.getlanguagedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetLanguageData* CSRspBody::unsafe_arena_release_getlanguagedata() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetLanguageData)
  
  ::msg::CSRspGetLanguageData* temp = _impl_.getlanguagedata_;
  _impl_.getlanguagedata_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetLanguageData* CSRspBody::_internal_mutable_getlanguagedata() {
  
  if (_impl_.getlanguagedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetLanguageData>(GetArenaForAllocation());
    _impl_.getlanguagedata_ = p;
  }
  return _impl_.getlanguagedata_;
}
inline ::msg::CSRspGetLanguageData* CSRspBody::mutable_getlanguagedata() {
  ::msg::CSRspGetLanguageData* _msg = _internal_mutable_getlanguagedata();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetLanguageData)
  return _msg;
}
inline void CSRspBody::set_allocated_getlanguagedata(::msg::CSRspGetLanguageData* getlanguagedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getlanguagedata_);
  }
  if (getlanguagedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getlanguagedata));
    if (message_arena != submessage_arena) {
      getlanguagedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getlanguagedata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getlanguagedata_ = getlanguagedata;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetLanguageData)
}

// .msg.CSRspGetActivityAward GetActivityAward = 67;
inline bool CSRspBody::_internal_has_getactivityaward() const {
  return this != internal_default_instance() && _impl_.getactivityaward_ != nullptr;
}
inline bool CSRspBody::has_getactivityaward() const {
  return _internal_has_getactivityaward();
}
inline const ::msg::CSRspGetActivityAward& CSRspBody::_internal_getactivityaward() const {
  const ::msg::CSRspGetActivityAward* p = _impl_.getactivityaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetActivityAward&>(
      ::msg::_CSRspGetActivityAward_default_instance_);
}
inline const ::msg::CSRspGetActivityAward& CSRspBody::getactivityaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetActivityAward)
  return _internal_getactivityaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_getactivityaward(
    ::msg::CSRspGetActivityAward* getactivityaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getactivityaward_);
  }
  _impl_.getactivityaward_ = getactivityaward;
  if (getactivityaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetActivityAward)
}
inline ::msg::CSRspGetActivityAward* CSRspBody::release_getactivityaward() {
  
  ::msg::CSRspGetActivityAward* temp = _impl_.getactivityaward_;
  _impl_.getactivityaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetActivityAward* CSRspBody::unsafe_arena_release_getactivityaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetActivityAward)
  
  ::msg::CSRspGetActivityAward* temp = _impl_.getactivityaward_;
  _impl_.getactivityaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetActivityAward* CSRspBody::_internal_mutable_getactivityaward() {
  
  if (_impl_.getactivityaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetActivityAward>(GetArenaForAllocation());
    _impl_.getactivityaward_ = p;
  }
  return _impl_.getactivityaward_;
}
inline ::msg::CSRspGetActivityAward* CSRspBody::mutable_getactivityaward() {
  ::msg::CSRspGetActivityAward* _msg = _internal_mutable_getactivityaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetActivityAward)
  return _msg;
}
inline void CSRspBody::set_allocated_getactivityaward(::msg::CSRspGetActivityAward* getactivityaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getactivityaward_);
  }
  if (getactivityaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getactivityaward));
    if (message_arena != submessage_arena) {
      getactivityaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getactivityaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getactivityaward_ = getactivityaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetActivityAward)
}

// .msg.CSRspGetActivityData GetActivityData = 68;
inline bool CSRspBody::_internal_has_getactivitydata() const {
  return this != internal_default_instance() && _impl_.getactivitydata_ != nullptr;
}
inline bool CSRspBody::has_getactivitydata() const {
  return _internal_has_getactivitydata();
}
inline const ::msg::CSRspGetActivityData& CSRspBody::_internal_getactivitydata() const {
  const ::msg::CSRspGetActivityData* p = _impl_.getactivitydata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetActivityData&>(
      ::msg::_CSRspGetActivityData_default_instance_);
}
inline const ::msg::CSRspGetActivityData& CSRspBody::getactivitydata() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetActivityData)
  return _internal_getactivitydata();
}
inline void CSRspBody::unsafe_arena_set_allocated_getactivitydata(
    ::msg::CSRspGetActivityData* getactivitydata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getactivitydata_);
  }
  _impl_.getactivitydata_ = getactivitydata;
  if (getactivitydata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetActivityData)
}
inline ::msg::CSRspGetActivityData* CSRspBody::release_getactivitydata() {
  
  ::msg::CSRspGetActivityData* temp = _impl_.getactivitydata_;
  _impl_.getactivitydata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetActivityData* CSRspBody::unsafe_arena_release_getactivitydata() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetActivityData)
  
  ::msg::CSRspGetActivityData* temp = _impl_.getactivitydata_;
  _impl_.getactivitydata_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetActivityData* CSRspBody::_internal_mutable_getactivitydata() {
  
  if (_impl_.getactivitydata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetActivityData>(GetArenaForAllocation());
    _impl_.getactivitydata_ = p;
  }
  return _impl_.getactivitydata_;
}
inline ::msg::CSRspGetActivityData* CSRspBody::mutable_getactivitydata() {
  ::msg::CSRspGetActivityData* _msg = _internal_mutable_getactivitydata();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetActivityData)
  return _msg;
}
inline void CSRspBody::set_allocated_getactivitydata(::msg::CSRspGetActivityData* getactivitydata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getactivitydata_);
  }
  if (getactivitydata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getactivitydata));
    if (message_arena != submessage_arena) {
      getactivitydata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getactivitydata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getactivitydata_ = getactivitydata;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetActivityData)
}

// .msg.CSRspSendSms SendSms = 69;
inline bool CSRspBody::_internal_has_sendsms() const {
  return this != internal_default_instance() && _impl_.sendsms_ != nullptr;
}
inline bool CSRspBody::has_sendsms() const {
  return _internal_has_sendsms();
}
inline const ::msg::CSRspSendSms& CSRspBody::_internal_sendsms() const {
  const ::msg::CSRspSendSms* p = _impl_.sendsms_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSendSms&>(
      ::msg::_CSRspSendSms_default_instance_);
}
inline const ::msg::CSRspSendSms& CSRspBody::sendsms() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SendSms)
  return _internal_sendsms();
}
inline void CSRspBody::unsafe_arena_set_allocated_sendsms(
    ::msg::CSRspSendSms* sendsms) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sendsms_);
  }
  _impl_.sendsms_ = sendsms;
  if (sendsms) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SendSms)
}
inline ::msg::CSRspSendSms* CSRspBody::release_sendsms() {
  
  ::msg::CSRspSendSms* temp = _impl_.sendsms_;
  _impl_.sendsms_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSendSms* CSRspBody::unsafe_arena_release_sendsms() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SendSms)
  
  ::msg::CSRspSendSms* temp = _impl_.sendsms_;
  _impl_.sendsms_ = nullptr;
  return temp;
}
inline ::msg::CSRspSendSms* CSRspBody::_internal_mutable_sendsms() {
  
  if (_impl_.sendsms_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSendSms>(GetArenaForAllocation());
    _impl_.sendsms_ = p;
  }
  return _impl_.sendsms_;
}
inline ::msg::CSRspSendSms* CSRspBody::mutable_sendsms() {
  ::msg::CSRspSendSms* _msg = _internal_mutable_sendsms();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SendSms)
  return _msg;
}
inline void CSRspBody::set_allocated_sendsms(::msg::CSRspSendSms* sendsms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sendsms_);
  }
  if (sendsms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sendsms));
    if (message_arena != submessage_arena) {
      sendsms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sendsms, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sendsms_ = sendsms;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SendSms)
}

// .msg.CSRspGetMeleeAward GetMeleeAward = 70;
inline bool CSRspBody::_internal_has_getmeleeaward() const {
  return this != internal_default_instance() && _impl_.getmeleeaward_ != nullptr;
}
inline bool CSRspBody::has_getmeleeaward() const {
  return _internal_has_getmeleeaward();
}
inline const ::msg::CSRspGetMeleeAward& CSRspBody::_internal_getmeleeaward() const {
  const ::msg::CSRspGetMeleeAward* p = _impl_.getmeleeaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetMeleeAward&>(
      ::msg::_CSRspGetMeleeAward_default_instance_);
}
inline const ::msg::CSRspGetMeleeAward& CSRspBody::getmeleeaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetMeleeAward)
  return _internal_getmeleeaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_getmeleeaward(
    ::msg::CSRspGetMeleeAward* getmeleeaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmeleeaward_);
  }
  _impl_.getmeleeaward_ = getmeleeaward;
  if (getmeleeaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetMeleeAward)
}
inline ::msg::CSRspGetMeleeAward* CSRspBody::release_getmeleeaward() {
  
  ::msg::CSRspGetMeleeAward* temp = _impl_.getmeleeaward_;
  _impl_.getmeleeaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetMeleeAward* CSRspBody::unsafe_arena_release_getmeleeaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetMeleeAward)
  
  ::msg::CSRspGetMeleeAward* temp = _impl_.getmeleeaward_;
  _impl_.getmeleeaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetMeleeAward* CSRspBody::_internal_mutable_getmeleeaward() {
  
  if (_impl_.getmeleeaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetMeleeAward>(GetArenaForAllocation());
    _impl_.getmeleeaward_ = p;
  }
  return _impl_.getmeleeaward_;
}
inline ::msg::CSRspGetMeleeAward* CSRspBody::mutable_getmeleeaward() {
  ::msg::CSRspGetMeleeAward* _msg = _internal_mutable_getmeleeaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetMeleeAward)
  return _msg;
}
inline void CSRspBody::set_allocated_getmeleeaward(::msg::CSRspGetMeleeAward* getmeleeaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmeleeaward_);
  }
  if (getmeleeaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getmeleeaward));
    if (message_arena != submessage_arena) {
      getmeleeaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getmeleeaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getmeleeaward_ = getmeleeaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetMeleeAward)
}

// .msg.CSRspAddAiToTeam AddAiToTeam = 71;
inline bool CSRspBody::_internal_has_addaitoteam() const {
  return this != internal_default_instance() && _impl_.addaitoteam_ != nullptr;
}
inline bool CSRspBody::has_addaitoteam() const {
  return _internal_has_addaitoteam();
}
inline const ::msg::CSRspAddAiToTeam& CSRspBody::_internal_addaitoteam() const {
  const ::msg::CSRspAddAiToTeam* p = _impl_.addaitoteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspAddAiToTeam&>(
      ::msg::_CSRspAddAiToTeam_default_instance_);
}
inline const ::msg::CSRspAddAiToTeam& CSRspBody::addaitoteam() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.AddAiToTeam)
  return _internal_addaitoteam();
}
inline void CSRspBody::unsafe_arena_set_allocated_addaitoteam(
    ::msg::CSRspAddAiToTeam* addaitoteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.addaitoteam_);
  }
  _impl_.addaitoteam_ = addaitoteam;
  if (addaitoteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.AddAiToTeam)
}
inline ::msg::CSRspAddAiToTeam* CSRspBody::release_addaitoteam() {
  
  ::msg::CSRspAddAiToTeam* temp = _impl_.addaitoteam_;
  _impl_.addaitoteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspAddAiToTeam* CSRspBody::unsafe_arena_release_addaitoteam() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.AddAiToTeam)
  
  ::msg::CSRspAddAiToTeam* temp = _impl_.addaitoteam_;
  _impl_.addaitoteam_ = nullptr;
  return temp;
}
inline ::msg::CSRspAddAiToTeam* CSRspBody::_internal_mutable_addaitoteam() {
  
  if (_impl_.addaitoteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspAddAiToTeam>(GetArenaForAllocation());
    _impl_.addaitoteam_ = p;
  }
  return _impl_.addaitoteam_;
}
inline ::msg::CSRspAddAiToTeam* CSRspBody::mutable_addaitoteam() {
  ::msg::CSRspAddAiToTeam* _msg = _internal_mutable_addaitoteam();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.AddAiToTeam)
  return _msg;
}
inline void CSRspBody::set_allocated_addaitoteam(::msg::CSRspAddAiToTeam* addaitoteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.addaitoteam_);
  }
  if (addaitoteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(addaitoteam));
    if (message_arena != submessage_arena) {
      addaitoteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addaitoteam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.addaitoteam_ = addaitoteam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.AddAiToTeam)
}

// .msg.CSRspShare Share = 72;
inline bool CSRspBody::_internal_has_share() const {
  return this != internal_default_instance() && _impl_.share_ != nullptr;
}
inline bool CSRspBody::has_share() const {
  return _internal_has_share();
}
inline const ::msg::CSRspShare& CSRspBody::_internal_share() const {
  const ::msg::CSRspShare* p = _impl_.share_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspShare&>(
      ::msg::_CSRspShare_default_instance_);
}
inline const ::msg::CSRspShare& CSRspBody::share() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.Share)
  return _internal_share();
}
inline void CSRspBody::unsafe_arena_set_allocated_share(
    ::msg::CSRspShare* share) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.share_);
  }
  _impl_.share_ = share;
  if (share) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.Share)
}
inline ::msg::CSRspShare* CSRspBody::release_share() {
  
  ::msg::CSRspShare* temp = _impl_.share_;
  _impl_.share_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspShare* CSRspBody::unsafe_arena_release_share() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.Share)
  
  ::msg::CSRspShare* temp = _impl_.share_;
  _impl_.share_ = nullptr;
  return temp;
}
inline ::msg::CSRspShare* CSRspBody::_internal_mutable_share() {
  
  if (_impl_.share_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspShare>(GetArenaForAllocation());
    _impl_.share_ = p;
  }
  return _impl_.share_;
}
inline ::msg::CSRspShare* CSRspBody::mutable_share() {
  ::msg::CSRspShare* _msg = _internal_mutable_share();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.Share)
  return _msg;
}
inline void CSRspBody::set_allocated_share(::msg::CSRspShare* share) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.share_);
  }
  if (share) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(share));
    if (message_arena != submessage_arena) {
      share = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, share, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.share_ = share;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.Share)
}

// .msg.CSRspSkipInterface SkipInterface = 73;
inline bool CSRspBody::_internal_has_skipinterface() const {
  return this != internal_default_instance() && _impl_.skipinterface_ != nullptr;
}
inline bool CSRspBody::has_skipinterface() const {
  return _internal_has_skipinterface();
}
inline const ::msg::CSRspSkipInterface& CSRspBody::_internal_skipinterface() const {
  const ::msg::CSRspSkipInterface* p = _impl_.skipinterface_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSkipInterface&>(
      ::msg::_CSRspSkipInterface_default_instance_);
}
inline const ::msg::CSRspSkipInterface& CSRspBody::skipinterface() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SkipInterface)
  return _internal_skipinterface();
}
inline void CSRspBody::unsafe_arena_set_allocated_skipinterface(
    ::msg::CSRspSkipInterface* skipinterface) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skipinterface_);
  }
  _impl_.skipinterface_ = skipinterface;
  if (skipinterface) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SkipInterface)
}
inline ::msg::CSRspSkipInterface* CSRspBody::release_skipinterface() {
  
  ::msg::CSRspSkipInterface* temp = _impl_.skipinterface_;
  _impl_.skipinterface_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSkipInterface* CSRspBody::unsafe_arena_release_skipinterface() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SkipInterface)
  
  ::msg::CSRspSkipInterface* temp = _impl_.skipinterface_;
  _impl_.skipinterface_ = nullptr;
  return temp;
}
inline ::msg::CSRspSkipInterface* CSRspBody::_internal_mutable_skipinterface() {
  
  if (_impl_.skipinterface_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSkipInterface>(GetArenaForAllocation());
    _impl_.skipinterface_ = p;
  }
  return _impl_.skipinterface_;
}
inline ::msg::CSRspSkipInterface* CSRspBody::mutable_skipinterface() {
  ::msg::CSRspSkipInterface* _msg = _internal_mutable_skipinterface();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SkipInterface)
  return _msg;
}
inline void CSRspBody::set_allocated_skipinterface(::msg::CSRspSkipInterface* skipinterface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skipinterface_);
  }
  if (skipinterface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skipinterface));
    if (message_arena != submessage_arena) {
      skipinterface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skipinterface, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.skipinterface_ = skipinterface;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SkipInterface)
}

// .msg.CSRspTeamGame TeamGame = 74;
inline bool CSRspBody::_internal_has_teamgame() const {
  return this != internal_default_instance() && _impl_.teamgame_ != nullptr;
}
inline bool CSRspBody::has_teamgame() const {
  return _internal_has_teamgame();
}
inline const ::msg::CSRspTeamGame& CSRspBody::_internal_teamgame() const {
  const ::msg::CSRspTeamGame* p = _impl_.teamgame_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspTeamGame&>(
      ::msg::_CSRspTeamGame_default_instance_);
}
inline const ::msg::CSRspTeamGame& CSRspBody::teamgame() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.TeamGame)
  return _internal_teamgame();
}
inline void CSRspBody::unsafe_arena_set_allocated_teamgame(
    ::msg::CSRspTeamGame* teamgame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamgame_);
  }
  _impl_.teamgame_ = teamgame;
  if (teamgame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.TeamGame)
}
inline ::msg::CSRspTeamGame* CSRspBody::release_teamgame() {
  
  ::msg::CSRspTeamGame* temp = _impl_.teamgame_;
  _impl_.teamgame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspTeamGame* CSRspBody::unsafe_arena_release_teamgame() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.TeamGame)
  
  ::msg::CSRspTeamGame* temp = _impl_.teamgame_;
  _impl_.teamgame_ = nullptr;
  return temp;
}
inline ::msg::CSRspTeamGame* CSRspBody::_internal_mutable_teamgame() {
  
  if (_impl_.teamgame_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspTeamGame>(GetArenaForAllocation());
    _impl_.teamgame_ = p;
  }
  return _impl_.teamgame_;
}
inline ::msg::CSRspTeamGame* CSRspBody::mutable_teamgame() {
  ::msg::CSRspTeamGame* _msg = _internal_mutable_teamgame();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.TeamGame)
  return _msg;
}
inline void CSRspBody::set_allocated_teamgame(::msg::CSRspTeamGame* teamgame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamgame_);
  }
  if (teamgame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teamgame));
    if (message_arena != submessage_arena) {
      teamgame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamgame, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.teamgame_ = teamgame;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.TeamGame)
}

// .msg.CSRspSetTeamMode SetTeamMode = 75;
inline bool CSRspBody::_internal_has_setteammode() const {
  return this != internal_default_instance() && _impl_.setteammode_ != nullptr;
}
inline bool CSRspBody::has_setteammode() const {
  return _internal_has_setteammode();
}
inline const ::msg::CSRspSetTeamMode& CSRspBody::_internal_setteammode() const {
  const ::msg::CSRspSetTeamMode* p = _impl_.setteammode_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSetTeamMode&>(
      ::msg::_CSRspSetTeamMode_default_instance_);
}
inline const ::msg::CSRspSetTeamMode& CSRspBody::setteammode() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SetTeamMode)
  return _internal_setteammode();
}
inline void CSRspBody::unsafe_arena_set_allocated_setteammode(
    ::msg::CSRspSetTeamMode* setteammode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setteammode_);
  }
  _impl_.setteammode_ = setteammode;
  if (setteammode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SetTeamMode)
}
inline ::msg::CSRspSetTeamMode* CSRspBody::release_setteammode() {
  
  ::msg::CSRspSetTeamMode* temp = _impl_.setteammode_;
  _impl_.setteammode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSetTeamMode* CSRspBody::unsafe_arena_release_setteammode() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SetTeamMode)
  
  ::msg::CSRspSetTeamMode* temp = _impl_.setteammode_;
  _impl_.setteammode_ = nullptr;
  return temp;
}
inline ::msg::CSRspSetTeamMode* CSRspBody::_internal_mutable_setteammode() {
  
  if (_impl_.setteammode_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSetTeamMode>(GetArenaForAllocation());
    _impl_.setteammode_ = p;
  }
  return _impl_.setteammode_;
}
inline ::msg::CSRspSetTeamMode* CSRspBody::mutable_setteammode() {
  ::msg::CSRspSetTeamMode* _msg = _internal_mutable_setteammode();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SetTeamMode)
  return _msg;
}
inline void CSRspBody::set_allocated_setteammode(::msg::CSRspSetTeamMode* setteammode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setteammode_);
  }
  if (setteammode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setteammode));
    if (message_arena != submessage_arena) {
      setteammode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setteammode, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setteammode_ = setteammode;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SetTeamMode)
}

// .msg.CSRspSetHistoryPvpShowPermission HistoryPvpShowPermission = 76;
inline bool CSRspBody::_internal_has_historypvpshowpermission() const {
  return this != internal_default_instance() && _impl_.historypvpshowpermission_ != nullptr;
}
inline bool CSRspBody::has_historypvpshowpermission() const {
  return _internal_has_historypvpshowpermission();
}
inline const ::msg::CSRspSetHistoryPvpShowPermission& CSRspBody::_internal_historypvpshowpermission() const {
  const ::msg::CSRspSetHistoryPvpShowPermission* p = _impl_.historypvpshowpermission_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSetHistoryPvpShowPermission&>(
      ::msg::_CSRspSetHistoryPvpShowPermission_default_instance_);
}
inline const ::msg::CSRspSetHistoryPvpShowPermission& CSRspBody::historypvpshowpermission() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.HistoryPvpShowPermission)
  return _internal_historypvpshowpermission();
}
inline void CSRspBody::unsafe_arena_set_allocated_historypvpshowpermission(
    ::msg::CSRspSetHistoryPvpShowPermission* historypvpshowpermission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.historypvpshowpermission_);
  }
  _impl_.historypvpshowpermission_ = historypvpshowpermission;
  if (historypvpshowpermission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.HistoryPvpShowPermission)
}
inline ::msg::CSRspSetHistoryPvpShowPermission* CSRspBody::release_historypvpshowpermission() {
  
  ::msg::CSRspSetHistoryPvpShowPermission* temp = _impl_.historypvpshowpermission_;
  _impl_.historypvpshowpermission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSetHistoryPvpShowPermission* CSRspBody::unsafe_arena_release_historypvpshowpermission() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.HistoryPvpShowPermission)
  
  ::msg::CSRspSetHistoryPvpShowPermission* temp = _impl_.historypvpshowpermission_;
  _impl_.historypvpshowpermission_ = nullptr;
  return temp;
}
inline ::msg::CSRspSetHistoryPvpShowPermission* CSRspBody::_internal_mutable_historypvpshowpermission() {
  
  if (_impl_.historypvpshowpermission_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSetHistoryPvpShowPermission>(GetArenaForAllocation());
    _impl_.historypvpshowpermission_ = p;
  }
  return _impl_.historypvpshowpermission_;
}
inline ::msg::CSRspSetHistoryPvpShowPermission* CSRspBody::mutable_historypvpshowpermission() {
  ::msg::CSRspSetHistoryPvpShowPermission* _msg = _internal_mutable_historypvpshowpermission();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.HistoryPvpShowPermission)
  return _msg;
}
inline void CSRspBody::set_allocated_historypvpshowpermission(::msg::CSRspSetHistoryPvpShowPermission* historypvpshowpermission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.historypvpshowpermission_);
  }
  if (historypvpshowpermission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(historypvpshowpermission));
    if (message_arena != submessage_arena) {
      historypvpshowpermission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, historypvpshowpermission, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.historypvpshowpermission_ = historypvpshowpermission;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.HistoryPvpShowPermission)
}

// .msg.CSRspSearchTeam SearchTeam = 77;
inline bool CSRspBody::_internal_has_searchteam() const {
  return this != internal_default_instance() && _impl_.searchteam_ != nullptr;
}
inline bool CSRspBody::has_searchteam() const {
  return _internal_has_searchteam();
}
inline const ::msg::CSRspSearchTeam& CSRspBody::_internal_searchteam() const {
  const ::msg::CSRspSearchTeam* p = _impl_.searchteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSearchTeam&>(
      ::msg::_CSRspSearchTeam_default_instance_);
}
inline const ::msg::CSRspSearchTeam& CSRspBody::searchteam() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SearchTeam)
  return _internal_searchteam();
}
inline void CSRspBody::unsafe_arena_set_allocated_searchteam(
    ::msg::CSRspSearchTeam* searchteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.searchteam_);
  }
  _impl_.searchteam_ = searchteam;
  if (searchteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SearchTeam)
}
inline ::msg::CSRspSearchTeam* CSRspBody::release_searchteam() {
  
  ::msg::CSRspSearchTeam* temp = _impl_.searchteam_;
  _impl_.searchteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSearchTeam* CSRspBody::unsafe_arena_release_searchteam() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SearchTeam)
  
  ::msg::CSRspSearchTeam* temp = _impl_.searchteam_;
  _impl_.searchteam_ = nullptr;
  return temp;
}
inline ::msg::CSRspSearchTeam* CSRspBody::_internal_mutable_searchteam() {
  
  if (_impl_.searchteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSearchTeam>(GetArenaForAllocation());
    _impl_.searchteam_ = p;
  }
  return _impl_.searchteam_;
}
inline ::msg::CSRspSearchTeam* CSRspBody::mutable_searchteam() {
  ::msg::CSRspSearchTeam* _msg = _internal_mutable_searchteam();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SearchTeam)
  return _msg;
}
inline void CSRspBody::set_allocated_searchteam(::msg::CSRspSearchTeam* searchteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.searchteam_);
  }
  if (searchteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(searchteam));
    if (message_arena != submessage_arena) {
      searchteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, searchteam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.searchteam_ = searchteam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SearchTeam)
}

// .msg.CSRspApplyChat ApplyChat = 78;
inline bool CSRspBody::_internal_has_applychat() const {
  return this != internal_default_instance() && _impl_.applychat_ != nullptr;
}
inline bool CSRspBody::has_applychat() const {
  return _internal_has_applychat();
}
inline const ::msg::CSRspApplyChat& CSRspBody::_internal_applychat() const {
  const ::msg::CSRspApplyChat* p = _impl_.applychat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspApplyChat&>(
      ::msg::_CSRspApplyChat_default_instance_);
}
inline const ::msg::CSRspApplyChat& CSRspBody::applychat() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ApplyChat)
  return _internal_applychat();
}
inline void CSRspBody::unsafe_arena_set_allocated_applychat(
    ::msg::CSRspApplyChat* applychat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.applychat_);
  }
  _impl_.applychat_ = applychat;
  if (applychat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ApplyChat)
}
inline ::msg::CSRspApplyChat* CSRspBody::release_applychat() {
  
  ::msg::CSRspApplyChat* temp = _impl_.applychat_;
  _impl_.applychat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspApplyChat* CSRspBody::unsafe_arena_release_applychat() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ApplyChat)
  
  ::msg::CSRspApplyChat* temp = _impl_.applychat_;
  _impl_.applychat_ = nullptr;
  return temp;
}
inline ::msg::CSRspApplyChat* CSRspBody::_internal_mutable_applychat() {
  
  if (_impl_.applychat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspApplyChat>(GetArenaForAllocation());
    _impl_.applychat_ = p;
  }
  return _impl_.applychat_;
}
inline ::msg::CSRspApplyChat* CSRspBody::mutable_applychat() {
  ::msg::CSRspApplyChat* _msg = _internal_mutable_applychat();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ApplyChat)
  return _msg;
}
inline void CSRspBody::set_allocated_applychat(::msg::CSRspApplyChat* applychat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.applychat_);
  }
  if (applychat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applychat));
    if (message_arena != submessage_arena) {
      applychat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applychat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.applychat_ = applychat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ApplyChat)
}

// .msg.CSRspChatLogin ChatLogin = 79;
inline bool CSRspBody::_internal_has_chatlogin() const {
  return this != internal_default_instance() && _impl_.chatlogin_ != nullptr;
}
inline bool CSRspBody::has_chatlogin() const {
  return _internal_has_chatlogin();
}
inline const ::msg::CSRspChatLogin& CSRspBody::_internal_chatlogin() const {
  const ::msg::CSRspChatLogin* p = _impl_.chatlogin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspChatLogin&>(
      ::msg::_CSRspChatLogin_default_instance_);
}
inline const ::msg::CSRspChatLogin& CSRspBody::chatlogin() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ChatLogin)
  return _internal_chatlogin();
}
inline void CSRspBody::unsafe_arena_set_allocated_chatlogin(
    ::msg::CSRspChatLogin* chatlogin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chatlogin_);
  }
  _impl_.chatlogin_ = chatlogin;
  if (chatlogin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ChatLogin)
}
inline ::msg::CSRspChatLogin* CSRspBody::release_chatlogin() {
  
  ::msg::CSRspChatLogin* temp = _impl_.chatlogin_;
  _impl_.chatlogin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspChatLogin* CSRspBody::unsafe_arena_release_chatlogin() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ChatLogin)
  
  ::msg::CSRspChatLogin* temp = _impl_.chatlogin_;
  _impl_.chatlogin_ = nullptr;
  return temp;
}
inline ::msg::CSRspChatLogin* CSRspBody::_internal_mutable_chatlogin() {
  
  if (_impl_.chatlogin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspChatLogin>(GetArenaForAllocation());
    _impl_.chatlogin_ = p;
  }
  return _impl_.chatlogin_;
}
inline ::msg::CSRspChatLogin* CSRspBody::mutable_chatlogin() {
  ::msg::CSRspChatLogin* _msg = _internal_mutable_chatlogin();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ChatLogin)
  return _msg;
}
inline void CSRspBody::set_allocated_chatlogin(::msg::CSRspChatLogin* chatlogin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chatlogin_);
  }
  if (chatlogin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chatlogin));
    if (message_arena != submessage_arena) {
      chatlogin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chatlogin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chatlogin_ = chatlogin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ChatLogin)
}

// .msg.CSRspProbeNetDelay ProbeNetDelay = 80;
inline bool CSRspBody::_internal_has_probenetdelay() const {
  return this != internal_default_instance() && _impl_.probenetdelay_ != nullptr;
}
inline bool CSRspBody::has_probenetdelay() const {
  return _internal_has_probenetdelay();
}
inline const ::msg::CSRspProbeNetDelay& CSRspBody::_internal_probenetdelay() const {
  const ::msg::CSRspProbeNetDelay* p = _impl_.probenetdelay_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspProbeNetDelay&>(
      ::msg::_CSRspProbeNetDelay_default_instance_);
}
inline const ::msg::CSRspProbeNetDelay& CSRspBody::probenetdelay() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ProbeNetDelay)
  return _internal_probenetdelay();
}
inline void CSRspBody::unsafe_arena_set_allocated_probenetdelay(
    ::msg::CSRspProbeNetDelay* probenetdelay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.probenetdelay_);
  }
  _impl_.probenetdelay_ = probenetdelay;
  if (probenetdelay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ProbeNetDelay)
}
inline ::msg::CSRspProbeNetDelay* CSRspBody::release_probenetdelay() {
  
  ::msg::CSRspProbeNetDelay* temp = _impl_.probenetdelay_;
  _impl_.probenetdelay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspProbeNetDelay* CSRspBody::unsafe_arena_release_probenetdelay() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ProbeNetDelay)
  
  ::msg::CSRspProbeNetDelay* temp = _impl_.probenetdelay_;
  _impl_.probenetdelay_ = nullptr;
  return temp;
}
inline ::msg::CSRspProbeNetDelay* CSRspBody::_internal_mutable_probenetdelay() {
  
  if (_impl_.probenetdelay_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspProbeNetDelay>(GetArenaForAllocation());
    _impl_.probenetdelay_ = p;
  }
  return _impl_.probenetdelay_;
}
inline ::msg::CSRspProbeNetDelay* CSRspBody::mutable_probenetdelay() {
  ::msg::CSRspProbeNetDelay* _msg = _internal_mutable_probenetdelay();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ProbeNetDelay)
  return _msg;
}
inline void CSRspBody::set_allocated_probenetdelay(::msg::CSRspProbeNetDelay* probenetdelay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.probenetdelay_);
  }
  if (probenetdelay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(probenetdelay));
    if (message_arena != submessage_arena) {
      probenetdelay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, probenetdelay, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.probenetdelay_ = probenetdelay;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ProbeNetDelay)
}

// .msg.CSRspGetEggs GetEggs = 81;
inline bool CSRspBody::_internal_has_geteggs() const {
  return this != internal_default_instance() && _impl_.geteggs_ != nullptr;
}
inline bool CSRspBody::has_geteggs() const {
  return _internal_has_geteggs();
}
inline const ::msg::CSRspGetEggs& CSRspBody::_internal_geteggs() const {
  const ::msg::CSRspGetEggs* p = _impl_.geteggs_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetEggs&>(
      ::msg::_CSRspGetEggs_default_instance_);
}
inline const ::msg::CSRspGetEggs& CSRspBody::geteggs() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetEggs)
  return _internal_geteggs();
}
inline void CSRspBody::unsafe_arena_set_allocated_geteggs(
    ::msg::CSRspGetEggs* geteggs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.geteggs_);
  }
  _impl_.geteggs_ = geteggs;
  if (geteggs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetEggs)
}
inline ::msg::CSRspGetEggs* CSRspBody::release_geteggs() {
  
  ::msg::CSRspGetEggs* temp = _impl_.geteggs_;
  _impl_.geteggs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetEggs* CSRspBody::unsafe_arena_release_geteggs() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetEggs)
  
  ::msg::CSRspGetEggs* temp = _impl_.geteggs_;
  _impl_.geteggs_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetEggs* CSRspBody::_internal_mutable_geteggs() {
  
  if (_impl_.geteggs_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetEggs>(GetArenaForAllocation());
    _impl_.geteggs_ = p;
  }
  return _impl_.geteggs_;
}
inline ::msg::CSRspGetEggs* CSRspBody::mutable_geteggs() {
  ::msg::CSRspGetEggs* _msg = _internal_mutable_geteggs();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetEggs)
  return _msg;
}
inline void CSRspBody::set_allocated_geteggs(::msg::CSRspGetEggs* geteggs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.geteggs_);
  }
  if (geteggs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geteggs));
    if (message_arena != submessage_arena) {
      geteggs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geteggs, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.geteggs_ = geteggs;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetEggs)
}

// .msg.CSRspBuyGoods BuyGoods = 82;
inline bool CSRspBody::_internal_has_buygoods() const {
  return this != internal_default_instance() && _impl_.buygoods_ != nullptr;
}
inline bool CSRspBody::has_buygoods() const {
  return _internal_has_buygoods();
}
inline const ::msg::CSRspBuyGoods& CSRspBody::_internal_buygoods() const {
  const ::msg::CSRspBuyGoods* p = _impl_.buygoods_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspBuyGoods&>(
      ::msg::_CSRspBuyGoods_default_instance_);
}
inline const ::msg::CSRspBuyGoods& CSRspBody::buygoods() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.BuyGoods)
  return _internal_buygoods();
}
inline void CSRspBody::unsafe_arena_set_allocated_buygoods(
    ::msg::CSRspBuyGoods* buygoods) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buygoods_);
  }
  _impl_.buygoods_ = buygoods;
  if (buygoods) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.BuyGoods)
}
inline ::msg::CSRspBuyGoods* CSRspBody::release_buygoods() {
  
  ::msg::CSRspBuyGoods* temp = _impl_.buygoods_;
  _impl_.buygoods_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspBuyGoods* CSRspBody::unsafe_arena_release_buygoods() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.BuyGoods)
  
  ::msg::CSRspBuyGoods* temp = _impl_.buygoods_;
  _impl_.buygoods_ = nullptr;
  return temp;
}
inline ::msg::CSRspBuyGoods* CSRspBody::_internal_mutable_buygoods() {
  
  if (_impl_.buygoods_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspBuyGoods>(GetArenaForAllocation());
    _impl_.buygoods_ = p;
  }
  return _impl_.buygoods_;
}
inline ::msg::CSRspBuyGoods* CSRspBody::mutable_buygoods() {
  ::msg::CSRspBuyGoods* _msg = _internal_mutable_buygoods();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.BuyGoods)
  return _msg;
}
inline void CSRspBody::set_allocated_buygoods(::msg::CSRspBuyGoods* buygoods) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buygoods_);
  }
  if (buygoods) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buygoods));
    if (message_arena != submessage_arena) {
      buygoods = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buygoods, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buygoods_ = buygoods;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.BuyGoods)
}

// .msg.CSRspExchangePassportGoods ExchangePassportGoods = 83;
inline bool CSRspBody::_internal_has_exchangepassportgoods() const {
  return this != internal_default_instance() && _impl_.exchangepassportgoods_ != nullptr;
}
inline bool CSRspBody::has_exchangepassportgoods() const {
  return _internal_has_exchangepassportgoods();
}
inline const ::msg::CSRspExchangePassportGoods& CSRspBody::_internal_exchangepassportgoods() const {
  const ::msg::CSRspExchangePassportGoods* p = _impl_.exchangepassportgoods_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspExchangePassportGoods&>(
      ::msg::_CSRspExchangePassportGoods_default_instance_);
}
inline const ::msg::CSRspExchangePassportGoods& CSRspBody::exchangepassportgoods() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ExchangePassportGoods)
  return _internal_exchangepassportgoods();
}
inline void CSRspBody::unsafe_arena_set_allocated_exchangepassportgoods(
    ::msg::CSRspExchangePassportGoods* exchangepassportgoods) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchangepassportgoods_);
  }
  _impl_.exchangepassportgoods_ = exchangepassportgoods;
  if (exchangepassportgoods) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ExchangePassportGoods)
}
inline ::msg::CSRspExchangePassportGoods* CSRspBody::release_exchangepassportgoods() {
  
  ::msg::CSRspExchangePassportGoods* temp = _impl_.exchangepassportgoods_;
  _impl_.exchangepassportgoods_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspExchangePassportGoods* CSRspBody::unsafe_arena_release_exchangepassportgoods() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ExchangePassportGoods)
  
  ::msg::CSRspExchangePassportGoods* temp = _impl_.exchangepassportgoods_;
  _impl_.exchangepassportgoods_ = nullptr;
  return temp;
}
inline ::msg::CSRspExchangePassportGoods* CSRspBody::_internal_mutable_exchangepassportgoods() {
  
  if (_impl_.exchangepassportgoods_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspExchangePassportGoods>(GetArenaForAllocation());
    _impl_.exchangepassportgoods_ = p;
  }
  return _impl_.exchangepassportgoods_;
}
inline ::msg::CSRspExchangePassportGoods* CSRspBody::mutable_exchangepassportgoods() {
  ::msg::CSRspExchangePassportGoods* _msg = _internal_mutable_exchangepassportgoods();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ExchangePassportGoods)
  return _msg;
}
inline void CSRspBody::set_allocated_exchangepassportgoods(::msg::CSRspExchangePassportGoods* exchangepassportgoods) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchangepassportgoods_);
  }
  if (exchangepassportgoods) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exchangepassportgoods));
    if (message_arena != submessage_arena) {
      exchangepassportgoods = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exchangepassportgoods, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.exchangepassportgoods_ = exchangepassportgoods;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ExchangePassportGoods)
}

// .msg.CSRspUsePassportTaskCard UsePassportTaskCard = 84;
inline bool CSRspBody::_internal_has_usepassporttaskcard() const {
  return this != internal_default_instance() && _impl_.usepassporttaskcard_ != nullptr;
}
inline bool CSRspBody::has_usepassporttaskcard() const {
  return _internal_has_usepassporttaskcard();
}
inline const ::msg::CSRspUsePassportTaskCard& CSRspBody::_internal_usepassporttaskcard() const {
  const ::msg::CSRspUsePassportTaskCard* p = _impl_.usepassporttaskcard_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUsePassportTaskCard&>(
      ::msg::_CSRspUsePassportTaskCard_default_instance_);
}
inline const ::msg::CSRspUsePassportTaskCard& CSRspBody::usepassporttaskcard() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UsePassportTaskCard)
  return _internal_usepassporttaskcard();
}
inline void CSRspBody::unsafe_arena_set_allocated_usepassporttaskcard(
    ::msg::CSRspUsePassportTaskCard* usepassporttaskcard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usepassporttaskcard_);
  }
  _impl_.usepassporttaskcard_ = usepassporttaskcard;
  if (usepassporttaskcard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UsePassportTaskCard)
}
inline ::msg::CSRspUsePassportTaskCard* CSRspBody::release_usepassporttaskcard() {
  
  ::msg::CSRspUsePassportTaskCard* temp = _impl_.usepassporttaskcard_;
  _impl_.usepassporttaskcard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUsePassportTaskCard* CSRspBody::unsafe_arena_release_usepassporttaskcard() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UsePassportTaskCard)
  
  ::msg::CSRspUsePassportTaskCard* temp = _impl_.usepassporttaskcard_;
  _impl_.usepassporttaskcard_ = nullptr;
  return temp;
}
inline ::msg::CSRspUsePassportTaskCard* CSRspBody::_internal_mutable_usepassporttaskcard() {
  
  if (_impl_.usepassporttaskcard_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUsePassportTaskCard>(GetArenaForAllocation());
    _impl_.usepassporttaskcard_ = p;
  }
  return _impl_.usepassporttaskcard_;
}
inline ::msg::CSRspUsePassportTaskCard* CSRspBody::mutable_usepassporttaskcard() {
  ::msg::CSRspUsePassportTaskCard* _msg = _internal_mutable_usepassporttaskcard();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UsePassportTaskCard)
  return _msg;
}
inline void CSRspBody::set_allocated_usepassporttaskcard(::msg::CSRspUsePassportTaskCard* usepassporttaskcard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usepassporttaskcard_);
  }
  if (usepassporttaskcard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usepassporttaskcard));
    if (message_arena != submessage_arena) {
      usepassporttaskcard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usepassporttaskcard, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.usepassporttaskcard_ = usepassporttaskcard;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UsePassportTaskCard)
}

// .msg.CSRspOpenRandChest OpenRandChest = 85;
inline bool CSRspBody::_internal_has_openrandchest() const {
  return this != internal_default_instance() && _impl_.openrandchest_ != nullptr;
}
inline bool CSRspBody::has_openrandchest() const {
  return _internal_has_openrandchest();
}
inline const ::msg::CSRspOpenRandChest& CSRspBody::_internal_openrandchest() const {
  const ::msg::CSRspOpenRandChest* p = _impl_.openrandchest_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspOpenRandChest&>(
      ::msg::_CSRspOpenRandChest_default_instance_);
}
inline const ::msg::CSRspOpenRandChest& CSRspBody::openrandchest() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.OpenRandChest)
  return _internal_openrandchest();
}
inline void CSRspBody::unsafe_arena_set_allocated_openrandchest(
    ::msg::CSRspOpenRandChest* openrandchest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.openrandchest_);
  }
  _impl_.openrandchest_ = openrandchest;
  if (openrandchest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.OpenRandChest)
}
inline ::msg::CSRspOpenRandChest* CSRspBody::release_openrandchest() {
  
  ::msg::CSRspOpenRandChest* temp = _impl_.openrandchest_;
  _impl_.openrandchest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspOpenRandChest* CSRspBody::unsafe_arena_release_openrandchest() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.OpenRandChest)
  
  ::msg::CSRspOpenRandChest* temp = _impl_.openrandchest_;
  _impl_.openrandchest_ = nullptr;
  return temp;
}
inline ::msg::CSRspOpenRandChest* CSRspBody::_internal_mutable_openrandchest() {
  
  if (_impl_.openrandchest_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspOpenRandChest>(GetArenaForAllocation());
    _impl_.openrandchest_ = p;
  }
  return _impl_.openrandchest_;
}
inline ::msg::CSRspOpenRandChest* CSRspBody::mutable_openrandchest() {
  ::msg::CSRspOpenRandChest* _msg = _internal_mutable_openrandchest();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.OpenRandChest)
  return _msg;
}
inline void CSRspBody::set_allocated_openrandchest(::msg::CSRspOpenRandChest* openrandchest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.openrandchest_);
  }
  if (openrandchest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(openrandchest));
    if (message_arena != submessage_arena) {
      openrandchest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, openrandchest, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.openrandchest_ = openrandchest;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.OpenRandChest)
}

// .msg.CSRspEggLottery EggLottery = 86;
inline bool CSRspBody::_internal_has_egglottery() const {
  return this != internal_default_instance() && _impl_.egglottery_ != nullptr;
}
inline bool CSRspBody::has_egglottery() const {
  return _internal_has_egglottery();
}
inline const ::msg::CSRspEggLottery& CSRspBody::_internal_egglottery() const {
  const ::msg::CSRspEggLottery* p = _impl_.egglottery_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspEggLottery&>(
      ::msg::_CSRspEggLottery_default_instance_);
}
inline const ::msg::CSRspEggLottery& CSRspBody::egglottery() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.EggLottery)
  return _internal_egglottery();
}
inline void CSRspBody::unsafe_arena_set_allocated_egglottery(
    ::msg::CSRspEggLottery* egglottery) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.egglottery_);
  }
  _impl_.egglottery_ = egglottery;
  if (egglottery) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.EggLottery)
}
inline ::msg::CSRspEggLottery* CSRspBody::release_egglottery() {
  
  ::msg::CSRspEggLottery* temp = _impl_.egglottery_;
  _impl_.egglottery_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspEggLottery* CSRspBody::unsafe_arena_release_egglottery() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.EggLottery)
  
  ::msg::CSRspEggLottery* temp = _impl_.egglottery_;
  _impl_.egglottery_ = nullptr;
  return temp;
}
inline ::msg::CSRspEggLottery* CSRspBody::_internal_mutable_egglottery() {
  
  if (_impl_.egglottery_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspEggLottery>(GetArenaForAllocation());
    _impl_.egglottery_ = p;
  }
  return _impl_.egglottery_;
}
inline ::msg::CSRspEggLottery* CSRspBody::mutable_egglottery() {
  ::msg::CSRspEggLottery* _msg = _internal_mutable_egglottery();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.EggLottery)
  return _msg;
}
inline void CSRspBody::set_allocated_egglottery(::msg::CSRspEggLottery* egglottery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.egglottery_);
  }
  if (egglottery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(egglottery));
    if (message_arena != submessage_arena) {
      egglottery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, egglottery, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.egglottery_ = egglottery;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.EggLottery)
}

// .msg.CSRspQueryDiamondBalance QueryDiamondBalance = 87;
inline bool CSRspBody::_internal_has_querydiamondbalance() const {
  return this != internal_default_instance() && _impl_.querydiamondbalance_ != nullptr;
}
inline bool CSRspBody::has_querydiamondbalance() const {
  return _internal_has_querydiamondbalance();
}
inline const ::msg::CSRspQueryDiamondBalance& CSRspBody::_internal_querydiamondbalance() const {
  const ::msg::CSRspQueryDiamondBalance* p = _impl_.querydiamondbalance_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspQueryDiamondBalance&>(
      ::msg::_CSRspQueryDiamondBalance_default_instance_);
}
inline const ::msg::CSRspQueryDiamondBalance& CSRspBody::querydiamondbalance() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.QueryDiamondBalance)
  return _internal_querydiamondbalance();
}
inline void CSRspBody::unsafe_arena_set_allocated_querydiamondbalance(
    ::msg::CSRspQueryDiamondBalance* querydiamondbalance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.querydiamondbalance_);
  }
  _impl_.querydiamondbalance_ = querydiamondbalance;
  if (querydiamondbalance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.QueryDiamondBalance)
}
inline ::msg::CSRspQueryDiamondBalance* CSRspBody::release_querydiamondbalance() {
  
  ::msg::CSRspQueryDiamondBalance* temp = _impl_.querydiamondbalance_;
  _impl_.querydiamondbalance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspQueryDiamondBalance* CSRspBody::unsafe_arena_release_querydiamondbalance() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.QueryDiamondBalance)
  
  ::msg::CSRspQueryDiamondBalance* temp = _impl_.querydiamondbalance_;
  _impl_.querydiamondbalance_ = nullptr;
  return temp;
}
inline ::msg::CSRspQueryDiamondBalance* CSRspBody::_internal_mutable_querydiamondbalance() {
  
  if (_impl_.querydiamondbalance_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspQueryDiamondBalance>(GetArenaForAllocation());
    _impl_.querydiamondbalance_ = p;
  }
  return _impl_.querydiamondbalance_;
}
inline ::msg::CSRspQueryDiamondBalance* CSRspBody::mutable_querydiamondbalance() {
  ::msg::CSRspQueryDiamondBalance* _msg = _internal_mutable_querydiamondbalance();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.QueryDiamondBalance)
  return _msg;
}
inline void CSRspBody::set_allocated_querydiamondbalance(::msg::CSRspQueryDiamondBalance* querydiamondbalance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.querydiamondbalance_);
  }
  if (querydiamondbalance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(querydiamondbalance));
    if (message_arena != submessage_arena) {
      querydiamondbalance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, querydiamondbalance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.querydiamondbalance_ = querydiamondbalance;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.QueryDiamondBalance)
}

// .msg.CSRspUseItem UseItem = 88;
inline bool CSRspBody::_internal_has_useitem() const {
  return this != internal_default_instance() && _impl_.useitem_ != nullptr;
}
inline bool CSRspBody::has_useitem() const {
  return _internal_has_useitem();
}
inline const ::msg::CSRspUseItem& CSRspBody::_internal_useitem() const {
  const ::msg::CSRspUseItem* p = _impl_.useitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUseItem&>(
      ::msg::_CSRspUseItem_default_instance_);
}
inline const ::msg::CSRspUseItem& CSRspBody::useitem() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UseItem)
  return _internal_useitem();
}
inline void CSRspBody::unsafe_arena_set_allocated_useitem(
    ::msg::CSRspUseItem* useitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.useitem_);
  }
  _impl_.useitem_ = useitem;
  if (useitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UseItem)
}
inline ::msg::CSRspUseItem* CSRspBody::release_useitem() {
  
  ::msg::CSRspUseItem* temp = _impl_.useitem_;
  _impl_.useitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUseItem* CSRspBody::unsafe_arena_release_useitem() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UseItem)
  
  ::msg::CSRspUseItem* temp = _impl_.useitem_;
  _impl_.useitem_ = nullptr;
  return temp;
}
inline ::msg::CSRspUseItem* CSRspBody::_internal_mutable_useitem() {
  
  if (_impl_.useitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUseItem>(GetArenaForAllocation());
    _impl_.useitem_ = p;
  }
  return _impl_.useitem_;
}
inline ::msg::CSRspUseItem* CSRspBody::mutable_useitem() {
  ::msg::CSRspUseItem* _msg = _internal_mutable_useitem();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UseItem)
  return _msg;
}
inline void CSRspBody::set_allocated_useitem(::msg::CSRspUseItem* useitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.useitem_);
  }
  if (useitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(useitem));
    if (message_arena != submessage_arena) {
      useitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, useitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.useitem_ = useitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UseItem)
}

// .msg.CSRspUseExperienceCard UseExperienceCard = 89;
inline bool CSRspBody::_internal_has_useexperiencecard() const {
  return this != internal_default_instance() && _impl_.useexperiencecard_ != nullptr;
}
inline bool CSRspBody::has_useexperiencecard() const {
  return _internal_has_useexperiencecard();
}
inline const ::msg::CSRspUseExperienceCard& CSRspBody::_internal_useexperiencecard() const {
  const ::msg::CSRspUseExperienceCard* p = _impl_.useexperiencecard_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUseExperienceCard&>(
      ::msg::_CSRspUseExperienceCard_default_instance_);
}
inline const ::msg::CSRspUseExperienceCard& CSRspBody::useexperiencecard() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UseExperienceCard)
  return _internal_useexperiencecard();
}
inline void CSRspBody::unsafe_arena_set_allocated_useexperiencecard(
    ::msg::CSRspUseExperienceCard* useexperiencecard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.useexperiencecard_);
  }
  _impl_.useexperiencecard_ = useexperiencecard;
  if (useexperiencecard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UseExperienceCard)
}
inline ::msg::CSRspUseExperienceCard* CSRspBody::release_useexperiencecard() {
  
  ::msg::CSRspUseExperienceCard* temp = _impl_.useexperiencecard_;
  _impl_.useexperiencecard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUseExperienceCard* CSRspBody::unsafe_arena_release_useexperiencecard() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UseExperienceCard)
  
  ::msg::CSRspUseExperienceCard* temp = _impl_.useexperiencecard_;
  _impl_.useexperiencecard_ = nullptr;
  return temp;
}
inline ::msg::CSRspUseExperienceCard* CSRspBody::_internal_mutable_useexperiencecard() {
  
  if (_impl_.useexperiencecard_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUseExperienceCard>(GetArenaForAllocation());
    _impl_.useexperiencecard_ = p;
  }
  return _impl_.useexperiencecard_;
}
inline ::msg::CSRspUseExperienceCard* CSRspBody::mutable_useexperiencecard() {
  ::msg::CSRspUseExperienceCard* _msg = _internal_mutable_useexperiencecard();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UseExperienceCard)
  return _msg;
}
inline void CSRspBody::set_allocated_useexperiencecard(::msg::CSRspUseExperienceCard* useexperiencecard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.useexperiencecard_);
  }
  if (useexperiencecard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(useexperiencecard));
    if (message_arena != submessage_arena) {
      useexperiencecard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, useexperiencecard, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.useexperiencecard_ = useexperiencecard;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UseExperienceCard)
}

// .msg.CSRspRandTargetItem RandTargetItem = 90;
inline bool CSRspBody::_internal_has_randtargetitem() const {
  return this != internal_default_instance() && _impl_.randtargetitem_ != nullptr;
}
inline bool CSRspBody::has_randtargetitem() const {
  return _internal_has_randtargetitem();
}
inline const ::msg::CSRspRandTargetItem& CSRspBody::_internal_randtargetitem() const {
  const ::msg::CSRspRandTargetItem* p = _impl_.randtargetitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRandTargetItem&>(
      ::msg::_CSRspRandTargetItem_default_instance_);
}
inline const ::msg::CSRspRandTargetItem& CSRspBody::randtargetitem() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RandTargetItem)
  return _internal_randtargetitem();
}
inline void CSRspBody::unsafe_arena_set_allocated_randtargetitem(
    ::msg::CSRspRandTargetItem* randtargetitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.randtargetitem_);
  }
  _impl_.randtargetitem_ = randtargetitem;
  if (randtargetitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RandTargetItem)
}
inline ::msg::CSRspRandTargetItem* CSRspBody::release_randtargetitem() {
  
  ::msg::CSRspRandTargetItem* temp = _impl_.randtargetitem_;
  _impl_.randtargetitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRandTargetItem* CSRspBody::unsafe_arena_release_randtargetitem() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RandTargetItem)
  
  ::msg::CSRspRandTargetItem* temp = _impl_.randtargetitem_;
  _impl_.randtargetitem_ = nullptr;
  return temp;
}
inline ::msg::CSRspRandTargetItem* CSRspBody::_internal_mutable_randtargetitem() {
  
  if (_impl_.randtargetitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRandTargetItem>(GetArenaForAllocation());
    _impl_.randtargetitem_ = p;
  }
  return _impl_.randtargetitem_;
}
inline ::msg::CSRspRandTargetItem* CSRspBody::mutable_randtargetitem() {
  ::msg::CSRspRandTargetItem* _msg = _internal_mutable_randtargetitem();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RandTargetItem)
  return _msg;
}
inline void CSRspBody::set_allocated_randtargetitem(::msg::CSRspRandTargetItem* randtargetitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.randtargetitem_);
  }
  if (randtargetitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(randtargetitem));
    if (message_arena != submessage_arena) {
      randtargetitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, randtargetitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.randtargetitem_ = randtargetitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RandTargetItem)
}

// .msg.CSRspAddBlacklist AddBlacklist = 91;
inline bool CSRspBody::_internal_has_addblacklist() const {
  return this != internal_default_instance() && _impl_.addblacklist_ != nullptr;
}
inline bool CSRspBody::has_addblacklist() const {
  return _internal_has_addblacklist();
}
inline const ::msg::CSRspAddBlacklist& CSRspBody::_internal_addblacklist() const {
  const ::msg::CSRspAddBlacklist* p = _impl_.addblacklist_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspAddBlacklist&>(
      ::msg::_CSRspAddBlacklist_default_instance_);
}
inline const ::msg::CSRspAddBlacklist& CSRspBody::addblacklist() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.AddBlacklist)
  return _internal_addblacklist();
}
inline void CSRspBody::unsafe_arena_set_allocated_addblacklist(
    ::msg::CSRspAddBlacklist* addblacklist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.addblacklist_);
  }
  _impl_.addblacklist_ = addblacklist;
  if (addblacklist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.AddBlacklist)
}
inline ::msg::CSRspAddBlacklist* CSRspBody::release_addblacklist() {
  
  ::msg::CSRspAddBlacklist* temp = _impl_.addblacklist_;
  _impl_.addblacklist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspAddBlacklist* CSRspBody::unsafe_arena_release_addblacklist() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.AddBlacklist)
  
  ::msg::CSRspAddBlacklist* temp = _impl_.addblacklist_;
  _impl_.addblacklist_ = nullptr;
  return temp;
}
inline ::msg::CSRspAddBlacklist* CSRspBody::_internal_mutable_addblacklist() {
  
  if (_impl_.addblacklist_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspAddBlacklist>(GetArenaForAllocation());
    _impl_.addblacklist_ = p;
  }
  return _impl_.addblacklist_;
}
inline ::msg::CSRspAddBlacklist* CSRspBody::mutable_addblacklist() {
  ::msg::CSRspAddBlacklist* _msg = _internal_mutable_addblacklist();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.AddBlacklist)
  return _msg;
}
inline void CSRspBody::set_allocated_addblacklist(::msg::CSRspAddBlacklist* addblacklist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.addblacklist_);
  }
  if (addblacklist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(addblacklist));
    if (message_arena != submessage_arena) {
      addblacklist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addblacklist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.addblacklist_ = addblacklist;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.AddBlacklist)
}

// .msg.CSRspRemoveBlacklist RemoveBlacklist = 92;
inline bool CSRspBody::_internal_has_removeblacklist() const {
  return this != internal_default_instance() && _impl_.removeblacklist_ != nullptr;
}
inline bool CSRspBody::has_removeblacklist() const {
  return _internal_has_removeblacklist();
}
inline const ::msg::CSRspRemoveBlacklist& CSRspBody::_internal_removeblacklist() const {
  const ::msg::CSRspRemoveBlacklist* p = _impl_.removeblacklist_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRemoveBlacklist&>(
      ::msg::_CSRspRemoveBlacklist_default_instance_);
}
inline const ::msg::CSRspRemoveBlacklist& CSRspBody::removeblacklist() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RemoveBlacklist)
  return _internal_removeblacklist();
}
inline void CSRspBody::unsafe_arena_set_allocated_removeblacklist(
    ::msg::CSRspRemoveBlacklist* removeblacklist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removeblacklist_);
  }
  _impl_.removeblacklist_ = removeblacklist;
  if (removeblacklist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RemoveBlacklist)
}
inline ::msg::CSRspRemoveBlacklist* CSRspBody::release_removeblacklist() {
  
  ::msg::CSRspRemoveBlacklist* temp = _impl_.removeblacklist_;
  _impl_.removeblacklist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRemoveBlacklist* CSRspBody::unsafe_arena_release_removeblacklist() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RemoveBlacklist)
  
  ::msg::CSRspRemoveBlacklist* temp = _impl_.removeblacklist_;
  _impl_.removeblacklist_ = nullptr;
  return temp;
}
inline ::msg::CSRspRemoveBlacklist* CSRspBody::_internal_mutable_removeblacklist() {
  
  if (_impl_.removeblacklist_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRemoveBlacklist>(GetArenaForAllocation());
    _impl_.removeblacklist_ = p;
  }
  return _impl_.removeblacklist_;
}
inline ::msg::CSRspRemoveBlacklist* CSRspBody::mutable_removeblacklist() {
  ::msg::CSRspRemoveBlacklist* _msg = _internal_mutable_removeblacklist();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RemoveBlacklist)
  return _msg;
}
inline void CSRspBody::set_allocated_removeblacklist(::msg::CSRspRemoveBlacklist* removeblacklist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removeblacklist_);
  }
  if (removeblacklist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removeblacklist));
    if (message_arena != submessage_arena) {
      removeblacklist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removeblacklist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.removeblacklist_ = removeblacklist;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RemoveBlacklist)
}

// .msg.CSRspReportPlayerBirth ReportPlayerBirth = 93;
inline bool CSRspBody::_internal_has_reportplayerbirth() const {
  return this != internal_default_instance() && _impl_.reportplayerbirth_ != nullptr;
}
inline bool CSRspBody::has_reportplayerbirth() const {
  return _internal_has_reportplayerbirth();
}
inline const ::msg::CSRspReportPlayerBirth& CSRspBody::_internal_reportplayerbirth() const {
  const ::msg::CSRspReportPlayerBirth* p = _impl_.reportplayerbirth_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspReportPlayerBirth&>(
      ::msg::_CSRspReportPlayerBirth_default_instance_);
}
inline const ::msg::CSRspReportPlayerBirth& CSRspBody::reportplayerbirth() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ReportPlayerBirth)
  return _internal_reportplayerbirth();
}
inline void CSRspBody::unsafe_arena_set_allocated_reportplayerbirth(
    ::msg::CSRspReportPlayerBirth* reportplayerbirth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportplayerbirth_);
  }
  _impl_.reportplayerbirth_ = reportplayerbirth;
  if (reportplayerbirth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ReportPlayerBirth)
}
inline ::msg::CSRspReportPlayerBirth* CSRspBody::release_reportplayerbirth() {
  
  ::msg::CSRspReportPlayerBirth* temp = _impl_.reportplayerbirth_;
  _impl_.reportplayerbirth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspReportPlayerBirth* CSRspBody::unsafe_arena_release_reportplayerbirth() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ReportPlayerBirth)
  
  ::msg::CSRspReportPlayerBirth* temp = _impl_.reportplayerbirth_;
  _impl_.reportplayerbirth_ = nullptr;
  return temp;
}
inline ::msg::CSRspReportPlayerBirth* CSRspBody::_internal_mutable_reportplayerbirth() {
  
  if (_impl_.reportplayerbirth_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspReportPlayerBirth>(GetArenaForAllocation());
    _impl_.reportplayerbirth_ = p;
  }
  return _impl_.reportplayerbirth_;
}
inline ::msg::CSRspReportPlayerBirth* CSRspBody::mutable_reportplayerbirth() {
  ::msg::CSRspReportPlayerBirth* _msg = _internal_mutable_reportplayerbirth();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ReportPlayerBirth)
  return _msg;
}
inline void CSRspBody::set_allocated_reportplayerbirth(::msg::CSRspReportPlayerBirth* reportplayerbirth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportplayerbirth_);
  }
  if (reportplayerbirth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reportplayerbirth));
    if (message_arena != submessage_arena) {
      reportplayerbirth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reportplayerbirth, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reportplayerbirth_ = reportplayerbirth;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ReportPlayerBirth)
}

// .msg.CSRspReportInfoInput ReportInfoInput = 94;
inline bool CSRspBody::_internal_has_reportinfoinput() const {
  return this != internal_default_instance() && _impl_.reportinfoinput_ != nullptr;
}
inline bool CSRspBody::has_reportinfoinput() const {
  return _internal_has_reportinfoinput();
}
inline const ::msg::CSRspReportInfoInput& CSRspBody::_internal_reportinfoinput() const {
  const ::msg::CSRspReportInfoInput* p = _impl_.reportinfoinput_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspReportInfoInput&>(
      ::msg::_CSRspReportInfoInput_default_instance_);
}
inline const ::msg::CSRspReportInfoInput& CSRspBody::reportinfoinput() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ReportInfoInput)
  return _internal_reportinfoinput();
}
inline void CSRspBody::unsafe_arena_set_allocated_reportinfoinput(
    ::msg::CSRspReportInfoInput* reportinfoinput) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportinfoinput_);
  }
  _impl_.reportinfoinput_ = reportinfoinput;
  if (reportinfoinput) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ReportInfoInput)
}
inline ::msg::CSRspReportInfoInput* CSRspBody::release_reportinfoinput() {
  
  ::msg::CSRspReportInfoInput* temp = _impl_.reportinfoinput_;
  _impl_.reportinfoinput_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspReportInfoInput* CSRspBody::unsafe_arena_release_reportinfoinput() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ReportInfoInput)
  
  ::msg::CSRspReportInfoInput* temp = _impl_.reportinfoinput_;
  _impl_.reportinfoinput_ = nullptr;
  return temp;
}
inline ::msg::CSRspReportInfoInput* CSRspBody::_internal_mutable_reportinfoinput() {
  
  if (_impl_.reportinfoinput_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspReportInfoInput>(GetArenaForAllocation());
    _impl_.reportinfoinput_ = p;
  }
  return _impl_.reportinfoinput_;
}
inline ::msg::CSRspReportInfoInput* CSRspBody::mutable_reportinfoinput() {
  ::msg::CSRspReportInfoInput* _msg = _internal_mutable_reportinfoinput();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ReportInfoInput)
  return _msg;
}
inline void CSRspBody::set_allocated_reportinfoinput(::msg::CSRspReportInfoInput* reportinfoinput) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportinfoinput_);
  }
  if (reportinfoinput) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reportinfoinput));
    if (message_arena != submessage_arena) {
      reportinfoinput = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reportinfoinput, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reportinfoinput_ = reportinfoinput;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ReportInfoInput)
}

// .msg.CSRspSendVerificationCode SendVerificationCode = 95;
inline bool CSRspBody::_internal_has_sendverificationcode() const {
  return this != internal_default_instance() && _impl_.sendverificationcode_ != nullptr;
}
inline bool CSRspBody::has_sendverificationcode() const {
  return _internal_has_sendverificationcode();
}
inline const ::msg::CSRspSendVerificationCode& CSRspBody::_internal_sendverificationcode() const {
  const ::msg::CSRspSendVerificationCode* p = _impl_.sendverificationcode_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSendVerificationCode&>(
      ::msg::_CSRspSendVerificationCode_default_instance_);
}
inline const ::msg::CSRspSendVerificationCode& CSRspBody::sendverificationcode() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SendVerificationCode)
  return _internal_sendverificationcode();
}
inline void CSRspBody::unsafe_arena_set_allocated_sendverificationcode(
    ::msg::CSRspSendVerificationCode* sendverificationcode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sendverificationcode_);
  }
  _impl_.sendverificationcode_ = sendverificationcode;
  if (sendverificationcode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SendVerificationCode)
}
inline ::msg::CSRspSendVerificationCode* CSRspBody::release_sendverificationcode() {
  
  ::msg::CSRspSendVerificationCode* temp = _impl_.sendverificationcode_;
  _impl_.sendverificationcode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSendVerificationCode* CSRspBody::unsafe_arena_release_sendverificationcode() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SendVerificationCode)
  
  ::msg::CSRspSendVerificationCode* temp = _impl_.sendverificationcode_;
  _impl_.sendverificationcode_ = nullptr;
  return temp;
}
inline ::msg::CSRspSendVerificationCode* CSRspBody::_internal_mutable_sendverificationcode() {
  
  if (_impl_.sendverificationcode_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSendVerificationCode>(GetArenaForAllocation());
    _impl_.sendverificationcode_ = p;
  }
  return _impl_.sendverificationcode_;
}
inline ::msg::CSRspSendVerificationCode* CSRspBody::mutable_sendverificationcode() {
  ::msg::CSRspSendVerificationCode* _msg = _internal_mutable_sendverificationcode();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SendVerificationCode)
  return _msg;
}
inline void CSRspBody::set_allocated_sendverificationcode(::msg::CSRspSendVerificationCode* sendverificationcode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sendverificationcode_);
  }
  if (sendverificationcode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sendverificationcode));
    if (message_arena != submessage_arena) {
      sendverificationcode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sendverificationcode, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sendverificationcode_ = sendverificationcode;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SendVerificationCode)
}

// .msg.CSRspBindPhoneNumber BindPhoneNumber = 96;
inline bool CSRspBody::_internal_has_bindphonenumber() const {
  return this != internal_default_instance() && _impl_.bindphonenumber_ != nullptr;
}
inline bool CSRspBody::has_bindphonenumber() const {
  return _internal_has_bindphonenumber();
}
inline const ::msg::CSRspBindPhoneNumber& CSRspBody::_internal_bindphonenumber() const {
  const ::msg::CSRspBindPhoneNumber* p = _impl_.bindphonenumber_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspBindPhoneNumber&>(
      ::msg::_CSRspBindPhoneNumber_default_instance_);
}
inline const ::msg::CSRspBindPhoneNumber& CSRspBody::bindphonenumber() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.BindPhoneNumber)
  return _internal_bindphonenumber();
}
inline void CSRspBody::unsafe_arena_set_allocated_bindphonenumber(
    ::msg::CSRspBindPhoneNumber* bindphonenumber) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindphonenumber_);
  }
  _impl_.bindphonenumber_ = bindphonenumber;
  if (bindphonenumber) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.BindPhoneNumber)
}
inline ::msg::CSRspBindPhoneNumber* CSRspBody::release_bindphonenumber() {
  
  ::msg::CSRspBindPhoneNumber* temp = _impl_.bindphonenumber_;
  _impl_.bindphonenumber_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspBindPhoneNumber* CSRspBody::unsafe_arena_release_bindphonenumber() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.BindPhoneNumber)
  
  ::msg::CSRspBindPhoneNumber* temp = _impl_.bindphonenumber_;
  _impl_.bindphonenumber_ = nullptr;
  return temp;
}
inline ::msg::CSRspBindPhoneNumber* CSRspBody::_internal_mutable_bindphonenumber() {
  
  if (_impl_.bindphonenumber_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspBindPhoneNumber>(GetArenaForAllocation());
    _impl_.bindphonenumber_ = p;
  }
  return _impl_.bindphonenumber_;
}
inline ::msg::CSRspBindPhoneNumber* CSRspBody::mutable_bindphonenumber() {
  ::msg::CSRspBindPhoneNumber* _msg = _internal_mutable_bindphonenumber();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.BindPhoneNumber)
  return _msg;
}
inline void CSRspBody::set_allocated_bindphonenumber(::msg::CSRspBindPhoneNumber* bindphonenumber) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindphonenumber_);
  }
  if (bindphonenumber) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bindphonenumber));
    if (message_arena != submessage_arena) {
      bindphonenumber = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bindphonenumber, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bindphonenumber_ = bindphonenumber;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.BindPhoneNumber)
}

// .msg.CSRspWorldInvite WorldInvite = 97;
inline bool CSRspBody::_internal_has_worldinvite() const {
  return this != internal_default_instance() && _impl_.worldinvite_ != nullptr;
}
inline bool CSRspBody::has_worldinvite() const {
  return _internal_has_worldinvite();
}
inline const ::msg::CSRspWorldInvite& CSRspBody::_internal_worldinvite() const {
  const ::msg::CSRspWorldInvite* p = _impl_.worldinvite_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspWorldInvite&>(
      ::msg::_CSRspWorldInvite_default_instance_);
}
inline const ::msg::CSRspWorldInvite& CSRspBody::worldinvite() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.WorldInvite)
  return _internal_worldinvite();
}
inline void CSRspBody::unsafe_arena_set_allocated_worldinvite(
    ::msg::CSRspWorldInvite* worldinvite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.worldinvite_);
  }
  _impl_.worldinvite_ = worldinvite;
  if (worldinvite) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.WorldInvite)
}
inline ::msg::CSRspWorldInvite* CSRspBody::release_worldinvite() {
  
  ::msg::CSRspWorldInvite* temp = _impl_.worldinvite_;
  _impl_.worldinvite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspWorldInvite* CSRspBody::unsafe_arena_release_worldinvite() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.WorldInvite)
  
  ::msg::CSRspWorldInvite* temp = _impl_.worldinvite_;
  _impl_.worldinvite_ = nullptr;
  return temp;
}
inline ::msg::CSRspWorldInvite* CSRspBody::_internal_mutable_worldinvite() {
  
  if (_impl_.worldinvite_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspWorldInvite>(GetArenaForAllocation());
    _impl_.worldinvite_ = p;
  }
  return _impl_.worldinvite_;
}
inline ::msg::CSRspWorldInvite* CSRspBody::mutable_worldinvite() {
  ::msg::CSRspWorldInvite* _msg = _internal_mutable_worldinvite();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.WorldInvite)
  return _msg;
}
inline void CSRspBody::set_allocated_worldinvite(::msg::CSRspWorldInvite* worldinvite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.worldinvite_);
  }
  if (worldinvite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(worldinvite));
    if (message_arena != submessage_arena) {
      worldinvite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, worldinvite, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.worldinvite_ = worldinvite;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.WorldInvite)
}

// .msg.CSRspRemoveExpireItem RemoveExpireItem = 98;
inline bool CSRspBody::_internal_has_removeexpireitem() const {
  return this != internal_default_instance() && _impl_.removeexpireitem_ != nullptr;
}
inline bool CSRspBody::has_removeexpireitem() const {
  return _internal_has_removeexpireitem();
}
inline const ::msg::CSRspRemoveExpireItem& CSRspBody::_internal_removeexpireitem() const {
  const ::msg::CSRspRemoveExpireItem* p = _impl_.removeexpireitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRemoveExpireItem&>(
      ::msg::_CSRspRemoveExpireItem_default_instance_);
}
inline const ::msg::CSRspRemoveExpireItem& CSRspBody::removeexpireitem() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RemoveExpireItem)
  return _internal_removeexpireitem();
}
inline void CSRspBody::unsafe_arena_set_allocated_removeexpireitem(
    ::msg::CSRspRemoveExpireItem* removeexpireitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removeexpireitem_);
  }
  _impl_.removeexpireitem_ = removeexpireitem;
  if (removeexpireitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RemoveExpireItem)
}
inline ::msg::CSRspRemoveExpireItem* CSRspBody::release_removeexpireitem() {
  
  ::msg::CSRspRemoveExpireItem* temp = _impl_.removeexpireitem_;
  _impl_.removeexpireitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRemoveExpireItem* CSRspBody::unsafe_arena_release_removeexpireitem() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RemoveExpireItem)
  
  ::msg::CSRspRemoveExpireItem* temp = _impl_.removeexpireitem_;
  _impl_.removeexpireitem_ = nullptr;
  return temp;
}
inline ::msg::CSRspRemoveExpireItem* CSRspBody::_internal_mutable_removeexpireitem() {
  
  if (_impl_.removeexpireitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRemoveExpireItem>(GetArenaForAllocation());
    _impl_.removeexpireitem_ = p;
  }
  return _impl_.removeexpireitem_;
}
inline ::msg::CSRspRemoveExpireItem* CSRspBody::mutable_removeexpireitem() {
  ::msg::CSRspRemoveExpireItem* _msg = _internal_mutable_removeexpireitem();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RemoveExpireItem)
  return _msg;
}
inline void CSRspBody::set_allocated_removeexpireitem(::msg::CSRspRemoveExpireItem* removeexpireitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removeexpireitem_);
  }
  if (removeexpireitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removeexpireitem));
    if (message_arena != submessage_arena) {
      removeexpireitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removeexpireitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.removeexpireitem_ = removeexpireitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RemoveExpireItem)
}

// .msg.CSRspGetMallGoods GetMallGoods = 99;
inline bool CSRspBody::_internal_has_getmallgoods() const {
  return this != internal_default_instance() && _impl_.getmallgoods_ != nullptr;
}
inline bool CSRspBody::has_getmallgoods() const {
  return _internal_has_getmallgoods();
}
inline const ::msg::CSRspGetMallGoods& CSRspBody::_internal_getmallgoods() const {
  const ::msg::CSRspGetMallGoods* p = _impl_.getmallgoods_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetMallGoods&>(
      ::msg::_CSRspGetMallGoods_default_instance_);
}
inline const ::msg::CSRspGetMallGoods& CSRspBody::getmallgoods() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetMallGoods)
  return _internal_getmallgoods();
}
inline void CSRspBody::unsafe_arena_set_allocated_getmallgoods(
    ::msg::CSRspGetMallGoods* getmallgoods) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmallgoods_);
  }
  _impl_.getmallgoods_ = getmallgoods;
  if (getmallgoods) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetMallGoods)
}
inline ::msg::CSRspGetMallGoods* CSRspBody::release_getmallgoods() {
  
  ::msg::CSRspGetMallGoods* temp = _impl_.getmallgoods_;
  _impl_.getmallgoods_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetMallGoods* CSRspBody::unsafe_arena_release_getmallgoods() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetMallGoods)
  
  ::msg::CSRspGetMallGoods* temp = _impl_.getmallgoods_;
  _impl_.getmallgoods_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetMallGoods* CSRspBody::_internal_mutable_getmallgoods() {
  
  if (_impl_.getmallgoods_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetMallGoods>(GetArenaForAllocation());
    _impl_.getmallgoods_ = p;
  }
  return _impl_.getmallgoods_;
}
inline ::msg::CSRspGetMallGoods* CSRspBody::mutable_getmallgoods() {
  ::msg::CSRspGetMallGoods* _msg = _internal_mutable_getmallgoods();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetMallGoods)
  return _msg;
}
inline void CSRspBody::set_allocated_getmallgoods(::msg::CSRspGetMallGoods* getmallgoods) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmallgoods_);
  }
  if (getmallgoods) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getmallgoods));
    if (message_arena != submessage_arena) {
      getmallgoods = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getmallgoods, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getmallgoods_ = getmallgoods;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetMallGoods)
}

// .msg.CSRspBuyMallGoods BuyMallGoods = 100;
inline bool CSRspBody::_internal_has_buymallgoods() const {
  return this != internal_default_instance() && _impl_.buymallgoods_ != nullptr;
}
inline bool CSRspBody::has_buymallgoods() const {
  return _internal_has_buymallgoods();
}
inline const ::msg::CSRspBuyMallGoods& CSRspBody::_internal_buymallgoods() const {
  const ::msg::CSRspBuyMallGoods* p = _impl_.buymallgoods_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspBuyMallGoods&>(
      ::msg::_CSRspBuyMallGoods_default_instance_);
}
inline const ::msg::CSRspBuyMallGoods& CSRspBody::buymallgoods() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.BuyMallGoods)
  return _internal_buymallgoods();
}
inline void CSRspBody::unsafe_arena_set_allocated_buymallgoods(
    ::msg::CSRspBuyMallGoods* buymallgoods) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buymallgoods_);
  }
  _impl_.buymallgoods_ = buymallgoods;
  if (buymallgoods) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.BuyMallGoods)
}
inline ::msg::CSRspBuyMallGoods* CSRspBody::release_buymallgoods() {
  
  ::msg::CSRspBuyMallGoods* temp = _impl_.buymallgoods_;
  _impl_.buymallgoods_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspBuyMallGoods* CSRspBody::unsafe_arena_release_buymallgoods() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.BuyMallGoods)
  
  ::msg::CSRspBuyMallGoods* temp = _impl_.buymallgoods_;
  _impl_.buymallgoods_ = nullptr;
  return temp;
}
inline ::msg::CSRspBuyMallGoods* CSRspBody::_internal_mutable_buymallgoods() {
  
  if (_impl_.buymallgoods_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspBuyMallGoods>(GetArenaForAllocation());
    _impl_.buymallgoods_ = p;
  }
  return _impl_.buymallgoods_;
}
inline ::msg::CSRspBuyMallGoods* CSRspBody::mutable_buymallgoods() {
  ::msg::CSRspBuyMallGoods* _msg = _internal_mutable_buymallgoods();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.BuyMallGoods)
  return _msg;
}
inline void CSRspBody::set_allocated_buymallgoods(::msg::CSRspBuyMallGoods* buymallgoods) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buymallgoods_);
  }
  if (buymallgoods) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buymallgoods));
    if (message_arena != submessage_arena) {
      buymallgoods = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buymallgoods, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buymallgoods_ = buymallgoods;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.BuyMallGoods)
}

// .msg.CSRspBindSharingCode BindSharingCode = 101;
inline bool CSRspBody::_internal_has_bindsharingcode() const {
  return this != internal_default_instance() && _impl_.bindsharingcode_ != nullptr;
}
inline bool CSRspBody::has_bindsharingcode() const {
  return _internal_has_bindsharingcode();
}
inline const ::msg::CSRspBindSharingCode& CSRspBody::_internal_bindsharingcode() const {
  const ::msg::CSRspBindSharingCode* p = _impl_.bindsharingcode_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspBindSharingCode&>(
      ::msg::_CSRspBindSharingCode_default_instance_);
}
inline const ::msg::CSRspBindSharingCode& CSRspBody::bindsharingcode() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.BindSharingCode)
  return _internal_bindsharingcode();
}
inline void CSRspBody::unsafe_arena_set_allocated_bindsharingcode(
    ::msg::CSRspBindSharingCode* bindsharingcode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindsharingcode_);
  }
  _impl_.bindsharingcode_ = bindsharingcode;
  if (bindsharingcode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.BindSharingCode)
}
inline ::msg::CSRspBindSharingCode* CSRspBody::release_bindsharingcode() {
  
  ::msg::CSRspBindSharingCode* temp = _impl_.bindsharingcode_;
  _impl_.bindsharingcode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspBindSharingCode* CSRspBody::unsafe_arena_release_bindsharingcode() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.BindSharingCode)
  
  ::msg::CSRspBindSharingCode* temp = _impl_.bindsharingcode_;
  _impl_.bindsharingcode_ = nullptr;
  return temp;
}
inline ::msg::CSRspBindSharingCode* CSRspBody::_internal_mutable_bindsharingcode() {
  
  if (_impl_.bindsharingcode_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspBindSharingCode>(GetArenaForAllocation());
    _impl_.bindsharingcode_ = p;
  }
  return _impl_.bindsharingcode_;
}
inline ::msg::CSRspBindSharingCode* CSRspBody::mutable_bindsharingcode() {
  ::msg::CSRspBindSharingCode* _msg = _internal_mutable_bindsharingcode();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.BindSharingCode)
  return _msg;
}
inline void CSRspBody::set_allocated_bindsharingcode(::msg::CSRspBindSharingCode* bindsharingcode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindsharingcode_);
  }
  if (bindsharingcode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bindsharingcode));
    if (message_arena != submessage_arena) {
      bindsharingcode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bindsharingcode, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bindsharingcode_ = bindsharingcode;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.BindSharingCode)
}

// .msg.CSRspWXBlessBag WXBlessBag = 102;
inline bool CSRspBody::_internal_has_wxblessbag() const {
  return this != internal_default_instance() && _impl_.wxblessbag_ != nullptr;
}
inline bool CSRspBody::has_wxblessbag() const {
  return _internal_has_wxblessbag();
}
inline const ::msg::CSRspWXBlessBag& CSRspBody::_internal_wxblessbag() const {
  const ::msg::CSRspWXBlessBag* p = _impl_.wxblessbag_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspWXBlessBag&>(
      ::msg::_CSRspWXBlessBag_default_instance_);
}
inline const ::msg::CSRspWXBlessBag& CSRspBody::wxblessbag() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.WXBlessBag)
  return _internal_wxblessbag();
}
inline void CSRspBody::unsafe_arena_set_allocated_wxblessbag(
    ::msg::CSRspWXBlessBag* wxblessbag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxblessbag_);
  }
  _impl_.wxblessbag_ = wxblessbag;
  if (wxblessbag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.WXBlessBag)
}
inline ::msg::CSRspWXBlessBag* CSRspBody::release_wxblessbag() {
  
  ::msg::CSRspWXBlessBag* temp = _impl_.wxblessbag_;
  _impl_.wxblessbag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspWXBlessBag* CSRspBody::unsafe_arena_release_wxblessbag() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.WXBlessBag)
  
  ::msg::CSRspWXBlessBag* temp = _impl_.wxblessbag_;
  _impl_.wxblessbag_ = nullptr;
  return temp;
}
inline ::msg::CSRspWXBlessBag* CSRspBody::_internal_mutable_wxblessbag() {
  
  if (_impl_.wxblessbag_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspWXBlessBag>(GetArenaForAllocation());
    _impl_.wxblessbag_ = p;
  }
  return _impl_.wxblessbag_;
}
inline ::msg::CSRspWXBlessBag* CSRspBody::mutable_wxblessbag() {
  ::msg::CSRspWXBlessBag* _msg = _internal_mutable_wxblessbag();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.WXBlessBag)
  return _msg;
}
inline void CSRspBody::set_allocated_wxblessbag(::msg::CSRspWXBlessBag* wxblessbag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxblessbag_);
  }
  if (wxblessbag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wxblessbag));
    if (message_arena != submessage_arena) {
      wxblessbag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wxblessbag, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wxblessbag_ = wxblessbag;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.WXBlessBag)
}

// .msg.CSRspUpdateFriendsInGame UpdateFriendsInGame = 103;
inline bool CSRspBody::_internal_has_updatefriendsingame() const {
  return this != internal_default_instance() && _impl_.updatefriendsingame_ != nullptr;
}
inline bool CSRspBody::has_updatefriendsingame() const {
  return _internal_has_updatefriendsingame();
}
inline const ::msg::CSRspUpdateFriendsInGame& CSRspBody::_internal_updatefriendsingame() const {
  const ::msg::CSRspUpdateFriendsInGame* p = _impl_.updatefriendsingame_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUpdateFriendsInGame&>(
      ::msg::_CSRspUpdateFriendsInGame_default_instance_);
}
inline const ::msg::CSRspUpdateFriendsInGame& CSRspBody::updatefriendsingame() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UpdateFriendsInGame)
  return _internal_updatefriendsingame();
}
inline void CSRspBody::unsafe_arena_set_allocated_updatefriendsingame(
    ::msg::CSRspUpdateFriendsInGame* updatefriendsingame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatefriendsingame_);
  }
  _impl_.updatefriendsingame_ = updatefriendsingame;
  if (updatefriendsingame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UpdateFriendsInGame)
}
inline ::msg::CSRspUpdateFriendsInGame* CSRspBody::release_updatefriendsingame() {
  
  ::msg::CSRspUpdateFriendsInGame* temp = _impl_.updatefriendsingame_;
  _impl_.updatefriendsingame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUpdateFriendsInGame* CSRspBody::unsafe_arena_release_updatefriendsingame() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UpdateFriendsInGame)
  
  ::msg::CSRspUpdateFriendsInGame* temp = _impl_.updatefriendsingame_;
  _impl_.updatefriendsingame_ = nullptr;
  return temp;
}
inline ::msg::CSRspUpdateFriendsInGame* CSRspBody::_internal_mutable_updatefriendsingame() {
  
  if (_impl_.updatefriendsingame_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUpdateFriendsInGame>(GetArenaForAllocation());
    _impl_.updatefriendsingame_ = p;
  }
  return _impl_.updatefriendsingame_;
}
inline ::msg::CSRspUpdateFriendsInGame* CSRspBody::mutable_updatefriendsingame() {
  ::msg::CSRspUpdateFriendsInGame* _msg = _internal_mutable_updatefriendsingame();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UpdateFriendsInGame)
  return _msg;
}
inline void CSRspBody::set_allocated_updatefriendsingame(::msg::CSRspUpdateFriendsInGame* updatefriendsingame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatefriendsingame_);
  }
  if (updatefriendsingame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatefriendsingame));
    if (message_arena != submessage_arena) {
      updatefriendsingame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatefriendsingame, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updatefriendsingame_ = updatefriendsingame;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UpdateFriendsInGame)
}

// .msg.CSRspShareReward ShareReward = 104;
inline bool CSRspBody::_internal_has_sharereward() const {
  return this != internal_default_instance() && _impl_.sharereward_ != nullptr;
}
inline bool CSRspBody::has_sharereward() const {
  return _internal_has_sharereward();
}
inline const ::msg::CSRspShareReward& CSRspBody::_internal_sharereward() const {
  const ::msg::CSRspShareReward* p = _impl_.sharereward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspShareReward&>(
      ::msg::_CSRspShareReward_default_instance_);
}
inline const ::msg::CSRspShareReward& CSRspBody::sharereward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ShareReward)
  return _internal_sharereward();
}
inline void CSRspBody::unsafe_arena_set_allocated_sharereward(
    ::msg::CSRspShareReward* sharereward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sharereward_);
  }
  _impl_.sharereward_ = sharereward;
  if (sharereward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ShareReward)
}
inline ::msg::CSRspShareReward* CSRspBody::release_sharereward() {
  
  ::msg::CSRspShareReward* temp = _impl_.sharereward_;
  _impl_.sharereward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspShareReward* CSRspBody::unsafe_arena_release_sharereward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ShareReward)
  
  ::msg::CSRspShareReward* temp = _impl_.sharereward_;
  _impl_.sharereward_ = nullptr;
  return temp;
}
inline ::msg::CSRspShareReward* CSRspBody::_internal_mutable_sharereward() {
  
  if (_impl_.sharereward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspShareReward>(GetArenaForAllocation());
    _impl_.sharereward_ = p;
  }
  return _impl_.sharereward_;
}
inline ::msg::CSRspShareReward* CSRspBody::mutable_sharereward() {
  ::msg::CSRspShareReward* _msg = _internal_mutable_sharereward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ShareReward)
  return _msg;
}
inline void CSRspBody::set_allocated_sharereward(::msg::CSRspShareReward* sharereward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sharereward_);
  }
  if (sharereward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sharereward));
    if (message_arena != submessage_arena) {
      sharereward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sharereward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sharereward_ = sharereward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ShareReward)
}

// .msg.CSRspAllFightInfo AllFightInfo = 105;
inline bool CSRspBody::_internal_has_allfightinfo() const {
  return this != internal_default_instance() && _impl_.allfightinfo_ != nullptr;
}
inline bool CSRspBody::has_allfightinfo() const {
  return _internal_has_allfightinfo();
}
inline const ::msg::CSRspAllFightInfo& CSRspBody::_internal_allfightinfo() const {
  const ::msg::CSRspAllFightInfo* p = _impl_.allfightinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspAllFightInfo&>(
      ::msg::_CSRspAllFightInfo_default_instance_);
}
inline const ::msg::CSRspAllFightInfo& CSRspBody::allfightinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.AllFightInfo)
  return _internal_allfightinfo();
}
inline void CSRspBody::unsafe_arena_set_allocated_allfightinfo(
    ::msg::CSRspAllFightInfo* allfightinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.allfightinfo_);
  }
  _impl_.allfightinfo_ = allfightinfo;
  if (allfightinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.AllFightInfo)
}
inline ::msg::CSRspAllFightInfo* CSRspBody::release_allfightinfo() {
  
  ::msg::CSRspAllFightInfo* temp = _impl_.allfightinfo_;
  _impl_.allfightinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspAllFightInfo* CSRspBody::unsafe_arena_release_allfightinfo() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.AllFightInfo)
  
  ::msg::CSRspAllFightInfo* temp = _impl_.allfightinfo_;
  _impl_.allfightinfo_ = nullptr;
  return temp;
}
inline ::msg::CSRspAllFightInfo* CSRspBody::_internal_mutable_allfightinfo() {
  
  if (_impl_.allfightinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspAllFightInfo>(GetArenaForAllocation());
    _impl_.allfightinfo_ = p;
  }
  return _impl_.allfightinfo_;
}
inline ::msg::CSRspAllFightInfo* CSRspBody::mutable_allfightinfo() {
  ::msg::CSRspAllFightInfo* _msg = _internal_mutable_allfightinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.AllFightInfo)
  return _msg;
}
inline void CSRspBody::set_allocated_allfightinfo(::msg::CSRspAllFightInfo* allfightinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.allfightinfo_);
  }
  if (allfightinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(allfightinfo));
    if (message_arena != submessage_arena) {
      allfightinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allfightinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.allfightinfo_ = allfightinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.AllFightInfo)
}

// .msg.CSRspGetOldPlayer GetOldPlayer = 106;
inline bool CSRspBody::_internal_has_getoldplayer() const {
  return this != internal_default_instance() && _impl_.getoldplayer_ != nullptr;
}
inline bool CSRspBody::has_getoldplayer() const {
  return _internal_has_getoldplayer();
}
inline const ::msg::CSRspGetOldPlayer& CSRspBody::_internal_getoldplayer() const {
  const ::msg::CSRspGetOldPlayer* p = _impl_.getoldplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetOldPlayer&>(
      ::msg::_CSRspGetOldPlayer_default_instance_);
}
inline const ::msg::CSRspGetOldPlayer& CSRspBody::getoldplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetOldPlayer)
  return _internal_getoldplayer();
}
inline void CSRspBody::unsafe_arena_set_allocated_getoldplayer(
    ::msg::CSRspGetOldPlayer* getoldplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getoldplayer_);
  }
  _impl_.getoldplayer_ = getoldplayer;
  if (getoldplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetOldPlayer)
}
inline ::msg::CSRspGetOldPlayer* CSRspBody::release_getoldplayer() {
  
  ::msg::CSRspGetOldPlayer* temp = _impl_.getoldplayer_;
  _impl_.getoldplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetOldPlayer* CSRspBody::unsafe_arena_release_getoldplayer() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetOldPlayer)
  
  ::msg::CSRspGetOldPlayer* temp = _impl_.getoldplayer_;
  _impl_.getoldplayer_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetOldPlayer* CSRspBody::_internal_mutable_getoldplayer() {
  
  if (_impl_.getoldplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetOldPlayer>(GetArenaForAllocation());
    _impl_.getoldplayer_ = p;
  }
  return _impl_.getoldplayer_;
}
inline ::msg::CSRspGetOldPlayer* CSRspBody::mutable_getoldplayer() {
  ::msg::CSRspGetOldPlayer* _msg = _internal_mutable_getoldplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetOldPlayer)
  return _msg;
}
inline void CSRspBody::set_allocated_getoldplayer(::msg::CSRspGetOldPlayer* getoldplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getoldplayer_);
  }
  if (getoldplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getoldplayer));
    if (message_arena != submessage_arena) {
      getoldplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getoldplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getoldplayer_ = getoldplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetOldPlayer)
}

// .msg.CSRspBindOldPlayer BindOldPlayer = 107;
inline bool CSRspBody::_internal_has_bindoldplayer() const {
  return this != internal_default_instance() && _impl_.bindoldplayer_ != nullptr;
}
inline bool CSRspBody::has_bindoldplayer() const {
  return _internal_has_bindoldplayer();
}
inline const ::msg::CSRspBindOldPlayer& CSRspBody::_internal_bindoldplayer() const {
  const ::msg::CSRspBindOldPlayer* p = _impl_.bindoldplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspBindOldPlayer&>(
      ::msg::_CSRspBindOldPlayer_default_instance_);
}
inline const ::msg::CSRspBindOldPlayer& CSRspBody::bindoldplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.BindOldPlayer)
  return _internal_bindoldplayer();
}
inline void CSRspBody::unsafe_arena_set_allocated_bindoldplayer(
    ::msg::CSRspBindOldPlayer* bindoldplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindoldplayer_);
  }
  _impl_.bindoldplayer_ = bindoldplayer;
  if (bindoldplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.BindOldPlayer)
}
inline ::msg::CSRspBindOldPlayer* CSRspBody::release_bindoldplayer() {
  
  ::msg::CSRspBindOldPlayer* temp = _impl_.bindoldplayer_;
  _impl_.bindoldplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspBindOldPlayer* CSRspBody::unsafe_arena_release_bindoldplayer() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.BindOldPlayer)
  
  ::msg::CSRspBindOldPlayer* temp = _impl_.bindoldplayer_;
  _impl_.bindoldplayer_ = nullptr;
  return temp;
}
inline ::msg::CSRspBindOldPlayer* CSRspBody::_internal_mutable_bindoldplayer() {
  
  if (_impl_.bindoldplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspBindOldPlayer>(GetArenaForAllocation());
    _impl_.bindoldplayer_ = p;
  }
  return _impl_.bindoldplayer_;
}
inline ::msg::CSRspBindOldPlayer* CSRspBody::mutable_bindoldplayer() {
  ::msg::CSRspBindOldPlayer* _msg = _internal_mutable_bindoldplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.BindOldPlayer)
  return _msg;
}
inline void CSRspBody::set_allocated_bindoldplayer(::msg::CSRspBindOldPlayer* bindoldplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindoldplayer_);
  }
  if (bindoldplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bindoldplayer));
    if (message_arena != submessage_arena) {
      bindoldplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bindoldplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bindoldplayer_ = bindoldplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.BindOldPlayer)
}

// .msg.CSRspSendVerificationCodeWithCheckRedis SendVerificationCodeWithCheckRedis = 108;
inline bool CSRspBody::_internal_has_sendverificationcodewithcheckredis() const {
  return this != internal_default_instance() && _impl_.sendverificationcodewithcheckredis_ != nullptr;
}
inline bool CSRspBody::has_sendverificationcodewithcheckredis() const {
  return _internal_has_sendverificationcodewithcheckredis();
}
inline const ::msg::CSRspSendVerificationCodeWithCheckRedis& CSRspBody::_internal_sendverificationcodewithcheckredis() const {
  const ::msg::CSRspSendVerificationCodeWithCheckRedis* p = _impl_.sendverificationcodewithcheckredis_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSendVerificationCodeWithCheckRedis&>(
      ::msg::_CSRspSendVerificationCodeWithCheckRedis_default_instance_);
}
inline const ::msg::CSRspSendVerificationCodeWithCheckRedis& CSRspBody::sendverificationcodewithcheckredis() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SendVerificationCodeWithCheckRedis)
  return _internal_sendverificationcodewithcheckredis();
}
inline void CSRspBody::unsafe_arena_set_allocated_sendverificationcodewithcheckredis(
    ::msg::CSRspSendVerificationCodeWithCheckRedis* sendverificationcodewithcheckredis) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sendverificationcodewithcheckredis_);
  }
  _impl_.sendverificationcodewithcheckredis_ = sendverificationcodewithcheckredis;
  if (sendverificationcodewithcheckredis) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SendVerificationCodeWithCheckRedis)
}
inline ::msg::CSRspSendVerificationCodeWithCheckRedis* CSRspBody::release_sendverificationcodewithcheckredis() {
  
  ::msg::CSRspSendVerificationCodeWithCheckRedis* temp = _impl_.sendverificationcodewithcheckredis_;
  _impl_.sendverificationcodewithcheckredis_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSendVerificationCodeWithCheckRedis* CSRspBody::unsafe_arena_release_sendverificationcodewithcheckredis() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SendVerificationCodeWithCheckRedis)
  
  ::msg::CSRspSendVerificationCodeWithCheckRedis* temp = _impl_.sendverificationcodewithcheckredis_;
  _impl_.sendverificationcodewithcheckredis_ = nullptr;
  return temp;
}
inline ::msg::CSRspSendVerificationCodeWithCheckRedis* CSRspBody::_internal_mutable_sendverificationcodewithcheckredis() {
  
  if (_impl_.sendverificationcodewithcheckredis_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSendVerificationCodeWithCheckRedis>(GetArenaForAllocation());
    _impl_.sendverificationcodewithcheckredis_ = p;
  }
  return _impl_.sendverificationcodewithcheckredis_;
}
inline ::msg::CSRspSendVerificationCodeWithCheckRedis* CSRspBody::mutable_sendverificationcodewithcheckredis() {
  ::msg::CSRspSendVerificationCodeWithCheckRedis* _msg = _internal_mutable_sendverificationcodewithcheckredis();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SendVerificationCodeWithCheckRedis)
  return _msg;
}
inline void CSRspBody::set_allocated_sendverificationcodewithcheckredis(::msg::CSRspSendVerificationCodeWithCheckRedis* sendverificationcodewithcheckredis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sendverificationcodewithcheckredis_);
  }
  if (sendverificationcodewithcheckredis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sendverificationcodewithcheckredis));
    if (message_arena != submessage_arena) {
      sendverificationcodewithcheckredis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sendverificationcodewithcheckredis, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sendverificationcodewithcheckredis_ = sendverificationcodewithcheckredis;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SendVerificationCodeWithCheckRedis)
}

// .msg.CSRspReportSetting ReportSetting = 109;
inline bool CSRspBody::_internal_has_reportsetting() const {
  return this != internal_default_instance() && _impl_.reportsetting_ != nullptr;
}
inline bool CSRspBody::has_reportsetting() const {
  return _internal_has_reportsetting();
}
inline const ::msg::CSRspReportSetting& CSRspBody::_internal_reportsetting() const {
  const ::msg::CSRspReportSetting* p = _impl_.reportsetting_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspReportSetting&>(
      ::msg::_CSRspReportSetting_default_instance_);
}
inline const ::msg::CSRspReportSetting& CSRspBody::reportsetting() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ReportSetting)
  return _internal_reportsetting();
}
inline void CSRspBody::unsafe_arena_set_allocated_reportsetting(
    ::msg::CSRspReportSetting* reportsetting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportsetting_);
  }
  _impl_.reportsetting_ = reportsetting;
  if (reportsetting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ReportSetting)
}
inline ::msg::CSRspReportSetting* CSRspBody::release_reportsetting() {
  
  ::msg::CSRspReportSetting* temp = _impl_.reportsetting_;
  _impl_.reportsetting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspReportSetting* CSRspBody::unsafe_arena_release_reportsetting() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ReportSetting)
  
  ::msg::CSRspReportSetting* temp = _impl_.reportsetting_;
  _impl_.reportsetting_ = nullptr;
  return temp;
}
inline ::msg::CSRspReportSetting* CSRspBody::_internal_mutable_reportsetting() {
  
  if (_impl_.reportsetting_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspReportSetting>(GetArenaForAllocation());
    _impl_.reportsetting_ = p;
  }
  return _impl_.reportsetting_;
}
inline ::msg::CSRspReportSetting* CSRspBody::mutable_reportsetting() {
  ::msg::CSRspReportSetting* _msg = _internal_mutable_reportsetting();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ReportSetting)
  return _msg;
}
inline void CSRspBody::set_allocated_reportsetting(::msg::CSRspReportSetting* reportsetting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportsetting_);
  }
  if (reportsetting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reportsetting));
    if (message_arena != submessage_arena) {
      reportsetting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reportsetting, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reportsetting_ = reportsetting;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ReportSetting)
}

// .msg.CSRspAntiData AntiData = 110;
inline bool CSRspBody::_internal_has_antidata() const {
  return this != internal_default_instance() && _impl_.antidata_ != nullptr;
}
inline bool CSRspBody::has_antidata() const {
  return _internal_has_antidata();
}
inline const ::msg::CSRspAntiData& CSRspBody::_internal_antidata() const {
  const ::msg::CSRspAntiData* p = _impl_.antidata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspAntiData&>(
      ::msg::_CSRspAntiData_default_instance_);
}
inline const ::msg::CSRspAntiData& CSRspBody::antidata() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.AntiData)
  return _internal_antidata();
}
inline void CSRspBody::unsafe_arena_set_allocated_antidata(
    ::msg::CSRspAntiData* antidata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.antidata_);
  }
  _impl_.antidata_ = antidata;
  if (antidata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.AntiData)
}
inline ::msg::CSRspAntiData* CSRspBody::release_antidata() {
  
  ::msg::CSRspAntiData* temp = _impl_.antidata_;
  _impl_.antidata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspAntiData* CSRspBody::unsafe_arena_release_antidata() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.AntiData)
  
  ::msg::CSRspAntiData* temp = _impl_.antidata_;
  _impl_.antidata_ = nullptr;
  return temp;
}
inline ::msg::CSRspAntiData* CSRspBody::_internal_mutable_antidata() {
  
  if (_impl_.antidata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspAntiData>(GetArenaForAllocation());
    _impl_.antidata_ = p;
  }
  return _impl_.antidata_;
}
inline ::msg::CSRspAntiData* CSRspBody::mutable_antidata() {
  ::msg::CSRspAntiData* _msg = _internal_mutable_antidata();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.AntiData)
  return _msg;
}
inline void CSRspBody::set_allocated_antidata(::msg::CSRspAntiData* antidata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.antidata_);
  }
  if (antidata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(antidata));
    if (message_arena != submessage_arena) {
      antidata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, antidata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.antidata_ = antidata;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.AntiData)
}

// .msg.CSRspTlogData TlogData = 111;
inline bool CSRspBody::_internal_has_tlogdata() const {
  return this != internal_default_instance() && _impl_.tlogdata_ != nullptr;
}
inline bool CSRspBody::has_tlogdata() const {
  return _internal_has_tlogdata();
}
inline const ::msg::CSRspTlogData& CSRspBody::_internal_tlogdata() const {
  const ::msg::CSRspTlogData* p = _impl_.tlogdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspTlogData&>(
      ::msg::_CSRspTlogData_default_instance_);
}
inline const ::msg::CSRspTlogData& CSRspBody::tlogdata() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.TlogData)
  return _internal_tlogdata();
}
inline void CSRspBody::unsafe_arena_set_allocated_tlogdata(
    ::msg::CSRspTlogData* tlogdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tlogdata_);
  }
  _impl_.tlogdata_ = tlogdata;
  if (tlogdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.TlogData)
}
inline ::msg::CSRspTlogData* CSRspBody::release_tlogdata() {
  
  ::msg::CSRspTlogData* temp = _impl_.tlogdata_;
  _impl_.tlogdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspTlogData* CSRspBody::unsafe_arena_release_tlogdata() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.TlogData)
  
  ::msg::CSRspTlogData* temp = _impl_.tlogdata_;
  _impl_.tlogdata_ = nullptr;
  return temp;
}
inline ::msg::CSRspTlogData* CSRspBody::_internal_mutable_tlogdata() {
  
  if (_impl_.tlogdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspTlogData>(GetArenaForAllocation());
    _impl_.tlogdata_ = p;
  }
  return _impl_.tlogdata_;
}
inline ::msg::CSRspTlogData* CSRspBody::mutable_tlogdata() {
  ::msg::CSRspTlogData* _msg = _internal_mutable_tlogdata();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.TlogData)
  return _msg;
}
inline void CSRspBody::set_allocated_tlogdata(::msg::CSRspTlogData* tlogdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tlogdata_);
  }
  if (tlogdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tlogdata));
    if (message_arena != submessage_arena) {
      tlogdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tlogdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tlogdata_ = tlogdata;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.TlogData)
}

// .msg.CSRspDaySign DaySign = 112;
inline bool CSRspBody::_internal_has_daysign() const {
  return this != internal_default_instance() && _impl_.daysign_ != nullptr;
}
inline bool CSRspBody::has_daysign() const {
  return _internal_has_daysign();
}
inline const ::msg::CSRspDaySign& CSRspBody::_internal_daysign() const {
  const ::msg::CSRspDaySign* p = _impl_.daysign_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspDaySign&>(
      ::msg::_CSRspDaySign_default_instance_);
}
inline const ::msg::CSRspDaySign& CSRspBody::daysign() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.DaySign)
  return _internal_daysign();
}
inline void CSRspBody::unsafe_arena_set_allocated_daysign(
    ::msg::CSRspDaySign* daysign) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.daysign_);
  }
  _impl_.daysign_ = daysign;
  if (daysign) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.DaySign)
}
inline ::msg::CSRspDaySign* CSRspBody::release_daysign() {
  
  ::msg::CSRspDaySign* temp = _impl_.daysign_;
  _impl_.daysign_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspDaySign* CSRspBody::unsafe_arena_release_daysign() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.DaySign)
  
  ::msg::CSRspDaySign* temp = _impl_.daysign_;
  _impl_.daysign_ = nullptr;
  return temp;
}
inline ::msg::CSRspDaySign* CSRspBody::_internal_mutable_daysign() {
  
  if (_impl_.daysign_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspDaySign>(GetArenaForAllocation());
    _impl_.daysign_ = p;
  }
  return _impl_.daysign_;
}
inline ::msg::CSRspDaySign* CSRspBody::mutable_daysign() {
  ::msg::CSRspDaySign* _msg = _internal_mutable_daysign();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.DaySign)
  return _msg;
}
inline void CSRspBody::set_allocated_daysign(::msg::CSRspDaySign* daysign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.daysign_);
  }
  if (daysign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(daysign));
    if (message_arena != submessage_arena) {
      daysign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, daysign, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.daysign_ = daysign;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.DaySign)
}

// .msg.CSRspDayFitAvoid DayFitAvoid = 113;
inline bool CSRspBody::_internal_has_dayfitavoid() const {
  return this != internal_default_instance() && _impl_.dayfitavoid_ != nullptr;
}
inline bool CSRspBody::has_dayfitavoid() const {
  return _internal_has_dayfitavoid();
}
inline const ::msg::CSRspDayFitAvoid& CSRspBody::_internal_dayfitavoid() const {
  const ::msg::CSRspDayFitAvoid* p = _impl_.dayfitavoid_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspDayFitAvoid&>(
      ::msg::_CSRspDayFitAvoid_default_instance_);
}
inline const ::msg::CSRspDayFitAvoid& CSRspBody::dayfitavoid() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.DayFitAvoid)
  return _internal_dayfitavoid();
}
inline void CSRspBody::unsafe_arena_set_allocated_dayfitavoid(
    ::msg::CSRspDayFitAvoid* dayfitavoid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dayfitavoid_);
  }
  _impl_.dayfitavoid_ = dayfitavoid;
  if (dayfitavoid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.DayFitAvoid)
}
inline ::msg::CSRspDayFitAvoid* CSRspBody::release_dayfitavoid() {
  
  ::msg::CSRspDayFitAvoid* temp = _impl_.dayfitavoid_;
  _impl_.dayfitavoid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspDayFitAvoid* CSRspBody::unsafe_arena_release_dayfitavoid() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.DayFitAvoid)
  
  ::msg::CSRspDayFitAvoid* temp = _impl_.dayfitavoid_;
  _impl_.dayfitavoid_ = nullptr;
  return temp;
}
inline ::msg::CSRspDayFitAvoid* CSRspBody::_internal_mutable_dayfitavoid() {
  
  if (_impl_.dayfitavoid_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspDayFitAvoid>(GetArenaForAllocation());
    _impl_.dayfitavoid_ = p;
  }
  return _impl_.dayfitavoid_;
}
inline ::msg::CSRspDayFitAvoid* CSRspBody::mutable_dayfitavoid() {
  ::msg::CSRspDayFitAvoid* _msg = _internal_mutable_dayfitavoid();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.DayFitAvoid)
  return _msg;
}
inline void CSRspBody::set_allocated_dayfitavoid(::msg::CSRspDayFitAvoid* dayfitavoid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dayfitavoid_);
  }
  if (dayfitavoid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dayfitavoid));
    if (message_arena != submessage_arena) {
      dayfitavoid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dayfitavoid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dayfitavoid_ = dayfitavoid;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.DayFitAvoid)
}

// .msg.CSRspShareCountAward ShareCountAward = 114;
inline bool CSRspBody::_internal_has_sharecountaward() const {
  return this != internal_default_instance() && _impl_.sharecountaward_ != nullptr;
}
inline bool CSRspBody::has_sharecountaward() const {
  return _internal_has_sharecountaward();
}
inline const ::msg::CSRspShareCountAward& CSRspBody::_internal_sharecountaward() const {
  const ::msg::CSRspShareCountAward* p = _impl_.sharecountaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspShareCountAward&>(
      ::msg::_CSRspShareCountAward_default_instance_);
}
inline const ::msg::CSRspShareCountAward& CSRspBody::sharecountaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ShareCountAward)
  return _internal_sharecountaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_sharecountaward(
    ::msg::CSRspShareCountAward* sharecountaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sharecountaward_);
  }
  _impl_.sharecountaward_ = sharecountaward;
  if (sharecountaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ShareCountAward)
}
inline ::msg::CSRspShareCountAward* CSRspBody::release_sharecountaward() {
  
  ::msg::CSRspShareCountAward* temp = _impl_.sharecountaward_;
  _impl_.sharecountaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspShareCountAward* CSRspBody::unsafe_arena_release_sharecountaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ShareCountAward)
  
  ::msg::CSRspShareCountAward* temp = _impl_.sharecountaward_;
  _impl_.sharecountaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspShareCountAward* CSRspBody::_internal_mutable_sharecountaward() {
  
  if (_impl_.sharecountaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspShareCountAward>(GetArenaForAllocation());
    _impl_.sharecountaward_ = p;
  }
  return _impl_.sharecountaward_;
}
inline ::msg::CSRspShareCountAward* CSRspBody::mutable_sharecountaward() {
  ::msg::CSRspShareCountAward* _msg = _internal_mutable_sharecountaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ShareCountAward)
  return _msg;
}
inline void CSRspBody::set_allocated_sharecountaward(::msg::CSRspShareCountAward* sharecountaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sharecountaward_);
  }
  if (sharecountaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sharecountaward));
    if (message_arena != submessage_arena) {
      sharecountaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sharecountaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sharecountaward_ = sharecountaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ShareCountAward)
}

// .msg.CSRspRealationStar RealationStar = 115;
inline bool CSRspBody::_internal_has_realationstar() const {
  return this != internal_default_instance() && _impl_.realationstar_ != nullptr;
}
inline bool CSRspBody::has_realationstar() const {
  return _internal_has_realationstar();
}
inline const ::msg::CSRspRealationStar& CSRspBody::_internal_realationstar() const {
  const ::msg::CSRspRealationStar* p = _impl_.realationstar_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRealationStar&>(
      ::msg::_CSRspRealationStar_default_instance_);
}
inline const ::msg::CSRspRealationStar& CSRspBody::realationstar() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RealationStar)
  return _internal_realationstar();
}
inline void CSRspBody::unsafe_arena_set_allocated_realationstar(
    ::msg::CSRspRealationStar* realationstar) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.realationstar_);
  }
  _impl_.realationstar_ = realationstar;
  if (realationstar) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RealationStar)
}
inline ::msg::CSRspRealationStar* CSRspBody::release_realationstar() {
  
  ::msg::CSRspRealationStar* temp = _impl_.realationstar_;
  _impl_.realationstar_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRealationStar* CSRspBody::unsafe_arena_release_realationstar() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RealationStar)
  
  ::msg::CSRspRealationStar* temp = _impl_.realationstar_;
  _impl_.realationstar_ = nullptr;
  return temp;
}
inline ::msg::CSRspRealationStar* CSRspBody::_internal_mutable_realationstar() {
  
  if (_impl_.realationstar_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRealationStar>(GetArenaForAllocation());
    _impl_.realationstar_ = p;
  }
  return _impl_.realationstar_;
}
inline ::msg::CSRspRealationStar* CSRspBody::mutable_realationstar() {
  ::msg::CSRspRealationStar* _msg = _internal_mutable_realationstar();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RealationStar)
  return _msg;
}
inline void CSRspBody::set_allocated_realationstar(::msg::CSRspRealationStar* realationstar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.realationstar_);
  }
  if (realationstar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(realationstar));
    if (message_arena != submessage_arena) {
      realationstar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, realationstar, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.realationstar_ = realationstar;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RealationStar)
}

// .msg.CSRspGetRealationStarInviteSucc GetRealationStarInviteSucc = 116;
inline bool CSRspBody::_internal_has_getrealationstarinvitesucc() const {
  return this != internal_default_instance() && _impl_.getrealationstarinvitesucc_ != nullptr;
}
inline bool CSRspBody::has_getrealationstarinvitesucc() const {
  return _internal_has_getrealationstarinvitesucc();
}
inline const ::msg::CSRspGetRealationStarInviteSucc& CSRspBody::_internal_getrealationstarinvitesucc() const {
  const ::msg::CSRspGetRealationStarInviteSucc* p = _impl_.getrealationstarinvitesucc_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetRealationStarInviteSucc&>(
      ::msg::_CSRspGetRealationStarInviteSucc_default_instance_);
}
inline const ::msg::CSRspGetRealationStarInviteSucc& CSRspBody::getrealationstarinvitesucc() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetRealationStarInviteSucc)
  return _internal_getrealationstarinvitesucc();
}
inline void CSRspBody::unsafe_arena_set_allocated_getrealationstarinvitesucc(
    ::msg::CSRspGetRealationStarInviteSucc* getrealationstarinvitesucc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getrealationstarinvitesucc_);
  }
  _impl_.getrealationstarinvitesucc_ = getrealationstarinvitesucc;
  if (getrealationstarinvitesucc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetRealationStarInviteSucc)
}
inline ::msg::CSRspGetRealationStarInviteSucc* CSRspBody::release_getrealationstarinvitesucc() {
  
  ::msg::CSRspGetRealationStarInviteSucc* temp = _impl_.getrealationstarinvitesucc_;
  _impl_.getrealationstarinvitesucc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetRealationStarInviteSucc* CSRspBody::unsafe_arena_release_getrealationstarinvitesucc() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetRealationStarInviteSucc)
  
  ::msg::CSRspGetRealationStarInviteSucc* temp = _impl_.getrealationstarinvitesucc_;
  _impl_.getrealationstarinvitesucc_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetRealationStarInviteSucc* CSRspBody::_internal_mutable_getrealationstarinvitesucc() {
  
  if (_impl_.getrealationstarinvitesucc_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetRealationStarInviteSucc>(GetArenaForAllocation());
    _impl_.getrealationstarinvitesucc_ = p;
  }
  return _impl_.getrealationstarinvitesucc_;
}
inline ::msg::CSRspGetRealationStarInviteSucc* CSRspBody::mutable_getrealationstarinvitesucc() {
  ::msg::CSRspGetRealationStarInviteSucc* _msg = _internal_mutable_getrealationstarinvitesucc();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetRealationStarInviteSucc)
  return _msg;
}
inline void CSRspBody::set_allocated_getrealationstarinvitesucc(::msg::CSRspGetRealationStarInviteSucc* getrealationstarinvitesucc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getrealationstarinvitesucc_);
  }
  if (getrealationstarinvitesucc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getrealationstarinvitesucc));
    if (message_arena != submessage_arena) {
      getrealationstarinvitesucc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getrealationstarinvitesucc, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getrealationstarinvitesucc_ = getrealationstarinvitesucc;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetRealationStarInviteSucc)
}

// .msg.CSRspGetRealationStar GetRealationStar = 117;
inline bool CSRspBody::_internal_has_getrealationstar() const {
  return this != internal_default_instance() && _impl_.getrealationstar_ != nullptr;
}
inline bool CSRspBody::has_getrealationstar() const {
  return _internal_has_getrealationstar();
}
inline const ::msg::CSRspGetRealationStar& CSRspBody::_internal_getrealationstar() const {
  const ::msg::CSRspGetRealationStar* p = _impl_.getrealationstar_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetRealationStar&>(
      ::msg::_CSRspGetRealationStar_default_instance_);
}
inline const ::msg::CSRspGetRealationStar& CSRspBody::getrealationstar() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetRealationStar)
  return _internal_getrealationstar();
}
inline void CSRspBody::unsafe_arena_set_allocated_getrealationstar(
    ::msg::CSRspGetRealationStar* getrealationstar) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getrealationstar_);
  }
  _impl_.getrealationstar_ = getrealationstar;
  if (getrealationstar) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetRealationStar)
}
inline ::msg::CSRspGetRealationStar* CSRspBody::release_getrealationstar() {
  
  ::msg::CSRspGetRealationStar* temp = _impl_.getrealationstar_;
  _impl_.getrealationstar_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetRealationStar* CSRspBody::unsafe_arena_release_getrealationstar() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetRealationStar)
  
  ::msg::CSRspGetRealationStar* temp = _impl_.getrealationstar_;
  _impl_.getrealationstar_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetRealationStar* CSRspBody::_internal_mutable_getrealationstar() {
  
  if (_impl_.getrealationstar_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetRealationStar>(GetArenaForAllocation());
    _impl_.getrealationstar_ = p;
  }
  return _impl_.getrealationstar_;
}
inline ::msg::CSRspGetRealationStar* CSRspBody::mutable_getrealationstar() {
  ::msg::CSRspGetRealationStar* _msg = _internal_mutable_getrealationstar();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetRealationStar)
  return _msg;
}
inline void CSRspBody::set_allocated_getrealationstar(::msg::CSRspGetRealationStar* getrealationstar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getrealationstar_);
  }
  if (getrealationstar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getrealationstar));
    if (message_arena != submessage_arena) {
      getrealationstar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getrealationstar, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getrealationstar_ = getrealationstar;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetRealationStar)
}

// .msg.CSRspGetActRecord RspActRecord = 118;
inline bool CSRspBody::_internal_has_rspactrecord() const {
  return this != internal_default_instance() && _impl_.rspactrecord_ != nullptr;
}
inline bool CSRspBody::has_rspactrecord() const {
  return _internal_has_rspactrecord();
}
inline const ::msg::CSRspGetActRecord& CSRspBody::_internal_rspactrecord() const {
  const ::msg::CSRspGetActRecord* p = _impl_.rspactrecord_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetActRecord&>(
      ::msg::_CSRspGetActRecord_default_instance_);
}
inline const ::msg::CSRspGetActRecord& CSRspBody::rspactrecord() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RspActRecord)
  return _internal_rspactrecord();
}
inline void CSRspBody::unsafe_arena_set_allocated_rspactrecord(
    ::msg::CSRspGetActRecord* rspactrecord) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rspactrecord_);
  }
  _impl_.rspactrecord_ = rspactrecord;
  if (rspactrecord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RspActRecord)
}
inline ::msg::CSRspGetActRecord* CSRspBody::release_rspactrecord() {
  
  ::msg::CSRspGetActRecord* temp = _impl_.rspactrecord_;
  _impl_.rspactrecord_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetActRecord* CSRspBody::unsafe_arena_release_rspactrecord() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RspActRecord)
  
  ::msg::CSRspGetActRecord* temp = _impl_.rspactrecord_;
  _impl_.rspactrecord_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetActRecord* CSRspBody::_internal_mutable_rspactrecord() {
  
  if (_impl_.rspactrecord_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetActRecord>(GetArenaForAllocation());
    _impl_.rspactrecord_ = p;
  }
  return _impl_.rspactrecord_;
}
inline ::msg::CSRspGetActRecord* CSRspBody::mutable_rspactrecord() {
  ::msg::CSRspGetActRecord* _msg = _internal_mutable_rspactrecord();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RspActRecord)
  return _msg;
}
inline void CSRspBody::set_allocated_rspactrecord(::msg::CSRspGetActRecord* rspactrecord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rspactrecord_);
  }
  if (rspactrecord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rspactrecord));
    if (message_arena != submessage_arena) {
      rspactrecord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rspactrecord, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rspactrecord_ = rspactrecord;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RspActRecord)
}

// .msg.CSRspJoinVoiceTeam JoinVoiceTeam = 119;
inline bool CSRspBody::_internal_has_joinvoiceteam() const {
  return this != internal_default_instance() && _impl_.joinvoiceteam_ != nullptr;
}
inline bool CSRspBody::has_joinvoiceteam() const {
  return _internal_has_joinvoiceteam();
}
inline const ::msg::CSRspJoinVoiceTeam& CSRspBody::_internal_joinvoiceteam() const {
  const ::msg::CSRspJoinVoiceTeam* p = _impl_.joinvoiceteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspJoinVoiceTeam&>(
      ::msg::_CSRspJoinVoiceTeam_default_instance_);
}
inline const ::msg::CSRspJoinVoiceTeam& CSRspBody::joinvoiceteam() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.JoinVoiceTeam)
  return _internal_joinvoiceteam();
}
inline void CSRspBody::unsafe_arena_set_allocated_joinvoiceteam(
    ::msg::CSRspJoinVoiceTeam* joinvoiceteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joinvoiceteam_);
  }
  _impl_.joinvoiceteam_ = joinvoiceteam;
  if (joinvoiceteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.JoinVoiceTeam)
}
inline ::msg::CSRspJoinVoiceTeam* CSRspBody::release_joinvoiceteam() {
  
  ::msg::CSRspJoinVoiceTeam* temp = _impl_.joinvoiceteam_;
  _impl_.joinvoiceteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspJoinVoiceTeam* CSRspBody::unsafe_arena_release_joinvoiceteam() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.JoinVoiceTeam)
  
  ::msg::CSRspJoinVoiceTeam* temp = _impl_.joinvoiceteam_;
  _impl_.joinvoiceteam_ = nullptr;
  return temp;
}
inline ::msg::CSRspJoinVoiceTeam* CSRspBody::_internal_mutable_joinvoiceteam() {
  
  if (_impl_.joinvoiceteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspJoinVoiceTeam>(GetArenaForAllocation());
    _impl_.joinvoiceteam_ = p;
  }
  return _impl_.joinvoiceteam_;
}
inline ::msg::CSRspJoinVoiceTeam* CSRspBody::mutable_joinvoiceteam() {
  ::msg::CSRspJoinVoiceTeam* _msg = _internal_mutable_joinvoiceteam();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.JoinVoiceTeam)
  return _msg;
}
inline void CSRspBody::set_allocated_joinvoiceteam(::msg::CSRspJoinVoiceTeam* joinvoiceteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joinvoiceteam_);
  }
  if (joinvoiceteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joinvoiceteam));
    if (message_arena != submessage_arena) {
      joinvoiceteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joinvoiceteam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.joinvoiceteam_ = joinvoiceteam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.JoinVoiceTeam)
}

// .msg.CSRspJoinVoicePvp JoinVoicePvp = 120;
inline bool CSRspBody::_internal_has_joinvoicepvp() const {
  return this != internal_default_instance() && _impl_.joinvoicepvp_ != nullptr;
}
inline bool CSRspBody::has_joinvoicepvp() const {
  return _internal_has_joinvoicepvp();
}
inline const ::msg::CSRspJoinVoicePvp& CSRspBody::_internal_joinvoicepvp() const {
  const ::msg::CSRspJoinVoicePvp* p = _impl_.joinvoicepvp_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspJoinVoicePvp&>(
      ::msg::_CSRspJoinVoicePvp_default_instance_);
}
inline const ::msg::CSRspJoinVoicePvp& CSRspBody::joinvoicepvp() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.JoinVoicePvp)
  return _internal_joinvoicepvp();
}
inline void CSRspBody::unsafe_arena_set_allocated_joinvoicepvp(
    ::msg::CSRspJoinVoicePvp* joinvoicepvp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joinvoicepvp_);
  }
  _impl_.joinvoicepvp_ = joinvoicepvp;
  if (joinvoicepvp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.JoinVoicePvp)
}
inline ::msg::CSRspJoinVoicePvp* CSRspBody::release_joinvoicepvp() {
  
  ::msg::CSRspJoinVoicePvp* temp = _impl_.joinvoicepvp_;
  _impl_.joinvoicepvp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspJoinVoicePvp* CSRspBody::unsafe_arena_release_joinvoicepvp() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.JoinVoicePvp)
  
  ::msg::CSRspJoinVoicePvp* temp = _impl_.joinvoicepvp_;
  _impl_.joinvoicepvp_ = nullptr;
  return temp;
}
inline ::msg::CSRspJoinVoicePvp* CSRspBody::_internal_mutable_joinvoicepvp() {
  
  if (_impl_.joinvoicepvp_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspJoinVoicePvp>(GetArenaForAllocation());
    _impl_.joinvoicepvp_ = p;
  }
  return _impl_.joinvoicepvp_;
}
inline ::msg::CSRspJoinVoicePvp* CSRspBody::mutable_joinvoicepvp() {
  ::msg::CSRspJoinVoicePvp* _msg = _internal_mutable_joinvoicepvp();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.JoinVoicePvp)
  return _msg;
}
inline void CSRspBody::set_allocated_joinvoicepvp(::msg::CSRspJoinVoicePvp* joinvoicepvp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joinvoicepvp_);
  }
  if (joinvoicepvp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joinvoicepvp));
    if (message_arena != submessage_arena) {
      joinvoicepvp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joinvoicepvp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.joinvoicepvp_ = joinvoicepvp;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.JoinVoicePvp)
}

// .msg.CSRspJoinVoiceCamp JoinVoiceCamp = 121;
inline bool CSRspBody::_internal_has_joinvoicecamp() const {
  return this != internal_default_instance() && _impl_.joinvoicecamp_ != nullptr;
}
inline bool CSRspBody::has_joinvoicecamp() const {
  return _internal_has_joinvoicecamp();
}
inline const ::msg::CSRspJoinVoiceCamp& CSRspBody::_internal_joinvoicecamp() const {
  const ::msg::CSRspJoinVoiceCamp* p = _impl_.joinvoicecamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspJoinVoiceCamp&>(
      ::msg::_CSRspJoinVoiceCamp_default_instance_);
}
inline const ::msg::CSRspJoinVoiceCamp& CSRspBody::joinvoicecamp() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.JoinVoiceCamp)
  return _internal_joinvoicecamp();
}
inline void CSRspBody::unsafe_arena_set_allocated_joinvoicecamp(
    ::msg::CSRspJoinVoiceCamp* joinvoicecamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joinvoicecamp_);
  }
  _impl_.joinvoicecamp_ = joinvoicecamp;
  if (joinvoicecamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.JoinVoiceCamp)
}
inline ::msg::CSRspJoinVoiceCamp* CSRspBody::release_joinvoicecamp() {
  
  ::msg::CSRspJoinVoiceCamp* temp = _impl_.joinvoicecamp_;
  _impl_.joinvoicecamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspJoinVoiceCamp* CSRspBody::unsafe_arena_release_joinvoicecamp() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.JoinVoiceCamp)
  
  ::msg::CSRspJoinVoiceCamp* temp = _impl_.joinvoicecamp_;
  _impl_.joinvoicecamp_ = nullptr;
  return temp;
}
inline ::msg::CSRspJoinVoiceCamp* CSRspBody::_internal_mutable_joinvoicecamp() {
  
  if (_impl_.joinvoicecamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspJoinVoiceCamp>(GetArenaForAllocation());
    _impl_.joinvoicecamp_ = p;
  }
  return _impl_.joinvoicecamp_;
}
inline ::msg::CSRspJoinVoiceCamp* CSRspBody::mutable_joinvoicecamp() {
  ::msg::CSRspJoinVoiceCamp* _msg = _internal_mutable_joinvoicecamp();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.JoinVoiceCamp)
  return _msg;
}
inline void CSRspBody::set_allocated_joinvoicecamp(::msg::CSRspJoinVoiceCamp* joinvoicecamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joinvoicecamp_);
  }
  if (joinvoicecamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joinvoicecamp));
    if (message_arena != submessage_arena) {
      joinvoicecamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joinvoicecamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.joinvoicecamp_ = joinvoicecamp;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.JoinVoiceCamp)
}

// .msg.CSRspUserCountrySet UserCountrySet = 122;
inline bool CSRspBody::_internal_has_usercountryset() const {
  return this != internal_default_instance() && _impl_.usercountryset_ != nullptr;
}
inline bool CSRspBody::has_usercountryset() const {
  return _internal_has_usercountryset();
}
inline const ::msg::CSRspUserCountrySet& CSRspBody::_internal_usercountryset() const {
  const ::msg::CSRspUserCountrySet* p = _impl_.usercountryset_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUserCountrySet&>(
      ::msg::_CSRspUserCountrySet_default_instance_);
}
inline const ::msg::CSRspUserCountrySet& CSRspBody::usercountryset() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UserCountrySet)
  return _internal_usercountryset();
}
inline void CSRspBody::unsafe_arena_set_allocated_usercountryset(
    ::msg::CSRspUserCountrySet* usercountryset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usercountryset_);
  }
  _impl_.usercountryset_ = usercountryset;
  if (usercountryset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UserCountrySet)
}
inline ::msg::CSRspUserCountrySet* CSRspBody::release_usercountryset() {
  
  ::msg::CSRspUserCountrySet* temp = _impl_.usercountryset_;
  _impl_.usercountryset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUserCountrySet* CSRspBody::unsafe_arena_release_usercountryset() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UserCountrySet)
  
  ::msg::CSRspUserCountrySet* temp = _impl_.usercountryset_;
  _impl_.usercountryset_ = nullptr;
  return temp;
}
inline ::msg::CSRspUserCountrySet* CSRspBody::_internal_mutable_usercountryset() {
  
  if (_impl_.usercountryset_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUserCountrySet>(GetArenaForAllocation());
    _impl_.usercountryset_ = p;
  }
  return _impl_.usercountryset_;
}
inline ::msg::CSRspUserCountrySet* CSRspBody::mutable_usercountryset() {
  ::msg::CSRspUserCountrySet* _msg = _internal_mutable_usercountryset();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UserCountrySet)
  return _msg;
}
inline void CSRspBody::set_allocated_usercountryset(::msg::CSRspUserCountrySet* usercountryset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usercountryset_);
  }
  if (usercountryset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usercountryset));
    if (message_arena != submessage_arena) {
      usercountryset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usercountryset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.usercountryset_ = usercountryset;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UserCountrySet)
}

// .msg.CSRspObserve Observe = 123;
inline bool CSRspBody::_internal_has_observe() const {
  return this != internal_default_instance() && _impl_.observe_ != nullptr;
}
inline bool CSRspBody::has_observe() const {
  return _internal_has_observe();
}
inline const ::msg::CSRspObserve& CSRspBody::_internal_observe() const {
  const ::msg::CSRspObserve* p = _impl_.observe_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspObserve&>(
      ::msg::_CSRspObserve_default_instance_);
}
inline const ::msg::CSRspObserve& CSRspBody::observe() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.Observe)
  return _internal_observe();
}
inline void CSRspBody::unsafe_arena_set_allocated_observe(
    ::msg::CSRspObserve* observe) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observe_);
  }
  _impl_.observe_ = observe;
  if (observe) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.Observe)
}
inline ::msg::CSRspObserve* CSRspBody::release_observe() {
  
  ::msg::CSRspObserve* temp = _impl_.observe_;
  _impl_.observe_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspObserve* CSRspBody::unsafe_arena_release_observe() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.Observe)
  
  ::msg::CSRspObserve* temp = _impl_.observe_;
  _impl_.observe_ = nullptr;
  return temp;
}
inline ::msg::CSRspObserve* CSRspBody::_internal_mutable_observe() {
  
  if (_impl_.observe_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspObserve>(GetArenaForAllocation());
    _impl_.observe_ = p;
  }
  return _impl_.observe_;
}
inline ::msg::CSRspObserve* CSRspBody::mutable_observe() {
  ::msg::CSRspObserve* _msg = _internal_mutable_observe();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.Observe)
  return _msg;
}
inline void CSRspBody::set_allocated_observe(::msg::CSRspObserve* observe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observe_);
  }
  if (observe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observe));
    if (message_arena != submessage_arena) {
      observe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observe, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.observe_ = observe;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.Observe)
}

// .msg.CSRspGetRecommendPvp GetRecommendPvp = 124;
inline bool CSRspBody::_internal_has_getrecommendpvp() const {
  return this != internal_default_instance() && _impl_.getrecommendpvp_ != nullptr;
}
inline bool CSRspBody::has_getrecommendpvp() const {
  return _internal_has_getrecommendpvp();
}
inline const ::msg::CSRspGetRecommendPvp& CSRspBody::_internal_getrecommendpvp() const {
  const ::msg::CSRspGetRecommendPvp* p = _impl_.getrecommendpvp_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetRecommendPvp&>(
      ::msg::_CSRspGetRecommendPvp_default_instance_);
}
inline const ::msg::CSRspGetRecommendPvp& CSRspBody::getrecommendpvp() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetRecommendPvp)
  return _internal_getrecommendpvp();
}
inline void CSRspBody::unsafe_arena_set_allocated_getrecommendpvp(
    ::msg::CSRspGetRecommendPvp* getrecommendpvp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getrecommendpvp_);
  }
  _impl_.getrecommendpvp_ = getrecommendpvp;
  if (getrecommendpvp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetRecommendPvp)
}
inline ::msg::CSRspGetRecommendPvp* CSRspBody::release_getrecommendpvp() {
  
  ::msg::CSRspGetRecommendPvp* temp = _impl_.getrecommendpvp_;
  _impl_.getrecommendpvp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetRecommendPvp* CSRspBody::unsafe_arena_release_getrecommendpvp() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetRecommendPvp)
  
  ::msg::CSRspGetRecommendPvp* temp = _impl_.getrecommendpvp_;
  _impl_.getrecommendpvp_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetRecommendPvp* CSRspBody::_internal_mutable_getrecommendpvp() {
  
  if (_impl_.getrecommendpvp_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetRecommendPvp>(GetArenaForAllocation());
    _impl_.getrecommendpvp_ = p;
  }
  return _impl_.getrecommendpvp_;
}
inline ::msg::CSRspGetRecommendPvp* CSRspBody::mutable_getrecommendpvp() {
  ::msg::CSRspGetRecommendPvp* _msg = _internal_mutable_getrecommendpvp();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetRecommendPvp)
  return _msg;
}
inline void CSRspBody::set_allocated_getrecommendpvp(::msg::CSRspGetRecommendPvp* getrecommendpvp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getrecommendpvp_);
  }
  if (getrecommendpvp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getrecommendpvp));
    if (message_arena != submessage_arena) {
      getrecommendpvp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getrecommendpvp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getrecommendpvp_ = getrecommendpvp;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetRecommendPvp)
}

// .msg.CSRspObserveLogin ObserveLogin = 125;
inline bool CSRspBody::_internal_has_observelogin() const {
  return this != internal_default_instance() && _impl_.observelogin_ != nullptr;
}
inline bool CSRspBody::has_observelogin() const {
  return _internal_has_observelogin();
}
inline const ::msg::CSRspObserveLogin& CSRspBody::_internal_observelogin() const {
  const ::msg::CSRspObserveLogin* p = _impl_.observelogin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspObserveLogin&>(
      ::msg::_CSRspObserveLogin_default_instance_);
}
inline const ::msg::CSRspObserveLogin& CSRspBody::observelogin() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ObserveLogin)
  return _internal_observelogin();
}
inline void CSRspBody::unsafe_arena_set_allocated_observelogin(
    ::msg::CSRspObserveLogin* observelogin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observelogin_);
  }
  _impl_.observelogin_ = observelogin;
  if (observelogin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ObserveLogin)
}
inline ::msg::CSRspObserveLogin* CSRspBody::release_observelogin() {
  
  ::msg::CSRspObserveLogin* temp = _impl_.observelogin_;
  _impl_.observelogin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspObserveLogin* CSRspBody::unsafe_arena_release_observelogin() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ObserveLogin)
  
  ::msg::CSRspObserveLogin* temp = _impl_.observelogin_;
  _impl_.observelogin_ = nullptr;
  return temp;
}
inline ::msg::CSRspObserveLogin* CSRspBody::_internal_mutable_observelogin() {
  
  if (_impl_.observelogin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspObserveLogin>(GetArenaForAllocation());
    _impl_.observelogin_ = p;
  }
  return _impl_.observelogin_;
}
inline ::msg::CSRspObserveLogin* CSRspBody::mutable_observelogin() {
  ::msg::CSRspObserveLogin* _msg = _internal_mutable_observelogin();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ObserveLogin)
  return _msg;
}
inline void CSRspBody::set_allocated_observelogin(::msg::CSRspObserveLogin* observelogin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observelogin_);
  }
  if (observelogin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observelogin));
    if (message_arena != submessage_arena) {
      observelogin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observelogin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.observelogin_ = observelogin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ObserveLogin)
}

// .msg.CSRspQuitObserve QuitObserve = 126;
inline bool CSRspBody::_internal_has_quitobserve() const {
  return this != internal_default_instance() && _impl_.quitobserve_ != nullptr;
}
inline bool CSRspBody::has_quitobserve() const {
  return _internal_has_quitobserve();
}
inline const ::msg::CSRspQuitObserve& CSRspBody::_internal_quitobserve() const {
  const ::msg::CSRspQuitObserve* p = _impl_.quitobserve_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspQuitObserve&>(
      ::msg::_CSRspQuitObserve_default_instance_);
}
inline const ::msg::CSRspQuitObserve& CSRspBody::quitobserve() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.QuitObserve)
  return _internal_quitobserve();
}
inline void CSRspBody::unsafe_arena_set_allocated_quitobserve(
    ::msg::CSRspQuitObserve* quitobserve) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.quitobserve_);
  }
  _impl_.quitobserve_ = quitobserve;
  if (quitobserve) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.QuitObserve)
}
inline ::msg::CSRspQuitObserve* CSRspBody::release_quitobserve() {
  
  ::msg::CSRspQuitObserve* temp = _impl_.quitobserve_;
  _impl_.quitobserve_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspQuitObserve* CSRspBody::unsafe_arena_release_quitobserve() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.QuitObserve)
  
  ::msg::CSRspQuitObserve* temp = _impl_.quitobserve_;
  _impl_.quitobserve_ = nullptr;
  return temp;
}
inline ::msg::CSRspQuitObserve* CSRspBody::_internal_mutable_quitobserve() {
  
  if (_impl_.quitobserve_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspQuitObserve>(GetArenaForAllocation());
    _impl_.quitobserve_ = p;
  }
  return _impl_.quitobserve_;
}
inline ::msg::CSRspQuitObserve* CSRspBody::mutable_quitobserve() {
  ::msg::CSRspQuitObserve* _msg = _internal_mutable_quitobserve();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.QuitObserve)
  return _msg;
}
inline void CSRspBody::set_allocated_quitobserve(::msg::CSRspQuitObserve* quitobserve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.quitobserve_);
  }
  if (quitobserve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quitobserve));
    if (message_arena != submessage_arena) {
      quitobserve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quitobserve, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.quitobserve_ = quitobserve;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.QuitObserve)
}

// .msg.CSRspGetObserveInfo GetObserveInfo = 127;
inline bool CSRspBody::_internal_has_getobserveinfo() const {
  return this != internal_default_instance() && _impl_.getobserveinfo_ != nullptr;
}
inline bool CSRspBody::has_getobserveinfo() const {
  return _internal_has_getobserveinfo();
}
inline const ::msg::CSRspGetObserveInfo& CSRspBody::_internal_getobserveinfo() const {
  const ::msg::CSRspGetObserveInfo* p = _impl_.getobserveinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetObserveInfo&>(
      ::msg::_CSRspGetObserveInfo_default_instance_);
}
inline const ::msg::CSRspGetObserveInfo& CSRspBody::getobserveinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetObserveInfo)
  return _internal_getobserveinfo();
}
inline void CSRspBody::unsafe_arena_set_allocated_getobserveinfo(
    ::msg::CSRspGetObserveInfo* getobserveinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getobserveinfo_);
  }
  _impl_.getobserveinfo_ = getobserveinfo;
  if (getobserveinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetObserveInfo)
}
inline ::msg::CSRspGetObserveInfo* CSRspBody::release_getobserveinfo() {
  
  ::msg::CSRspGetObserveInfo* temp = _impl_.getobserveinfo_;
  _impl_.getobserveinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetObserveInfo* CSRspBody::unsafe_arena_release_getobserveinfo() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetObserveInfo)
  
  ::msg::CSRspGetObserveInfo* temp = _impl_.getobserveinfo_;
  _impl_.getobserveinfo_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetObserveInfo* CSRspBody::_internal_mutable_getobserveinfo() {
  
  if (_impl_.getobserveinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetObserveInfo>(GetArenaForAllocation());
    _impl_.getobserveinfo_ = p;
  }
  return _impl_.getobserveinfo_;
}
inline ::msg::CSRspGetObserveInfo* CSRspBody::mutable_getobserveinfo() {
  ::msg::CSRspGetObserveInfo* _msg = _internal_mutable_getobserveinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetObserveInfo)
  return _msg;
}
inline void CSRspBody::set_allocated_getobserveinfo(::msg::CSRspGetObserveInfo* getobserveinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getobserveinfo_);
  }
  if (getobserveinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getobserveinfo));
    if (message_arena != submessage_arena) {
      getobserveinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getobserveinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getobserveinfo_ = getobserveinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetObserveInfo)
}

// .msg.CSRspFreeFlow FreeFlow = 128;
inline bool CSRspBody::_internal_has_freeflow() const {
  return this != internal_default_instance() && _impl_.freeflow_ != nullptr;
}
inline bool CSRspBody::has_freeflow() const {
  return _internal_has_freeflow();
}
inline const ::msg::CSRspFreeFlow& CSRspBody::_internal_freeflow() const {
  const ::msg::CSRspFreeFlow* p = _impl_.freeflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspFreeFlow&>(
      ::msg::_CSRspFreeFlow_default_instance_);
}
inline const ::msg::CSRspFreeFlow& CSRspBody::freeflow() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.FreeFlow)
  return _internal_freeflow();
}
inline void CSRspBody::unsafe_arena_set_allocated_freeflow(
    ::msg::CSRspFreeFlow* freeflow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.freeflow_);
  }
  _impl_.freeflow_ = freeflow;
  if (freeflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.FreeFlow)
}
inline ::msg::CSRspFreeFlow* CSRspBody::release_freeflow() {
  
  ::msg::CSRspFreeFlow* temp = _impl_.freeflow_;
  _impl_.freeflow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspFreeFlow* CSRspBody::unsafe_arena_release_freeflow() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.FreeFlow)
  
  ::msg::CSRspFreeFlow* temp = _impl_.freeflow_;
  _impl_.freeflow_ = nullptr;
  return temp;
}
inline ::msg::CSRspFreeFlow* CSRspBody::_internal_mutable_freeflow() {
  
  if (_impl_.freeflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspFreeFlow>(GetArenaForAllocation());
    _impl_.freeflow_ = p;
  }
  return _impl_.freeflow_;
}
inline ::msg::CSRspFreeFlow* CSRspBody::mutable_freeflow() {
  ::msg::CSRspFreeFlow* _msg = _internal_mutable_freeflow();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.FreeFlow)
  return _msg;
}
inline void CSRspBody::set_allocated_freeflow(::msg::CSRspFreeFlow* freeflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.freeflow_);
  }
  if (freeflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freeflow));
    if (message_arena != submessage_arena) {
      freeflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freeflow, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.freeflow_ = freeflow;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.FreeFlow)
}

// .msg.CSRspSetPushToken SetPushToken = 129;
inline bool CSRspBody::_internal_has_setpushtoken() const {
  return this != internal_default_instance() && _impl_.setpushtoken_ != nullptr;
}
inline bool CSRspBody::has_setpushtoken() const {
  return _internal_has_setpushtoken();
}
inline const ::msg::CSRspSetPushToken& CSRspBody::_internal_setpushtoken() const {
  const ::msg::CSRspSetPushToken* p = _impl_.setpushtoken_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSetPushToken&>(
      ::msg::_CSRspSetPushToken_default_instance_);
}
inline const ::msg::CSRspSetPushToken& CSRspBody::setpushtoken() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SetPushToken)
  return _internal_setpushtoken();
}
inline void CSRspBody::unsafe_arena_set_allocated_setpushtoken(
    ::msg::CSRspSetPushToken* setpushtoken) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setpushtoken_);
  }
  _impl_.setpushtoken_ = setpushtoken;
  if (setpushtoken) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SetPushToken)
}
inline ::msg::CSRspSetPushToken* CSRspBody::release_setpushtoken() {
  
  ::msg::CSRspSetPushToken* temp = _impl_.setpushtoken_;
  _impl_.setpushtoken_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSetPushToken* CSRspBody::unsafe_arena_release_setpushtoken() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SetPushToken)
  
  ::msg::CSRspSetPushToken* temp = _impl_.setpushtoken_;
  _impl_.setpushtoken_ = nullptr;
  return temp;
}
inline ::msg::CSRspSetPushToken* CSRspBody::_internal_mutable_setpushtoken() {
  
  if (_impl_.setpushtoken_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSetPushToken>(GetArenaForAllocation());
    _impl_.setpushtoken_ = p;
  }
  return _impl_.setpushtoken_;
}
inline ::msg::CSRspSetPushToken* CSRspBody::mutable_setpushtoken() {
  ::msg::CSRspSetPushToken* _msg = _internal_mutable_setpushtoken();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SetPushToken)
  return _msg;
}
inline void CSRspBody::set_allocated_setpushtoken(::msg::CSRspSetPushToken* setpushtoken) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setpushtoken_);
  }
  if (setpushtoken) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setpushtoken));
    if (message_arena != submessage_arena) {
      setpushtoken = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setpushtoken, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setpushtoken_ = setpushtoken;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SetPushToken)
}

// .msg.CSRspTlogEvent TlogEvent = 130;
inline bool CSRspBody::_internal_has_tlogevent() const {
  return this != internal_default_instance() && _impl_.tlogevent_ != nullptr;
}
inline bool CSRspBody::has_tlogevent() const {
  return _internal_has_tlogevent();
}
inline const ::msg::CSRspTlogEvent& CSRspBody::_internal_tlogevent() const {
  const ::msg::CSRspTlogEvent* p = _impl_.tlogevent_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspTlogEvent&>(
      ::msg::_CSRspTlogEvent_default_instance_);
}
inline const ::msg::CSRspTlogEvent& CSRspBody::tlogevent() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.TlogEvent)
  return _internal_tlogevent();
}
inline void CSRspBody::unsafe_arena_set_allocated_tlogevent(
    ::msg::CSRspTlogEvent* tlogevent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tlogevent_);
  }
  _impl_.tlogevent_ = tlogevent;
  if (tlogevent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.TlogEvent)
}
inline ::msg::CSRspTlogEvent* CSRspBody::release_tlogevent() {
  
  ::msg::CSRspTlogEvent* temp = _impl_.tlogevent_;
  _impl_.tlogevent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspTlogEvent* CSRspBody::unsafe_arena_release_tlogevent() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.TlogEvent)
  
  ::msg::CSRspTlogEvent* temp = _impl_.tlogevent_;
  _impl_.tlogevent_ = nullptr;
  return temp;
}
inline ::msg::CSRspTlogEvent* CSRspBody::_internal_mutable_tlogevent() {
  
  if (_impl_.tlogevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspTlogEvent>(GetArenaForAllocation());
    _impl_.tlogevent_ = p;
  }
  return _impl_.tlogevent_;
}
inline ::msg::CSRspTlogEvent* CSRspBody::mutable_tlogevent() {
  ::msg::CSRspTlogEvent* _msg = _internal_mutable_tlogevent();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.TlogEvent)
  return _msg;
}
inline void CSRspBody::set_allocated_tlogevent(::msg::CSRspTlogEvent* tlogevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tlogevent_);
  }
  if (tlogevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tlogevent));
    if (message_arena != submessage_arena) {
      tlogevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tlogevent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tlogevent_ = tlogevent;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.TlogEvent)
}

// .msg.CSRspWxVVipAward WxVVipAward = 131;
inline bool CSRspBody::_internal_has_wxvvipaward() const {
  return this != internal_default_instance() && _impl_.wxvvipaward_ != nullptr;
}
inline bool CSRspBody::has_wxvvipaward() const {
  return _internal_has_wxvvipaward();
}
inline const ::msg::CSRspWxVVipAward& CSRspBody::_internal_wxvvipaward() const {
  const ::msg::CSRspWxVVipAward* p = _impl_.wxvvipaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspWxVVipAward&>(
      ::msg::_CSRspWxVVipAward_default_instance_);
}
inline const ::msg::CSRspWxVVipAward& CSRspBody::wxvvipaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.WxVVipAward)
  return _internal_wxvvipaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_wxvvipaward(
    ::msg::CSRspWxVVipAward* wxvvipaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxvvipaward_);
  }
  _impl_.wxvvipaward_ = wxvvipaward;
  if (wxvvipaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.WxVVipAward)
}
inline ::msg::CSRspWxVVipAward* CSRspBody::release_wxvvipaward() {
  
  ::msg::CSRspWxVVipAward* temp = _impl_.wxvvipaward_;
  _impl_.wxvvipaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspWxVVipAward* CSRspBody::unsafe_arena_release_wxvvipaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.WxVVipAward)
  
  ::msg::CSRspWxVVipAward* temp = _impl_.wxvvipaward_;
  _impl_.wxvvipaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspWxVVipAward* CSRspBody::_internal_mutable_wxvvipaward() {
  
  if (_impl_.wxvvipaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspWxVVipAward>(GetArenaForAllocation());
    _impl_.wxvvipaward_ = p;
  }
  return _impl_.wxvvipaward_;
}
inline ::msg::CSRspWxVVipAward* CSRspBody::mutable_wxvvipaward() {
  ::msg::CSRspWxVVipAward* _msg = _internal_mutable_wxvvipaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.WxVVipAward)
  return _msg;
}
inline void CSRspBody::set_allocated_wxvvipaward(::msg::CSRspWxVVipAward* wxvvipaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxvvipaward_);
  }
  if (wxvvipaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wxvvipaward));
    if (message_arena != submessage_arena) {
      wxvvipaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wxvvipaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wxvvipaward_ = wxvvipaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.WxVVipAward)
}

// .msg.CSRspGetRelationStarWX RelationStarWX = 132;
inline bool CSRspBody::_internal_has_relationstarwx() const {
  return this != internal_default_instance() && _impl_.relationstarwx_ != nullptr;
}
inline bool CSRspBody::has_relationstarwx() const {
  return _internal_has_relationstarwx();
}
inline const ::msg::CSRspGetRelationStarWX& CSRspBody::_internal_relationstarwx() const {
  const ::msg::CSRspGetRelationStarWX* p = _impl_.relationstarwx_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetRelationStarWX&>(
      ::msg::_CSRspGetRelationStarWX_default_instance_);
}
inline const ::msg::CSRspGetRelationStarWX& CSRspBody::relationstarwx() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RelationStarWX)
  return _internal_relationstarwx();
}
inline void CSRspBody::unsafe_arena_set_allocated_relationstarwx(
    ::msg::CSRspGetRelationStarWX* relationstarwx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relationstarwx_);
  }
  _impl_.relationstarwx_ = relationstarwx;
  if (relationstarwx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RelationStarWX)
}
inline ::msg::CSRspGetRelationStarWX* CSRspBody::release_relationstarwx() {
  
  ::msg::CSRspGetRelationStarWX* temp = _impl_.relationstarwx_;
  _impl_.relationstarwx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetRelationStarWX* CSRspBody::unsafe_arena_release_relationstarwx() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RelationStarWX)
  
  ::msg::CSRspGetRelationStarWX* temp = _impl_.relationstarwx_;
  _impl_.relationstarwx_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetRelationStarWX* CSRspBody::_internal_mutable_relationstarwx() {
  
  if (_impl_.relationstarwx_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetRelationStarWX>(GetArenaForAllocation());
    _impl_.relationstarwx_ = p;
  }
  return _impl_.relationstarwx_;
}
inline ::msg::CSRspGetRelationStarWX* CSRspBody::mutable_relationstarwx() {
  ::msg::CSRspGetRelationStarWX* _msg = _internal_mutable_relationstarwx();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RelationStarWX)
  return _msg;
}
inline void CSRspBody::set_allocated_relationstarwx(::msg::CSRspGetRelationStarWX* relationstarwx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.relationstarwx_);
  }
  if (relationstarwx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relationstarwx));
    if (message_arena != submessage_arena) {
      relationstarwx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relationstarwx, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.relationstarwx_ = relationstarwx;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RelationStarWX)
}

// .msg.CSRspSendWxRedPacket SendWxRedPacket = 133;
inline bool CSRspBody::_internal_has_sendwxredpacket() const {
  return this != internal_default_instance() && _impl_.sendwxredpacket_ != nullptr;
}
inline bool CSRspBody::has_sendwxredpacket() const {
  return _internal_has_sendwxredpacket();
}
inline const ::msg::CSRspSendWxRedPacket& CSRspBody::_internal_sendwxredpacket() const {
  const ::msg::CSRspSendWxRedPacket* p = _impl_.sendwxredpacket_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSendWxRedPacket&>(
      ::msg::_CSRspSendWxRedPacket_default_instance_);
}
inline const ::msg::CSRspSendWxRedPacket& CSRspBody::sendwxredpacket() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SendWxRedPacket)
  return _internal_sendwxredpacket();
}
inline void CSRspBody::unsafe_arena_set_allocated_sendwxredpacket(
    ::msg::CSRspSendWxRedPacket* sendwxredpacket) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sendwxredpacket_);
  }
  _impl_.sendwxredpacket_ = sendwxredpacket;
  if (sendwxredpacket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SendWxRedPacket)
}
inline ::msg::CSRspSendWxRedPacket* CSRspBody::release_sendwxredpacket() {
  
  ::msg::CSRspSendWxRedPacket* temp = _impl_.sendwxredpacket_;
  _impl_.sendwxredpacket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSendWxRedPacket* CSRspBody::unsafe_arena_release_sendwxredpacket() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SendWxRedPacket)
  
  ::msg::CSRspSendWxRedPacket* temp = _impl_.sendwxredpacket_;
  _impl_.sendwxredpacket_ = nullptr;
  return temp;
}
inline ::msg::CSRspSendWxRedPacket* CSRspBody::_internal_mutable_sendwxredpacket() {
  
  if (_impl_.sendwxredpacket_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSendWxRedPacket>(GetArenaForAllocation());
    _impl_.sendwxredpacket_ = p;
  }
  return _impl_.sendwxredpacket_;
}
inline ::msg::CSRspSendWxRedPacket* CSRspBody::mutable_sendwxredpacket() {
  ::msg::CSRspSendWxRedPacket* _msg = _internal_mutable_sendwxredpacket();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SendWxRedPacket)
  return _msg;
}
inline void CSRspBody::set_allocated_sendwxredpacket(::msg::CSRspSendWxRedPacket* sendwxredpacket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sendwxredpacket_);
  }
  if (sendwxredpacket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sendwxredpacket));
    if (message_arena != submessage_arena) {
      sendwxredpacket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sendwxredpacket, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sendwxredpacket_ = sendwxredpacket;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SendWxRedPacket)
}

// .msg.CSRspRecvWxRedPacket RecvWxRedPacket = 134;
inline bool CSRspBody::_internal_has_recvwxredpacket() const {
  return this != internal_default_instance() && _impl_.recvwxredpacket_ != nullptr;
}
inline bool CSRspBody::has_recvwxredpacket() const {
  return _internal_has_recvwxredpacket();
}
inline const ::msg::CSRspRecvWxRedPacket& CSRspBody::_internal_recvwxredpacket() const {
  const ::msg::CSRspRecvWxRedPacket* p = _impl_.recvwxredpacket_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRecvWxRedPacket&>(
      ::msg::_CSRspRecvWxRedPacket_default_instance_);
}
inline const ::msg::CSRspRecvWxRedPacket& CSRspBody::recvwxredpacket() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RecvWxRedPacket)
  return _internal_recvwxredpacket();
}
inline void CSRspBody::unsafe_arena_set_allocated_recvwxredpacket(
    ::msg::CSRspRecvWxRedPacket* recvwxredpacket) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recvwxredpacket_);
  }
  _impl_.recvwxredpacket_ = recvwxredpacket;
  if (recvwxredpacket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RecvWxRedPacket)
}
inline ::msg::CSRspRecvWxRedPacket* CSRspBody::release_recvwxredpacket() {
  
  ::msg::CSRspRecvWxRedPacket* temp = _impl_.recvwxredpacket_;
  _impl_.recvwxredpacket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRecvWxRedPacket* CSRspBody::unsafe_arena_release_recvwxredpacket() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RecvWxRedPacket)
  
  ::msg::CSRspRecvWxRedPacket* temp = _impl_.recvwxredpacket_;
  _impl_.recvwxredpacket_ = nullptr;
  return temp;
}
inline ::msg::CSRspRecvWxRedPacket* CSRspBody::_internal_mutable_recvwxredpacket() {
  
  if (_impl_.recvwxredpacket_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRecvWxRedPacket>(GetArenaForAllocation());
    _impl_.recvwxredpacket_ = p;
  }
  return _impl_.recvwxredpacket_;
}
inline ::msg::CSRspRecvWxRedPacket* CSRspBody::mutable_recvwxredpacket() {
  ::msg::CSRspRecvWxRedPacket* _msg = _internal_mutable_recvwxredpacket();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RecvWxRedPacket)
  return _msg;
}
inline void CSRspBody::set_allocated_recvwxredpacket(::msg::CSRspRecvWxRedPacket* recvwxredpacket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recvwxredpacket_);
  }
  if (recvwxredpacket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recvwxredpacket));
    if (message_arena != submessage_arena) {
      recvwxredpacket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recvwxredpacket, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recvwxredpacket_ = recvwxredpacket;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RecvWxRedPacket)
}

// .msg.CSRspWxRedPktLike WxRedPktLike = 135;
inline bool CSRspBody::_internal_has_wxredpktlike() const {
  return this != internal_default_instance() && _impl_.wxredpktlike_ != nullptr;
}
inline bool CSRspBody::has_wxredpktlike() const {
  return _internal_has_wxredpktlike();
}
inline const ::msg::CSRspWxRedPktLike& CSRspBody::_internal_wxredpktlike() const {
  const ::msg::CSRspWxRedPktLike* p = _impl_.wxredpktlike_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspWxRedPktLike&>(
      ::msg::_CSRspWxRedPktLike_default_instance_);
}
inline const ::msg::CSRspWxRedPktLike& CSRspBody::wxredpktlike() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.WxRedPktLike)
  return _internal_wxredpktlike();
}
inline void CSRspBody::unsafe_arena_set_allocated_wxredpktlike(
    ::msg::CSRspWxRedPktLike* wxredpktlike) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxredpktlike_);
  }
  _impl_.wxredpktlike_ = wxredpktlike;
  if (wxredpktlike) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.WxRedPktLike)
}
inline ::msg::CSRspWxRedPktLike* CSRspBody::release_wxredpktlike() {
  
  ::msg::CSRspWxRedPktLike* temp = _impl_.wxredpktlike_;
  _impl_.wxredpktlike_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspWxRedPktLike* CSRspBody::unsafe_arena_release_wxredpktlike() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.WxRedPktLike)
  
  ::msg::CSRspWxRedPktLike* temp = _impl_.wxredpktlike_;
  _impl_.wxredpktlike_ = nullptr;
  return temp;
}
inline ::msg::CSRspWxRedPktLike* CSRspBody::_internal_mutable_wxredpktlike() {
  
  if (_impl_.wxredpktlike_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspWxRedPktLike>(GetArenaForAllocation());
    _impl_.wxredpktlike_ = p;
  }
  return _impl_.wxredpktlike_;
}
inline ::msg::CSRspWxRedPktLike* CSRspBody::mutable_wxredpktlike() {
  ::msg::CSRspWxRedPktLike* _msg = _internal_mutable_wxredpktlike();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.WxRedPktLike)
  return _msg;
}
inline void CSRspBody::set_allocated_wxredpktlike(::msg::CSRspWxRedPktLike* wxredpktlike) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxredpktlike_);
  }
  if (wxredpktlike) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wxredpktlike));
    if (message_arena != submessage_arena) {
      wxredpktlike = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wxredpktlike, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wxredpktlike_ = wxredpktlike;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.WxRedPktLike)
}

// .msg.CSRspWxRedPktRank WxRedPktRank = 136;
inline bool CSRspBody::_internal_has_wxredpktrank() const {
  return this != internal_default_instance() && _impl_.wxredpktrank_ != nullptr;
}
inline bool CSRspBody::has_wxredpktrank() const {
  return _internal_has_wxredpktrank();
}
inline const ::msg::CSRspWxRedPktRank& CSRspBody::_internal_wxredpktrank() const {
  const ::msg::CSRspWxRedPktRank* p = _impl_.wxredpktrank_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspWxRedPktRank&>(
      ::msg::_CSRspWxRedPktRank_default_instance_);
}
inline const ::msg::CSRspWxRedPktRank& CSRspBody::wxredpktrank() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.WxRedPktRank)
  return _internal_wxredpktrank();
}
inline void CSRspBody::unsafe_arena_set_allocated_wxredpktrank(
    ::msg::CSRspWxRedPktRank* wxredpktrank) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxredpktrank_);
  }
  _impl_.wxredpktrank_ = wxredpktrank;
  if (wxredpktrank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.WxRedPktRank)
}
inline ::msg::CSRspWxRedPktRank* CSRspBody::release_wxredpktrank() {
  
  ::msg::CSRspWxRedPktRank* temp = _impl_.wxredpktrank_;
  _impl_.wxredpktrank_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspWxRedPktRank* CSRspBody::unsafe_arena_release_wxredpktrank() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.WxRedPktRank)
  
  ::msg::CSRspWxRedPktRank* temp = _impl_.wxredpktrank_;
  _impl_.wxredpktrank_ = nullptr;
  return temp;
}
inline ::msg::CSRspWxRedPktRank* CSRspBody::_internal_mutable_wxredpktrank() {
  
  if (_impl_.wxredpktrank_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspWxRedPktRank>(GetArenaForAllocation());
    _impl_.wxredpktrank_ = p;
  }
  return _impl_.wxredpktrank_;
}
inline ::msg::CSRspWxRedPktRank* CSRspBody::mutable_wxredpktrank() {
  ::msg::CSRspWxRedPktRank* _msg = _internal_mutable_wxredpktrank();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.WxRedPktRank)
  return _msg;
}
inline void CSRspBody::set_allocated_wxredpktrank(::msg::CSRspWxRedPktRank* wxredpktrank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxredpktrank_);
  }
  if (wxredpktrank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wxredpktrank));
    if (message_arena != submessage_arena) {
      wxredpktrank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wxredpktrank, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wxredpktrank_ = wxredpktrank;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.WxRedPktRank)
}

// .msg.CSRspObservePrivilege SetObservePrivilege = 137;
inline bool CSRspBody::_internal_has_setobserveprivilege() const {
  return this != internal_default_instance() && _impl_.setobserveprivilege_ != nullptr;
}
inline bool CSRspBody::has_setobserveprivilege() const {
  return _internal_has_setobserveprivilege();
}
inline const ::msg::CSRspObservePrivilege& CSRspBody::_internal_setobserveprivilege() const {
  const ::msg::CSRspObservePrivilege* p = _impl_.setobserveprivilege_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspObservePrivilege&>(
      ::msg::_CSRspObservePrivilege_default_instance_);
}
inline const ::msg::CSRspObservePrivilege& CSRspBody::setobserveprivilege() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SetObservePrivilege)
  return _internal_setobserveprivilege();
}
inline void CSRspBody::unsafe_arena_set_allocated_setobserveprivilege(
    ::msg::CSRspObservePrivilege* setobserveprivilege) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setobserveprivilege_);
  }
  _impl_.setobserveprivilege_ = setobserveprivilege;
  if (setobserveprivilege) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SetObservePrivilege)
}
inline ::msg::CSRspObservePrivilege* CSRspBody::release_setobserveprivilege() {
  
  ::msg::CSRspObservePrivilege* temp = _impl_.setobserveprivilege_;
  _impl_.setobserveprivilege_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspObservePrivilege* CSRspBody::unsafe_arena_release_setobserveprivilege() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SetObservePrivilege)
  
  ::msg::CSRspObservePrivilege* temp = _impl_.setobserveprivilege_;
  _impl_.setobserveprivilege_ = nullptr;
  return temp;
}
inline ::msg::CSRspObservePrivilege* CSRspBody::_internal_mutable_setobserveprivilege() {
  
  if (_impl_.setobserveprivilege_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspObservePrivilege>(GetArenaForAllocation());
    _impl_.setobserveprivilege_ = p;
  }
  return _impl_.setobserveprivilege_;
}
inline ::msg::CSRspObservePrivilege* CSRspBody::mutable_setobserveprivilege() {
  ::msg::CSRspObservePrivilege* _msg = _internal_mutable_setobserveprivilege();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SetObservePrivilege)
  return _msg;
}
inline void CSRspBody::set_allocated_setobserveprivilege(::msg::CSRspObservePrivilege* setobserveprivilege) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setobserveprivilege_);
  }
  if (setobserveprivilege) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setobserveprivilege));
    if (message_arena != submessage_arena) {
      setobserveprivilege = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setobserveprivilege, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setobserveprivilege_ = setobserveprivilege;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SetObservePrivilege)
}

// .msg.CSRspPresetFastChat PresetFastChat = 138;
inline bool CSRspBody::_internal_has_presetfastchat() const {
  return this != internal_default_instance() && _impl_.presetfastchat_ != nullptr;
}
inline bool CSRspBody::has_presetfastchat() const {
  return _internal_has_presetfastchat();
}
inline const ::msg::CSRspPresetFastChat& CSRspBody::_internal_presetfastchat() const {
  const ::msg::CSRspPresetFastChat* p = _impl_.presetfastchat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPresetFastChat&>(
      ::msg::_CSRspPresetFastChat_default_instance_);
}
inline const ::msg::CSRspPresetFastChat& CSRspBody::presetfastchat() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PresetFastChat)
  return _internal_presetfastchat();
}
inline void CSRspBody::unsafe_arena_set_allocated_presetfastchat(
    ::msg::CSRspPresetFastChat* presetfastchat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.presetfastchat_);
  }
  _impl_.presetfastchat_ = presetfastchat;
  if (presetfastchat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PresetFastChat)
}
inline ::msg::CSRspPresetFastChat* CSRspBody::release_presetfastchat() {
  
  ::msg::CSRspPresetFastChat* temp = _impl_.presetfastchat_;
  _impl_.presetfastchat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPresetFastChat* CSRspBody::unsafe_arena_release_presetfastchat() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PresetFastChat)
  
  ::msg::CSRspPresetFastChat* temp = _impl_.presetfastchat_;
  _impl_.presetfastchat_ = nullptr;
  return temp;
}
inline ::msg::CSRspPresetFastChat* CSRspBody::_internal_mutable_presetfastchat() {
  
  if (_impl_.presetfastchat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPresetFastChat>(GetArenaForAllocation());
    _impl_.presetfastchat_ = p;
  }
  return _impl_.presetfastchat_;
}
inline ::msg::CSRspPresetFastChat* CSRspBody::mutable_presetfastchat() {
  ::msg::CSRspPresetFastChat* _msg = _internal_mutable_presetfastchat();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PresetFastChat)
  return _msg;
}
inline void CSRspBody::set_allocated_presetfastchat(::msg::CSRspPresetFastChat* presetfastchat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.presetfastchat_);
  }
  if (presetfastchat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(presetfastchat));
    if (message_arena != submessage_arena) {
      presetfastchat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, presetfastchat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.presetfastchat_ = presetfastchat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PresetFastChat)
}

// .msg.CSRspChangeSlotTeam ChangeSlotTeam = 139;
inline bool CSRspBody::_internal_has_changeslotteam() const {
  return this != internal_default_instance() && _impl_.changeslotteam_ != nullptr;
}
inline bool CSRspBody::has_changeslotteam() const {
  return _internal_has_changeslotteam();
}
inline const ::msg::CSRspChangeSlotTeam& CSRspBody::_internal_changeslotteam() const {
  const ::msg::CSRspChangeSlotTeam* p = _impl_.changeslotteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspChangeSlotTeam&>(
      ::msg::_CSRspChangeSlotTeam_default_instance_);
}
inline const ::msg::CSRspChangeSlotTeam& CSRspBody::changeslotteam() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ChangeSlotTeam)
  return _internal_changeslotteam();
}
inline void CSRspBody::unsafe_arena_set_allocated_changeslotteam(
    ::msg::CSRspChangeSlotTeam* changeslotteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changeslotteam_);
  }
  _impl_.changeslotteam_ = changeslotteam;
  if (changeslotteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ChangeSlotTeam)
}
inline ::msg::CSRspChangeSlotTeam* CSRspBody::release_changeslotteam() {
  
  ::msg::CSRspChangeSlotTeam* temp = _impl_.changeslotteam_;
  _impl_.changeslotteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspChangeSlotTeam* CSRspBody::unsafe_arena_release_changeslotteam() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ChangeSlotTeam)
  
  ::msg::CSRspChangeSlotTeam* temp = _impl_.changeslotteam_;
  _impl_.changeslotteam_ = nullptr;
  return temp;
}
inline ::msg::CSRspChangeSlotTeam* CSRspBody::_internal_mutable_changeslotteam() {
  
  if (_impl_.changeslotteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspChangeSlotTeam>(GetArenaForAllocation());
    _impl_.changeslotteam_ = p;
  }
  return _impl_.changeslotteam_;
}
inline ::msg::CSRspChangeSlotTeam* CSRspBody::mutable_changeslotteam() {
  ::msg::CSRspChangeSlotTeam* _msg = _internal_mutable_changeslotteam();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ChangeSlotTeam)
  return _msg;
}
inline void CSRspBody::set_allocated_changeslotteam(::msg::CSRspChangeSlotTeam* changeslotteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changeslotteam_);
  }
  if (changeslotteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(changeslotteam));
    if (message_arena != submessage_arena) {
      changeslotteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changeslotteam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.changeslotteam_ = changeslotteam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ChangeSlotTeam)
}

// .msg.CSRspChangeSubModeTeam ChangeSubModeTeam = 140;
inline bool CSRspBody::_internal_has_changesubmodeteam() const {
  return this != internal_default_instance() && _impl_.changesubmodeteam_ != nullptr;
}
inline bool CSRspBody::has_changesubmodeteam() const {
  return _internal_has_changesubmodeteam();
}
inline const ::msg::CSRspChangeSubModeTeam& CSRspBody::_internal_changesubmodeteam() const {
  const ::msg::CSRspChangeSubModeTeam* p = _impl_.changesubmodeteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspChangeSubModeTeam&>(
      ::msg::_CSRspChangeSubModeTeam_default_instance_);
}
inline const ::msg::CSRspChangeSubModeTeam& CSRspBody::changesubmodeteam() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ChangeSubModeTeam)
  return _internal_changesubmodeteam();
}
inline void CSRspBody::unsafe_arena_set_allocated_changesubmodeteam(
    ::msg::CSRspChangeSubModeTeam* changesubmodeteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changesubmodeteam_);
  }
  _impl_.changesubmodeteam_ = changesubmodeteam;
  if (changesubmodeteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ChangeSubModeTeam)
}
inline ::msg::CSRspChangeSubModeTeam* CSRspBody::release_changesubmodeteam() {
  
  ::msg::CSRspChangeSubModeTeam* temp = _impl_.changesubmodeteam_;
  _impl_.changesubmodeteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspChangeSubModeTeam* CSRspBody::unsafe_arena_release_changesubmodeteam() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ChangeSubModeTeam)
  
  ::msg::CSRspChangeSubModeTeam* temp = _impl_.changesubmodeteam_;
  _impl_.changesubmodeteam_ = nullptr;
  return temp;
}
inline ::msg::CSRspChangeSubModeTeam* CSRspBody::_internal_mutable_changesubmodeteam() {
  
  if (_impl_.changesubmodeteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspChangeSubModeTeam>(GetArenaForAllocation());
    _impl_.changesubmodeteam_ = p;
  }
  return _impl_.changesubmodeteam_;
}
inline ::msg::CSRspChangeSubModeTeam* CSRspBody::mutable_changesubmodeteam() {
  ::msg::CSRspChangeSubModeTeam* _msg = _internal_mutable_changesubmodeteam();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ChangeSubModeTeam)
  return _msg;
}
inline void CSRspBody::set_allocated_changesubmodeteam(::msg::CSRspChangeSubModeTeam* changesubmodeteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changesubmodeteam_);
  }
  if (changesubmodeteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(changesubmodeteam));
    if (message_arena != submessage_arena) {
      changesubmodeteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changesubmodeteam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.changesubmodeteam_ = changesubmodeteam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ChangeSubModeTeam)
}

// .msg.CSRspConfirmChangeSlotTeam ConfirmChangeSlotTeam = 141;
inline bool CSRspBody::_internal_has_confirmchangeslotteam() const {
  return this != internal_default_instance() && _impl_.confirmchangeslotteam_ != nullptr;
}
inline bool CSRspBody::has_confirmchangeslotteam() const {
  return _internal_has_confirmchangeslotteam();
}
inline const ::msg::CSRspConfirmChangeSlotTeam& CSRspBody::_internal_confirmchangeslotteam() const {
  const ::msg::CSRspConfirmChangeSlotTeam* p = _impl_.confirmchangeslotteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspConfirmChangeSlotTeam&>(
      ::msg::_CSRspConfirmChangeSlotTeam_default_instance_);
}
inline const ::msg::CSRspConfirmChangeSlotTeam& CSRspBody::confirmchangeslotteam() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ConfirmChangeSlotTeam)
  return _internal_confirmchangeslotteam();
}
inline void CSRspBody::unsafe_arena_set_allocated_confirmchangeslotteam(
    ::msg::CSRspConfirmChangeSlotTeam* confirmchangeslotteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.confirmchangeslotteam_);
  }
  _impl_.confirmchangeslotteam_ = confirmchangeslotteam;
  if (confirmchangeslotteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ConfirmChangeSlotTeam)
}
inline ::msg::CSRspConfirmChangeSlotTeam* CSRspBody::release_confirmchangeslotteam() {
  
  ::msg::CSRspConfirmChangeSlotTeam* temp = _impl_.confirmchangeslotteam_;
  _impl_.confirmchangeslotteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspConfirmChangeSlotTeam* CSRspBody::unsafe_arena_release_confirmchangeslotteam() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ConfirmChangeSlotTeam)
  
  ::msg::CSRspConfirmChangeSlotTeam* temp = _impl_.confirmchangeslotteam_;
  _impl_.confirmchangeslotteam_ = nullptr;
  return temp;
}
inline ::msg::CSRspConfirmChangeSlotTeam* CSRspBody::_internal_mutable_confirmchangeslotteam() {
  
  if (_impl_.confirmchangeslotteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspConfirmChangeSlotTeam>(GetArenaForAllocation());
    _impl_.confirmchangeslotteam_ = p;
  }
  return _impl_.confirmchangeslotteam_;
}
inline ::msg::CSRspConfirmChangeSlotTeam* CSRspBody::mutable_confirmchangeslotteam() {
  ::msg::CSRspConfirmChangeSlotTeam* _msg = _internal_mutable_confirmchangeslotteam();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ConfirmChangeSlotTeam)
  return _msg;
}
inline void CSRspBody::set_allocated_confirmchangeslotteam(::msg::CSRspConfirmChangeSlotTeam* confirmchangeslotteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.confirmchangeslotteam_);
  }
  if (confirmchangeslotteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(confirmchangeslotteam));
    if (message_arena != submessage_arena) {
      confirmchangeslotteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, confirmchangeslotteam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.confirmchangeslotteam_ = confirmchangeslotteam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ConfirmChangeSlotTeam)
}

// .msg.CSRspPvpRoundEnd PvpRoundEnd = 142;
inline bool CSRspBody::_internal_has_pvproundend() const {
  return this != internal_default_instance() && _impl_.pvproundend_ != nullptr;
}
inline bool CSRspBody::has_pvproundend() const {
  return _internal_has_pvproundend();
}
inline const ::msg::CSRspPvpRoundEnd& CSRspBody::_internal_pvproundend() const {
  const ::msg::CSRspPvpRoundEnd* p = _impl_.pvproundend_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPvpRoundEnd&>(
      ::msg::_CSRspPvpRoundEnd_default_instance_);
}
inline const ::msg::CSRspPvpRoundEnd& CSRspBody::pvproundend() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PvpRoundEnd)
  return _internal_pvproundend();
}
inline void CSRspBody::unsafe_arena_set_allocated_pvproundend(
    ::msg::CSRspPvpRoundEnd* pvproundend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvproundend_);
  }
  _impl_.pvproundend_ = pvproundend;
  if (pvproundend) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PvpRoundEnd)
}
inline ::msg::CSRspPvpRoundEnd* CSRspBody::release_pvproundend() {
  
  ::msg::CSRspPvpRoundEnd* temp = _impl_.pvproundend_;
  _impl_.pvproundend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPvpRoundEnd* CSRspBody::unsafe_arena_release_pvproundend() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PvpRoundEnd)
  
  ::msg::CSRspPvpRoundEnd* temp = _impl_.pvproundend_;
  _impl_.pvproundend_ = nullptr;
  return temp;
}
inline ::msg::CSRspPvpRoundEnd* CSRspBody::_internal_mutable_pvproundend() {
  
  if (_impl_.pvproundend_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPvpRoundEnd>(GetArenaForAllocation());
    _impl_.pvproundend_ = p;
  }
  return _impl_.pvproundend_;
}
inline ::msg::CSRspPvpRoundEnd* CSRspBody::mutable_pvproundend() {
  ::msg::CSRspPvpRoundEnd* _msg = _internal_mutable_pvproundend();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PvpRoundEnd)
  return _msg;
}
inline void CSRspBody::set_allocated_pvproundend(::msg::CSRspPvpRoundEnd* pvproundend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvproundend_);
  }
  if (pvproundend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvproundend));
    if (message_arena != submessage_arena) {
      pvproundend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvproundend, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvproundend_ = pvproundend;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PvpRoundEnd)
}

// .msg.CSRspPvp Pvp = 143;
inline bool CSRspBody::_internal_has_pvp() const {
  return this != internal_default_instance() && _impl_.pvp_ != nullptr;
}
inline bool CSRspBody::has_pvp() const {
  return _internal_has_pvp();
}
inline const ::msg::CSRspPvp& CSRspBody::_internal_pvp() const {
  const ::msg::CSRspPvp* p = _impl_.pvp_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPvp&>(
      ::msg::_CSRspPvp_default_instance_);
}
inline const ::msg::CSRspPvp& CSRspBody::pvp() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.Pvp)
  return _internal_pvp();
}
inline void CSRspBody::unsafe_arena_set_allocated_pvp(
    ::msg::CSRspPvp* pvp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvp_);
  }
  _impl_.pvp_ = pvp;
  if (pvp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.Pvp)
}
inline ::msg::CSRspPvp* CSRspBody::release_pvp() {
  
  ::msg::CSRspPvp* temp = _impl_.pvp_;
  _impl_.pvp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPvp* CSRspBody::unsafe_arena_release_pvp() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.Pvp)
  
  ::msg::CSRspPvp* temp = _impl_.pvp_;
  _impl_.pvp_ = nullptr;
  return temp;
}
inline ::msg::CSRspPvp* CSRspBody::_internal_mutable_pvp() {
  
  if (_impl_.pvp_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPvp>(GetArenaForAllocation());
    _impl_.pvp_ = p;
  }
  return _impl_.pvp_;
}
inline ::msg::CSRspPvp* CSRspBody::mutable_pvp() {
  ::msg::CSRspPvp* _msg = _internal_mutable_pvp();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.Pvp)
  return _msg;
}
inline void CSRspBody::set_allocated_pvp(::msg::CSRspPvp* pvp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvp_);
  }
  if (pvp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvp));
    if (message_arena != submessage_arena) {
      pvp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvp_ = pvp;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.Pvp)
}

// .msg.CSRspTeamReady TeamReady = 144;
inline bool CSRspBody::_internal_has_teamready() const {
  return this != internal_default_instance() && _impl_.teamready_ != nullptr;
}
inline bool CSRspBody::has_teamready() const {
  return _internal_has_teamready();
}
inline const ::msg::CSRspTeamReady& CSRspBody::_internal_teamready() const {
  const ::msg::CSRspTeamReady* p = _impl_.teamready_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspTeamReady&>(
      ::msg::_CSRspTeamReady_default_instance_);
}
inline const ::msg::CSRspTeamReady& CSRspBody::teamready() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.TeamReady)
  return _internal_teamready();
}
inline void CSRspBody::unsafe_arena_set_allocated_teamready(
    ::msg::CSRspTeamReady* teamready) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamready_);
  }
  _impl_.teamready_ = teamready;
  if (teamready) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.TeamReady)
}
inline ::msg::CSRspTeamReady* CSRspBody::release_teamready() {
  
  ::msg::CSRspTeamReady* temp = _impl_.teamready_;
  _impl_.teamready_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspTeamReady* CSRspBody::unsafe_arena_release_teamready() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.TeamReady)
  
  ::msg::CSRspTeamReady* temp = _impl_.teamready_;
  _impl_.teamready_ = nullptr;
  return temp;
}
inline ::msg::CSRspTeamReady* CSRspBody::_internal_mutable_teamready() {
  
  if (_impl_.teamready_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspTeamReady>(GetArenaForAllocation());
    _impl_.teamready_ = p;
  }
  return _impl_.teamready_;
}
inline ::msg::CSRspTeamReady* CSRspBody::mutable_teamready() {
  ::msg::CSRspTeamReady* _msg = _internal_mutable_teamready();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.TeamReady)
  return _msg;
}
inline void CSRspBody::set_allocated_teamready(::msg::CSRspTeamReady* teamready) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamready_);
  }
  if (teamready) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teamready));
    if (message_arena != submessage_arena) {
      teamready = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamready, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.teamready_ = teamready;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.TeamReady)
}

// .msg.CSRspBindOldBusinessPlayer BindOldBusinessPlayer = 145;
inline bool CSRspBody::_internal_has_bindoldbusinessplayer() const {
  return this != internal_default_instance() && _impl_.bindoldbusinessplayer_ != nullptr;
}
inline bool CSRspBody::has_bindoldbusinessplayer() const {
  return _internal_has_bindoldbusinessplayer();
}
inline const ::msg::CSRspBindOldBusinessPlayer& CSRspBody::_internal_bindoldbusinessplayer() const {
  const ::msg::CSRspBindOldBusinessPlayer* p = _impl_.bindoldbusinessplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspBindOldBusinessPlayer&>(
      ::msg::_CSRspBindOldBusinessPlayer_default_instance_);
}
inline const ::msg::CSRspBindOldBusinessPlayer& CSRspBody::bindoldbusinessplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.BindOldBusinessPlayer)
  return _internal_bindoldbusinessplayer();
}
inline void CSRspBody::unsafe_arena_set_allocated_bindoldbusinessplayer(
    ::msg::CSRspBindOldBusinessPlayer* bindoldbusinessplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindoldbusinessplayer_);
  }
  _impl_.bindoldbusinessplayer_ = bindoldbusinessplayer;
  if (bindoldbusinessplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.BindOldBusinessPlayer)
}
inline ::msg::CSRspBindOldBusinessPlayer* CSRspBody::release_bindoldbusinessplayer() {
  
  ::msg::CSRspBindOldBusinessPlayer* temp = _impl_.bindoldbusinessplayer_;
  _impl_.bindoldbusinessplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspBindOldBusinessPlayer* CSRspBody::unsafe_arena_release_bindoldbusinessplayer() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.BindOldBusinessPlayer)
  
  ::msg::CSRspBindOldBusinessPlayer* temp = _impl_.bindoldbusinessplayer_;
  _impl_.bindoldbusinessplayer_ = nullptr;
  return temp;
}
inline ::msg::CSRspBindOldBusinessPlayer* CSRspBody::_internal_mutable_bindoldbusinessplayer() {
  
  if (_impl_.bindoldbusinessplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspBindOldBusinessPlayer>(GetArenaForAllocation());
    _impl_.bindoldbusinessplayer_ = p;
  }
  return _impl_.bindoldbusinessplayer_;
}
inline ::msg::CSRspBindOldBusinessPlayer* CSRspBody::mutable_bindoldbusinessplayer() {
  ::msg::CSRspBindOldBusinessPlayer* _msg = _internal_mutable_bindoldbusinessplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.BindOldBusinessPlayer)
  return _msg;
}
inline void CSRspBody::set_allocated_bindoldbusinessplayer(::msg::CSRspBindOldBusinessPlayer* bindoldbusinessplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindoldbusinessplayer_);
  }
  if (bindoldbusinessplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bindoldbusinessplayer));
    if (message_arena != submessage_arena) {
      bindoldbusinessplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bindoldbusinessplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bindoldbusinessplayer_ = bindoldbusinessplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.BindOldBusinessPlayer)
}

// .msg.CSRspTranslate Translate = 146;
inline bool CSRspBody::_internal_has_translate() const {
  return this != internal_default_instance() && _impl_.translate_ != nullptr;
}
inline bool CSRspBody::has_translate() const {
  return _internal_has_translate();
}
inline const ::msg::CSRspTranslate& CSRspBody::_internal_translate() const {
  const ::msg::CSRspTranslate* p = _impl_.translate_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspTranslate&>(
      ::msg::_CSRspTranslate_default_instance_);
}
inline const ::msg::CSRspTranslate& CSRspBody::translate() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.Translate)
  return _internal_translate();
}
inline void CSRspBody::unsafe_arena_set_allocated_translate(
    ::msg::CSRspTranslate* translate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translate_);
  }
  _impl_.translate_ = translate;
  if (translate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.Translate)
}
inline ::msg::CSRspTranslate* CSRspBody::release_translate() {
  
  ::msg::CSRspTranslate* temp = _impl_.translate_;
  _impl_.translate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspTranslate* CSRspBody::unsafe_arena_release_translate() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.Translate)
  
  ::msg::CSRspTranslate* temp = _impl_.translate_;
  _impl_.translate_ = nullptr;
  return temp;
}
inline ::msg::CSRspTranslate* CSRspBody::_internal_mutable_translate() {
  
  if (_impl_.translate_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspTranslate>(GetArenaForAllocation());
    _impl_.translate_ = p;
  }
  return _impl_.translate_;
}
inline ::msg::CSRspTranslate* CSRspBody::mutable_translate() {
  ::msg::CSRspTranslate* _msg = _internal_mutable_translate();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.Translate)
  return _msg;
}
inline void CSRspBody::set_allocated_translate(::msg::CSRspTranslate* translate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translate_);
  }
  if (translate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translate));
    if (message_arena != submessage_arena) {
      translate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.translate_ = translate;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.Translate)
}

// .msg.CSRspSubmitQuestionnaire SubmitQuestionnaire = 147;
inline bool CSRspBody::_internal_has_submitquestionnaire() const {
  return this != internal_default_instance() && _impl_.submitquestionnaire_ != nullptr;
}
inline bool CSRspBody::has_submitquestionnaire() const {
  return _internal_has_submitquestionnaire();
}
inline const ::msg::CSRspSubmitQuestionnaire& CSRspBody::_internal_submitquestionnaire() const {
  const ::msg::CSRspSubmitQuestionnaire* p = _impl_.submitquestionnaire_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSubmitQuestionnaire&>(
      ::msg::_CSRspSubmitQuestionnaire_default_instance_);
}
inline const ::msg::CSRspSubmitQuestionnaire& CSRspBody::submitquestionnaire() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SubmitQuestionnaire)
  return _internal_submitquestionnaire();
}
inline void CSRspBody::unsafe_arena_set_allocated_submitquestionnaire(
    ::msg::CSRspSubmitQuestionnaire* submitquestionnaire) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submitquestionnaire_);
  }
  _impl_.submitquestionnaire_ = submitquestionnaire;
  if (submitquestionnaire) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SubmitQuestionnaire)
}
inline ::msg::CSRspSubmitQuestionnaire* CSRspBody::release_submitquestionnaire() {
  
  ::msg::CSRspSubmitQuestionnaire* temp = _impl_.submitquestionnaire_;
  _impl_.submitquestionnaire_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSubmitQuestionnaire* CSRspBody::unsafe_arena_release_submitquestionnaire() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SubmitQuestionnaire)
  
  ::msg::CSRspSubmitQuestionnaire* temp = _impl_.submitquestionnaire_;
  _impl_.submitquestionnaire_ = nullptr;
  return temp;
}
inline ::msg::CSRspSubmitQuestionnaire* CSRspBody::_internal_mutable_submitquestionnaire() {
  
  if (_impl_.submitquestionnaire_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSubmitQuestionnaire>(GetArenaForAllocation());
    _impl_.submitquestionnaire_ = p;
  }
  return _impl_.submitquestionnaire_;
}
inline ::msg::CSRspSubmitQuestionnaire* CSRspBody::mutable_submitquestionnaire() {
  ::msg::CSRspSubmitQuestionnaire* _msg = _internal_mutable_submitquestionnaire();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SubmitQuestionnaire)
  return _msg;
}
inline void CSRspBody::set_allocated_submitquestionnaire(::msg::CSRspSubmitQuestionnaire* submitquestionnaire) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submitquestionnaire_);
  }
  if (submitquestionnaire) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submitquestionnaire));
    if (message_arena != submessage_arena) {
      submitquestionnaire = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submitquestionnaire, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.submitquestionnaire_ = submitquestionnaire;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SubmitQuestionnaire)
}

// .msg.CSRspCancelChangeSlot CancelChangeSlot = 148;
inline bool CSRspBody::_internal_has_cancelchangeslot() const {
  return this != internal_default_instance() && _impl_.cancelchangeslot_ != nullptr;
}
inline bool CSRspBody::has_cancelchangeslot() const {
  return _internal_has_cancelchangeslot();
}
inline const ::msg::CSRspCancelChangeSlot& CSRspBody::_internal_cancelchangeslot() const {
  const ::msg::CSRspCancelChangeSlot* p = _impl_.cancelchangeslot_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspCancelChangeSlot&>(
      ::msg::_CSRspCancelChangeSlot_default_instance_);
}
inline const ::msg::CSRspCancelChangeSlot& CSRspBody::cancelchangeslot() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.CancelChangeSlot)
  return _internal_cancelchangeslot();
}
inline void CSRspBody::unsafe_arena_set_allocated_cancelchangeslot(
    ::msg::CSRspCancelChangeSlot* cancelchangeslot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cancelchangeslot_);
  }
  _impl_.cancelchangeslot_ = cancelchangeslot;
  if (cancelchangeslot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.CancelChangeSlot)
}
inline ::msg::CSRspCancelChangeSlot* CSRspBody::release_cancelchangeslot() {
  
  ::msg::CSRspCancelChangeSlot* temp = _impl_.cancelchangeslot_;
  _impl_.cancelchangeslot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspCancelChangeSlot* CSRspBody::unsafe_arena_release_cancelchangeslot() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.CancelChangeSlot)
  
  ::msg::CSRspCancelChangeSlot* temp = _impl_.cancelchangeslot_;
  _impl_.cancelchangeslot_ = nullptr;
  return temp;
}
inline ::msg::CSRspCancelChangeSlot* CSRspBody::_internal_mutable_cancelchangeslot() {
  
  if (_impl_.cancelchangeslot_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspCancelChangeSlot>(GetArenaForAllocation());
    _impl_.cancelchangeslot_ = p;
  }
  return _impl_.cancelchangeslot_;
}
inline ::msg::CSRspCancelChangeSlot* CSRspBody::mutable_cancelchangeslot() {
  ::msg::CSRspCancelChangeSlot* _msg = _internal_mutable_cancelchangeslot();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.CancelChangeSlot)
  return _msg;
}
inline void CSRspBody::set_allocated_cancelchangeslot(::msg::CSRspCancelChangeSlot* cancelchangeslot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cancelchangeslot_);
  }
  if (cancelchangeslot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancelchangeslot));
    if (message_arena != submessage_arena) {
      cancelchangeslot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancelchangeslot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cancelchangeslot_ = cancelchangeslot;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.CancelChangeSlot)
}

// .msg.CSRspSetChessSkin SetChessSkin = 149;
inline bool CSRspBody::_internal_has_setchessskin() const {
  return this != internal_default_instance() && _impl_.setchessskin_ != nullptr;
}
inline bool CSRspBody::has_setchessskin() const {
  return _internal_has_setchessskin();
}
inline const ::msg::CSRspSetChessSkin& CSRspBody::_internal_setchessskin() const {
  const ::msg::CSRspSetChessSkin* p = _impl_.setchessskin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSetChessSkin&>(
      ::msg::_CSRspSetChessSkin_default_instance_);
}
inline const ::msg::CSRspSetChessSkin& CSRspBody::setchessskin() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SetChessSkin)
  return _internal_setchessskin();
}
inline void CSRspBody::unsafe_arena_set_allocated_setchessskin(
    ::msg::CSRspSetChessSkin* setchessskin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setchessskin_);
  }
  _impl_.setchessskin_ = setchessskin;
  if (setchessskin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SetChessSkin)
}
inline ::msg::CSRspSetChessSkin* CSRspBody::release_setchessskin() {
  
  ::msg::CSRspSetChessSkin* temp = _impl_.setchessskin_;
  _impl_.setchessskin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSetChessSkin* CSRspBody::unsafe_arena_release_setchessskin() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SetChessSkin)
  
  ::msg::CSRspSetChessSkin* temp = _impl_.setchessskin_;
  _impl_.setchessskin_ = nullptr;
  return temp;
}
inline ::msg::CSRspSetChessSkin* CSRspBody::_internal_mutable_setchessskin() {
  
  if (_impl_.setchessskin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSetChessSkin>(GetArenaForAllocation());
    _impl_.setchessskin_ = p;
  }
  return _impl_.setchessskin_;
}
inline ::msg::CSRspSetChessSkin* CSRspBody::mutable_setchessskin() {
  ::msg::CSRspSetChessSkin* _msg = _internal_mutable_setchessskin();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SetChessSkin)
  return _msg;
}
inline void CSRspBody::set_allocated_setchessskin(::msg::CSRspSetChessSkin* setchessskin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setchessskin_);
  }
  if (setchessskin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setchessskin));
    if (message_arena != submessage_arena) {
      setchessskin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setchessskin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setchessskin_ = setchessskin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SetChessSkin)
}

// .msg.CSRspUnsetChessSkin UnsetChessSkin = 150;
inline bool CSRspBody::_internal_has_unsetchessskin() const {
  return this != internal_default_instance() && _impl_.unsetchessskin_ != nullptr;
}
inline bool CSRspBody::has_unsetchessskin() const {
  return _internal_has_unsetchessskin();
}
inline const ::msg::CSRspUnsetChessSkin& CSRspBody::_internal_unsetchessskin() const {
  const ::msg::CSRspUnsetChessSkin* p = _impl_.unsetchessskin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUnsetChessSkin&>(
      ::msg::_CSRspUnsetChessSkin_default_instance_);
}
inline const ::msg::CSRspUnsetChessSkin& CSRspBody::unsetchessskin() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UnsetChessSkin)
  return _internal_unsetchessskin();
}
inline void CSRspBody::unsafe_arena_set_allocated_unsetchessskin(
    ::msg::CSRspUnsetChessSkin* unsetchessskin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetchessskin_);
  }
  _impl_.unsetchessskin_ = unsetchessskin;
  if (unsetchessskin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UnsetChessSkin)
}
inline ::msg::CSRspUnsetChessSkin* CSRspBody::release_unsetchessskin() {
  
  ::msg::CSRspUnsetChessSkin* temp = _impl_.unsetchessskin_;
  _impl_.unsetchessskin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUnsetChessSkin* CSRspBody::unsafe_arena_release_unsetchessskin() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UnsetChessSkin)
  
  ::msg::CSRspUnsetChessSkin* temp = _impl_.unsetchessskin_;
  _impl_.unsetchessskin_ = nullptr;
  return temp;
}
inline ::msg::CSRspUnsetChessSkin* CSRspBody::_internal_mutable_unsetchessskin() {
  
  if (_impl_.unsetchessskin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUnsetChessSkin>(GetArenaForAllocation());
    _impl_.unsetchessskin_ = p;
  }
  return _impl_.unsetchessskin_;
}
inline ::msg::CSRspUnsetChessSkin* CSRspBody::mutable_unsetchessskin() {
  ::msg::CSRspUnsetChessSkin* _msg = _internal_mutable_unsetchessskin();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UnsetChessSkin)
  return _msg;
}
inline void CSRspBody::set_allocated_unsetchessskin(::msg::CSRspUnsetChessSkin* unsetchessskin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetchessskin_);
  }
  if (unsetchessskin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unsetchessskin));
    if (message_arena != submessage_arena) {
      unsetchessskin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsetchessskin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unsetchessskin_ = unsetchessskin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UnsetChessSkin)
}

// .msg.CSRspCompose Compose = 151;
inline bool CSRspBody::_internal_has_compose() const {
  return this != internal_default_instance() && _impl_.compose_ != nullptr;
}
inline bool CSRspBody::has_compose() const {
  return _internal_has_compose();
}
inline const ::msg::CSRspCompose& CSRspBody::_internal_compose() const {
  const ::msg::CSRspCompose* p = _impl_.compose_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspCompose&>(
      ::msg::_CSRspCompose_default_instance_);
}
inline const ::msg::CSRspCompose& CSRspBody::compose() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.Compose)
  return _internal_compose();
}
inline void CSRspBody::unsafe_arena_set_allocated_compose(
    ::msg::CSRspCompose* compose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.compose_);
  }
  _impl_.compose_ = compose;
  if (compose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.Compose)
}
inline ::msg::CSRspCompose* CSRspBody::release_compose() {
  
  ::msg::CSRspCompose* temp = _impl_.compose_;
  _impl_.compose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspCompose* CSRspBody::unsafe_arena_release_compose() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.Compose)
  
  ::msg::CSRspCompose* temp = _impl_.compose_;
  _impl_.compose_ = nullptr;
  return temp;
}
inline ::msg::CSRspCompose* CSRspBody::_internal_mutable_compose() {
  
  if (_impl_.compose_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspCompose>(GetArenaForAllocation());
    _impl_.compose_ = p;
  }
  return _impl_.compose_;
}
inline ::msg::CSRspCompose* CSRspBody::mutable_compose() {
  ::msg::CSRspCompose* _msg = _internal_mutable_compose();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.Compose)
  return _msg;
}
inline void CSRspBody::set_allocated_compose(::msg::CSRspCompose* compose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.compose_);
  }
  if (compose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compose));
    if (message_arena != submessage_arena) {
      compose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.compose_ = compose;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.Compose)
}

// .msg.CSRspVideo Video = 152;
inline bool CSRspBody::_internal_has_video() const {
  return this != internal_default_instance() && _impl_.video_ != nullptr;
}
inline bool CSRspBody::has_video() const {
  return _internal_has_video();
}
inline const ::msg::CSRspVideo& CSRspBody::_internal_video() const {
  const ::msg::CSRspVideo* p = _impl_.video_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspVideo&>(
      ::msg::_CSRspVideo_default_instance_);
}
inline const ::msg::CSRspVideo& CSRspBody::video() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.Video)
  return _internal_video();
}
inline void CSRspBody::unsafe_arena_set_allocated_video(
    ::msg::CSRspVideo* video) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.video_);
  }
  _impl_.video_ = video;
  if (video) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.Video)
}
inline ::msg::CSRspVideo* CSRspBody::release_video() {
  
  ::msg::CSRspVideo* temp = _impl_.video_;
  _impl_.video_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspVideo* CSRspBody::unsafe_arena_release_video() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.Video)
  
  ::msg::CSRspVideo* temp = _impl_.video_;
  _impl_.video_ = nullptr;
  return temp;
}
inline ::msg::CSRspVideo* CSRspBody::_internal_mutable_video() {
  
  if (_impl_.video_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspVideo>(GetArenaForAllocation());
    _impl_.video_ = p;
  }
  return _impl_.video_;
}
inline ::msg::CSRspVideo* CSRspBody::mutable_video() {
  ::msg::CSRspVideo* _msg = _internal_mutable_video();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.Video)
  return _msg;
}
inline void CSRspBody::set_allocated_video(::msg::CSRspVideo* video) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.video_);
  }
  if (video) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(video));
    if (message_arena != submessage_arena) {
      video = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.video_ = video;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.Video)
}

// .msg.CSRspOffHelpReddot OffHelpReddot = 153;
inline bool CSRspBody::_internal_has_offhelpreddot() const {
  return this != internal_default_instance() && _impl_.offhelpreddot_ != nullptr;
}
inline bool CSRspBody::has_offhelpreddot() const {
  return _internal_has_offhelpreddot();
}
inline const ::msg::CSRspOffHelpReddot& CSRspBody::_internal_offhelpreddot() const {
  const ::msg::CSRspOffHelpReddot* p = _impl_.offhelpreddot_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspOffHelpReddot&>(
      ::msg::_CSRspOffHelpReddot_default_instance_);
}
inline const ::msg::CSRspOffHelpReddot& CSRspBody::offhelpreddot() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.OffHelpReddot)
  return _internal_offhelpreddot();
}
inline void CSRspBody::unsafe_arena_set_allocated_offhelpreddot(
    ::msg::CSRspOffHelpReddot* offhelpreddot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offhelpreddot_);
  }
  _impl_.offhelpreddot_ = offhelpreddot;
  if (offhelpreddot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.OffHelpReddot)
}
inline ::msg::CSRspOffHelpReddot* CSRspBody::release_offhelpreddot() {
  
  ::msg::CSRspOffHelpReddot* temp = _impl_.offhelpreddot_;
  _impl_.offhelpreddot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspOffHelpReddot* CSRspBody::unsafe_arena_release_offhelpreddot() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.OffHelpReddot)
  
  ::msg::CSRspOffHelpReddot* temp = _impl_.offhelpreddot_;
  _impl_.offhelpreddot_ = nullptr;
  return temp;
}
inline ::msg::CSRspOffHelpReddot* CSRspBody::_internal_mutable_offhelpreddot() {
  
  if (_impl_.offhelpreddot_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspOffHelpReddot>(GetArenaForAllocation());
    _impl_.offhelpreddot_ = p;
  }
  return _impl_.offhelpreddot_;
}
inline ::msg::CSRspOffHelpReddot* CSRspBody::mutable_offhelpreddot() {
  ::msg::CSRspOffHelpReddot* _msg = _internal_mutable_offhelpreddot();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.OffHelpReddot)
  return _msg;
}
inline void CSRspBody::set_allocated_offhelpreddot(::msg::CSRspOffHelpReddot* offhelpreddot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offhelpreddot_);
  }
  if (offhelpreddot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offhelpreddot));
    if (message_arena != submessage_arena) {
      offhelpreddot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offhelpreddot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offhelpreddot_ = offhelpreddot;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.OffHelpReddot)
}

// .msg.CSRspChangeLanguage ChangeLanguage = 154;
inline bool CSRspBody::_internal_has_changelanguage() const {
  return this != internal_default_instance() && _impl_.changelanguage_ != nullptr;
}
inline bool CSRspBody::has_changelanguage() const {
  return _internal_has_changelanguage();
}
inline const ::msg::CSRspChangeLanguage& CSRspBody::_internal_changelanguage() const {
  const ::msg::CSRspChangeLanguage* p = _impl_.changelanguage_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspChangeLanguage&>(
      ::msg::_CSRspChangeLanguage_default_instance_);
}
inline const ::msg::CSRspChangeLanguage& CSRspBody::changelanguage() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ChangeLanguage)
  return _internal_changelanguage();
}
inline void CSRspBody::unsafe_arena_set_allocated_changelanguage(
    ::msg::CSRspChangeLanguage* changelanguage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changelanguage_);
  }
  _impl_.changelanguage_ = changelanguage;
  if (changelanguage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ChangeLanguage)
}
inline ::msg::CSRspChangeLanguage* CSRspBody::release_changelanguage() {
  
  ::msg::CSRspChangeLanguage* temp = _impl_.changelanguage_;
  _impl_.changelanguage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspChangeLanguage* CSRspBody::unsafe_arena_release_changelanguage() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ChangeLanguage)
  
  ::msg::CSRspChangeLanguage* temp = _impl_.changelanguage_;
  _impl_.changelanguage_ = nullptr;
  return temp;
}
inline ::msg::CSRspChangeLanguage* CSRspBody::_internal_mutable_changelanguage() {
  
  if (_impl_.changelanguage_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspChangeLanguage>(GetArenaForAllocation());
    _impl_.changelanguage_ = p;
  }
  return _impl_.changelanguage_;
}
inline ::msg::CSRspChangeLanguage* CSRspBody::mutable_changelanguage() {
  ::msg::CSRspChangeLanguage* _msg = _internal_mutable_changelanguage();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ChangeLanguage)
  return _msg;
}
inline void CSRspBody::set_allocated_changelanguage(::msg::CSRspChangeLanguage* changelanguage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changelanguage_);
  }
  if (changelanguage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(changelanguage));
    if (message_arena != submessage_arena) {
      changelanguage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changelanguage, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.changelanguage_ = changelanguage;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ChangeLanguage)
}

// .msg.CSRspSetProvince SetProvince = 155;
inline bool CSRspBody::_internal_has_setprovince() const {
  return this != internal_default_instance() && _impl_.setprovince_ != nullptr;
}
inline bool CSRspBody::has_setprovince() const {
  return _internal_has_setprovince();
}
inline const ::msg::CSRspSetProvince& CSRspBody::_internal_setprovince() const {
  const ::msg::CSRspSetProvince* p = _impl_.setprovince_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSetProvince&>(
      ::msg::_CSRspSetProvince_default_instance_);
}
inline const ::msg::CSRspSetProvince& CSRspBody::setprovince() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SetProvince)
  return _internal_setprovince();
}
inline void CSRspBody::unsafe_arena_set_allocated_setprovince(
    ::msg::CSRspSetProvince* setprovince) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setprovince_);
  }
  _impl_.setprovince_ = setprovince;
  if (setprovince) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SetProvince)
}
inline ::msg::CSRspSetProvince* CSRspBody::release_setprovince() {
  
  ::msg::CSRspSetProvince* temp = _impl_.setprovince_;
  _impl_.setprovince_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSetProvince* CSRspBody::unsafe_arena_release_setprovince() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SetProvince)
  
  ::msg::CSRspSetProvince* temp = _impl_.setprovince_;
  _impl_.setprovince_ = nullptr;
  return temp;
}
inline ::msg::CSRspSetProvince* CSRspBody::_internal_mutable_setprovince() {
  
  if (_impl_.setprovince_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSetProvince>(GetArenaForAllocation());
    _impl_.setprovince_ = p;
  }
  return _impl_.setprovince_;
}
inline ::msg::CSRspSetProvince* CSRspBody::mutable_setprovince() {
  ::msg::CSRspSetProvince* _msg = _internal_mutable_setprovince();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SetProvince)
  return _msg;
}
inline void CSRspBody::set_allocated_setprovince(::msg::CSRspSetProvince* setprovince) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setprovince_);
  }
  if (setprovince) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setprovince));
    if (message_arena != submessage_arena) {
      setprovince = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setprovince, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setprovince_ = setprovince;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SetProvince)
}

// .msg.CSRspLongyuanVoice LongyuanVoice = 156;
inline bool CSRspBody::_internal_has_longyuanvoice() const {
  return this != internal_default_instance() && _impl_.longyuanvoice_ != nullptr;
}
inline bool CSRspBody::has_longyuanvoice() const {
  return _internal_has_longyuanvoice();
}
inline const ::msg::CSRspLongyuanVoice& CSRspBody::_internal_longyuanvoice() const {
  const ::msg::CSRspLongyuanVoice* p = _impl_.longyuanvoice_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspLongyuanVoice&>(
      ::msg::_CSRspLongyuanVoice_default_instance_);
}
inline const ::msg::CSRspLongyuanVoice& CSRspBody::longyuanvoice() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.LongyuanVoice)
  return _internal_longyuanvoice();
}
inline void CSRspBody::unsafe_arena_set_allocated_longyuanvoice(
    ::msg::CSRspLongyuanVoice* longyuanvoice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.longyuanvoice_);
  }
  _impl_.longyuanvoice_ = longyuanvoice;
  if (longyuanvoice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.LongyuanVoice)
}
inline ::msg::CSRspLongyuanVoice* CSRspBody::release_longyuanvoice() {
  
  ::msg::CSRspLongyuanVoice* temp = _impl_.longyuanvoice_;
  _impl_.longyuanvoice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspLongyuanVoice* CSRspBody::unsafe_arena_release_longyuanvoice() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.LongyuanVoice)
  
  ::msg::CSRspLongyuanVoice* temp = _impl_.longyuanvoice_;
  _impl_.longyuanvoice_ = nullptr;
  return temp;
}
inline ::msg::CSRspLongyuanVoice* CSRspBody::_internal_mutable_longyuanvoice() {
  
  if (_impl_.longyuanvoice_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspLongyuanVoice>(GetArenaForAllocation());
    _impl_.longyuanvoice_ = p;
  }
  return _impl_.longyuanvoice_;
}
inline ::msg::CSRspLongyuanVoice* CSRspBody::mutable_longyuanvoice() {
  ::msg::CSRspLongyuanVoice* _msg = _internal_mutable_longyuanvoice();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.LongyuanVoice)
  return _msg;
}
inline void CSRspBody::set_allocated_longyuanvoice(::msg::CSRspLongyuanVoice* longyuanvoice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.longyuanvoice_);
  }
  if (longyuanvoice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(longyuanvoice));
    if (message_arena != submessage_arena) {
      longyuanvoice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, longyuanvoice, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.longyuanvoice_ = longyuanvoice;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.LongyuanVoice)
}

// .msg.CSRspEnrollTournament EnrollTournament = 157;
inline bool CSRspBody::_internal_has_enrolltournament() const {
  return this != internal_default_instance() && _impl_.enrolltournament_ != nullptr;
}
inline bool CSRspBody::has_enrolltournament() const {
  return _internal_has_enrolltournament();
}
inline const ::msg::CSRspEnrollTournament& CSRspBody::_internal_enrolltournament() const {
  const ::msg::CSRspEnrollTournament* p = _impl_.enrolltournament_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspEnrollTournament&>(
      ::msg::_CSRspEnrollTournament_default_instance_);
}
inline const ::msg::CSRspEnrollTournament& CSRspBody::enrolltournament() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.EnrollTournament)
  return _internal_enrolltournament();
}
inline void CSRspBody::unsafe_arena_set_allocated_enrolltournament(
    ::msg::CSRspEnrollTournament* enrolltournament) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enrolltournament_);
  }
  _impl_.enrolltournament_ = enrolltournament;
  if (enrolltournament) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.EnrollTournament)
}
inline ::msg::CSRspEnrollTournament* CSRspBody::release_enrolltournament() {
  
  ::msg::CSRspEnrollTournament* temp = _impl_.enrolltournament_;
  _impl_.enrolltournament_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspEnrollTournament* CSRspBody::unsafe_arena_release_enrolltournament() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.EnrollTournament)
  
  ::msg::CSRspEnrollTournament* temp = _impl_.enrolltournament_;
  _impl_.enrolltournament_ = nullptr;
  return temp;
}
inline ::msg::CSRspEnrollTournament* CSRspBody::_internal_mutable_enrolltournament() {
  
  if (_impl_.enrolltournament_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspEnrollTournament>(GetArenaForAllocation());
    _impl_.enrolltournament_ = p;
  }
  return _impl_.enrolltournament_;
}
inline ::msg::CSRspEnrollTournament* CSRspBody::mutable_enrolltournament() {
  ::msg::CSRspEnrollTournament* _msg = _internal_mutable_enrolltournament();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.EnrollTournament)
  return _msg;
}
inline void CSRspBody::set_allocated_enrolltournament(::msg::CSRspEnrollTournament* enrolltournament) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enrolltournament_);
  }
  if (enrolltournament) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enrolltournament));
    if (message_arena != submessage_arena) {
      enrolltournament = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enrolltournament, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.enrolltournament_ = enrolltournament;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.EnrollTournament)
}

// .msg.CSRspJoinTournamentRoom JoinTournamentRoom = 158;
inline bool CSRspBody::_internal_has_jointournamentroom() const {
  return this != internal_default_instance() && _impl_.jointournamentroom_ != nullptr;
}
inline bool CSRspBody::has_jointournamentroom() const {
  return _internal_has_jointournamentroom();
}
inline const ::msg::CSRspJoinTournamentRoom& CSRspBody::_internal_jointournamentroom() const {
  const ::msg::CSRspJoinTournamentRoom* p = _impl_.jointournamentroom_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspJoinTournamentRoom&>(
      ::msg::_CSRspJoinTournamentRoom_default_instance_);
}
inline const ::msg::CSRspJoinTournamentRoom& CSRspBody::jointournamentroom() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.JoinTournamentRoom)
  return _internal_jointournamentroom();
}
inline void CSRspBody::unsafe_arena_set_allocated_jointournamentroom(
    ::msg::CSRspJoinTournamentRoom* jointournamentroom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jointournamentroom_);
  }
  _impl_.jointournamentroom_ = jointournamentroom;
  if (jointournamentroom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.JoinTournamentRoom)
}
inline ::msg::CSRspJoinTournamentRoom* CSRspBody::release_jointournamentroom() {
  
  ::msg::CSRspJoinTournamentRoom* temp = _impl_.jointournamentroom_;
  _impl_.jointournamentroom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspJoinTournamentRoom* CSRspBody::unsafe_arena_release_jointournamentroom() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.JoinTournamentRoom)
  
  ::msg::CSRspJoinTournamentRoom* temp = _impl_.jointournamentroom_;
  _impl_.jointournamentroom_ = nullptr;
  return temp;
}
inline ::msg::CSRspJoinTournamentRoom* CSRspBody::_internal_mutable_jointournamentroom() {
  
  if (_impl_.jointournamentroom_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspJoinTournamentRoom>(GetArenaForAllocation());
    _impl_.jointournamentroom_ = p;
  }
  return _impl_.jointournamentroom_;
}
inline ::msg::CSRspJoinTournamentRoom* CSRspBody::mutable_jointournamentroom() {
  ::msg::CSRspJoinTournamentRoom* _msg = _internal_mutable_jointournamentroom();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.JoinTournamentRoom)
  return _msg;
}
inline void CSRspBody::set_allocated_jointournamentroom(::msg::CSRspJoinTournamentRoom* jointournamentroom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jointournamentroom_);
  }
  if (jointournamentroom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jointournamentroom));
    if (message_arena != submessage_arena) {
      jointournamentroom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jointournamentroom, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.jointournamentroom_ = jointournamentroom;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.JoinTournamentRoom)
}

// .msg.CSRspTournamentPointAward TournamentPointAward = 159;
inline bool CSRspBody::_internal_has_tournamentpointaward() const {
  return this != internal_default_instance() && _impl_.tournamentpointaward_ != nullptr;
}
inline bool CSRspBody::has_tournamentpointaward() const {
  return _internal_has_tournamentpointaward();
}
inline const ::msg::CSRspTournamentPointAward& CSRspBody::_internal_tournamentpointaward() const {
  const ::msg::CSRspTournamentPointAward* p = _impl_.tournamentpointaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspTournamentPointAward&>(
      ::msg::_CSRspTournamentPointAward_default_instance_);
}
inline const ::msg::CSRspTournamentPointAward& CSRspBody::tournamentpointaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.TournamentPointAward)
  return _internal_tournamentpointaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_tournamentpointaward(
    ::msg::CSRspTournamentPointAward* tournamentpointaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentpointaward_);
  }
  _impl_.tournamentpointaward_ = tournamentpointaward;
  if (tournamentpointaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.TournamentPointAward)
}
inline ::msg::CSRspTournamentPointAward* CSRspBody::release_tournamentpointaward() {
  
  ::msg::CSRspTournamentPointAward* temp = _impl_.tournamentpointaward_;
  _impl_.tournamentpointaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspTournamentPointAward* CSRspBody::unsafe_arena_release_tournamentpointaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.TournamentPointAward)
  
  ::msg::CSRspTournamentPointAward* temp = _impl_.tournamentpointaward_;
  _impl_.tournamentpointaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspTournamentPointAward* CSRspBody::_internal_mutable_tournamentpointaward() {
  
  if (_impl_.tournamentpointaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspTournamentPointAward>(GetArenaForAllocation());
    _impl_.tournamentpointaward_ = p;
  }
  return _impl_.tournamentpointaward_;
}
inline ::msg::CSRspTournamentPointAward* CSRspBody::mutable_tournamentpointaward() {
  ::msg::CSRspTournamentPointAward* _msg = _internal_mutable_tournamentpointaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.TournamentPointAward)
  return _msg;
}
inline void CSRspBody::set_allocated_tournamentpointaward(::msg::CSRspTournamentPointAward* tournamentpointaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentpointaward_);
  }
  if (tournamentpointaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tournamentpointaward));
    if (message_arena != submessage_arena) {
      tournamentpointaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tournamentpointaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tournamentpointaward_ = tournamentpointaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.TournamentPointAward)
}

// .msg.CSRspGetEnrollPlayers GetEnrollPlayers = 160;
inline bool CSRspBody::_internal_has_getenrollplayers() const {
  return this != internal_default_instance() && _impl_.getenrollplayers_ != nullptr;
}
inline bool CSRspBody::has_getenrollplayers() const {
  return _internal_has_getenrollplayers();
}
inline const ::msg::CSRspGetEnrollPlayers& CSRspBody::_internal_getenrollplayers() const {
  const ::msg::CSRspGetEnrollPlayers* p = _impl_.getenrollplayers_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetEnrollPlayers&>(
      ::msg::_CSRspGetEnrollPlayers_default_instance_);
}
inline const ::msg::CSRspGetEnrollPlayers& CSRspBody::getenrollplayers() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetEnrollPlayers)
  return _internal_getenrollplayers();
}
inline void CSRspBody::unsafe_arena_set_allocated_getenrollplayers(
    ::msg::CSRspGetEnrollPlayers* getenrollplayers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getenrollplayers_);
  }
  _impl_.getenrollplayers_ = getenrollplayers;
  if (getenrollplayers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetEnrollPlayers)
}
inline ::msg::CSRspGetEnrollPlayers* CSRspBody::release_getenrollplayers() {
  
  ::msg::CSRspGetEnrollPlayers* temp = _impl_.getenrollplayers_;
  _impl_.getenrollplayers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetEnrollPlayers* CSRspBody::unsafe_arena_release_getenrollplayers() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetEnrollPlayers)
  
  ::msg::CSRspGetEnrollPlayers* temp = _impl_.getenrollplayers_;
  _impl_.getenrollplayers_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetEnrollPlayers* CSRspBody::_internal_mutable_getenrollplayers() {
  
  if (_impl_.getenrollplayers_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetEnrollPlayers>(GetArenaForAllocation());
    _impl_.getenrollplayers_ = p;
  }
  return _impl_.getenrollplayers_;
}
inline ::msg::CSRspGetEnrollPlayers* CSRspBody::mutable_getenrollplayers() {
  ::msg::CSRspGetEnrollPlayers* _msg = _internal_mutable_getenrollplayers();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetEnrollPlayers)
  return _msg;
}
inline void CSRspBody::set_allocated_getenrollplayers(::msg::CSRspGetEnrollPlayers* getenrollplayers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getenrollplayers_);
  }
  if (getenrollplayers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getenrollplayers));
    if (message_arena != submessage_arena) {
      getenrollplayers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getenrollplayers, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getenrollplayers_ = getenrollplayers;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetEnrollPlayers)
}

// .msg.CSRspDealWebMail DealWebMail = 161;
inline bool CSRspBody::_internal_has_dealwebmail() const {
  return this != internal_default_instance() && _impl_.dealwebmail_ != nullptr;
}
inline bool CSRspBody::has_dealwebmail() const {
  return _internal_has_dealwebmail();
}
inline const ::msg::CSRspDealWebMail& CSRspBody::_internal_dealwebmail() const {
  const ::msg::CSRspDealWebMail* p = _impl_.dealwebmail_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspDealWebMail&>(
      ::msg::_CSRspDealWebMail_default_instance_);
}
inline const ::msg::CSRspDealWebMail& CSRspBody::dealwebmail() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.DealWebMail)
  return _internal_dealwebmail();
}
inline void CSRspBody::unsafe_arena_set_allocated_dealwebmail(
    ::msg::CSRspDealWebMail* dealwebmail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dealwebmail_);
  }
  _impl_.dealwebmail_ = dealwebmail;
  if (dealwebmail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.DealWebMail)
}
inline ::msg::CSRspDealWebMail* CSRspBody::release_dealwebmail() {
  
  ::msg::CSRspDealWebMail* temp = _impl_.dealwebmail_;
  _impl_.dealwebmail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspDealWebMail* CSRspBody::unsafe_arena_release_dealwebmail() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.DealWebMail)
  
  ::msg::CSRspDealWebMail* temp = _impl_.dealwebmail_;
  _impl_.dealwebmail_ = nullptr;
  return temp;
}
inline ::msg::CSRspDealWebMail* CSRspBody::_internal_mutable_dealwebmail() {
  
  if (_impl_.dealwebmail_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspDealWebMail>(GetArenaForAllocation());
    _impl_.dealwebmail_ = p;
  }
  return _impl_.dealwebmail_;
}
inline ::msg::CSRspDealWebMail* CSRspBody::mutable_dealwebmail() {
  ::msg::CSRspDealWebMail* _msg = _internal_mutable_dealwebmail();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.DealWebMail)
  return _msg;
}
inline void CSRspBody::set_allocated_dealwebmail(::msg::CSRspDealWebMail* dealwebmail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dealwebmail_);
  }
  if (dealwebmail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dealwebmail));
    if (message_arena != submessage_arena) {
      dealwebmail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dealwebmail, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dealwebmail_ = dealwebmail;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.DealWebMail)
}

// .msg.CSRspChallengeAgain ChallengeAgain = 162;
inline bool CSRspBody::_internal_has_challengeagain() const {
  return this != internal_default_instance() && _impl_.challengeagain_ != nullptr;
}
inline bool CSRspBody::has_challengeagain() const {
  return _internal_has_challengeagain();
}
inline const ::msg::CSRspChallengeAgain& CSRspBody::_internal_challengeagain() const {
  const ::msg::CSRspChallengeAgain* p = _impl_.challengeagain_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspChallengeAgain&>(
      ::msg::_CSRspChallengeAgain_default_instance_);
}
inline const ::msg::CSRspChallengeAgain& CSRspBody::challengeagain() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ChallengeAgain)
  return _internal_challengeagain();
}
inline void CSRspBody::unsafe_arena_set_allocated_challengeagain(
    ::msg::CSRspChallengeAgain* challengeagain) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.challengeagain_);
  }
  _impl_.challengeagain_ = challengeagain;
  if (challengeagain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ChallengeAgain)
}
inline ::msg::CSRspChallengeAgain* CSRspBody::release_challengeagain() {
  
  ::msg::CSRspChallengeAgain* temp = _impl_.challengeagain_;
  _impl_.challengeagain_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspChallengeAgain* CSRspBody::unsafe_arena_release_challengeagain() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ChallengeAgain)
  
  ::msg::CSRspChallengeAgain* temp = _impl_.challengeagain_;
  _impl_.challengeagain_ = nullptr;
  return temp;
}
inline ::msg::CSRspChallengeAgain* CSRspBody::_internal_mutable_challengeagain() {
  
  if (_impl_.challengeagain_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspChallengeAgain>(GetArenaForAllocation());
    _impl_.challengeagain_ = p;
  }
  return _impl_.challengeagain_;
}
inline ::msg::CSRspChallengeAgain* CSRspBody::mutable_challengeagain() {
  ::msg::CSRspChallengeAgain* _msg = _internal_mutable_challengeagain();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ChallengeAgain)
  return _msg;
}
inline void CSRspBody::set_allocated_challengeagain(::msg::CSRspChallengeAgain* challengeagain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.challengeagain_);
  }
  if (challengeagain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(challengeagain));
    if (message_arena != submessage_arena) {
      challengeagain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, challengeagain, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.challengeagain_ = challengeagain;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ChallengeAgain)
}

// .msg.CSRspHistoryChatMsg HistoryChat = 163;
inline bool CSRspBody::_internal_has_historychat() const {
  return this != internal_default_instance() && _impl_.historychat_ != nullptr;
}
inline bool CSRspBody::has_historychat() const {
  return _internal_has_historychat();
}
inline const ::msg::CSRspHistoryChatMsg& CSRspBody::_internal_historychat() const {
  const ::msg::CSRspHistoryChatMsg* p = _impl_.historychat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspHistoryChatMsg&>(
      ::msg::_CSRspHistoryChatMsg_default_instance_);
}
inline const ::msg::CSRspHistoryChatMsg& CSRspBody::historychat() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.HistoryChat)
  return _internal_historychat();
}
inline void CSRspBody::unsafe_arena_set_allocated_historychat(
    ::msg::CSRspHistoryChatMsg* historychat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.historychat_);
  }
  _impl_.historychat_ = historychat;
  if (historychat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.HistoryChat)
}
inline ::msg::CSRspHistoryChatMsg* CSRspBody::release_historychat() {
  
  ::msg::CSRspHistoryChatMsg* temp = _impl_.historychat_;
  _impl_.historychat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspHistoryChatMsg* CSRspBody::unsafe_arena_release_historychat() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.HistoryChat)
  
  ::msg::CSRspHistoryChatMsg* temp = _impl_.historychat_;
  _impl_.historychat_ = nullptr;
  return temp;
}
inline ::msg::CSRspHistoryChatMsg* CSRspBody::_internal_mutable_historychat() {
  
  if (_impl_.historychat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspHistoryChatMsg>(GetArenaForAllocation());
    _impl_.historychat_ = p;
  }
  return _impl_.historychat_;
}
inline ::msg::CSRspHistoryChatMsg* CSRspBody::mutable_historychat() {
  ::msg::CSRspHistoryChatMsg* _msg = _internal_mutable_historychat();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.HistoryChat)
  return _msg;
}
inline void CSRspBody::set_allocated_historychat(::msg::CSRspHistoryChatMsg* historychat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.historychat_);
  }
  if (historychat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(historychat));
    if (message_arena != submessage_arena) {
      historychat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, historychat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.historychat_ = historychat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.HistoryChat)
}

// .msg.CSRspSetFriendInvisible SetFriendInvisible = 164;
inline bool CSRspBody::_internal_has_setfriendinvisible() const {
  return this != internal_default_instance() && _impl_.setfriendinvisible_ != nullptr;
}
inline bool CSRspBody::has_setfriendinvisible() const {
  return _internal_has_setfriendinvisible();
}
inline const ::msg::CSRspSetFriendInvisible& CSRspBody::_internal_setfriendinvisible() const {
  const ::msg::CSRspSetFriendInvisible* p = _impl_.setfriendinvisible_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSetFriendInvisible&>(
      ::msg::_CSRspSetFriendInvisible_default_instance_);
}
inline const ::msg::CSRspSetFriendInvisible& CSRspBody::setfriendinvisible() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SetFriendInvisible)
  return _internal_setfriendinvisible();
}
inline void CSRspBody::unsafe_arena_set_allocated_setfriendinvisible(
    ::msg::CSRspSetFriendInvisible* setfriendinvisible) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setfriendinvisible_);
  }
  _impl_.setfriendinvisible_ = setfriendinvisible;
  if (setfriendinvisible) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SetFriendInvisible)
}
inline ::msg::CSRspSetFriendInvisible* CSRspBody::release_setfriendinvisible() {
  
  ::msg::CSRspSetFriendInvisible* temp = _impl_.setfriendinvisible_;
  _impl_.setfriendinvisible_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSetFriendInvisible* CSRspBody::unsafe_arena_release_setfriendinvisible() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SetFriendInvisible)
  
  ::msg::CSRspSetFriendInvisible* temp = _impl_.setfriendinvisible_;
  _impl_.setfriendinvisible_ = nullptr;
  return temp;
}
inline ::msg::CSRspSetFriendInvisible* CSRspBody::_internal_mutable_setfriendinvisible() {
  
  if (_impl_.setfriendinvisible_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSetFriendInvisible>(GetArenaForAllocation());
    _impl_.setfriendinvisible_ = p;
  }
  return _impl_.setfriendinvisible_;
}
inline ::msg::CSRspSetFriendInvisible* CSRspBody::mutable_setfriendinvisible() {
  ::msg::CSRspSetFriendInvisible* _msg = _internal_mutable_setfriendinvisible();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SetFriendInvisible)
  return _msg;
}
inline void CSRspBody::set_allocated_setfriendinvisible(::msg::CSRspSetFriendInvisible* setfriendinvisible) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setfriendinvisible_);
  }
  if (setfriendinvisible) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setfriendinvisible));
    if (message_arena != submessage_arena) {
      setfriendinvisible = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setfriendinvisible, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setfriendinvisible_ = setfriendinvisible;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SetFriendInvisible)
}

// .msg.CSRspGetObserveAward GetObserveAward = 165;
inline bool CSRspBody::_internal_has_getobserveaward() const {
  return this != internal_default_instance() && _impl_.getobserveaward_ != nullptr;
}
inline bool CSRspBody::has_getobserveaward() const {
  return _internal_has_getobserveaward();
}
inline const ::msg::CSRspGetObserveAward& CSRspBody::_internal_getobserveaward() const {
  const ::msg::CSRspGetObserveAward* p = _impl_.getobserveaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetObserveAward&>(
      ::msg::_CSRspGetObserveAward_default_instance_);
}
inline const ::msg::CSRspGetObserveAward& CSRspBody::getobserveaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetObserveAward)
  return _internal_getobserveaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_getobserveaward(
    ::msg::CSRspGetObserveAward* getobserveaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getobserveaward_);
  }
  _impl_.getobserveaward_ = getobserveaward;
  if (getobserveaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetObserveAward)
}
inline ::msg::CSRspGetObserveAward* CSRspBody::release_getobserveaward() {
  
  ::msg::CSRspGetObserveAward* temp = _impl_.getobserveaward_;
  _impl_.getobserveaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetObserveAward* CSRspBody::unsafe_arena_release_getobserveaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetObserveAward)
  
  ::msg::CSRspGetObserveAward* temp = _impl_.getobserveaward_;
  _impl_.getobserveaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetObserveAward* CSRspBody::_internal_mutable_getobserveaward() {
  
  if (_impl_.getobserveaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetObserveAward>(GetArenaForAllocation());
    _impl_.getobserveaward_ = p;
  }
  return _impl_.getobserveaward_;
}
inline ::msg::CSRspGetObserveAward* CSRspBody::mutable_getobserveaward() {
  ::msg::CSRspGetObserveAward* _msg = _internal_mutable_getobserveaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetObserveAward)
  return _msg;
}
inline void CSRspBody::set_allocated_getobserveaward(::msg::CSRspGetObserveAward* getobserveaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getobserveaward_);
  }
  if (getobserveaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getobserveaward));
    if (message_arena != submessage_arena) {
      getobserveaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getobserveaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getobserveaward_ = getobserveaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetObserveAward)
}

// .msg.CSRspInviteObserve InviteObserve = 166;
inline bool CSRspBody::_internal_has_inviteobserve() const {
  return this != internal_default_instance() && _impl_.inviteobserve_ != nullptr;
}
inline bool CSRspBody::has_inviteobserve() const {
  return _internal_has_inviteobserve();
}
inline const ::msg::CSRspInviteObserve& CSRspBody::_internal_inviteobserve() const {
  const ::msg::CSRspInviteObserve* p = _impl_.inviteobserve_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspInviteObserve&>(
      ::msg::_CSRspInviteObserve_default_instance_);
}
inline const ::msg::CSRspInviteObserve& CSRspBody::inviteobserve() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.InviteObserve)
  return _internal_inviteobserve();
}
inline void CSRspBody::unsafe_arena_set_allocated_inviteobserve(
    ::msg::CSRspInviteObserve* inviteobserve) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inviteobserve_);
  }
  _impl_.inviteobserve_ = inviteobserve;
  if (inviteobserve) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.InviteObserve)
}
inline ::msg::CSRspInviteObserve* CSRspBody::release_inviteobserve() {
  
  ::msg::CSRspInviteObserve* temp = _impl_.inviteobserve_;
  _impl_.inviteobserve_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspInviteObserve* CSRspBody::unsafe_arena_release_inviteobserve() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.InviteObserve)
  
  ::msg::CSRspInviteObserve* temp = _impl_.inviteobserve_;
  _impl_.inviteobserve_ = nullptr;
  return temp;
}
inline ::msg::CSRspInviteObserve* CSRspBody::_internal_mutable_inviteobserve() {
  
  if (_impl_.inviteobserve_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspInviteObserve>(GetArenaForAllocation());
    _impl_.inviteobserve_ = p;
  }
  return _impl_.inviteobserve_;
}
inline ::msg::CSRspInviteObserve* CSRspBody::mutable_inviteobserve() {
  ::msg::CSRspInviteObserve* _msg = _internal_mutable_inviteobserve();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.InviteObserve)
  return _msg;
}
inline void CSRspBody::set_allocated_inviteobserve(::msg::CSRspInviteObserve* inviteobserve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inviteobserve_);
  }
  if (inviteobserve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inviteobserve));
    if (message_arena != submessage_arena) {
      inviteobserve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inviteobserve, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.inviteobserve_ = inviteobserve;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.InviteObserve)
}

// .msg.CSRspRejectObserve RejectObserve = 167;
inline bool CSRspBody::_internal_has_rejectobserve() const {
  return this != internal_default_instance() && _impl_.rejectobserve_ != nullptr;
}
inline bool CSRspBody::has_rejectobserve() const {
  return _internal_has_rejectobserve();
}
inline const ::msg::CSRspRejectObserve& CSRspBody::_internal_rejectobserve() const {
  const ::msg::CSRspRejectObserve* p = _impl_.rejectobserve_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRejectObserve&>(
      ::msg::_CSRspRejectObserve_default_instance_);
}
inline const ::msg::CSRspRejectObserve& CSRspBody::rejectobserve() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RejectObserve)
  return _internal_rejectobserve();
}
inline void CSRspBody::unsafe_arena_set_allocated_rejectobserve(
    ::msg::CSRspRejectObserve* rejectobserve) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rejectobserve_);
  }
  _impl_.rejectobserve_ = rejectobserve;
  if (rejectobserve) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RejectObserve)
}
inline ::msg::CSRspRejectObserve* CSRspBody::release_rejectobserve() {
  
  ::msg::CSRspRejectObserve* temp = _impl_.rejectobserve_;
  _impl_.rejectobserve_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRejectObserve* CSRspBody::unsafe_arena_release_rejectobserve() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RejectObserve)
  
  ::msg::CSRspRejectObserve* temp = _impl_.rejectobserve_;
  _impl_.rejectobserve_ = nullptr;
  return temp;
}
inline ::msg::CSRspRejectObserve* CSRspBody::_internal_mutable_rejectobserve() {
  
  if (_impl_.rejectobserve_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRejectObserve>(GetArenaForAllocation());
    _impl_.rejectobserve_ = p;
  }
  return _impl_.rejectobserve_;
}
inline ::msg::CSRspRejectObserve* CSRspBody::mutable_rejectobserve() {
  ::msg::CSRspRejectObserve* _msg = _internal_mutable_rejectobserve();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RejectObserve)
  return _msg;
}
inline void CSRspBody::set_allocated_rejectobserve(::msg::CSRspRejectObserve* rejectobserve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rejectobserve_);
  }
  if (rejectobserve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rejectobserve));
    if (message_arena != submessage_arena) {
      rejectobserve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rejectobserve, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rejectobserve_ = rejectobserve;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RejectObserve)
}

// .msg.CSRspGetTxPlayer GetTxPlayer = 168;
inline bool CSRspBody::_internal_has_gettxplayer() const {
  return this != internal_default_instance() && _impl_.gettxplayer_ != nullptr;
}
inline bool CSRspBody::has_gettxplayer() const {
  return _internal_has_gettxplayer();
}
inline const ::msg::CSRspGetTxPlayer& CSRspBody::_internal_gettxplayer() const {
  const ::msg::CSRspGetTxPlayer* p = _impl_.gettxplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetTxPlayer&>(
      ::msg::_CSRspGetTxPlayer_default_instance_);
}
inline const ::msg::CSRspGetTxPlayer& CSRspBody::gettxplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetTxPlayer)
  return _internal_gettxplayer();
}
inline void CSRspBody::unsafe_arena_set_allocated_gettxplayer(
    ::msg::CSRspGetTxPlayer* gettxplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gettxplayer_);
  }
  _impl_.gettxplayer_ = gettxplayer;
  if (gettxplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetTxPlayer)
}
inline ::msg::CSRspGetTxPlayer* CSRspBody::release_gettxplayer() {
  
  ::msg::CSRspGetTxPlayer* temp = _impl_.gettxplayer_;
  _impl_.gettxplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetTxPlayer* CSRspBody::unsafe_arena_release_gettxplayer() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetTxPlayer)
  
  ::msg::CSRspGetTxPlayer* temp = _impl_.gettxplayer_;
  _impl_.gettxplayer_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetTxPlayer* CSRspBody::_internal_mutable_gettxplayer() {
  
  if (_impl_.gettxplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetTxPlayer>(GetArenaForAllocation());
    _impl_.gettxplayer_ = p;
  }
  return _impl_.gettxplayer_;
}
inline ::msg::CSRspGetTxPlayer* CSRspBody::mutable_gettxplayer() {
  ::msg::CSRspGetTxPlayer* _msg = _internal_mutable_gettxplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetTxPlayer)
  return _msg;
}
inline void CSRspBody::set_allocated_gettxplayer(::msg::CSRspGetTxPlayer* gettxplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gettxplayer_);
  }
  if (gettxplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gettxplayer));
    if (message_arena != submessage_arena) {
      gettxplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gettxplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gettxplayer_ = gettxplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetTxPlayer)
}

// .msg.CSRspGetThirdPvpInfo GetThirdPvpInfo = 169;
inline bool CSRspBody::_internal_has_getthirdpvpinfo() const {
  return this != internal_default_instance() && _impl_.getthirdpvpinfo_ != nullptr;
}
inline bool CSRspBody::has_getthirdpvpinfo() const {
  return _internal_has_getthirdpvpinfo();
}
inline const ::msg::CSRspGetThirdPvpInfo& CSRspBody::_internal_getthirdpvpinfo() const {
  const ::msg::CSRspGetThirdPvpInfo* p = _impl_.getthirdpvpinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetThirdPvpInfo&>(
      ::msg::_CSRspGetThirdPvpInfo_default_instance_);
}
inline const ::msg::CSRspGetThirdPvpInfo& CSRspBody::getthirdpvpinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetThirdPvpInfo)
  return _internal_getthirdpvpinfo();
}
inline void CSRspBody::unsafe_arena_set_allocated_getthirdpvpinfo(
    ::msg::CSRspGetThirdPvpInfo* getthirdpvpinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getthirdpvpinfo_);
  }
  _impl_.getthirdpvpinfo_ = getthirdpvpinfo;
  if (getthirdpvpinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetThirdPvpInfo)
}
inline ::msg::CSRspGetThirdPvpInfo* CSRspBody::release_getthirdpvpinfo() {
  
  ::msg::CSRspGetThirdPvpInfo* temp = _impl_.getthirdpvpinfo_;
  _impl_.getthirdpvpinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetThirdPvpInfo* CSRspBody::unsafe_arena_release_getthirdpvpinfo() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetThirdPvpInfo)
  
  ::msg::CSRspGetThirdPvpInfo* temp = _impl_.getthirdpvpinfo_;
  _impl_.getthirdpvpinfo_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetThirdPvpInfo* CSRspBody::_internal_mutable_getthirdpvpinfo() {
  
  if (_impl_.getthirdpvpinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetThirdPvpInfo>(GetArenaForAllocation());
    _impl_.getthirdpvpinfo_ = p;
  }
  return _impl_.getthirdpvpinfo_;
}
inline ::msg::CSRspGetThirdPvpInfo* CSRspBody::mutable_getthirdpvpinfo() {
  ::msg::CSRspGetThirdPvpInfo* _msg = _internal_mutable_getthirdpvpinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetThirdPvpInfo)
  return _msg;
}
inline void CSRspBody::set_allocated_getthirdpvpinfo(::msg::CSRspGetThirdPvpInfo* getthirdpvpinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getthirdpvpinfo_);
  }
  if (getthirdpvpinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getthirdpvpinfo));
    if (message_arena != submessage_arena) {
      getthirdpvpinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getthirdpvpinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getthirdpvpinfo_ = getthirdpvpinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetThirdPvpInfo)
}

// .msg.CSRspMarkPlayerGuide MarkPlayerGuide = 170;
inline bool CSRspBody::_internal_has_markplayerguide() const {
  return this != internal_default_instance() && _impl_.markplayerguide_ != nullptr;
}
inline bool CSRspBody::has_markplayerguide() const {
  return _internal_has_markplayerguide();
}
inline const ::msg::CSRspMarkPlayerGuide& CSRspBody::_internal_markplayerguide() const {
  const ::msg::CSRspMarkPlayerGuide* p = _impl_.markplayerguide_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspMarkPlayerGuide&>(
      ::msg::_CSRspMarkPlayerGuide_default_instance_);
}
inline const ::msg::CSRspMarkPlayerGuide& CSRspBody::markplayerguide() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.MarkPlayerGuide)
  return _internal_markplayerguide();
}
inline void CSRspBody::unsafe_arena_set_allocated_markplayerguide(
    ::msg::CSRspMarkPlayerGuide* markplayerguide) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.markplayerguide_);
  }
  _impl_.markplayerguide_ = markplayerguide;
  if (markplayerguide) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.MarkPlayerGuide)
}
inline ::msg::CSRspMarkPlayerGuide* CSRspBody::release_markplayerguide() {
  
  ::msg::CSRspMarkPlayerGuide* temp = _impl_.markplayerguide_;
  _impl_.markplayerguide_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspMarkPlayerGuide* CSRspBody::unsafe_arena_release_markplayerguide() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.MarkPlayerGuide)
  
  ::msg::CSRspMarkPlayerGuide* temp = _impl_.markplayerguide_;
  _impl_.markplayerguide_ = nullptr;
  return temp;
}
inline ::msg::CSRspMarkPlayerGuide* CSRspBody::_internal_mutable_markplayerguide() {
  
  if (_impl_.markplayerguide_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspMarkPlayerGuide>(GetArenaForAllocation());
    _impl_.markplayerguide_ = p;
  }
  return _impl_.markplayerguide_;
}
inline ::msg::CSRspMarkPlayerGuide* CSRspBody::mutable_markplayerguide() {
  ::msg::CSRspMarkPlayerGuide* _msg = _internal_mutable_markplayerguide();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.MarkPlayerGuide)
  return _msg;
}
inline void CSRspBody::set_allocated_markplayerguide(::msg::CSRspMarkPlayerGuide* markplayerguide) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.markplayerguide_);
  }
  if (markplayerguide) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(markplayerguide));
    if (message_arena != submessage_arena) {
      markplayerguide = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, markplayerguide, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.markplayerguide_ = markplayerguide;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.MarkPlayerGuide)
}

// .msg.CSRspMarkChessSkinClicked ChessSkinClicked = 171;
inline bool CSRspBody::_internal_has_chessskinclicked() const {
  return this != internal_default_instance() && _impl_.chessskinclicked_ != nullptr;
}
inline bool CSRspBody::has_chessskinclicked() const {
  return _internal_has_chessskinclicked();
}
inline const ::msg::CSRspMarkChessSkinClicked& CSRspBody::_internal_chessskinclicked() const {
  const ::msg::CSRspMarkChessSkinClicked* p = _impl_.chessskinclicked_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspMarkChessSkinClicked&>(
      ::msg::_CSRspMarkChessSkinClicked_default_instance_);
}
inline const ::msg::CSRspMarkChessSkinClicked& CSRspBody::chessskinclicked() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ChessSkinClicked)
  return _internal_chessskinclicked();
}
inline void CSRspBody::unsafe_arena_set_allocated_chessskinclicked(
    ::msg::CSRspMarkChessSkinClicked* chessskinclicked) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chessskinclicked_);
  }
  _impl_.chessskinclicked_ = chessskinclicked;
  if (chessskinclicked) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ChessSkinClicked)
}
inline ::msg::CSRspMarkChessSkinClicked* CSRspBody::release_chessskinclicked() {
  
  ::msg::CSRspMarkChessSkinClicked* temp = _impl_.chessskinclicked_;
  _impl_.chessskinclicked_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspMarkChessSkinClicked* CSRspBody::unsafe_arena_release_chessskinclicked() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ChessSkinClicked)
  
  ::msg::CSRspMarkChessSkinClicked* temp = _impl_.chessskinclicked_;
  _impl_.chessskinclicked_ = nullptr;
  return temp;
}
inline ::msg::CSRspMarkChessSkinClicked* CSRspBody::_internal_mutable_chessskinclicked() {
  
  if (_impl_.chessskinclicked_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspMarkChessSkinClicked>(GetArenaForAllocation());
    _impl_.chessskinclicked_ = p;
  }
  return _impl_.chessskinclicked_;
}
inline ::msg::CSRspMarkChessSkinClicked* CSRspBody::mutable_chessskinclicked() {
  ::msg::CSRspMarkChessSkinClicked* _msg = _internal_mutable_chessskinclicked();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ChessSkinClicked)
  return _msg;
}
inline void CSRspBody::set_allocated_chessskinclicked(::msg::CSRspMarkChessSkinClicked* chessskinclicked) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chessskinclicked_);
  }
  if (chessskinclicked) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chessskinclicked));
    if (message_arena != submessage_arena) {
      chessskinclicked = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chessskinclicked, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chessskinclicked_ = chessskinclicked;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ChessSkinClicked)
}

// .msg.CSRsqQueryPs4Entitlements QueryPs4Entitlements = 172;
inline bool CSRspBody::_internal_has_queryps4entitlements() const {
  return this != internal_default_instance() && _impl_.queryps4entitlements_ != nullptr;
}
inline bool CSRspBody::has_queryps4entitlements() const {
  return _internal_has_queryps4entitlements();
}
inline const ::msg::CSRsqQueryPs4Entitlements& CSRspBody::_internal_queryps4entitlements() const {
  const ::msg::CSRsqQueryPs4Entitlements* p = _impl_.queryps4entitlements_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRsqQueryPs4Entitlements&>(
      ::msg::_CSRsqQueryPs4Entitlements_default_instance_);
}
inline const ::msg::CSRsqQueryPs4Entitlements& CSRspBody::queryps4entitlements() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.QueryPs4Entitlements)
  return _internal_queryps4entitlements();
}
inline void CSRspBody::unsafe_arena_set_allocated_queryps4entitlements(
    ::msg::CSRsqQueryPs4Entitlements* queryps4entitlements) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.queryps4entitlements_);
  }
  _impl_.queryps4entitlements_ = queryps4entitlements;
  if (queryps4entitlements) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.QueryPs4Entitlements)
}
inline ::msg::CSRsqQueryPs4Entitlements* CSRspBody::release_queryps4entitlements() {
  
  ::msg::CSRsqQueryPs4Entitlements* temp = _impl_.queryps4entitlements_;
  _impl_.queryps4entitlements_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRsqQueryPs4Entitlements* CSRspBody::unsafe_arena_release_queryps4entitlements() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.QueryPs4Entitlements)
  
  ::msg::CSRsqQueryPs4Entitlements* temp = _impl_.queryps4entitlements_;
  _impl_.queryps4entitlements_ = nullptr;
  return temp;
}
inline ::msg::CSRsqQueryPs4Entitlements* CSRspBody::_internal_mutable_queryps4entitlements() {
  
  if (_impl_.queryps4entitlements_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRsqQueryPs4Entitlements>(GetArenaForAllocation());
    _impl_.queryps4entitlements_ = p;
  }
  return _impl_.queryps4entitlements_;
}
inline ::msg::CSRsqQueryPs4Entitlements* CSRspBody::mutable_queryps4entitlements() {
  ::msg::CSRsqQueryPs4Entitlements* _msg = _internal_mutable_queryps4entitlements();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.QueryPs4Entitlements)
  return _msg;
}
inline void CSRspBody::set_allocated_queryps4entitlements(::msg::CSRsqQueryPs4Entitlements* queryps4entitlements) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.queryps4entitlements_);
  }
  if (queryps4entitlements) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(queryps4entitlements));
    if (message_arena != submessage_arena) {
      queryps4entitlements = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queryps4entitlements, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.queryps4entitlements_ = queryps4entitlements;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.QueryPs4Entitlements)
}

// .msg.CSRspActDaySign ActDaySign = 173;
inline bool CSRspBody::_internal_has_actdaysign() const {
  return this != internal_default_instance() && _impl_.actdaysign_ != nullptr;
}
inline bool CSRspBody::has_actdaysign() const {
  return _internal_has_actdaysign();
}
inline const ::msg::CSRspActDaySign& CSRspBody::_internal_actdaysign() const {
  const ::msg::CSRspActDaySign* p = _impl_.actdaysign_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspActDaySign&>(
      ::msg::_CSRspActDaySign_default_instance_);
}
inline const ::msg::CSRspActDaySign& CSRspBody::actdaysign() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ActDaySign)
  return _internal_actdaysign();
}
inline void CSRspBody::unsafe_arena_set_allocated_actdaysign(
    ::msg::CSRspActDaySign* actdaysign) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actdaysign_);
  }
  _impl_.actdaysign_ = actdaysign;
  if (actdaysign) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ActDaySign)
}
inline ::msg::CSRspActDaySign* CSRspBody::release_actdaysign() {
  
  ::msg::CSRspActDaySign* temp = _impl_.actdaysign_;
  _impl_.actdaysign_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspActDaySign* CSRspBody::unsafe_arena_release_actdaysign() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ActDaySign)
  
  ::msg::CSRspActDaySign* temp = _impl_.actdaysign_;
  _impl_.actdaysign_ = nullptr;
  return temp;
}
inline ::msg::CSRspActDaySign* CSRspBody::_internal_mutable_actdaysign() {
  
  if (_impl_.actdaysign_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspActDaySign>(GetArenaForAllocation());
    _impl_.actdaysign_ = p;
  }
  return _impl_.actdaysign_;
}
inline ::msg::CSRspActDaySign* CSRspBody::mutable_actdaysign() {
  ::msg::CSRspActDaySign* _msg = _internal_mutable_actdaysign();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ActDaySign)
  return _msg;
}
inline void CSRspBody::set_allocated_actdaysign(::msg::CSRspActDaySign* actdaysign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.actdaysign_);
  }
  if (actdaysign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actdaysign));
    if (message_arena != submessage_arena) {
      actdaysign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actdaysign, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.actdaysign_ = actdaysign;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ActDaySign)
}

// .msg.CSRspHaveThirdPvp HaveThirdPvpInfo = 174;
inline bool CSRspBody::_internal_has_havethirdpvpinfo() const {
  return this != internal_default_instance() && _impl_.havethirdpvpinfo_ != nullptr;
}
inline bool CSRspBody::has_havethirdpvpinfo() const {
  return _internal_has_havethirdpvpinfo();
}
inline const ::msg::CSRspHaveThirdPvp& CSRspBody::_internal_havethirdpvpinfo() const {
  const ::msg::CSRspHaveThirdPvp* p = _impl_.havethirdpvpinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspHaveThirdPvp&>(
      ::msg::_CSRspHaveThirdPvp_default_instance_);
}
inline const ::msg::CSRspHaveThirdPvp& CSRspBody::havethirdpvpinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.HaveThirdPvpInfo)
  return _internal_havethirdpvpinfo();
}
inline void CSRspBody::unsafe_arena_set_allocated_havethirdpvpinfo(
    ::msg::CSRspHaveThirdPvp* havethirdpvpinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.havethirdpvpinfo_);
  }
  _impl_.havethirdpvpinfo_ = havethirdpvpinfo;
  if (havethirdpvpinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.HaveThirdPvpInfo)
}
inline ::msg::CSRspHaveThirdPvp* CSRspBody::release_havethirdpvpinfo() {
  
  ::msg::CSRspHaveThirdPvp* temp = _impl_.havethirdpvpinfo_;
  _impl_.havethirdpvpinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspHaveThirdPvp* CSRspBody::unsafe_arena_release_havethirdpvpinfo() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.HaveThirdPvpInfo)
  
  ::msg::CSRspHaveThirdPvp* temp = _impl_.havethirdpvpinfo_;
  _impl_.havethirdpvpinfo_ = nullptr;
  return temp;
}
inline ::msg::CSRspHaveThirdPvp* CSRspBody::_internal_mutable_havethirdpvpinfo() {
  
  if (_impl_.havethirdpvpinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspHaveThirdPvp>(GetArenaForAllocation());
    _impl_.havethirdpvpinfo_ = p;
  }
  return _impl_.havethirdpvpinfo_;
}
inline ::msg::CSRspHaveThirdPvp* CSRspBody::mutable_havethirdpvpinfo() {
  ::msg::CSRspHaveThirdPvp* _msg = _internal_mutable_havethirdpvpinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.HaveThirdPvpInfo)
  return _msg;
}
inline void CSRspBody::set_allocated_havethirdpvpinfo(::msg::CSRspHaveThirdPvp* havethirdpvpinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.havethirdpvpinfo_);
  }
  if (havethirdpvpinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(havethirdpvpinfo));
    if (message_arena != submessage_arena) {
      havethirdpvpinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, havethirdpvpinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.havethirdpvpinfo_ = havethirdpvpinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.HaveThirdPvpInfo)
}

// .msg.CSRspActivityMall ActivityMall = 175;
inline bool CSRspBody::_internal_has_activitymall() const {
  return this != internal_default_instance() && _impl_.activitymall_ != nullptr;
}
inline bool CSRspBody::has_activitymall() const {
  return _internal_has_activitymall();
}
inline const ::msg::CSRspActivityMall& CSRspBody::_internal_activitymall() const {
  const ::msg::CSRspActivityMall* p = _impl_.activitymall_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspActivityMall&>(
      ::msg::_CSRspActivityMall_default_instance_);
}
inline const ::msg::CSRspActivityMall& CSRspBody::activitymall() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ActivityMall)
  return _internal_activitymall();
}
inline void CSRspBody::unsafe_arena_set_allocated_activitymall(
    ::msg::CSRspActivityMall* activitymall) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activitymall_);
  }
  _impl_.activitymall_ = activitymall;
  if (activitymall) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ActivityMall)
}
inline ::msg::CSRspActivityMall* CSRspBody::release_activitymall() {
  
  ::msg::CSRspActivityMall* temp = _impl_.activitymall_;
  _impl_.activitymall_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspActivityMall* CSRspBody::unsafe_arena_release_activitymall() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ActivityMall)
  
  ::msg::CSRspActivityMall* temp = _impl_.activitymall_;
  _impl_.activitymall_ = nullptr;
  return temp;
}
inline ::msg::CSRspActivityMall* CSRspBody::_internal_mutable_activitymall() {
  
  if (_impl_.activitymall_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspActivityMall>(GetArenaForAllocation());
    _impl_.activitymall_ = p;
  }
  return _impl_.activitymall_;
}
inline ::msg::CSRspActivityMall* CSRspBody::mutable_activitymall() {
  ::msg::CSRspActivityMall* _msg = _internal_mutable_activitymall();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ActivityMall)
  return _msg;
}
inline void CSRspBody::set_allocated_activitymall(::msg::CSRspActivityMall* activitymall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activitymall_);
  }
  if (activitymall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activitymall));
    if (message_arena != submessage_arena) {
      activitymall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activitymall, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.activitymall_ = activitymall;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ActivityMall)
}

// .msg.CSRspPsOnly PsOnly = 176;
inline bool CSRspBody::_internal_has_psonly() const {
  return this != internal_default_instance() && _impl_.psonly_ != nullptr;
}
inline bool CSRspBody::has_psonly() const {
  return _internal_has_psonly();
}
inline const ::msg::CSRspPsOnly& CSRspBody::_internal_psonly() const {
  const ::msg::CSRspPsOnly* p = _impl_.psonly_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPsOnly&>(
      ::msg::_CSRspPsOnly_default_instance_);
}
inline const ::msg::CSRspPsOnly& CSRspBody::psonly() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PsOnly)
  return _internal_psonly();
}
inline void CSRspBody::unsafe_arena_set_allocated_psonly(
    ::msg::CSRspPsOnly* psonly) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.psonly_);
  }
  _impl_.psonly_ = psonly;
  if (psonly) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PsOnly)
}
inline ::msg::CSRspPsOnly* CSRspBody::release_psonly() {
  
  ::msg::CSRspPsOnly* temp = _impl_.psonly_;
  _impl_.psonly_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPsOnly* CSRspBody::unsafe_arena_release_psonly() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PsOnly)
  
  ::msg::CSRspPsOnly* temp = _impl_.psonly_;
  _impl_.psonly_ = nullptr;
  return temp;
}
inline ::msg::CSRspPsOnly* CSRspBody::_internal_mutable_psonly() {
  
  if (_impl_.psonly_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPsOnly>(GetArenaForAllocation());
    _impl_.psonly_ = p;
  }
  return _impl_.psonly_;
}
inline ::msg::CSRspPsOnly* CSRspBody::mutable_psonly() {
  ::msg::CSRspPsOnly* _msg = _internal_mutable_psonly();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PsOnly)
  return _msg;
}
inline void CSRspBody::set_allocated_psonly(::msg::CSRspPsOnly* psonly) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.psonly_);
  }
  if (psonly) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psonly));
    if (message_arena != submessage_arena) {
      psonly = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psonly, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.psonly_ = psonly;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PsOnly)
}

// .msg.CSRspChangeChannelType ChangeChannelType = 177;
inline bool CSRspBody::_internal_has_changechanneltype() const {
  return this != internal_default_instance() && _impl_.changechanneltype_ != nullptr;
}
inline bool CSRspBody::has_changechanneltype() const {
  return _internal_has_changechanneltype();
}
inline const ::msg::CSRspChangeChannelType& CSRspBody::_internal_changechanneltype() const {
  const ::msg::CSRspChangeChannelType* p = _impl_.changechanneltype_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspChangeChannelType&>(
      ::msg::_CSRspChangeChannelType_default_instance_);
}
inline const ::msg::CSRspChangeChannelType& CSRspBody::changechanneltype() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ChangeChannelType)
  return _internal_changechanneltype();
}
inline void CSRspBody::unsafe_arena_set_allocated_changechanneltype(
    ::msg::CSRspChangeChannelType* changechanneltype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changechanneltype_);
  }
  _impl_.changechanneltype_ = changechanneltype;
  if (changechanneltype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ChangeChannelType)
}
inline ::msg::CSRspChangeChannelType* CSRspBody::release_changechanneltype() {
  
  ::msg::CSRspChangeChannelType* temp = _impl_.changechanneltype_;
  _impl_.changechanneltype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspChangeChannelType* CSRspBody::unsafe_arena_release_changechanneltype() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ChangeChannelType)
  
  ::msg::CSRspChangeChannelType* temp = _impl_.changechanneltype_;
  _impl_.changechanneltype_ = nullptr;
  return temp;
}
inline ::msg::CSRspChangeChannelType* CSRspBody::_internal_mutable_changechanneltype() {
  
  if (_impl_.changechanneltype_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspChangeChannelType>(GetArenaForAllocation());
    _impl_.changechanneltype_ = p;
  }
  return _impl_.changechanneltype_;
}
inline ::msg::CSRspChangeChannelType* CSRspBody::mutable_changechanneltype() {
  ::msg::CSRspChangeChannelType* _msg = _internal_mutable_changechanneltype();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ChangeChannelType)
  return _msg;
}
inline void CSRspBody::set_allocated_changechanneltype(::msg::CSRspChangeChannelType* changechanneltype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changechanneltype_);
  }
  if (changechanneltype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(changechanneltype));
    if (message_arena != submessage_arena) {
      changechanneltype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changechanneltype, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.changechanneltype_ = changechanneltype;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ChangeChannelType)
}

// .msg.CSRspCustomCardOpt CustomCardOpt = 178;
inline bool CSRspBody::_internal_has_customcardopt() const {
  return this != internal_default_instance() && _impl_.customcardopt_ != nullptr;
}
inline bool CSRspBody::has_customcardopt() const {
  return _internal_has_customcardopt();
}
inline const ::msg::CSRspCustomCardOpt& CSRspBody::_internal_customcardopt() const {
  const ::msg::CSRspCustomCardOpt* p = _impl_.customcardopt_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspCustomCardOpt&>(
      ::msg::_CSRspCustomCardOpt_default_instance_);
}
inline const ::msg::CSRspCustomCardOpt& CSRspBody::customcardopt() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.CustomCardOpt)
  return _internal_customcardopt();
}
inline void CSRspBody::unsafe_arena_set_allocated_customcardopt(
    ::msg::CSRspCustomCardOpt* customcardopt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.customcardopt_);
  }
  _impl_.customcardopt_ = customcardopt;
  if (customcardopt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.CustomCardOpt)
}
inline ::msg::CSRspCustomCardOpt* CSRspBody::release_customcardopt() {
  
  ::msg::CSRspCustomCardOpt* temp = _impl_.customcardopt_;
  _impl_.customcardopt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspCustomCardOpt* CSRspBody::unsafe_arena_release_customcardopt() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.CustomCardOpt)
  
  ::msg::CSRspCustomCardOpt* temp = _impl_.customcardopt_;
  _impl_.customcardopt_ = nullptr;
  return temp;
}
inline ::msg::CSRspCustomCardOpt* CSRspBody::_internal_mutable_customcardopt() {
  
  if (_impl_.customcardopt_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspCustomCardOpt>(GetArenaForAllocation());
    _impl_.customcardopt_ = p;
  }
  return _impl_.customcardopt_;
}
inline ::msg::CSRspCustomCardOpt* CSRspBody::mutable_customcardopt() {
  ::msg::CSRspCustomCardOpt* _msg = _internal_mutable_customcardopt();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.CustomCardOpt)
  return _msg;
}
inline void CSRspBody::set_allocated_customcardopt(::msg::CSRspCustomCardOpt* customcardopt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.customcardopt_);
  }
  if (customcardopt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customcardopt));
    if (message_arena != submessage_arena) {
      customcardopt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customcardopt, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.customcardopt_ = customcardopt;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.CustomCardOpt)
}

// .msg.CSRspChampionHistory ChampionHistory = 179;
inline bool CSRspBody::_internal_has_championhistory() const {
  return this != internal_default_instance() && _impl_.championhistory_ != nullptr;
}
inline bool CSRspBody::has_championhistory() const {
  return _internal_has_championhistory();
}
inline const ::msg::CSRspChampionHistory& CSRspBody::_internal_championhistory() const {
  const ::msg::CSRspChampionHistory* p = _impl_.championhistory_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspChampionHistory&>(
      ::msg::_CSRspChampionHistory_default_instance_);
}
inline const ::msg::CSRspChampionHistory& CSRspBody::championhistory() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ChampionHistory)
  return _internal_championhistory();
}
inline void CSRspBody::unsafe_arena_set_allocated_championhistory(
    ::msg::CSRspChampionHistory* championhistory) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.championhistory_);
  }
  _impl_.championhistory_ = championhistory;
  if (championhistory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ChampionHistory)
}
inline ::msg::CSRspChampionHistory* CSRspBody::release_championhistory() {
  
  ::msg::CSRspChampionHistory* temp = _impl_.championhistory_;
  _impl_.championhistory_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspChampionHistory* CSRspBody::unsafe_arena_release_championhistory() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ChampionHistory)
  
  ::msg::CSRspChampionHistory* temp = _impl_.championhistory_;
  _impl_.championhistory_ = nullptr;
  return temp;
}
inline ::msg::CSRspChampionHistory* CSRspBody::_internal_mutable_championhistory() {
  
  if (_impl_.championhistory_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspChampionHistory>(GetArenaForAllocation());
    _impl_.championhistory_ = p;
  }
  return _impl_.championhistory_;
}
inline ::msg::CSRspChampionHistory* CSRspBody::mutable_championhistory() {
  ::msg::CSRspChampionHistory* _msg = _internal_mutable_championhistory();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ChampionHistory)
  return _msg;
}
inline void CSRspBody::set_allocated_championhistory(::msg::CSRspChampionHistory* championhistory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.championhistory_);
  }
  if (championhistory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(championhistory));
    if (message_arena != submessage_arena) {
      championhistory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, championhistory, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.championhistory_ = championhistory;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ChampionHistory)
}

// .msg.CSRspTournamentLastTopRank TournamentLastTopRank = 180;
inline bool CSRspBody::_internal_has_tournamentlasttoprank() const {
  return this != internal_default_instance() && _impl_.tournamentlasttoprank_ != nullptr;
}
inline bool CSRspBody::has_tournamentlasttoprank() const {
  return _internal_has_tournamentlasttoprank();
}
inline const ::msg::CSRspTournamentLastTopRank& CSRspBody::_internal_tournamentlasttoprank() const {
  const ::msg::CSRspTournamentLastTopRank* p = _impl_.tournamentlasttoprank_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspTournamentLastTopRank&>(
      ::msg::_CSRspTournamentLastTopRank_default_instance_);
}
inline const ::msg::CSRspTournamentLastTopRank& CSRspBody::tournamentlasttoprank() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.TournamentLastTopRank)
  return _internal_tournamentlasttoprank();
}
inline void CSRspBody::unsafe_arena_set_allocated_tournamentlasttoprank(
    ::msg::CSRspTournamentLastTopRank* tournamentlasttoprank) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentlasttoprank_);
  }
  _impl_.tournamentlasttoprank_ = tournamentlasttoprank;
  if (tournamentlasttoprank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.TournamentLastTopRank)
}
inline ::msg::CSRspTournamentLastTopRank* CSRspBody::release_tournamentlasttoprank() {
  
  ::msg::CSRspTournamentLastTopRank* temp = _impl_.tournamentlasttoprank_;
  _impl_.tournamentlasttoprank_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspTournamentLastTopRank* CSRspBody::unsafe_arena_release_tournamentlasttoprank() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.TournamentLastTopRank)
  
  ::msg::CSRspTournamentLastTopRank* temp = _impl_.tournamentlasttoprank_;
  _impl_.tournamentlasttoprank_ = nullptr;
  return temp;
}
inline ::msg::CSRspTournamentLastTopRank* CSRspBody::_internal_mutable_tournamentlasttoprank() {
  
  if (_impl_.tournamentlasttoprank_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspTournamentLastTopRank>(GetArenaForAllocation());
    _impl_.tournamentlasttoprank_ = p;
  }
  return _impl_.tournamentlasttoprank_;
}
inline ::msg::CSRspTournamentLastTopRank* CSRspBody::mutable_tournamentlasttoprank() {
  ::msg::CSRspTournamentLastTopRank* _msg = _internal_mutable_tournamentlasttoprank();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.TournamentLastTopRank)
  return _msg;
}
inline void CSRspBody::set_allocated_tournamentlasttoprank(::msg::CSRspTournamentLastTopRank* tournamentlasttoprank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentlasttoprank_);
  }
  if (tournamentlasttoprank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tournamentlasttoprank));
    if (message_arena != submessage_arena) {
      tournamentlasttoprank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tournamentlasttoprank, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tournamentlasttoprank_ = tournamentlasttoprank;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.TournamentLastTopRank)
}

// .msg.CSRspBigWinnerDailyAward BigWinnerDailyAward = 181;
inline bool CSRspBody::_internal_has_bigwinnerdailyaward() const {
  return this != internal_default_instance() && _impl_.bigwinnerdailyaward_ != nullptr;
}
inline bool CSRspBody::has_bigwinnerdailyaward() const {
  return _internal_has_bigwinnerdailyaward();
}
inline const ::msg::CSRspBigWinnerDailyAward& CSRspBody::_internal_bigwinnerdailyaward() const {
  const ::msg::CSRspBigWinnerDailyAward* p = _impl_.bigwinnerdailyaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspBigWinnerDailyAward&>(
      ::msg::_CSRspBigWinnerDailyAward_default_instance_);
}
inline const ::msg::CSRspBigWinnerDailyAward& CSRspBody::bigwinnerdailyaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.BigWinnerDailyAward)
  return _internal_bigwinnerdailyaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_bigwinnerdailyaward(
    ::msg::CSRspBigWinnerDailyAward* bigwinnerdailyaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bigwinnerdailyaward_);
  }
  _impl_.bigwinnerdailyaward_ = bigwinnerdailyaward;
  if (bigwinnerdailyaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.BigWinnerDailyAward)
}
inline ::msg::CSRspBigWinnerDailyAward* CSRspBody::release_bigwinnerdailyaward() {
  
  ::msg::CSRspBigWinnerDailyAward* temp = _impl_.bigwinnerdailyaward_;
  _impl_.bigwinnerdailyaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspBigWinnerDailyAward* CSRspBody::unsafe_arena_release_bigwinnerdailyaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.BigWinnerDailyAward)
  
  ::msg::CSRspBigWinnerDailyAward* temp = _impl_.bigwinnerdailyaward_;
  _impl_.bigwinnerdailyaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspBigWinnerDailyAward* CSRspBody::_internal_mutable_bigwinnerdailyaward() {
  
  if (_impl_.bigwinnerdailyaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspBigWinnerDailyAward>(GetArenaForAllocation());
    _impl_.bigwinnerdailyaward_ = p;
  }
  return _impl_.bigwinnerdailyaward_;
}
inline ::msg::CSRspBigWinnerDailyAward* CSRspBody::mutable_bigwinnerdailyaward() {
  ::msg::CSRspBigWinnerDailyAward* _msg = _internal_mutable_bigwinnerdailyaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.BigWinnerDailyAward)
  return _msg;
}
inline void CSRspBody::set_allocated_bigwinnerdailyaward(::msg::CSRspBigWinnerDailyAward* bigwinnerdailyaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bigwinnerdailyaward_);
  }
  if (bigwinnerdailyaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bigwinnerdailyaward));
    if (message_arena != submessage_arena) {
      bigwinnerdailyaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bigwinnerdailyaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bigwinnerdailyaward_ = bigwinnerdailyaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.BigWinnerDailyAward)
}

// .msg.CSRspBigWinnerScoreHistory BigWinnerScoreHistory = 182;
inline bool CSRspBody::_internal_has_bigwinnerscorehistory() const {
  return this != internal_default_instance() && _impl_.bigwinnerscorehistory_ != nullptr;
}
inline bool CSRspBody::has_bigwinnerscorehistory() const {
  return _internal_has_bigwinnerscorehistory();
}
inline const ::msg::CSRspBigWinnerScoreHistory& CSRspBody::_internal_bigwinnerscorehistory() const {
  const ::msg::CSRspBigWinnerScoreHistory* p = _impl_.bigwinnerscorehistory_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspBigWinnerScoreHistory&>(
      ::msg::_CSRspBigWinnerScoreHistory_default_instance_);
}
inline const ::msg::CSRspBigWinnerScoreHistory& CSRspBody::bigwinnerscorehistory() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.BigWinnerScoreHistory)
  return _internal_bigwinnerscorehistory();
}
inline void CSRspBody::unsafe_arena_set_allocated_bigwinnerscorehistory(
    ::msg::CSRspBigWinnerScoreHistory* bigwinnerscorehistory) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bigwinnerscorehistory_);
  }
  _impl_.bigwinnerscorehistory_ = bigwinnerscorehistory;
  if (bigwinnerscorehistory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.BigWinnerScoreHistory)
}
inline ::msg::CSRspBigWinnerScoreHistory* CSRspBody::release_bigwinnerscorehistory() {
  
  ::msg::CSRspBigWinnerScoreHistory* temp = _impl_.bigwinnerscorehistory_;
  _impl_.bigwinnerscorehistory_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspBigWinnerScoreHistory* CSRspBody::unsafe_arena_release_bigwinnerscorehistory() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.BigWinnerScoreHistory)
  
  ::msg::CSRspBigWinnerScoreHistory* temp = _impl_.bigwinnerscorehistory_;
  _impl_.bigwinnerscorehistory_ = nullptr;
  return temp;
}
inline ::msg::CSRspBigWinnerScoreHistory* CSRspBody::_internal_mutable_bigwinnerscorehistory() {
  
  if (_impl_.bigwinnerscorehistory_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspBigWinnerScoreHistory>(GetArenaForAllocation());
    _impl_.bigwinnerscorehistory_ = p;
  }
  return _impl_.bigwinnerscorehistory_;
}
inline ::msg::CSRspBigWinnerScoreHistory* CSRspBody::mutable_bigwinnerscorehistory() {
  ::msg::CSRspBigWinnerScoreHistory* _msg = _internal_mutable_bigwinnerscorehistory();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.BigWinnerScoreHistory)
  return _msg;
}
inline void CSRspBody::set_allocated_bigwinnerscorehistory(::msg::CSRspBigWinnerScoreHistory* bigwinnerscorehistory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bigwinnerscorehistory_);
  }
  if (bigwinnerscorehistory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bigwinnerscorehistory));
    if (message_arena != submessage_arena) {
      bigwinnerscorehistory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bigwinnerscorehistory, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bigwinnerscorehistory_ = bigwinnerscorehistory;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.BigWinnerScoreHistory)
}

// .msg.CSRspSmeltItem SmeltItem = 183;
inline bool CSRspBody::_internal_has_smeltitem() const {
  return this != internal_default_instance() && _impl_.smeltitem_ != nullptr;
}
inline bool CSRspBody::has_smeltitem() const {
  return _internal_has_smeltitem();
}
inline const ::msg::CSRspSmeltItem& CSRspBody::_internal_smeltitem() const {
  const ::msg::CSRspSmeltItem* p = _impl_.smeltitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSmeltItem&>(
      ::msg::_CSRspSmeltItem_default_instance_);
}
inline const ::msg::CSRspSmeltItem& CSRspBody::smeltitem() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SmeltItem)
  return _internal_smeltitem();
}
inline void CSRspBody::unsafe_arena_set_allocated_smeltitem(
    ::msg::CSRspSmeltItem* smeltitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.smeltitem_);
  }
  _impl_.smeltitem_ = smeltitem;
  if (smeltitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SmeltItem)
}
inline ::msg::CSRspSmeltItem* CSRspBody::release_smeltitem() {
  
  ::msg::CSRspSmeltItem* temp = _impl_.smeltitem_;
  _impl_.smeltitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSmeltItem* CSRspBody::unsafe_arena_release_smeltitem() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SmeltItem)
  
  ::msg::CSRspSmeltItem* temp = _impl_.smeltitem_;
  _impl_.smeltitem_ = nullptr;
  return temp;
}
inline ::msg::CSRspSmeltItem* CSRspBody::_internal_mutable_smeltitem() {
  
  if (_impl_.smeltitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSmeltItem>(GetArenaForAllocation());
    _impl_.smeltitem_ = p;
  }
  return _impl_.smeltitem_;
}
inline ::msg::CSRspSmeltItem* CSRspBody::mutable_smeltitem() {
  ::msg::CSRspSmeltItem* _msg = _internal_mutable_smeltitem();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SmeltItem)
  return _msg;
}
inline void CSRspBody::set_allocated_smeltitem(::msg::CSRspSmeltItem* smeltitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.smeltitem_);
  }
  if (smeltitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(smeltitem));
    if (message_arena != submessage_arena) {
      smeltitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smeltitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.smeltitem_ = smeltitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SmeltItem)
}

// .msg.CSRspPVEUpTalentLevel PVEUpTalentLevel = 184;
inline bool CSRspBody::_internal_has_pveuptalentlevel() const {
  return this != internal_default_instance() && _impl_.pveuptalentlevel_ != nullptr;
}
inline bool CSRspBody::has_pveuptalentlevel() const {
  return _internal_has_pveuptalentlevel();
}
inline const ::msg::CSRspPVEUpTalentLevel& CSRspBody::_internal_pveuptalentlevel() const {
  const ::msg::CSRspPVEUpTalentLevel* p = _impl_.pveuptalentlevel_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPVEUpTalentLevel&>(
      ::msg::_CSRspPVEUpTalentLevel_default_instance_);
}
inline const ::msg::CSRspPVEUpTalentLevel& CSRspBody::pveuptalentlevel() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PVEUpTalentLevel)
  return _internal_pveuptalentlevel();
}
inline void CSRspBody::unsafe_arena_set_allocated_pveuptalentlevel(
    ::msg::CSRspPVEUpTalentLevel* pveuptalentlevel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pveuptalentlevel_);
  }
  _impl_.pveuptalentlevel_ = pveuptalentlevel;
  if (pveuptalentlevel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PVEUpTalentLevel)
}
inline ::msg::CSRspPVEUpTalentLevel* CSRspBody::release_pveuptalentlevel() {
  
  ::msg::CSRspPVEUpTalentLevel* temp = _impl_.pveuptalentlevel_;
  _impl_.pveuptalentlevel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPVEUpTalentLevel* CSRspBody::unsafe_arena_release_pveuptalentlevel() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PVEUpTalentLevel)
  
  ::msg::CSRspPVEUpTalentLevel* temp = _impl_.pveuptalentlevel_;
  _impl_.pveuptalentlevel_ = nullptr;
  return temp;
}
inline ::msg::CSRspPVEUpTalentLevel* CSRspBody::_internal_mutable_pveuptalentlevel() {
  
  if (_impl_.pveuptalentlevel_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPVEUpTalentLevel>(GetArenaForAllocation());
    _impl_.pveuptalentlevel_ = p;
  }
  return _impl_.pveuptalentlevel_;
}
inline ::msg::CSRspPVEUpTalentLevel* CSRspBody::mutable_pveuptalentlevel() {
  ::msg::CSRspPVEUpTalentLevel* _msg = _internal_mutable_pveuptalentlevel();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PVEUpTalentLevel)
  return _msg;
}
inline void CSRspBody::set_allocated_pveuptalentlevel(::msg::CSRspPVEUpTalentLevel* pveuptalentlevel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pveuptalentlevel_);
  }
  if (pveuptalentlevel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pveuptalentlevel));
    if (message_arena != submessage_arena) {
      pveuptalentlevel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pveuptalentlevel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pveuptalentlevel_ = pveuptalentlevel;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PVEUpTalentLevel)
}

// .msg.CSRspPVELuckyAward LuckyAward = 185;
inline bool CSRspBody::_internal_has_luckyaward() const {
  return this != internal_default_instance() && _impl_.luckyaward_ != nullptr;
}
inline bool CSRspBody::has_luckyaward() const {
  return _internal_has_luckyaward();
}
inline const ::msg::CSRspPVELuckyAward& CSRspBody::_internal_luckyaward() const {
  const ::msg::CSRspPVELuckyAward* p = _impl_.luckyaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPVELuckyAward&>(
      ::msg::_CSRspPVELuckyAward_default_instance_);
}
inline const ::msg::CSRspPVELuckyAward& CSRspBody::luckyaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.LuckyAward)
  return _internal_luckyaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_luckyaward(
    ::msg::CSRspPVELuckyAward* luckyaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.luckyaward_);
  }
  _impl_.luckyaward_ = luckyaward;
  if (luckyaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.LuckyAward)
}
inline ::msg::CSRspPVELuckyAward* CSRspBody::release_luckyaward() {
  
  ::msg::CSRspPVELuckyAward* temp = _impl_.luckyaward_;
  _impl_.luckyaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPVELuckyAward* CSRspBody::unsafe_arena_release_luckyaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.LuckyAward)
  
  ::msg::CSRspPVELuckyAward* temp = _impl_.luckyaward_;
  _impl_.luckyaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspPVELuckyAward* CSRspBody::_internal_mutable_luckyaward() {
  
  if (_impl_.luckyaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPVELuckyAward>(GetArenaForAllocation());
    _impl_.luckyaward_ = p;
  }
  return _impl_.luckyaward_;
}
inline ::msg::CSRspPVELuckyAward* CSRspBody::mutable_luckyaward() {
  ::msg::CSRspPVELuckyAward* _msg = _internal_mutable_luckyaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.LuckyAward)
  return _msg;
}
inline void CSRspBody::set_allocated_luckyaward(::msg::CSRspPVELuckyAward* luckyaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.luckyaward_);
  }
  if (luckyaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(luckyaward));
    if (message_arena != submessage_arena) {
      luckyaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, luckyaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.luckyaward_ = luckyaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.LuckyAward)
}

// .msg.CSRspApplyChannel ApplyChannel = 186;
inline bool CSRspBody::_internal_has_applychannel() const {
  return this != internal_default_instance() && _impl_.applychannel_ != nullptr;
}
inline bool CSRspBody::has_applychannel() const {
  return _internal_has_applychannel();
}
inline const ::msg::CSRspApplyChannel& CSRspBody::_internal_applychannel() const {
  const ::msg::CSRspApplyChannel* p = _impl_.applychannel_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspApplyChannel&>(
      ::msg::_CSRspApplyChannel_default_instance_);
}
inline const ::msg::CSRspApplyChannel& CSRspBody::applychannel() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ApplyChannel)
  return _internal_applychannel();
}
inline void CSRspBody::unsafe_arena_set_allocated_applychannel(
    ::msg::CSRspApplyChannel* applychannel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.applychannel_);
  }
  _impl_.applychannel_ = applychannel;
  if (applychannel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ApplyChannel)
}
inline ::msg::CSRspApplyChannel* CSRspBody::release_applychannel() {
  
  ::msg::CSRspApplyChannel* temp = _impl_.applychannel_;
  _impl_.applychannel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspApplyChannel* CSRspBody::unsafe_arena_release_applychannel() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ApplyChannel)
  
  ::msg::CSRspApplyChannel* temp = _impl_.applychannel_;
  _impl_.applychannel_ = nullptr;
  return temp;
}
inline ::msg::CSRspApplyChannel* CSRspBody::_internal_mutable_applychannel() {
  
  if (_impl_.applychannel_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspApplyChannel>(GetArenaForAllocation());
    _impl_.applychannel_ = p;
  }
  return _impl_.applychannel_;
}
inline ::msg::CSRspApplyChannel* CSRspBody::mutable_applychannel() {
  ::msg::CSRspApplyChannel* _msg = _internal_mutable_applychannel();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ApplyChannel)
  return _msg;
}
inline void CSRspBody::set_allocated_applychannel(::msg::CSRspApplyChannel* applychannel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.applychannel_);
  }
  if (applychannel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applychannel));
    if (message_arena != submessage_arena) {
      applychannel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applychannel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.applychannel_ = applychannel;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ApplyChannel)
}

// .msg.CSRspOBTeamInfo OBTeamInfo = 300;
inline bool CSRspBody::_internal_has_obteaminfo() const {
  return this != internal_default_instance() && _impl_.obteaminfo_ != nullptr;
}
inline bool CSRspBody::has_obteaminfo() const {
  return _internal_has_obteaminfo();
}
inline const ::msg::CSRspOBTeamInfo& CSRspBody::_internal_obteaminfo() const {
  const ::msg::CSRspOBTeamInfo* p = _impl_.obteaminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspOBTeamInfo&>(
      ::msg::_CSRspOBTeamInfo_default_instance_);
}
inline const ::msg::CSRspOBTeamInfo& CSRspBody::obteaminfo() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.OBTeamInfo)
  return _internal_obteaminfo();
}
inline void CSRspBody::unsafe_arena_set_allocated_obteaminfo(
    ::msg::CSRspOBTeamInfo* obteaminfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obteaminfo_);
  }
  _impl_.obteaminfo_ = obteaminfo;
  if (obteaminfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.OBTeamInfo)
}
inline ::msg::CSRspOBTeamInfo* CSRspBody::release_obteaminfo() {
  
  ::msg::CSRspOBTeamInfo* temp = _impl_.obteaminfo_;
  _impl_.obteaminfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspOBTeamInfo* CSRspBody::unsafe_arena_release_obteaminfo() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.OBTeamInfo)
  
  ::msg::CSRspOBTeamInfo* temp = _impl_.obteaminfo_;
  _impl_.obteaminfo_ = nullptr;
  return temp;
}
inline ::msg::CSRspOBTeamInfo* CSRspBody::_internal_mutable_obteaminfo() {
  
  if (_impl_.obteaminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspOBTeamInfo>(GetArenaForAllocation());
    _impl_.obteaminfo_ = p;
  }
  return _impl_.obteaminfo_;
}
inline ::msg::CSRspOBTeamInfo* CSRspBody::mutable_obteaminfo() {
  ::msg::CSRspOBTeamInfo* _msg = _internal_mutable_obteaminfo();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.OBTeamInfo)
  return _msg;
}
inline void CSRspBody::set_allocated_obteaminfo(::msg::CSRspOBTeamInfo* obteaminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.obteaminfo_);
  }
  if (obteaminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(obteaminfo));
    if (message_arena != submessage_arena) {
      obteaminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, obteaminfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.obteaminfo_ = obteaminfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.OBTeamInfo)
}

// .msg.CSRspGetPvpServerGroup GetPvpServerGroup = 303;
inline bool CSRspBody::_internal_has_getpvpservergroup() const {
  return this != internal_default_instance() && _impl_.getpvpservergroup_ != nullptr;
}
inline bool CSRspBody::has_getpvpservergroup() const {
  return _internal_has_getpvpservergroup();
}
inline const ::msg::CSRspGetPvpServerGroup& CSRspBody::_internal_getpvpservergroup() const {
  const ::msg::CSRspGetPvpServerGroup* p = _impl_.getpvpservergroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetPvpServerGroup&>(
      ::msg::_CSRspGetPvpServerGroup_default_instance_);
}
inline const ::msg::CSRspGetPvpServerGroup& CSRspBody::getpvpservergroup() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetPvpServerGroup)
  return _internal_getpvpservergroup();
}
inline void CSRspBody::unsafe_arena_set_allocated_getpvpservergroup(
    ::msg::CSRspGetPvpServerGroup* getpvpservergroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getpvpservergroup_);
  }
  _impl_.getpvpservergroup_ = getpvpservergroup;
  if (getpvpservergroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetPvpServerGroup)
}
inline ::msg::CSRspGetPvpServerGroup* CSRspBody::release_getpvpservergroup() {
  
  ::msg::CSRspGetPvpServerGroup* temp = _impl_.getpvpservergroup_;
  _impl_.getpvpservergroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetPvpServerGroup* CSRspBody::unsafe_arena_release_getpvpservergroup() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetPvpServerGroup)
  
  ::msg::CSRspGetPvpServerGroup* temp = _impl_.getpvpservergroup_;
  _impl_.getpvpservergroup_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetPvpServerGroup* CSRspBody::_internal_mutable_getpvpservergroup() {
  
  if (_impl_.getpvpservergroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetPvpServerGroup>(GetArenaForAllocation());
    _impl_.getpvpservergroup_ = p;
  }
  return _impl_.getpvpservergroup_;
}
inline ::msg::CSRspGetPvpServerGroup* CSRspBody::mutable_getpvpservergroup() {
  ::msg::CSRspGetPvpServerGroup* _msg = _internal_mutable_getpvpservergroup();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetPvpServerGroup)
  return _msg;
}
inline void CSRspBody::set_allocated_getpvpservergroup(::msg::CSRspGetPvpServerGroup* getpvpservergroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getpvpservergroup_);
  }
  if (getpvpservergroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getpvpservergroup));
    if (message_arena != submessage_arena) {
      getpvpservergroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getpvpservergroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getpvpservergroup_ = getpvpservergroup;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetPvpServerGroup)
}

// .msg.CSRspReportPvpInfo ReportPvpInfo = 304;
inline bool CSRspBody::_internal_has_reportpvpinfo() const {
  return this != internal_default_instance() && _impl_.reportpvpinfo_ != nullptr;
}
inline bool CSRspBody::has_reportpvpinfo() const {
  return _internal_has_reportpvpinfo();
}
inline const ::msg::CSRspReportPvpInfo& CSRspBody::_internal_reportpvpinfo() const {
  const ::msg::CSRspReportPvpInfo* p = _impl_.reportpvpinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspReportPvpInfo&>(
      ::msg::_CSRspReportPvpInfo_default_instance_);
}
inline const ::msg::CSRspReportPvpInfo& CSRspBody::reportpvpinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ReportPvpInfo)
  return _internal_reportpvpinfo();
}
inline void CSRspBody::unsafe_arena_set_allocated_reportpvpinfo(
    ::msg::CSRspReportPvpInfo* reportpvpinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportpvpinfo_);
  }
  _impl_.reportpvpinfo_ = reportpvpinfo;
  if (reportpvpinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ReportPvpInfo)
}
inline ::msg::CSRspReportPvpInfo* CSRspBody::release_reportpvpinfo() {
  
  ::msg::CSRspReportPvpInfo* temp = _impl_.reportpvpinfo_;
  _impl_.reportpvpinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspReportPvpInfo* CSRspBody::unsafe_arena_release_reportpvpinfo() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ReportPvpInfo)
  
  ::msg::CSRspReportPvpInfo* temp = _impl_.reportpvpinfo_;
  _impl_.reportpvpinfo_ = nullptr;
  return temp;
}
inline ::msg::CSRspReportPvpInfo* CSRspBody::_internal_mutable_reportpvpinfo() {
  
  if (_impl_.reportpvpinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspReportPvpInfo>(GetArenaForAllocation());
    _impl_.reportpvpinfo_ = p;
  }
  return _impl_.reportpvpinfo_;
}
inline ::msg::CSRspReportPvpInfo* CSRspBody::mutable_reportpvpinfo() {
  ::msg::CSRspReportPvpInfo* _msg = _internal_mutable_reportpvpinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ReportPvpInfo)
  return _msg;
}
inline void CSRspBody::set_allocated_reportpvpinfo(::msg::CSRspReportPvpInfo* reportpvpinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportpvpinfo_);
  }
  if (reportpvpinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reportpvpinfo));
    if (message_arena != submessage_arena) {
      reportpvpinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reportpvpinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reportpvpinfo_ = reportpvpinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ReportPvpInfo)
}

// .msg.CSRspChoosePlayer ChoosePlayer = 305;
inline bool CSRspBody::_internal_has_chooseplayer() const {
  return this != internal_default_instance() && _impl_.chooseplayer_ != nullptr;
}
inline bool CSRspBody::has_chooseplayer() const {
  return _internal_has_chooseplayer();
}
inline const ::msg::CSRspChoosePlayer& CSRspBody::_internal_chooseplayer() const {
  const ::msg::CSRspChoosePlayer* p = _impl_.chooseplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspChoosePlayer&>(
      ::msg::_CSRspChoosePlayer_default_instance_);
}
inline const ::msg::CSRspChoosePlayer& CSRspBody::chooseplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ChoosePlayer)
  return _internal_chooseplayer();
}
inline void CSRspBody::unsafe_arena_set_allocated_chooseplayer(
    ::msg::CSRspChoosePlayer* chooseplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chooseplayer_);
  }
  _impl_.chooseplayer_ = chooseplayer;
  if (chooseplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ChoosePlayer)
}
inline ::msg::CSRspChoosePlayer* CSRspBody::release_chooseplayer() {
  
  ::msg::CSRspChoosePlayer* temp = _impl_.chooseplayer_;
  _impl_.chooseplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspChoosePlayer* CSRspBody::unsafe_arena_release_chooseplayer() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ChoosePlayer)
  
  ::msg::CSRspChoosePlayer* temp = _impl_.chooseplayer_;
  _impl_.chooseplayer_ = nullptr;
  return temp;
}
inline ::msg::CSRspChoosePlayer* CSRspBody::_internal_mutable_chooseplayer() {
  
  if (_impl_.chooseplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspChoosePlayer>(GetArenaForAllocation());
    _impl_.chooseplayer_ = p;
  }
  return _impl_.chooseplayer_;
}
inline ::msg::CSRspChoosePlayer* CSRspBody::mutable_chooseplayer() {
  ::msg::CSRspChoosePlayer* _msg = _internal_mutable_chooseplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ChoosePlayer)
  return _msg;
}
inline void CSRspBody::set_allocated_chooseplayer(::msg::CSRspChoosePlayer* chooseplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chooseplayer_);
  }
  if (chooseplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chooseplayer));
    if (message_arena != submessage_arena) {
      chooseplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chooseplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chooseplayer_ = chooseplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ChoosePlayer)
}

// .msg.CSRspPingTest PingTest = 306;
inline bool CSRspBody::_internal_has_pingtest() const {
  return this != internal_default_instance() && _impl_.pingtest_ != nullptr;
}
inline bool CSRspBody::has_pingtest() const {
  return _internal_has_pingtest();
}
inline const ::msg::CSRspPingTest& CSRspBody::_internal_pingtest() const {
  const ::msg::CSRspPingTest* p = _impl_.pingtest_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPingTest&>(
      ::msg::_CSRspPingTest_default_instance_);
}
inline const ::msg::CSRspPingTest& CSRspBody::pingtest() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PingTest)
  return _internal_pingtest();
}
inline void CSRspBody::unsafe_arena_set_allocated_pingtest(
    ::msg::CSRspPingTest* pingtest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pingtest_);
  }
  _impl_.pingtest_ = pingtest;
  if (pingtest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PingTest)
}
inline ::msg::CSRspPingTest* CSRspBody::release_pingtest() {
  
  ::msg::CSRspPingTest* temp = _impl_.pingtest_;
  _impl_.pingtest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPingTest* CSRspBody::unsafe_arena_release_pingtest() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PingTest)
  
  ::msg::CSRspPingTest* temp = _impl_.pingtest_;
  _impl_.pingtest_ = nullptr;
  return temp;
}
inline ::msg::CSRspPingTest* CSRspBody::_internal_mutable_pingtest() {
  
  if (_impl_.pingtest_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPingTest>(GetArenaForAllocation());
    _impl_.pingtest_ = p;
  }
  return _impl_.pingtest_;
}
inline ::msg::CSRspPingTest* CSRspBody::mutable_pingtest() {
  ::msg::CSRspPingTest* _msg = _internal_mutable_pingtest();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PingTest)
  return _msg;
}
inline void CSRspBody::set_allocated_pingtest(::msg::CSRspPingTest* pingtest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pingtest_);
  }
  if (pingtest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pingtest));
    if (message_arena != submessage_arena) {
      pingtest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pingtest, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pingtest_ = pingtest;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PingTest)
}

// .msg.CSRspReportRegionInfo ReportRegionInfo = 307;
inline bool CSRspBody::_internal_has_reportregioninfo() const {
  return this != internal_default_instance() && _impl_.reportregioninfo_ != nullptr;
}
inline bool CSRspBody::has_reportregioninfo() const {
  return _internal_has_reportregioninfo();
}
inline const ::msg::CSRspReportRegionInfo& CSRspBody::_internal_reportregioninfo() const {
  const ::msg::CSRspReportRegionInfo* p = _impl_.reportregioninfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspReportRegionInfo&>(
      ::msg::_CSRspReportRegionInfo_default_instance_);
}
inline const ::msg::CSRspReportRegionInfo& CSRspBody::reportregioninfo() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ReportRegionInfo)
  return _internal_reportregioninfo();
}
inline void CSRspBody::unsafe_arena_set_allocated_reportregioninfo(
    ::msg::CSRspReportRegionInfo* reportregioninfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportregioninfo_);
  }
  _impl_.reportregioninfo_ = reportregioninfo;
  if (reportregioninfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ReportRegionInfo)
}
inline ::msg::CSRspReportRegionInfo* CSRspBody::release_reportregioninfo() {
  
  ::msg::CSRspReportRegionInfo* temp = _impl_.reportregioninfo_;
  _impl_.reportregioninfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspReportRegionInfo* CSRspBody::unsafe_arena_release_reportregioninfo() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ReportRegionInfo)
  
  ::msg::CSRspReportRegionInfo* temp = _impl_.reportregioninfo_;
  _impl_.reportregioninfo_ = nullptr;
  return temp;
}
inline ::msg::CSRspReportRegionInfo* CSRspBody::_internal_mutable_reportregioninfo() {
  
  if (_impl_.reportregioninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspReportRegionInfo>(GetArenaForAllocation());
    _impl_.reportregioninfo_ = p;
  }
  return _impl_.reportregioninfo_;
}
inline ::msg::CSRspReportRegionInfo* CSRspBody::mutable_reportregioninfo() {
  ::msg::CSRspReportRegionInfo* _msg = _internal_mutable_reportregioninfo();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ReportRegionInfo)
  return _msg;
}
inline void CSRspBody::set_allocated_reportregioninfo(::msg::CSRspReportRegionInfo* reportregioninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportregioninfo_);
  }
  if (reportregioninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reportregioninfo));
    if (message_arena != submessage_arena) {
      reportregioninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reportregioninfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reportregioninfo_ = reportregioninfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ReportRegionInfo)
}

// .msg.CSRspRecalledPlayer RecalledPlaeyr = 308;
inline bool CSRspBody::_internal_has_recalledplaeyr() const {
  return this != internal_default_instance() && _impl_.recalledplaeyr_ != nullptr;
}
inline bool CSRspBody::has_recalledplaeyr() const {
  return _internal_has_recalledplaeyr();
}
inline const ::msg::CSRspRecalledPlayer& CSRspBody::_internal_recalledplaeyr() const {
  const ::msg::CSRspRecalledPlayer* p = _impl_.recalledplaeyr_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRecalledPlayer&>(
      ::msg::_CSRspRecalledPlayer_default_instance_);
}
inline const ::msg::CSRspRecalledPlayer& CSRspBody::recalledplaeyr() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RecalledPlaeyr)
  return _internal_recalledplaeyr();
}
inline void CSRspBody::unsafe_arena_set_allocated_recalledplaeyr(
    ::msg::CSRspRecalledPlayer* recalledplaeyr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recalledplaeyr_);
  }
  _impl_.recalledplaeyr_ = recalledplaeyr;
  if (recalledplaeyr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RecalledPlaeyr)
}
inline ::msg::CSRspRecalledPlayer* CSRspBody::release_recalledplaeyr() {
  
  ::msg::CSRspRecalledPlayer* temp = _impl_.recalledplaeyr_;
  _impl_.recalledplaeyr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRecalledPlayer* CSRspBody::unsafe_arena_release_recalledplaeyr() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RecalledPlaeyr)
  
  ::msg::CSRspRecalledPlayer* temp = _impl_.recalledplaeyr_;
  _impl_.recalledplaeyr_ = nullptr;
  return temp;
}
inline ::msg::CSRspRecalledPlayer* CSRspBody::_internal_mutable_recalledplaeyr() {
  
  if (_impl_.recalledplaeyr_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRecalledPlayer>(GetArenaForAllocation());
    _impl_.recalledplaeyr_ = p;
  }
  return _impl_.recalledplaeyr_;
}
inline ::msg::CSRspRecalledPlayer* CSRspBody::mutable_recalledplaeyr() {
  ::msg::CSRspRecalledPlayer* _msg = _internal_mutable_recalledplaeyr();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RecalledPlaeyr)
  return _msg;
}
inline void CSRspBody::set_allocated_recalledplaeyr(::msg::CSRspRecalledPlayer* recalledplaeyr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recalledplaeyr_);
  }
  if (recalledplaeyr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recalledplaeyr));
    if (message_arena != submessage_arena) {
      recalledplaeyr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recalledplaeyr, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recalledplaeyr_ = recalledplaeyr;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RecalledPlaeyr)
}

// .msg.CSRspWebLogin WebLogin = 309;
inline bool CSRspBody::_internal_has_weblogin() const {
  return this != internal_default_instance() && _impl_.weblogin_ != nullptr;
}
inline bool CSRspBody::has_weblogin() const {
  return _internal_has_weblogin();
}
inline const ::msg::CSRspWebLogin& CSRspBody::_internal_weblogin() const {
  const ::msg::CSRspWebLogin* p = _impl_.weblogin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspWebLogin&>(
      ::msg::_CSRspWebLogin_default_instance_);
}
inline const ::msg::CSRspWebLogin& CSRspBody::weblogin() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.WebLogin)
  return _internal_weblogin();
}
inline void CSRspBody::unsafe_arena_set_allocated_weblogin(
    ::msg::CSRspWebLogin* weblogin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weblogin_);
  }
  _impl_.weblogin_ = weblogin;
  if (weblogin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.WebLogin)
}
inline ::msg::CSRspWebLogin* CSRspBody::release_weblogin() {
  
  ::msg::CSRspWebLogin* temp = _impl_.weblogin_;
  _impl_.weblogin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspWebLogin* CSRspBody::unsafe_arena_release_weblogin() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.WebLogin)
  
  ::msg::CSRspWebLogin* temp = _impl_.weblogin_;
  _impl_.weblogin_ = nullptr;
  return temp;
}
inline ::msg::CSRspWebLogin* CSRspBody::_internal_mutable_weblogin() {
  
  if (_impl_.weblogin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspWebLogin>(GetArenaForAllocation());
    _impl_.weblogin_ = p;
  }
  return _impl_.weblogin_;
}
inline ::msg::CSRspWebLogin* CSRspBody::mutable_weblogin() {
  ::msg::CSRspWebLogin* _msg = _internal_mutable_weblogin();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.WebLogin)
  return _msg;
}
inline void CSRspBody::set_allocated_weblogin(::msg::CSRspWebLogin* weblogin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weblogin_);
  }
  if (weblogin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weblogin));
    if (message_arena != submessage_arena) {
      weblogin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weblogin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.weblogin_ = weblogin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.WebLogin)
}

// .msg.CSRspInviteCodeReset InviteCodeReset = 310;
inline bool CSRspBody::_internal_has_invitecodereset() const {
  return this != internal_default_instance() && _impl_.invitecodereset_ != nullptr;
}
inline bool CSRspBody::has_invitecodereset() const {
  return _internal_has_invitecodereset();
}
inline const ::msg::CSRspInviteCodeReset& CSRspBody::_internal_invitecodereset() const {
  const ::msg::CSRspInviteCodeReset* p = _impl_.invitecodereset_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspInviteCodeReset&>(
      ::msg::_CSRspInviteCodeReset_default_instance_);
}
inline const ::msg::CSRspInviteCodeReset& CSRspBody::invitecodereset() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.InviteCodeReset)
  return _internal_invitecodereset();
}
inline void CSRspBody::unsafe_arena_set_allocated_invitecodereset(
    ::msg::CSRspInviteCodeReset* invitecodereset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invitecodereset_);
  }
  _impl_.invitecodereset_ = invitecodereset;
  if (invitecodereset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.InviteCodeReset)
}
inline ::msg::CSRspInviteCodeReset* CSRspBody::release_invitecodereset() {
  
  ::msg::CSRspInviteCodeReset* temp = _impl_.invitecodereset_;
  _impl_.invitecodereset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspInviteCodeReset* CSRspBody::unsafe_arena_release_invitecodereset() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.InviteCodeReset)
  
  ::msg::CSRspInviteCodeReset* temp = _impl_.invitecodereset_;
  _impl_.invitecodereset_ = nullptr;
  return temp;
}
inline ::msg::CSRspInviteCodeReset* CSRspBody::_internal_mutable_invitecodereset() {
  
  if (_impl_.invitecodereset_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspInviteCodeReset>(GetArenaForAllocation());
    _impl_.invitecodereset_ = p;
  }
  return _impl_.invitecodereset_;
}
inline ::msg::CSRspInviteCodeReset* CSRspBody::mutable_invitecodereset() {
  ::msg::CSRspInviteCodeReset* _msg = _internal_mutable_invitecodereset();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.InviteCodeReset)
  return _msg;
}
inline void CSRspBody::set_allocated_invitecodereset(::msg::CSRspInviteCodeReset* invitecodereset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invitecodereset_);
  }
  if (invitecodereset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitecodereset));
    if (message_arena != submessage_arena) {
      invitecodereset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invitecodereset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.invitecodereset_ = invitecodereset;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.InviteCodeReset)
}

// .msg.CSRspRecallReward RecallReward = 311;
inline bool CSRspBody::_internal_has_recallreward() const {
  return this != internal_default_instance() && _impl_.recallreward_ != nullptr;
}
inline bool CSRspBody::has_recallreward() const {
  return _internal_has_recallreward();
}
inline const ::msg::CSRspRecallReward& CSRspBody::_internal_recallreward() const {
  const ::msg::CSRspRecallReward* p = _impl_.recallreward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRecallReward&>(
      ::msg::_CSRspRecallReward_default_instance_);
}
inline const ::msg::CSRspRecallReward& CSRspBody::recallreward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RecallReward)
  return _internal_recallreward();
}
inline void CSRspBody::unsafe_arena_set_allocated_recallreward(
    ::msg::CSRspRecallReward* recallreward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recallreward_);
  }
  _impl_.recallreward_ = recallreward;
  if (recallreward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RecallReward)
}
inline ::msg::CSRspRecallReward* CSRspBody::release_recallreward() {
  
  ::msg::CSRspRecallReward* temp = _impl_.recallreward_;
  _impl_.recallreward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRecallReward* CSRspBody::unsafe_arena_release_recallreward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RecallReward)
  
  ::msg::CSRspRecallReward* temp = _impl_.recallreward_;
  _impl_.recallreward_ = nullptr;
  return temp;
}
inline ::msg::CSRspRecallReward* CSRspBody::_internal_mutable_recallreward() {
  
  if (_impl_.recallreward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRecallReward>(GetArenaForAllocation());
    _impl_.recallreward_ = p;
  }
  return _impl_.recallreward_;
}
inline ::msg::CSRspRecallReward* CSRspBody::mutable_recallreward() {
  ::msg::CSRspRecallReward* _msg = _internal_mutable_recallreward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RecallReward)
  return _msg;
}
inline void CSRspBody::set_allocated_recallreward(::msg::CSRspRecallReward* recallreward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recallreward_);
  }
  if (recallreward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recallreward));
    if (message_arena != submessage_arena) {
      recallreward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recallreward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recallreward_ = recallreward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RecallReward)
}

// .msg.CSRspSwitchToCommonMatch SwitchToCommonMatch = 312;
inline bool CSRspBody::_internal_has_switchtocommonmatch() const {
  return this != internal_default_instance() && _impl_.switchtocommonmatch_ != nullptr;
}
inline bool CSRspBody::has_switchtocommonmatch() const {
  return _internal_has_switchtocommonmatch();
}
inline const ::msg::CSRspSwitchToCommonMatch& CSRspBody::_internal_switchtocommonmatch() const {
  const ::msg::CSRspSwitchToCommonMatch* p = _impl_.switchtocommonmatch_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSwitchToCommonMatch&>(
      ::msg::_CSRspSwitchToCommonMatch_default_instance_);
}
inline const ::msg::CSRspSwitchToCommonMatch& CSRspBody::switchtocommonmatch() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SwitchToCommonMatch)
  return _internal_switchtocommonmatch();
}
inline void CSRspBody::unsafe_arena_set_allocated_switchtocommonmatch(
    ::msg::CSRspSwitchToCommonMatch* switchtocommonmatch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.switchtocommonmatch_);
  }
  _impl_.switchtocommonmatch_ = switchtocommonmatch;
  if (switchtocommonmatch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SwitchToCommonMatch)
}
inline ::msg::CSRspSwitchToCommonMatch* CSRspBody::release_switchtocommonmatch() {
  
  ::msg::CSRspSwitchToCommonMatch* temp = _impl_.switchtocommonmatch_;
  _impl_.switchtocommonmatch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSwitchToCommonMatch* CSRspBody::unsafe_arena_release_switchtocommonmatch() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SwitchToCommonMatch)
  
  ::msg::CSRspSwitchToCommonMatch* temp = _impl_.switchtocommonmatch_;
  _impl_.switchtocommonmatch_ = nullptr;
  return temp;
}
inline ::msg::CSRspSwitchToCommonMatch* CSRspBody::_internal_mutable_switchtocommonmatch() {
  
  if (_impl_.switchtocommonmatch_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSwitchToCommonMatch>(GetArenaForAllocation());
    _impl_.switchtocommonmatch_ = p;
  }
  return _impl_.switchtocommonmatch_;
}
inline ::msg::CSRspSwitchToCommonMatch* CSRspBody::mutable_switchtocommonmatch() {
  ::msg::CSRspSwitchToCommonMatch* _msg = _internal_mutable_switchtocommonmatch();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SwitchToCommonMatch)
  return _msg;
}
inline void CSRspBody::set_allocated_switchtocommonmatch(::msg::CSRspSwitchToCommonMatch* switchtocommonmatch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.switchtocommonmatch_);
  }
  if (switchtocommonmatch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(switchtocommonmatch));
    if (message_arena != submessage_arena) {
      switchtocommonmatch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, switchtocommonmatch, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.switchtocommonmatch_ = switchtocommonmatch;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SwitchToCommonMatch)
}

// .msg.CSRspSwitchModeInTeam SwitchModeInTeam = 320;
inline bool CSRspBody::_internal_has_switchmodeinteam() const {
  return this != internal_default_instance() && _impl_.switchmodeinteam_ != nullptr;
}
inline bool CSRspBody::has_switchmodeinteam() const {
  return _internal_has_switchmodeinteam();
}
inline const ::msg::CSRspSwitchModeInTeam& CSRspBody::_internal_switchmodeinteam() const {
  const ::msg::CSRspSwitchModeInTeam* p = _impl_.switchmodeinteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSwitchModeInTeam&>(
      ::msg::_CSRspSwitchModeInTeam_default_instance_);
}
inline const ::msg::CSRspSwitchModeInTeam& CSRspBody::switchmodeinteam() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SwitchModeInTeam)
  return _internal_switchmodeinteam();
}
inline void CSRspBody::unsafe_arena_set_allocated_switchmodeinteam(
    ::msg::CSRspSwitchModeInTeam* switchmodeinteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.switchmodeinteam_);
  }
  _impl_.switchmodeinteam_ = switchmodeinteam;
  if (switchmodeinteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SwitchModeInTeam)
}
inline ::msg::CSRspSwitchModeInTeam* CSRspBody::release_switchmodeinteam() {
  
  ::msg::CSRspSwitchModeInTeam* temp = _impl_.switchmodeinteam_;
  _impl_.switchmodeinteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSwitchModeInTeam* CSRspBody::unsafe_arena_release_switchmodeinteam() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SwitchModeInTeam)
  
  ::msg::CSRspSwitchModeInTeam* temp = _impl_.switchmodeinteam_;
  _impl_.switchmodeinteam_ = nullptr;
  return temp;
}
inline ::msg::CSRspSwitchModeInTeam* CSRspBody::_internal_mutable_switchmodeinteam() {
  
  if (_impl_.switchmodeinteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSwitchModeInTeam>(GetArenaForAllocation());
    _impl_.switchmodeinteam_ = p;
  }
  return _impl_.switchmodeinteam_;
}
inline ::msg::CSRspSwitchModeInTeam* CSRspBody::mutable_switchmodeinteam() {
  ::msg::CSRspSwitchModeInTeam* _msg = _internal_mutable_switchmodeinteam();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SwitchModeInTeam)
  return _msg;
}
inline void CSRspBody::set_allocated_switchmodeinteam(::msg::CSRspSwitchModeInTeam* switchmodeinteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.switchmodeinteam_);
  }
  if (switchmodeinteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(switchmodeinteam));
    if (message_arena != submessage_arena) {
      switchmodeinteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, switchmodeinteam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.switchmodeinteam_ = switchmodeinteam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SwitchModeInTeam)
}

// .msg.CSRspGetTNRoomState GetTNRoomState = 321;
inline bool CSRspBody::_internal_has_gettnroomstate() const {
  return this != internal_default_instance() && _impl_.gettnroomstate_ != nullptr;
}
inline bool CSRspBody::has_gettnroomstate() const {
  return _internal_has_gettnroomstate();
}
inline const ::msg::CSRspGetTNRoomState& CSRspBody::_internal_gettnroomstate() const {
  const ::msg::CSRspGetTNRoomState* p = _impl_.gettnroomstate_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetTNRoomState&>(
      ::msg::_CSRspGetTNRoomState_default_instance_);
}
inline const ::msg::CSRspGetTNRoomState& CSRspBody::gettnroomstate() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetTNRoomState)
  return _internal_gettnroomstate();
}
inline void CSRspBody::unsafe_arena_set_allocated_gettnroomstate(
    ::msg::CSRspGetTNRoomState* gettnroomstate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gettnroomstate_);
  }
  _impl_.gettnroomstate_ = gettnroomstate;
  if (gettnroomstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetTNRoomState)
}
inline ::msg::CSRspGetTNRoomState* CSRspBody::release_gettnroomstate() {
  
  ::msg::CSRspGetTNRoomState* temp = _impl_.gettnroomstate_;
  _impl_.gettnroomstate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetTNRoomState* CSRspBody::unsafe_arena_release_gettnroomstate() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetTNRoomState)
  
  ::msg::CSRspGetTNRoomState* temp = _impl_.gettnroomstate_;
  _impl_.gettnroomstate_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetTNRoomState* CSRspBody::_internal_mutable_gettnroomstate() {
  
  if (_impl_.gettnroomstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetTNRoomState>(GetArenaForAllocation());
    _impl_.gettnroomstate_ = p;
  }
  return _impl_.gettnroomstate_;
}
inline ::msg::CSRspGetTNRoomState* CSRspBody::mutable_gettnroomstate() {
  ::msg::CSRspGetTNRoomState* _msg = _internal_mutable_gettnroomstate();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetTNRoomState)
  return _msg;
}
inline void CSRspBody::set_allocated_gettnroomstate(::msg::CSRspGetTNRoomState* gettnroomstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gettnroomstate_);
  }
  if (gettnroomstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gettnroomstate));
    if (message_arena != submessage_arena) {
      gettnroomstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gettnroomstate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gettnroomstate_ = gettnroomstate;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetTNRoomState)
}

// .msg.CSRspWorkshopMatch WorkshopMatch = 330;
inline bool CSRspBody::_internal_has_workshopmatch() const {
  return this != internal_default_instance() && _impl_.workshopmatch_ != nullptr;
}
inline bool CSRspBody::has_workshopmatch() const {
  return _internal_has_workshopmatch();
}
inline const ::msg::CSRspWorkshopMatch& CSRspBody::_internal_workshopmatch() const {
  const ::msg::CSRspWorkshopMatch* p = _impl_.workshopmatch_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspWorkshopMatch&>(
      ::msg::_CSRspWorkshopMatch_default_instance_);
}
inline const ::msg::CSRspWorkshopMatch& CSRspBody::workshopmatch() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.WorkshopMatch)
  return _internal_workshopmatch();
}
inline void CSRspBody::unsafe_arena_set_allocated_workshopmatch(
    ::msg::CSRspWorkshopMatch* workshopmatch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.workshopmatch_);
  }
  _impl_.workshopmatch_ = workshopmatch;
  if (workshopmatch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.WorkshopMatch)
}
inline ::msg::CSRspWorkshopMatch* CSRspBody::release_workshopmatch() {
  
  ::msg::CSRspWorkshopMatch* temp = _impl_.workshopmatch_;
  _impl_.workshopmatch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspWorkshopMatch* CSRspBody::unsafe_arena_release_workshopmatch() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.WorkshopMatch)
  
  ::msg::CSRspWorkshopMatch* temp = _impl_.workshopmatch_;
  _impl_.workshopmatch_ = nullptr;
  return temp;
}
inline ::msg::CSRspWorkshopMatch* CSRspBody::_internal_mutable_workshopmatch() {
  
  if (_impl_.workshopmatch_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspWorkshopMatch>(GetArenaForAllocation());
    _impl_.workshopmatch_ = p;
  }
  return _impl_.workshopmatch_;
}
inline ::msg::CSRspWorkshopMatch* CSRspBody::mutable_workshopmatch() {
  ::msg::CSRspWorkshopMatch* _msg = _internal_mutable_workshopmatch();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.WorkshopMatch)
  return _msg;
}
inline void CSRspBody::set_allocated_workshopmatch(::msg::CSRspWorkshopMatch* workshopmatch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.workshopmatch_);
  }
  if (workshopmatch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workshopmatch));
    if (message_arena != submessage_arena) {
      workshopmatch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workshopmatch, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.workshopmatch_ = workshopmatch;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.WorkshopMatch)
}

// .msg.CSRspBuyWorkshopTicket BuyWorkshopTicket = 331;
inline bool CSRspBody::_internal_has_buyworkshopticket() const {
  return this != internal_default_instance() && _impl_.buyworkshopticket_ != nullptr;
}
inline bool CSRspBody::has_buyworkshopticket() const {
  return _internal_has_buyworkshopticket();
}
inline const ::msg::CSRspBuyWorkshopTicket& CSRspBody::_internal_buyworkshopticket() const {
  const ::msg::CSRspBuyWorkshopTicket* p = _impl_.buyworkshopticket_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspBuyWorkshopTicket&>(
      ::msg::_CSRspBuyWorkshopTicket_default_instance_);
}
inline const ::msg::CSRspBuyWorkshopTicket& CSRspBody::buyworkshopticket() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.BuyWorkshopTicket)
  return _internal_buyworkshopticket();
}
inline void CSRspBody::unsafe_arena_set_allocated_buyworkshopticket(
    ::msg::CSRspBuyWorkshopTicket* buyworkshopticket) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buyworkshopticket_);
  }
  _impl_.buyworkshopticket_ = buyworkshopticket;
  if (buyworkshopticket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.BuyWorkshopTicket)
}
inline ::msg::CSRspBuyWorkshopTicket* CSRspBody::release_buyworkshopticket() {
  
  ::msg::CSRspBuyWorkshopTicket* temp = _impl_.buyworkshopticket_;
  _impl_.buyworkshopticket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspBuyWorkshopTicket* CSRspBody::unsafe_arena_release_buyworkshopticket() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.BuyWorkshopTicket)
  
  ::msg::CSRspBuyWorkshopTicket* temp = _impl_.buyworkshopticket_;
  _impl_.buyworkshopticket_ = nullptr;
  return temp;
}
inline ::msg::CSRspBuyWorkshopTicket* CSRspBody::_internal_mutable_buyworkshopticket() {
  
  if (_impl_.buyworkshopticket_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspBuyWorkshopTicket>(GetArenaForAllocation());
    _impl_.buyworkshopticket_ = p;
  }
  return _impl_.buyworkshopticket_;
}
inline ::msg::CSRspBuyWorkshopTicket* CSRspBody::mutable_buyworkshopticket() {
  ::msg::CSRspBuyWorkshopTicket* _msg = _internal_mutable_buyworkshopticket();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.BuyWorkshopTicket)
  return _msg;
}
inline void CSRspBody::set_allocated_buyworkshopticket(::msg::CSRspBuyWorkshopTicket* buyworkshopticket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buyworkshopticket_);
  }
  if (buyworkshopticket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buyworkshopticket));
    if (message_arena != submessage_arena) {
      buyworkshopticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buyworkshopticket, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buyworkshopticket_ = buyworkshopticket;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.BuyWorkshopTicket)
}

// .msg.CSRspFavouriteWorkshopMap FavouriteWorkshopMap = 332;
inline bool CSRspBody::_internal_has_favouriteworkshopmap() const {
  return this != internal_default_instance() && _impl_.favouriteworkshopmap_ != nullptr;
}
inline bool CSRspBody::has_favouriteworkshopmap() const {
  return _internal_has_favouriteworkshopmap();
}
inline const ::msg::CSRspFavouriteWorkshopMap& CSRspBody::_internal_favouriteworkshopmap() const {
  const ::msg::CSRspFavouriteWorkshopMap* p = _impl_.favouriteworkshopmap_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspFavouriteWorkshopMap&>(
      ::msg::_CSRspFavouriteWorkshopMap_default_instance_);
}
inline const ::msg::CSRspFavouriteWorkshopMap& CSRspBody::favouriteworkshopmap() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.FavouriteWorkshopMap)
  return _internal_favouriteworkshopmap();
}
inline void CSRspBody::unsafe_arena_set_allocated_favouriteworkshopmap(
    ::msg::CSRspFavouriteWorkshopMap* favouriteworkshopmap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.favouriteworkshopmap_);
  }
  _impl_.favouriteworkshopmap_ = favouriteworkshopmap;
  if (favouriteworkshopmap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.FavouriteWorkshopMap)
}
inline ::msg::CSRspFavouriteWorkshopMap* CSRspBody::release_favouriteworkshopmap() {
  
  ::msg::CSRspFavouriteWorkshopMap* temp = _impl_.favouriteworkshopmap_;
  _impl_.favouriteworkshopmap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspFavouriteWorkshopMap* CSRspBody::unsafe_arena_release_favouriteworkshopmap() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.FavouriteWorkshopMap)
  
  ::msg::CSRspFavouriteWorkshopMap* temp = _impl_.favouriteworkshopmap_;
  _impl_.favouriteworkshopmap_ = nullptr;
  return temp;
}
inline ::msg::CSRspFavouriteWorkshopMap* CSRspBody::_internal_mutable_favouriteworkshopmap() {
  
  if (_impl_.favouriteworkshopmap_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspFavouriteWorkshopMap>(GetArenaForAllocation());
    _impl_.favouriteworkshopmap_ = p;
  }
  return _impl_.favouriteworkshopmap_;
}
inline ::msg::CSRspFavouriteWorkshopMap* CSRspBody::mutable_favouriteworkshopmap() {
  ::msg::CSRspFavouriteWorkshopMap* _msg = _internal_mutable_favouriteworkshopmap();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.FavouriteWorkshopMap)
  return _msg;
}
inline void CSRspBody::set_allocated_favouriteworkshopmap(::msg::CSRspFavouriteWorkshopMap* favouriteworkshopmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.favouriteworkshopmap_);
  }
  if (favouriteworkshopmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(favouriteworkshopmap));
    if (message_arena != submessage_arena) {
      favouriteworkshopmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, favouriteworkshopmap, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.favouriteworkshopmap_ = favouriteworkshopmap;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.FavouriteWorkshopMap)
}

// .msg.CSRspShortcutMapsOP ShortcutMapsOP = 333;
inline bool CSRspBody::_internal_has_shortcutmapsop() const {
  return this != internal_default_instance() && _impl_.shortcutmapsop_ != nullptr;
}
inline bool CSRspBody::has_shortcutmapsop() const {
  return _internal_has_shortcutmapsop();
}
inline const ::msg::CSRspShortcutMapsOP& CSRspBody::_internal_shortcutmapsop() const {
  const ::msg::CSRspShortcutMapsOP* p = _impl_.shortcutmapsop_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspShortcutMapsOP&>(
      ::msg::_CSRspShortcutMapsOP_default_instance_);
}
inline const ::msg::CSRspShortcutMapsOP& CSRspBody::shortcutmapsop() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ShortcutMapsOP)
  return _internal_shortcutmapsop();
}
inline void CSRspBody::unsafe_arena_set_allocated_shortcutmapsop(
    ::msg::CSRspShortcutMapsOP* shortcutmapsop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shortcutmapsop_);
  }
  _impl_.shortcutmapsop_ = shortcutmapsop;
  if (shortcutmapsop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ShortcutMapsOP)
}
inline ::msg::CSRspShortcutMapsOP* CSRspBody::release_shortcutmapsop() {
  
  ::msg::CSRspShortcutMapsOP* temp = _impl_.shortcutmapsop_;
  _impl_.shortcutmapsop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspShortcutMapsOP* CSRspBody::unsafe_arena_release_shortcutmapsop() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ShortcutMapsOP)
  
  ::msg::CSRspShortcutMapsOP* temp = _impl_.shortcutmapsop_;
  _impl_.shortcutmapsop_ = nullptr;
  return temp;
}
inline ::msg::CSRspShortcutMapsOP* CSRspBody::_internal_mutable_shortcutmapsop() {
  
  if (_impl_.shortcutmapsop_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspShortcutMapsOP>(GetArenaForAllocation());
    _impl_.shortcutmapsop_ = p;
  }
  return _impl_.shortcutmapsop_;
}
inline ::msg::CSRspShortcutMapsOP* CSRspBody::mutable_shortcutmapsop() {
  ::msg::CSRspShortcutMapsOP* _msg = _internal_mutable_shortcutmapsop();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ShortcutMapsOP)
  return _msg;
}
inline void CSRspBody::set_allocated_shortcutmapsop(::msg::CSRspShortcutMapsOP* shortcutmapsop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shortcutmapsop_);
  }
  if (shortcutmapsop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shortcutmapsop));
    if (message_arena != submessage_arena) {
      shortcutmapsop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shortcutmapsop, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shortcutmapsop_ = shortcutmapsop;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ShortcutMapsOP)
}

// .msg.CSRspPlayersTournamentInfo PlayersTournamentInfo = 334;
inline bool CSRspBody::_internal_has_playerstournamentinfo() const {
  return this != internal_default_instance() && _impl_.playerstournamentinfo_ != nullptr;
}
inline bool CSRspBody::has_playerstournamentinfo() const {
  return _internal_has_playerstournamentinfo();
}
inline const ::msg::CSRspPlayersTournamentInfo& CSRspBody::_internal_playerstournamentinfo() const {
  const ::msg::CSRspPlayersTournamentInfo* p = _impl_.playerstournamentinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPlayersTournamentInfo&>(
      ::msg::_CSRspPlayersTournamentInfo_default_instance_);
}
inline const ::msg::CSRspPlayersTournamentInfo& CSRspBody::playerstournamentinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PlayersTournamentInfo)
  return _internal_playerstournamentinfo();
}
inline void CSRspBody::unsafe_arena_set_allocated_playerstournamentinfo(
    ::msg::CSRspPlayersTournamentInfo* playerstournamentinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerstournamentinfo_);
  }
  _impl_.playerstournamentinfo_ = playerstournamentinfo;
  if (playerstournamentinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PlayersTournamentInfo)
}
inline ::msg::CSRspPlayersTournamentInfo* CSRspBody::release_playerstournamentinfo() {
  
  ::msg::CSRspPlayersTournamentInfo* temp = _impl_.playerstournamentinfo_;
  _impl_.playerstournamentinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPlayersTournamentInfo* CSRspBody::unsafe_arena_release_playerstournamentinfo() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PlayersTournamentInfo)
  
  ::msg::CSRspPlayersTournamentInfo* temp = _impl_.playerstournamentinfo_;
  _impl_.playerstournamentinfo_ = nullptr;
  return temp;
}
inline ::msg::CSRspPlayersTournamentInfo* CSRspBody::_internal_mutable_playerstournamentinfo() {
  
  if (_impl_.playerstournamentinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPlayersTournamentInfo>(GetArenaForAllocation());
    _impl_.playerstournamentinfo_ = p;
  }
  return _impl_.playerstournamentinfo_;
}
inline ::msg::CSRspPlayersTournamentInfo* CSRspBody::mutable_playerstournamentinfo() {
  ::msg::CSRspPlayersTournamentInfo* _msg = _internal_mutable_playerstournamentinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PlayersTournamentInfo)
  return _msg;
}
inline void CSRspBody::set_allocated_playerstournamentinfo(::msg::CSRspPlayersTournamentInfo* playerstournamentinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerstournamentinfo_);
  }
  if (playerstournamentinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerstournamentinfo));
    if (message_arena != submessage_arena) {
      playerstournamentinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerstournamentinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerstournamentinfo_ = playerstournamentinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PlayersTournamentInfo)
}

// .msg.CSRspScoreWorkshopMap ScoreWorkshopMap = 335;
inline bool CSRspBody::_internal_has_scoreworkshopmap() const {
  return this != internal_default_instance() && _impl_.scoreworkshopmap_ != nullptr;
}
inline bool CSRspBody::has_scoreworkshopmap() const {
  return _internal_has_scoreworkshopmap();
}
inline const ::msg::CSRspScoreWorkshopMap& CSRspBody::_internal_scoreworkshopmap() const {
  const ::msg::CSRspScoreWorkshopMap* p = _impl_.scoreworkshopmap_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspScoreWorkshopMap&>(
      ::msg::_CSRspScoreWorkshopMap_default_instance_);
}
inline const ::msg::CSRspScoreWorkshopMap& CSRspBody::scoreworkshopmap() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ScoreWorkshopMap)
  return _internal_scoreworkshopmap();
}
inline void CSRspBody::unsafe_arena_set_allocated_scoreworkshopmap(
    ::msg::CSRspScoreWorkshopMap* scoreworkshopmap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scoreworkshopmap_);
  }
  _impl_.scoreworkshopmap_ = scoreworkshopmap;
  if (scoreworkshopmap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ScoreWorkshopMap)
}
inline ::msg::CSRspScoreWorkshopMap* CSRspBody::release_scoreworkshopmap() {
  
  ::msg::CSRspScoreWorkshopMap* temp = _impl_.scoreworkshopmap_;
  _impl_.scoreworkshopmap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspScoreWorkshopMap* CSRspBody::unsafe_arena_release_scoreworkshopmap() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ScoreWorkshopMap)
  
  ::msg::CSRspScoreWorkshopMap* temp = _impl_.scoreworkshopmap_;
  _impl_.scoreworkshopmap_ = nullptr;
  return temp;
}
inline ::msg::CSRspScoreWorkshopMap* CSRspBody::_internal_mutable_scoreworkshopmap() {
  
  if (_impl_.scoreworkshopmap_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspScoreWorkshopMap>(GetArenaForAllocation());
    _impl_.scoreworkshopmap_ = p;
  }
  return _impl_.scoreworkshopmap_;
}
inline ::msg::CSRspScoreWorkshopMap* CSRspBody::mutable_scoreworkshopmap() {
  ::msg::CSRspScoreWorkshopMap* _msg = _internal_mutable_scoreworkshopmap();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ScoreWorkshopMap)
  return _msg;
}
inline void CSRspBody::set_allocated_scoreworkshopmap(::msg::CSRspScoreWorkshopMap* scoreworkshopmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scoreworkshopmap_);
  }
  if (scoreworkshopmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scoreworkshopmap));
    if (message_arena != submessage_arena) {
      scoreworkshopmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scoreworkshopmap, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scoreworkshopmap_ = scoreworkshopmap;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ScoreWorkshopMap)
}

// .msg.CSRspMapsVisitedByFriends MapsVisitedByFriends = 336;
inline bool CSRspBody::_internal_has_mapsvisitedbyfriends() const {
  return this != internal_default_instance() && _impl_.mapsvisitedbyfriends_ != nullptr;
}
inline bool CSRspBody::has_mapsvisitedbyfriends() const {
  return _internal_has_mapsvisitedbyfriends();
}
inline const ::msg::CSRspMapsVisitedByFriends& CSRspBody::_internal_mapsvisitedbyfriends() const {
  const ::msg::CSRspMapsVisitedByFriends* p = _impl_.mapsvisitedbyfriends_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspMapsVisitedByFriends&>(
      ::msg::_CSRspMapsVisitedByFriends_default_instance_);
}
inline const ::msg::CSRspMapsVisitedByFriends& CSRspBody::mapsvisitedbyfriends() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.MapsVisitedByFriends)
  return _internal_mapsvisitedbyfriends();
}
inline void CSRspBody::unsafe_arena_set_allocated_mapsvisitedbyfriends(
    ::msg::CSRspMapsVisitedByFriends* mapsvisitedbyfriends) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mapsvisitedbyfriends_);
  }
  _impl_.mapsvisitedbyfriends_ = mapsvisitedbyfriends;
  if (mapsvisitedbyfriends) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.MapsVisitedByFriends)
}
inline ::msg::CSRspMapsVisitedByFriends* CSRspBody::release_mapsvisitedbyfriends() {
  
  ::msg::CSRspMapsVisitedByFriends* temp = _impl_.mapsvisitedbyfriends_;
  _impl_.mapsvisitedbyfriends_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspMapsVisitedByFriends* CSRspBody::unsafe_arena_release_mapsvisitedbyfriends() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.MapsVisitedByFriends)
  
  ::msg::CSRspMapsVisitedByFriends* temp = _impl_.mapsvisitedbyfriends_;
  _impl_.mapsvisitedbyfriends_ = nullptr;
  return temp;
}
inline ::msg::CSRspMapsVisitedByFriends* CSRspBody::_internal_mutable_mapsvisitedbyfriends() {
  
  if (_impl_.mapsvisitedbyfriends_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspMapsVisitedByFriends>(GetArenaForAllocation());
    _impl_.mapsvisitedbyfriends_ = p;
  }
  return _impl_.mapsvisitedbyfriends_;
}
inline ::msg::CSRspMapsVisitedByFriends* CSRspBody::mutable_mapsvisitedbyfriends() {
  ::msg::CSRspMapsVisitedByFriends* _msg = _internal_mutable_mapsvisitedbyfriends();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.MapsVisitedByFriends)
  return _msg;
}
inline void CSRspBody::set_allocated_mapsvisitedbyfriends(::msg::CSRspMapsVisitedByFriends* mapsvisitedbyfriends) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mapsvisitedbyfriends_);
  }
  if (mapsvisitedbyfriends) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapsvisitedbyfriends));
    if (message_arena != submessage_arena) {
      mapsvisitedbyfriends = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mapsvisitedbyfriends, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mapsvisitedbyfriends_ = mapsvisitedbyfriends;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.MapsVisitedByFriends)
}

// .msg.CSRspVerifyRealName VerifyRealName = 350;
inline bool CSRspBody::_internal_has_verifyrealname() const {
  return this != internal_default_instance() && _impl_.verifyrealname_ != nullptr;
}
inline bool CSRspBody::has_verifyrealname() const {
  return _internal_has_verifyrealname();
}
inline const ::msg::CSRspVerifyRealName& CSRspBody::_internal_verifyrealname() const {
  const ::msg::CSRspVerifyRealName* p = _impl_.verifyrealname_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspVerifyRealName&>(
      ::msg::_CSRspVerifyRealName_default_instance_);
}
inline const ::msg::CSRspVerifyRealName& CSRspBody::verifyrealname() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.VerifyRealName)
  return _internal_verifyrealname();
}
inline void CSRspBody::unsafe_arena_set_allocated_verifyrealname(
    ::msg::CSRspVerifyRealName* verifyrealname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.verifyrealname_);
  }
  _impl_.verifyrealname_ = verifyrealname;
  if (verifyrealname) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.VerifyRealName)
}
inline ::msg::CSRspVerifyRealName* CSRspBody::release_verifyrealname() {
  
  ::msg::CSRspVerifyRealName* temp = _impl_.verifyrealname_;
  _impl_.verifyrealname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspVerifyRealName* CSRspBody::unsafe_arena_release_verifyrealname() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.VerifyRealName)
  
  ::msg::CSRspVerifyRealName* temp = _impl_.verifyrealname_;
  _impl_.verifyrealname_ = nullptr;
  return temp;
}
inline ::msg::CSRspVerifyRealName* CSRspBody::_internal_mutable_verifyrealname() {
  
  if (_impl_.verifyrealname_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspVerifyRealName>(GetArenaForAllocation());
    _impl_.verifyrealname_ = p;
  }
  return _impl_.verifyrealname_;
}
inline ::msg::CSRspVerifyRealName* CSRspBody::mutable_verifyrealname() {
  ::msg::CSRspVerifyRealName* _msg = _internal_mutable_verifyrealname();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.VerifyRealName)
  return _msg;
}
inline void CSRspBody::set_allocated_verifyrealname(::msg::CSRspVerifyRealName* verifyrealname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.verifyrealname_);
  }
  if (verifyrealname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(verifyrealname));
    if (message_arena != submessage_arena) {
      verifyrealname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verifyrealname, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.verifyrealname_ = verifyrealname;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.VerifyRealName)
}

// .msg.CSRspFakePay FakePay = 351;
inline bool CSRspBody::_internal_has_fakepay() const {
  return this != internal_default_instance() && _impl_.fakepay_ != nullptr;
}
inline bool CSRspBody::has_fakepay() const {
  return _internal_has_fakepay();
}
inline const ::msg::CSRspFakePay& CSRspBody::_internal_fakepay() const {
  const ::msg::CSRspFakePay* p = _impl_.fakepay_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspFakePay&>(
      ::msg::_CSRspFakePay_default_instance_);
}
inline const ::msg::CSRspFakePay& CSRspBody::fakepay() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.FakePay)
  return _internal_fakepay();
}
inline void CSRspBody::unsafe_arena_set_allocated_fakepay(
    ::msg::CSRspFakePay* fakepay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fakepay_);
  }
  _impl_.fakepay_ = fakepay;
  if (fakepay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.FakePay)
}
inline ::msg::CSRspFakePay* CSRspBody::release_fakepay() {
  
  ::msg::CSRspFakePay* temp = _impl_.fakepay_;
  _impl_.fakepay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspFakePay* CSRspBody::unsafe_arena_release_fakepay() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.FakePay)
  
  ::msg::CSRspFakePay* temp = _impl_.fakepay_;
  _impl_.fakepay_ = nullptr;
  return temp;
}
inline ::msg::CSRspFakePay* CSRspBody::_internal_mutable_fakepay() {
  
  if (_impl_.fakepay_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspFakePay>(GetArenaForAllocation());
    _impl_.fakepay_ = p;
  }
  return _impl_.fakepay_;
}
inline ::msg::CSRspFakePay* CSRspBody::mutable_fakepay() {
  ::msg::CSRspFakePay* _msg = _internal_mutable_fakepay();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.FakePay)
  return _msg;
}
inline void CSRspBody::set_allocated_fakepay(::msg::CSRspFakePay* fakepay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fakepay_);
  }
  if (fakepay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fakepay));
    if (message_arena != submessage_arena) {
      fakepay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fakepay, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fakepay_ = fakepay;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.FakePay)
}

// .msg.CSRspGuildCreate GuildCreate = 360;
inline bool CSRspBody::_internal_has_guildcreate() const {
  return this != internal_default_instance() && _impl_.guildcreate_ != nullptr;
}
inline bool CSRspBody::has_guildcreate() const {
  return _internal_has_guildcreate();
}
inline const ::msg::CSRspGuildCreate& CSRspBody::_internal_guildcreate() const {
  const ::msg::CSRspGuildCreate* p = _impl_.guildcreate_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGuildCreate&>(
      ::msg::_CSRspGuildCreate_default_instance_);
}
inline const ::msg::CSRspGuildCreate& CSRspBody::guildcreate() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GuildCreate)
  return _internal_guildcreate();
}
inline void CSRspBody::unsafe_arena_set_allocated_guildcreate(
    ::msg::CSRspGuildCreate* guildcreate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildcreate_);
  }
  _impl_.guildcreate_ = guildcreate;
  if (guildcreate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GuildCreate)
}
inline ::msg::CSRspGuildCreate* CSRspBody::release_guildcreate() {
  
  ::msg::CSRspGuildCreate* temp = _impl_.guildcreate_;
  _impl_.guildcreate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGuildCreate* CSRspBody::unsafe_arena_release_guildcreate() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GuildCreate)
  
  ::msg::CSRspGuildCreate* temp = _impl_.guildcreate_;
  _impl_.guildcreate_ = nullptr;
  return temp;
}
inline ::msg::CSRspGuildCreate* CSRspBody::_internal_mutable_guildcreate() {
  
  if (_impl_.guildcreate_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGuildCreate>(GetArenaForAllocation());
    _impl_.guildcreate_ = p;
  }
  return _impl_.guildcreate_;
}
inline ::msg::CSRspGuildCreate* CSRspBody::mutable_guildcreate() {
  ::msg::CSRspGuildCreate* _msg = _internal_mutable_guildcreate();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GuildCreate)
  return _msg;
}
inline void CSRspBody::set_allocated_guildcreate(::msg::CSRspGuildCreate* guildcreate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildcreate_);
  }
  if (guildcreate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildcreate));
    if (message_arena != submessage_arena) {
      guildcreate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildcreate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildcreate_ = guildcreate;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GuildCreate)
}

// .msg.CSRspGuildApply GuildApply = 361;
inline bool CSRspBody::_internal_has_guildapply() const {
  return this != internal_default_instance() && _impl_.guildapply_ != nullptr;
}
inline bool CSRspBody::has_guildapply() const {
  return _internal_has_guildapply();
}
inline const ::msg::CSRspGuildApply& CSRspBody::_internal_guildapply() const {
  const ::msg::CSRspGuildApply* p = _impl_.guildapply_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGuildApply&>(
      ::msg::_CSRspGuildApply_default_instance_);
}
inline const ::msg::CSRspGuildApply& CSRspBody::guildapply() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GuildApply)
  return _internal_guildapply();
}
inline void CSRspBody::unsafe_arena_set_allocated_guildapply(
    ::msg::CSRspGuildApply* guildapply) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildapply_);
  }
  _impl_.guildapply_ = guildapply;
  if (guildapply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GuildApply)
}
inline ::msg::CSRspGuildApply* CSRspBody::release_guildapply() {
  
  ::msg::CSRspGuildApply* temp = _impl_.guildapply_;
  _impl_.guildapply_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGuildApply* CSRspBody::unsafe_arena_release_guildapply() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GuildApply)
  
  ::msg::CSRspGuildApply* temp = _impl_.guildapply_;
  _impl_.guildapply_ = nullptr;
  return temp;
}
inline ::msg::CSRspGuildApply* CSRspBody::_internal_mutable_guildapply() {
  
  if (_impl_.guildapply_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGuildApply>(GetArenaForAllocation());
    _impl_.guildapply_ = p;
  }
  return _impl_.guildapply_;
}
inline ::msg::CSRspGuildApply* CSRspBody::mutable_guildapply() {
  ::msg::CSRspGuildApply* _msg = _internal_mutable_guildapply();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GuildApply)
  return _msg;
}
inline void CSRspBody::set_allocated_guildapply(::msg::CSRspGuildApply* guildapply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildapply_);
  }
  if (guildapply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildapply));
    if (message_arena != submessage_arena) {
      guildapply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildapply, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildapply_ = guildapply;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GuildApply)
}

// .msg.CSRspGuildHome GuildHome = 362;
inline bool CSRspBody::_internal_has_guildhome() const {
  return this != internal_default_instance() && _impl_.guildhome_ != nullptr;
}
inline bool CSRspBody::has_guildhome() const {
  return _internal_has_guildhome();
}
inline const ::msg::CSRspGuildHome& CSRspBody::_internal_guildhome() const {
  const ::msg::CSRspGuildHome* p = _impl_.guildhome_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGuildHome&>(
      ::msg::_CSRspGuildHome_default_instance_);
}
inline const ::msg::CSRspGuildHome& CSRspBody::guildhome() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GuildHome)
  return _internal_guildhome();
}
inline void CSRspBody::unsafe_arena_set_allocated_guildhome(
    ::msg::CSRspGuildHome* guildhome) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildhome_);
  }
  _impl_.guildhome_ = guildhome;
  if (guildhome) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GuildHome)
}
inline ::msg::CSRspGuildHome* CSRspBody::release_guildhome() {
  
  ::msg::CSRspGuildHome* temp = _impl_.guildhome_;
  _impl_.guildhome_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGuildHome* CSRspBody::unsafe_arena_release_guildhome() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GuildHome)
  
  ::msg::CSRspGuildHome* temp = _impl_.guildhome_;
  _impl_.guildhome_ = nullptr;
  return temp;
}
inline ::msg::CSRspGuildHome* CSRspBody::_internal_mutable_guildhome() {
  
  if (_impl_.guildhome_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGuildHome>(GetArenaForAllocation());
    _impl_.guildhome_ = p;
  }
  return _impl_.guildhome_;
}
inline ::msg::CSRspGuildHome* CSRspBody::mutable_guildhome() {
  ::msg::CSRspGuildHome* _msg = _internal_mutable_guildhome();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GuildHome)
  return _msg;
}
inline void CSRspBody::set_allocated_guildhome(::msg::CSRspGuildHome* guildhome) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildhome_);
  }
  if (guildhome) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildhome));
    if (message_arena != submessage_arena) {
      guildhome = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildhome, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildhome_ = guildhome;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GuildHome)
}

// .msg.CSRspGuildInfo GuildInfo = 364;
inline bool CSRspBody::_internal_has_guildinfo() const {
  return this != internal_default_instance() && _impl_.guildinfo_ != nullptr;
}
inline bool CSRspBody::has_guildinfo() const {
  return _internal_has_guildinfo();
}
inline const ::msg::CSRspGuildInfo& CSRspBody::_internal_guildinfo() const {
  const ::msg::CSRspGuildInfo* p = _impl_.guildinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGuildInfo&>(
      ::msg::_CSRspGuildInfo_default_instance_);
}
inline const ::msg::CSRspGuildInfo& CSRspBody::guildinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GuildInfo)
  return _internal_guildinfo();
}
inline void CSRspBody::unsafe_arena_set_allocated_guildinfo(
    ::msg::CSRspGuildInfo* guildinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildinfo_);
  }
  _impl_.guildinfo_ = guildinfo;
  if (guildinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GuildInfo)
}
inline ::msg::CSRspGuildInfo* CSRspBody::release_guildinfo() {
  
  ::msg::CSRspGuildInfo* temp = _impl_.guildinfo_;
  _impl_.guildinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGuildInfo* CSRspBody::unsafe_arena_release_guildinfo() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GuildInfo)
  
  ::msg::CSRspGuildInfo* temp = _impl_.guildinfo_;
  _impl_.guildinfo_ = nullptr;
  return temp;
}
inline ::msg::CSRspGuildInfo* CSRspBody::_internal_mutable_guildinfo() {
  
  if (_impl_.guildinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGuildInfo>(GetArenaForAllocation());
    _impl_.guildinfo_ = p;
  }
  return _impl_.guildinfo_;
}
inline ::msg::CSRspGuildInfo* CSRspBody::mutable_guildinfo() {
  ::msg::CSRspGuildInfo* _msg = _internal_mutable_guildinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GuildInfo)
  return _msg;
}
inline void CSRspBody::set_allocated_guildinfo(::msg::CSRspGuildInfo* guildinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildinfo_);
  }
  if (guildinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildinfo));
    if (message_arena != submessage_arena) {
      guildinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildinfo_ = guildinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GuildInfo)
}

// .msg.CSRspGuildApprove GuildApprove = 365;
inline bool CSRspBody::_internal_has_guildapprove() const {
  return this != internal_default_instance() && _impl_.guildapprove_ != nullptr;
}
inline bool CSRspBody::has_guildapprove() const {
  return _internal_has_guildapprove();
}
inline const ::msg::CSRspGuildApprove& CSRspBody::_internal_guildapprove() const {
  const ::msg::CSRspGuildApprove* p = _impl_.guildapprove_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGuildApprove&>(
      ::msg::_CSRspGuildApprove_default_instance_);
}
inline const ::msg::CSRspGuildApprove& CSRspBody::guildapprove() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GuildApprove)
  return _internal_guildapprove();
}
inline void CSRspBody::unsafe_arena_set_allocated_guildapprove(
    ::msg::CSRspGuildApprove* guildapprove) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildapprove_);
  }
  _impl_.guildapprove_ = guildapprove;
  if (guildapprove) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GuildApprove)
}
inline ::msg::CSRspGuildApprove* CSRspBody::release_guildapprove() {
  
  ::msg::CSRspGuildApprove* temp = _impl_.guildapprove_;
  _impl_.guildapprove_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGuildApprove* CSRspBody::unsafe_arena_release_guildapprove() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GuildApprove)
  
  ::msg::CSRspGuildApprove* temp = _impl_.guildapprove_;
  _impl_.guildapprove_ = nullptr;
  return temp;
}
inline ::msg::CSRspGuildApprove* CSRspBody::_internal_mutable_guildapprove() {
  
  if (_impl_.guildapprove_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGuildApprove>(GetArenaForAllocation());
    _impl_.guildapprove_ = p;
  }
  return _impl_.guildapprove_;
}
inline ::msg::CSRspGuildApprove* CSRspBody::mutable_guildapprove() {
  ::msg::CSRspGuildApprove* _msg = _internal_mutable_guildapprove();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GuildApprove)
  return _msg;
}
inline void CSRspBody::set_allocated_guildapprove(::msg::CSRspGuildApprove* guildapprove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildapprove_);
  }
  if (guildapprove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildapprove));
    if (message_arena != submessage_arena) {
      guildapprove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildapprove, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildapprove_ = guildapprove;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GuildApprove)
}

// .msg.CSRspGuildSetRole GuildRole = 366;
inline bool CSRspBody::_internal_has_guildrole() const {
  return this != internal_default_instance() && _impl_.guildrole_ != nullptr;
}
inline bool CSRspBody::has_guildrole() const {
  return _internal_has_guildrole();
}
inline const ::msg::CSRspGuildSetRole& CSRspBody::_internal_guildrole() const {
  const ::msg::CSRspGuildSetRole* p = _impl_.guildrole_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGuildSetRole&>(
      ::msg::_CSRspGuildSetRole_default_instance_);
}
inline const ::msg::CSRspGuildSetRole& CSRspBody::guildrole() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GuildRole)
  return _internal_guildrole();
}
inline void CSRspBody::unsafe_arena_set_allocated_guildrole(
    ::msg::CSRspGuildSetRole* guildrole) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildrole_);
  }
  _impl_.guildrole_ = guildrole;
  if (guildrole) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GuildRole)
}
inline ::msg::CSRspGuildSetRole* CSRspBody::release_guildrole() {
  
  ::msg::CSRspGuildSetRole* temp = _impl_.guildrole_;
  _impl_.guildrole_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGuildSetRole* CSRspBody::unsafe_arena_release_guildrole() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GuildRole)
  
  ::msg::CSRspGuildSetRole* temp = _impl_.guildrole_;
  _impl_.guildrole_ = nullptr;
  return temp;
}
inline ::msg::CSRspGuildSetRole* CSRspBody::_internal_mutable_guildrole() {
  
  if (_impl_.guildrole_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGuildSetRole>(GetArenaForAllocation());
    _impl_.guildrole_ = p;
  }
  return _impl_.guildrole_;
}
inline ::msg::CSRspGuildSetRole* CSRspBody::mutable_guildrole() {
  ::msg::CSRspGuildSetRole* _msg = _internal_mutable_guildrole();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GuildRole)
  return _msg;
}
inline void CSRspBody::set_allocated_guildrole(::msg::CSRspGuildSetRole* guildrole) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildrole_);
  }
  if (guildrole) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildrole));
    if (message_arena != submessage_arena) {
      guildrole = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildrole, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildrole_ = guildrole;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GuildRole)
}

// .msg.CSRspGuildModify GuildModify = 367;
inline bool CSRspBody::_internal_has_guildmodify() const {
  return this != internal_default_instance() && _impl_.guildmodify_ != nullptr;
}
inline bool CSRspBody::has_guildmodify() const {
  return _internal_has_guildmodify();
}
inline const ::msg::CSRspGuildModify& CSRspBody::_internal_guildmodify() const {
  const ::msg::CSRspGuildModify* p = _impl_.guildmodify_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGuildModify&>(
      ::msg::_CSRspGuildModify_default_instance_);
}
inline const ::msg::CSRspGuildModify& CSRspBody::guildmodify() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GuildModify)
  return _internal_guildmodify();
}
inline void CSRspBody::unsafe_arena_set_allocated_guildmodify(
    ::msg::CSRspGuildModify* guildmodify) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildmodify_);
  }
  _impl_.guildmodify_ = guildmodify;
  if (guildmodify) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GuildModify)
}
inline ::msg::CSRspGuildModify* CSRspBody::release_guildmodify() {
  
  ::msg::CSRspGuildModify* temp = _impl_.guildmodify_;
  _impl_.guildmodify_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGuildModify* CSRspBody::unsafe_arena_release_guildmodify() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GuildModify)
  
  ::msg::CSRspGuildModify* temp = _impl_.guildmodify_;
  _impl_.guildmodify_ = nullptr;
  return temp;
}
inline ::msg::CSRspGuildModify* CSRspBody::_internal_mutable_guildmodify() {
  
  if (_impl_.guildmodify_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGuildModify>(GetArenaForAllocation());
    _impl_.guildmodify_ = p;
  }
  return _impl_.guildmodify_;
}
inline ::msg::CSRspGuildModify* CSRspBody::mutable_guildmodify() {
  ::msg::CSRspGuildModify* _msg = _internal_mutable_guildmodify();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GuildModify)
  return _msg;
}
inline void CSRspBody::set_allocated_guildmodify(::msg::CSRspGuildModify* guildmodify) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildmodify_);
  }
  if (guildmodify) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildmodify));
    if (message_arena != submessage_arena) {
      guildmodify = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildmodify, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildmodify_ = guildmodify;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GuildModify)
}

// .msg.CSRspGuildKickoff GuildKickoff = 368;
inline bool CSRspBody::_internal_has_guildkickoff() const {
  return this != internal_default_instance() && _impl_.guildkickoff_ != nullptr;
}
inline bool CSRspBody::has_guildkickoff() const {
  return _internal_has_guildkickoff();
}
inline const ::msg::CSRspGuildKickoff& CSRspBody::_internal_guildkickoff() const {
  const ::msg::CSRspGuildKickoff* p = _impl_.guildkickoff_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGuildKickoff&>(
      ::msg::_CSRspGuildKickoff_default_instance_);
}
inline const ::msg::CSRspGuildKickoff& CSRspBody::guildkickoff() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GuildKickoff)
  return _internal_guildkickoff();
}
inline void CSRspBody::unsafe_arena_set_allocated_guildkickoff(
    ::msg::CSRspGuildKickoff* guildkickoff) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildkickoff_);
  }
  _impl_.guildkickoff_ = guildkickoff;
  if (guildkickoff) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GuildKickoff)
}
inline ::msg::CSRspGuildKickoff* CSRspBody::release_guildkickoff() {
  
  ::msg::CSRspGuildKickoff* temp = _impl_.guildkickoff_;
  _impl_.guildkickoff_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGuildKickoff* CSRspBody::unsafe_arena_release_guildkickoff() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GuildKickoff)
  
  ::msg::CSRspGuildKickoff* temp = _impl_.guildkickoff_;
  _impl_.guildkickoff_ = nullptr;
  return temp;
}
inline ::msg::CSRspGuildKickoff* CSRspBody::_internal_mutable_guildkickoff() {
  
  if (_impl_.guildkickoff_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGuildKickoff>(GetArenaForAllocation());
    _impl_.guildkickoff_ = p;
  }
  return _impl_.guildkickoff_;
}
inline ::msg::CSRspGuildKickoff* CSRspBody::mutable_guildkickoff() {
  ::msg::CSRspGuildKickoff* _msg = _internal_mutable_guildkickoff();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GuildKickoff)
  return _msg;
}
inline void CSRspBody::set_allocated_guildkickoff(::msg::CSRspGuildKickoff* guildkickoff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildkickoff_);
  }
  if (guildkickoff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildkickoff));
    if (message_arena != submessage_arena) {
      guildkickoff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildkickoff, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildkickoff_ = guildkickoff;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GuildKickoff)
}

// .msg.CSRspGuildDismiss GuildDismiss = 369;
inline bool CSRspBody::_internal_has_guilddismiss() const {
  return this != internal_default_instance() && _impl_.guilddismiss_ != nullptr;
}
inline bool CSRspBody::has_guilddismiss() const {
  return _internal_has_guilddismiss();
}
inline const ::msg::CSRspGuildDismiss& CSRspBody::_internal_guilddismiss() const {
  const ::msg::CSRspGuildDismiss* p = _impl_.guilddismiss_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGuildDismiss&>(
      ::msg::_CSRspGuildDismiss_default_instance_);
}
inline const ::msg::CSRspGuildDismiss& CSRspBody::guilddismiss() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GuildDismiss)
  return _internal_guilddismiss();
}
inline void CSRspBody::unsafe_arena_set_allocated_guilddismiss(
    ::msg::CSRspGuildDismiss* guilddismiss) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guilddismiss_);
  }
  _impl_.guilddismiss_ = guilddismiss;
  if (guilddismiss) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GuildDismiss)
}
inline ::msg::CSRspGuildDismiss* CSRspBody::release_guilddismiss() {
  
  ::msg::CSRspGuildDismiss* temp = _impl_.guilddismiss_;
  _impl_.guilddismiss_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGuildDismiss* CSRspBody::unsafe_arena_release_guilddismiss() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GuildDismiss)
  
  ::msg::CSRspGuildDismiss* temp = _impl_.guilddismiss_;
  _impl_.guilddismiss_ = nullptr;
  return temp;
}
inline ::msg::CSRspGuildDismiss* CSRspBody::_internal_mutable_guilddismiss() {
  
  if (_impl_.guilddismiss_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGuildDismiss>(GetArenaForAllocation());
    _impl_.guilddismiss_ = p;
  }
  return _impl_.guilddismiss_;
}
inline ::msg::CSRspGuildDismiss* CSRspBody::mutable_guilddismiss() {
  ::msg::CSRspGuildDismiss* _msg = _internal_mutable_guilddismiss();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GuildDismiss)
  return _msg;
}
inline void CSRspBody::set_allocated_guilddismiss(::msg::CSRspGuildDismiss* guilddismiss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guilddismiss_);
  }
  if (guilddismiss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guilddismiss));
    if (message_arena != submessage_arena) {
      guilddismiss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guilddismiss, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guilddismiss_ = guilddismiss;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GuildDismiss)
}

// .msg.CSRspGuildExit GuildExit = 370;
inline bool CSRspBody::_internal_has_guildexit() const {
  return this != internal_default_instance() && _impl_.guildexit_ != nullptr;
}
inline bool CSRspBody::has_guildexit() const {
  return _internal_has_guildexit();
}
inline const ::msg::CSRspGuildExit& CSRspBody::_internal_guildexit() const {
  const ::msg::CSRspGuildExit* p = _impl_.guildexit_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGuildExit&>(
      ::msg::_CSRspGuildExit_default_instance_);
}
inline const ::msg::CSRspGuildExit& CSRspBody::guildexit() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GuildExit)
  return _internal_guildexit();
}
inline void CSRspBody::unsafe_arena_set_allocated_guildexit(
    ::msg::CSRspGuildExit* guildexit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildexit_);
  }
  _impl_.guildexit_ = guildexit;
  if (guildexit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GuildExit)
}
inline ::msg::CSRspGuildExit* CSRspBody::release_guildexit() {
  
  ::msg::CSRspGuildExit* temp = _impl_.guildexit_;
  _impl_.guildexit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGuildExit* CSRspBody::unsafe_arena_release_guildexit() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GuildExit)
  
  ::msg::CSRspGuildExit* temp = _impl_.guildexit_;
  _impl_.guildexit_ = nullptr;
  return temp;
}
inline ::msg::CSRspGuildExit* CSRspBody::_internal_mutable_guildexit() {
  
  if (_impl_.guildexit_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGuildExit>(GetArenaForAllocation());
    _impl_.guildexit_ = p;
  }
  return _impl_.guildexit_;
}
inline ::msg::CSRspGuildExit* CSRspBody::mutable_guildexit() {
  ::msg::CSRspGuildExit* _msg = _internal_mutable_guildexit();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GuildExit)
  return _msg;
}
inline void CSRspBody::set_allocated_guildexit(::msg::CSRspGuildExit* guildexit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildexit_);
  }
  if (guildexit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildexit));
    if (message_arena != submessage_arena) {
      guildexit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildexit, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildexit_ = guildexit;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GuildExit)
}

// .msg.CSRspGuildChat GuildChat = 371;
inline bool CSRspBody::_internal_has_guildchat() const {
  return this != internal_default_instance() && _impl_.guildchat_ != nullptr;
}
inline bool CSRspBody::has_guildchat() const {
  return _internal_has_guildchat();
}
inline const ::msg::CSRspGuildChat& CSRspBody::_internal_guildchat() const {
  const ::msg::CSRspGuildChat* p = _impl_.guildchat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGuildChat&>(
      ::msg::_CSRspGuildChat_default_instance_);
}
inline const ::msg::CSRspGuildChat& CSRspBody::guildchat() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GuildChat)
  return _internal_guildchat();
}
inline void CSRspBody::unsafe_arena_set_allocated_guildchat(
    ::msg::CSRspGuildChat* guildchat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildchat_);
  }
  _impl_.guildchat_ = guildchat;
  if (guildchat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GuildChat)
}
inline ::msg::CSRspGuildChat* CSRspBody::release_guildchat() {
  
  ::msg::CSRspGuildChat* temp = _impl_.guildchat_;
  _impl_.guildchat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGuildChat* CSRspBody::unsafe_arena_release_guildchat() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GuildChat)
  
  ::msg::CSRspGuildChat* temp = _impl_.guildchat_;
  _impl_.guildchat_ = nullptr;
  return temp;
}
inline ::msg::CSRspGuildChat* CSRspBody::_internal_mutable_guildchat() {
  
  if (_impl_.guildchat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGuildChat>(GetArenaForAllocation());
    _impl_.guildchat_ = p;
  }
  return _impl_.guildchat_;
}
inline ::msg::CSRspGuildChat* CSRspBody::mutable_guildchat() {
  ::msg::CSRspGuildChat* _msg = _internal_mutable_guildchat();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GuildChat)
  return _msg;
}
inline void CSRspBody::set_allocated_guildchat(::msg::CSRspGuildChat* guildchat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildchat_);
  }
  if (guildchat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildchat));
    if (message_arena != submessage_arena) {
      guildchat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildchat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildchat_ = guildchat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GuildChat)
}

// .msg.CSRspGuildList GuildList = 372;
inline bool CSRspBody::_internal_has_guildlist() const {
  return this != internal_default_instance() && _impl_.guildlist_ != nullptr;
}
inline bool CSRspBody::has_guildlist() const {
  return _internal_has_guildlist();
}
inline const ::msg::CSRspGuildList& CSRspBody::_internal_guildlist() const {
  const ::msg::CSRspGuildList* p = _impl_.guildlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGuildList&>(
      ::msg::_CSRspGuildList_default_instance_);
}
inline const ::msg::CSRspGuildList& CSRspBody::guildlist() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GuildList)
  return _internal_guildlist();
}
inline void CSRspBody::unsafe_arena_set_allocated_guildlist(
    ::msg::CSRspGuildList* guildlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildlist_);
  }
  _impl_.guildlist_ = guildlist;
  if (guildlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GuildList)
}
inline ::msg::CSRspGuildList* CSRspBody::release_guildlist() {
  
  ::msg::CSRspGuildList* temp = _impl_.guildlist_;
  _impl_.guildlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGuildList* CSRspBody::unsafe_arena_release_guildlist() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GuildList)
  
  ::msg::CSRspGuildList* temp = _impl_.guildlist_;
  _impl_.guildlist_ = nullptr;
  return temp;
}
inline ::msg::CSRspGuildList* CSRspBody::_internal_mutable_guildlist() {
  
  if (_impl_.guildlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGuildList>(GetArenaForAllocation());
    _impl_.guildlist_ = p;
  }
  return _impl_.guildlist_;
}
inline ::msg::CSRspGuildList* CSRspBody::mutable_guildlist() {
  ::msg::CSRspGuildList* _msg = _internal_mutable_guildlist();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GuildList)
  return _msg;
}
inline void CSRspBody::set_allocated_guildlist(::msg::CSRspGuildList* guildlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildlist_);
  }
  if (guildlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildlist));
    if (message_arena != submessage_arena) {
      guildlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildlist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildlist_ = guildlist;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GuildList)
}

// .msg.CSRspGuildRecommendPlayers GuildRecommendPlayers = 373;
inline bool CSRspBody::_internal_has_guildrecommendplayers() const {
  return this != internal_default_instance() && _impl_.guildrecommendplayers_ != nullptr;
}
inline bool CSRspBody::has_guildrecommendplayers() const {
  return _internal_has_guildrecommendplayers();
}
inline const ::msg::CSRspGuildRecommendPlayers& CSRspBody::_internal_guildrecommendplayers() const {
  const ::msg::CSRspGuildRecommendPlayers* p = _impl_.guildrecommendplayers_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGuildRecommendPlayers&>(
      ::msg::_CSRspGuildRecommendPlayers_default_instance_);
}
inline const ::msg::CSRspGuildRecommendPlayers& CSRspBody::guildrecommendplayers() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GuildRecommendPlayers)
  return _internal_guildrecommendplayers();
}
inline void CSRspBody::unsafe_arena_set_allocated_guildrecommendplayers(
    ::msg::CSRspGuildRecommendPlayers* guildrecommendplayers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildrecommendplayers_);
  }
  _impl_.guildrecommendplayers_ = guildrecommendplayers;
  if (guildrecommendplayers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GuildRecommendPlayers)
}
inline ::msg::CSRspGuildRecommendPlayers* CSRspBody::release_guildrecommendplayers() {
  
  ::msg::CSRspGuildRecommendPlayers* temp = _impl_.guildrecommendplayers_;
  _impl_.guildrecommendplayers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGuildRecommendPlayers* CSRspBody::unsafe_arena_release_guildrecommendplayers() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GuildRecommendPlayers)
  
  ::msg::CSRspGuildRecommendPlayers* temp = _impl_.guildrecommendplayers_;
  _impl_.guildrecommendplayers_ = nullptr;
  return temp;
}
inline ::msg::CSRspGuildRecommendPlayers* CSRspBody::_internal_mutable_guildrecommendplayers() {
  
  if (_impl_.guildrecommendplayers_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGuildRecommendPlayers>(GetArenaForAllocation());
    _impl_.guildrecommendplayers_ = p;
  }
  return _impl_.guildrecommendplayers_;
}
inline ::msg::CSRspGuildRecommendPlayers* CSRspBody::mutable_guildrecommendplayers() {
  ::msg::CSRspGuildRecommendPlayers* _msg = _internal_mutable_guildrecommendplayers();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GuildRecommendPlayers)
  return _msg;
}
inline void CSRspBody::set_allocated_guildrecommendplayers(::msg::CSRspGuildRecommendPlayers* guildrecommendplayers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildrecommendplayers_);
  }
  if (guildrecommendplayers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildrecommendplayers));
    if (message_arena != submessage_arena) {
      guildrecommendplayers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildrecommendplayers, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildrecommendplayers_ = guildrecommendplayers;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GuildRecommendPlayers)
}

// .msg.CSRspGuildInviteList GuildInviteList = 374;
inline bool CSRspBody::_internal_has_guildinvitelist() const {
  return this != internal_default_instance() && _impl_.guildinvitelist_ != nullptr;
}
inline bool CSRspBody::has_guildinvitelist() const {
  return _internal_has_guildinvitelist();
}
inline const ::msg::CSRspGuildInviteList& CSRspBody::_internal_guildinvitelist() const {
  const ::msg::CSRspGuildInviteList* p = _impl_.guildinvitelist_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGuildInviteList&>(
      ::msg::_CSRspGuildInviteList_default_instance_);
}
inline const ::msg::CSRspGuildInviteList& CSRspBody::guildinvitelist() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GuildInviteList)
  return _internal_guildinvitelist();
}
inline void CSRspBody::unsafe_arena_set_allocated_guildinvitelist(
    ::msg::CSRspGuildInviteList* guildinvitelist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildinvitelist_);
  }
  _impl_.guildinvitelist_ = guildinvitelist;
  if (guildinvitelist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GuildInviteList)
}
inline ::msg::CSRspGuildInviteList* CSRspBody::release_guildinvitelist() {
  
  ::msg::CSRspGuildInviteList* temp = _impl_.guildinvitelist_;
  _impl_.guildinvitelist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGuildInviteList* CSRspBody::unsafe_arena_release_guildinvitelist() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GuildInviteList)
  
  ::msg::CSRspGuildInviteList* temp = _impl_.guildinvitelist_;
  _impl_.guildinvitelist_ = nullptr;
  return temp;
}
inline ::msg::CSRspGuildInviteList* CSRspBody::_internal_mutable_guildinvitelist() {
  
  if (_impl_.guildinvitelist_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGuildInviteList>(GetArenaForAllocation());
    _impl_.guildinvitelist_ = p;
  }
  return _impl_.guildinvitelist_;
}
inline ::msg::CSRspGuildInviteList* CSRspBody::mutable_guildinvitelist() {
  ::msg::CSRspGuildInviteList* _msg = _internal_mutable_guildinvitelist();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GuildInviteList)
  return _msg;
}
inline void CSRspBody::set_allocated_guildinvitelist(::msg::CSRspGuildInviteList* guildinvitelist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildinvitelist_);
  }
  if (guildinvitelist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildinvitelist));
    if (message_arena != submessage_arena) {
      guildinvitelist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildinvitelist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildinvitelist_ = guildinvitelist;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GuildInviteList)
}

// .msg.CSRspGuildInvite GuildInvite = 375;
inline bool CSRspBody::_internal_has_guildinvite() const {
  return this != internal_default_instance() && _impl_.guildinvite_ != nullptr;
}
inline bool CSRspBody::has_guildinvite() const {
  return _internal_has_guildinvite();
}
inline const ::msg::CSRspGuildInvite& CSRspBody::_internal_guildinvite() const {
  const ::msg::CSRspGuildInvite* p = _impl_.guildinvite_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGuildInvite&>(
      ::msg::_CSRspGuildInvite_default_instance_);
}
inline const ::msg::CSRspGuildInvite& CSRspBody::guildinvite() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GuildInvite)
  return _internal_guildinvite();
}
inline void CSRspBody::unsafe_arena_set_allocated_guildinvite(
    ::msg::CSRspGuildInvite* guildinvite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildinvite_);
  }
  _impl_.guildinvite_ = guildinvite;
  if (guildinvite) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GuildInvite)
}
inline ::msg::CSRspGuildInvite* CSRspBody::release_guildinvite() {
  
  ::msg::CSRspGuildInvite* temp = _impl_.guildinvite_;
  _impl_.guildinvite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGuildInvite* CSRspBody::unsafe_arena_release_guildinvite() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GuildInvite)
  
  ::msg::CSRspGuildInvite* temp = _impl_.guildinvite_;
  _impl_.guildinvite_ = nullptr;
  return temp;
}
inline ::msg::CSRspGuildInvite* CSRspBody::_internal_mutable_guildinvite() {
  
  if (_impl_.guildinvite_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGuildInvite>(GetArenaForAllocation());
    _impl_.guildinvite_ = p;
  }
  return _impl_.guildinvite_;
}
inline ::msg::CSRspGuildInvite* CSRspBody::mutable_guildinvite() {
  ::msg::CSRspGuildInvite* _msg = _internal_mutable_guildinvite();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GuildInvite)
  return _msg;
}
inline void CSRspBody::set_allocated_guildinvite(::msg::CSRspGuildInvite* guildinvite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildinvite_);
  }
  if (guildinvite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildinvite));
    if (message_arena != submessage_arena) {
      guildinvite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildinvite, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildinvite_ = guildinvite;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GuildInvite)
}

// .msg.CSRspGuildRejectInvite GuildRejectInvite = 377;
inline bool CSRspBody::_internal_has_guildrejectinvite() const {
  return this != internal_default_instance() && _impl_.guildrejectinvite_ != nullptr;
}
inline bool CSRspBody::has_guildrejectinvite() const {
  return _internal_has_guildrejectinvite();
}
inline const ::msg::CSRspGuildRejectInvite& CSRspBody::_internal_guildrejectinvite() const {
  const ::msg::CSRspGuildRejectInvite* p = _impl_.guildrejectinvite_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGuildRejectInvite&>(
      ::msg::_CSRspGuildRejectInvite_default_instance_);
}
inline const ::msg::CSRspGuildRejectInvite& CSRspBody::guildrejectinvite() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GuildRejectInvite)
  return _internal_guildrejectinvite();
}
inline void CSRspBody::unsafe_arena_set_allocated_guildrejectinvite(
    ::msg::CSRspGuildRejectInvite* guildrejectinvite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildrejectinvite_);
  }
  _impl_.guildrejectinvite_ = guildrejectinvite;
  if (guildrejectinvite) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GuildRejectInvite)
}
inline ::msg::CSRspGuildRejectInvite* CSRspBody::release_guildrejectinvite() {
  
  ::msg::CSRspGuildRejectInvite* temp = _impl_.guildrejectinvite_;
  _impl_.guildrejectinvite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGuildRejectInvite* CSRspBody::unsafe_arena_release_guildrejectinvite() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GuildRejectInvite)
  
  ::msg::CSRspGuildRejectInvite* temp = _impl_.guildrejectinvite_;
  _impl_.guildrejectinvite_ = nullptr;
  return temp;
}
inline ::msg::CSRspGuildRejectInvite* CSRspBody::_internal_mutable_guildrejectinvite() {
  
  if (_impl_.guildrejectinvite_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGuildRejectInvite>(GetArenaForAllocation());
    _impl_.guildrejectinvite_ = p;
  }
  return _impl_.guildrejectinvite_;
}
inline ::msg::CSRspGuildRejectInvite* CSRspBody::mutable_guildrejectinvite() {
  ::msg::CSRspGuildRejectInvite* _msg = _internal_mutable_guildrejectinvite();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GuildRejectInvite)
  return _msg;
}
inline void CSRspBody::set_allocated_guildrejectinvite(::msg::CSRspGuildRejectInvite* guildrejectinvite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildrejectinvite_);
  }
  if (guildrejectinvite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildrejectinvite));
    if (message_arena != submessage_arena) {
      guildrejectinvite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildrejectinvite, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildrejectinvite_ = guildrejectinvite;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GuildRejectInvite)
}

// .msg.CSRspGetVngCommentAward GetVngCommentAward = 390;
inline bool CSRspBody::_internal_has_getvngcommentaward() const {
  return this != internal_default_instance() && _impl_.getvngcommentaward_ != nullptr;
}
inline bool CSRspBody::has_getvngcommentaward() const {
  return _internal_has_getvngcommentaward();
}
inline const ::msg::CSRspGetVngCommentAward& CSRspBody::_internal_getvngcommentaward() const {
  const ::msg::CSRspGetVngCommentAward* p = _impl_.getvngcommentaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetVngCommentAward&>(
      ::msg::_CSRspGetVngCommentAward_default_instance_);
}
inline const ::msg::CSRspGetVngCommentAward& CSRspBody::getvngcommentaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetVngCommentAward)
  return _internal_getvngcommentaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_getvngcommentaward(
    ::msg::CSRspGetVngCommentAward* getvngcommentaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getvngcommentaward_);
  }
  _impl_.getvngcommentaward_ = getvngcommentaward;
  if (getvngcommentaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetVngCommentAward)
}
inline ::msg::CSRspGetVngCommentAward* CSRspBody::release_getvngcommentaward() {
  
  ::msg::CSRspGetVngCommentAward* temp = _impl_.getvngcommentaward_;
  _impl_.getvngcommentaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetVngCommentAward* CSRspBody::unsafe_arena_release_getvngcommentaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetVngCommentAward)
  
  ::msg::CSRspGetVngCommentAward* temp = _impl_.getvngcommentaward_;
  _impl_.getvngcommentaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetVngCommentAward* CSRspBody::_internal_mutable_getvngcommentaward() {
  
  if (_impl_.getvngcommentaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetVngCommentAward>(GetArenaForAllocation());
    _impl_.getvngcommentaward_ = p;
  }
  return _impl_.getvngcommentaward_;
}
inline ::msg::CSRspGetVngCommentAward* CSRspBody::mutable_getvngcommentaward() {
  ::msg::CSRspGetVngCommentAward* _msg = _internal_mutable_getvngcommentaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetVngCommentAward)
  return _msg;
}
inline void CSRspBody::set_allocated_getvngcommentaward(::msg::CSRspGetVngCommentAward* getvngcommentaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getvngcommentaward_);
  }
  if (getvngcommentaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getvngcommentaward));
    if (message_arena != submessage_arena) {
      getvngcommentaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getvngcommentaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getvngcommentaward_ = getvngcommentaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetVngCommentAward)
}

// .msg.CSRspLevelupChest LevelupChest = 391;
inline bool CSRspBody::_internal_has_levelupchest() const {
  return this != internal_default_instance() && _impl_.levelupchest_ != nullptr;
}
inline bool CSRspBody::has_levelupchest() const {
  return _internal_has_levelupchest();
}
inline const ::msg::CSRspLevelupChest& CSRspBody::_internal_levelupchest() const {
  const ::msg::CSRspLevelupChest* p = _impl_.levelupchest_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspLevelupChest&>(
      ::msg::_CSRspLevelupChest_default_instance_);
}
inline const ::msg::CSRspLevelupChest& CSRspBody::levelupchest() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.LevelupChest)
  return _internal_levelupchest();
}
inline void CSRspBody::unsafe_arena_set_allocated_levelupchest(
    ::msg::CSRspLevelupChest* levelupchest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.levelupchest_);
  }
  _impl_.levelupchest_ = levelupchest;
  if (levelupchest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.LevelupChest)
}
inline ::msg::CSRspLevelupChest* CSRspBody::release_levelupchest() {
  
  ::msg::CSRspLevelupChest* temp = _impl_.levelupchest_;
  _impl_.levelupchest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspLevelupChest* CSRspBody::unsafe_arena_release_levelupchest() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.LevelupChest)
  
  ::msg::CSRspLevelupChest* temp = _impl_.levelupchest_;
  _impl_.levelupchest_ = nullptr;
  return temp;
}
inline ::msg::CSRspLevelupChest* CSRspBody::_internal_mutable_levelupchest() {
  
  if (_impl_.levelupchest_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspLevelupChest>(GetArenaForAllocation());
    _impl_.levelupchest_ = p;
  }
  return _impl_.levelupchest_;
}
inline ::msg::CSRspLevelupChest* CSRspBody::mutable_levelupchest() {
  ::msg::CSRspLevelupChest* _msg = _internal_mutable_levelupchest();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.LevelupChest)
  return _msg;
}
inline void CSRspBody::set_allocated_levelupchest(::msg::CSRspLevelupChest* levelupchest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.levelupchest_);
  }
  if (levelupchest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(levelupchest));
    if (message_arena != submessage_arena) {
      levelupchest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, levelupchest, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.levelupchest_ = levelupchest;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.LevelupChest)
}

// .msg.CSRspWatchAd WatchAd = 392;
inline bool CSRspBody::_internal_has_watchad() const {
  return this != internal_default_instance() && _impl_.watchad_ != nullptr;
}
inline bool CSRspBody::has_watchad() const {
  return _internal_has_watchad();
}
inline const ::msg::CSRspWatchAd& CSRspBody::_internal_watchad() const {
  const ::msg::CSRspWatchAd* p = _impl_.watchad_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspWatchAd&>(
      ::msg::_CSRspWatchAd_default_instance_);
}
inline const ::msg::CSRspWatchAd& CSRspBody::watchad() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.WatchAd)
  return _internal_watchad();
}
inline void CSRspBody::unsafe_arena_set_allocated_watchad(
    ::msg::CSRspWatchAd* watchad) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.watchad_);
  }
  _impl_.watchad_ = watchad;
  if (watchad) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.WatchAd)
}
inline ::msg::CSRspWatchAd* CSRspBody::release_watchad() {
  
  ::msg::CSRspWatchAd* temp = _impl_.watchad_;
  _impl_.watchad_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspWatchAd* CSRspBody::unsafe_arena_release_watchad() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.WatchAd)
  
  ::msg::CSRspWatchAd* temp = _impl_.watchad_;
  _impl_.watchad_ = nullptr;
  return temp;
}
inline ::msg::CSRspWatchAd* CSRspBody::_internal_mutable_watchad() {
  
  if (_impl_.watchad_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspWatchAd>(GetArenaForAllocation());
    _impl_.watchad_ = p;
  }
  return _impl_.watchad_;
}
inline ::msg::CSRspWatchAd* CSRspBody::mutable_watchad() {
  ::msg::CSRspWatchAd* _msg = _internal_mutable_watchad();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.WatchAd)
  return _msg;
}
inline void CSRspBody::set_allocated_watchad(::msg::CSRspWatchAd* watchad) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.watchad_);
  }
  if (watchad) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(watchad));
    if (message_arena != submessage_arena) {
      watchad = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, watchad, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.watchad_ = watchad;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.WatchAd)
}

// .msg.CSRspQueryPsTournamentRoom PsTournamentRoom = 393;
inline bool CSRspBody::_internal_has_pstournamentroom() const {
  return this != internal_default_instance() && _impl_.pstournamentroom_ != nullptr;
}
inline bool CSRspBody::has_pstournamentroom() const {
  return _internal_has_pstournamentroom();
}
inline const ::msg::CSRspQueryPsTournamentRoom& CSRspBody::_internal_pstournamentroom() const {
  const ::msg::CSRspQueryPsTournamentRoom* p = _impl_.pstournamentroom_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspQueryPsTournamentRoom&>(
      ::msg::_CSRspQueryPsTournamentRoom_default_instance_);
}
inline const ::msg::CSRspQueryPsTournamentRoom& CSRspBody::pstournamentroom() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PsTournamentRoom)
  return _internal_pstournamentroom();
}
inline void CSRspBody::unsafe_arena_set_allocated_pstournamentroom(
    ::msg::CSRspQueryPsTournamentRoom* pstournamentroom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pstournamentroom_);
  }
  _impl_.pstournamentroom_ = pstournamentroom;
  if (pstournamentroom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PsTournamentRoom)
}
inline ::msg::CSRspQueryPsTournamentRoom* CSRspBody::release_pstournamentroom() {
  
  ::msg::CSRspQueryPsTournamentRoom* temp = _impl_.pstournamentroom_;
  _impl_.pstournamentroom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspQueryPsTournamentRoom* CSRspBody::unsafe_arena_release_pstournamentroom() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PsTournamentRoom)
  
  ::msg::CSRspQueryPsTournamentRoom* temp = _impl_.pstournamentroom_;
  _impl_.pstournamentroom_ = nullptr;
  return temp;
}
inline ::msg::CSRspQueryPsTournamentRoom* CSRspBody::_internal_mutable_pstournamentroom() {
  
  if (_impl_.pstournamentroom_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspQueryPsTournamentRoom>(GetArenaForAllocation());
    _impl_.pstournamentroom_ = p;
  }
  return _impl_.pstournamentroom_;
}
inline ::msg::CSRspQueryPsTournamentRoom* CSRspBody::mutable_pstournamentroom() {
  ::msg::CSRspQueryPsTournamentRoom* _msg = _internal_mutable_pstournamentroom();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PsTournamentRoom)
  return _msg;
}
inline void CSRspBody::set_allocated_pstournamentroom(::msg::CSRspQueryPsTournamentRoom* pstournamentroom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pstournamentroom_);
  }
  if (pstournamentroom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pstournamentroom));
    if (message_arena != submessage_arena) {
      pstournamentroom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pstournamentroom, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pstournamentroom_ = pstournamentroom;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PsTournamentRoom)
}

// .msg.CSRspGetAdCumulateAward GetAdCumulateAward = 394;
inline bool CSRspBody::_internal_has_getadcumulateaward() const {
  return this != internal_default_instance() && _impl_.getadcumulateaward_ != nullptr;
}
inline bool CSRspBody::has_getadcumulateaward() const {
  return _internal_has_getadcumulateaward();
}
inline const ::msg::CSRspGetAdCumulateAward& CSRspBody::_internal_getadcumulateaward() const {
  const ::msg::CSRspGetAdCumulateAward* p = _impl_.getadcumulateaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetAdCumulateAward&>(
      ::msg::_CSRspGetAdCumulateAward_default_instance_);
}
inline const ::msg::CSRspGetAdCumulateAward& CSRspBody::getadcumulateaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetAdCumulateAward)
  return _internal_getadcumulateaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_getadcumulateaward(
    ::msg::CSRspGetAdCumulateAward* getadcumulateaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getadcumulateaward_);
  }
  _impl_.getadcumulateaward_ = getadcumulateaward;
  if (getadcumulateaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetAdCumulateAward)
}
inline ::msg::CSRspGetAdCumulateAward* CSRspBody::release_getadcumulateaward() {
  
  ::msg::CSRspGetAdCumulateAward* temp = _impl_.getadcumulateaward_;
  _impl_.getadcumulateaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetAdCumulateAward* CSRspBody::unsafe_arena_release_getadcumulateaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetAdCumulateAward)
  
  ::msg::CSRspGetAdCumulateAward* temp = _impl_.getadcumulateaward_;
  _impl_.getadcumulateaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetAdCumulateAward* CSRspBody::_internal_mutable_getadcumulateaward() {
  
  if (_impl_.getadcumulateaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetAdCumulateAward>(GetArenaForAllocation());
    _impl_.getadcumulateaward_ = p;
  }
  return _impl_.getadcumulateaward_;
}
inline ::msg::CSRspGetAdCumulateAward* CSRspBody::mutable_getadcumulateaward() {
  ::msg::CSRspGetAdCumulateAward* _msg = _internal_mutable_getadcumulateaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetAdCumulateAward)
  return _msg;
}
inline void CSRspBody::set_allocated_getadcumulateaward(::msg::CSRspGetAdCumulateAward* getadcumulateaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getadcumulateaward_);
  }
  if (getadcumulateaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getadcumulateaward));
    if (message_arena != submessage_arena) {
      getadcumulateaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getadcumulateaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getadcumulateaward_ = getadcumulateaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetAdCumulateAward)
}

// .msg.CSRspSetMessengerPos SetMessengerPos = 534;
inline bool CSRspBody::_internal_has_setmessengerpos() const {
  return this != internal_default_instance() && _impl_.setmessengerpos_ != nullptr;
}
inline bool CSRspBody::has_setmessengerpos() const {
  return _internal_has_setmessengerpos();
}
inline const ::msg::CSRspSetMessengerPos& CSRspBody::_internal_setmessengerpos() const {
  const ::msg::CSRspSetMessengerPos* p = _impl_.setmessengerpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSetMessengerPos&>(
      ::msg::_CSRspSetMessengerPos_default_instance_);
}
inline const ::msg::CSRspSetMessengerPos& CSRspBody::setmessengerpos() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SetMessengerPos)
  return _internal_setmessengerpos();
}
inline void CSRspBody::unsafe_arena_set_allocated_setmessengerpos(
    ::msg::CSRspSetMessengerPos* setmessengerpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setmessengerpos_);
  }
  _impl_.setmessengerpos_ = setmessengerpos;
  if (setmessengerpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SetMessengerPos)
}
inline ::msg::CSRspSetMessengerPos* CSRspBody::release_setmessengerpos() {
  
  ::msg::CSRspSetMessengerPos* temp = _impl_.setmessengerpos_;
  _impl_.setmessengerpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSetMessengerPos* CSRspBody::unsafe_arena_release_setmessengerpos() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SetMessengerPos)
  
  ::msg::CSRspSetMessengerPos* temp = _impl_.setmessengerpos_;
  _impl_.setmessengerpos_ = nullptr;
  return temp;
}
inline ::msg::CSRspSetMessengerPos* CSRspBody::_internal_mutable_setmessengerpos() {
  
  if (_impl_.setmessengerpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSetMessengerPos>(GetArenaForAllocation());
    _impl_.setmessengerpos_ = p;
  }
  return _impl_.setmessengerpos_;
}
inline ::msg::CSRspSetMessengerPos* CSRspBody::mutable_setmessengerpos() {
  ::msg::CSRspSetMessengerPos* _msg = _internal_mutable_setmessengerpos();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SetMessengerPos)
  return _msg;
}
inline void CSRspBody::set_allocated_setmessengerpos(::msg::CSRspSetMessengerPos* setmessengerpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setmessengerpos_);
  }
  if (setmessengerpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setmessengerpos));
    if (message_arena != submessage_arena) {
      setmessengerpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setmessengerpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setmessengerpos_ = setmessengerpos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SetMessengerPos)
}

// .msg.CSRspUpdateAntiAddictionTime AntiAddictionTime = 554;
inline bool CSRspBody::_internal_has_antiaddictiontime() const {
  return this != internal_default_instance() && _impl_.antiaddictiontime_ != nullptr;
}
inline bool CSRspBody::has_antiaddictiontime() const {
  return _internal_has_antiaddictiontime();
}
inline const ::msg::CSRspUpdateAntiAddictionTime& CSRspBody::_internal_antiaddictiontime() const {
  const ::msg::CSRspUpdateAntiAddictionTime* p = _impl_.antiaddictiontime_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUpdateAntiAddictionTime&>(
      ::msg::_CSRspUpdateAntiAddictionTime_default_instance_);
}
inline const ::msg::CSRspUpdateAntiAddictionTime& CSRspBody::antiaddictiontime() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.AntiAddictionTime)
  return _internal_antiaddictiontime();
}
inline void CSRspBody::unsafe_arena_set_allocated_antiaddictiontime(
    ::msg::CSRspUpdateAntiAddictionTime* antiaddictiontime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.antiaddictiontime_);
  }
  _impl_.antiaddictiontime_ = antiaddictiontime;
  if (antiaddictiontime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.AntiAddictionTime)
}
inline ::msg::CSRspUpdateAntiAddictionTime* CSRspBody::release_antiaddictiontime() {
  
  ::msg::CSRspUpdateAntiAddictionTime* temp = _impl_.antiaddictiontime_;
  _impl_.antiaddictiontime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUpdateAntiAddictionTime* CSRspBody::unsafe_arena_release_antiaddictiontime() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.AntiAddictionTime)
  
  ::msg::CSRspUpdateAntiAddictionTime* temp = _impl_.antiaddictiontime_;
  _impl_.antiaddictiontime_ = nullptr;
  return temp;
}
inline ::msg::CSRspUpdateAntiAddictionTime* CSRspBody::_internal_mutable_antiaddictiontime() {
  
  if (_impl_.antiaddictiontime_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUpdateAntiAddictionTime>(GetArenaForAllocation());
    _impl_.antiaddictiontime_ = p;
  }
  return _impl_.antiaddictiontime_;
}
inline ::msg::CSRspUpdateAntiAddictionTime* CSRspBody::mutable_antiaddictiontime() {
  ::msg::CSRspUpdateAntiAddictionTime* _msg = _internal_mutable_antiaddictiontime();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.AntiAddictionTime)
  return _msg;
}
inline void CSRspBody::set_allocated_antiaddictiontime(::msg::CSRspUpdateAntiAddictionTime* antiaddictiontime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.antiaddictiontime_);
  }
  if (antiaddictiontime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(antiaddictiontime));
    if (message_arena != submessage_arena) {
      antiaddictiontime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, antiaddictiontime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.antiaddictiontime_ = antiaddictiontime;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.AntiAddictionTime)
}

// .msg.CSRspCancelReconnect CancelReconnect = 555;
inline bool CSRspBody::_internal_has_cancelreconnect() const {
  return this != internal_default_instance() && _impl_.cancelreconnect_ != nullptr;
}
inline bool CSRspBody::has_cancelreconnect() const {
  return _internal_has_cancelreconnect();
}
inline const ::msg::CSRspCancelReconnect& CSRspBody::_internal_cancelreconnect() const {
  const ::msg::CSRspCancelReconnect* p = _impl_.cancelreconnect_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspCancelReconnect&>(
      ::msg::_CSRspCancelReconnect_default_instance_);
}
inline const ::msg::CSRspCancelReconnect& CSRspBody::cancelreconnect() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.CancelReconnect)
  return _internal_cancelreconnect();
}
inline void CSRspBody::unsafe_arena_set_allocated_cancelreconnect(
    ::msg::CSRspCancelReconnect* cancelreconnect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cancelreconnect_);
  }
  _impl_.cancelreconnect_ = cancelreconnect;
  if (cancelreconnect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.CancelReconnect)
}
inline ::msg::CSRspCancelReconnect* CSRspBody::release_cancelreconnect() {
  
  ::msg::CSRspCancelReconnect* temp = _impl_.cancelreconnect_;
  _impl_.cancelreconnect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspCancelReconnect* CSRspBody::unsafe_arena_release_cancelreconnect() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.CancelReconnect)
  
  ::msg::CSRspCancelReconnect* temp = _impl_.cancelreconnect_;
  _impl_.cancelreconnect_ = nullptr;
  return temp;
}
inline ::msg::CSRspCancelReconnect* CSRspBody::_internal_mutable_cancelreconnect() {
  
  if (_impl_.cancelreconnect_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspCancelReconnect>(GetArenaForAllocation());
    _impl_.cancelreconnect_ = p;
  }
  return _impl_.cancelreconnect_;
}
inline ::msg::CSRspCancelReconnect* CSRspBody::mutable_cancelreconnect() {
  ::msg::CSRspCancelReconnect* _msg = _internal_mutable_cancelreconnect();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.CancelReconnect)
  return _msg;
}
inline void CSRspBody::set_allocated_cancelreconnect(::msg::CSRspCancelReconnect* cancelreconnect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cancelreconnect_);
  }
  if (cancelreconnect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancelreconnect));
    if (message_arena != submessage_arena) {
      cancelreconnect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancelreconnect, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cancelreconnect_ = cancelreconnect;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.CancelReconnect)
}

// .msg.CSRspReconnect Reconnect = 557;
inline bool CSRspBody::_internal_has_reconnect() const {
  return this != internal_default_instance() && _impl_.reconnect_ != nullptr;
}
inline bool CSRspBody::has_reconnect() const {
  return _internal_has_reconnect();
}
inline const ::msg::CSRspReconnect& CSRspBody::_internal_reconnect() const {
  const ::msg::CSRspReconnect* p = _impl_.reconnect_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspReconnect&>(
      ::msg::_CSRspReconnect_default_instance_);
}
inline const ::msg::CSRspReconnect& CSRspBody::reconnect() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.Reconnect)
  return _internal_reconnect();
}
inline void CSRspBody::unsafe_arena_set_allocated_reconnect(
    ::msg::CSRspReconnect* reconnect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reconnect_);
  }
  _impl_.reconnect_ = reconnect;
  if (reconnect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.Reconnect)
}
inline ::msg::CSRspReconnect* CSRspBody::release_reconnect() {
  
  ::msg::CSRspReconnect* temp = _impl_.reconnect_;
  _impl_.reconnect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspReconnect* CSRspBody::unsafe_arena_release_reconnect() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.Reconnect)
  
  ::msg::CSRspReconnect* temp = _impl_.reconnect_;
  _impl_.reconnect_ = nullptr;
  return temp;
}
inline ::msg::CSRspReconnect* CSRspBody::_internal_mutable_reconnect() {
  
  if (_impl_.reconnect_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspReconnect>(GetArenaForAllocation());
    _impl_.reconnect_ = p;
  }
  return _impl_.reconnect_;
}
inline ::msg::CSRspReconnect* CSRspBody::mutable_reconnect() {
  ::msg::CSRspReconnect* _msg = _internal_mutable_reconnect();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.Reconnect)
  return _msg;
}
inline void CSRspBody::set_allocated_reconnect(::msg::CSRspReconnect* reconnect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reconnect_);
  }
  if (reconnect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reconnect));
    if (message_arena != submessage_arena) {
      reconnect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reconnect, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reconnect_ = reconnect;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.Reconnect)
}

// .msg.CSRspPassThrough PassThrough = 563;
inline bool CSRspBody::_internal_has_passthrough() const {
  return this != internal_default_instance() && _impl_.passthrough_ != nullptr;
}
inline bool CSRspBody::has_passthrough() const {
  return _internal_has_passthrough();
}
inline const ::msg::CSRspPassThrough& CSRspBody::_internal_passthrough() const {
  const ::msg::CSRspPassThrough* p = _impl_.passthrough_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPassThrough&>(
      ::msg::_CSRspPassThrough_default_instance_);
}
inline const ::msg::CSRspPassThrough& CSRspBody::passthrough() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PassThrough)
  return _internal_passthrough();
}
inline void CSRspBody::unsafe_arena_set_allocated_passthrough(
    ::msg::CSRspPassThrough* passthrough) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passthrough_);
  }
  _impl_.passthrough_ = passthrough;
  if (passthrough) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PassThrough)
}
inline ::msg::CSRspPassThrough* CSRspBody::release_passthrough() {
  
  ::msg::CSRspPassThrough* temp = _impl_.passthrough_;
  _impl_.passthrough_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPassThrough* CSRspBody::unsafe_arena_release_passthrough() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PassThrough)
  
  ::msg::CSRspPassThrough* temp = _impl_.passthrough_;
  _impl_.passthrough_ = nullptr;
  return temp;
}
inline ::msg::CSRspPassThrough* CSRspBody::_internal_mutable_passthrough() {
  
  if (_impl_.passthrough_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPassThrough>(GetArenaForAllocation());
    _impl_.passthrough_ = p;
  }
  return _impl_.passthrough_;
}
inline ::msg::CSRspPassThrough* CSRspBody::mutable_passthrough() {
  ::msg::CSRspPassThrough* _msg = _internal_mutable_passthrough();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PassThrough)
  return _msg;
}
inline void CSRspBody::set_allocated_passthrough(::msg::CSRspPassThrough* passthrough) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passthrough_);
  }
  if (passthrough) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(passthrough));
    if (message_arena != submessage_arena) {
      passthrough = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, passthrough, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.passthrough_ = passthrough;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PassThrough)
}

// .msg.CSRspVisitPlayer VisitPlayer = 564;
inline bool CSRspBody::_internal_has_visitplayer() const {
  return this != internal_default_instance() && _impl_.visitplayer_ != nullptr;
}
inline bool CSRspBody::has_visitplayer() const {
  return _internal_has_visitplayer();
}
inline const ::msg::CSRspVisitPlayer& CSRspBody::_internal_visitplayer() const {
  const ::msg::CSRspVisitPlayer* p = _impl_.visitplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspVisitPlayer&>(
      ::msg::_CSRspVisitPlayer_default_instance_);
}
inline const ::msg::CSRspVisitPlayer& CSRspBody::visitplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.VisitPlayer)
  return _internal_visitplayer();
}
inline void CSRspBody::unsafe_arena_set_allocated_visitplayer(
    ::msg::CSRspVisitPlayer* visitplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.visitplayer_);
  }
  _impl_.visitplayer_ = visitplayer;
  if (visitplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.VisitPlayer)
}
inline ::msg::CSRspVisitPlayer* CSRspBody::release_visitplayer() {
  
  ::msg::CSRspVisitPlayer* temp = _impl_.visitplayer_;
  _impl_.visitplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspVisitPlayer* CSRspBody::unsafe_arena_release_visitplayer() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.VisitPlayer)
  
  ::msg::CSRspVisitPlayer* temp = _impl_.visitplayer_;
  _impl_.visitplayer_ = nullptr;
  return temp;
}
inline ::msg::CSRspVisitPlayer* CSRspBody::_internal_mutable_visitplayer() {
  
  if (_impl_.visitplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspVisitPlayer>(GetArenaForAllocation());
    _impl_.visitplayer_ = p;
  }
  return _impl_.visitplayer_;
}
inline ::msg::CSRspVisitPlayer* CSRspBody::mutable_visitplayer() {
  ::msg::CSRspVisitPlayer* _msg = _internal_mutable_visitplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.VisitPlayer)
  return _msg;
}
inline void CSRspBody::set_allocated_visitplayer(::msg::CSRspVisitPlayer* visitplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.visitplayer_);
  }
  if (visitplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visitplayer));
    if (message_arena != submessage_arena) {
      visitplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visitplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.visitplayer_ = visitplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.VisitPlayer)
}

// .msg.CSRspLeaveGameEarly LeaveGameEarly = 565;
inline bool CSRspBody::_internal_has_leavegameearly() const {
  return this != internal_default_instance() && _impl_.leavegameearly_ != nullptr;
}
inline bool CSRspBody::has_leavegameearly() const {
  return _internal_has_leavegameearly();
}
inline const ::msg::CSRspLeaveGameEarly& CSRspBody::_internal_leavegameearly() const {
  const ::msg::CSRspLeaveGameEarly* p = _impl_.leavegameearly_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspLeaveGameEarly&>(
      ::msg::_CSRspLeaveGameEarly_default_instance_);
}
inline const ::msg::CSRspLeaveGameEarly& CSRspBody::leavegameearly() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.LeaveGameEarly)
  return _internal_leavegameearly();
}
inline void CSRspBody::unsafe_arena_set_allocated_leavegameearly(
    ::msg::CSRspLeaveGameEarly* leavegameearly) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leavegameearly_);
  }
  _impl_.leavegameearly_ = leavegameearly;
  if (leavegameearly) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.LeaveGameEarly)
}
inline ::msg::CSRspLeaveGameEarly* CSRspBody::release_leavegameearly() {
  
  ::msg::CSRspLeaveGameEarly* temp = _impl_.leavegameearly_;
  _impl_.leavegameearly_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspLeaveGameEarly* CSRspBody::unsafe_arena_release_leavegameearly() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.LeaveGameEarly)
  
  ::msg::CSRspLeaveGameEarly* temp = _impl_.leavegameearly_;
  _impl_.leavegameearly_ = nullptr;
  return temp;
}
inline ::msg::CSRspLeaveGameEarly* CSRspBody::_internal_mutable_leavegameearly() {
  
  if (_impl_.leavegameearly_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspLeaveGameEarly>(GetArenaForAllocation());
    _impl_.leavegameearly_ = p;
  }
  return _impl_.leavegameearly_;
}
inline ::msg::CSRspLeaveGameEarly* CSRspBody::mutable_leavegameearly() {
  ::msg::CSRspLeaveGameEarly* _msg = _internal_mutable_leavegameearly();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.LeaveGameEarly)
  return _msg;
}
inline void CSRspBody::set_allocated_leavegameearly(::msg::CSRspLeaveGameEarly* leavegameearly) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leavegameearly_);
  }
  if (leavegameearly) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leavegameearly));
    if (message_arena != submessage_arena) {
      leavegameearly = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leavegameearly, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.leavegameearly_ = leavegameearly;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.LeaveGameEarly)
}

// .msg.CSRspGDCommonBin GDCommonBin = 566;
inline bool CSRspBody::_internal_has_gdcommonbin() const {
  return this != internal_default_instance() && _impl_.gdcommonbin_ != nullptr;
}
inline bool CSRspBody::has_gdcommonbin() const {
  return _internal_has_gdcommonbin();
}
inline const ::msg::CSRspGDCommonBin& CSRspBody::_internal_gdcommonbin() const {
  const ::msg::CSRspGDCommonBin* p = _impl_.gdcommonbin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGDCommonBin&>(
      ::msg::_CSRspGDCommonBin_default_instance_);
}
inline const ::msg::CSRspGDCommonBin& CSRspBody::gdcommonbin() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GDCommonBin)
  return _internal_gdcommonbin();
}
inline void CSRspBody::unsafe_arena_set_allocated_gdcommonbin(
    ::msg::CSRspGDCommonBin* gdcommonbin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gdcommonbin_);
  }
  _impl_.gdcommonbin_ = gdcommonbin;
  if (gdcommonbin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GDCommonBin)
}
inline ::msg::CSRspGDCommonBin* CSRspBody::release_gdcommonbin() {
  
  ::msg::CSRspGDCommonBin* temp = _impl_.gdcommonbin_;
  _impl_.gdcommonbin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGDCommonBin* CSRspBody::unsafe_arena_release_gdcommonbin() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GDCommonBin)
  
  ::msg::CSRspGDCommonBin* temp = _impl_.gdcommonbin_;
  _impl_.gdcommonbin_ = nullptr;
  return temp;
}
inline ::msg::CSRspGDCommonBin* CSRspBody::_internal_mutable_gdcommonbin() {
  
  if (_impl_.gdcommonbin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGDCommonBin>(GetArenaForAllocation());
    _impl_.gdcommonbin_ = p;
  }
  return _impl_.gdcommonbin_;
}
inline ::msg::CSRspGDCommonBin* CSRspBody::mutable_gdcommonbin() {
  ::msg::CSRspGDCommonBin* _msg = _internal_mutable_gdcommonbin();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GDCommonBin)
  return _msg;
}
inline void CSRspBody::set_allocated_gdcommonbin(::msg::CSRspGDCommonBin* gdcommonbin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gdcommonbin_);
  }
  if (gdcommonbin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gdcommonbin));
    if (message_arena != submessage_arena) {
      gdcommonbin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gdcommonbin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gdcommonbin_ = gdcommonbin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GDCommonBin)
}

// .msg.CSRspGDCommonBinData GDBinData = 567;
inline bool CSRspBody::_internal_has_gdbindata() const {
  return this != internal_default_instance() && _impl_.gdbindata_ != nullptr;
}
inline bool CSRspBody::has_gdbindata() const {
  return _internal_has_gdbindata();
}
inline const ::msg::CSRspGDCommonBinData& CSRspBody::_internal_gdbindata() const {
  const ::msg::CSRspGDCommonBinData* p = _impl_.gdbindata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGDCommonBinData&>(
      ::msg::_CSRspGDCommonBinData_default_instance_);
}
inline const ::msg::CSRspGDCommonBinData& CSRspBody::gdbindata() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GDBinData)
  return _internal_gdbindata();
}
inline void CSRspBody::unsafe_arena_set_allocated_gdbindata(
    ::msg::CSRspGDCommonBinData* gdbindata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gdbindata_);
  }
  _impl_.gdbindata_ = gdbindata;
  if (gdbindata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GDBinData)
}
inline ::msg::CSRspGDCommonBinData* CSRspBody::release_gdbindata() {
  
  ::msg::CSRspGDCommonBinData* temp = _impl_.gdbindata_;
  _impl_.gdbindata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGDCommonBinData* CSRspBody::unsafe_arena_release_gdbindata() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GDBinData)
  
  ::msg::CSRspGDCommonBinData* temp = _impl_.gdbindata_;
  _impl_.gdbindata_ = nullptr;
  return temp;
}
inline ::msg::CSRspGDCommonBinData* CSRspBody::_internal_mutable_gdbindata() {
  
  if (_impl_.gdbindata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGDCommonBinData>(GetArenaForAllocation());
    _impl_.gdbindata_ = p;
  }
  return _impl_.gdbindata_;
}
inline ::msg::CSRspGDCommonBinData* CSRspBody::mutable_gdbindata() {
  ::msg::CSRspGDCommonBinData* _msg = _internal_mutable_gdbindata();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GDBinData)
  return _msg;
}
inline void CSRspBody::set_allocated_gdbindata(::msg::CSRspGDCommonBinData* gdbindata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gdbindata_);
  }
  if (gdbindata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gdbindata));
    if (message_arena != submessage_arena) {
      gdbindata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gdbindata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gdbindata_ = gdbindata;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GDBinData)
}

// .msg.CSRspBattleCampResult BattleCampResult = 568;
inline bool CSRspBody::_internal_has_battlecampresult() const {
  return this != internal_default_instance() && _impl_.battlecampresult_ != nullptr;
}
inline bool CSRspBody::has_battlecampresult() const {
  return _internal_has_battlecampresult();
}
inline const ::msg::CSRspBattleCampResult& CSRspBody::_internal_battlecampresult() const {
  const ::msg::CSRspBattleCampResult* p = _impl_.battlecampresult_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspBattleCampResult&>(
      ::msg::_CSRspBattleCampResult_default_instance_);
}
inline const ::msg::CSRspBattleCampResult& CSRspBody::battlecampresult() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.BattleCampResult)
  return _internal_battlecampresult();
}
inline void CSRspBody::unsafe_arena_set_allocated_battlecampresult(
    ::msg::CSRspBattleCampResult* battlecampresult) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.battlecampresult_);
  }
  _impl_.battlecampresult_ = battlecampresult;
  if (battlecampresult) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.BattleCampResult)
}
inline ::msg::CSRspBattleCampResult* CSRspBody::release_battlecampresult() {
  
  ::msg::CSRspBattleCampResult* temp = _impl_.battlecampresult_;
  _impl_.battlecampresult_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspBattleCampResult* CSRspBody::unsafe_arena_release_battlecampresult() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.BattleCampResult)
  
  ::msg::CSRspBattleCampResult* temp = _impl_.battlecampresult_;
  _impl_.battlecampresult_ = nullptr;
  return temp;
}
inline ::msg::CSRspBattleCampResult* CSRspBody::_internal_mutable_battlecampresult() {
  
  if (_impl_.battlecampresult_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspBattleCampResult>(GetArenaForAllocation());
    _impl_.battlecampresult_ = p;
  }
  return _impl_.battlecampresult_;
}
inline ::msg::CSRspBattleCampResult* CSRspBody::mutable_battlecampresult() {
  ::msg::CSRspBattleCampResult* _msg = _internal_mutable_battlecampresult();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.BattleCampResult)
  return _msg;
}
inline void CSRspBody::set_allocated_battlecampresult(::msg::CSRspBattleCampResult* battlecampresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.battlecampresult_);
  }
  if (battlecampresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(battlecampresult));
    if (message_arena != submessage_arena) {
      battlecampresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battlecampresult, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.battlecampresult_ = battlecampresult;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.BattleCampResult)
}

// .msg.CSRspAutoBattleOP AutoBattleOP = 569;
inline bool CSRspBody::_internal_has_autobattleop() const {
  return this != internal_default_instance() && _impl_.autobattleop_ != nullptr;
}
inline bool CSRspBody::has_autobattleop() const {
  return _internal_has_autobattleop();
}
inline const ::msg::CSRspAutoBattleOP& CSRspBody::_internal_autobattleop() const {
  const ::msg::CSRspAutoBattleOP* p = _impl_.autobattleop_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspAutoBattleOP&>(
      ::msg::_CSRspAutoBattleOP_default_instance_);
}
inline const ::msg::CSRspAutoBattleOP& CSRspBody::autobattleop() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.AutoBattleOP)
  return _internal_autobattleop();
}
inline void CSRspBody::unsafe_arena_set_allocated_autobattleop(
    ::msg::CSRspAutoBattleOP* autobattleop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autobattleop_);
  }
  _impl_.autobattleop_ = autobattleop;
  if (autobattleop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.AutoBattleOP)
}
inline ::msg::CSRspAutoBattleOP* CSRspBody::release_autobattleop() {
  
  ::msg::CSRspAutoBattleOP* temp = _impl_.autobattleop_;
  _impl_.autobattleop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspAutoBattleOP* CSRspBody::unsafe_arena_release_autobattleop() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.AutoBattleOP)
  
  ::msg::CSRspAutoBattleOP* temp = _impl_.autobattleop_;
  _impl_.autobattleop_ = nullptr;
  return temp;
}
inline ::msg::CSRspAutoBattleOP* CSRspBody::_internal_mutable_autobattleop() {
  
  if (_impl_.autobattleop_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspAutoBattleOP>(GetArenaForAllocation());
    _impl_.autobattleop_ = p;
  }
  return _impl_.autobattleop_;
}
inline ::msg::CSRspAutoBattleOP* CSRspBody::mutable_autobattleop() {
  ::msg::CSRspAutoBattleOP* _msg = _internal_mutable_autobattleop();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.AutoBattleOP)
  return _msg;
}
inline void CSRspBody::set_allocated_autobattleop(::msg::CSRspAutoBattleOP* autobattleop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autobattleop_);
  }
  if (autobattleop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autobattleop));
    if (message_arena != submessage_arena) {
      autobattleop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autobattleop, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.autobattleop_ = autobattleop;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.AutoBattleOP)
}

// .msg.CSRspRestrictUser RestrictUser = 570;
inline bool CSRspBody::_internal_has_restrictuser() const {
  return this != internal_default_instance() && _impl_.restrictuser_ != nullptr;
}
inline bool CSRspBody::has_restrictuser() const {
  return _internal_has_restrictuser();
}
inline const ::msg::CSRspRestrictUser& CSRspBody::_internal_restrictuser() const {
  const ::msg::CSRspRestrictUser* p = _impl_.restrictuser_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRestrictUser&>(
      ::msg::_CSRspRestrictUser_default_instance_);
}
inline const ::msg::CSRspRestrictUser& CSRspBody::restrictuser() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RestrictUser)
  return _internal_restrictuser();
}
inline void CSRspBody::unsafe_arena_set_allocated_restrictuser(
    ::msg::CSRspRestrictUser* restrictuser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.restrictuser_);
  }
  _impl_.restrictuser_ = restrictuser;
  if (restrictuser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RestrictUser)
}
inline ::msg::CSRspRestrictUser* CSRspBody::release_restrictuser() {
  
  ::msg::CSRspRestrictUser* temp = _impl_.restrictuser_;
  _impl_.restrictuser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRestrictUser* CSRspBody::unsafe_arena_release_restrictuser() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RestrictUser)
  
  ::msg::CSRspRestrictUser* temp = _impl_.restrictuser_;
  _impl_.restrictuser_ = nullptr;
  return temp;
}
inline ::msg::CSRspRestrictUser* CSRspBody::_internal_mutable_restrictuser() {
  
  if (_impl_.restrictuser_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRestrictUser>(GetArenaForAllocation());
    _impl_.restrictuser_ = p;
  }
  return _impl_.restrictuser_;
}
inline ::msg::CSRspRestrictUser* CSRspBody::mutable_restrictuser() {
  ::msg::CSRspRestrictUser* _msg = _internal_mutable_restrictuser();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RestrictUser)
  return _msg;
}
inline void CSRspBody::set_allocated_restrictuser(::msg::CSRspRestrictUser* restrictuser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.restrictuser_);
  }
  if (restrictuser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(restrictuser));
    if (message_arena != submessage_arena) {
      restrictuser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restrictuser, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.restrictuser_ = restrictuser;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RestrictUser)
}

// .msg.CSRspEquipSelectRate EquipSelectRate = 571;
inline bool CSRspBody::_internal_has_equipselectrate() const {
  return this != internal_default_instance() && _impl_.equipselectrate_ != nullptr;
}
inline bool CSRspBody::has_equipselectrate() const {
  return _internal_has_equipselectrate();
}
inline const ::msg::CSRspEquipSelectRate& CSRspBody::_internal_equipselectrate() const {
  const ::msg::CSRspEquipSelectRate* p = _impl_.equipselectrate_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspEquipSelectRate&>(
      ::msg::_CSRspEquipSelectRate_default_instance_);
}
inline const ::msg::CSRspEquipSelectRate& CSRspBody::equipselectrate() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.EquipSelectRate)
  return _internal_equipselectrate();
}
inline void CSRspBody::unsafe_arena_set_allocated_equipselectrate(
    ::msg::CSRspEquipSelectRate* equipselectrate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.equipselectrate_);
  }
  _impl_.equipselectrate_ = equipselectrate;
  if (equipselectrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.EquipSelectRate)
}
inline ::msg::CSRspEquipSelectRate* CSRspBody::release_equipselectrate() {
  
  ::msg::CSRspEquipSelectRate* temp = _impl_.equipselectrate_;
  _impl_.equipselectrate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspEquipSelectRate* CSRspBody::unsafe_arena_release_equipselectrate() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.EquipSelectRate)
  
  ::msg::CSRspEquipSelectRate* temp = _impl_.equipselectrate_;
  _impl_.equipselectrate_ = nullptr;
  return temp;
}
inline ::msg::CSRspEquipSelectRate* CSRspBody::_internal_mutable_equipselectrate() {
  
  if (_impl_.equipselectrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspEquipSelectRate>(GetArenaForAllocation());
    _impl_.equipselectrate_ = p;
  }
  return _impl_.equipselectrate_;
}
inline ::msg::CSRspEquipSelectRate* CSRspBody::mutable_equipselectrate() {
  ::msg::CSRspEquipSelectRate* _msg = _internal_mutable_equipselectrate();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.EquipSelectRate)
  return _msg;
}
inline void CSRspBody::set_allocated_equipselectrate(::msg::CSRspEquipSelectRate* equipselectrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.equipselectrate_);
  }
  if (equipselectrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(equipselectrate));
    if (message_arena != submessage_arena) {
      equipselectrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equipselectrate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.equipselectrate_ = equipselectrate;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.EquipSelectRate)
}

// .msg.CSRspReportAbsent ReportAbsent = 572;
inline bool CSRspBody::_internal_has_reportabsent() const {
  return this != internal_default_instance() && _impl_.reportabsent_ != nullptr;
}
inline bool CSRspBody::has_reportabsent() const {
  return _internal_has_reportabsent();
}
inline const ::msg::CSRspReportAbsent& CSRspBody::_internal_reportabsent() const {
  const ::msg::CSRspReportAbsent* p = _impl_.reportabsent_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspReportAbsent&>(
      ::msg::_CSRspReportAbsent_default_instance_);
}
inline const ::msg::CSRspReportAbsent& CSRspBody::reportabsent() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ReportAbsent)
  return _internal_reportabsent();
}
inline void CSRspBody::unsafe_arena_set_allocated_reportabsent(
    ::msg::CSRspReportAbsent* reportabsent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportabsent_);
  }
  _impl_.reportabsent_ = reportabsent;
  if (reportabsent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ReportAbsent)
}
inline ::msg::CSRspReportAbsent* CSRspBody::release_reportabsent() {
  
  ::msg::CSRspReportAbsent* temp = _impl_.reportabsent_;
  _impl_.reportabsent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspReportAbsent* CSRspBody::unsafe_arena_release_reportabsent() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ReportAbsent)
  
  ::msg::CSRspReportAbsent* temp = _impl_.reportabsent_;
  _impl_.reportabsent_ = nullptr;
  return temp;
}
inline ::msg::CSRspReportAbsent* CSRspBody::_internal_mutable_reportabsent() {
  
  if (_impl_.reportabsent_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspReportAbsent>(GetArenaForAllocation());
    _impl_.reportabsent_ = p;
  }
  return _impl_.reportabsent_;
}
inline ::msg::CSRspReportAbsent* CSRspBody::mutable_reportabsent() {
  ::msg::CSRspReportAbsent* _msg = _internal_mutable_reportabsent();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ReportAbsent)
  return _msg;
}
inline void CSRspBody::set_allocated_reportabsent(::msg::CSRspReportAbsent* reportabsent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reportabsent_);
  }
  if (reportabsent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reportabsent));
    if (message_arena != submessage_arena) {
      reportabsent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reportabsent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reportabsent_ = reportabsent;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ReportAbsent)
}

// .msg.CSRspRecommendWeek RecommendWeek = 600;
inline bool CSRspBody::_internal_has_recommendweek() const {
  return this != internal_default_instance() && _impl_.recommendweek_ != nullptr;
}
inline bool CSRspBody::has_recommendweek() const {
  return _internal_has_recommendweek();
}
inline const ::msg::CSRspRecommendWeek& CSRspBody::_internal_recommendweek() const {
  const ::msg::CSRspRecommendWeek* p = _impl_.recommendweek_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRecommendWeek&>(
      ::msg::_CSRspRecommendWeek_default_instance_);
}
inline const ::msg::CSRspRecommendWeek& CSRspBody::recommendweek() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RecommendWeek)
  return _internal_recommendweek();
}
inline void CSRspBody::unsafe_arena_set_allocated_recommendweek(
    ::msg::CSRspRecommendWeek* recommendweek) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendweek_);
  }
  _impl_.recommendweek_ = recommendweek;
  if (recommendweek) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RecommendWeek)
}
inline ::msg::CSRspRecommendWeek* CSRspBody::release_recommendweek() {
  
  ::msg::CSRspRecommendWeek* temp = _impl_.recommendweek_;
  _impl_.recommendweek_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRecommendWeek* CSRspBody::unsafe_arena_release_recommendweek() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RecommendWeek)
  
  ::msg::CSRspRecommendWeek* temp = _impl_.recommendweek_;
  _impl_.recommendweek_ = nullptr;
  return temp;
}
inline ::msg::CSRspRecommendWeek* CSRspBody::_internal_mutable_recommendweek() {
  
  if (_impl_.recommendweek_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRecommendWeek>(GetArenaForAllocation());
    _impl_.recommendweek_ = p;
  }
  return _impl_.recommendweek_;
}
inline ::msg::CSRspRecommendWeek* CSRspBody::mutable_recommendweek() {
  ::msg::CSRspRecommendWeek* _msg = _internal_mutable_recommendweek();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RecommendWeek)
  return _msg;
}
inline void CSRspBody::set_allocated_recommendweek(::msg::CSRspRecommendWeek* recommendweek) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendweek_);
  }
  if (recommendweek) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommendweek));
    if (message_arena != submessage_arena) {
      recommendweek = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommendweek, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recommendweek_ = recommendweek;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RecommendWeek)
}

// .msg.CSRspRecommendOfficial RecommendOfficial = 601;
inline bool CSRspBody::_internal_has_recommendofficial() const {
  return this != internal_default_instance() && _impl_.recommendofficial_ != nullptr;
}
inline bool CSRspBody::has_recommendofficial() const {
  return _internal_has_recommendofficial();
}
inline const ::msg::CSRspRecommendOfficial& CSRspBody::_internal_recommendofficial() const {
  const ::msg::CSRspRecommendOfficial* p = _impl_.recommendofficial_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRecommendOfficial&>(
      ::msg::_CSRspRecommendOfficial_default_instance_);
}
inline const ::msg::CSRspRecommendOfficial& CSRspBody::recommendofficial() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RecommendOfficial)
  return _internal_recommendofficial();
}
inline void CSRspBody::unsafe_arena_set_allocated_recommendofficial(
    ::msg::CSRspRecommendOfficial* recommendofficial) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendofficial_);
  }
  _impl_.recommendofficial_ = recommendofficial;
  if (recommendofficial) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RecommendOfficial)
}
inline ::msg::CSRspRecommendOfficial* CSRspBody::release_recommendofficial() {
  
  ::msg::CSRspRecommendOfficial* temp = _impl_.recommendofficial_;
  _impl_.recommendofficial_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRecommendOfficial* CSRspBody::unsafe_arena_release_recommendofficial() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RecommendOfficial)
  
  ::msg::CSRspRecommendOfficial* temp = _impl_.recommendofficial_;
  _impl_.recommendofficial_ = nullptr;
  return temp;
}
inline ::msg::CSRspRecommendOfficial* CSRspBody::_internal_mutable_recommendofficial() {
  
  if (_impl_.recommendofficial_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRecommendOfficial>(GetArenaForAllocation());
    _impl_.recommendofficial_ = p;
  }
  return _impl_.recommendofficial_;
}
inline ::msg::CSRspRecommendOfficial* CSRspBody::mutable_recommendofficial() {
  ::msg::CSRspRecommendOfficial* _msg = _internal_mutable_recommendofficial();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RecommendOfficial)
  return _msg;
}
inline void CSRspBody::set_allocated_recommendofficial(::msg::CSRspRecommendOfficial* recommendofficial) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendofficial_);
  }
  if (recommendofficial) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommendofficial));
    if (message_arena != submessage_arena) {
      recommendofficial = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommendofficial, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recommendofficial_ = recommendofficial;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RecommendOfficial)
}

// .msg.CSRspRecommendLatest RecommendLatest = 602;
inline bool CSRspBody::_internal_has_recommendlatest() const {
  return this != internal_default_instance() && _impl_.recommendlatest_ != nullptr;
}
inline bool CSRspBody::has_recommendlatest() const {
  return _internal_has_recommendlatest();
}
inline const ::msg::CSRspRecommendLatest& CSRspBody::_internal_recommendlatest() const {
  const ::msg::CSRspRecommendLatest* p = _impl_.recommendlatest_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRecommendLatest&>(
      ::msg::_CSRspRecommendLatest_default_instance_);
}
inline const ::msg::CSRspRecommendLatest& CSRspBody::recommendlatest() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RecommendLatest)
  return _internal_recommendlatest();
}
inline void CSRspBody::unsafe_arena_set_allocated_recommendlatest(
    ::msg::CSRspRecommendLatest* recommendlatest) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendlatest_);
  }
  _impl_.recommendlatest_ = recommendlatest;
  if (recommendlatest) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RecommendLatest)
}
inline ::msg::CSRspRecommendLatest* CSRspBody::release_recommendlatest() {
  
  ::msg::CSRspRecommendLatest* temp = _impl_.recommendlatest_;
  _impl_.recommendlatest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRecommendLatest* CSRspBody::unsafe_arena_release_recommendlatest() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RecommendLatest)
  
  ::msg::CSRspRecommendLatest* temp = _impl_.recommendlatest_;
  _impl_.recommendlatest_ = nullptr;
  return temp;
}
inline ::msg::CSRspRecommendLatest* CSRspBody::_internal_mutable_recommendlatest() {
  
  if (_impl_.recommendlatest_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRecommendLatest>(GetArenaForAllocation());
    _impl_.recommendlatest_ = p;
  }
  return _impl_.recommendlatest_;
}
inline ::msg::CSRspRecommendLatest* CSRspBody::mutable_recommendlatest() {
  ::msg::CSRspRecommendLatest* _msg = _internal_mutable_recommendlatest();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RecommendLatest)
  return _msg;
}
inline void CSRspBody::set_allocated_recommendlatest(::msg::CSRspRecommendLatest* recommendlatest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendlatest_);
  }
  if (recommendlatest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommendlatest));
    if (message_arena != submessage_arena) {
      recommendlatest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommendlatest, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recommendlatest_ = recommendlatest;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RecommendLatest)
}

// .msg.CSRspRecommendHistory RecommendHistory = 603;
inline bool CSRspBody::_internal_has_recommendhistory() const {
  return this != internal_default_instance() && _impl_.recommendhistory_ != nullptr;
}
inline bool CSRspBody::has_recommendhistory() const {
  return _internal_has_recommendhistory();
}
inline const ::msg::CSRspRecommendHistory& CSRspBody::_internal_recommendhistory() const {
  const ::msg::CSRspRecommendHistory* p = _impl_.recommendhistory_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRecommendHistory&>(
      ::msg::_CSRspRecommendHistory_default_instance_);
}
inline const ::msg::CSRspRecommendHistory& CSRspBody::recommendhistory() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RecommendHistory)
  return _internal_recommendhistory();
}
inline void CSRspBody::unsafe_arena_set_allocated_recommendhistory(
    ::msg::CSRspRecommendHistory* recommendhistory) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendhistory_);
  }
  _impl_.recommendhistory_ = recommendhistory;
  if (recommendhistory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RecommendHistory)
}
inline ::msg::CSRspRecommendHistory* CSRspBody::release_recommendhistory() {
  
  ::msg::CSRspRecommendHistory* temp = _impl_.recommendhistory_;
  _impl_.recommendhistory_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRecommendHistory* CSRspBody::unsafe_arena_release_recommendhistory() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RecommendHistory)
  
  ::msg::CSRspRecommendHistory* temp = _impl_.recommendhistory_;
  _impl_.recommendhistory_ = nullptr;
  return temp;
}
inline ::msg::CSRspRecommendHistory* CSRspBody::_internal_mutable_recommendhistory() {
  
  if (_impl_.recommendhistory_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRecommendHistory>(GetArenaForAllocation());
    _impl_.recommendhistory_ = p;
  }
  return _impl_.recommendhistory_;
}
inline ::msg::CSRspRecommendHistory* CSRspBody::mutable_recommendhistory() {
  ::msg::CSRspRecommendHistory* _msg = _internal_mutable_recommendhistory();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RecommendHistory)
  return _msg;
}
inline void CSRspBody::set_allocated_recommendhistory(::msg::CSRspRecommendHistory* recommendhistory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendhistory_);
  }
  if (recommendhistory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommendhistory));
    if (message_arena != submessage_arena) {
      recommendhistory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommendhistory, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recommendhistory_ = recommendhistory;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RecommendHistory)
}

// .msg.CSRspRecommendCollect RecommendCollect = 604;
inline bool CSRspBody::_internal_has_recommendcollect() const {
  return this != internal_default_instance() && _impl_.recommendcollect_ != nullptr;
}
inline bool CSRspBody::has_recommendcollect() const {
  return _internal_has_recommendcollect();
}
inline const ::msg::CSRspRecommendCollect& CSRspBody::_internal_recommendcollect() const {
  const ::msg::CSRspRecommendCollect* p = _impl_.recommendcollect_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRecommendCollect&>(
      ::msg::_CSRspRecommendCollect_default_instance_);
}
inline const ::msg::CSRspRecommendCollect& CSRspBody::recommendcollect() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RecommendCollect)
  return _internal_recommendcollect();
}
inline void CSRspBody::unsafe_arena_set_allocated_recommendcollect(
    ::msg::CSRspRecommendCollect* recommendcollect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendcollect_);
  }
  _impl_.recommendcollect_ = recommendcollect;
  if (recommendcollect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RecommendCollect)
}
inline ::msg::CSRspRecommendCollect* CSRspBody::release_recommendcollect() {
  
  ::msg::CSRspRecommendCollect* temp = _impl_.recommendcollect_;
  _impl_.recommendcollect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRecommendCollect* CSRspBody::unsafe_arena_release_recommendcollect() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RecommendCollect)
  
  ::msg::CSRspRecommendCollect* temp = _impl_.recommendcollect_;
  _impl_.recommendcollect_ = nullptr;
  return temp;
}
inline ::msg::CSRspRecommendCollect* CSRspBody::_internal_mutable_recommendcollect() {
  
  if (_impl_.recommendcollect_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRecommendCollect>(GetArenaForAllocation());
    _impl_.recommendcollect_ = p;
  }
  return _impl_.recommendcollect_;
}
inline ::msg::CSRspRecommendCollect* CSRspBody::mutable_recommendcollect() {
  ::msg::CSRspRecommendCollect* _msg = _internal_mutable_recommendcollect();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RecommendCollect)
  return _msg;
}
inline void CSRspBody::set_allocated_recommendcollect(::msg::CSRspRecommendCollect* recommendcollect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendcollect_);
  }
  if (recommendcollect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommendcollect));
    if (message_arena != submessage_arena) {
      recommendcollect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommendcollect, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recommendcollect_ = recommendcollect;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RecommendCollect)
}

// .msg.CSRspRecommendSet RecommendSet = 605;
inline bool CSRspBody::_internal_has_recommendset() const {
  return this != internal_default_instance() && _impl_.recommendset_ != nullptr;
}
inline bool CSRspBody::has_recommendset() const {
  return _internal_has_recommendset();
}
inline const ::msg::CSRspRecommendSet& CSRspBody::_internal_recommendset() const {
  const ::msg::CSRspRecommendSet* p = _impl_.recommendset_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRecommendSet&>(
      ::msg::_CSRspRecommendSet_default_instance_);
}
inline const ::msg::CSRspRecommendSet& CSRspBody::recommendset() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RecommendSet)
  return _internal_recommendset();
}
inline void CSRspBody::unsafe_arena_set_allocated_recommendset(
    ::msg::CSRspRecommendSet* recommendset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendset_);
  }
  _impl_.recommendset_ = recommendset;
  if (recommendset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RecommendSet)
}
inline ::msg::CSRspRecommendSet* CSRspBody::release_recommendset() {
  
  ::msg::CSRspRecommendSet* temp = _impl_.recommendset_;
  _impl_.recommendset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRecommendSet* CSRspBody::unsafe_arena_release_recommendset() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RecommendSet)
  
  ::msg::CSRspRecommendSet* temp = _impl_.recommendset_;
  _impl_.recommendset_ = nullptr;
  return temp;
}
inline ::msg::CSRspRecommendSet* CSRspBody::_internal_mutable_recommendset() {
  
  if (_impl_.recommendset_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRecommendSet>(GetArenaForAllocation());
    _impl_.recommendset_ = p;
  }
  return _impl_.recommendset_;
}
inline ::msg::CSRspRecommendSet* CSRspBody::mutable_recommendset() {
  ::msg::CSRspRecommendSet* _msg = _internal_mutable_recommendset();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RecommendSet)
  return _msg;
}
inline void CSRspBody::set_allocated_recommendset(::msg::CSRspRecommendSet* recommendset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendset_);
  }
  if (recommendset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommendset));
    if (message_arena != submessage_arena) {
      recommendset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommendset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recommendset_ = recommendset;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RecommendSet)
}

// .msg.CSRspRecommendGetCollection RecommendGetCollection = 606;
inline bool CSRspBody::_internal_has_recommendgetcollection() const {
  return this != internal_default_instance() && _impl_.recommendgetcollection_ != nullptr;
}
inline bool CSRspBody::has_recommendgetcollection() const {
  return _internal_has_recommendgetcollection();
}
inline const ::msg::CSRspRecommendGetCollection& CSRspBody::_internal_recommendgetcollection() const {
  const ::msg::CSRspRecommendGetCollection* p = _impl_.recommendgetcollection_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRecommendGetCollection&>(
      ::msg::_CSRspRecommendGetCollection_default_instance_);
}
inline const ::msg::CSRspRecommendGetCollection& CSRspBody::recommendgetcollection() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RecommendGetCollection)
  return _internal_recommendgetcollection();
}
inline void CSRspBody::unsafe_arena_set_allocated_recommendgetcollection(
    ::msg::CSRspRecommendGetCollection* recommendgetcollection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendgetcollection_);
  }
  _impl_.recommendgetcollection_ = recommendgetcollection;
  if (recommendgetcollection) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RecommendGetCollection)
}
inline ::msg::CSRspRecommendGetCollection* CSRspBody::release_recommendgetcollection() {
  
  ::msg::CSRspRecommendGetCollection* temp = _impl_.recommendgetcollection_;
  _impl_.recommendgetcollection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRecommendGetCollection* CSRspBody::unsafe_arena_release_recommendgetcollection() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RecommendGetCollection)
  
  ::msg::CSRspRecommendGetCollection* temp = _impl_.recommendgetcollection_;
  _impl_.recommendgetcollection_ = nullptr;
  return temp;
}
inline ::msg::CSRspRecommendGetCollection* CSRspBody::_internal_mutable_recommendgetcollection() {
  
  if (_impl_.recommendgetcollection_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRecommendGetCollection>(GetArenaForAllocation());
    _impl_.recommendgetcollection_ = p;
  }
  return _impl_.recommendgetcollection_;
}
inline ::msg::CSRspRecommendGetCollection* CSRspBody::mutable_recommendgetcollection() {
  ::msg::CSRspRecommendGetCollection* _msg = _internal_mutable_recommendgetcollection();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RecommendGetCollection)
  return _msg;
}
inline void CSRspBody::set_allocated_recommendgetcollection(::msg::CSRspRecommendGetCollection* recommendgetcollection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendgetcollection_);
  }
  if (recommendgetcollection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommendgetcollection));
    if (message_arena != submessage_arena) {
      recommendgetcollection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommendgetcollection, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recommendgetcollection_ = recommendgetcollection;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RecommendGetCollection)
}

// .msg.CSRspRecommendEquip RecommendEquip = 607;
inline bool CSRspBody::_internal_has_recommendequip() const {
  return this != internal_default_instance() && _impl_.recommendequip_ != nullptr;
}
inline bool CSRspBody::has_recommendequip() const {
  return _internal_has_recommendequip();
}
inline const ::msg::CSRspRecommendEquip& CSRspBody::_internal_recommendequip() const {
  const ::msg::CSRspRecommendEquip* p = _impl_.recommendequip_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRecommendEquip&>(
      ::msg::_CSRspRecommendEquip_default_instance_);
}
inline const ::msg::CSRspRecommendEquip& CSRspBody::recommendequip() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RecommendEquip)
  return _internal_recommendequip();
}
inline void CSRspBody::unsafe_arena_set_allocated_recommendequip(
    ::msg::CSRspRecommendEquip* recommendequip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendequip_);
  }
  _impl_.recommendequip_ = recommendequip;
  if (recommendequip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RecommendEquip)
}
inline ::msg::CSRspRecommendEquip* CSRspBody::release_recommendequip() {
  
  ::msg::CSRspRecommendEquip* temp = _impl_.recommendequip_;
  _impl_.recommendequip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRecommendEquip* CSRspBody::unsafe_arena_release_recommendequip() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RecommendEquip)
  
  ::msg::CSRspRecommendEquip* temp = _impl_.recommendequip_;
  _impl_.recommendequip_ = nullptr;
  return temp;
}
inline ::msg::CSRspRecommendEquip* CSRspBody::_internal_mutable_recommendequip() {
  
  if (_impl_.recommendequip_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRecommendEquip>(GetArenaForAllocation());
    _impl_.recommendequip_ = p;
  }
  return _impl_.recommendequip_;
}
inline ::msg::CSRspRecommendEquip* CSRspBody::mutable_recommendequip() {
  ::msg::CSRspRecommendEquip* _msg = _internal_mutable_recommendequip();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RecommendEquip)
  return _msg;
}
inline void CSRspBody::set_allocated_recommendequip(::msg::CSRspRecommendEquip* recommendequip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recommendequip_);
  }
  if (recommendequip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recommendequip));
    if (message_arena != submessage_arena) {
      recommendequip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recommendequip, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recommendequip_ = recommendequip;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RecommendEquip)
}

// .msg.CSRspLoginCancel LoginCancel = 608;
inline bool CSRspBody::_internal_has_logincancel() const {
  return this != internal_default_instance() && _impl_.logincancel_ != nullptr;
}
inline bool CSRspBody::has_logincancel() const {
  return _internal_has_logincancel();
}
inline const ::msg::CSRspLoginCancel& CSRspBody::_internal_logincancel() const {
  const ::msg::CSRspLoginCancel* p = _impl_.logincancel_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspLoginCancel&>(
      ::msg::_CSRspLoginCancel_default_instance_);
}
inline const ::msg::CSRspLoginCancel& CSRspBody::logincancel() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.LoginCancel)
  return _internal_logincancel();
}
inline void CSRspBody::unsafe_arena_set_allocated_logincancel(
    ::msg::CSRspLoginCancel* logincancel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logincancel_);
  }
  _impl_.logincancel_ = logincancel;
  if (logincancel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.LoginCancel)
}
inline ::msg::CSRspLoginCancel* CSRspBody::release_logincancel() {
  
  ::msg::CSRspLoginCancel* temp = _impl_.logincancel_;
  _impl_.logincancel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspLoginCancel* CSRspBody::unsafe_arena_release_logincancel() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.LoginCancel)
  
  ::msg::CSRspLoginCancel* temp = _impl_.logincancel_;
  _impl_.logincancel_ = nullptr;
  return temp;
}
inline ::msg::CSRspLoginCancel* CSRspBody::_internal_mutable_logincancel() {
  
  if (_impl_.logincancel_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspLoginCancel>(GetArenaForAllocation());
    _impl_.logincancel_ = p;
  }
  return _impl_.logincancel_;
}
inline ::msg::CSRspLoginCancel* CSRspBody::mutable_logincancel() {
  ::msg::CSRspLoginCancel* _msg = _internal_mutable_logincancel();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.LoginCancel)
  return _msg;
}
inline void CSRspBody::set_allocated_logincancel(::msg::CSRspLoginCancel* logincancel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logincancel_);
  }
  if (logincancel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logincancel));
    if (message_arena != submessage_arena) {
      logincancel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logincancel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.logincancel_ = logincancel;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.LoginCancel)
}

// .msg.CSRspConvertDebris ConvertDebris = 609;
inline bool CSRspBody::_internal_has_convertdebris() const {
  return this != internal_default_instance() && _impl_.convertdebris_ != nullptr;
}
inline bool CSRspBody::has_convertdebris() const {
  return _internal_has_convertdebris();
}
inline const ::msg::CSRspConvertDebris& CSRspBody::_internal_convertdebris() const {
  const ::msg::CSRspConvertDebris* p = _impl_.convertdebris_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspConvertDebris&>(
      ::msg::_CSRspConvertDebris_default_instance_);
}
inline const ::msg::CSRspConvertDebris& CSRspBody::convertdebris() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ConvertDebris)
  return _internal_convertdebris();
}
inline void CSRspBody::unsafe_arena_set_allocated_convertdebris(
    ::msg::CSRspConvertDebris* convertdebris) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.convertdebris_);
  }
  _impl_.convertdebris_ = convertdebris;
  if (convertdebris) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ConvertDebris)
}
inline ::msg::CSRspConvertDebris* CSRspBody::release_convertdebris() {
  
  ::msg::CSRspConvertDebris* temp = _impl_.convertdebris_;
  _impl_.convertdebris_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspConvertDebris* CSRspBody::unsafe_arena_release_convertdebris() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ConvertDebris)
  
  ::msg::CSRspConvertDebris* temp = _impl_.convertdebris_;
  _impl_.convertdebris_ = nullptr;
  return temp;
}
inline ::msg::CSRspConvertDebris* CSRspBody::_internal_mutable_convertdebris() {
  
  if (_impl_.convertdebris_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspConvertDebris>(GetArenaForAllocation());
    _impl_.convertdebris_ = p;
  }
  return _impl_.convertdebris_;
}
inline ::msg::CSRspConvertDebris* CSRspBody::mutable_convertdebris() {
  ::msg::CSRspConvertDebris* _msg = _internal_mutable_convertdebris();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ConvertDebris)
  return _msg;
}
inline void CSRspBody::set_allocated_convertdebris(::msg::CSRspConvertDebris* convertdebris) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.convertdebris_);
  }
  if (convertdebris) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(convertdebris));
    if (message_arena != submessage_arena) {
      convertdebris = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convertdebris, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.convertdebris_ = convertdebris;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ConvertDebris)
}

// .msg.CSRspUseProtectionCard ProtectionCard = 610;
inline bool CSRspBody::_internal_has_protectioncard() const {
  return this != internal_default_instance() && _impl_.protectioncard_ != nullptr;
}
inline bool CSRspBody::has_protectioncard() const {
  return _internal_has_protectioncard();
}
inline const ::msg::CSRspUseProtectionCard& CSRspBody::_internal_protectioncard() const {
  const ::msg::CSRspUseProtectionCard* p = _impl_.protectioncard_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUseProtectionCard&>(
      ::msg::_CSRspUseProtectionCard_default_instance_);
}
inline const ::msg::CSRspUseProtectionCard& CSRspBody::protectioncard() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ProtectionCard)
  return _internal_protectioncard();
}
inline void CSRspBody::unsafe_arena_set_allocated_protectioncard(
    ::msg::CSRspUseProtectionCard* protectioncard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.protectioncard_);
  }
  _impl_.protectioncard_ = protectioncard;
  if (protectioncard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ProtectionCard)
}
inline ::msg::CSRspUseProtectionCard* CSRspBody::release_protectioncard() {
  
  ::msg::CSRspUseProtectionCard* temp = _impl_.protectioncard_;
  _impl_.protectioncard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUseProtectionCard* CSRspBody::unsafe_arena_release_protectioncard() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ProtectionCard)
  
  ::msg::CSRspUseProtectionCard* temp = _impl_.protectioncard_;
  _impl_.protectioncard_ = nullptr;
  return temp;
}
inline ::msg::CSRspUseProtectionCard* CSRspBody::_internal_mutable_protectioncard() {
  
  if (_impl_.protectioncard_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUseProtectionCard>(GetArenaForAllocation());
    _impl_.protectioncard_ = p;
  }
  return _impl_.protectioncard_;
}
inline ::msg::CSRspUseProtectionCard* CSRspBody::mutable_protectioncard() {
  ::msg::CSRspUseProtectionCard* _msg = _internal_mutable_protectioncard();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ProtectionCard)
  return _msg;
}
inline void CSRspBody::set_allocated_protectioncard(::msg::CSRspUseProtectionCard* protectioncard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.protectioncard_);
  }
  if (protectioncard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(protectioncard));
    if (message_arena != submessage_arena) {
      protectioncard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, protectioncard, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.protectioncard_ = protectioncard;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ProtectionCard)
}

// .msg.CSRspUsePassportCard UsePassportCard = 611;
inline bool CSRspBody::_internal_has_usepassportcard() const {
  return this != internal_default_instance() && _impl_.usepassportcard_ != nullptr;
}
inline bool CSRspBody::has_usepassportcard() const {
  return _internal_has_usepassportcard();
}
inline const ::msg::CSRspUsePassportCard& CSRspBody::_internal_usepassportcard() const {
  const ::msg::CSRspUsePassportCard* p = _impl_.usepassportcard_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUsePassportCard&>(
      ::msg::_CSRspUsePassportCard_default_instance_);
}
inline const ::msg::CSRspUsePassportCard& CSRspBody::usepassportcard() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UsePassportCard)
  return _internal_usepassportcard();
}
inline void CSRspBody::unsafe_arena_set_allocated_usepassportcard(
    ::msg::CSRspUsePassportCard* usepassportcard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usepassportcard_);
  }
  _impl_.usepassportcard_ = usepassportcard;
  if (usepassportcard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UsePassportCard)
}
inline ::msg::CSRspUsePassportCard* CSRspBody::release_usepassportcard() {
  
  ::msg::CSRspUsePassportCard* temp = _impl_.usepassportcard_;
  _impl_.usepassportcard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUsePassportCard* CSRspBody::unsafe_arena_release_usepassportcard() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UsePassportCard)
  
  ::msg::CSRspUsePassportCard* temp = _impl_.usepassportcard_;
  _impl_.usepassportcard_ = nullptr;
  return temp;
}
inline ::msg::CSRspUsePassportCard* CSRspBody::_internal_mutable_usepassportcard() {
  
  if (_impl_.usepassportcard_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUsePassportCard>(GetArenaForAllocation());
    _impl_.usepassportcard_ = p;
  }
  return _impl_.usepassportcard_;
}
inline ::msg::CSRspUsePassportCard* CSRspBody::mutable_usepassportcard() {
  ::msg::CSRspUsePassportCard* _msg = _internal_mutable_usepassportcard();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UsePassportCard)
  return _msg;
}
inline void CSRspBody::set_allocated_usepassportcard(::msg::CSRspUsePassportCard* usepassportcard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.usepassportcard_);
  }
  if (usepassportcard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usepassportcard));
    if (message_arena != submessage_arena) {
      usepassportcard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usepassportcard, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.usepassportcard_ = usepassportcard;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UsePassportCard)
}

// .msg.CSRspSetMedal SetMedal = 612;
inline bool CSRspBody::_internal_has_setmedal() const {
  return this != internal_default_instance() && _impl_.setmedal_ != nullptr;
}
inline bool CSRspBody::has_setmedal() const {
  return _internal_has_setmedal();
}
inline const ::msg::CSRspSetMedal& CSRspBody::_internal_setmedal() const {
  const ::msg::CSRspSetMedal* p = _impl_.setmedal_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSetMedal&>(
      ::msg::_CSRspSetMedal_default_instance_);
}
inline const ::msg::CSRspSetMedal& CSRspBody::setmedal() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SetMedal)
  return _internal_setmedal();
}
inline void CSRspBody::unsafe_arena_set_allocated_setmedal(
    ::msg::CSRspSetMedal* setmedal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setmedal_);
  }
  _impl_.setmedal_ = setmedal;
  if (setmedal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SetMedal)
}
inline ::msg::CSRspSetMedal* CSRspBody::release_setmedal() {
  
  ::msg::CSRspSetMedal* temp = _impl_.setmedal_;
  _impl_.setmedal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSetMedal* CSRspBody::unsafe_arena_release_setmedal() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SetMedal)
  
  ::msg::CSRspSetMedal* temp = _impl_.setmedal_;
  _impl_.setmedal_ = nullptr;
  return temp;
}
inline ::msg::CSRspSetMedal* CSRspBody::_internal_mutable_setmedal() {
  
  if (_impl_.setmedal_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSetMedal>(GetArenaForAllocation());
    _impl_.setmedal_ = p;
  }
  return _impl_.setmedal_;
}
inline ::msg::CSRspSetMedal* CSRspBody::mutable_setmedal() {
  ::msg::CSRspSetMedal* _msg = _internal_mutable_setmedal();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SetMedal)
  return _msg;
}
inline void CSRspBody::set_allocated_setmedal(::msg::CSRspSetMedal* setmedal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setmedal_);
  }
  if (setmedal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setmedal));
    if (message_arena != submessage_arena) {
      setmedal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setmedal, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setmedal_ = setmedal;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SetMedal)
}

// .msg.CSRspUnSetMedal UnSetMedal = 613;
inline bool CSRspBody::_internal_has_unsetmedal() const {
  return this != internal_default_instance() && _impl_.unsetmedal_ != nullptr;
}
inline bool CSRspBody::has_unsetmedal() const {
  return _internal_has_unsetmedal();
}
inline const ::msg::CSRspUnSetMedal& CSRspBody::_internal_unsetmedal() const {
  const ::msg::CSRspUnSetMedal* p = _impl_.unsetmedal_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUnSetMedal&>(
      ::msg::_CSRspUnSetMedal_default_instance_);
}
inline const ::msg::CSRspUnSetMedal& CSRspBody::unsetmedal() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UnSetMedal)
  return _internal_unsetmedal();
}
inline void CSRspBody::unsafe_arena_set_allocated_unsetmedal(
    ::msg::CSRspUnSetMedal* unsetmedal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetmedal_);
  }
  _impl_.unsetmedal_ = unsetmedal;
  if (unsetmedal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UnSetMedal)
}
inline ::msg::CSRspUnSetMedal* CSRspBody::release_unsetmedal() {
  
  ::msg::CSRspUnSetMedal* temp = _impl_.unsetmedal_;
  _impl_.unsetmedal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUnSetMedal* CSRspBody::unsafe_arena_release_unsetmedal() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UnSetMedal)
  
  ::msg::CSRspUnSetMedal* temp = _impl_.unsetmedal_;
  _impl_.unsetmedal_ = nullptr;
  return temp;
}
inline ::msg::CSRspUnSetMedal* CSRspBody::_internal_mutable_unsetmedal() {
  
  if (_impl_.unsetmedal_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUnSetMedal>(GetArenaForAllocation());
    _impl_.unsetmedal_ = p;
  }
  return _impl_.unsetmedal_;
}
inline ::msg::CSRspUnSetMedal* CSRspBody::mutable_unsetmedal() {
  ::msg::CSRspUnSetMedal* _msg = _internal_mutable_unsetmedal();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UnSetMedal)
  return _msg;
}
inline void CSRspBody::set_allocated_unsetmedal(::msg::CSRspUnSetMedal* unsetmedal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetmedal_);
  }
  if (unsetmedal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unsetmedal));
    if (message_arena != submessage_arena) {
      unsetmedal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsetmedal, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unsetmedal_ = unsetmedal;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UnSetMedal)
}

// .msg.CSRspPlayerMedals PlayerMedals = 614;
inline bool CSRspBody::_internal_has_playermedals() const {
  return this != internal_default_instance() && _impl_.playermedals_ != nullptr;
}
inline bool CSRspBody::has_playermedals() const {
  return _internal_has_playermedals();
}
inline const ::msg::CSRspPlayerMedals& CSRspBody::_internal_playermedals() const {
  const ::msg::CSRspPlayerMedals* p = _impl_.playermedals_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPlayerMedals&>(
      ::msg::_CSRspPlayerMedals_default_instance_);
}
inline const ::msg::CSRspPlayerMedals& CSRspBody::playermedals() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PlayerMedals)
  return _internal_playermedals();
}
inline void CSRspBody::unsafe_arena_set_allocated_playermedals(
    ::msg::CSRspPlayerMedals* playermedals) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playermedals_);
  }
  _impl_.playermedals_ = playermedals;
  if (playermedals) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PlayerMedals)
}
inline ::msg::CSRspPlayerMedals* CSRspBody::release_playermedals() {
  
  ::msg::CSRspPlayerMedals* temp = _impl_.playermedals_;
  _impl_.playermedals_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPlayerMedals* CSRspBody::unsafe_arena_release_playermedals() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PlayerMedals)
  
  ::msg::CSRspPlayerMedals* temp = _impl_.playermedals_;
  _impl_.playermedals_ = nullptr;
  return temp;
}
inline ::msg::CSRspPlayerMedals* CSRspBody::_internal_mutable_playermedals() {
  
  if (_impl_.playermedals_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPlayerMedals>(GetArenaForAllocation());
    _impl_.playermedals_ = p;
  }
  return _impl_.playermedals_;
}
inline ::msg::CSRspPlayerMedals* CSRspBody::mutable_playermedals() {
  ::msg::CSRspPlayerMedals* _msg = _internal_mutable_playermedals();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PlayerMedals)
  return _msg;
}
inline void CSRspBody::set_allocated_playermedals(::msg::CSRspPlayerMedals* playermedals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playermedals_);
  }
  if (playermedals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playermedals));
    if (message_arena != submessage_arena) {
      playermedals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playermedals, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playermedals_ = playermedals;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PlayerMedals)
}

// .msg.CSRspUpdateHotDot UpdateHotDot = 615;
inline bool CSRspBody::_internal_has_updatehotdot() const {
  return this != internal_default_instance() && _impl_.updatehotdot_ != nullptr;
}
inline bool CSRspBody::has_updatehotdot() const {
  return _internal_has_updatehotdot();
}
inline const ::msg::CSRspUpdateHotDot& CSRspBody::_internal_updatehotdot() const {
  const ::msg::CSRspUpdateHotDot* p = _impl_.updatehotdot_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUpdateHotDot&>(
      ::msg::_CSRspUpdateHotDot_default_instance_);
}
inline const ::msg::CSRspUpdateHotDot& CSRspBody::updatehotdot() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UpdateHotDot)
  return _internal_updatehotdot();
}
inline void CSRspBody::unsafe_arena_set_allocated_updatehotdot(
    ::msg::CSRspUpdateHotDot* updatehotdot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatehotdot_);
  }
  _impl_.updatehotdot_ = updatehotdot;
  if (updatehotdot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UpdateHotDot)
}
inline ::msg::CSRspUpdateHotDot* CSRspBody::release_updatehotdot() {
  
  ::msg::CSRspUpdateHotDot* temp = _impl_.updatehotdot_;
  _impl_.updatehotdot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUpdateHotDot* CSRspBody::unsafe_arena_release_updatehotdot() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UpdateHotDot)
  
  ::msg::CSRspUpdateHotDot* temp = _impl_.updatehotdot_;
  _impl_.updatehotdot_ = nullptr;
  return temp;
}
inline ::msg::CSRspUpdateHotDot* CSRspBody::_internal_mutable_updatehotdot() {
  
  if (_impl_.updatehotdot_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUpdateHotDot>(GetArenaForAllocation());
    _impl_.updatehotdot_ = p;
  }
  return _impl_.updatehotdot_;
}
inline ::msg::CSRspUpdateHotDot* CSRspBody::mutable_updatehotdot() {
  ::msg::CSRspUpdateHotDot* _msg = _internal_mutable_updatehotdot();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UpdateHotDot)
  return _msg;
}
inline void CSRspBody::set_allocated_updatehotdot(::msg::CSRspUpdateHotDot* updatehotdot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatehotdot_);
  }
  if (updatehotdot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatehotdot));
    if (message_arena != submessage_arena) {
      updatehotdot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatehotdot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updatehotdot_ = updatehotdot;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UpdateHotDot)
}

// .msg.CSRspQueryHotDot QueryHotDot = 616;
inline bool CSRspBody::_internal_has_queryhotdot() const {
  return this != internal_default_instance() && _impl_.queryhotdot_ != nullptr;
}
inline bool CSRspBody::has_queryhotdot() const {
  return _internal_has_queryhotdot();
}
inline const ::msg::CSRspQueryHotDot& CSRspBody::_internal_queryhotdot() const {
  const ::msg::CSRspQueryHotDot* p = _impl_.queryhotdot_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspQueryHotDot&>(
      ::msg::_CSRspQueryHotDot_default_instance_);
}
inline const ::msg::CSRspQueryHotDot& CSRspBody::queryhotdot() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.QueryHotDot)
  return _internal_queryhotdot();
}
inline void CSRspBody::unsafe_arena_set_allocated_queryhotdot(
    ::msg::CSRspQueryHotDot* queryhotdot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.queryhotdot_);
  }
  _impl_.queryhotdot_ = queryhotdot;
  if (queryhotdot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.QueryHotDot)
}
inline ::msg::CSRspQueryHotDot* CSRspBody::release_queryhotdot() {
  
  ::msg::CSRspQueryHotDot* temp = _impl_.queryhotdot_;
  _impl_.queryhotdot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspQueryHotDot* CSRspBody::unsafe_arena_release_queryhotdot() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.QueryHotDot)
  
  ::msg::CSRspQueryHotDot* temp = _impl_.queryhotdot_;
  _impl_.queryhotdot_ = nullptr;
  return temp;
}
inline ::msg::CSRspQueryHotDot* CSRspBody::_internal_mutable_queryhotdot() {
  
  if (_impl_.queryhotdot_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspQueryHotDot>(GetArenaForAllocation());
    _impl_.queryhotdot_ = p;
  }
  return _impl_.queryhotdot_;
}
inline ::msg::CSRspQueryHotDot* CSRspBody::mutable_queryhotdot() {
  ::msg::CSRspQueryHotDot* _msg = _internal_mutable_queryhotdot();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.QueryHotDot)
  return _msg;
}
inline void CSRspBody::set_allocated_queryhotdot(::msg::CSRspQueryHotDot* queryhotdot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.queryhotdot_);
  }
  if (queryhotdot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(queryhotdot));
    if (message_arena != submessage_arena) {
      queryhotdot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, queryhotdot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.queryhotdot_ = queryhotdot;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.QueryHotDot)
}

// .msg.CSRspSetCache SetCache = 617;
inline bool CSRspBody::_internal_has_setcache() const {
  return this != internal_default_instance() && _impl_.setcache_ != nullptr;
}
inline bool CSRspBody::has_setcache() const {
  return _internal_has_setcache();
}
inline const ::msg::CSRspSetCache& CSRspBody::_internal_setcache() const {
  const ::msg::CSRspSetCache* p = _impl_.setcache_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSetCache&>(
      ::msg::_CSRspSetCache_default_instance_);
}
inline const ::msg::CSRspSetCache& CSRspBody::setcache() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SetCache)
  return _internal_setcache();
}
inline void CSRspBody::unsafe_arena_set_allocated_setcache(
    ::msg::CSRspSetCache* setcache) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setcache_);
  }
  _impl_.setcache_ = setcache;
  if (setcache) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SetCache)
}
inline ::msg::CSRspSetCache* CSRspBody::release_setcache() {
  
  ::msg::CSRspSetCache* temp = _impl_.setcache_;
  _impl_.setcache_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSetCache* CSRspBody::unsafe_arena_release_setcache() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SetCache)
  
  ::msg::CSRspSetCache* temp = _impl_.setcache_;
  _impl_.setcache_ = nullptr;
  return temp;
}
inline ::msg::CSRspSetCache* CSRspBody::_internal_mutable_setcache() {
  
  if (_impl_.setcache_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSetCache>(GetArenaForAllocation());
    _impl_.setcache_ = p;
  }
  return _impl_.setcache_;
}
inline ::msg::CSRspSetCache* CSRspBody::mutable_setcache() {
  ::msg::CSRspSetCache* _msg = _internal_mutable_setcache();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SetCache)
  return _msg;
}
inline void CSRspBody::set_allocated_setcache(::msg::CSRspSetCache* setcache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setcache_);
  }
  if (setcache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setcache));
    if (message_arena != submessage_arena) {
      setcache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setcache, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setcache_ = setcache;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SetCache)
}

// .msg.CSRspGetCache GetCache = 618;
inline bool CSRspBody::_internal_has_getcache() const {
  return this != internal_default_instance() && _impl_.getcache_ != nullptr;
}
inline bool CSRspBody::has_getcache() const {
  return _internal_has_getcache();
}
inline const ::msg::CSRspGetCache& CSRspBody::_internal_getcache() const {
  const ::msg::CSRspGetCache* p = _impl_.getcache_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetCache&>(
      ::msg::_CSRspGetCache_default_instance_);
}
inline const ::msg::CSRspGetCache& CSRspBody::getcache() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetCache)
  return _internal_getcache();
}
inline void CSRspBody::unsafe_arena_set_allocated_getcache(
    ::msg::CSRspGetCache* getcache) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getcache_);
  }
  _impl_.getcache_ = getcache;
  if (getcache) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetCache)
}
inline ::msg::CSRspGetCache* CSRspBody::release_getcache() {
  
  ::msg::CSRspGetCache* temp = _impl_.getcache_;
  _impl_.getcache_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetCache* CSRspBody::unsafe_arena_release_getcache() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetCache)
  
  ::msg::CSRspGetCache* temp = _impl_.getcache_;
  _impl_.getcache_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetCache* CSRspBody::_internal_mutable_getcache() {
  
  if (_impl_.getcache_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetCache>(GetArenaForAllocation());
    _impl_.getcache_ = p;
  }
  return _impl_.getcache_;
}
inline ::msg::CSRspGetCache* CSRspBody::mutable_getcache() {
  ::msg::CSRspGetCache* _msg = _internal_mutable_getcache();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetCache)
  return _msg;
}
inline void CSRspBody::set_allocated_getcache(::msg::CSRspGetCache* getcache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getcache_);
  }
  if (getcache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getcache));
    if (message_arena != submessage_arena) {
      getcache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getcache, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getcache_ = getcache;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetCache)
}

// .msg.CSRspBuyChallengeCount BuyChallengeCount = 619;
inline bool CSRspBody::_internal_has_buychallengecount() const {
  return this != internal_default_instance() && _impl_.buychallengecount_ != nullptr;
}
inline bool CSRspBody::has_buychallengecount() const {
  return _internal_has_buychallengecount();
}
inline const ::msg::CSRspBuyChallengeCount& CSRspBody::_internal_buychallengecount() const {
  const ::msg::CSRspBuyChallengeCount* p = _impl_.buychallengecount_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspBuyChallengeCount&>(
      ::msg::_CSRspBuyChallengeCount_default_instance_);
}
inline const ::msg::CSRspBuyChallengeCount& CSRspBody::buychallengecount() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.BuyChallengeCount)
  return _internal_buychallengecount();
}
inline void CSRspBody::unsafe_arena_set_allocated_buychallengecount(
    ::msg::CSRspBuyChallengeCount* buychallengecount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buychallengecount_);
  }
  _impl_.buychallengecount_ = buychallengecount;
  if (buychallengecount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.BuyChallengeCount)
}
inline ::msg::CSRspBuyChallengeCount* CSRspBody::release_buychallengecount() {
  
  ::msg::CSRspBuyChallengeCount* temp = _impl_.buychallengecount_;
  _impl_.buychallengecount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspBuyChallengeCount* CSRspBody::unsafe_arena_release_buychallengecount() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.BuyChallengeCount)
  
  ::msg::CSRspBuyChallengeCount* temp = _impl_.buychallengecount_;
  _impl_.buychallengecount_ = nullptr;
  return temp;
}
inline ::msg::CSRspBuyChallengeCount* CSRspBody::_internal_mutable_buychallengecount() {
  
  if (_impl_.buychallengecount_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspBuyChallengeCount>(GetArenaForAllocation());
    _impl_.buychallengecount_ = p;
  }
  return _impl_.buychallengecount_;
}
inline ::msg::CSRspBuyChallengeCount* CSRspBody::mutable_buychallengecount() {
  ::msg::CSRspBuyChallengeCount* _msg = _internal_mutable_buychallengecount();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.BuyChallengeCount)
  return _msg;
}
inline void CSRspBody::set_allocated_buychallengecount(::msg::CSRspBuyChallengeCount* buychallengecount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buychallengecount_);
  }
  if (buychallengecount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buychallengecount));
    if (message_arena != submessage_arena) {
      buychallengecount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buychallengecount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buychallengecount_ = buychallengecount;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.BuyChallengeCount)
}

// .msg.CSRspGetPveRank GetPveRank = 620;
inline bool CSRspBody::_internal_has_getpverank() const {
  return this != internal_default_instance() && _impl_.getpverank_ != nullptr;
}
inline bool CSRspBody::has_getpverank() const {
  return _internal_has_getpverank();
}
inline const ::msg::CSRspGetPveRank& CSRspBody::_internal_getpverank() const {
  const ::msg::CSRspGetPveRank* p = _impl_.getpverank_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetPveRank&>(
      ::msg::_CSRspGetPveRank_default_instance_);
}
inline const ::msg::CSRspGetPveRank& CSRspBody::getpverank() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetPveRank)
  return _internal_getpverank();
}
inline void CSRspBody::unsafe_arena_set_allocated_getpverank(
    ::msg::CSRspGetPveRank* getpverank) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getpverank_);
  }
  _impl_.getpverank_ = getpverank;
  if (getpverank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetPveRank)
}
inline ::msg::CSRspGetPveRank* CSRspBody::release_getpverank() {
  
  ::msg::CSRspGetPveRank* temp = _impl_.getpverank_;
  _impl_.getpverank_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetPveRank* CSRspBody::unsafe_arena_release_getpverank() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetPveRank)
  
  ::msg::CSRspGetPveRank* temp = _impl_.getpverank_;
  _impl_.getpverank_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetPveRank* CSRspBody::_internal_mutable_getpverank() {
  
  if (_impl_.getpverank_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetPveRank>(GetArenaForAllocation());
    _impl_.getpverank_ = p;
  }
  return _impl_.getpverank_;
}
inline ::msg::CSRspGetPveRank* CSRspBody::mutable_getpverank() {
  ::msg::CSRspGetPveRank* _msg = _internal_mutable_getpverank();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetPveRank)
  return _msg;
}
inline void CSRspBody::set_allocated_getpverank(::msg::CSRspGetPveRank* getpverank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getpverank_);
  }
  if (getpverank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getpverank));
    if (message_arena != submessage_arena) {
      getpverank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getpverank, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getpverank_ = getpverank;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetPveRank)
}

// .msg.CSRspAuthAccount AuthAccount = 621;
inline bool CSRspBody::_internal_has_authaccount() const {
  return this != internal_default_instance() && _impl_.authaccount_ != nullptr;
}
inline bool CSRspBody::has_authaccount() const {
  return _internal_has_authaccount();
}
inline const ::msg::CSRspAuthAccount& CSRspBody::_internal_authaccount() const {
  const ::msg::CSRspAuthAccount* p = _impl_.authaccount_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspAuthAccount&>(
      ::msg::_CSRspAuthAccount_default_instance_);
}
inline const ::msg::CSRspAuthAccount& CSRspBody::authaccount() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.AuthAccount)
  return _internal_authaccount();
}
inline void CSRspBody::unsafe_arena_set_allocated_authaccount(
    ::msg::CSRspAuthAccount* authaccount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.authaccount_);
  }
  _impl_.authaccount_ = authaccount;
  if (authaccount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.AuthAccount)
}
inline ::msg::CSRspAuthAccount* CSRspBody::release_authaccount() {
  
  ::msg::CSRspAuthAccount* temp = _impl_.authaccount_;
  _impl_.authaccount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspAuthAccount* CSRspBody::unsafe_arena_release_authaccount() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.AuthAccount)
  
  ::msg::CSRspAuthAccount* temp = _impl_.authaccount_;
  _impl_.authaccount_ = nullptr;
  return temp;
}
inline ::msg::CSRspAuthAccount* CSRspBody::_internal_mutable_authaccount() {
  
  if (_impl_.authaccount_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspAuthAccount>(GetArenaForAllocation());
    _impl_.authaccount_ = p;
  }
  return _impl_.authaccount_;
}
inline ::msg::CSRspAuthAccount* CSRspBody::mutable_authaccount() {
  ::msg::CSRspAuthAccount* _msg = _internal_mutable_authaccount();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.AuthAccount)
  return _msg;
}
inline void CSRspBody::set_allocated_authaccount(::msg::CSRspAuthAccount* authaccount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.authaccount_);
  }
  if (authaccount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authaccount));
    if (message_arena != submessage_arena) {
      authaccount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authaccount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.authaccount_ = authaccount;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.AuthAccount)
}

// .msg.CSRspUnbindAccount UnbindAccount = 622;
inline bool CSRspBody::_internal_has_unbindaccount() const {
  return this != internal_default_instance() && _impl_.unbindaccount_ != nullptr;
}
inline bool CSRspBody::has_unbindaccount() const {
  return _internal_has_unbindaccount();
}
inline const ::msg::CSRspUnbindAccount& CSRspBody::_internal_unbindaccount() const {
  const ::msg::CSRspUnbindAccount* p = _impl_.unbindaccount_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUnbindAccount&>(
      ::msg::_CSRspUnbindAccount_default_instance_);
}
inline const ::msg::CSRspUnbindAccount& CSRspBody::unbindaccount() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UnbindAccount)
  return _internal_unbindaccount();
}
inline void CSRspBody::unsafe_arena_set_allocated_unbindaccount(
    ::msg::CSRspUnbindAccount* unbindaccount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unbindaccount_);
  }
  _impl_.unbindaccount_ = unbindaccount;
  if (unbindaccount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UnbindAccount)
}
inline ::msg::CSRspUnbindAccount* CSRspBody::release_unbindaccount() {
  
  ::msg::CSRspUnbindAccount* temp = _impl_.unbindaccount_;
  _impl_.unbindaccount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUnbindAccount* CSRspBody::unsafe_arena_release_unbindaccount() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UnbindAccount)
  
  ::msg::CSRspUnbindAccount* temp = _impl_.unbindaccount_;
  _impl_.unbindaccount_ = nullptr;
  return temp;
}
inline ::msg::CSRspUnbindAccount* CSRspBody::_internal_mutable_unbindaccount() {
  
  if (_impl_.unbindaccount_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUnbindAccount>(GetArenaForAllocation());
    _impl_.unbindaccount_ = p;
  }
  return _impl_.unbindaccount_;
}
inline ::msg::CSRspUnbindAccount* CSRspBody::mutable_unbindaccount() {
  ::msg::CSRspUnbindAccount* _msg = _internal_mutable_unbindaccount();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UnbindAccount)
  return _msg;
}
inline void CSRspBody::set_allocated_unbindaccount(::msg::CSRspUnbindAccount* unbindaccount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unbindaccount_);
  }
  if (unbindaccount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unbindaccount));
    if (message_arena != submessage_arena) {
      unbindaccount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unbindaccount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unbindaccount_ = unbindaccount;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UnbindAccount)
}

// .msg.CSRspBagToItem BagToItem = 623;
inline bool CSRspBody::_internal_has_bagtoitem() const {
  return this != internal_default_instance() && _impl_.bagtoitem_ != nullptr;
}
inline bool CSRspBody::has_bagtoitem() const {
  return _internal_has_bagtoitem();
}
inline const ::msg::CSRspBagToItem& CSRspBody::_internal_bagtoitem() const {
  const ::msg::CSRspBagToItem* p = _impl_.bagtoitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspBagToItem&>(
      ::msg::_CSRspBagToItem_default_instance_);
}
inline const ::msg::CSRspBagToItem& CSRspBody::bagtoitem() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.BagToItem)
  return _internal_bagtoitem();
}
inline void CSRspBody::unsafe_arena_set_allocated_bagtoitem(
    ::msg::CSRspBagToItem* bagtoitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bagtoitem_);
  }
  _impl_.bagtoitem_ = bagtoitem;
  if (bagtoitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.BagToItem)
}
inline ::msg::CSRspBagToItem* CSRspBody::release_bagtoitem() {
  
  ::msg::CSRspBagToItem* temp = _impl_.bagtoitem_;
  _impl_.bagtoitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspBagToItem* CSRspBody::unsafe_arena_release_bagtoitem() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.BagToItem)
  
  ::msg::CSRspBagToItem* temp = _impl_.bagtoitem_;
  _impl_.bagtoitem_ = nullptr;
  return temp;
}
inline ::msg::CSRspBagToItem* CSRspBody::_internal_mutable_bagtoitem() {
  
  if (_impl_.bagtoitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspBagToItem>(GetArenaForAllocation());
    _impl_.bagtoitem_ = p;
  }
  return _impl_.bagtoitem_;
}
inline ::msg::CSRspBagToItem* CSRspBody::mutable_bagtoitem() {
  ::msg::CSRspBagToItem* _msg = _internal_mutable_bagtoitem();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.BagToItem)
  return _msg;
}
inline void CSRspBody::set_allocated_bagtoitem(::msg::CSRspBagToItem* bagtoitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bagtoitem_);
  }
  if (bagtoitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bagtoitem));
    if (message_arena != submessage_arena) {
      bagtoitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bagtoitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bagtoitem_ = bagtoitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.BagToItem)
}

// .msg.CSRspIdentifyItem IdentifyItem = 624;
inline bool CSRspBody::_internal_has_identifyitem() const {
  return this != internal_default_instance() && _impl_.identifyitem_ != nullptr;
}
inline bool CSRspBody::has_identifyitem() const {
  return _internal_has_identifyitem();
}
inline const ::msg::CSRspIdentifyItem& CSRspBody::_internal_identifyitem() const {
  const ::msg::CSRspIdentifyItem* p = _impl_.identifyitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspIdentifyItem&>(
      ::msg::_CSRspIdentifyItem_default_instance_);
}
inline const ::msg::CSRspIdentifyItem& CSRspBody::identifyitem() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.IdentifyItem)
  return _internal_identifyitem();
}
inline void CSRspBody::unsafe_arena_set_allocated_identifyitem(
    ::msg::CSRspIdentifyItem* identifyitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifyitem_);
  }
  _impl_.identifyitem_ = identifyitem;
  if (identifyitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.IdentifyItem)
}
inline ::msg::CSRspIdentifyItem* CSRspBody::release_identifyitem() {
  
  ::msg::CSRspIdentifyItem* temp = _impl_.identifyitem_;
  _impl_.identifyitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspIdentifyItem* CSRspBody::unsafe_arena_release_identifyitem() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.IdentifyItem)
  
  ::msg::CSRspIdentifyItem* temp = _impl_.identifyitem_;
  _impl_.identifyitem_ = nullptr;
  return temp;
}
inline ::msg::CSRspIdentifyItem* CSRspBody::_internal_mutable_identifyitem() {
  
  if (_impl_.identifyitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspIdentifyItem>(GetArenaForAllocation());
    _impl_.identifyitem_ = p;
  }
  return _impl_.identifyitem_;
}
inline ::msg::CSRspIdentifyItem* CSRspBody::mutable_identifyitem() {
  ::msg::CSRspIdentifyItem* _msg = _internal_mutable_identifyitem();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.IdentifyItem)
  return _msg;
}
inline void CSRspBody::set_allocated_identifyitem(::msg::CSRspIdentifyItem* identifyitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifyitem_);
  }
  if (identifyitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifyitem));
    if (message_arena != submessage_arena) {
      identifyitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifyitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.identifyitem_ = identifyitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.IdentifyItem)
}

// .msg.CSRspInsetItemAffix InsetItemAffix = 625;
inline bool CSRspBody::_internal_has_insetitemaffix() const {
  return this != internal_default_instance() && _impl_.insetitemaffix_ != nullptr;
}
inline bool CSRspBody::has_insetitemaffix() const {
  return _internal_has_insetitemaffix();
}
inline const ::msg::CSRspInsetItemAffix& CSRspBody::_internal_insetitemaffix() const {
  const ::msg::CSRspInsetItemAffix* p = _impl_.insetitemaffix_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspInsetItemAffix&>(
      ::msg::_CSRspInsetItemAffix_default_instance_);
}
inline const ::msg::CSRspInsetItemAffix& CSRspBody::insetitemaffix() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.InsetItemAffix)
  return _internal_insetitemaffix();
}
inline void CSRspBody::unsafe_arena_set_allocated_insetitemaffix(
    ::msg::CSRspInsetItemAffix* insetitemaffix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.insetitemaffix_);
  }
  _impl_.insetitemaffix_ = insetitemaffix;
  if (insetitemaffix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.InsetItemAffix)
}
inline ::msg::CSRspInsetItemAffix* CSRspBody::release_insetitemaffix() {
  
  ::msg::CSRspInsetItemAffix* temp = _impl_.insetitemaffix_;
  _impl_.insetitemaffix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspInsetItemAffix* CSRspBody::unsafe_arena_release_insetitemaffix() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.InsetItemAffix)
  
  ::msg::CSRspInsetItemAffix* temp = _impl_.insetitemaffix_;
  _impl_.insetitemaffix_ = nullptr;
  return temp;
}
inline ::msg::CSRspInsetItemAffix* CSRspBody::_internal_mutable_insetitemaffix() {
  
  if (_impl_.insetitemaffix_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspInsetItemAffix>(GetArenaForAllocation());
    _impl_.insetitemaffix_ = p;
  }
  return _impl_.insetitemaffix_;
}
inline ::msg::CSRspInsetItemAffix* CSRspBody::mutable_insetitemaffix() {
  ::msg::CSRspInsetItemAffix* _msg = _internal_mutable_insetitemaffix();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.InsetItemAffix)
  return _msg;
}
inline void CSRspBody::set_allocated_insetitemaffix(::msg::CSRspInsetItemAffix* insetitemaffix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.insetitemaffix_);
  }
  if (insetitemaffix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insetitemaffix));
    if (message_arena != submessage_arena) {
      insetitemaffix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insetitemaffix, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.insetitemaffix_ = insetitemaffix;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.InsetItemAffix)
}

// .msg.CSRspUnsetItemAffix UnsetItemAffix = 626;
inline bool CSRspBody::_internal_has_unsetitemaffix() const {
  return this != internal_default_instance() && _impl_.unsetitemaffix_ != nullptr;
}
inline bool CSRspBody::has_unsetitemaffix() const {
  return _internal_has_unsetitemaffix();
}
inline const ::msg::CSRspUnsetItemAffix& CSRspBody::_internal_unsetitemaffix() const {
  const ::msg::CSRspUnsetItemAffix* p = _impl_.unsetitemaffix_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUnsetItemAffix&>(
      ::msg::_CSRspUnsetItemAffix_default_instance_);
}
inline const ::msg::CSRspUnsetItemAffix& CSRspBody::unsetitemaffix() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UnsetItemAffix)
  return _internal_unsetitemaffix();
}
inline void CSRspBody::unsafe_arena_set_allocated_unsetitemaffix(
    ::msg::CSRspUnsetItemAffix* unsetitemaffix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetitemaffix_);
  }
  _impl_.unsetitemaffix_ = unsetitemaffix;
  if (unsetitemaffix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UnsetItemAffix)
}
inline ::msg::CSRspUnsetItemAffix* CSRspBody::release_unsetitemaffix() {
  
  ::msg::CSRspUnsetItemAffix* temp = _impl_.unsetitemaffix_;
  _impl_.unsetitemaffix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUnsetItemAffix* CSRspBody::unsafe_arena_release_unsetitemaffix() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UnsetItemAffix)
  
  ::msg::CSRspUnsetItemAffix* temp = _impl_.unsetitemaffix_;
  _impl_.unsetitemaffix_ = nullptr;
  return temp;
}
inline ::msg::CSRspUnsetItemAffix* CSRspBody::_internal_mutable_unsetitemaffix() {
  
  if (_impl_.unsetitemaffix_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUnsetItemAffix>(GetArenaForAllocation());
    _impl_.unsetitemaffix_ = p;
  }
  return _impl_.unsetitemaffix_;
}
inline ::msg::CSRspUnsetItemAffix* CSRspBody::mutable_unsetitemaffix() {
  ::msg::CSRspUnsetItemAffix* _msg = _internal_mutable_unsetitemaffix();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UnsetItemAffix)
  return _msg;
}
inline void CSRspBody::set_allocated_unsetitemaffix(::msg::CSRspUnsetItemAffix* unsetitemaffix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unsetitemaffix_);
  }
  if (unsetitemaffix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unsetitemaffix));
    if (message_arena != submessage_arena) {
      unsetitemaffix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsetitemaffix, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unsetitemaffix_ = unsetitemaffix;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UnsetItemAffix)
}

// .msg.CSRspSetDefaultAttributes SetDefaultAttributes = 627;
inline bool CSRspBody::_internal_has_setdefaultattributes() const {
  return this != internal_default_instance() && _impl_.setdefaultattributes_ != nullptr;
}
inline bool CSRspBody::has_setdefaultattributes() const {
  return _internal_has_setdefaultattributes();
}
inline const ::msg::CSRspSetDefaultAttributes& CSRspBody::_internal_setdefaultattributes() const {
  const ::msg::CSRspSetDefaultAttributes* p = _impl_.setdefaultattributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSetDefaultAttributes&>(
      ::msg::_CSRspSetDefaultAttributes_default_instance_);
}
inline const ::msg::CSRspSetDefaultAttributes& CSRspBody::setdefaultattributes() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SetDefaultAttributes)
  return _internal_setdefaultattributes();
}
inline void CSRspBody::unsafe_arena_set_allocated_setdefaultattributes(
    ::msg::CSRspSetDefaultAttributes* setdefaultattributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setdefaultattributes_);
  }
  _impl_.setdefaultattributes_ = setdefaultattributes;
  if (setdefaultattributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SetDefaultAttributes)
}
inline ::msg::CSRspSetDefaultAttributes* CSRspBody::release_setdefaultattributes() {
  
  ::msg::CSRspSetDefaultAttributes* temp = _impl_.setdefaultattributes_;
  _impl_.setdefaultattributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSetDefaultAttributes* CSRspBody::unsafe_arena_release_setdefaultattributes() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SetDefaultAttributes)
  
  ::msg::CSRspSetDefaultAttributes* temp = _impl_.setdefaultattributes_;
  _impl_.setdefaultattributes_ = nullptr;
  return temp;
}
inline ::msg::CSRspSetDefaultAttributes* CSRspBody::_internal_mutable_setdefaultattributes() {
  
  if (_impl_.setdefaultattributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSetDefaultAttributes>(GetArenaForAllocation());
    _impl_.setdefaultattributes_ = p;
  }
  return _impl_.setdefaultattributes_;
}
inline ::msg::CSRspSetDefaultAttributes* CSRspBody::mutable_setdefaultattributes() {
  ::msg::CSRspSetDefaultAttributes* _msg = _internal_mutable_setdefaultattributes();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SetDefaultAttributes)
  return _msg;
}
inline void CSRspBody::set_allocated_setdefaultattributes(::msg::CSRspSetDefaultAttributes* setdefaultattributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setdefaultattributes_);
  }
  if (setdefaultattributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setdefaultattributes));
    if (message_arena != submessage_arena) {
      setdefaultattributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setdefaultattributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setdefaultattributes_ = setdefaultattributes;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SetDefaultAttributes)
}

// .msg.CSRspCheckCancel CheckCancel = 628;
inline bool CSRspBody::_internal_has_checkcancel() const {
  return this != internal_default_instance() && _impl_.checkcancel_ != nullptr;
}
inline bool CSRspBody::has_checkcancel() const {
  return _internal_has_checkcancel();
}
inline const ::msg::CSRspCheckCancel& CSRspBody::_internal_checkcancel() const {
  const ::msg::CSRspCheckCancel* p = _impl_.checkcancel_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspCheckCancel&>(
      ::msg::_CSRspCheckCancel_default_instance_);
}
inline const ::msg::CSRspCheckCancel& CSRspBody::checkcancel() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.CheckCancel)
  return _internal_checkcancel();
}
inline void CSRspBody::unsafe_arena_set_allocated_checkcancel(
    ::msg::CSRspCheckCancel* checkcancel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.checkcancel_);
  }
  _impl_.checkcancel_ = checkcancel;
  if (checkcancel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.CheckCancel)
}
inline ::msg::CSRspCheckCancel* CSRspBody::release_checkcancel() {
  
  ::msg::CSRspCheckCancel* temp = _impl_.checkcancel_;
  _impl_.checkcancel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspCheckCancel* CSRspBody::unsafe_arena_release_checkcancel() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.CheckCancel)
  
  ::msg::CSRspCheckCancel* temp = _impl_.checkcancel_;
  _impl_.checkcancel_ = nullptr;
  return temp;
}
inline ::msg::CSRspCheckCancel* CSRspBody::_internal_mutable_checkcancel() {
  
  if (_impl_.checkcancel_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspCheckCancel>(GetArenaForAllocation());
    _impl_.checkcancel_ = p;
  }
  return _impl_.checkcancel_;
}
inline ::msg::CSRspCheckCancel* CSRspBody::mutable_checkcancel() {
  ::msg::CSRspCheckCancel* _msg = _internal_mutable_checkcancel();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.CheckCancel)
  return _msg;
}
inline void CSRspBody::set_allocated_checkcancel(::msg::CSRspCheckCancel* checkcancel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.checkcancel_);
  }
  if (checkcancel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(checkcancel));
    if (message_arena != submessage_arena) {
      checkcancel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkcancel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.checkcancel_ = checkcancel;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.CheckCancel)
}

// .msg.CSRspCancelAccount CancelAccount = 629;
inline bool CSRspBody::_internal_has_cancelaccount() const {
  return this != internal_default_instance() && _impl_.cancelaccount_ != nullptr;
}
inline bool CSRspBody::has_cancelaccount() const {
  return _internal_has_cancelaccount();
}
inline const ::msg::CSRspCancelAccount& CSRspBody::_internal_cancelaccount() const {
  const ::msg::CSRspCancelAccount* p = _impl_.cancelaccount_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspCancelAccount&>(
      ::msg::_CSRspCancelAccount_default_instance_);
}
inline const ::msg::CSRspCancelAccount& CSRspBody::cancelaccount() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.CancelAccount)
  return _internal_cancelaccount();
}
inline void CSRspBody::unsafe_arena_set_allocated_cancelaccount(
    ::msg::CSRspCancelAccount* cancelaccount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cancelaccount_);
  }
  _impl_.cancelaccount_ = cancelaccount;
  if (cancelaccount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.CancelAccount)
}
inline ::msg::CSRspCancelAccount* CSRspBody::release_cancelaccount() {
  
  ::msg::CSRspCancelAccount* temp = _impl_.cancelaccount_;
  _impl_.cancelaccount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspCancelAccount* CSRspBody::unsafe_arena_release_cancelaccount() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.CancelAccount)
  
  ::msg::CSRspCancelAccount* temp = _impl_.cancelaccount_;
  _impl_.cancelaccount_ = nullptr;
  return temp;
}
inline ::msg::CSRspCancelAccount* CSRspBody::_internal_mutable_cancelaccount() {
  
  if (_impl_.cancelaccount_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspCancelAccount>(GetArenaForAllocation());
    _impl_.cancelaccount_ = p;
  }
  return _impl_.cancelaccount_;
}
inline ::msg::CSRspCancelAccount* CSRspBody::mutable_cancelaccount() {
  ::msg::CSRspCancelAccount* _msg = _internal_mutable_cancelaccount();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.CancelAccount)
  return _msg;
}
inline void CSRspBody::set_allocated_cancelaccount(::msg::CSRspCancelAccount* cancelaccount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cancelaccount_);
  }
  if (cancelaccount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancelaccount));
    if (message_arena != submessage_arena) {
      cancelaccount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancelaccount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cancelaccount_ = cancelaccount;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.CancelAccount)
}

// .msg.CSRspOAuthApp OAuthApp = 630;
inline bool CSRspBody::_internal_has_oauthapp() const {
  return this != internal_default_instance() && _impl_.oauthapp_ != nullptr;
}
inline bool CSRspBody::has_oauthapp() const {
  return _internal_has_oauthapp();
}
inline const ::msg::CSRspOAuthApp& CSRspBody::_internal_oauthapp() const {
  const ::msg::CSRspOAuthApp* p = _impl_.oauthapp_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspOAuthApp&>(
      ::msg::_CSRspOAuthApp_default_instance_);
}
inline const ::msg::CSRspOAuthApp& CSRspBody::oauthapp() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.OAuthApp)
  return _internal_oauthapp();
}
inline void CSRspBody::unsafe_arena_set_allocated_oauthapp(
    ::msg::CSRspOAuthApp* oauthapp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oauthapp_);
  }
  _impl_.oauthapp_ = oauthapp;
  if (oauthapp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.OAuthApp)
}
inline ::msg::CSRspOAuthApp* CSRspBody::release_oauthapp() {
  
  ::msg::CSRspOAuthApp* temp = _impl_.oauthapp_;
  _impl_.oauthapp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspOAuthApp* CSRspBody::unsafe_arena_release_oauthapp() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.OAuthApp)
  
  ::msg::CSRspOAuthApp* temp = _impl_.oauthapp_;
  _impl_.oauthapp_ = nullptr;
  return temp;
}
inline ::msg::CSRspOAuthApp* CSRspBody::_internal_mutable_oauthapp() {
  
  if (_impl_.oauthapp_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspOAuthApp>(GetArenaForAllocation());
    _impl_.oauthapp_ = p;
  }
  return _impl_.oauthapp_;
}
inline ::msg::CSRspOAuthApp* CSRspBody::mutable_oauthapp() {
  ::msg::CSRspOAuthApp* _msg = _internal_mutable_oauthapp();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.OAuthApp)
  return _msg;
}
inline void CSRspBody::set_allocated_oauthapp(::msg::CSRspOAuthApp* oauthapp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oauthapp_);
  }
  if (oauthapp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oauthapp));
    if (message_arena != submessage_arena) {
      oauthapp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oauthapp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.oauthapp_ = oauthapp;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.OAuthApp)
}

// .msg.CSRspGetSelfNumRankData SelfNumRankData = 631;
inline bool CSRspBody::_internal_has_selfnumrankdata() const {
  return this != internal_default_instance() && _impl_.selfnumrankdata_ != nullptr;
}
inline bool CSRspBody::has_selfnumrankdata() const {
  return _internal_has_selfnumrankdata();
}
inline const ::msg::CSRspGetSelfNumRankData& CSRspBody::_internal_selfnumrankdata() const {
  const ::msg::CSRspGetSelfNumRankData* p = _impl_.selfnumrankdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetSelfNumRankData&>(
      ::msg::_CSRspGetSelfNumRankData_default_instance_);
}
inline const ::msg::CSRspGetSelfNumRankData& CSRspBody::selfnumrankdata() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SelfNumRankData)
  return _internal_selfnumrankdata();
}
inline void CSRspBody::unsafe_arena_set_allocated_selfnumrankdata(
    ::msg::CSRspGetSelfNumRankData* selfnumrankdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selfnumrankdata_);
  }
  _impl_.selfnumrankdata_ = selfnumrankdata;
  if (selfnumrankdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SelfNumRankData)
}
inline ::msg::CSRspGetSelfNumRankData* CSRspBody::release_selfnumrankdata() {
  
  ::msg::CSRspGetSelfNumRankData* temp = _impl_.selfnumrankdata_;
  _impl_.selfnumrankdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetSelfNumRankData* CSRspBody::unsafe_arena_release_selfnumrankdata() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SelfNumRankData)
  
  ::msg::CSRspGetSelfNumRankData* temp = _impl_.selfnumrankdata_;
  _impl_.selfnumrankdata_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetSelfNumRankData* CSRspBody::_internal_mutable_selfnumrankdata() {
  
  if (_impl_.selfnumrankdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetSelfNumRankData>(GetArenaForAllocation());
    _impl_.selfnumrankdata_ = p;
  }
  return _impl_.selfnumrankdata_;
}
inline ::msg::CSRspGetSelfNumRankData* CSRspBody::mutable_selfnumrankdata() {
  ::msg::CSRspGetSelfNumRankData* _msg = _internal_mutable_selfnumrankdata();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SelfNumRankData)
  return _msg;
}
inline void CSRspBody::set_allocated_selfnumrankdata(::msg::CSRspGetSelfNumRankData* selfnumrankdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.selfnumrankdata_);
  }
  if (selfnumrankdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selfnumrankdata));
    if (message_arena != submessage_arena) {
      selfnumrankdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selfnumrankdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.selfnumrankdata_ = selfnumrankdata;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SelfNumRankData)
}

// .msg.CSRspUpdateCardGroup UpdateCardGroup = 632;
inline bool CSRspBody::_internal_has_updatecardgroup() const {
  return this != internal_default_instance() && _impl_.updatecardgroup_ != nullptr;
}
inline bool CSRspBody::has_updatecardgroup() const {
  return _internal_has_updatecardgroup();
}
inline const ::msg::CSRspUpdateCardGroup& CSRspBody::_internal_updatecardgroup() const {
  const ::msg::CSRspUpdateCardGroup* p = _impl_.updatecardgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUpdateCardGroup&>(
      ::msg::_CSRspUpdateCardGroup_default_instance_);
}
inline const ::msg::CSRspUpdateCardGroup& CSRspBody::updatecardgroup() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UpdateCardGroup)
  return _internal_updatecardgroup();
}
inline void CSRspBody::unsafe_arena_set_allocated_updatecardgroup(
    ::msg::CSRspUpdateCardGroup* updatecardgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatecardgroup_);
  }
  _impl_.updatecardgroup_ = updatecardgroup;
  if (updatecardgroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UpdateCardGroup)
}
inline ::msg::CSRspUpdateCardGroup* CSRspBody::release_updatecardgroup() {
  
  ::msg::CSRspUpdateCardGroup* temp = _impl_.updatecardgroup_;
  _impl_.updatecardgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUpdateCardGroup* CSRspBody::unsafe_arena_release_updatecardgroup() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UpdateCardGroup)
  
  ::msg::CSRspUpdateCardGroup* temp = _impl_.updatecardgroup_;
  _impl_.updatecardgroup_ = nullptr;
  return temp;
}
inline ::msg::CSRspUpdateCardGroup* CSRspBody::_internal_mutable_updatecardgroup() {
  
  if (_impl_.updatecardgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUpdateCardGroup>(GetArenaForAllocation());
    _impl_.updatecardgroup_ = p;
  }
  return _impl_.updatecardgroup_;
}
inline ::msg::CSRspUpdateCardGroup* CSRspBody::mutable_updatecardgroup() {
  ::msg::CSRspUpdateCardGroup* _msg = _internal_mutable_updatecardgroup();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UpdateCardGroup)
  return _msg;
}
inline void CSRspBody::set_allocated_updatecardgroup(::msg::CSRspUpdateCardGroup* updatecardgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatecardgroup_);
  }
  if (updatecardgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatecardgroup));
    if (message_arena != submessage_arena) {
      updatecardgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatecardgroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updatecardgroup_ = updatecardgroup;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UpdateCardGroup)
}

// .msg.CSRspUpdateCardGroupName UpdateCardGroupName = 633;
inline bool CSRspBody::_internal_has_updatecardgroupname() const {
  return this != internal_default_instance() && _impl_.updatecardgroupname_ != nullptr;
}
inline bool CSRspBody::has_updatecardgroupname() const {
  return _internal_has_updatecardgroupname();
}
inline const ::msg::CSRspUpdateCardGroupName& CSRspBody::_internal_updatecardgroupname() const {
  const ::msg::CSRspUpdateCardGroupName* p = _impl_.updatecardgroupname_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUpdateCardGroupName&>(
      ::msg::_CSRspUpdateCardGroupName_default_instance_);
}
inline const ::msg::CSRspUpdateCardGroupName& CSRspBody::updatecardgroupname() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UpdateCardGroupName)
  return _internal_updatecardgroupname();
}
inline void CSRspBody::unsafe_arena_set_allocated_updatecardgroupname(
    ::msg::CSRspUpdateCardGroupName* updatecardgroupname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatecardgroupname_);
  }
  _impl_.updatecardgroupname_ = updatecardgroupname;
  if (updatecardgroupname) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UpdateCardGroupName)
}
inline ::msg::CSRspUpdateCardGroupName* CSRspBody::release_updatecardgroupname() {
  
  ::msg::CSRspUpdateCardGroupName* temp = _impl_.updatecardgroupname_;
  _impl_.updatecardgroupname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUpdateCardGroupName* CSRspBody::unsafe_arena_release_updatecardgroupname() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UpdateCardGroupName)
  
  ::msg::CSRspUpdateCardGroupName* temp = _impl_.updatecardgroupname_;
  _impl_.updatecardgroupname_ = nullptr;
  return temp;
}
inline ::msg::CSRspUpdateCardGroupName* CSRspBody::_internal_mutable_updatecardgroupname() {
  
  if (_impl_.updatecardgroupname_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUpdateCardGroupName>(GetArenaForAllocation());
    _impl_.updatecardgroupname_ = p;
  }
  return _impl_.updatecardgroupname_;
}
inline ::msg::CSRspUpdateCardGroupName* CSRspBody::mutable_updatecardgroupname() {
  ::msg::CSRspUpdateCardGroupName* _msg = _internal_mutable_updatecardgroupname();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UpdateCardGroupName)
  return _msg;
}
inline void CSRspBody::set_allocated_updatecardgroupname(::msg::CSRspUpdateCardGroupName* updatecardgroupname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatecardgroupname_);
  }
  if (updatecardgroupname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatecardgroupname));
    if (message_arena != submessage_arena) {
      updatecardgroupname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatecardgroupname, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updatecardgroupname_ = updatecardgroupname;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UpdateCardGroupName)
}

// .msg.CSRspBuyPveBuff BuyPveBuff = 634;
inline bool CSRspBody::_internal_has_buypvebuff() const {
  return this != internal_default_instance() && _impl_.buypvebuff_ != nullptr;
}
inline bool CSRspBody::has_buypvebuff() const {
  return _internal_has_buypvebuff();
}
inline const ::msg::CSRspBuyPveBuff& CSRspBody::_internal_buypvebuff() const {
  const ::msg::CSRspBuyPveBuff* p = _impl_.buypvebuff_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspBuyPveBuff&>(
      ::msg::_CSRspBuyPveBuff_default_instance_);
}
inline const ::msg::CSRspBuyPveBuff& CSRspBody::buypvebuff() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.BuyPveBuff)
  return _internal_buypvebuff();
}
inline void CSRspBody::unsafe_arena_set_allocated_buypvebuff(
    ::msg::CSRspBuyPveBuff* buypvebuff) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buypvebuff_);
  }
  _impl_.buypvebuff_ = buypvebuff;
  if (buypvebuff) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.BuyPveBuff)
}
inline ::msg::CSRspBuyPveBuff* CSRspBody::release_buypvebuff() {
  
  ::msg::CSRspBuyPveBuff* temp = _impl_.buypvebuff_;
  _impl_.buypvebuff_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspBuyPveBuff* CSRspBody::unsafe_arena_release_buypvebuff() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.BuyPveBuff)
  
  ::msg::CSRspBuyPveBuff* temp = _impl_.buypvebuff_;
  _impl_.buypvebuff_ = nullptr;
  return temp;
}
inline ::msg::CSRspBuyPveBuff* CSRspBody::_internal_mutable_buypvebuff() {
  
  if (_impl_.buypvebuff_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspBuyPveBuff>(GetArenaForAllocation());
    _impl_.buypvebuff_ = p;
  }
  return _impl_.buypvebuff_;
}
inline ::msg::CSRspBuyPveBuff* CSRspBody::mutable_buypvebuff() {
  ::msg::CSRspBuyPveBuff* _msg = _internal_mutable_buypvebuff();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.BuyPveBuff)
  return _msg;
}
inline void CSRspBody::set_allocated_buypvebuff(::msg::CSRspBuyPveBuff* buypvebuff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buypvebuff_);
  }
  if (buypvebuff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buypvebuff));
    if (message_arena != submessage_arena) {
      buypvebuff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buypvebuff, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buypvebuff_ = buypvebuff;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.BuyPveBuff)
}

// .msg.CSRspSetCardGroup SetCardGroup = 635;
inline bool CSRspBody::_internal_has_setcardgroup() const {
  return this != internal_default_instance() && _impl_.setcardgroup_ != nullptr;
}
inline bool CSRspBody::has_setcardgroup() const {
  return _internal_has_setcardgroup();
}
inline const ::msg::CSRspSetCardGroup& CSRspBody::_internal_setcardgroup() const {
  const ::msg::CSRspSetCardGroup* p = _impl_.setcardgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSetCardGroup&>(
      ::msg::_CSRspSetCardGroup_default_instance_);
}
inline const ::msg::CSRspSetCardGroup& CSRspBody::setcardgroup() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SetCardGroup)
  return _internal_setcardgroup();
}
inline void CSRspBody::unsafe_arena_set_allocated_setcardgroup(
    ::msg::CSRspSetCardGroup* setcardgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setcardgroup_);
  }
  _impl_.setcardgroup_ = setcardgroup;
  if (setcardgroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SetCardGroup)
}
inline ::msg::CSRspSetCardGroup* CSRspBody::release_setcardgroup() {
  
  ::msg::CSRspSetCardGroup* temp = _impl_.setcardgroup_;
  _impl_.setcardgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSetCardGroup* CSRspBody::unsafe_arena_release_setcardgroup() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SetCardGroup)
  
  ::msg::CSRspSetCardGroup* temp = _impl_.setcardgroup_;
  _impl_.setcardgroup_ = nullptr;
  return temp;
}
inline ::msg::CSRspSetCardGroup* CSRspBody::_internal_mutable_setcardgroup() {
  
  if (_impl_.setcardgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSetCardGroup>(GetArenaForAllocation());
    _impl_.setcardgroup_ = p;
  }
  return _impl_.setcardgroup_;
}
inline ::msg::CSRspSetCardGroup* CSRspBody::mutable_setcardgroup() {
  ::msg::CSRspSetCardGroup* _msg = _internal_mutable_setcardgroup();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SetCardGroup)
  return _msg;
}
inline void CSRspBody::set_allocated_setcardgroup(::msg::CSRspSetCardGroup* setcardgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setcardgroup_);
  }
  if (setcardgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setcardgroup));
    if (message_arena != submessage_arena) {
      setcardgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setcardgroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setcardgroup_ = setcardgroup;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SetCardGroup)
}

// .msg.CSRspBuyPveChessTemplate BuyPveChessTemplate = 636;
inline bool CSRspBody::_internal_has_buypvechesstemplate() const {
  return this != internal_default_instance() && _impl_.buypvechesstemplate_ != nullptr;
}
inline bool CSRspBody::has_buypvechesstemplate() const {
  return _internal_has_buypvechesstemplate();
}
inline const ::msg::CSRspBuyPveChessTemplate& CSRspBody::_internal_buypvechesstemplate() const {
  const ::msg::CSRspBuyPveChessTemplate* p = _impl_.buypvechesstemplate_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspBuyPveChessTemplate&>(
      ::msg::_CSRspBuyPveChessTemplate_default_instance_);
}
inline const ::msg::CSRspBuyPveChessTemplate& CSRspBody::buypvechesstemplate() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.BuyPveChessTemplate)
  return _internal_buypvechesstemplate();
}
inline void CSRspBody::unsafe_arena_set_allocated_buypvechesstemplate(
    ::msg::CSRspBuyPveChessTemplate* buypvechesstemplate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buypvechesstemplate_);
  }
  _impl_.buypvechesstemplate_ = buypvechesstemplate;
  if (buypvechesstemplate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.BuyPveChessTemplate)
}
inline ::msg::CSRspBuyPveChessTemplate* CSRspBody::release_buypvechesstemplate() {
  
  ::msg::CSRspBuyPveChessTemplate* temp = _impl_.buypvechesstemplate_;
  _impl_.buypvechesstemplate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspBuyPveChessTemplate* CSRspBody::unsafe_arena_release_buypvechesstemplate() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.BuyPveChessTemplate)
  
  ::msg::CSRspBuyPveChessTemplate* temp = _impl_.buypvechesstemplate_;
  _impl_.buypvechesstemplate_ = nullptr;
  return temp;
}
inline ::msg::CSRspBuyPveChessTemplate* CSRspBody::_internal_mutable_buypvechesstemplate() {
  
  if (_impl_.buypvechesstemplate_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspBuyPveChessTemplate>(GetArenaForAllocation());
    _impl_.buypvechesstemplate_ = p;
  }
  return _impl_.buypvechesstemplate_;
}
inline ::msg::CSRspBuyPveChessTemplate* CSRspBody::mutable_buypvechesstemplate() {
  ::msg::CSRspBuyPveChessTemplate* _msg = _internal_mutable_buypvechesstemplate();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.BuyPveChessTemplate)
  return _msg;
}
inline void CSRspBody::set_allocated_buypvechesstemplate(::msg::CSRspBuyPveChessTemplate* buypvechesstemplate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buypvechesstemplate_);
  }
  if (buypvechesstemplate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buypvechesstemplate));
    if (message_arena != submessage_arena) {
      buypvechesstemplate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buypvechesstemplate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buypvechesstemplate_ = buypvechesstemplate;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.BuyPveChessTemplate)
}

// .msg.CSRspPveUnlockChessTemplate PveUnlockChessTemplate = 637;
inline bool CSRspBody::_internal_has_pveunlockchesstemplate() const {
  return this != internal_default_instance() && _impl_.pveunlockchesstemplate_ != nullptr;
}
inline bool CSRspBody::has_pveunlockchesstemplate() const {
  return _internal_has_pveunlockchesstemplate();
}
inline const ::msg::CSRspPveUnlockChessTemplate& CSRspBody::_internal_pveunlockchesstemplate() const {
  const ::msg::CSRspPveUnlockChessTemplate* p = _impl_.pveunlockchesstemplate_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPveUnlockChessTemplate&>(
      ::msg::_CSRspPveUnlockChessTemplate_default_instance_);
}
inline const ::msg::CSRspPveUnlockChessTemplate& CSRspBody::pveunlockchesstemplate() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PveUnlockChessTemplate)
  return _internal_pveunlockchesstemplate();
}
inline void CSRspBody::unsafe_arena_set_allocated_pveunlockchesstemplate(
    ::msg::CSRspPveUnlockChessTemplate* pveunlockchesstemplate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pveunlockchesstemplate_);
  }
  _impl_.pveunlockchesstemplate_ = pveunlockchesstemplate;
  if (pveunlockchesstemplate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PveUnlockChessTemplate)
}
inline ::msg::CSRspPveUnlockChessTemplate* CSRspBody::release_pveunlockchesstemplate() {
  
  ::msg::CSRspPveUnlockChessTemplate* temp = _impl_.pveunlockchesstemplate_;
  _impl_.pveunlockchesstemplate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPveUnlockChessTemplate* CSRspBody::unsafe_arena_release_pveunlockchesstemplate() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PveUnlockChessTemplate)
  
  ::msg::CSRspPveUnlockChessTemplate* temp = _impl_.pveunlockchesstemplate_;
  _impl_.pveunlockchesstemplate_ = nullptr;
  return temp;
}
inline ::msg::CSRspPveUnlockChessTemplate* CSRspBody::_internal_mutable_pveunlockchesstemplate() {
  
  if (_impl_.pveunlockchesstemplate_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPveUnlockChessTemplate>(GetArenaForAllocation());
    _impl_.pveunlockchesstemplate_ = p;
  }
  return _impl_.pveunlockchesstemplate_;
}
inline ::msg::CSRspPveUnlockChessTemplate* CSRspBody::mutable_pveunlockchesstemplate() {
  ::msg::CSRspPveUnlockChessTemplate* _msg = _internal_mutable_pveunlockchesstemplate();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PveUnlockChessTemplate)
  return _msg;
}
inline void CSRspBody::set_allocated_pveunlockchesstemplate(::msg::CSRspPveUnlockChessTemplate* pveunlockchesstemplate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pveunlockchesstemplate_);
  }
  if (pveunlockchesstemplate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pveunlockchesstemplate));
    if (message_arena != submessage_arena) {
      pveunlockchesstemplate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pveunlockchesstemplate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pveunlockchesstemplate_ = pveunlockchesstemplate;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PveUnlockChessTemplate)
}

// .msg.CSRspPveSetTeamDeBuff PveSetTeamDeBuff = 638;
inline bool CSRspBody::_internal_has_pvesetteamdebuff() const {
  return this != internal_default_instance() && _impl_.pvesetteamdebuff_ != nullptr;
}
inline bool CSRspBody::has_pvesetteamdebuff() const {
  return _internal_has_pvesetteamdebuff();
}
inline const ::msg::CSRspPveSetTeamDeBuff& CSRspBody::_internal_pvesetteamdebuff() const {
  const ::msg::CSRspPveSetTeamDeBuff* p = _impl_.pvesetteamdebuff_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPveSetTeamDeBuff&>(
      ::msg::_CSRspPveSetTeamDeBuff_default_instance_);
}
inline const ::msg::CSRspPveSetTeamDeBuff& CSRspBody::pvesetteamdebuff() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PveSetTeamDeBuff)
  return _internal_pvesetteamdebuff();
}
inline void CSRspBody::unsafe_arena_set_allocated_pvesetteamdebuff(
    ::msg::CSRspPveSetTeamDeBuff* pvesetteamdebuff) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvesetteamdebuff_);
  }
  _impl_.pvesetteamdebuff_ = pvesetteamdebuff;
  if (pvesetteamdebuff) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PveSetTeamDeBuff)
}
inline ::msg::CSRspPveSetTeamDeBuff* CSRspBody::release_pvesetteamdebuff() {
  
  ::msg::CSRspPveSetTeamDeBuff* temp = _impl_.pvesetteamdebuff_;
  _impl_.pvesetteamdebuff_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPveSetTeamDeBuff* CSRspBody::unsafe_arena_release_pvesetteamdebuff() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PveSetTeamDeBuff)
  
  ::msg::CSRspPveSetTeamDeBuff* temp = _impl_.pvesetteamdebuff_;
  _impl_.pvesetteamdebuff_ = nullptr;
  return temp;
}
inline ::msg::CSRspPveSetTeamDeBuff* CSRspBody::_internal_mutable_pvesetteamdebuff() {
  
  if (_impl_.pvesetteamdebuff_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPveSetTeamDeBuff>(GetArenaForAllocation());
    _impl_.pvesetteamdebuff_ = p;
  }
  return _impl_.pvesetteamdebuff_;
}
inline ::msg::CSRspPveSetTeamDeBuff* CSRspBody::mutable_pvesetteamdebuff() {
  ::msg::CSRspPveSetTeamDeBuff* _msg = _internal_mutable_pvesetteamdebuff();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PveSetTeamDeBuff)
  return _msg;
}
inline void CSRspBody::set_allocated_pvesetteamdebuff(::msg::CSRspPveSetTeamDeBuff* pvesetteamdebuff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvesetteamdebuff_);
  }
  if (pvesetteamdebuff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvesetteamdebuff));
    if (message_arena != submessage_arena) {
      pvesetteamdebuff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvesetteamdebuff, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvesetteamdebuff_ = pvesetteamdebuff;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PveSetTeamDeBuff)
}

// .msg.CSRspChoseCardGroup ChoseCardGroup = 639;
inline bool CSRspBody::_internal_has_chosecardgroup() const {
  return this != internal_default_instance() && _impl_.chosecardgroup_ != nullptr;
}
inline bool CSRspBody::has_chosecardgroup() const {
  return _internal_has_chosecardgroup();
}
inline const ::msg::CSRspChoseCardGroup& CSRspBody::_internal_chosecardgroup() const {
  const ::msg::CSRspChoseCardGroup* p = _impl_.chosecardgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspChoseCardGroup&>(
      ::msg::_CSRspChoseCardGroup_default_instance_);
}
inline const ::msg::CSRspChoseCardGroup& CSRspBody::chosecardgroup() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ChoseCardGroup)
  return _internal_chosecardgroup();
}
inline void CSRspBody::unsafe_arena_set_allocated_chosecardgroup(
    ::msg::CSRspChoseCardGroup* chosecardgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chosecardgroup_);
  }
  _impl_.chosecardgroup_ = chosecardgroup;
  if (chosecardgroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ChoseCardGroup)
}
inline ::msg::CSRspChoseCardGroup* CSRspBody::release_chosecardgroup() {
  
  ::msg::CSRspChoseCardGroup* temp = _impl_.chosecardgroup_;
  _impl_.chosecardgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspChoseCardGroup* CSRspBody::unsafe_arena_release_chosecardgroup() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ChoseCardGroup)
  
  ::msg::CSRspChoseCardGroup* temp = _impl_.chosecardgroup_;
  _impl_.chosecardgroup_ = nullptr;
  return temp;
}
inline ::msg::CSRspChoseCardGroup* CSRspBody::_internal_mutable_chosecardgroup() {
  
  if (_impl_.chosecardgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspChoseCardGroup>(GetArenaForAllocation());
    _impl_.chosecardgroup_ = p;
  }
  return _impl_.chosecardgroup_;
}
inline ::msg::CSRspChoseCardGroup* CSRspBody::mutable_chosecardgroup() {
  ::msg::CSRspChoseCardGroup* _msg = _internal_mutable_chosecardgroup();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ChoseCardGroup)
  return _msg;
}
inline void CSRspBody::set_allocated_chosecardgroup(::msg::CSRspChoseCardGroup* chosecardgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chosecardgroup_);
  }
  if (chosecardgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chosecardgroup));
    if (message_arena != submessage_arena) {
      chosecardgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chosecardgroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chosecardgroup_ = chosecardgroup;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ChoseCardGroup)
}

// .msg.CSRspRemoveOvertimeBuff RemoveOvertimeBuff = 640;
inline bool CSRspBody::_internal_has_removeovertimebuff() const {
  return this != internal_default_instance() && _impl_.removeovertimebuff_ != nullptr;
}
inline bool CSRspBody::has_removeovertimebuff() const {
  return _internal_has_removeovertimebuff();
}
inline const ::msg::CSRspRemoveOvertimeBuff& CSRspBody::_internal_removeovertimebuff() const {
  const ::msg::CSRspRemoveOvertimeBuff* p = _impl_.removeovertimebuff_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRemoveOvertimeBuff&>(
      ::msg::_CSRspRemoveOvertimeBuff_default_instance_);
}
inline const ::msg::CSRspRemoveOvertimeBuff& CSRspBody::removeovertimebuff() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RemoveOvertimeBuff)
  return _internal_removeovertimebuff();
}
inline void CSRspBody::unsafe_arena_set_allocated_removeovertimebuff(
    ::msg::CSRspRemoveOvertimeBuff* removeovertimebuff) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removeovertimebuff_);
  }
  _impl_.removeovertimebuff_ = removeovertimebuff;
  if (removeovertimebuff) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RemoveOvertimeBuff)
}
inline ::msg::CSRspRemoveOvertimeBuff* CSRspBody::release_removeovertimebuff() {
  
  ::msg::CSRspRemoveOvertimeBuff* temp = _impl_.removeovertimebuff_;
  _impl_.removeovertimebuff_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRemoveOvertimeBuff* CSRspBody::unsafe_arena_release_removeovertimebuff() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RemoveOvertimeBuff)
  
  ::msg::CSRspRemoveOvertimeBuff* temp = _impl_.removeovertimebuff_;
  _impl_.removeovertimebuff_ = nullptr;
  return temp;
}
inline ::msg::CSRspRemoveOvertimeBuff* CSRspBody::_internal_mutable_removeovertimebuff() {
  
  if (_impl_.removeovertimebuff_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRemoveOvertimeBuff>(GetArenaForAllocation());
    _impl_.removeovertimebuff_ = p;
  }
  return _impl_.removeovertimebuff_;
}
inline ::msg::CSRspRemoveOvertimeBuff* CSRspBody::mutable_removeovertimebuff() {
  ::msg::CSRspRemoveOvertimeBuff* _msg = _internal_mutable_removeovertimebuff();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RemoveOvertimeBuff)
  return _msg;
}
inline void CSRspBody::set_allocated_removeovertimebuff(::msg::CSRspRemoveOvertimeBuff* removeovertimebuff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removeovertimebuff_);
  }
  if (removeovertimebuff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removeovertimebuff));
    if (message_arena != submessage_arena) {
      removeovertimebuff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removeovertimebuff, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.removeovertimebuff_ = removeovertimebuff;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RemoveOvertimeBuff)
}

// .msg.CSRspUpdateNewCardGroupSign UpdateNewCardGroupSign = 641;
inline bool CSRspBody::_internal_has_updatenewcardgroupsign() const {
  return this != internal_default_instance() && _impl_.updatenewcardgroupsign_ != nullptr;
}
inline bool CSRspBody::has_updatenewcardgroupsign() const {
  return _internal_has_updatenewcardgroupsign();
}
inline const ::msg::CSRspUpdateNewCardGroupSign& CSRspBody::_internal_updatenewcardgroupsign() const {
  const ::msg::CSRspUpdateNewCardGroupSign* p = _impl_.updatenewcardgroupsign_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUpdateNewCardGroupSign&>(
      ::msg::_CSRspUpdateNewCardGroupSign_default_instance_);
}
inline const ::msg::CSRspUpdateNewCardGroupSign& CSRspBody::updatenewcardgroupsign() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UpdateNewCardGroupSign)
  return _internal_updatenewcardgroupsign();
}
inline void CSRspBody::unsafe_arena_set_allocated_updatenewcardgroupsign(
    ::msg::CSRspUpdateNewCardGroupSign* updatenewcardgroupsign) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatenewcardgroupsign_);
  }
  _impl_.updatenewcardgroupsign_ = updatenewcardgroupsign;
  if (updatenewcardgroupsign) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UpdateNewCardGroupSign)
}
inline ::msg::CSRspUpdateNewCardGroupSign* CSRspBody::release_updatenewcardgroupsign() {
  
  ::msg::CSRspUpdateNewCardGroupSign* temp = _impl_.updatenewcardgroupsign_;
  _impl_.updatenewcardgroupsign_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUpdateNewCardGroupSign* CSRspBody::unsafe_arena_release_updatenewcardgroupsign() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UpdateNewCardGroupSign)
  
  ::msg::CSRspUpdateNewCardGroupSign* temp = _impl_.updatenewcardgroupsign_;
  _impl_.updatenewcardgroupsign_ = nullptr;
  return temp;
}
inline ::msg::CSRspUpdateNewCardGroupSign* CSRspBody::_internal_mutable_updatenewcardgroupsign() {
  
  if (_impl_.updatenewcardgroupsign_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUpdateNewCardGroupSign>(GetArenaForAllocation());
    _impl_.updatenewcardgroupsign_ = p;
  }
  return _impl_.updatenewcardgroupsign_;
}
inline ::msg::CSRspUpdateNewCardGroupSign* CSRspBody::mutable_updatenewcardgroupsign() {
  ::msg::CSRspUpdateNewCardGroupSign* _msg = _internal_mutable_updatenewcardgroupsign();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UpdateNewCardGroupSign)
  return _msg;
}
inline void CSRspBody::set_allocated_updatenewcardgroupsign(::msg::CSRspUpdateNewCardGroupSign* updatenewcardgroupsign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatenewcardgroupsign_);
  }
  if (updatenewcardgroupsign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatenewcardgroupsign));
    if (message_arena != submessage_arena) {
      updatenewcardgroupsign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatenewcardgroupsign, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updatenewcardgroupsign_ = updatenewcardgroupsign;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UpdateNewCardGroupSign)
}

// .msg.CSRspTDGetOnHookAward TDGetOnHookAward = 644;
inline bool CSRspBody::_internal_has_tdgetonhookaward() const {
  return this != internal_default_instance() && _impl_.tdgetonhookaward_ != nullptr;
}
inline bool CSRspBody::has_tdgetonhookaward() const {
  return _internal_has_tdgetonhookaward();
}
inline const ::msg::CSRspTDGetOnHookAward& CSRspBody::_internal_tdgetonhookaward() const {
  const ::msg::CSRspTDGetOnHookAward* p = _impl_.tdgetonhookaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspTDGetOnHookAward&>(
      ::msg::_CSRspTDGetOnHookAward_default_instance_);
}
inline const ::msg::CSRspTDGetOnHookAward& CSRspBody::tdgetonhookaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.TDGetOnHookAward)
  return _internal_tdgetonhookaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_tdgetonhookaward(
    ::msg::CSRspTDGetOnHookAward* tdgetonhookaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdgetonhookaward_);
  }
  _impl_.tdgetonhookaward_ = tdgetonhookaward;
  if (tdgetonhookaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.TDGetOnHookAward)
}
inline ::msg::CSRspTDGetOnHookAward* CSRspBody::release_tdgetonhookaward() {
  
  ::msg::CSRspTDGetOnHookAward* temp = _impl_.tdgetonhookaward_;
  _impl_.tdgetonhookaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspTDGetOnHookAward* CSRspBody::unsafe_arena_release_tdgetonhookaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.TDGetOnHookAward)
  
  ::msg::CSRspTDGetOnHookAward* temp = _impl_.tdgetonhookaward_;
  _impl_.tdgetonhookaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspTDGetOnHookAward* CSRspBody::_internal_mutable_tdgetonhookaward() {
  
  if (_impl_.tdgetonhookaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspTDGetOnHookAward>(GetArenaForAllocation());
    _impl_.tdgetonhookaward_ = p;
  }
  return _impl_.tdgetonhookaward_;
}
inline ::msg::CSRspTDGetOnHookAward* CSRspBody::mutable_tdgetonhookaward() {
  ::msg::CSRspTDGetOnHookAward* _msg = _internal_mutable_tdgetonhookaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.TDGetOnHookAward)
  return _msg;
}
inline void CSRspBody::set_allocated_tdgetonhookaward(::msg::CSRspTDGetOnHookAward* tdgetonhookaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdgetonhookaward_);
  }
  if (tdgetonhookaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tdgetonhookaward));
    if (message_arena != submessage_arena) {
      tdgetonhookaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tdgetonhookaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tdgetonhookaward_ = tdgetonhookaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.TDGetOnHookAward)
}

// .msg.CsRspTDDraw TDDraw = 645;
inline bool CSRspBody::_internal_has_tddraw() const {
  return this != internal_default_instance() && _impl_.tddraw_ != nullptr;
}
inline bool CSRspBody::has_tddraw() const {
  return _internal_has_tddraw();
}
inline const ::msg::CsRspTDDraw& CSRspBody::_internal_tddraw() const {
  const ::msg::CsRspTDDraw* p = _impl_.tddraw_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CsRspTDDraw&>(
      ::msg::_CsRspTDDraw_default_instance_);
}
inline const ::msg::CsRspTDDraw& CSRspBody::tddraw() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.TDDraw)
  return _internal_tddraw();
}
inline void CSRspBody::unsafe_arena_set_allocated_tddraw(
    ::msg::CsRspTDDraw* tddraw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tddraw_);
  }
  _impl_.tddraw_ = tddraw;
  if (tddraw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.TDDraw)
}
inline ::msg::CsRspTDDraw* CSRspBody::release_tddraw() {
  
  ::msg::CsRspTDDraw* temp = _impl_.tddraw_;
  _impl_.tddraw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CsRspTDDraw* CSRspBody::unsafe_arena_release_tddraw() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.TDDraw)
  
  ::msg::CsRspTDDraw* temp = _impl_.tddraw_;
  _impl_.tddraw_ = nullptr;
  return temp;
}
inline ::msg::CsRspTDDraw* CSRspBody::_internal_mutable_tddraw() {
  
  if (_impl_.tddraw_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CsRspTDDraw>(GetArenaForAllocation());
    _impl_.tddraw_ = p;
  }
  return _impl_.tddraw_;
}
inline ::msg::CsRspTDDraw* CSRspBody::mutable_tddraw() {
  ::msg::CsRspTDDraw* _msg = _internal_mutable_tddraw();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.TDDraw)
  return _msg;
}
inline void CSRspBody::set_allocated_tddraw(::msg::CsRspTDDraw* tddraw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tddraw_);
  }
  if (tddraw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tddraw));
    if (message_arena != submessage_arena) {
      tddraw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tddraw, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tddraw_ = tddraw;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.TDDraw)
}

// .msg.CsRspTDBuyCard TDBuyCard = 646;
inline bool CSRspBody::_internal_has_tdbuycard() const {
  return this != internal_default_instance() && _impl_.tdbuycard_ != nullptr;
}
inline bool CSRspBody::has_tdbuycard() const {
  return _internal_has_tdbuycard();
}
inline const ::msg::CsRspTDBuyCard& CSRspBody::_internal_tdbuycard() const {
  const ::msg::CsRspTDBuyCard* p = _impl_.tdbuycard_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CsRspTDBuyCard&>(
      ::msg::_CsRspTDBuyCard_default_instance_);
}
inline const ::msg::CsRspTDBuyCard& CSRspBody::tdbuycard() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.TDBuyCard)
  return _internal_tdbuycard();
}
inline void CSRspBody::unsafe_arena_set_allocated_tdbuycard(
    ::msg::CsRspTDBuyCard* tdbuycard) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdbuycard_);
  }
  _impl_.tdbuycard_ = tdbuycard;
  if (tdbuycard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.TDBuyCard)
}
inline ::msg::CsRspTDBuyCard* CSRspBody::release_tdbuycard() {
  
  ::msg::CsRspTDBuyCard* temp = _impl_.tdbuycard_;
  _impl_.tdbuycard_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CsRspTDBuyCard* CSRspBody::unsafe_arena_release_tdbuycard() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.TDBuyCard)
  
  ::msg::CsRspTDBuyCard* temp = _impl_.tdbuycard_;
  _impl_.tdbuycard_ = nullptr;
  return temp;
}
inline ::msg::CsRspTDBuyCard* CSRspBody::_internal_mutable_tdbuycard() {
  
  if (_impl_.tdbuycard_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CsRspTDBuyCard>(GetArenaForAllocation());
    _impl_.tdbuycard_ = p;
  }
  return _impl_.tdbuycard_;
}
inline ::msg::CsRspTDBuyCard* CSRspBody::mutable_tdbuycard() {
  ::msg::CsRspTDBuyCard* _msg = _internal_mutable_tdbuycard();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.TDBuyCard)
  return _msg;
}
inline void CSRspBody::set_allocated_tdbuycard(::msg::CsRspTDBuyCard* tdbuycard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdbuycard_);
  }
  if (tdbuycard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tdbuycard));
    if (message_arena != submessage_arena) {
      tdbuycard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tdbuycard, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tdbuycard_ = tdbuycard;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.TDBuyCard)
}

// .msg.CSRspTDSetCardGroup TDSetCardGroup = 647;
inline bool CSRspBody::_internal_has_tdsetcardgroup() const {
  return this != internal_default_instance() && _impl_.tdsetcardgroup_ != nullptr;
}
inline bool CSRspBody::has_tdsetcardgroup() const {
  return _internal_has_tdsetcardgroup();
}
inline const ::msg::CSRspTDSetCardGroup& CSRspBody::_internal_tdsetcardgroup() const {
  const ::msg::CSRspTDSetCardGroup* p = _impl_.tdsetcardgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspTDSetCardGroup&>(
      ::msg::_CSRspTDSetCardGroup_default_instance_);
}
inline const ::msg::CSRspTDSetCardGroup& CSRspBody::tdsetcardgroup() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.TDSetCardGroup)
  return _internal_tdsetcardgroup();
}
inline void CSRspBody::unsafe_arena_set_allocated_tdsetcardgroup(
    ::msg::CSRspTDSetCardGroup* tdsetcardgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdsetcardgroup_);
  }
  _impl_.tdsetcardgroup_ = tdsetcardgroup;
  if (tdsetcardgroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.TDSetCardGroup)
}
inline ::msg::CSRspTDSetCardGroup* CSRspBody::release_tdsetcardgroup() {
  
  ::msg::CSRspTDSetCardGroup* temp = _impl_.tdsetcardgroup_;
  _impl_.tdsetcardgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspTDSetCardGroup* CSRspBody::unsafe_arena_release_tdsetcardgroup() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.TDSetCardGroup)
  
  ::msg::CSRspTDSetCardGroup* temp = _impl_.tdsetcardgroup_;
  _impl_.tdsetcardgroup_ = nullptr;
  return temp;
}
inline ::msg::CSRspTDSetCardGroup* CSRspBody::_internal_mutable_tdsetcardgroup() {
  
  if (_impl_.tdsetcardgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspTDSetCardGroup>(GetArenaForAllocation());
    _impl_.tdsetcardgroup_ = p;
  }
  return _impl_.tdsetcardgroup_;
}
inline ::msg::CSRspTDSetCardGroup* CSRspBody::mutable_tdsetcardgroup() {
  ::msg::CSRspTDSetCardGroup* _msg = _internal_mutable_tdsetcardgroup();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.TDSetCardGroup)
  return _msg;
}
inline void CSRspBody::set_allocated_tdsetcardgroup(::msg::CSRspTDSetCardGroup* tdsetcardgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdsetcardgroup_);
  }
  if (tdsetcardgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tdsetcardgroup));
    if (message_arena != submessage_arena) {
      tdsetcardgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tdsetcardgroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tdsetcardgroup_ = tdsetcardgroup;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.TDSetCardGroup)
}

// .msg.CSRspTDLevelUp TDLevelUp = 648;
inline bool CSRspBody::_internal_has_tdlevelup() const {
  return this != internal_default_instance() && _impl_.tdlevelup_ != nullptr;
}
inline bool CSRspBody::has_tdlevelup() const {
  return _internal_has_tdlevelup();
}
inline const ::msg::CSRspTDLevelUp& CSRspBody::_internal_tdlevelup() const {
  const ::msg::CSRspTDLevelUp* p = _impl_.tdlevelup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspTDLevelUp&>(
      ::msg::_CSRspTDLevelUp_default_instance_);
}
inline const ::msg::CSRspTDLevelUp& CSRspBody::tdlevelup() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.TDLevelUp)
  return _internal_tdlevelup();
}
inline void CSRspBody::unsafe_arena_set_allocated_tdlevelup(
    ::msg::CSRspTDLevelUp* tdlevelup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdlevelup_);
  }
  _impl_.tdlevelup_ = tdlevelup;
  if (tdlevelup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.TDLevelUp)
}
inline ::msg::CSRspTDLevelUp* CSRspBody::release_tdlevelup() {
  
  ::msg::CSRspTDLevelUp* temp = _impl_.tdlevelup_;
  _impl_.tdlevelup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspTDLevelUp* CSRspBody::unsafe_arena_release_tdlevelup() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.TDLevelUp)
  
  ::msg::CSRspTDLevelUp* temp = _impl_.tdlevelup_;
  _impl_.tdlevelup_ = nullptr;
  return temp;
}
inline ::msg::CSRspTDLevelUp* CSRspBody::_internal_mutable_tdlevelup() {
  
  if (_impl_.tdlevelup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspTDLevelUp>(GetArenaForAllocation());
    _impl_.tdlevelup_ = p;
  }
  return _impl_.tdlevelup_;
}
inline ::msg::CSRspTDLevelUp* CSRspBody::mutable_tdlevelup() {
  ::msg::CSRspTDLevelUp* _msg = _internal_mutable_tdlevelup();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.TDLevelUp)
  return _msg;
}
inline void CSRspBody::set_allocated_tdlevelup(::msg::CSRspTDLevelUp* tdlevelup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdlevelup_);
  }
  if (tdlevelup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tdlevelup));
    if (message_arena != submessage_arena) {
      tdlevelup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tdlevelup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tdlevelup_ = tdlevelup;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.TDLevelUp)
}

// .msg.CSRspTDEquip TDEquip = 649;
inline bool CSRspBody::_internal_has_tdequip() const {
  return this != internal_default_instance() && _impl_.tdequip_ != nullptr;
}
inline bool CSRspBody::has_tdequip() const {
  return _internal_has_tdequip();
}
inline const ::msg::CSRspTDEquip& CSRspBody::_internal_tdequip() const {
  const ::msg::CSRspTDEquip* p = _impl_.tdequip_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspTDEquip&>(
      ::msg::_CSRspTDEquip_default_instance_);
}
inline const ::msg::CSRspTDEquip& CSRspBody::tdequip() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.TDEquip)
  return _internal_tdequip();
}
inline void CSRspBody::unsafe_arena_set_allocated_tdequip(
    ::msg::CSRspTDEquip* tdequip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdequip_);
  }
  _impl_.tdequip_ = tdequip;
  if (tdequip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.TDEquip)
}
inline ::msg::CSRspTDEquip* CSRspBody::release_tdequip() {
  
  ::msg::CSRspTDEquip* temp = _impl_.tdequip_;
  _impl_.tdequip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspTDEquip* CSRspBody::unsafe_arena_release_tdequip() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.TDEquip)
  
  ::msg::CSRspTDEquip* temp = _impl_.tdequip_;
  _impl_.tdequip_ = nullptr;
  return temp;
}
inline ::msg::CSRspTDEquip* CSRspBody::_internal_mutable_tdequip() {
  
  if (_impl_.tdequip_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspTDEquip>(GetArenaForAllocation());
    _impl_.tdequip_ = p;
  }
  return _impl_.tdequip_;
}
inline ::msg::CSRspTDEquip* CSRspBody::mutable_tdequip() {
  ::msg::CSRspTDEquip* _msg = _internal_mutable_tdequip();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.TDEquip)
  return _msg;
}
inline void CSRspBody::set_allocated_tdequip(::msg::CSRspTDEquip* tdequip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdequip_);
  }
  if (tdequip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tdequip));
    if (message_arena != submessage_arena) {
      tdequip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tdequip, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tdequip_ = tdequip;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.TDEquip)
}

// .msg.CSRspMentorUpdateSetting MentorUpdateSetting = 650;
inline bool CSRspBody::_internal_has_mentorupdatesetting() const {
  return this != internal_default_instance() && _impl_.mentorupdatesetting_ != nullptr;
}
inline bool CSRspBody::has_mentorupdatesetting() const {
  return _internal_has_mentorupdatesetting();
}
inline const ::msg::CSRspMentorUpdateSetting& CSRspBody::_internal_mentorupdatesetting() const {
  const ::msg::CSRspMentorUpdateSetting* p = _impl_.mentorupdatesetting_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspMentorUpdateSetting&>(
      ::msg::_CSRspMentorUpdateSetting_default_instance_);
}
inline const ::msg::CSRspMentorUpdateSetting& CSRspBody::mentorupdatesetting() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.MentorUpdateSetting)
  return _internal_mentorupdatesetting();
}
inline void CSRspBody::unsafe_arena_set_allocated_mentorupdatesetting(
    ::msg::CSRspMentorUpdateSetting* mentorupdatesetting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorupdatesetting_);
  }
  _impl_.mentorupdatesetting_ = mentorupdatesetting;
  if (mentorupdatesetting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.MentorUpdateSetting)
}
inline ::msg::CSRspMentorUpdateSetting* CSRspBody::release_mentorupdatesetting() {
  
  ::msg::CSRspMentorUpdateSetting* temp = _impl_.mentorupdatesetting_;
  _impl_.mentorupdatesetting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspMentorUpdateSetting* CSRspBody::unsafe_arena_release_mentorupdatesetting() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.MentorUpdateSetting)
  
  ::msg::CSRspMentorUpdateSetting* temp = _impl_.mentorupdatesetting_;
  _impl_.mentorupdatesetting_ = nullptr;
  return temp;
}
inline ::msg::CSRspMentorUpdateSetting* CSRspBody::_internal_mutable_mentorupdatesetting() {
  
  if (_impl_.mentorupdatesetting_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspMentorUpdateSetting>(GetArenaForAllocation());
    _impl_.mentorupdatesetting_ = p;
  }
  return _impl_.mentorupdatesetting_;
}
inline ::msg::CSRspMentorUpdateSetting* CSRspBody::mutable_mentorupdatesetting() {
  ::msg::CSRspMentorUpdateSetting* _msg = _internal_mutable_mentorupdatesetting();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.MentorUpdateSetting)
  return _msg;
}
inline void CSRspBody::set_allocated_mentorupdatesetting(::msg::CSRspMentorUpdateSetting* mentorupdatesetting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorupdatesetting_);
  }
  if (mentorupdatesetting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorupdatesetting));
    if (message_arena != submessage_arena) {
      mentorupdatesetting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorupdatesetting, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorupdatesetting_ = mentorupdatesetting;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.MentorUpdateSetting)
}

// .msg.CSRspMentorInvite MentorInvite = 651;
inline bool CSRspBody::_internal_has_mentorinvite() const {
  return this != internal_default_instance() && _impl_.mentorinvite_ != nullptr;
}
inline bool CSRspBody::has_mentorinvite() const {
  return _internal_has_mentorinvite();
}
inline const ::msg::CSRspMentorInvite& CSRspBody::_internal_mentorinvite() const {
  const ::msg::CSRspMentorInvite* p = _impl_.mentorinvite_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspMentorInvite&>(
      ::msg::_CSRspMentorInvite_default_instance_);
}
inline const ::msg::CSRspMentorInvite& CSRspBody::mentorinvite() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.MentorInvite)
  return _internal_mentorinvite();
}
inline void CSRspBody::unsafe_arena_set_allocated_mentorinvite(
    ::msg::CSRspMentorInvite* mentorinvite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorinvite_);
  }
  _impl_.mentorinvite_ = mentorinvite;
  if (mentorinvite) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.MentorInvite)
}
inline ::msg::CSRspMentorInvite* CSRspBody::release_mentorinvite() {
  
  ::msg::CSRspMentorInvite* temp = _impl_.mentorinvite_;
  _impl_.mentorinvite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspMentorInvite* CSRspBody::unsafe_arena_release_mentorinvite() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.MentorInvite)
  
  ::msg::CSRspMentorInvite* temp = _impl_.mentorinvite_;
  _impl_.mentorinvite_ = nullptr;
  return temp;
}
inline ::msg::CSRspMentorInvite* CSRspBody::_internal_mutable_mentorinvite() {
  
  if (_impl_.mentorinvite_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspMentorInvite>(GetArenaForAllocation());
    _impl_.mentorinvite_ = p;
  }
  return _impl_.mentorinvite_;
}
inline ::msg::CSRspMentorInvite* CSRspBody::mutable_mentorinvite() {
  ::msg::CSRspMentorInvite* _msg = _internal_mutable_mentorinvite();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.MentorInvite)
  return _msg;
}
inline void CSRspBody::set_allocated_mentorinvite(::msg::CSRspMentorInvite* mentorinvite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorinvite_);
  }
  if (mentorinvite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorinvite));
    if (message_arena != submessage_arena) {
      mentorinvite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorinvite, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorinvite_ = mentorinvite;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.MentorInvite)
}

// .msg.CSRspMentorConfirmInvite MentorConfirmInvite = 652;
inline bool CSRspBody::_internal_has_mentorconfirminvite() const {
  return this != internal_default_instance() && _impl_.mentorconfirminvite_ != nullptr;
}
inline bool CSRspBody::has_mentorconfirminvite() const {
  return _internal_has_mentorconfirminvite();
}
inline const ::msg::CSRspMentorConfirmInvite& CSRspBody::_internal_mentorconfirminvite() const {
  const ::msg::CSRspMentorConfirmInvite* p = _impl_.mentorconfirminvite_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspMentorConfirmInvite&>(
      ::msg::_CSRspMentorConfirmInvite_default_instance_);
}
inline const ::msg::CSRspMentorConfirmInvite& CSRspBody::mentorconfirminvite() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.MentorConfirmInvite)
  return _internal_mentorconfirminvite();
}
inline void CSRspBody::unsafe_arena_set_allocated_mentorconfirminvite(
    ::msg::CSRspMentorConfirmInvite* mentorconfirminvite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorconfirminvite_);
  }
  _impl_.mentorconfirminvite_ = mentorconfirminvite;
  if (mentorconfirminvite) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.MentorConfirmInvite)
}
inline ::msg::CSRspMentorConfirmInvite* CSRspBody::release_mentorconfirminvite() {
  
  ::msg::CSRspMentorConfirmInvite* temp = _impl_.mentorconfirminvite_;
  _impl_.mentorconfirminvite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspMentorConfirmInvite* CSRspBody::unsafe_arena_release_mentorconfirminvite() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.MentorConfirmInvite)
  
  ::msg::CSRspMentorConfirmInvite* temp = _impl_.mentorconfirminvite_;
  _impl_.mentorconfirminvite_ = nullptr;
  return temp;
}
inline ::msg::CSRspMentorConfirmInvite* CSRspBody::_internal_mutable_mentorconfirminvite() {
  
  if (_impl_.mentorconfirminvite_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspMentorConfirmInvite>(GetArenaForAllocation());
    _impl_.mentorconfirminvite_ = p;
  }
  return _impl_.mentorconfirminvite_;
}
inline ::msg::CSRspMentorConfirmInvite* CSRspBody::mutable_mentorconfirminvite() {
  ::msg::CSRspMentorConfirmInvite* _msg = _internal_mutable_mentorconfirminvite();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.MentorConfirmInvite)
  return _msg;
}
inline void CSRspBody::set_allocated_mentorconfirminvite(::msg::CSRspMentorConfirmInvite* mentorconfirminvite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorconfirminvite_);
  }
  if (mentorconfirminvite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorconfirminvite));
    if (message_arena != submessage_arena) {
      mentorconfirminvite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorconfirminvite, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorconfirminvite_ = mentorconfirminvite;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.MentorConfirmInvite)
}

// .msg.CSRspMentorRecommendList MentorRecommendList = 653;
inline bool CSRspBody::_internal_has_mentorrecommendlist() const {
  return this != internal_default_instance() && _impl_.mentorrecommendlist_ != nullptr;
}
inline bool CSRspBody::has_mentorrecommendlist() const {
  return _internal_has_mentorrecommendlist();
}
inline const ::msg::CSRspMentorRecommendList& CSRspBody::_internal_mentorrecommendlist() const {
  const ::msg::CSRspMentorRecommendList* p = _impl_.mentorrecommendlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspMentorRecommendList&>(
      ::msg::_CSRspMentorRecommendList_default_instance_);
}
inline const ::msg::CSRspMentorRecommendList& CSRspBody::mentorrecommendlist() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.MentorRecommendList)
  return _internal_mentorrecommendlist();
}
inline void CSRspBody::unsafe_arena_set_allocated_mentorrecommendlist(
    ::msg::CSRspMentorRecommendList* mentorrecommendlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorrecommendlist_);
  }
  _impl_.mentorrecommendlist_ = mentorrecommendlist;
  if (mentorrecommendlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.MentorRecommendList)
}
inline ::msg::CSRspMentorRecommendList* CSRspBody::release_mentorrecommendlist() {
  
  ::msg::CSRspMentorRecommendList* temp = _impl_.mentorrecommendlist_;
  _impl_.mentorrecommendlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspMentorRecommendList* CSRspBody::unsafe_arena_release_mentorrecommendlist() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.MentorRecommendList)
  
  ::msg::CSRspMentorRecommendList* temp = _impl_.mentorrecommendlist_;
  _impl_.mentorrecommendlist_ = nullptr;
  return temp;
}
inline ::msg::CSRspMentorRecommendList* CSRspBody::_internal_mutable_mentorrecommendlist() {
  
  if (_impl_.mentorrecommendlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspMentorRecommendList>(GetArenaForAllocation());
    _impl_.mentorrecommendlist_ = p;
  }
  return _impl_.mentorrecommendlist_;
}
inline ::msg::CSRspMentorRecommendList* CSRspBody::mutable_mentorrecommendlist() {
  ::msg::CSRspMentorRecommendList* _msg = _internal_mutable_mentorrecommendlist();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.MentorRecommendList)
  return _msg;
}
inline void CSRspBody::set_allocated_mentorrecommendlist(::msg::CSRspMentorRecommendList* mentorrecommendlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorrecommendlist_);
  }
  if (mentorrecommendlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorrecommendlist));
    if (message_arena != submessage_arena) {
      mentorrecommendlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorrecommendlist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorrecommendlist_ = mentorrecommendlist;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.MentorRecommendList)
}

// .msg.CSRspMentorGetTaskAward MentorGetTaskAward = 654;
inline bool CSRspBody::_internal_has_mentorgettaskaward() const {
  return this != internal_default_instance() && _impl_.mentorgettaskaward_ != nullptr;
}
inline bool CSRspBody::has_mentorgettaskaward() const {
  return _internal_has_mentorgettaskaward();
}
inline const ::msg::CSRspMentorGetTaskAward& CSRspBody::_internal_mentorgettaskaward() const {
  const ::msg::CSRspMentorGetTaskAward* p = _impl_.mentorgettaskaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspMentorGetTaskAward&>(
      ::msg::_CSRspMentorGetTaskAward_default_instance_);
}
inline const ::msg::CSRspMentorGetTaskAward& CSRspBody::mentorgettaskaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.MentorGetTaskAward)
  return _internal_mentorgettaskaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_mentorgettaskaward(
    ::msg::CSRspMentorGetTaskAward* mentorgettaskaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorgettaskaward_);
  }
  _impl_.mentorgettaskaward_ = mentorgettaskaward;
  if (mentorgettaskaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.MentorGetTaskAward)
}
inline ::msg::CSRspMentorGetTaskAward* CSRspBody::release_mentorgettaskaward() {
  
  ::msg::CSRspMentorGetTaskAward* temp = _impl_.mentorgettaskaward_;
  _impl_.mentorgettaskaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspMentorGetTaskAward* CSRspBody::unsafe_arena_release_mentorgettaskaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.MentorGetTaskAward)
  
  ::msg::CSRspMentorGetTaskAward* temp = _impl_.mentorgettaskaward_;
  _impl_.mentorgettaskaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspMentorGetTaskAward* CSRspBody::_internal_mutable_mentorgettaskaward() {
  
  if (_impl_.mentorgettaskaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspMentorGetTaskAward>(GetArenaForAllocation());
    _impl_.mentorgettaskaward_ = p;
  }
  return _impl_.mentorgettaskaward_;
}
inline ::msg::CSRspMentorGetTaskAward* CSRspBody::mutable_mentorgettaskaward() {
  ::msg::CSRspMentorGetTaskAward* _msg = _internal_mutable_mentorgettaskaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.MentorGetTaskAward)
  return _msg;
}
inline void CSRspBody::set_allocated_mentorgettaskaward(::msg::CSRspMentorGetTaskAward* mentorgettaskaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorgettaskaward_);
  }
  if (mentorgettaskaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorgettaskaward));
    if (message_arena != submessage_arena) {
      mentorgettaskaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorgettaskaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorgettaskaward_ = mentorgettaskaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.MentorGetTaskAward)
}

// .msg.CSRspMentorGraduate MentorGraduate = 655;
inline bool CSRspBody::_internal_has_mentorgraduate() const {
  return this != internal_default_instance() && _impl_.mentorgraduate_ != nullptr;
}
inline bool CSRspBody::has_mentorgraduate() const {
  return _internal_has_mentorgraduate();
}
inline const ::msg::CSRspMentorGraduate& CSRspBody::_internal_mentorgraduate() const {
  const ::msg::CSRspMentorGraduate* p = _impl_.mentorgraduate_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspMentorGraduate&>(
      ::msg::_CSRspMentorGraduate_default_instance_);
}
inline const ::msg::CSRspMentorGraduate& CSRspBody::mentorgraduate() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.MentorGraduate)
  return _internal_mentorgraduate();
}
inline void CSRspBody::unsafe_arena_set_allocated_mentorgraduate(
    ::msg::CSRspMentorGraduate* mentorgraduate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorgraduate_);
  }
  _impl_.mentorgraduate_ = mentorgraduate;
  if (mentorgraduate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.MentorGraduate)
}
inline ::msg::CSRspMentorGraduate* CSRspBody::release_mentorgraduate() {
  
  ::msg::CSRspMentorGraduate* temp = _impl_.mentorgraduate_;
  _impl_.mentorgraduate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspMentorGraduate* CSRspBody::unsafe_arena_release_mentorgraduate() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.MentorGraduate)
  
  ::msg::CSRspMentorGraduate* temp = _impl_.mentorgraduate_;
  _impl_.mentorgraduate_ = nullptr;
  return temp;
}
inline ::msg::CSRspMentorGraduate* CSRspBody::_internal_mutable_mentorgraduate() {
  
  if (_impl_.mentorgraduate_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspMentorGraduate>(GetArenaForAllocation());
    _impl_.mentorgraduate_ = p;
  }
  return _impl_.mentorgraduate_;
}
inline ::msg::CSRspMentorGraduate* CSRspBody::mutable_mentorgraduate() {
  ::msg::CSRspMentorGraduate* _msg = _internal_mutable_mentorgraduate();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.MentorGraduate)
  return _msg;
}
inline void CSRspBody::set_allocated_mentorgraduate(::msg::CSRspMentorGraduate* mentorgraduate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorgraduate_);
  }
  if (mentorgraduate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorgraduate));
    if (message_arena != submessage_arena) {
      mentorgraduate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorgraduate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorgraduate_ = mentorgraduate;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.MentorGraduate)
}

// .msg.CSRspMentorRelieveRelation MentorRelieveRelation = 656;
inline bool CSRspBody::_internal_has_mentorrelieverelation() const {
  return this != internal_default_instance() && _impl_.mentorrelieverelation_ != nullptr;
}
inline bool CSRspBody::has_mentorrelieverelation() const {
  return _internal_has_mentorrelieverelation();
}
inline const ::msg::CSRspMentorRelieveRelation& CSRspBody::_internal_mentorrelieverelation() const {
  const ::msg::CSRspMentorRelieveRelation* p = _impl_.mentorrelieverelation_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspMentorRelieveRelation&>(
      ::msg::_CSRspMentorRelieveRelation_default_instance_);
}
inline const ::msg::CSRspMentorRelieveRelation& CSRspBody::mentorrelieverelation() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.MentorRelieveRelation)
  return _internal_mentorrelieverelation();
}
inline void CSRspBody::unsafe_arena_set_allocated_mentorrelieverelation(
    ::msg::CSRspMentorRelieveRelation* mentorrelieverelation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorrelieverelation_);
  }
  _impl_.mentorrelieverelation_ = mentorrelieverelation;
  if (mentorrelieverelation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.MentorRelieveRelation)
}
inline ::msg::CSRspMentorRelieveRelation* CSRspBody::release_mentorrelieverelation() {
  
  ::msg::CSRspMentorRelieveRelation* temp = _impl_.mentorrelieverelation_;
  _impl_.mentorrelieverelation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspMentorRelieveRelation* CSRspBody::unsafe_arena_release_mentorrelieverelation() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.MentorRelieveRelation)
  
  ::msg::CSRspMentorRelieveRelation* temp = _impl_.mentorrelieverelation_;
  _impl_.mentorrelieverelation_ = nullptr;
  return temp;
}
inline ::msg::CSRspMentorRelieveRelation* CSRspBody::_internal_mutable_mentorrelieverelation() {
  
  if (_impl_.mentorrelieverelation_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspMentorRelieveRelation>(GetArenaForAllocation());
    _impl_.mentorrelieverelation_ = p;
  }
  return _impl_.mentorrelieverelation_;
}
inline ::msg::CSRspMentorRelieveRelation* CSRspBody::mutable_mentorrelieverelation() {
  ::msg::CSRspMentorRelieveRelation* _msg = _internal_mutable_mentorrelieverelation();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.MentorRelieveRelation)
  return _msg;
}
inline void CSRspBody::set_allocated_mentorrelieverelation(::msg::CSRspMentorRelieveRelation* mentorrelieverelation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorrelieverelation_);
  }
  if (mentorrelieverelation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorrelieverelation));
    if (message_arena != submessage_arena) {
      mentorrelieverelation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorrelieverelation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorrelieverelation_ = mentorrelieverelation;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.MentorRelieveRelation)
}

// .msg.CSRspGetMentorInfo GetMentorInfo = 657;
inline bool CSRspBody::_internal_has_getmentorinfo() const {
  return this != internal_default_instance() && _impl_.getmentorinfo_ != nullptr;
}
inline bool CSRspBody::has_getmentorinfo() const {
  return _internal_has_getmentorinfo();
}
inline const ::msg::CSRspGetMentorInfo& CSRspBody::_internal_getmentorinfo() const {
  const ::msg::CSRspGetMentorInfo* p = _impl_.getmentorinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetMentorInfo&>(
      ::msg::_CSRspGetMentorInfo_default_instance_);
}
inline const ::msg::CSRspGetMentorInfo& CSRspBody::getmentorinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetMentorInfo)
  return _internal_getmentorinfo();
}
inline void CSRspBody::unsafe_arena_set_allocated_getmentorinfo(
    ::msg::CSRspGetMentorInfo* getmentorinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmentorinfo_);
  }
  _impl_.getmentorinfo_ = getmentorinfo;
  if (getmentorinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetMentorInfo)
}
inline ::msg::CSRspGetMentorInfo* CSRspBody::release_getmentorinfo() {
  
  ::msg::CSRspGetMentorInfo* temp = _impl_.getmentorinfo_;
  _impl_.getmentorinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetMentorInfo* CSRspBody::unsafe_arena_release_getmentorinfo() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetMentorInfo)
  
  ::msg::CSRspGetMentorInfo* temp = _impl_.getmentorinfo_;
  _impl_.getmentorinfo_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetMentorInfo* CSRspBody::_internal_mutable_getmentorinfo() {
  
  if (_impl_.getmentorinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetMentorInfo>(GetArenaForAllocation());
    _impl_.getmentorinfo_ = p;
  }
  return _impl_.getmentorinfo_;
}
inline ::msg::CSRspGetMentorInfo* CSRspBody::mutable_getmentorinfo() {
  ::msg::CSRspGetMentorInfo* _msg = _internal_mutable_getmentorinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetMentorInfo)
  return _msg;
}
inline void CSRspBody::set_allocated_getmentorinfo(::msg::CSRspGetMentorInfo* getmentorinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmentorinfo_);
  }
  if (getmentorinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getmentorinfo));
    if (message_arena != submessage_arena) {
      getmentorinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getmentorinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getmentorinfo_ = getmentorinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetMentorInfo)
}

// .msg.CSRspMentorGetInviteMsg MentorGetInviteMsg = 658;
inline bool CSRspBody::_internal_has_mentorgetinvitemsg() const {
  return this != internal_default_instance() && _impl_.mentorgetinvitemsg_ != nullptr;
}
inline bool CSRspBody::has_mentorgetinvitemsg() const {
  return _internal_has_mentorgetinvitemsg();
}
inline const ::msg::CSRspMentorGetInviteMsg& CSRspBody::_internal_mentorgetinvitemsg() const {
  const ::msg::CSRspMentorGetInviteMsg* p = _impl_.mentorgetinvitemsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspMentorGetInviteMsg&>(
      ::msg::_CSRspMentorGetInviteMsg_default_instance_);
}
inline const ::msg::CSRspMentorGetInviteMsg& CSRspBody::mentorgetinvitemsg() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.MentorGetInviteMsg)
  return _internal_mentorgetinvitemsg();
}
inline void CSRspBody::unsafe_arena_set_allocated_mentorgetinvitemsg(
    ::msg::CSRspMentorGetInviteMsg* mentorgetinvitemsg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorgetinvitemsg_);
  }
  _impl_.mentorgetinvitemsg_ = mentorgetinvitemsg;
  if (mentorgetinvitemsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.MentorGetInviteMsg)
}
inline ::msg::CSRspMentorGetInviteMsg* CSRspBody::release_mentorgetinvitemsg() {
  
  ::msg::CSRspMentorGetInviteMsg* temp = _impl_.mentorgetinvitemsg_;
  _impl_.mentorgetinvitemsg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspMentorGetInviteMsg* CSRspBody::unsafe_arena_release_mentorgetinvitemsg() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.MentorGetInviteMsg)
  
  ::msg::CSRspMentorGetInviteMsg* temp = _impl_.mentorgetinvitemsg_;
  _impl_.mentorgetinvitemsg_ = nullptr;
  return temp;
}
inline ::msg::CSRspMentorGetInviteMsg* CSRspBody::_internal_mutable_mentorgetinvitemsg() {
  
  if (_impl_.mentorgetinvitemsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspMentorGetInviteMsg>(GetArenaForAllocation());
    _impl_.mentorgetinvitemsg_ = p;
  }
  return _impl_.mentorgetinvitemsg_;
}
inline ::msg::CSRspMentorGetInviteMsg* CSRspBody::mutable_mentorgetinvitemsg() {
  ::msg::CSRspMentorGetInviteMsg* _msg = _internal_mutable_mentorgetinvitemsg();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.MentorGetInviteMsg)
  return _msg;
}
inline void CSRspBody::set_allocated_mentorgetinvitemsg(::msg::CSRspMentorGetInviteMsg* mentorgetinvitemsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorgetinvitemsg_);
  }
  if (mentorgetinvitemsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorgetinvitemsg));
    if (message_arena != submessage_arena) {
      mentorgetinvitemsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorgetinvitemsg, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorgetinvitemsg_ = mentorgetinvitemsg;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.MentorGetInviteMsg)
}

// .msg.CSRspTeamMsg TeamMsg = 659;
inline bool CSRspBody::_internal_has_teammsg() const {
  return this != internal_default_instance() && _impl_.teammsg_ != nullptr;
}
inline bool CSRspBody::has_teammsg() const {
  return _internal_has_teammsg();
}
inline const ::msg::CSRspTeamMsg& CSRspBody::_internal_teammsg() const {
  const ::msg::CSRspTeamMsg* p = _impl_.teammsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspTeamMsg&>(
      ::msg::_CSRspTeamMsg_default_instance_);
}
inline const ::msg::CSRspTeamMsg& CSRspBody::teammsg() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.TeamMsg)
  return _internal_teammsg();
}
inline void CSRspBody::unsafe_arena_set_allocated_teammsg(
    ::msg::CSRspTeamMsg* teammsg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teammsg_);
  }
  _impl_.teammsg_ = teammsg;
  if (teammsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.TeamMsg)
}
inline ::msg::CSRspTeamMsg* CSRspBody::release_teammsg() {
  
  ::msg::CSRspTeamMsg* temp = _impl_.teammsg_;
  _impl_.teammsg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspTeamMsg* CSRspBody::unsafe_arena_release_teammsg() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.TeamMsg)
  
  ::msg::CSRspTeamMsg* temp = _impl_.teammsg_;
  _impl_.teammsg_ = nullptr;
  return temp;
}
inline ::msg::CSRspTeamMsg* CSRspBody::_internal_mutable_teammsg() {
  
  if (_impl_.teammsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspTeamMsg>(GetArenaForAllocation());
    _impl_.teammsg_ = p;
  }
  return _impl_.teammsg_;
}
inline ::msg::CSRspTeamMsg* CSRspBody::mutable_teammsg() {
  ::msg::CSRspTeamMsg* _msg = _internal_mutable_teammsg();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.TeamMsg)
  return _msg;
}
inline void CSRspBody::set_allocated_teammsg(::msg::CSRspTeamMsg* teammsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teammsg_);
  }
  if (teammsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teammsg));
    if (message_arena != submessage_arena) {
      teammsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teammsg, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.teammsg_ = teammsg;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.TeamMsg)
}

// .msg.CSRspChatMsg ChatMsg = 660;
inline bool CSRspBody::_internal_has_chatmsg() const {
  return this != internal_default_instance() && _impl_.chatmsg_ != nullptr;
}
inline bool CSRspBody::has_chatmsg() const {
  return _internal_has_chatmsg();
}
inline const ::msg::CSRspChatMsg& CSRspBody::_internal_chatmsg() const {
  const ::msg::CSRspChatMsg* p = _impl_.chatmsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspChatMsg&>(
      ::msg::_CSRspChatMsg_default_instance_);
}
inline const ::msg::CSRspChatMsg& CSRspBody::chatmsg() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ChatMsg)
  return _internal_chatmsg();
}
inline void CSRspBody::unsafe_arena_set_allocated_chatmsg(
    ::msg::CSRspChatMsg* chatmsg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chatmsg_);
  }
  _impl_.chatmsg_ = chatmsg;
  if (chatmsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ChatMsg)
}
inline ::msg::CSRspChatMsg* CSRspBody::release_chatmsg() {
  
  ::msg::CSRspChatMsg* temp = _impl_.chatmsg_;
  _impl_.chatmsg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspChatMsg* CSRspBody::unsafe_arena_release_chatmsg() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ChatMsg)
  
  ::msg::CSRspChatMsg* temp = _impl_.chatmsg_;
  _impl_.chatmsg_ = nullptr;
  return temp;
}
inline ::msg::CSRspChatMsg* CSRspBody::_internal_mutable_chatmsg() {
  
  if (_impl_.chatmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspChatMsg>(GetArenaForAllocation());
    _impl_.chatmsg_ = p;
  }
  return _impl_.chatmsg_;
}
inline ::msg::CSRspChatMsg* CSRspBody::mutable_chatmsg() {
  ::msg::CSRspChatMsg* _msg = _internal_mutable_chatmsg();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ChatMsg)
  return _msg;
}
inline void CSRspBody::set_allocated_chatmsg(::msg::CSRspChatMsg* chatmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chatmsg_);
  }
  if (chatmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chatmsg));
    if (message_arena != submessage_arena) {
      chatmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chatmsg, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chatmsg_ = chatmsg;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ChatMsg)
}

// .msg.CSRspChannelChat ChannelChat = 661;
inline bool CSRspBody::_internal_has_channelchat() const {
  return this != internal_default_instance() && _impl_.channelchat_ != nullptr;
}
inline bool CSRspBody::has_channelchat() const {
  return _internal_has_channelchat();
}
inline const ::msg::CSRspChannelChat& CSRspBody::_internal_channelchat() const {
  const ::msg::CSRspChannelChat* p = _impl_.channelchat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspChannelChat&>(
      ::msg::_CSRspChannelChat_default_instance_);
}
inline const ::msg::CSRspChannelChat& CSRspBody::channelchat() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.ChannelChat)
  return _internal_channelchat();
}
inline void CSRspBody::unsafe_arena_set_allocated_channelchat(
    ::msg::CSRspChannelChat* channelchat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.channelchat_);
  }
  _impl_.channelchat_ = channelchat;
  if (channelchat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.ChannelChat)
}
inline ::msg::CSRspChannelChat* CSRspBody::release_channelchat() {
  
  ::msg::CSRspChannelChat* temp = _impl_.channelchat_;
  _impl_.channelchat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspChannelChat* CSRspBody::unsafe_arena_release_channelchat() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.ChannelChat)
  
  ::msg::CSRspChannelChat* temp = _impl_.channelchat_;
  _impl_.channelchat_ = nullptr;
  return temp;
}
inline ::msg::CSRspChannelChat* CSRspBody::_internal_mutable_channelchat() {
  
  if (_impl_.channelchat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspChannelChat>(GetArenaForAllocation());
    _impl_.channelchat_ = p;
  }
  return _impl_.channelchat_;
}
inline ::msg::CSRspChannelChat* CSRspBody::mutable_channelchat() {
  ::msg::CSRspChannelChat* _msg = _internal_mutable_channelchat();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.ChannelChat)
  return _msg;
}
inline void CSRspBody::set_allocated_channelchat(::msg::CSRspChannelChat* channelchat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.channelchat_);
  }
  if (channelchat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channelchat));
    if (message_arena != submessage_arena) {
      channelchat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channelchat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.channelchat_ = channelchat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.ChannelChat)
}

// .msg.CSRspUpdateCardGroupBetter UpdateCardGroupBetter = 662;
inline bool CSRspBody::_internal_has_updatecardgroupbetter() const {
  return this != internal_default_instance() && _impl_.updatecardgroupbetter_ != nullptr;
}
inline bool CSRspBody::has_updatecardgroupbetter() const {
  return _internal_has_updatecardgroupbetter();
}
inline const ::msg::CSRspUpdateCardGroupBetter& CSRspBody::_internal_updatecardgroupbetter() const {
  const ::msg::CSRspUpdateCardGroupBetter* p = _impl_.updatecardgroupbetter_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUpdateCardGroupBetter&>(
      ::msg::_CSRspUpdateCardGroupBetter_default_instance_);
}
inline const ::msg::CSRspUpdateCardGroupBetter& CSRspBody::updatecardgroupbetter() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UpdateCardGroupBetter)
  return _internal_updatecardgroupbetter();
}
inline void CSRspBody::unsafe_arena_set_allocated_updatecardgroupbetter(
    ::msg::CSRspUpdateCardGroupBetter* updatecardgroupbetter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatecardgroupbetter_);
  }
  _impl_.updatecardgroupbetter_ = updatecardgroupbetter;
  if (updatecardgroupbetter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UpdateCardGroupBetter)
}
inline ::msg::CSRspUpdateCardGroupBetter* CSRspBody::release_updatecardgroupbetter() {
  
  ::msg::CSRspUpdateCardGroupBetter* temp = _impl_.updatecardgroupbetter_;
  _impl_.updatecardgroupbetter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUpdateCardGroupBetter* CSRspBody::unsafe_arena_release_updatecardgroupbetter() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UpdateCardGroupBetter)
  
  ::msg::CSRspUpdateCardGroupBetter* temp = _impl_.updatecardgroupbetter_;
  _impl_.updatecardgroupbetter_ = nullptr;
  return temp;
}
inline ::msg::CSRspUpdateCardGroupBetter* CSRspBody::_internal_mutable_updatecardgroupbetter() {
  
  if (_impl_.updatecardgroupbetter_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUpdateCardGroupBetter>(GetArenaForAllocation());
    _impl_.updatecardgroupbetter_ = p;
  }
  return _impl_.updatecardgroupbetter_;
}
inline ::msg::CSRspUpdateCardGroupBetter* CSRspBody::mutable_updatecardgroupbetter() {
  ::msg::CSRspUpdateCardGroupBetter* _msg = _internal_mutable_updatecardgroupbetter();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UpdateCardGroupBetter)
  return _msg;
}
inline void CSRspBody::set_allocated_updatecardgroupbetter(::msg::CSRspUpdateCardGroupBetter* updatecardgroupbetter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatecardgroupbetter_);
  }
  if (updatecardgroupbetter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatecardgroupbetter));
    if (message_arena != submessage_arena) {
      updatecardgroupbetter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatecardgroupbetter, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updatecardgroupbetter_ = updatecardgroupbetter;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UpdateCardGroupBetter)
}

// .msg.CSRspUpdateCardGroupSetting UpdateCardGroupSetting = 663;
inline bool CSRspBody::_internal_has_updatecardgroupsetting() const {
  return this != internal_default_instance() && _impl_.updatecardgroupsetting_ != nullptr;
}
inline bool CSRspBody::has_updatecardgroupsetting() const {
  return _internal_has_updatecardgroupsetting();
}
inline const ::msg::CSRspUpdateCardGroupSetting& CSRspBody::_internal_updatecardgroupsetting() const {
  const ::msg::CSRspUpdateCardGroupSetting* p = _impl_.updatecardgroupsetting_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspUpdateCardGroupSetting&>(
      ::msg::_CSRspUpdateCardGroupSetting_default_instance_);
}
inline const ::msg::CSRspUpdateCardGroupSetting& CSRspBody::updatecardgroupsetting() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.UpdateCardGroupSetting)
  return _internal_updatecardgroupsetting();
}
inline void CSRspBody::unsafe_arena_set_allocated_updatecardgroupsetting(
    ::msg::CSRspUpdateCardGroupSetting* updatecardgroupsetting) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatecardgroupsetting_);
  }
  _impl_.updatecardgroupsetting_ = updatecardgroupsetting;
  if (updatecardgroupsetting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.UpdateCardGroupSetting)
}
inline ::msg::CSRspUpdateCardGroupSetting* CSRspBody::release_updatecardgroupsetting() {
  
  ::msg::CSRspUpdateCardGroupSetting* temp = _impl_.updatecardgroupsetting_;
  _impl_.updatecardgroupsetting_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspUpdateCardGroupSetting* CSRspBody::unsafe_arena_release_updatecardgroupsetting() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.UpdateCardGroupSetting)
  
  ::msg::CSRspUpdateCardGroupSetting* temp = _impl_.updatecardgroupsetting_;
  _impl_.updatecardgroupsetting_ = nullptr;
  return temp;
}
inline ::msg::CSRspUpdateCardGroupSetting* CSRspBody::_internal_mutable_updatecardgroupsetting() {
  
  if (_impl_.updatecardgroupsetting_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspUpdateCardGroupSetting>(GetArenaForAllocation());
    _impl_.updatecardgroupsetting_ = p;
  }
  return _impl_.updatecardgroupsetting_;
}
inline ::msg::CSRspUpdateCardGroupSetting* CSRspBody::mutable_updatecardgroupsetting() {
  ::msg::CSRspUpdateCardGroupSetting* _msg = _internal_mutable_updatecardgroupsetting();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.UpdateCardGroupSetting)
  return _msg;
}
inline void CSRspBody::set_allocated_updatecardgroupsetting(::msg::CSRspUpdateCardGroupSetting* updatecardgroupsetting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatecardgroupsetting_);
  }
  if (updatecardgroupsetting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatecardgroupsetting));
    if (message_arena != submessage_arena) {
      updatecardgroupsetting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatecardgroupsetting, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updatecardgroupsetting_ = updatecardgroupsetting;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.UpdateCardGroupSetting)
}

// .msg.CSRspSetAuctionName SetAuctionName = 664;
inline bool CSRspBody::_internal_has_setauctionname() const {
  return this != internal_default_instance() && _impl_.setauctionname_ != nullptr;
}
inline bool CSRspBody::has_setauctionname() const {
  return _internal_has_setauctionname();
}
inline const ::msg::CSRspSetAuctionName& CSRspBody::_internal_setauctionname() const {
  const ::msg::CSRspSetAuctionName* p = _impl_.setauctionname_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSetAuctionName&>(
      ::msg::_CSRspSetAuctionName_default_instance_);
}
inline const ::msg::CSRspSetAuctionName& CSRspBody::setauctionname() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SetAuctionName)
  return _internal_setauctionname();
}
inline void CSRspBody::unsafe_arena_set_allocated_setauctionname(
    ::msg::CSRspSetAuctionName* setauctionname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setauctionname_);
  }
  _impl_.setauctionname_ = setauctionname;
  if (setauctionname) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SetAuctionName)
}
inline ::msg::CSRspSetAuctionName* CSRspBody::release_setauctionname() {
  
  ::msg::CSRspSetAuctionName* temp = _impl_.setauctionname_;
  _impl_.setauctionname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSetAuctionName* CSRspBody::unsafe_arena_release_setauctionname() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SetAuctionName)
  
  ::msg::CSRspSetAuctionName* temp = _impl_.setauctionname_;
  _impl_.setauctionname_ = nullptr;
  return temp;
}
inline ::msg::CSRspSetAuctionName* CSRspBody::_internal_mutable_setauctionname() {
  
  if (_impl_.setauctionname_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSetAuctionName>(GetArenaForAllocation());
    _impl_.setauctionname_ = p;
  }
  return _impl_.setauctionname_;
}
inline ::msg::CSRspSetAuctionName* CSRspBody::mutable_setauctionname() {
  ::msg::CSRspSetAuctionName* _msg = _internal_mutable_setauctionname();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SetAuctionName)
  return _msg;
}
inline void CSRspBody::set_allocated_setauctionname(::msg::CSRspSetAuctionName* setauctionname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setauctionname_);
  }
  if (setauctionname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setauctionname));
    if (message_arena != submessage_arena) {
      setauctionname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setauctionname, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setauctionname_ = setauctionname;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SetAuctionName)
}

// .msg.CSRspSetAuctionRemark SetAuctionRemark = 665;
inline bool CSRspBody::_internal_has_setauctionremark() const {
  return this != internal_default_instance() && _impl_.setauctionremark_ != nullptr;
}
inline bool CSRspBody::has_setauctionremark() const {
  return _internal_has_setauctionremark();
}
inline const ::msg::CSRspSetAuctionRemark& CSRspBody::_internal_setauctionremark() const {
  const ::msg::CSRspSetAuctionRemark* p = _impl_.setauctionremark_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSetAuctionRemark&>(
      ::msg::_CSRspSetAuctionRemark_default_instance_);
}
inline const ::msg::CSRspSetAuctionRemark& CSRspBody::setauctionremark() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SetAuctionRemark)
  return _internal_setauctionremark();
}
inline void CSRspBody::unsafe_arena_set_allocated_setauctionremark(
    ::msg::CSRspSetAuctionRemark* setauctionremark) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setauctionremark_);
  }
  _impl_.setauctionremark_ = setauctionremark;
  if (setauctionremark) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SetAuctionRemark)
}
inline ::msg::CSRspSetAuctionRemark* CSRspBody::release_setauctionremark() {
  
  ::msg::CSRspSetAuctionRemark* temp = _impl_.setauctionremark_;
  _impl_.setauctionremark_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSetAuctionRemark* CSRspBody::unsafe_arena_release_setauctionremark() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SetAuctionRemark)
  
  ::msg::CSRspSetAuctionRemark* temp = _impl_.setauctionremark_;
  _impl_.setauctionremark_ = nullptr;
  return temp;
}
inline ::msg::CSRspSetAuctionRemark* CSRspBody::_internal_mutable_setauctionremark() {
  
  if (_impl_.setauctionremark_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSetAuctionRemark>(GetArenaForAllocation());
    _impl_.setauctionremark_ = p;
  }
  return _impl_.setauctionremark_;
}
inline ::msg::CSRspSetAuctionRemark* CSRspBody::mutable_setauctionremark() {
  ::msg::CSRspSetAuctionRemark* _msg = _internal_mutable_setauctionremark();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SetAuctionRemark)
  return _msg;
}
inline void CSRspBody::set_allocated_setauctionremark(::msg::CSRspSetAuctionRemark* setauctionremark) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setauctionremark_);
  }
  if (setauctionremark) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setauctionremark));
    if (message_arena != submessage_arena) {
      setauctionremark = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setauctionremark, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setauctionremark_ = setauctionremark;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SetAuctionRemark)
}

// .msg.CSRspGetBalance GetBalance = 666;
inline bool CSRspBody::_internal_has_getbalance() const {
  return this != internal_default_instance() && _impl_.getbalance_ != nullptr;
}
inline bool CSRspBody::has_getbalance() const {
  return _internal_has_getbalance();
}
inline const ::msg::CSRspGetBalance& CSRspBody::_internal_getbalance() const {
  const ::msg::CSRspGetBalance* p = _impl_.getbalance_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetBalance&>(
      ::msg::_CSRspGetBalance_default_instance_);
}
inline const ::msg::CSRspGetBalance& CSRspBody::getbalance() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetBalance)
  return _internal_getbalance();
}
inline void CSRspBody::unsafe_arena_set_allocated_getbalance(
    ::msg::CSRspGetBalance* getbalance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getbalance_);
  }
  _impl_.getbalance_ = getbalance;
  if (getbalance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetBalance)
}
inline ::msg::CSRspGetBalance* CSRspBody::release_getbalance() {
  
  ::msg::CSRspGetBalance* temp = _impl_.getbalance_;
  _impl_.getbalance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetBalance* CSRspBody::unsafe_arena_release_getbalance() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetBalance)
  
  ::msg::CSRspGetBalance* temp = _impl_.getbalance_;
  _impl_.getbalance_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetBalance* CSRspBody::_internal_mutable_getbalance() {
  
  if (_impl_.getbalance_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetBalance>(GetArenaForAllocation());
    _impl_.getbalance_ = p;
  }
  return _impl_.getbalance_;
}
inline ::msg::CSRspGetBalance* CSRspBody::mutable_getbalance() {
  ::msg::CSRspGetBalance* _msg = _internal_mutable_getbalance();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetBalance)
  return _msg;
}
inline void CSRspBody::set_allocated_getbalance(::msg::CSRspGetBalance* getbalance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getbalance_);
  }
  if (getbalance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getbalance));
    if (message_arena != submessage_arena) {
      getbalance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getbalance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getbalance_ = getbalance;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetBalance)
}

// .msg.CSRspRechargeBalance RechargeBalance = 667;
inline bool CSRspBody::_internal_has_rechargebalance() const {
  return this != internal_default_instance() && _impl_.rechargebalance_ != nullptr;
}
inline bool CSRspBody::has_rechargebalance() const {
  return _internal_has_rechargebalance();
}
inline const ::msg::CSRspRechargeBalance& CSRspBody::_internal_rechargebalance() const {
  const ::msg::CSRspRechargeBalance* p = _impl_.rechargebalance_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspRechargeBalance&>(
      ::msg::_CSRspRechargeBalance_default_instance_);
}
inline const ::msg::CSRspRechargeBalance& CSRspBody::rechargebalance() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.RechargeBalance)
  return _internal_rechargebalance();
}
inline void CSRspBody::unsafe_arena_set_allocated_rechargebalance(
    ::msg::CSRspRechargeBalance* rechargebalance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rechargebalance_);
  }
  _impl_.rechargebalance_ = rechargebalance;
  if (rechargebalance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.RechargeBalance)
}
inline ::msg::CSRspRechargeBalance* CSRspBody::release_rechargebalance() {
  
  ::msg::CSRspRechargeBalance* temp = _impl_.rechargebalance_;
  _impl_.rechargebalance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspRechargeBalance* CSRspBody::unsafe_arena_release_rechargebalance() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.RechargeBalance)
  
  ::msg::CSRspRechargeBalance* temp = _impl_.rechargebalance_;
  _impl_.rechargebalance_ = nullptr;
  return temp;
}
inline ::msg::CSRspRechargeBalance* CSRspBody::_internal_mutable_rechargebalance() {
  
  if (_impl_.rechargebalance_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspRechargeBalance>(GetArenaForAllocation());
    _impl_.rechargebalance_ = p;
  }
  return _impl_.rechargebalance_;
}
inline ::msg::CSRspRechargeBalance* CSRspBody::mutable_rechargebalance() {
  ::msg::CSRspRechargeBalance* _msg = _internal_mutable_rechargebalance();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.RechargeBalance)
  return _msg;
}
inline void CSRspBody::set_allocated_rechargebalance(::msg::CSRspRechargeBalance* rechargebalance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rechargebalance_);
  }
  if (rechargebalance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rechargebalance));
    if (message_arena != submessage_arena) {
      rechargebalance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rechargebalance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rechargebalance_ = rechargebalance;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.RechargeBalance)
}

// .msg.CSRspWithdrawBalance WithdrawBalance = 668;
inline bool CSRspBody::_internal_has_withdrawbalance() const {
  return this != internal_default_instance() && _impl_.withdrawbalance_ != nullptr;
}
inline bool CSRspBody::has_withdrawbalance() const {
  return _internal_has_withdrawbalance();
}
inline const ::msg::CSRspWithdrawBalance& CSRspBody::_internal_withdrawbalance() const {
  const ::msg::CSRspWithdrawBalance* p = _impl_.withdrawbalance_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspWithdrawBalance&>(
      ::msg::_CSRspWithdrawBalance_default_instance_);
}
inline const ::msg::CSRspWithdrawBalance& CSRspBody::withdrawbalance() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.WithdrawBalance)
  return _internal_withdrawbalance();
}
inline void CSRspBody::unsafe_arena_set_allocated_withdrawbalance(
    ::msg::CSRspWithdrawBalance* withdrawbalance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.withdrawbalance_);
  }
  _impl_.withdrawbalance_ = withdrawbalance;
  if (withdrawbalance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.WithdrawBalance)
}
inline ::msg::CSRspWithdrawBalance* CSRspBody::release_withdrawbalance() {
  
  ::msg::CSRspWithdrawBalance* temp = _impl_.withdrawbalance_;
  _impl_.withdrawbalance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspWithdrawBalance* CSRspBody::unsafe_arena_release_withdrawbalance() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.WithdrawBalance)
  
  ::msg::CSRspWithdrawBalance* temp = _impl_.withdrawbalance_;
  _impl_.withdrawbalance_ = nullptr;
  return temp;
}
inline ::msg::CSRspWithdrawBalance* CSRspBody::_internal_mutable_withdrawbalance() {
  
  if (_impl_.withdrawbalance_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspWithdrawBalance>(GetArenaForAllocation());
    _impl_.withdrawbalance_ = p;
  }
  return _impl_.withdrawbalance_;
}
inline ::msg::CSRspWithdrawBalance* CSRspBody::mutable_withdrawbalance() {
  ::msg::CSRspWithdrawBalance* _msg = _internal_mutable_withdrawbalance();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.WithdrawBalance)
  return _msg;
}
inline void CSRspBody::set_allocated_withdrawbalance(::msg::CSRspWithdrawBalance* withdrawbalance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.withdrawbalance_);
  }
  if (withdrawbalance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(withdrawbalance));
    if (message_arena != submessage_arena) {
      withdrawbalance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, withdrawbalance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.withdrawbalance_ = withdrawbalance;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.WithdrawBalance)
}

// .msg.CSRspPersonalRecommendMall PersonalRecommendMall = 669;
inline bool CSRspBody::_internal_has_personalrecommendmall() const {
  return this != internal_default_instance() && _impl_.personalrecommendmall_ != nullptr;
}
inline bool CSRspBody::has_personalrecommendmall() const {
  return _internal_has_personalrecommendmall();
}
inline const ::msg::CSRspPersonalRecommendMall& CSRspBody::_internal_personalrecommendmall() const {
  const ::msg::CSRspPersonalRecommendMall* p = _impl_.personalrecommendmall_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspPersonalRecommendMall&>(
      ::msg::_CSRspPersonalRecommendMall_default_instance_);
}
inline const ::msg::CSRspPersonalRecommendMall& CSRspBody::personalrecommendmall() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.PersonalRecommendMall)
  return _internal_personalrecommendmall();
}
inline void CSRspBody::unsafe_arena_set_allocated_personalrecommendmall(
    ::msg::CSRspPersonalRecommendMall* personalrecommendmall) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.personalrecommendmall_);
  }
  _impl_.personalrecommendmall_ = personalrecommendmall;
  if (personalrecommendmall) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.PersonalRecommendMall)
}
inline ::msg::CSRspPersonalRecommendMall* CSRspBody::release_personalrecommendmall() {
  
  ::msg::CSRspPersonalRecommendMall* temp = _impl_.personalrecommendmall_;
  _impl_.personalrecommendmall_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspPersonalRecommendMall* CSRspBody::unsafe_arena_release_personalrecommendmall() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.PersonalRecommendMall)
  
  ::msg::CSRspPersonalRecommendMall* temp = _impl_.personalrecommendmall_;
  _impl_.personalrecommendmall_ = nullptr;
  return temp;
}
inline ::msg::CSRspPersonalRecommendMall* CSRspBody::_internal_mutable_personalrecommendmall() {
  
  if (_impl_.personalrecommendmall_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspPersonalRecommendMall>(GetArenaForAllocation());
    _impl_.personalrecommendmall_ = p;
  }
  return _impl_.personalrecommendmall_;
}
inline ::msg::CSRspPersonalRecommendMall* CSRspBody::mutable_personalrecommendmall() {
  ::msg::CSRspPersonalRecommendMall* _msg = _internal_mutable_personalrecommendmall();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.PersonalRecommendMall)
  return _msg;
}
inline void CSRspBody::set_allocated_personalrecommendmall(::msg::CSRspPersonalRecommendMall* personalrecommendmall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.personalrecommendmall_);
  }
  if (personalrecommendmall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(personalrecommendmall));
    if (message_arena != submessage_arena) {
      personalrecommendmall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, personalrecommendmall, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.personalrecommendmall_ = personalrecommendmall;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.PersonalRecommendMall)
}

// .msg.CSRspGetMedalChestAward GetMedalChestAward = 670;
inline bool CSRspBody::_internal_has_getmedalchestaward() const {
  return this != internal_default_instance() && _impl_.getmedalchestaward_ != nullptr;
}
inline bool CSRspBody::has_getmedalchestaward() const {
  return _internal_has_getmedalchestaward();
}
inline const ::msg::CSRspGetMedalChestAward& CSRspBody::_internal_getmedalchestaward() const {
  const ::msg::CSRspGetMedalChestAward* p = _impl_.getmedalchestaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspGetMedalChestAward&>(
      ::msg::_CSRspGetMedalChestAward_default_instance_);
}
inline const ::msg::CSRspGetMedalChestAward& CSRspBody::getmedalchestaward() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.GetMedalChestAward)
  return _internal_getmedalchestaward();
}
inline void CSRspBody::unsafe_arena_set_allocated_getmedalchestaward(
    ::msg::CSRspGetMedalChestAward* getmedalchestaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmedalchestaward_);
  }
  _impl_.getmedalchestaward_ = getmedalchestaward;
  if (getmedalchestaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.GetMedalChestAward)
}
inline ::msg::CSRspGetMedalChestAward* CSRspBody::release_getmedalchestaward() {
  
  ::msg::CSRspGetMedalChestAward* temp = _impl_.getmedalchestaward_;
  _impl_.getmedalchestaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspGetMedalChestAward* CSRspBody::unsafe_arena_release_getmedalchestaward() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.GetMedalChestAward)
  
  ::msg::CSRspGetMedalChestAward* temp = _impl_.getmedalchestaward_;
  _impl_.getmedalchestaward_ = nullptr;
  return temp;
}
inline ::msg::CSRspGetMedalChestAward* CSRspBody::_internal_mutable_getmedalchestaward() {
  
  if (_impl_.getmedalchestaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspGetMedalChestAward>(GetArenaForAllocation());
    _impl_.getmedalchestaward_ = p;
  }
  return _impl_.getmedalchestaward_;
}
inline ::msg::CSRspGetMedalChestAward* CSRspBody::mutable_getmedalchestaward() {
  ::msg::CSRspGetMedalChestAward* _msg = _internal_mutable_getmedalchestaward();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.GetMedalChestAward)
  return _msg;
}
inline void CSRspBody::set_allocated_getmedalchestaward(::msg::CSRspGetMedalChestAward* getmedalchestaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.getmedalchestaward_);
  }
  if (getmedalchestaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(getmedalchestaward));
    if (message_arena != submessage_arena) {
      getmedalchestaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getmedalchestaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.getmedalchestaward_ = getmedalchestaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.GetMedalChestAward)
}

// .msg.CSRspSetItemAutoUse SetItemAutoUse = 671;
inline bool CSRspBody::_internal_has_setitemautouse() const {
  return this != internal_default_instance() && _impl_.setitemautouse_ != nullptr;
}
inline bool CSRspBody::has_setitemautouse() const {
  return _internal_has_setitemautouse();
}
inline const ::msg::CSRspSetItemAutoUse& CSRspBody::_internal_setitemautouse() const {
  const ::msg::CSRspSetItemAutoUse* p = _impl_.setitemautouse_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSRspSetItemAutoUse&>(
      ::msg::_CSRspSetItemAutoUse_default_instance_);
}
inline const ::msg::CSRspSetItemAutoUse& CSRspBody::setitemautouse() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBody.SetItemAutoUse)
  return _internal_setitemautouse();
}
inline void CSRspBody::unsafe_arena_set_allocated_setitemautouse(
    ::msg::CSRspSetItemAutoUse* setitemautouse) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setitemautouse_);
  }
  _impl_.setitemautouse_ = setitemautouse;
  if (setitemautouse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspBody.SetItemAutoUse)
}
inline ::msg::CSRspSetItemAutoUse* CSRspBody::release_setitemautouse() {
  
  ::msg::CSRspSetItemAutoUse* temp = _impl_.setitemautouse_;
  _impl_.setitemautouse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSRspSetItemAutoUse* CSRspBody::unsafe_arena_release_setitemautouse() {
  // @@protoc_insertion_point(field_release:msg.CSRspBody.SetItemAutoUse)
  
  ::msg::CSRspSetItemAutoUse* temp = _impl_.setitemautouse_;
  _impl_.setitemautouse_ = nullptr;
  return temp;
}
inline ::msg::CSRspSetItemAutoUse* CSRspBody::_internal_mutable_setitemautouse() {
  
  if (_impl_.setitemautouse_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSRspSetItemAutoUse>(GetArenaForAllocation());
    _impl_.setitemautouse_ = p;
  }
  return _impl_.setitemautouse_;
}
inline ::msg::CSRspSetItemAutoUse* CSRspBody::mutable_setitemautouse() {
  ::msg::CSRspSetItemAutoUse* _msg = _internal_mutable_setitemautouse();
  // @@protoc_insertion_point(field_mutable:msg.CSRspBody.SetItemAutoUse)
  return _msg;
}
inline void CSRspBody::set_allocated_setitemautouse(::msg::CSRspSetItemAutoUse* setitemautouse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setitemautouse_);
  }
  if (setitemautouse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setitemautouse));
    if (message_arena != submessage_arena) {
      setitemautouse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setitemautouse, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setitemautouse_ = setitemautouse;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspBody.SetItemAutoUse)
}

// -------------------------------------------------------------------

// CSNtfBody

// .msg.CSNtfKickOff KickOff = 1;
inline bool CSNtfBody::_internal_has_kickoff() const {
  return this != internal_default_instance() && _impl_.kickoff_ != nullptr;
}
inline bool CSNtfBody::has_kickoff() const {
  return _internal_has_kickoff();
}
inline const ::msg::CSNtfKickOff& CSNtfBody::_internal_kickoff() const {
  const ::msg::CSNtfKickOff* p = _impl_.kickoff_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfKickOff&>(
      ::msg::_CSNtfKickOff_default_instance_);
}
inline const ::msg::CSNtfKickOff& CSNtfBody::kickoff() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.KickOff)
  return _internal_kickoff();
}
inline void CSNtfBody::unsafe_arena_set_allocated_kickoff(
    ::msg::CSNtfKickOff* kickoff) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kickoff_);
  }
  _impl_.kickoff_ = kickoff;
  if (kickoff) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.KickOff)
}
inline ::msg::CSNtfKickOff* CSNtfBody::release_kickoff() {
  
  ::msg::CSNtfKickOff* temp = _impl_.kickoff_;
  _impl_.kickoff_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfKickOff* CSNtfBody::unsafe_arena_release_kickoff() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.KickOff)
  
  ::msg::CSNtfKickOff* temp = _impl_.kickoff_;
  _impl_.kickoff_ = nullptr;
  return temp;
}
inline ::msg::CSNtfKickOff* CSNtfBody::_internal_mutable_kickoff() {
  
  if (_impl_.kickoff_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfKickOff>(GetArenaForAllocation());
    _impl_.kickoff_ = p;
  }
  return _impl_.kickoff_;
}
inline ::msg::CSNtfKickOff* CSNtfBody::mutable_kickoff() {
  ::msg::CSNtfKickOff* _msg = _internal_mutable_kickoff();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.KickOff)
  return _msg;
}
inline void CSNtfBody::set_allocated_kickoff(::msg::CSNtfKickOff* kickoff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kickoff_);
  }
  if (kickoff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kickoff));
    if (message_arena != submessage_arena) {
      kickoff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kickoff, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kickoff_ = kickoff;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.KickOff)
}

// .msg.CSNtfWait NtfWait = 2;
inline bool CSNtfBody::_internal_has_ntfwait() const {
  return this != internal_default_instance() && _impl_.ntfwait_ != nullptr;
}
inline bool CSNtfBody::has_ntfwait() const {
  return _internal_has_ntfwait();
}
inline const ::msg::CSNtfWait& CSNtfBody::_internal_ntfwait() const {
  const ::msg::CSNtfWait* p = _impl_.ntfwait_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfWait&>(
      ::msg::_CSNtfWait_default_instance_);
}
inline const ::msg::CSNtfWait& CSNtfBody::ntfwait() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.NtfWait)
  return _internal_ntfwait();
}
inline void CSNtfBody::unsafe_arena_set_allocated_ntfwait(
    ::msg::CSNtfWait* ntfwait) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ntfwait_);
  }
  _impl_.ntfwait_ = ntfwait;
  if (ntfwait) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.NtfWait)
}
inline ::msg::CSNtfWait* CSNtfBody::release_ntfwait() {
  
  ::msg::CSNtfWait* temp = _impl_.ntfwait_;
  _impl_.ntfwait_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfWait* CSNtfBody::unsafe_arena_release_ntfwait() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.NtfWait)
  
  ::msg::CSNtfWait* temp = _impl_.ntfwait_;
  _impl_.ntfwait_ = nullptr;
  return temp;
}
inline ::msg::CSNtfWait* CSNtfBody::_internal_mutable_ntfwait() {
  
  if (_impl_.ntfwait_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfWait>(GetArenaForAllocation());
    _impl_.ntfwait_ = p;
  }
  return _impl_.ntfwait_;
}
inline ::msg::CSNtfWait* CSNtfBody::mutable_ntfwait() {
  ::msg::CSNtfWait* _msg = _internal_mutable_ntfwait();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.NtfWait)
  return _msg;
}
inline void CSNtfBody::set_allocated_ntfwait(::msg::CSNtfWait* ntfwait) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ntfwait_);
  }
  if (ntfwait) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ntfwait));
    if (message_arena != submessage_arena) {
      ntfwait = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ntfwait, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ntfwait_ = ntfwait;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.NtfWait)
}

// .msg.CSNtfPassDayBody PassDay = 3;
inline bool CSNtfBody::_internal_has_passday() const {
  return this != internal_default_instance() && _impl_.passday_ != nullptr;
}
inline bool CSNtfBody::has_passday() const {
  return _internal_has_passday();
}
inline const ::msg::CSNtfPassDayBody& CSNtfBody::_internal_passday() const {
  const ::msg::CSNtfPassDayBody* p = _impl_.passday_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPassDayBody&>(
      ::msg::_CSNtfPassDayBody_default_instance_);
}
inline const ::msg::CSNtfPassDayBody& CSNtfBody::passday() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PassDay)
  return _internal_passday();
}
inline void CSNtfBody::unsafe_arena_set_allocated_passday(
    ::msg::CSNtfPassDayBody* passday) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passday_);
  }
  _impl_.passday_ = passday;
  if (passday) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PassDay)
}
inline ::msg::CSNtfPassDayBody* CSNtfBody::release_passday() {
  
  ::msg::CSNtfPassDayBody* temp = _impl_.passday_;
  _impl_.passday_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPassDayBody* CSNtfBody::unsafe_arena_release_passday() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PassDay)
  
  ::msg::CSNtfPassDayBody* temp = _impl_.passday_;
  _impl_.passday_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPassDayBody* CSNtfBody::_internal_mutable_passday() {
  
  if (_impl_.passday_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPassDayBody>(GetArenaForAllocation());
    _impl_.passday_ = p;
  }
  return _impl_.passday_;
}
inline ::msg::CSNtfPassDayBody* CSNtfBody::mutable_passday() {
  ::msg::CSNtfPassDayBody* _msg = _internal_mutable_passday();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PassDay)
  return _msg;
}
inline void CSNtfBody::set_allocated_passday(::msg::CSNtfPassDayBody* passday) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passday_);
  }
  if (passday) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(passday));
    if (message_arena != submessage_arena) {
      passday = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, passday, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.passday_ = passday;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PassDay)
}

// .msg.CSNtfPassWeekBody PassWeek = 4;
inline bool CSNtfBody::_internal_has_passweek() const {
  return this != internal_default_instance() && _impl_.passweek_ != nullptr;
}
inline bool CSNtfBody::has_passweek() const {
  return _internal_has_passweek();
}
inline const ::msg::CSNtfPassWeekBody& CSNtfBody::_internal_passweek() const {
  const ::msg::CSNtfPassWeekBody* p = _impl_.passweek_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPassWeekBody&>(
      ::msg::_CSNtfPassWeekBody_default_instance_);
}
inline const ::msg::CSNtfPassWeekBody& CSNtfBody::passweek() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PassWeek)
  return _internal_passweek();
}
inline void CSNtfBody::unsafe_arena_set_allocated_passweek(
    ::msg::CSNtfPassWeekBody* passweek) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passweek_);
  }
  _impl_.passweek_ = passweek;
  if (passweek) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PassWeek)
}
inline ::msg::CSNtfPassWeekBody* CSNtfBody::release_passweek() {
  
  ::msg::CSNtfPassWeekBody* temp = _impl_.passweek_;
  _impl_.passweek_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPassWeekBody* CSNtfBody::unsafe_arena_release_passweek() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PassWeek)
  
  ::msg::CSNtfPassWeekBody* temp = _impl_.passweek_;
  _impl_.passweek_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPassWeekBody* CSNtfBody::_internal_mutable_passweek() {
  
  if (_impl_.passweek_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPassWeekBody>(GetArenaForAllocation());
    _impl_.passweek_ = p;
  }
  return _impl_.passweek_;
}
inline ::msg::CSNtfPassWeekBody* CSNtfBody::mutable_passweek() {
  ::msg::CSNtfPassWeekBody* _msg = _internal_mutable_passweek();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PassWeek)
  return _msg;
}
inline void CSNtfBody::set_allocated_passweek(::msg::CSNtfPassWeekBody* passweek) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passweek_);
  }
  if (passweek) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(passweek));
    if (message_arena != submessage_arena) {
      passweek = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, passweek, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.passweek_ = passweek;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PassWeek)
}

// .msg.CSNtfPassMonthBody PassMonth = 5;
inline bool CSNtfBody::_internal_has_passmonth() const {
  return this != internal_default_instance() && _impl_.passmonth_ != nullptr;
}
inline bool CSNtfBody::has_passmonth() const {
  return _internal_has_passmonth();
}
inline const ::msg::CSNtfPassMonthBody& CSNtfBody::_internal_passmonth() const {
  const ::msg::CSNtfPassMonthBody* p = _impl_.passmonth_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPassMonthBody&>(
      ::msg::_CSNtfPassMonthBody_default_instance_);
}
inline const ::msg::CSNtfPassMonthBody& CSNtfBody::passmonth() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PassMonth)
  return _internal_passmonth();
}
inline void CSNtfBody::unsafe_arena_set_allocated_passmonth(
    ::msg::CSNtfPassMonthBody* passmonth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passmonth_);
  }
  _impl_.passmonth_ = passmonth;
  if (passmonth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PassMonth)
}
inline ::msg::CSNtfPassMonthBody* CSNtfBody::release_passmonth() {
  
  ::msg::CSNtfPassMonthBody* temp = _impl_.passmonth_;
  _impl_.passmonth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPassMonthBody* CSNtfBody::unsafe_arena_release_passmonth() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PassMonth)
  
  ::msg::CSNtfPassMonthBody* temp = _impl_.passmonth_;
  _impl_.passmonth_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPassMonthBody* CSNtfBody::_internal_mutable_passmonth() {
  
  if (_impl_.passmonth_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPassMonthBody>(GetArenaForAllocation());
    _impl_.passmonth_ = p;
  }
  return _impl_.passmonth_;
}
inline ::msg::CSNtfPassMonthBody* CSNtfBody::mutable_passmonth() {
  ::msg::CSNtfPassMonthBody* _msg = _internal_mutable_passmonth();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PassMonth)
  return _msg;
}
inline void CSNtfBody::set_allocated_passmonth(::msg::CSNtfPassMonthBody* passmonth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passmonth_);
  }
  if (passmonth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(passmonth));
    if (message_arena != submessage_arena) {
      passmonth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, passmonth, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.passmonth_ = passmonth;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PassMonth)
}

// .msg.CSNtfWorldChat WorldChat = 6;
inline bool CSNtfBody::_internal_has_worldchat() const {
  return this != internal_default_instance() && _impl_.worldchat_ != nullptr;
}
inline bool CSNtfBody::has_worldchat() const {
  return _internal_has_worldchat();
}
inline const ::msg::CSNtfWorldChat& CSNtfBody::_internal_worldchat() const {
  const ::msg::CSNtfWorldChat* p = _impl_.worldchat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfWorldChat&>(
      ::msg::_CSNtfWorldChat_default_instance_);
}
inline const ::msg::CSNtfWorldChat& CSNtfBody::worldchat() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.WorldChat)
  return _internal_worldchat();
}
inline void CSNtfBody::unsafe_arena_set_allocated_worldchat(
    ::msg::CSNtfWorldChat* worldchat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.worldchat_);
  }
  _impl_.worldchat_ = worldchat;
  if (worldchat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.WorldChat)
}
inline ::msg::CSNtfWorldChat* CSNtfBody::release_worldchat() {
  
  ::msg::CSNtfWorldChat* temp = _impl_.worldchat_;
  _impl_.worldchat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfWorldChat* CSNtfBody::unsafe_arena_release_worldchat() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.WorldChat)
  
  ::msg::CSNtfWorldChat* temp = _impl_.worldchat_;
  _impl_.worldchat_ = nullptr;
  return temp;
}
inline ::msg::CSNtfWorldChat* CSNtfBody::_internal_mutable_worldchat() {
  
  if (_impl_.worldchat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfWorldChat>(GetArenaForAllocation());
    _impl_.worldchat_ = p;
  }
  return _impl_.worldchat_;
}
inline ::msg::CSNtfWorldChat* CSNtfBody::mutable_worldchat() {
  ::msg::CSNtfWorldChat* _msg = _internal_mutable_worldchat();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.WorldChat)
  return _msg;
}
inline void CSNtfBody::set_allocated_worldchat(::msg::CSNtfWorldChat* worldchat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.worldchat_);
  }
  if (worldchat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(worldchat));
    if (message_arena != submessage_arena) {
      worldchat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, worldchat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.worldchat_ = worldchat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.WorldChat)
}

// repeated .msg.CSDTMail Mails = 7;
inline int CSNtfBody::_internal_mails_size() const {
  return _impl_.mails_.size();
}
inline int CSNtfBody::mails_size() const {
  return _internal_mails_size();
}
inline ::msg::CSDTMail* CSNtfBody::mutable_mails(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.Mails)
  return _impl_.mails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMail >*
CSNtfBody::mutable_mails() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSNtfBody.Mails)
  return &_impl_.mails_;
}
inline const ::msg::CSDTMail& CSNtfBody::_internal_mails(int index) const {
  return _impl_.mails_.Get(index);
}
inline const ::msg::CSDTMail& CSNtfBody::mails(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.Mails)
  return _internal_mails(index);
}
inline ::msg::CSDTMail* CSNtfBody::_internal_add_mails() {
  return _impl_.mails_.Add();
}
inline ::msg::CSDTMail* CSNtfBody::add_mails() {
  ::msg::CSDTMail* _add = _internal_add_mails();
  // @@protoc_insertion_point(field_add:msg.CSNtfBody.Mails)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTMail >&
CSNtfBody::mails() const {
  // @@protoc_insertion_point(field_list:msg.CSNtfBody.Mails)
  return _impl_.mails_;
}

// .msg.CSNtfHeadPic HeadPic = 8;
inline bool CSNtfBody::_internal_has_headpic() const {
  return this != internal_default_instance() && _impl_.headpic_ != nullptr;
}
inline bool CSNtfBody::has_headpic() const {
  return _internal_has_headpic();
}
inline const ::msg::CSNtfHeadPic& CSNtfBody::_internal_headpic() const {
  const ::msg::CSNtfHeadPic* p = _impl_.headpic_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfHeadPic&>(
      ::msg::_CSNtfHeadPic_default_instance_);
}
inline const ::msg::CSNtfHeadPic& CSNtfBody::headpic() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.HeadPic)
  return _internal_headpic();
}
inline void CSNtfBody::unsafe_arena_set_allocated_headpic(
    ::msg::CSNtfHeadPic* headpic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.headpic_);
  }
  _impl_.headpic_ = headpic;
  if (headpic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.HeadPic)
}
inline ::msg::CSNtfHeadPic* CSNtfBody::release_headpic() {
  
  ::msg::CSNtfHeadPic* temp = _impl_.headpic_;
  _impl_.headpic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfHeadPic* CSNtfBody::unsafe_arena_release_headpic() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.HeadPic)
  
  ::msg::CSNtfHeadPic* temp = _impl_.headpic_;
  _impl_.headpic_ = nullptr;
  return temp;
}
inline ::msg::CSNtfHeadPic* CSNtfBody::_internal_mutable_headpic() {
  
  if (_impl_.headpic_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfHeadPic>(GetArenaForAllocation());
    _impl_.headpic_ = p;
  }
  return _impl_.headpic_;
}
inline ::msg::CSNtfHeadPic* CSNtfBody::mutable_headpic() {
  ::msg::CSNtfHeadPic* _msg = _internal_mutable_headpic();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.HeadPic)
  return _msg;
}
inline void CSNtfBody::set_allocated_headpic(::msg::CSNtfHeadPic* headpic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.headpic_);
  }
  if (headpic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(headpic));
    if (message_arena != submessage_arena) {
      headpic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, headpic, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.headpic_ = headpic;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.HeadPic)
}

// .msg.CSNtfPvpMatch PvpMatch = 9;
inline bool CSNtfBody::_internal_has_pvpmatch() const {
  return this != internal_default_instance() && _impl_.pvpmatch_ != nullptr;
}
inline bool CSNtfBody::has_pvpmatch() const {
  return _internal_has_pvpmatch();
}
inline const ::msg::CSNtfPvpMatch& CSNtfBody::_internal_pvpmatch() const {
  const ::msg::CSNtfPvpMatch* p = _impl_.pvpmatch_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPvpMatch&>(
      ::msg::_CSNtfPvpMatch_default_instance_);
}
inline const ::msg::CSNtfPvpMatch& CSNtfBody::pvpmatch() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PvpMatch)
  return _internal_pvpmatch();
}
inline void CSNtfBody::unsafe_arena_set_allocated_pvpmatch(
    ::msg::CSNtfPvpMatch* pvpmatch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpmatch_);
  }
  _impl_.pvpmatch_ = pvpmatch;
  if (pvpmatch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PvpMatch)
}
inline ::msg::CSNtfPvpMatch* CSNtfBody::release_pvpmatch() {
  
  ::msg::CSNtfPvpMatch* temp = _impl_.pvpmatch_;
  _impl_.pvpmatch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPvpMatch* CSNtfBody::unsafe_arena_release_pvpmatch() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PvpMatch)
  
  ::msg::CSNtfPvpMatch* temp = _impl_.pvpmatch_;
  _impl_.pvpmatch_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPvpMatch* CSNtfBody::_internal_mutable_pvpmatch() {
  
  if (_impl_.pvpmatch_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPvpMatch>(GetArenaForAllocation());
    _impl_.pvpmatch_ = p;
  }
  return _impl_.pvpmatch_;
}
inline ::msg::CSNtfPvpMatch* CSNtfBody::mutable_pvpmatch() {
  ::msg::CSNtfPvpMatch* _msg = _internal_mutable_pvpmatch();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PvpMatch)
  return _msg;
}
inline void CSNtfBody::set_allocated_pvpmatch(::msg::CSNtfPvpMatch* pvpmatch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpmatch_);
  }
  if (pvpmatch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvpmatch));
    if (message_arena != submessage_arena) {
      pvpmatch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpmatch, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpmatch_ = pvpmatch;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PvpMatch)
}

// .msg.CSNtfPvp Pvp = 10;
inline bool CSNtfBody::_internal_has_pvp() const {
  return this != internal_default_instance() && _impl_.pvp_ != nullptr;
}
inline bool CSNtfBody::has_pvp() const {
  return _internal_has_pvp();
}
inline const ::msg::CSNtfPvp& CSNtfBody::_internal_pvp() const {
  const ::msg::CSNtfPvp* p = _impl_.pvp_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPvp&>(
      ::msg::_CSNtfPvp_default_instance_);
}
inline const ::msg::CSNtfPvp& CSNtfBody::pvp() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.Pvp)
  return _internal_pvp();
}
inline void CSNtfBody::unsafe_arena_set_allocated_pvp(
    ::msg::CSNtfPvp* pvp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvp_);
  }
  _impl_.pvp_ = pvp;
  if (pvp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.Pvp)
}
inline ::msg::CSNtfPvp* CSNtfBody::release_pvp() {
  
  ::msg::CSNtfPvp* temp = _impl_.pvp_;
  _impl_.pvp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPvp* CSNtfBody::unsafe_arena_release_pvp() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.Pvp)
  
  ::msg::CSNtfPvp* temp = _impl_.pvp_;
  _impl_.pvp_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPvp* CSNtfBody::_internal_mutable_pvp() {
  
  if (_impl_.pvp_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPvp>(GetArenaForAllocation());
    _impl_.pvp_ = p;
  }
  return _impl_.pvp_;
}
inline ::msg::CSNtfPvp* CSNtfBody::mutable_pvp() {
  ::msg::CSNtfPvp* _msg = _internal_mutable_pvp();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.Pvp)
  return _msg;
}
inline void CSNtfBody::set_allocated_pvp(::msg::CSNtfPvp* pvp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvp_);
  }
  if (pvp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvp));
    if (message_arena != submessage_arena) {
      pvp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvp_ = pvp;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.Pvp)
}

// .msg.CSNtfPvpMatchCancel PvpMatchCancel = 11;
inline bool CSNtfBody::_internal_has_pvpmatchcancel() const {
  return this != internal_default_instance() && _impl_.pvpmatchcancel_ != nullptr;
}
inline bool CSNtfBody::has_pvpmatchcancel() const {
  return _internal_has_pvpmatchcancel();
}
inline const ::msg::CSNtfPvpMatchCancel& CSNtfBody::_internal_pvpmatchcancel() const {
  const ::msg::CSNtfPvpMatchCancel* p = _impl_.pvpmatchcancel_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPvpMatchCancel&>(
      ::msg::_CSNtfPvpMatchCancel_default_instance_);
}
inline const ::msg::CSNtfPvpMatchCancel& CSNtfBody::pvpmatchcancel() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PvpMatchCancel)
  return _internal_pvpmatchcancel();
}
inline void CSNtfBody::unsafe_arena_set_allocated_pvpmatchcancel(
    ::msg::CSNtfPvpMatchCancel* pvpmatchcancel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpmatchcancel_);
  }
  _impl_.pvpmatchcancel_ = pvpmatchcancel;
  if (pvpmatchcancel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PvpMatchCancel)
}
inline ::msg::CSNtfPvpMatchCancel* CSNtfBody::release_pvpmatchcancel() {
  
  ::msg::CSNtfPvpMatchCancel* temp = _impl_.pvpmatchcancel_;
  _impl_.pvpmatchcancel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPvpMatchCancel* CSNtfBody::unsafe_arena_release_pvpmatchcancel() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PvpMatchCancel)
  
  ::msg::CSNtfPvpMatchCancel* temp = _impl_.pvpmatchcancel_;
  _impl_.pvpmatchcancel_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPvpMatchCancel* CSNtfBody::_internal_mutable_pvpmatchcancel() {
  
  if (_impl_.pvpmatchcancel_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPvpMatchCancel>(GetArenaForAllocation());
    _impl_.pvpmatchcancel_ = p;
  }
  return _impl_.pvpmatchcancel_;
}
inline ::msg::CSNtfPvpMatchCancel* CSNtfBody::mutable_pvpmatchcancel() {
  ::msg::CSNtfPvpMatchCancel* _msg = _internal_mutable_pvpmatchcancel();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PvpMatchCancel)
  return _msg;
}
inline void CSNtfBody::set_allocated_pvpmatchcancel(::msg::CSNtfPvpMatchCancel* pvpmatchcancel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpmatchcancel_);
  }
  if (pvpmatchcancel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvpmatchcancel));
    if (message_arena != submessage_arena) {
      pvpmatchcancel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpmatchcancel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpmatchcancel_ = pvpmatchcancel;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PvpMatchCancel)
}

// .msg.CSNtfPvpStatus PvpStatus = 12;
inline bool CSNtfBody::_internal_has_pvpstatus() const {
  return this != internal_default_instance() && _impl_.pvpstatus_ != nullptr;
}
inline bool CSNtfBody::has_pvpstatus() const {
  return _internal_has_pvpstatus();
}
inline const ::msg::CSNtfPvpStatus& CSNtfBody::_internal_pvpstatus() const {
  const ::msg::CSNtfPvpStatus* p = _impl_.pvpstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPvpStatus&>(
      ::msg::_CSNtfPvpStatus_default_instance_);
}
inline const ::msg::CSNtfPvpStatus& CSNtfBody::pvpstatus() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PvpStatus)
  return _internal_pvpstatus();
}
inline void CSNtfBody::unsafe_arena_set_allocated_pvpstatus(
    ::msg::CSNtfPvpStatus* pvpstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpstatus_);
  }
  _impl_.pvpstatus_ = pvpstatus;
  if (pvpstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PvpStatus)
}
inline ::msg::CSNtfPvpStatus* CSNtfBody::release_pvpstatus() {
  
  ::msg::CSNtfPvpStatus* temp = _impl_.pvpstatus_;
  _impl_.pvpstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPvpStatus* CSNtfBody::unsafe_arena_release_pvpstatus() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PvpStatus)
  
  ::msg::CSNtfPvpStatus* temp = _impl_.pvpstatus_;
  _impl_.pvpstatus_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPvpStatus* CSNtfBody::_internal_mutable_pvpstatus() {
  
  if (_impl_.pvpstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPvpStatus>(GetArenaForAllocation());
    _impl_.pvpstatus_ = p;
  }
  return _impl_.pvpstatus_;
}
inline ::msg::CSNtfPvpStatus* CSNtfBody::mutable_pvpstatus() {
  ::msg::CSNtfPvpStatus* _msg = _internal_mutable_pvpstatus();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PvpStatus)
  return _msg;
}
inline void CSNtfBody::set_allocated_pvpstatus(::msg::CSNtfPvpStatus* pvpstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpstatus_);
  }
  if (pvpstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvpstatus));
    if (message_arena != submessage_arena) {
      pvpstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpstatus, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpstatus_ = pvpstatus;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PvpStatus)
}

// .msg.CSNtfPvpPlayerReady NtfPvpPlayerReady = 13;
inline bool CSNtfBody::_internal_has_ntfpvpplayerready() const {
  return this != internal_default_instance() && _impl_.ntfpvpplayerready_ != nullptr;
}
inline bool CSNtfBody::has_ntfpvpplayerready() const {
  return _internal_has_ntfpvpplayerready();
}
inline const ::msg::CSNtfPvpPlayerReady& CSNtfBody::_internal_ntfpvpplayerready() const {
  const ::msg::CSNtfPvpPlayerReady* p = _impl_.ntfpvpplayerready_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPvpPlayerReady&>(
      ::msg::_CSNtfPvpPlayerReady_default_instance_);
}
inline const ::msg::CSNtfPvpPlayerReady& CSNtfBody::ntfpvpplayerready() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.NtfPvpPlayerReady)
  return _internal_ntfpvpplayerready();
}
inline void CSNtfBody::unsafe_arena_set_allocated_ntfpvpplayerready(
    ::msg::CSNtfPvpPlayerReady* ntfpvpplayerready) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ntfpvpplayerready_);
  }
  _impl_.ntfpvpplayerready_ = ntfpvpplayerready;
  if (ntfpvpplayerready) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.NtfPvpPlayerReady)
}
inline ::msg::CSNtfPvpPlayerReady* CSNtfBody::release_ntfpvpplayerready() {
  
  ::msg::CSNtfPvpPlayerReady* temp = _impl_.ntfpvpplayerready_;
  _impl_.ntfpvpplayerready_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPvpPlayerReady* CSNtfBody::unsafe_arena_release_ntfpvpplayerready() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.NtfPvpPlayerReady)
  
  ::msg::CSNtfPvpPlayerReady* temp = _impl_.ntfpvpplayerready_;
  _impl_.ntfpvpplayerready_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPvpPlayerReady* CSNtfBody::_internal_mutable_ntfpvpplayerready() {
  
  if (_impl_.ntfpvpplayerready_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPvpPlayerReady>(GetArenaForAllocation());
    _impl_.ntfpvpplayerready_ = p;
  }
  return _impl_.ntfpvpplayerready_;
}
inline ::msg::CSNtfPvpPlayerReady* CSNtfBody::mutable_ntfpvpplayerready() {
  ::msg::CSNtfPvpPlayerReady* _msg = _internal_mutable_ntfpvpplayerready();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.NtfPvpPlayerReady)
  return _msg;
}
inline void CSNtfBody::set_allocated_ntfpvpplayerready(::msg::CSNtfPvpPlayerReady* ntfpvpplayerready) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ntfpvpplayerready_);
  }
  if (ntfpvpplayerready) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ntfpvpplayerready));
    if (message_arena != submessage_arena) {
      ntfpvpplayerready = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ntfpvpplayerready, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ntfpvpplayerready_ = ntfpvpplayerready;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.NtfPvpPlayerReady)
}

// .msg.CSNtfPvpBegin PvpBegin = 14;
inline bool CSNtfBody::_internal_has_pvpbegin() const {
  return this != internal_default_instance() && _impl_.pvpbegin_ != nullptr;
}
inline bool CSNtfBody::has_pvpbegin() const {
  return _internal_has_pvpbegin();
}
inline const ::msg::CSNtfPvpBegin& CSNtfBody::_internal_pvpbegin() const {
  const ::msg::CSNtfPvpBegin* p = _impl_.pvpbegin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPvpBegin&>(
      ::msg::_CSNtfPvpBegin_default_instance_);
}
inline const ::msg::CSNtfPvpBegin& CSNtfBody::pvpbegin() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PvpBegin)
  return _internal_pvpbegin();
}
inline void CSNtfBody::unsafe_arena_set_allocated_pvpbegin(
    ::msg::CSNtfPvpBegin* pvpbegin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpbegin_);
  }
  _impl_.pvpbegin_ = pvpbegin;
  if (pvpbegin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PvpBegin)
}
inline ::msg::CSNtfPvpBegin* CSNtfBody::release_pvpbegin() {
  
  ::msg::CSNtfPvpBegin* temp = _impl_.pvpbegin_;
  _impl_.pvpbegin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPvpBegin* CSNtfBody::unsafe_arena_release_pvpbegin() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PvpBegin)
  
  ::msg::CSNtfPvpBegin* temp = _impl_.pvpbegin_;
  _impl_.pvpbegin_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPvpBegin* CSNtfBody::_internal_mutable_pvpbegin() {
  
  if (_impl_.pvpbegin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPvpBegin>(GetArenaForAllocation());
    _impl_.pvpbegin_ = p;
  }
  return _impl_.pvpbegin_;
}
inline ::msg::CSNtfPvpBegin* CSNtfBody::mutable_pvpbegin() {
  ::msg::CSNtfPvpBegin* _msg = _internal_mutable_pvpbegin();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PvpBegin)
  return _msg;
}
inline void CSNtfBody::set_allocated_pvpbegin(::msg::CSNtfPvpBegin* pvpbegin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpbegin_);
  }
  if (pvpbegin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvpbegin));
    if (message_arena != submessage_arena) {
      pvpbegin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpbegin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpbegin_ = pvpbegin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PvpBegin)
}

// .msg.CSNtfPlayerFinish PlayerFinish = 16;
inline bool CSNtfBody::_internal_has_playerfinish() const {
  return this != internal_default_instance() && _impl_.playerfinish_ != nullptr;
}
inline bool CSNtfBody::has_playerfinish() const {
  return _internal_has_playerfinish();
}
inline const ::msg::CSNtfPlayerFinish& CSNtfBody::_internal_playerfinish() const {
  const ::msg::CSNtfPlayerFinish* p = _impl_.playerfinish_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPlayerFinish&>(
      ::msg::_CSNtfPlayerFinish_default_instance_);
}
inline const ::msg::CSNtfPlayerFinish& CSNtfBody::playerfinish() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PlayerFinish)
  return _internal_playerfinish();
}
inline void CSNtfBody::unsafe_arena_set_allocated_playerfinish(
    ::msg::CSNtfPlayerFinish* playerfinish) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerfinish_);
  }
  _impl_.playerfinish_ = playerfinish;
  if (playerfinish) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PlayerFinish)
}
inline ::msg::CSNtfPlayerFinish* CSNtfBody::release_playerfinish() {
  
  ::msg::CSNtfPlayerFinish* temp = _impl_.playerfinish_;
  _impl_.playerfinish_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPlayerFinish* CSNtfBody::unsafe_arena_release_playerfinish() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PlayerFinish)
  
  ::msg::CSNtfPlayerFinish* temp = _impl_.playerfinish_;
  _impl_.playerfinish_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPlayerFinish* CSNtfBody::_internal_mutable_playerfinish() {
  
  if (_impl_.playerfinish_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPlayerFinish>(GetArenaForAllocation());
    _impl_.playerfinish_ = p;
  }
  return _impl_.playerfinish_;
}
inline ::msg::CSNtfPlayerFinish* CSNtfBody::mutable_playerfinish() {
  ::msg::CSNtfPlayerFinish* _msg = _internal_mutable_playerfinish();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PlayerFinish)
  return _msg;
}
inline void CSNtfBody::set_allocated_playerfinish(::msg::CSNtfPlayerFinish* playerfinish) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerfinish_);
  }
  if (playerfinish) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerfinish));
    if (message_arena != submessage_arena) {
      playerfinish = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerfinish, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerfinish_ = playerfinish;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PlayerFinish)
}

// .msg.CSNtfPvpEnd PvpEnd = 17;
inline bool CSNtfBody::_internal_has_pvpend() const {
  return this != internal_default_instance() && _impl_.pvpend_ != nullptr;
}
inline bool CSNtfBody::has_pvpend() const {
  return _internal_has_pvpend();
}
inline const ::msg::CSNtfPvpEnd& CSNtfBody::_internal_pvpend() const {
  const ::msg::CSNtfPvpEnd* p = _impl_.pvpend_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPvpEnd&>(
      ::msg::_CSNtfPvpEnd_default_instance_);
}
inline const ::msg::CSNtfPvpEnd& CSNtfBody::pvpend() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PvpEnd)
  return _internal_pvpend();
}
inline void CSNtfBody::unsafe_arena_set_allocated_pvpend(
    ::msg::CSNtfPvpEnd* pvpend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpend_);
  }
  _impl_.pvpend_ = pvpend;
  if (pvpend) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PvpEnd)
}
inline ::msg::CSNtfPvpEnd* CSNtfBody::release_pvpend() {
  
  ::msg::CSNtfPvpEnd* temp = _impl_.pvpend_;
  _impl_.pvpend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPvpEnd* CSNtfBody::unsafe_arena_release_pvpend() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PvpEnd)
  
  ::msg::CSNtfPvpEnd* temp = _impl_.pvpend_;
  _impl_.pvpend_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPvpEnd* CSNtfBody::_internal_mutable_pvpend() {
  
  if (_impl_.pvpend_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPvpEnd>(GetArenaForAllocation());
    _impl_.pvpend_ = p;
  }
  return _impl_.pvpend_;
}
inline ::msg::CSNtfPvpEnd* CSNtfBody::mutable_pvpend() {
  ::msg::CSNtfPvpEnd* _msg = _internal_mutable_pvpend();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PvpEnd)
  return _msg;
}
inline void CSNtfBody::set_allocated_pvpend(::msg::CSNtfPvpEnd* pvpend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpend_);
  }
  if (pvpend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvpend));
    if (message_arena != submessage_arena) {
      pvpend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpend, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpend_ = pvpend;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PvpEnd)
}

// .msg.CSNtfMarquee Marquee = 18;
inline bool CSNtfBody::_internal_has_marquee() const {
  return this != internal_default_instance() && _impl_.marquee_ != nullptr;
}
inline bool CSNtfBody::has_marquee() const {
  return _internal_has_marquee();
}
inline const ::msg::CSNtfMarquee& CSNtfBody::_internal_marquee() const {
  const ::msg::CSNtfMarquee* p = _impl_.marquee_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfMarquee&>(
      ::msg::_CSNtfMarquee_default_instance_);
}
inline const ::msg::CSNtfMarquee& CSNtfBody::marquee() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.Marquee)
  return _internal_marquee();
}
inline void CSNtfBody::unsafe_arena_set_allocated_marquee(
    ::msg::CSNtfMarquee* marquee) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.marquee_);
  }
  _impl_.marquee_ = marquee;
  if (marquee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.Marquee)
}
inline ::msg::CSNtfMarquee* CSNtfBody::release_marquee() {
  
  ::msg::CSNtfMarquee* temp = _impl_.marquee_;
  _impl_.marquee_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfMarquee* CSNtfBody::unsafe_arena_release_marquee() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.Marquee)
  
  ::msg::CSNtfMarquee* temp = _impl_.marquee_;
  _impl_.marquee_ = nullptr;
  return temp;
}
inline ::msg::CSNtfMarquee* CSNtfBody::_internal_mutable_marquee() {
  
  if (_impl_.marquee_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfMarquee>(GetArenaForAllocation());
    _impl_.marquee_ = p;
  }
  return _impl_.marquee_;
}
inline ::msg::CSNtfMarquee* CSNtfBody::mutable_marquee() {
  ::msg::CSNtfMarquee* _msg = _internal_mutable_marquee();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.Marquee)
  return _msg;
}
inline void CSNtfBody::set_allocated_marquee(::msg::CSNtfMarquee* marquee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.marquee_);
  }
  if (marquee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(marquee));
    if (message_arena != submessage_arena) {
      marquee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, marquee, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.marquee_ = marquee;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.Marquee)
}

// .msg.CSNtfRemoveMarquee RemoveMarquee = 19;
inline bool CSNtfBody::_internal_has_removemarquee() const {
  return this != internal_default_instance() && _impl_.removemarquee_ != nullptr;
}
inline bool CSNtfBody::has_removemarquee() const {
  return _internal_has_removemarquee();
}
inline const ::msg::CSNtfRemoveMarquee& CSNtfBody::_internal_removemarquee() const {
  const ::msg::CSNtfRemoveMarquee* p = _impl_.removemarquee_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfRemoveMarquee&>(
      ::msg::_CSNtfRemoveMarquee_default_instance_);
}
inline const ::msg::CSNtfRemoveMarquee& CSNtfBody::removemarquee() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.RemoveMarquee)
  return _internal_removemarquee();
}
inline void CSNtfBody::unsafe_arena_set_allocated_removemarquee(
    ::msg::CSNtfRemoveMarquee* removemarquee) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removemarquee_);
  }
  _impl_.removemarquee_ = removemarquee;
  if (removemarquee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.RemoveMarquee)
}
inline ::msg::CSNtfRemoveMarquee* CSNtfBody::release_removemarquee() {
  
  ::msg::CSNtfRemoveMarquee* temp = _impl_.removemarquee_;
  _impl_.removemarquee_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfRemoveMarquee* CSNtfBody::unsafe_arena_release_removemarquee() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.RemoveMarquee)
  
  ::msg::CSNtfRemoveMarquee* temp = _impl_.removemarquee_;
  _impl_.removemarquee_ = nullptr;
  return temp;
}
inline ::msg::CSNtfRemoveMarquee* CSNtfBody::_internal_mutable_removemarquee() {
  
  if (_impl_.removemarquee_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfRemoveMarquee>(GetArenaForAllocation());
    _impl_.removemarquee_ = p;
  }
  return _impl_.removemarquee_;
}
inline ::msg::CSNtfRemoveMarquee* CSNtfBody::mutable_removemarquee() {
  ::msg::CSNtfRemoveMarquee* _msg = _internal_mutable_removemarquee();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.RemoveMarquee)
  return _msg;
}
inline void CSNtfBody::set_allocated_removemarquee(::msg::CSNtfRemoveMarquee* removemarquee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removemarquee_);
  }
  if (removemarquee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removemarquee));
    if (message_arena != submessage_arena) {
      removemarquee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removemarquee, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.removemarquee_ = removemarquee;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.RemoveMarquee)
}

// .msg.CSNtfLoadingProgress LoadingProgress = 20;
inline bool CSNtfBody::_internal_has_loadingprogress() const {
  return this != internal_default_instance() && _impl_.loadingprogress_ != nullptr;
}
inline bool CSNtfBody::has_loadingprogress() const {
  return _internal_has_loadingprogress();
}
inline const ::msg::CSNtfLoadingProgress& CSNtfBody::_internal_loadingprogress() const {
  const ::msg::CSNtfLoadingProgress* p = _impl_.loadingprogress_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfLoadingProgress&>(
      ::msg::_CSNtfLoadingProgress_default_instance_);
}
inline const ::msg::CSNtfLoadingProgress& CSNtfBody::loadingprogress() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.LoadingProgress)
  return _internal_loadingprogress();
}
inline void CSNtfBody::unsafe_arena_set_allocated_loadingprogress(
    ::msg::CSNtfLoadingProgress* loadingprogress) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loadingprogress_);
  }
  _impl_.loadingprogress_ = loadingprogress;
  if (loadingprogress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.LoadingProgress)
}
inline ::msg::CSNtfLoadingProgress* CSNtfBody::release_loadingprogress() {
  
  ::msg::CSNtfLoadingProgress* temp = _impl_.loadingprogress_;
  _impl_.loadingprogress_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfLoadingProgress* CSNtfBody::unsafe_arena_release_loadingprogress() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.LoadingProgress)
  
  ::msg::CSNtfLoadingProgress* temp = _impl_.loadingprogress_;
  _impl_.loadingprogress_ = nullptr;
  return temp;
}
inline ::msg::CSNtfLoadingProgress* CSNtfBody::_internal_mutable_loadingprogress() {
  
  if (_impl_.loadingprogress_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfLoadingProgress>(GetArenaForAllocation());
    _impl_.loadingprogress_ = p;
  }
  return _impl_.loadingprogress_;
}
inline ::msg::CSNtfLoadingProgress* CSNtfBody::mutable_loadingprogress() {
  ::msg::CSNtfLoadingProgress* _msg = _internal_mutable_loadingprogress();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.LoadingProgress)
  return _msg;
}
inline void CSNtfBody::set_allocated_loadingprogress(::msg::CSNtfLoadingProgress* loadingprogress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loadingprogress_);
  }
  if (loadingprogress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loadingprogress));
    if (message_arena != submessage_arena) {
      loadingprogress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loadingprogress, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.loadingprogress_ = loadingprogress;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.LoadingProgress)
}

// .msg.CSNtfPvpChat PvpChat = 21;
inline bool CSNtfBody::_internal_has_pvpchat() const {
  return this != internal_default_instance() && _impl_.pvpchat_ != nullptr;
}
inline bool CSNtfBody::has_pvpchat() const {
  return _internal_has_pvpchat();
}
inline const ::msg::CSNtfPvpChat& CSNtfBody::_internal_pvpchat() const {
  const ::msg::CSNtfPvpChat* p = _impl_.pvpchat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPvpChat&>(
      ::msg::_CSNtfPvpChat_default_instance_);
}
inline const ::msg::CSNtfPvpChat& CSNtfBody::pvpchat() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PvpChat)
  return _internal_pvpchat();
}
inline void CSNtfBody::unsafe_arena_set_allocated_pvpchat(
    ::msg::CSNtfPvpChat* pvpchat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpchat_);
  }
  _impl_.pvpchat_ = pvpchat;
  if (pvpchat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PvpChat)
}
inline ::msg::CSNtfPvpChat* CSNtfBody::release_pvpchat() {
  
  ::msg::CSNtfPvpChat* temp = _impl_.pvpchat_;
  _impl_.pvpchat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPvpChat* CSNtfBody::unsafe_arena_release_pvpchat() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PvpChat)
  
  ::msg::CSNtfPvpChat* temp = _impl_.pvpchat_;
  _impl_.pvpchat_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPvpChat* CSNtfBody::_internal_mutable_pvpchat() {
  
  if (_impl_.pvpchat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPvpChat>(GetArenaForAllocation());
    _impl_.pvpchat_ = p;
  }
  return _impl_.pvpchat_;
}
inline ::msg::CSNtfPvpChat* CSNtfBody::mutable_pvpchat() {
  ::msg::CSNtfPvpChat* _msg = _internal_mutable_pvpchat();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PvpChat)
  return _msg;
}
inline void CSNtfBody::set_allocated_pvpchat(::msg::CSNtfPvpChat* pvpchat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpchat_);
  }
  if (pvpchat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvpchat));
    if (message_arena != submessage_arena) {
      pvpchat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpchat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpchat_ = pvpchat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PvpChat)
}

// .msg.CSNtfReload Reload = 22;
inline bool CSNtfBody::_internal_has_reload() const {
  return this != internal_default_instance() && _impl_.reload_ != nullptr;
}
inline bool CSNtfBody::has_reload() const {
  return _internal_has_reload();
}
inline const ::msg::CSNtfReload& CSNtfBody::_internal_reload() const {
  const ::msg::CSNtfReload* p = _impl_.reload_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfReload&>(
      ::msg::_CSNtfReload_default_instance_);
}
inline const ::msg::CSNtfReload& CSNtfBody::reload() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.Reload)
  return _internal_reload();
}
inline void CSNtfBody::unsafe_arena_set_allocated_reload(
    ::msg::CSNtfReload* reload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reload_);
  }
  _impl_.reload_ = reload;
  if (reload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.Reload)
}
inline ::msg::CSNtfReload* CSNtfBody::release_reload() {
  
  ::msg::CSNtfReload* temp = _impl_.reload_;
  _impl_.reload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfReload* CSNtfBody::unsafe_arena_release_reload() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.Reload)
  
  ::msg::CSNtfReload* temp = _impl_.reload_;
  _impl_.reload_ = nullptr;
  return temp;
}
inline ::msg::CSNtfReload* CSNtfBody::_internal_mutable_reload() {
  
  if (_impl_.reload_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfReload>(GetArenaForAllocation());
    _impl_.reload_ = p;
  }
  return _impl_.reload_;
}
inline ::msg::CSNtfReload* CSNtfBody::mutable_reload() {
  ::msg::CSNtfReload* _msg = _internal_mutable_reload();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.Reload)
  return _msg;
}
inline void CSNtfBody::set_allocated_reload(::msg::CSNtfReload* reload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reload_);
  }
  if (reload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reload));
    if (message_arena != submessage_arena) {
      reload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reload, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.reload_ = reload;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.Reload)
}

// .msg.CSNtfPay Pay = 23;
inline bool CSNtfBody::_internal_has_pay() const {
  return this != internal_default_instance() && _impl_.pay_ != nullptr;
}
inline bool CSNtfBody::has_pay() const {
  return _internal_has_pay();
}
inline const ::msg::CSNtfPay& CSNtfBody::_internal_pay() const {
  const ::msg::CSNtfPay* p = _impl_.pay_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPay&>(
      ::msg::_CSNtfPay_default_instance_);
}
inline const ::msg::CSNtfPay& CSNtfBody::pay() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.Pay)
  return _internal_pay();
}
inline void CSNtfBody::unsafe_arena_set_allocated_pay(
    ::msg::CSNtfPay* pay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pay_);
  }
  _impl_.pay_ = pay;
  if (pay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.Pay)
}
inline ::msg::CSNtfPay* CSNtfBody::release_pay() {
  
  ::msg::CSNtfPay* temp = _impl_.pay_;
  _impl_.pay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPay* CSNtfBody::unsafe_arena_release_pay() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.Pay)
  
  ::msg::CSNtfPay* temp = _impl_.pay_;
  _impl_.pay_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPay* CSNtfBody::_internal_mutable_pay() {
  
  if (_impl_.pay_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPay>(GetArenaForAllocation());
    _impl_.pay_ = p;
  }
  return _impl_.pay_;
}
inline ::msg::CSNtfPay* CSNtfBody::mutable_pay() {
  ::msg::CSNtfPay* _msg = _internal_mutable_pay();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.Pay)
  return _msg;
}
inline void CSNtfBody::set_allocated_pay(::msg::CSNtfPay* pay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pay_);
  }
  if (pay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pay));
    if (message_arena != submessage_arena) {
      pay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pay, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pay_ = pay;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.Pay)
}

// .msg.CSNtfChat Chat = 24;
inline bool CSNtfBody::_internal_has_chat() const {
  return this != internal_default_instance() && _impl_.chat_ != nullptr;
}
inline bool CSNtfBody::has_chat() const {
  return _internal_has_chat();
}
inline const ::msg::CSNtfChat& CSNtfBody::_internal_chat() const {
  const ::msg::CSNtfChat* p = _impl_.chat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfChat&>(
      ::msg::_CSNtfChat_default_instance_);
}
inline const ::msg::CSNtfChat& CSNtfBody::chat() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.Chat)
  return _internal_chat();
}
inline void CSNtfBody::unsafe_arena_set_allocated_chat(
    ::msg::CSNtfChat* chat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chat_);
  }
  _impl_.chat_ = chat;
  if (chat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.Chat)
}
inline ::msg::CSNtfChat* CSNtfBody::release_chat() {
  
  ::msg::CSNtfChat* temp = _impl_.chat_;
  _impl_.chat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfChat* CSNtfBody::unsafe_arena_release_chat() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.Chat)
  
  ::msg::CSNtfChat* temp = _impl_.chat_;
  _impl_.chat_ = nullptr;
  return temp;
}
inline ::msg::CSNtfChat* CSNtfBody::_internal_mutable_chat() {
  
  if (_impl_.chat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfChat>(GetArenaForAllocation());
    _impl_.chat_ = p;
  }
  return _impl_.chat_;
}
inline ::msg::CSNtfChat* CSNtfBody::mutable_chat() {
  ::msg::CSNtfChat* _msg = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.Chat)
  return _msg;
}
inline void CSNtfBody::set_allocated_chat(::msg::CSNtfChat* chat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chat_);
  }
  if (chat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat));
    if (message_arena != submessage_arena) {
      chat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chat_ = chat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.Chat)
}

// .msg.CSNtfFollowList FollowList = 25;
inline bool CSNtfBody::_internal_has_followlist() const {
  return this != internal_default_instance() && _impl_.followlist_ != nullptr;
}
inline bool CSNtfBody::has_followlist() const {
  return _internal_has_followlist();
}
inline const ::msg::CSNtfFollowList& CSNtfBody::_internal_followlist() const {
  const ::msg::CSNtfFollowList* p = _impl_.followlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfFollowList&>(
      ::msg::_CSNtfFollowList_default_instance_);
}
inline const ::msg::CSNtfFollowList& CSNtfBody::followlist() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.FollowList)
  return _internal_followlist();
}
inline void CSNtfBody::unsafe_arena_set_allocated_followlist(
    ::msg::CSNtfFollowList* followlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.followlist_);
  }
  _impl_.followlist_ = followlist;
  if (followlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.FollowList)
}
inline ::msg::CSNtfFollowList* CSNtfBody::release_followlist() {
  
  ::msg::CSNtfFollowList* temp = _impl_.followlist_;
  _impl_.followlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfFollowList* CSNtfBody::unsafe_arena_release_followlist() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.FollowList)
  
  ::msg::CSNtfFollowList* temp = _impl_.followlist_;
  _impl_.followlist_ = nullptr;
  return temp;
}
inline ::msg::CSNtfFollowList* CSNtfBody::_internal_mutable_followlist() {
  
  if (_impl_.followlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfFollowList>(GetArenaForAllocation());
    _impl_.followlist_ = p;
  }
  return _impl_.followlist_;
}
inline ::msg::CSNtfFollowList* CSNtfBody::mutable_followlist() {
  ::msg::CSNtfFollowList* _msg = _internal_mutable_followlist();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.FollowList)
  return _msg;
}
inline void CSNtfBody::set_allocated_followlist(::msg::CSNtfFollowList* followlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.followlist_);
  }
  if (followlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(followlist));
    if (message_arena != submessage_arena) {
      followlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, followlist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.followlist_ = followlist;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.FollowList)
}

// .msg.CSNtfNewFollower NewFollower = 26;
inline bool CSNtfBody::_internal_has_newfollower() const {
  return this != internal_default_instance() && _impl_.newfollower_ != nullptr;
}
inline bool CSNtfBody::has_newfollower() const {
  return _internal_has_newfollower();
}
inline const ::msg::CSNtfNewFollower& CSNtfBody::_internal_newfollower() const {
  const ::msg::CSNtfNewFollower* p = _impl_.newfollower_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfNewFollower&>(
      ::msg::_CSNtfNewFollower_default_instance_);
}
inline const ::msg::CSNtfNewFollower& CSNtfBody::newfollower() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.NewFollower)
  return _internal_newfollower();
}
inline void CSNtfBody::unsafe_arena_set_allocated_newfollower(
    ::msg::CSNtfNewFollower* newfollower) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newfollower_);
  }
  _impl_.newfollower_ = newfollower;
  if (newfollower) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.NewFollower)
}
inline ::msg::CSNtfNewFollower* CSNtfBody::release_newfollower() {
  
  ::msg::CSNtfNewFollower* temp = _impl_.newfollower_;
  _impl_.newfollower_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfNewFollower* CSNtfBody::unsafe_arena_release_newfollower() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.NewFollower)
  
  ::msg::CSNtfNewFollower* temp = _impl_.newfollower_;
  _impl_.newfollower_ = nullptr;
  return temp;
}
inline ::msg::CSNtfNewFollower* CSNtfBody::_internal_mutable_newfollower() {
  
  if (_impl_.newfollower_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfNewFollower>(GetArenaForAllocation());
    _impl_.newfollower_ = p;
  }
  return _impl_.newfollower_;
}
inline ::msg::CSNtfNewFollower* CSNtfBody::mutable_newfollower() {
  ::msg::CSNtfNewFollower* _msg = _internal_mutable_newfollower();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.NewFollower)
  return _msg;
}
inline void CSNtfBody::set_allocated_newfollower(::msg::CSNtfNewFollower* newfollower) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newfollower_);
  }
  if (newfollower) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newfollower));
    if (message_arena != submessage_arena) {
      newfollower = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newfollower, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newfollower_ = newfollower;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.NewFollower)
}

// .msg.CSNtfLostFollower LostFollower = 27;
inline bool CSNtfBody::_internal_has_lostfollower() const {
  return this != internal_default_instance() && _impl_.lostfollower_ != nullptr;
}
inline bool CSNtfBody::has_lostfollower() const {
  return _internal_has_lostfollower();
}
inline const ::msg::CSNtfLostFollower& CSNtfBody::_internal_lostfollower() const {
  const ::msg::CSNtfLostFollower* p = _impl_.lostfollower_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfLostFollower&>(
      ::msg::_CSNtfLostFollower_default_instance_);
}
inline const ::msg::CSNtfLostFollower& CSNtfBody::lostfollower() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.LostFollower)
  return _internal_lostfollower();
}
inline void CSNtfBody::unsafe_arena_set_allocated_lostfollower(
    ::msg::CSNtfLostFollower* lostfollower) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lostfollower_);
  }
  _impl_.lostfollower_ = lostfollower;
  if (lostfollower) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.LostFollower)
}
inline ::msg::CSNtfLostFollower* CSNtfBody::release_lostfollower() {
  
  ::msg::CSNtfLostFollower* temp = _impl_.lostfollower_;
  _impl_.lostfollower_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfLostFollower* CSNtfBody::unsafe_arena_release_lostfollower() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.LostFollower)
  
  ::msg::CSNtfLostFollower* temp = _impl_.lostfollower_;
  _impl_.lostfollower_ = nullptr;
  return temp;
}
inline ::msg::CSNtfLostFollower* CSNtfBody::_internal_mutable_lostfollower() {
  
  if (_impl_.lostfollower_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfLostFollower>(GetArenaForAllocation());
    _impl_.lostfollower_ = p;
  }
  return _impl_.lostfollower_;
}
inline ::msg::CSNtfLostFollower* CSNtfBody::mutable_lostfollower() {
  ::msg::CSNtfLostFollower* _msg = _internal_mutable_lostfollower();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.LostFollower)
  return _msg;
}
inline void CSNtfBody::set_allocated_lostfollower(::msg::CSNtfLostFollower* lostfollower) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lostfollower_);
  }
  if (lostfollower) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lostfollower));
    if (message_arena != submessage_arena) {
      lostfollower = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lostfollower, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lostfollower_ = lostfollower;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.LostFollower)
}

// .msg.CSNtfInviteJoinTeam InviteJoinTeam = 28;
inline bool CSNtfBody::_internal_has_invitejointeam() const {
  return this != internal_default_instance() && _impl_.invitejointeam_ != nullptr;
}
inline bool CSNtfBody::has_invitejointeam() const {
  return _internal_has_invitejointeam();
}
inline const ::msg::CSNtfInviteJoinTeam& CSNtfBody::_internal_invitejointeam() const {
  const ::msg::CSNtfInviteJoinTeam* p = _impl_.invitejointeam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfInviteJoinTeam&>(
      ::msg::_CSNtfInviteJoinTeam_default_instance_);
}
inline const ::msg::CSNtfInviteJoinTeam& CSNtfBody::invitejointeam() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.InviteJoinTeam)
  return _internal_invitejointeam();
}
inline void CSNtfBody::unsafe_arena_set_allocated_invitejointeam(
    ::msg::CSNtfInviteJoinTeam* invitejointeam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invitejointeam_);
  }
  _impl_.invitejointeam_ = invitejointeam;
  if (invitejointeam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.InviteJoinTeam)
}
inline ::msg::CSNtfInviteJoinTeam* CSNtfBody::release_invitejointeam() {
  
  ::msg::CSNtfInviteJoinTeam* temp = _impl_.invitejointeam_;
  _impl_.invitejointeam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfInviteJoinTeam* CSNtfBody::unsafe_arena_release_invitejointeam() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.InviteJoinTeam)
  
  ::msg::CSNtfInviteJoinTeam* temp = _impl_.invitejointeam_;
  _impl_.invitejointeam_ = nullptr;
  return temp;
}
inline ::msg::CSNtfInviteJoinTeam* CSNtfBody::_internal_mutable_invitejointeam() {
  
  if (_impl_.invitejointeam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfInviteJoinTeam>(GetArenaForAllocation());
    _impl_.invitejointeam_ = p;
  }
  return _impl_.invitejointeam_;
}
inline ::msg::CSNtfInviteJoinTeam* CSNtfBody::mutable_invitejointeam() {
  ::msg::CSNtfInviteJoinTeam* _msg = _internal_mutable_invitejointeam();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.InviteJoinTeam)
  return _msg;
}
inline void CSNtfBody::set_allocated_invitejointeam(::msg::CSNtfInviteJoinTeam* invitejointeam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invitejointeam_);
  }
  if (invitejointeam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invitejointeam));
    if (message_arena != submessage_arena) {
      invitejointeam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invitejointeam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.invitejointeam_ = invitejointeam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.InviteJoinTeam)
}

// .msg.CSNtfPlayerJoinTeam PlayerJoinTeam = 29;
inline bool CSNtfBody::_internal_has_playerjointeam() const {
  return this != internal_default_instance() && _impl_.playerjointeam_ != nullptr;
}
inline bool CSNtfBody::has_playerjointeam() const {
  return _internal_has_playerjointeam();
}
inline const ::msg::CSNtfPlayerJoinTeam& CSNtfBody::_internal_playerjointeam() const {
  const ::msg::CSNtfPlayerJoinTeam* p = _impl_.playerjointeam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPlayerJoinTeam&>(
      ::msg::_CSNtfPlayerJoinTeam_default_instance_);
}
inline const ::msg::CSNtfPlayerJoinTeam& CSNtfBody::playerjointeam() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PlayerJoinTeam)
  return _internal_playerjointeam();
}
inline void CSNtfBody::unsafe_arena_set_allocated_playerjointeam(
    ::msg::CSNtfPlayerJoinTeam* playerjointeam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerjointeam_);
  }
  _impl_.playerjointeam_ = playerjointeam;
  if (playerjointeam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PlayerJoinTeam)
}
inline ::msg::CSNtfPlayerJoinTeam* CSNtfBody::release_playerjointeam() {
  
  ::msg::CSNtfPlayerJoinTeam* temp = _impl_.playerjointeam_;
  _impl_.playerjointeam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPlayerJoinTeam* CSNtfBody::unsafe_arena_release_playerjointeam() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PlayerJoinTeam)
  
  ::msg::CSNtfPlayerJoinTeam* temp = _impl_.playerjointeam_;
  _impl_.playerjointeam_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPlayerJoinTeam* CSNtfBody::_internal_mutable_playerjointeam() {
  
  if (_impl_.playerjointeam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPlayerJoinTeam>(GetArenaForAllocation());
    _impl_.playerjointeam_ = p;
  }
  return _impl_.playerjointeam_;
}
inline ::msg::CSNtfPlayerJoinTeam* CSNtfBody::mutable_playerjointeam() {
  ::msg::CSNtfPlayerJoinTeam* _msg = _internal_mutable_playerjointeam();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PlayerJoinTeam)
  return _msg;
}
inline void CSNtfBody::set_allocated_playerjointeam(::msg::CSNtfPlayerJoinTeam* playerjointeam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerjointeam_);
  }
  if (playerjointeam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerjointeam));
    if (message_arena != submessage_arena) {
      playerjointeam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerjointeam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerjointeam_ = playerjointeam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PlayerJoinTeam)
}

// .msg.CSNtfPlayerLeaveTeam PlayerLeaveTeam = 30;
inline bool CSNtfBody::_internal_has_playerleaveteam() const {
  return this != internal_default_instance() && _impl_.playerleaveteam_ != nullptr;
}
inline bool CSNtfBody::has_playerleaveteam() const {
  return _internal_has_playerleaveteam();
}
inline const ::msg::CSNtfPlayerLeaveTeam& CSNtfBody::_internal_playerleaveteam() const {
  const ::msg::CSNtfPlayerLeaveTeam* p = _impl_.playerleaveteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPlayerLeaveTeam&>(
      ::msg::_CSNtfPlayerLeaveTeam_default_instance_);
}
inline const ::msg::CSNtfPlayerLeaveTeam& CSNtfBody::playerleaveteam() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PlayerLeaveTeam)
  return _internal_playerleaveteam();
}
inline void CSNtfBody::unsafe_arena_set_allocated_playerleaveteam(
    ::msg::CSNtfPlayerLeaveTeam* playerleaveteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerleaveteam_);
  }
  _impl_.playerleaveteam_ = playerleaveteam;
  if (playerleaveteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PlayerLeaveTeam)
}
inline ::msg::CSNtfPlayerLeaveTeam* CSNtfBody::release_playerleaveteam() {
  
  ::msg::CSNtfPlayerLeaveTeam* temp = _impl_.playerleaveteam_;
  _impl_.playerleaveteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPlayerLeaveTeam* CSNtfBody::unsafe_arena_release_playerleaveteam() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PlayerLeaveTeam)
  
  ::msg::CSNtfPlayerLeaveTeam* temp = _impl_.playerleaveteam_;
  _impl_.playerleaveteam_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPlayerLeaveTeam* CSNtfBody::_internal_mutable_playerleaveteam() {
  
  if (_impl_.playerleaveteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPlayerLeaveTeam>(GetArenaForAllocation());
    _impl_.playerleaveteam_ = p;
  }
  return _impl_.playerleaveteam_;
}
inline ::msg::CSNtfPlayerLeaveTeam* CSNtfBody::mutable_playerleaveteam() {
  ::msg::CSNtfPlayerLeaveTeam* _msg = _internal_mutable_playerleaveteam();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PlayerLeaveTeam)
  return _msg;
}
inline void CSNtfBody::set_allocated_playerleaveteam(::msg::CSNtfPlayerLeaveTeam* playerleaveteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerleaveteam_);
  }
  if (playerleaveteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerleaveteam));
    if (message_arena != submessage_arena) {
      playerleaveteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerleaveteam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerleaveteam_ = playerleaveteam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PlayerLeaveTeam)
}

// .msg.CSNtfKickOffTeamPlayer KickOffTeamPlayer = 31;
inline bool CSNtfBody::_internal_has_kickoffteamplayer() const {
  return this != internal_default_instance() && _impl_.kickoffteamplayer_ != nullptr;
}
inline bool CSNtfBody::has_kickoffteamplayer() const {
  return _internal_has_kickoffteamplayer();
}
inline const ::msg::CSNtfKickOffTeamPlayer& CSNtfBody::_internal_kickoffteamplayer() const {
  const ::msg::CSNtfKickOffTeamPlayer* p = _impl_.kickoffteamplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfKickOffTeamPlayer&>(
      ::msg::_CSNtfKickOffTeamPlayer_default_instance_);
}
inline const ::msg::CSNtfKickOffTeamPlayer& CSNtfBody::kickoffteamplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.KickOffTeamPlayer)
  return _internal_kickoffteamplayer();
}
inline void CSNtfBody::unsafe_arena_set_allocated_kickoffteamplayer(
    ::msg::CSNtfKickOffTeamPlayer* kickoffteamplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kickoffteamplayer_);
  }
  _impl_.kickoffteamplayer_ = kickoffteamplayer;
  if (kickoffteamplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.KickOffTeamPlayer)
}
inline ::msg::CSNtfKickOffTeamPlayer* CSNtfBody::release_kickoffteamplayer() {
  
  ::msg::CSNtfKickOffTeamPlayer* temp = _impl_.kickoffteamplayer_;
  _impl_.kickoffteamplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfKickOffTeamPlayer* CSNtfBody::unsafe_arena_release_kickoffteamplayer() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.KickOffTeamPlayer)
  
  ::msg::CSNtfKickOffTeamPlayer* temp = _impl_.kickoffteamplayer_;
  _impl_.kickoffteamplayer_ = nullptr;
  return temp;
}
inline ::msg::CSNtfKickOffTeamPlayer* CSNtfBody::_internal_mutable_kickoffteamplayer() {
  
  if (_impl_.kickoffteamplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfKickOffTeamPlayer>(GetArenaForAllocation());
    _impl_.kickoffteamplayer_ = p;
  }
  return _impl_.kickoffteamplayer_;
}
inline ::msg::CSNtfKickOffTeamPlayer* CSNtfBody::mutable_kickoffteamplayer() {
  ::msg::CSNtfKickOffTeamPlayer* _msg = _internal_mutable_kickoffteamplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.KickOffTeamPlayer)
  return _msg;
}
inline void CSNtfBody::set_allocated_kickoffteamplayer(::msg::CSNtfKickOffTeamPlayer* kickoffteamplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kickoffteamplayer_);
  }
  if (kickoffteamplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kickoffteamplayer));
    if (message_arena != submessage_arena) {
      kickoffteamplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kickoffteamplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kickoffteamplayer_ = kickoffteamplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.KickOffTeamPlayer)
}

// .msg.CSNtfTeamMsg TeamMsg = 32;
inline bool CSNtfBody::_internal_has_teammsg() const {
  return this != internal_default_instance() && _impl_.teammsg_ != nullptr;
}
inline bool CSNtfBody::has_teammsg() const {
  return _internal_has_teammsg();
}
inline const ::msg::CSNtfTeamMsg& CSNtfBody::_internal_teammsg() const {
  const ::msg::CSNtfTeamMsg* p = _impl_.teammsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfTeamMsg&>(
      ::msg::_CSNtfTeamMsg_default_instance_);
}
inline const ::msg::CSNtfTeamMsg& CSNtfBody::teammsg() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.TeamMsg)
  return _internal_teammsg();
}
inline void CSNtfBody::unsafe_arena_set_allocated_teammsg(
    ::msg::CSNtfTeamMsg* teammsg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teammsg_);
  }
  _impl_.teammsg_ = teammsg;
  if (teammsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.TeamMsg)
}
inline ::msg::CSNtfTeamMsg* CSNtfBody::release_teammsg() {
  
  ::msg::CSNtfTeamMsg* temp = _impl_.teammsg_;
  _impl_.teammsg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfTeamMsg* CSNtfBody::unsafe_arena_release_teammsg() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.TeamMsg)
  
  ::msg::CSNtfTeamMsg* temp = _impl_.teammsg_;
  _impl_.teammsg_ = nullptr;
  return temp;
}
inline ::msg::CSNtfTeamMsg* CSNtfBody::_internal_mutable_teammsg() {
  
  if (_impl_.teammsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfTeamMsg>(GetArenaForAllocation());
    _impl_.teammsg_ = p;
  }
  return _impl_.teammsg_;
}
inline ::msg::CSNtfTeamMsg* CSNtfBody::mutable_teammsg() {
  ::msg::CSNtfTeamMsg* _msg = _internal_mutable_teammsg();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.TeamMsg)
  return _msg;
}
inline void CSNtfBody::set_allocated_teammsg(::msg::CSNtfTeamMsg* teammsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teammsg_);
  }
  if (teammsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teammsg));
    if (message_arena != submessage_arena) {
      teammsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teammsg, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.teammsg_ = teammsg;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.TeamMsg)
}

// .msg.CSNtfTeamReady TeamReady = 33;
inline bool CSNtfBody::_internal_has_teamready() const {
  return this != internal_default_instance() && _impl_.teamready_ != nullptr;
}
inline bool CSNtfBody::has_teamready() const {
  return _internal_has_teamready();
}
inline const ::msg::CSNtfTeamReady& CSNtfBody::_internal_teamready() const {
  const ::msg::CSNtfTeamReady* p = _impl_.teamready_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfTeamReady&>(
      ::msg::_CSNtfTeamReady_default_instance_);
}
inline const ::msg::CSNtfTeamReady& CSNtfBody::teamready() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.TeamReady)
  return _internal_teamready();
}
inline void CSNtfBody::unsafe_arena_set_allocated_teamready(
    ::msg::CSNtfTeamReady* teamready) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamready_);
  }
  _impl_.teamready_ = teamready;
  if (teamready) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.TeamReady)
}
inline ::msg::CSNtfTeamReady* CSNtfBody::release_teamready() {
  
  ::msg::CSNtfTeamReady* temp = _impl_.teamready_;
  _impl_.teamready_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfTeamReady* CSNtfBody::unsafe_arena_release_teamready() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.TeamReady)
  
  ::msg::CSNtfTeamReady* temp = _impl_.teamready_;
  _impl_.teamready_ = nullptr;
  return temp;
}
inline ::msg::CSNtfTeamReady* CSNtfBody::_internal_mutable_teamready() {
  
  if (_impl_.teamready_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfTeamReady>(GetArenaForAllocation());
    _impl_.teamready_ = p;
  }
  return _impl_.teamready_;
}
inline ::msg::CSNtfTeamReady* CSNtfBody::mutable_teamready() {
  ::msg::CSNtfTeamReady* _msg = _internal_mutable_teamready();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.TeamReady)
  return _msg;
}
inline void CSNtfBody::set_allocated_teamready(::msg::CSNtfTeamReady* teamready) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamready_);
  }
  if (teamready) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teamready));
    if (message_arena != submessage_arena) {
      teamready = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamready, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.teamready_ = teamready;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.TeamReady)
}

// .msg.CSNtfRejectJoinTeam RejectJoinTeam = 34;
inline bool CSNtfBody::_internal_has_rejectjointeam() const {
  return this != internal_default_instance() && _impl_.rejectjointeam_ != nullptr;
}
inline bool CSNtfBody::has_rejectjointeam() const {
  return _internal_has_rejectjointeam();
}
inline const ::msg::CSNtfRejectJoinTeam& CSNtfBody::_internal_rejectjointeam() const {
  const ::msg::CSNtfRejectJoinTeam* p = _impl_.rejectjointeam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfRejectJoinTeam&>(
      ::msg::_CSNtfRejectJoinTeam_default_instance_);
}
inline const ::msg::CSNtfRejectJoinTeam& CSNtfBody::rejectjointeam() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.RejectJoinTeam)
  return _internal_rejectjointeam();
}
inline void CSNtfBody::unsafe_arena_set_allocated_rejectjointeam(
    ::msg::CSNtfRejectJoinTeam* rejectjointeam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rejectjointeam_);
  }
  _impl_.rejectjointeam_ = rejectjointeam;
  if (rejectjointeam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.RejectJoinTeam)
}
inline ::msg::CSNtfRejectJoinTeam* CSNtfBody::release_rejectjointeam() {
  
  ::msg::CSNtfRejectJoinTeam* temp = _impl_.rejectjointeam_;
  _impl_.rejectjointeam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfRejectJoinTeam* CSNtfBody::unsafe_arena_release_rejectjointeam() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.RejectJoinTeam)
  
  ::msg::CSNtfRejectJoinTeam* temp = _impl_.rejectjointeam_;
  _impl_.rejectjointeam_ = nullptr;
  return temp;
}
inline ::msg::CSNtfRejectJoinTeam* CSNtfBody::_internal_mutable_rejectjointeam() {
  
  if (_impl_.rejectjointeam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfRejectJoinTeam>(GetArenaForAllocation());
    _impl_.rejectjointeam_ = p;
  }
  return _impl_.rejectjointeam_;
}
inline ::msg::CSNtfRejectJoinTeam* CSNtfBody::mutable_rejectjointeam() {
  ::msg::CSNtfRejectJoinTeam* _msg = _internal_mutable_rejectjointeam();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.RejectJoinTeam)
  return _msg;
}
inline void CSNtfBody::set_allocated_rejectjointeam(::msg::CSNtfRejectJoinTeam* rejectjointeam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rejectjointeam_);
  }
  if (rejectjointeam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rejectjointeam));
    if (message_arena != submessage_arena) {
      rejectjointeam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rejectjointeam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rejectjointeam_ = rejectjointeam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.RejectJoinTeam)
}

// .msg.CSNtfNotice Notice = 35;
inline bool CSNtfBody::_internal_has_notice() const {
  return this != internal_default_instance() && _impl_.notice_ != nullptr;
}
inline bool CSNtfBody::has_notice() const {
  return _internal_has_notice();
}
inline const ::msg::CSNtfNotice& CSNtfBody::_internal_notice() const {
  const ::msg::CSNtfNotice* p = _impl_.notice_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfNotice&>(
      ::msg::_CSNtfNotice_default_instance_);
}
inline const ::msg::CSNtfNotice& CSNtfBody::notice() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.Notice)
  return _internal_notice();
}
inline void CSNtfBody::unsafe_arena_set_allocated_notice(
    ::msg::CSNtfNotice* notice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.notice_);
  }
  _impl_.notice_ = notice;
  if (notice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.Notice)
}
inline ::msg::CSNtfNotice* CSNtfBody::release_notice() {
  
  ::msg::CSNtfNotice* temp = _impl_.notice_;
  _impl_.notice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfNotice* CSNtfBody::unsafe_arena_release_notice() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.Notice)
  
  ::msg::CSNtfNotice* temp = _impl_.notice_;
  _impl_.notice_ = nullptr;
  return temp;
}
inline ::msg::CSNtfNotice* CSNtfBody::_internal_mutable_notice() {
  
  if (_impl_.notice_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfNotice>(GetArenaForAllocation());
    _impl_.notice_ = p;
  }
  return _impl_.notice_;
}
inline ::msg::CSNtfNotice* CSNtfBody::mutable_notice() {
  ::msg::CSNtfNotice* _msg = _internal_mutable_notice();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.Notice)
  return _msg;
}
inline void CSNtfBody::set_allocated_notice(::msg::CSNtfNotice* notice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.notice_);
  }
  if (notice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(notice));
    if (message_arena != submessage_arena) {
      notice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notice, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.notice_ = notice;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.Notice)
}

// .msg.CSNtfRemoveNotice RemoveNotice = 36;
inline bool CSNtfBody::_internal_has_removenotice() const {
  return this != internal_default_instance() && _impl_.removenotice_ != nullptr;
}
inline bool CSNtfBody::has_removenotice() const {
  return _internal_has_removenotice();
}
inline const ::msg::CSNtfRemoveNotice& CSNtfBody::_internal_removenotice() const {
  const ::msg::CSNtfRemoveNotice* p = _impl_.removenotice_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfRemoveNotice&>(
      ::msg::_CSNtfRemoveNotice_default_instance_);
}
inline const ::msg::CSNtfRemoveNotice& CSNtfBody::removenotice() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.RemoveNotice)
  return _internal_removenotice();
}
inline void CSNtfBody::unsafe_arena_set_allocated_removenotice(
    ::msg::CSNtfRemoveNotice* removenotice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removenotice_);
  }
  _impl_.removenotice_ = removenotice;
  if (removenotice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.RemoveNotice)
}
inline ::msg::CSNtfRemoveNotice* CSNtfBody::release_removenotice() {
  
  ::msg::CSNtfRemoveNotice* temp = _impl_.removenotice_;
  _impl_.removenotice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfRemoveNotice* CSNtfBody::unsafe_arena_release_removenotice() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.RemoveNotice)
  
  ::msg::CSNtfRemoveNotice* temp = _impl_.removenotice_;
  _impl_.removenotice_ = nullptr;
  return temp;
}
inline ::msg::CSNtfRemoveNotice* CSNtfBody::_internal_mutable_removenotice() {
  
  if (_impl_.removenotice_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfRemoveNotice>(GetArenaForAllocation());
    _impl_.removenotice_ = p;
  }
  return _impl_.removenotice_;
}
inline ::msg::CSNtfRemoveNotice* CSNtfBody::mutable_removenotice() {
  ::msg::CSNtfRemoveNotice* _msg = _internal_mutable_removenotice();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.RemoveNotice)
  return _msg;
}
inline void CSNtfBody::set_allocated_removenotice(::msg::CSNtfRemoveNotice* removenotice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removenotice_);
  }
  if (removenotice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removenotice));
    if (message_arena != submessage_arena) {
      removenotice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removenotice, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.removenotice_ = removenotice;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.RemoveNotice)
}

// .msg.CSNtfUpgradeBattleStage UpgradeBattleStage = 37;
inline bool CSNtfBody::_internal_has_upgradebattlestage() const {
  return this != internal_default_instance() && _impl_.upgradebattlestage_ != nullptr;
}
inline bool CSNtfBody::has_upgradebattlestage() const {
  return _internal_has_upgradebattlestage();
}
inline const ::msg::CSNtfUpgradeBattleStage& CSNtfBody::_internal_upgradebattlestage() const {
  const ::msg::CSNtfUpgradeBattleStage* p = _impl_.upgradebattlestage_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfUpgradeBattleStage&>(
      ::msg::_CSNtfUpgradeBattleStage_default_instance_);
}
inline const ::msg::CSNtfUpgradeBattleStage& CSNtfBody::upgradebattlestage() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.UpgradeBattleStage)
  return _internal_upgradebattlestage();
}
inline void CSNtfBody::unsafe_arena_set_allocated_upgradebattlestage(
    ::msg::CSNtfUpgradeBattleStage* upgradebattlestage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upgradebattlestage_);
  }
  _impl_.upgradebattlestage_ = upgradebattlestage;
  if (upgradebattlestage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.UpgradeBattleStage)
}
inline ::msg::CSNtfUpgradeBattleStage* CSNtfBody::release_upgradebattlestage() {
  
  ::msg::CSNtfUpgradeBattleStage* temp = _impl_.upgradebattlestage_;
  _impl_.upgradebattlestage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfUpgradeBattleStage* CSNtfBody::unsafe_arena_release_upgradebattlestage() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.UpgradeBattleStage)
  
  ::msg::CSNtfUpgradeBattleStage* temp = _impl_.upgradebattlestage_;
  _impl_.upgradebattlestage_ = nullptr;
  return temp;
}
inline ::msg::CSNtfUpgradeBattleStage* CSNtfBody::_internal_mutable_upgradebattlestage() {
  
  if (_impl_.upgradebattlestage_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfUpgradeBattleStage>(GetArenaForAllocation());
    _impl_.upgradebattlestage_ = p;
  }
  return _impl_.upgradebattlestage_;
}
inline ::msg::CSNtfUpgradeBattleStage* CSNtfBody::mutable_upgradebattlestage() {
  ::msg::CSNtfUpgradeBattleStage* _msg = _internal_mutable_upgradebattlestage();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.UpgradeBattleStage)
  return _msg;
}
inline void CSNtfBody::set_allocated_upgradebattlestage(::msg::CSNtfUpgradeBattleStage* upgradebattlestage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upgradebattlestage_);
  }
  if (upgradebattlestage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upgradebattlestage));
    if (message_arena != submessage_arena) {
      upgradebattlestage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upgradebattlestage, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.upgradebattlestage_ = upgradebattlestage;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.UpgradeBattleStage)
}

// .msg.CSNtfPassportTaskProgress PassportTaskProgress = 38;
inline bool CSNtfBody::_internal_has_passporttaskprogress() const {
  return this != internal_default_instance() && _impl_.passporttaskprogress_ != nullptr;
}
inline bool CSNtfBody::has_passporttaskprogress() const {
  return _internal_has_passporttaskprogress();
}
inline const ::msg::CSNtfPassportTaskProgress& CSNtfBody::_internal_passporttaskprogress() const {
  const ::msg::CSNtfPassportTaskProgress* p = _impl_.passporttaskprogress_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPassportTaskProgress&>(
      ::msg::_CSNtfPassportTaskProgress_default_instance_);
}
inline const ::msg::CSNtfPassportTaskProgress& CSNtfBody::passporttaskprogress() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PassportTaskProgress)
  return _internal_passporttaskprogress();
}
inline void CSNtfBody::unsafe_arena_set_allocated_passporttaskprogress(
    ::msg::CSNtfPassportTaskProgress* passporttaskprogress) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passporttaskprogress_);
  }
  _impl_.passporttaskprogress_ = passporttaskprogress;
  if (passporttaskprogress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PassportTaskProgress)
}
inline ::msg::CSNtfPassportTaskProgress* CSNtfBody::release_passporttaskprogress() {
  
  ::msg::CSNtfPassportTaskProgress* temp = _impl_.passporttaskprogress_;
  _impl_.passporttaskprogress_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPassportTaskProgress* CSNtfBody::unsafe_arena_release_passporttaskprogress() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PassportTaskProgress)
  
  ::msg::CSNtfPassportTaskProgress* temp = _impl_.passporttaskprogress_;
  _impl_.passporttaskprogress_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPassportTaskProgress* CSNtfBody::_internal_mutable_passporttaskprogress() {
  
  if (_impl_.passporttaskprogress_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPassportTaskProgress>(GetArenaForAllocation());
    _impl_.passporttaskprogress_ = p;
  }
  return _impl_.passporttaskprogress_;
}
inline ::msg::CSNtfPassportTaskProgress* CSNtfBody::mutable_passporttaskprogress() {
  ::msg::CSNtfPassportTaskProgress* _msg = _internal_mutable_passporttaskprogress();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PassportTaskProgress)
  return _msg;
}
inline void CSNtfBody::set_allocated_passporttaskprogress(::msg::CSNtfPassportTaskProgress* passporttaskprogress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passporttaskprogress_);
  }
  if (passporttaskprogress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(passporttaskprogress));
    if (message_arena != submessage_arena) {
      passporttaskprogress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, passporttaskprogress, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.passporttaskprogress_ = passporttaskprogress;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PassportTaskProgress)
}

// .msg.CSNtfRankSeasonEval RankSeasonEval = 39;
inline bool CSNtfBody::_internal_has_rankseasoneval() const {
  return this != internal_default_instance() && _impl_.rankseasoneval_ != nullptr;
}
inline bool CSNtfBody::has_rankseasoneval() const {
  return _internal_has_rankseasoneval();
}
inline const ::msg::CSNtfRankSeasonEval& CSNtfBody::_internal_rankseasoneval() const {
  const ::msg::CSNtfRankSeasonEval* p = _impl_.rankseasoneval_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfRankSeasonEval&>(
      ::msg::_CSNtfRankSeasonEval_default_instance_);
}
inline const ::msg::CSNtfRankSeasonEval& CSNtfBody::rankseasoneval() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.RankSeasonEval)
  return _internal_rankseasoneval();
}
inline void CSNtfBody::unsafe_arena_set_allocated_rankseasoneval(
    ::msg::CSNtfRankSeasonEval* rankseasoneval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rankseasoneval_);
  }
  _impl_.rankseasoneval_ = rankseasoneval;
  if (rankseasoneval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.RankSeasonEval)
}
inline ::msg::CSNtfRankSeasonEval* CSNtfBody::release_rankseasoneval() {
  
  ::msg::CSNtfRankSeasonEval* temp = _impl_.rankseasoneval_;
  _impl_.rankseasoneval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfRankSeasonEval* CSNtfBody::unsafe_arena_release_rankseasoneval() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.RankSeasonEval)
  
  ::msg::CSNtfRankSeasonEval* temp = _impl_.rankseasoneval_;
  _impl_.rankseasoneval_ = nullptr;
  return temp;
}
inline ::msg::CSNtfRankSeasonEval* CSNtfBody::_internal_mutable_rankseasoneval() {
  
  if (_impl_.rankseasoneval_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfRankSeasonEval>(GetArenaForAllocation());
    _impl_.rankseasoneval_ = p;
  }
  return _impl_.rankseasoneval_;
}
inline ::msg::CSNtfRankSeasonEval* CSNtfBody::mutable_rankseasoneval() {
  ::msg::CSNtfRankSeasonEval* _msg = _internal_mutable_rankseasoneval();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.RankSeasonEval)
  return _msg;
}
inline void CSNtfBody::set_allocated_rankseasoneval(::msg::CSNtfRankSeasonEval* rankseasoneval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rankseasoneval_);
  }
  if (rankseasoneval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rankseasoneval));
    if (message_arena != submessage_arena) {
      rankseasoneval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rankseasoneval, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rankseasoneval_ = rankseasoneval;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.RankSeasonEval)
}

// .msg.CSNtfBindAccounts BindAccounts = 40;
inline bool CSNtfBody::_internal_has_bindaccounts() const {
  return this != internal_default_instance() && _impl_.bindaccounts_ != nullptr;
}
inline bool CSNtfBody::has_bindaccounts() const {
  return _internal_has_bindaccounts();
}
inline const ::msg::CSNtfBindAccounts& CSNtfBody::_internal_bindaccounts() const {
  const ::msg::CSNtfBindAccounts* p = _impl_.bindaccounts_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfBindAccounts&>(
      ::msg::_CSNtfBindAccounts_default_instance_);
}
inline const ::msg::CSNtfBindAccounts& CSNtfBody::bindaccounts() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.BindAccounts)
  return _internal_bindaccounts();
}
inline void CSNtfBody::unsafe_arena_set_allocated_bindaccounts(
    ::msg::CSNtfBindAccounts* bindaccounts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindaccounts_);
  }
  _impl_.bindaccounts_ = bindaccounts;
  if (bindaccounts) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.BindAccounts)
}
inline ::msg::CSNtfBindAccounts* CSNtfBody::release_bindaccounts() {
  
  ::msg::CSNtfBindAccounts* temp = _impl_.bindaccounts_;
  _impl_.bindaccounts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfBindAccounts* CSNtfBody::unsafe_arena_release_bindaccounts() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.BindAccounts)
  
  ::msg::CSNtfBindAccounts* temp = _impl_.bindaccounts_;
  _impl_.bindaccounts_ = nullptr;
  return temp;
}
inline ::msg::CSNtfBindAccounts* CSNtfBody::_internal_mutable_bindaccounts() {
  
  if (_impl_.bindaccounts_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfBindAccounts>(GetArenaForAllocation());
    _impl_.bindaccounts_ = p;
  }
  return _impl_.bindaccounts_;
}
inline ::msg::CSNtfBindAccounts* CSNtfBody::mutable_bindaccounts() {
  ::msg::CSNtfBindAccounts* _msg = _internal_mutable_bindaccounts();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.BindAccounts)
  return _msg;
}
inline void CSNtfBody::set_allocated_bindaccounts(::msg::CSNtfBindAccounts* bindaccounts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindaccounts_);
  }
  if (bindaccounts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bindaccounts));
    if (message_arena != submessage_arena) {
      bindaccounts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bindaccounts, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bindaccounts_ = bindaccounts;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.BindAccounts)
}

// .msg.CSNtfSeasonTaskProgress SeasonTaskProgress = 41;
inline bool CSNtfBody::_internal_has_seasontaskprogress() const {
  return this != internal_default_instance() && _impl_.seasontaskprogress_ != nullptr;
}
inline bool CSNtfBody::has_seasontaskprogress() const {
  return _internal_has_seasontaskprogress();
}
inline const ::msg::CSNtfSeasonTaskProgress& CSNtfBody::_internal_seasontaskprogress() const {
  const ::msg::CSNtfSeasonTaskProgress* p = _impl_.seasontaskprogress_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfSeasonTaskProgress&>(
      ::msg::_CSNtfSeasonTaskProgress_default_instance_);
}
inline const ::msg::CSNtfSeasonTaskProgress& CSNtfBody::seasontaskprogress() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.SeasonTaskProgress)
  return _internal_seasontaskprogress();
}
inline void CSNtfBody::unsafe_arena_set_allocated_seasontaskprogress(
    ::msg::CSNtfSeasonTaskProgress* seasontaskprogress) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.seasontaskprogress_);
  }
  _impl_.seasontaskprogress_ = seasontaskprogress;
  if (seasontaskprogress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.SeasonTaskProgress)
}
inline ::msg::CSNtfSeasonTaskProgress* CSNtfBody::release_seasontaskprogress() {
  
  ::msg::CSNtfSeasonTaskProgress* temp = _impl_.seasontaskprogress_;
  _impl_.seasontaskprogress_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfSeasonTaskProgress* CSNtfBody::unsafe_arena_release_seasontaskprogress() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.SeasonTaskProgress)
  
  ::msg::CSNtfSeasonTaskProgress* temp = _impl_.seasontaskprogress_;
  _impl_.seasontaskprogress_ = nullptr;
  return temp;
}
inline ::msg::CSNtfSeasonTaskProgress* CSNtfBody::_internal_mutable_seasontaskprogress() {
  
  if (_impl_.seasontaskprogress_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfSeasonTaskProgress>(GetArenaForAllocation());
    _impl_.seasontaskprogress_ = p;
  }
  return _impl_.seasontaskprogress_;
}
inline ::msg::CSNtfSeasonTaskProgress* CSNtfBody::mutable_seasontaskprogress() {
  ::msg::CSNtfSeasonTaskProgress* _msg = _internal_mutable_seasontaskprogress();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.SeasonTaskProgress)
  return _msg;
}
inline void CSNtfBody::set_allocated_seasontaskprogress(::msg::CSNtfSeasonTaskProgress* seasontaskprogress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.seasontaskprogress_);
  }
  if (seasontaskprogress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seasontaskprogress));
    if (message_arena != submessage_arena) {
      seasontaskprogress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seasontaskprogress, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.seasontaskprogress_ = seasontaskprogress;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.SeasonTaskProgress)
}

// .msg.CSNtfAlphaActivity AlphaActivity = 42;
inline bool CSNtfBody::_internal_has_alphaactivity() const {
  return this != internal_default_instance() && _impl_.alphaactivity_ != nullptr;
}
inline bool CSNtfBody::has_alphaactivity() const {
  return _internal_has_alphaactivity();
}
inline const ::msg::CSNtfAlphaActivity& CSNtfBody::_internal_alphaactivity() const {
  const ::msg::CSNtfAlphaActivity* p = _impl_.alphaactivity_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfAlphaActivity&>(
      ::msg::_CSNtfAlphaActivity_default_instance_);
}
inline const ::msg::CSNtfAlphaActivity& CSNtfBody::alphaactivity() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.AlphaActivity)
  return _internal_alphaactivity();
}
inline void CSNtfBody::unsafe_arena_set_allocated_alphaactivity(
    ::msg::CSNtfAlphaActivity* alphaactivity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alphaactivity_);
  }
  _impl_.alphaactivity_ = alphaactivity;
  if (alphaactivity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.AlphaActivity)
}
inline ::msg::CSNtfAlphaActivity* CSNtfBody::release_alphaactivity() {
  
  ::msg::CSNtfAlphaActivity* temp = _impl_.alphaactivity_;
  _impl_.alphaactivity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfAlphaActivity* CSNtfBody::unsafe_arena_release_alphaactivity() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.AlphaActivity)
  
  ::msg::CSNtfAlphaActivity* temp = _impl_.alphaactivity_;
  _impl_.alphaactivity_ = nullptr;
  return temp;
}
inline ::msg::CSNtfAlphaActivity* CSNtfBody::_internal_mutable_alphaactivity() {
  
  if (_impl_.alphaactivity_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfAlphaActivity>(GetArenaForAllocation());
    _impl_.alphaactivity_ = p;
  }
  return _impl_.alphaactivity_;
}
inline ::msg::CSNtfAlphaActivity* CSNtfBody::mutable_alphaactivity() {
  ::msg::CSNtfAlphaActivity* _msg = _internal_mutable_alphaactivity();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.AlphaActivity)
  return _msg;
}
inline void CSNtfBody::set_allocated_alphaactivity(::msg::CSNtfAlphaActivity* alphaactivity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alphaactivity_);
  }
  if (alphaactivity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alphaactivity));
    if (message_arena != submessage_arena) {
      alphaactivity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alphaactivity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.alphaactivity_ = alphaactivity;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.AlphaActivity)
}

// .msg.CSNtfOffSeasonToNewSeason OffSeasonToNewSeason = 43;
inline bool CSNtfBody::_internal_has_offseasontonewseason() const {
  return this != internal_default_instance() && _impl_.offseasontonewseason_ != nullptr;
}
inline bool CSNtfBody::has_offseasontonewseason() const {
  return _internal_has_offseasontonewseason();
}
inline const ::msg::CSNtfOffSeasonToNewSeason& CSNtfBody::_internal_offseasontonewseason() const {
  const ::msg::CSNtfOffSeasonToNewSeason* p = _impl_.offseasontonewseason_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfOffSeasonToNewSeason&>(
      ::msg::_CSNtfOffSeasonToNewSeason_default_instance_);
}
inline const ::msg::CSNtfOffSeasonToNewSeason& CSNtfBody::offseasontonewseason() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.OffSeasonToNewSeason)
  return _internal_offseasontonewseason();
}
inline void CSNtfBody::unsafe_arena_set_allocated_offseasontonewseason(
    ::msg::CSNtfOffSeasonToNewSeason* offseasontonewseason) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offseasontonewseason_);
  }
  _impl_.offseasontonewseason_ = offseasontonewseason;
  if (offseasontonewseason) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.OffSeasonToNewSeason)
}
inline ::msg::CSNtfOffSeasonToNewSeason* CSNtfBody::release_offseasontonewseason() {
  
  ::msg::CSNtfOffSeasonToNewSeason* temp = _impl_.offseasontonewseason_;
  _impl_.offseasontonewseason_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfOffSeasonToNewSeason* CSNtfBody::unsafe_arena_release_offseasontonewseason() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.OffSeasonToNewSeason)
  
  ::msg::CSNtfOffSeasonToNewSeason* temp = _impl_.offseasontonewseason_;
  _impl_.offseasontonewseason_ = nullptr;
  return temp;
}
inline ::msg::CSNtfOffSeasonToNewSeason* CSNtfBody::_internal_mutable_offseasontonewseason() {
  
  if (_impl_.offseasontonewseason_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfOffSeasonToNewSeason>(GetArenaForAllocation());
    _impl_.offseasontonewseason_ = p;
  }
  return _impl_.offseasontonewseason_;
}
inline ::msg::CSNtfOffSeasonToNewSeason* CSNtfBody::mutable_offseasontonewseason() {
  ::msg::CSNtfOffSeasonToNewSeason* _msg = _internal_mutable_offseasontonewseason();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.OffSeasonToNewSeason)
  return _msg;
}
inline void CSNtfBody::set_allocated_offseasontonewseason(::msg::CSNtfOffSeasonToNewSeason* offseasontonewseason) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offseasontonewseason_);
  }
  if (offseasontonewseason) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offseasontonewseason));
    if (message_arena != submessage_arena) {
      offseasontonewseason = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offseasontonewseason, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offseasontonewseason_ = offseasontonewseason;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.OffSeasonToNewSeason)
}

// .msg.CSNtfLanguageMd5List LanguageMd5List = 44;
inline bool CSNtfBody::_internal_has_languagemd5list() const {
  return this != internal_default_instance() && _impl_.languagemd5list_ != nullptr;
}
inline bool CSNtfBody::has_languagemd5list() const {
  return _internal_has_languagemd5list();
}
inline const ::msg::CSNtfLanguageMd5List& CSNtfBody::_internal_languagemd5list() const {
  const ::msg::CSNtfLanguageMd5List* p = _impl_.languagemd5list_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfLanguageMd5List&>(
      ::msg::_CSNtfLanguageMd5List_default_instance_);
}
inline const ::msg::CSNtfLanguageMd5List& CSNtfBody::languagemd5list() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.LanguageMd5List)
  return _internal_languagemd5list();
}
inline void CSNtfBody::unsafe_arena_set_allocated_languagemd5list(
    ::msg::CSNtfLanguageMd5List* languagemd5list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.languagemd5list_);
  }
  _impl_.languagemd5list_ = languagemd5list;
  if (languagemd5list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.LanguageMd5List)
}
inline ::msg::CSNtfLanguageMd5List* CSNtfBody::release_languagemd5list() {
  
  ::msg::CSNtfLanguageMd5List* temp = _impl_.languagemd5list_;
  _impl_.languagemd5list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfLanguageMd5List* CSNtfBody::unsafe_arena_release_languagemd5list() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.LanguageMd5List)
  
  ::msg::CSNtfLanguageMd5List* temp = _impl_.languagemd5list_;
  _impl_.languagemd5list_ = nullptr;
  return temp;
}
inline ::msg::CSNtfLanguageMd5List* CSNtfBody::_internal_mutable_languagemd5list() {
  
  if (_impl_.languagemd5list_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfLanguageMd5List>(GetArenaForAllocation());
    _impl_.languagemd5list_ = p;
  }
  return _impl_.languagemd5list_;
}
inline ::msg::CSNtfLanguageMd5List* CSNtfBody::mutable_languagemd5list() {
  ::msg::CSNtfLanguageMd5List* _msg = _internal_mutable_languagemd5list();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.LanguageMd5List)
  return _msg;
}
inline void CSNtfBody::set_allocated_languagemd5list(::msg::CSNtfLanguageMd5List* languagemd5list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.languagemd5list_);
  }
  if (languagemd5list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(languagemd5list));
    if (message_arena != submessage_arena) {
      languagemd5list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, languagemd5list, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.languagemd5list_ = languagemd5list;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.LanguageMd5List)
}

// .msg.CSNtfActivityProgress ActivityProgress = 45;
inline bool CSNtfBody::_internal_has_activityprogress() const {
  return this != internal_default_instance() && _impl_.activityprogress_ != nullptr;
}
inline bool CSNtfBody::has_activityprogress() const {
  return _internal_has_activityprogress();
}
inline const ::msg::CSNtfActivityProgress& CSNtfBody::_internal_activityprogress() const {
  const ::msg::CSNtfActivityProgress* p = _impl_.activityprogress_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfActivityProgress&>(
      ::msg::_CSNtfActivityProgress_default_instance_);
}
inline const ::msg::CSNtfActivityProgress& CSNtfBody::activityprogress() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.ActivityProgress)
  return _internal_activityprogress();
}
inline void CSNtfBody::unsafe_arena_set_allocated_activityprogress(
    ::msg::CSNtfActivityProgress* activityprogress) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activityprogress_);
  }
  _impl_.activityprogress_ = activityprogress;
  if (activityprogress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.ActivityProgress)
}
inline ::msg::CSNtfActivityProgress* CSNtfBody::release_activityprogress() {
  
  ::msg::CSNtfActivityProgress* temp = _impl_.activityprogress_;
  _impl_.activityprogress_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfActivityProgress* CSNtfBody::unsafe_arena_release_activityprogress() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.ActivityProgress)
  
  ::msg::CSNtfActivityProgress* temp = _impl_.activityprogress_;
  _impl_.activityprogress_ = nullptr;
  return temp;
}
inline ::msg::CSNtfActivityProgress* CSNtfBody::_internal_mutable_activityprogress() {
  
  if (_impl_.activityprogress_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfActivityProgress>(GetArenaForAllocation());
    _impl_.activityprogress_ = p;
  }
  return _impl_.activityprogress_;
}
inline ::msg::CSNtfActivityProgress* CSNtfBody::mutable_activityprogress() {
  ::msg::CSNtfActivityProgress* _msg = _internal_mutable_activityprogress();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.ActivityProgress)
  return _msg;
}
inline void CSNtfBody::set_allocated_activityprogress(::msg::CSNtfActivityProgress* activityprogress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activityprogress_);
  }
  if (activityprogress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activityprogress));
    if (message_arena != submessage_arena) {
      activityprogress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activityprogress, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.activityprogress_ = activityprogress;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.ActivityProgress)
}

// .msg.CSNtfRemoveActivity RemoveActivity = 46;
inline bool CSNtfBody::_internal_has_removeactivity() const {
  return this != internal_default_instance() && _impl_.removeactivity_ != nullptr;
}
inline bool CSNtfBody::has_removeactivity() const {
  return _internal_has_removeactivity();
}
inline const ::msg::CSNtfRemoveActivity& CSNtfBody::_internal_removeactivity() const {
  const ::msg::CSNtfRemoveActivity* p = _impl_.removeactivity_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfRemoveActivity&>(
      ::msg::_CSNtfRemoveActivity_default_instance_);
}
inline const ::msg::CSNtfRemoveActivity& CSNtfBody::removeactivity() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.RemoveActivity)
  return _internal_removeactivity();
}
inline void CSNtfBody::unsafe_arena_set_allocated_removeactivity(
    ::msg::CSNtfRemoveActivity* removeactivity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removeactivity_);
  }
  _impl_.removeactivity_ = removeactivity;
  if (removeactivity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.RemoveActivity)
}
inline ::msg::CSNtfRemoveActivity* CSNtfBody::release_removeactivity() {
  
  ::msg::CSNtfRemoveActivity* temp = _impl_.removeactivity_;
  _impl_.removeactivity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfRemoveActivity* CSNtfBody::unsafe_arena_release_removeactivity() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.RemoveActivity)
  
  ::msg::CSNtfRemoveActivity* temp = _impl_.removeactivity_;
  _impl_.removeactivity_ = nullptr;
  return temp;
}
inline ::msg::CSNtfRemoveActivity* CSNtfBody::_internal_mutable_removeactivity() {
  
  if (_impl_.removeactivity_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfRemoveActivity>(GetArenaForAllocation());
    _impl_.removeactivity_ = p;
  }
  return _impl_.removeactivity_;
}
inline ::msg::CSNtfRemoveActivity* CSNtfBody::mutable_removeactivity() {
  ::msg::CSNtfRemoveActivity* _msg = _internal_mutable_removeactivity();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.RemoveActivity)
  return _msg;
}
inline void CSNtfBody::set_allocated_removeactivity(::msg::CSNtfRemoveActivity* removeactivity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removeactivity_);
  }
  if (removeactivity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removeactivity));
    if (message_arena != submessage_arena) {
      removeactivity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removeactivity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.removeactivity_ = removeactivity;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.RemoveActivity)
}

// .msg.CSNtfActivityConfig ActivityConfig = 47;
inline bool CSNtfBody::_internal_has_activityconfig() const {
  return this != internal_default_instance() && _impl_.activityconfig_ != nullptr;
}
inline bool CSNtfBody::has_activityconfig() const {
  return _internal_has_activityconfig();
}
inline const ::msg::CSNtfActivityConfig& CSNtfBody::_internal_activityconfig() const {
  const ::msg::CSNtfActivityConfig* p = _impl_.activityconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfActivityConfig&>(
      ::msg::_CSNtfActivityConfig_default_instance_);
}
inline const ::msg::CSNtfActivityConfig& CSNtfBody::activityconfig() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.ActivityConfig)
  return _internal_activityconfig();
}
inline void CSNtfBody::unsafe_arena_set_allocated_activityconfig(
    ::msg::CSNtfActivityConfig* activityconfig) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activityconfig_);
  }
  _impl_.activityconfig_ = activityconfig;
  if (activityconfig) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.ActivityConfig)
}
inline ::msg::CSNtfActivityConfig* CSNtfBody::release_activityconfig() {
  
  ::msg::CSNtfActivityConfig* temp = _impl_.activityconfig_;
  _impl_.activityconfig_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfActivityConfig* CSNtfBody::unsafe_arena_release_activityconfig() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.ActivityConfig)
  
  ::msg::CSNtfActivityConfig* temp = _impl_.activityconfig_;
  _impl_.activityconfig_ = nullptr;
  return temp;
}
inline ::msg::CSNtfActivityConfig* CSNtfBody::_internal_mutable_activityconfig() {
  
  if (_impl_.activityconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfActivityConfig>(GetArenaForAllocation());
    _impl_.activityconfig_ = p;
  }
  return _impl_.activityconfig_;
}
inline ::msg::CSNtfActivityConfig* CSNtfBody::mutable_activityconfig() {
  ::msg::CSNtfActivityConfig* _msg = _internal_mutable_activityconfig();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.ActivityConfig)
  return _msg;
}
inline void CSNtfBody::set_allocated_activityconfig(::msg::CSNtfActivityConfig* activityconfig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activityconfig_);
  }
  if (activityconfig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activityconfig));
    if (message_arena != submessage_arena) {
      activityconfig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activityconfig, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.activityconfig_ = activityconfig;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.ActivityConfig)
}

// .msg.CSNtfMeleeTaskProgress MeleeTaskProgress = 48;
inline bool CSNtfBody::_internal_has_meleetaskprogress() const {
  return this != internal_default_instance() && _impl_.meleetaskprogress_ != nullptr;
}
inline bool CSNtfBody::has_meleetaskprogress() const {
  return _internal_has_meleetaskprogress();
}
inline const ::msg::CSNtfMeleeTaskProgress& CSNtfBody::_internal_meleetaskprogress() const {
  const ::msg::CSNtfMeleeTaskProgress* p = _impl_.meleetaskprogress_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfMeleeTaskProgress&>(
      ::msg::_CSNtfMeleeTaskProgress_default_instance_);
}
inline const ::msg::CSNtfMeleeTaskProgress& CSNtfBody::meleetaskprogress() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.MeleeTaskProgress)
  return _internal_meleetaskprogress();
}
inline void CSNtfBody::unsafe_arena_set_allocated_meleetaskprogress(
    ::msg::CSNtfMeleeTaskProgress* meleetaskprogress) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meleetaskprogress_);
  }
  _impl_.meleetaskprogress_ = meleetaskprogress;
  if (meleetaskprogress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.MeleeTaskProgress)
}
inline ::msg::CSNtfMeleeTaskProgress* CSNtfBody::release_meleetaskprogress() {
  
  ::msg::CSNtfMeleeTaskProgress* temp = _impl_.meleetaskprogress_;
  _impl_.meleetaskprogress_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfMeleeTaskProgress* CSNtfBody::unsafe_arena_release_meleetaskprogress() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.MeleeTaskProgress)
  
  ::msg::CSNtfMeleeTaskProgress* temp = _impl_.meleetaskprogress_;
  _impl_.meleetaskprogress_ = nullptr;
  return temp;
}
inline ::msg::CSNtfMeleeTaskProgress* CSNtfBody::_internal_mutable_meleetaskprogress() {
  
  if (_impl_.meleetaskprogress_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfMeleeTaskProgress>(GetArenaForAllocation());
    _impl_.meleetaskprogress_ = p;
  }
  return _impl_.meleetaskprogress_;
}
inline ::msg::CSNtfMeleeTaskProgress* CSNtfBody::mutable_meleetaskprogress() {
  ::msg::CSNtfMeleeTaskProgress* _msg = _internal_mutable_meleetaskprogress();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.MeleeTaskProgress)
  return _msg;
}
inline void CSNtfBody::set_allocated_meleetaskprogress(::msg::CSNtfMeleeTaskProgress* meleetaskprogress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.meleetaskprogress_);
  }
  if (meleetaskprogress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meleetaskprogress));
    if (message_arena != submessage_arena) {
      meleetaskprogress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meleetaskprogress, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.meleetaskprogress_ = meleetaskprogress;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.MeleeTaskProgress)
}

// .msg.CSNtfSetTeamMode SetTeamMode = 49;
inline bool CSNtfBody::_internal_has_setteammode() const {
  return this != internal_default_instance() && _impl_.setteammode_ != nullptr;
}
inline bool CSNtfBody::has_setteammode() const {
  return _internal_has_setteammode();
}
inline const ::msg::CSNtfSetTeamMode& CSNtfBody::_internal_setteammode() const {
  const ::msg::CSNtfSetTeamMode* p = _impl_.setteammode_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfSetTeamMode&>(
      ::msg::_CSNtfSetTeamMode_default_instance_);
}
inline const ::msg::CSNtfSetTeamMode& CSNtfBody::setteammode() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.SetTeamMode)
  return _internal_setteammode();
}
inline void CSNtfBody::unsafe_arena_set_allocated_setteammode(
    ::msg::CSNtfSetTeamMode* setteammode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setteammode_);
  }
  _impl_.setteammode_ = setteammode;
  if (setteammode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.SetTeamMode)
}
inline ::msg::CSNtfSetTeamMode* CSNtfBody::release_setteammode() {
  
  ::msg::CSNtfSetTeamMode* temp = _impl_.setteammode_;
  _impl_.setteammode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfSetTeamMode* CSNtfBody::unsafe_arena_release_setteammode() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.SetTeamMode)
  
  ::msg::CSNtfSetTeamMode* temp = _impl_.setteammode_;
  _impl_.setteammode_ = nullptr;
  return temp;
}
inline ::msg::CSNtfSetTeamMode* CSNtfBody::_internal_mutable_setteammode() {
  
  if (_impl_.setteammode_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfSetTeamMode>(GetArenaForAllocation());
    _impl_.setteammode_ = p;
  }
  return _impl_.setteammode_;
}
inline ::msg::CSNtfSetTeamMode* CSNtfBody::mutable_setteammode() {
  ::msg::CSNtfSetTeamMode* _msg = _internal_mutable_setteammode();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.SetTeamMode)
  return _msg;
}
inline void CSNtfBody::set_allocated_setteammode(::msg::CSNtfSetTeamMode* setteammode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.setteammode_);
  }
  if (setteammode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(setteammode));
    if (message_arena != submessage_arena) {
      setteammode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setteammode, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.setteammode_ = setteammode;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.SetTeamMode)
}

// .msg.CSNtfPassportOpen PassportOpen = 50;
inline bool CSNtfBody::_internal_has_passportopen() const {
  return this != internal_default_instance() && _impl_.passportopen_ != nullptr;
}
inline bool CSNtfBody::has_passportopen() const {
  return _internal_has_passportopen();
}
inline const ::msg::CSNtfPassportOpen& CSNtfBody::_internal_passportopen() const {
  const ::msg::CSNtfPassportOpen* p = _impl_.passportopen_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPassportOpen&>(
      ::msg::_CSNtfPassportOpen_default_instance_);
}
inline const ::msg::CSNtfPassportOpen& CSNtfBody::passportopen() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PassportOpen)
  return _internal_passportopen();
}
inline void CSNtfBody::unsafe_arena_set_allocated_passportopen(
    ::msg::CSNtfPassportOpen* passportopen) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passportopen_);
  }
  _impl_.passportopen_ = passportopen;
  if (passportopen) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PassportOpen)
}
inline ::msg::CSNtfPassportOpen* CSNtfBody::release_passportopen() {
  
  ::msg::CSNtfPassportOpen* temp = _impl_.passportopen_;
  _impl_.passportopen_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPassportOpen* CSNtfBody::unsafe_arena_release_passportopen() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PassportOpen)
  
  ::msg::CSNtfPassportOpen* temp = _impl_.passportopen_;
  _impl_.passportopen_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPassportOpen* CSNtfBody::_internal_mutable_passportopen() {
  
  if (_impl_.passportopen_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPassportOpen>(GetArenaForAllocation());
    _impl_.passportopen_ = p;
  }
  return _impl_.passportopen_;
}
inline ::msg::CSNtfPassportOpen* CSNtfBody::mutable_passportopen() {
  ::msg::CSNtfPassportOpen* _msg = _internal_mutable_passportopen();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PassportOpen)
  return _msg;
}
inline void CSNtfBody::set_allocated_passportopen(::msg::CSNtfPassportOpen* passportopen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passportopen_);
  }
  if (passportopen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(passportopen));
    if (message_arena != submessage_arena) {
      passportopen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, passportopen, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.passportopen_ = passportopen;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PassportOpen)
}

// .msg.CSNtfPassportClose PassportClose = 51;
inline bool CSNtfBody::_internal_has_passportclose() const {
  return this != internal_default_instance() && _impl_.passportclose_ != nullptr;
}
inline bool CSNtfBody::has_passportclose() const {
  return _internal_has_passportclose();
}
inline const ::msg::CSNtfPassportClose& CSNtfBody::_internal_passportclose() const {
  const ::msg::CSNtfPassportClose* p = _impl_.passportclose_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPassportClose&>(
      ::msg::_CSNtfPassportClose_default_instance_);
}
inline const ::msg::CSNtfPassportClose& CSNtfBody::passportclose() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PassportClose)
  return _internal_passportclose();
}
inline void CSNtfBody::unsafe_arena_set_allocated_passportclose(
    ::msg::CSNtfPassportClose* passportclose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passportclose_);
  }
  _impl_.passportclose_ = passportclose;
  if (passportclose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PassportClose)
}
inline ::msg::CSNtfPassportClose* CSNtfBody::release_passportclose() {
  
  ::msg::CSNtfPassportClose* temp = _impl_.passportclose_;
  _impl_.passportclose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPassportClose* CSNtfBody::unsafe_arena_release_passportclose() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PassportClose)
  
  ::msg::CSNtfPassportClose* temp = _impl_.passportclose_;
  _impl_.passportclose_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPassportClose* CSNtfBody::_internal_mutable_passportclose() {
  
  if (_impl_.passportclose_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPassportClose>(GetArenaForAllocation());
    _impl_.passportclose_ = p;
  }
  return _impl_.passportclose_;
}
inline ::msg::CSNtfPassportClose* CSNtfBody::mutable_passportclose() {
  ::msg::CSNtfPassportClose* _msg = _internal_mutable_passportclose();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PassportClose)
  return _msg;
}
inline void CSNtfBody::set_allocated_passportclose(::msg::CSNtfPassportClose* passportclose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passportclose_);
  }
  if (passportclose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(passportclose));
    if (message_arena != submessage_arena) {
      passportclose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, passportclose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.passportclose_ = passportclose;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PassportClose)
}

// .msg.CSNtfWeekIndex WeekIndex = 52;
inline bool CSNtfBody::_internal_has_weekindex() const {
  return this != internal_default_instance() && _impl_.weekindex_ != nullptr;
}
inline bool CSNtfBody::has_weekindex() const {
  return _internal_has_weekindex();
}
inline const ::msg::CSNtfWeekIndex& CSNtfBody::_internal_weekindex() const {
  const ::msg::CSNtfWeekIndex* p = _impl_.weekindex_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfWeekIndex&>(
      ::msg::_CSNtfWeekIndex_default_instance_);
}
inline const ::msg::CSNtfWeekIndex& CSNtfBody::weekindex() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.WeekIndex)
  return _internal_weekindex();
}
inline void CSNtfBody::unsafe_arena_set_allocated_weekindex(
    ::msg::CSNtfWeekIndex* weekindex) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weekindex_);
  }
  _impl_.weekindex_ = weekindex;
  if (weekindex) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.WeekIndex)
}
inline ::msg::CSNtfWeekIndex* CSNtfBody::release_weekindex() {
  
  ::msg::CSNtfWeekIndex* temp = _impl_.weekindex_;
  _impl_.weekindex_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfWeekIndex* CSNtfBody::unsafe_arena_release_weekindex() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.WeekIndex)
  
  ::msg::CSNtfWeekIndex* temp = _impl_.weekindex_;
  _impl_.weekindex_ = nullptr;
  return temp;
}
inline ::msg::CSNtfWeekIndex* CSNtfBody::_internal_mutable_weekindex() {
  
  if (_impl_.weekindex_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfWeekIndex>(GetArenaForAllocation());
    _impl_.weekindex_ = p;
  }
  return _impl_.weekindex_;
}
inline ::msg::CSNtfWeekIndex* CSNtfBody::mutable_weekindex() {
  ::msg::CSNtfWeekIndex* _msg = _internal_mutable_weekindex();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.WeekIndex)
  return _msg;
}
inline void CSNtfBody::set_allocated_weekindex(::msg::CSNtfWeekIndex* weekindex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weekindex_);
  }
  if (weekindex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weekindex));
    if (message_arena != submessage_arena) {
      weekindex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weekindex, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.weekindex_ = weekindex;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.WeekIndex)
}

// .msg.CSNtfPvpHistory PvpHistory = 53;
inline bool CSNtfBody::_internal_has_pvphistory() const {
  return this != internal_default_instance() && _impl_.pvphistory_ != nullptr;
}
inline bool CSNtfBody::has_pvphistory() const {
  return _internal_has_pvphistory();
}
inline const ::msg::CSNtfPvpHistory& CSNtfBody::_internal_pvphistory() const {
  const ::msg::CSNtfPvpHistory* p = _impl_.pvphistory_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPvpHistory&>(
      ::msg::_CSNtfPvpHistory_default_instance_);
}
inline const ::msg::CSNtfPvpHistory& CSNtfBody::pvphistory() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PvpHistory)
  return _internal_pvphistory();
}
inline void CSNtfBody::unsafe_arena_set_allocated_pvphistory(
    ::msg::CSNtfPvpHistory* pvphistory) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvphistory_);
  }
  _impl_.pvphistory_ = pvphistory;
  if (pvphistory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PvpHistory)
}
inline ::msg::CSNtfPvpHistory* CSNtfBody::release_pvphistory() {
  
  ::msg::CSNtfPvpHistory* temp = _impl_.pvphistory_;
  _impl_.pvphistory_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPvpHistory* CSNtfBody::unsafe_arena_release_pvphistory() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PvpHistory)
  
  ::msg::CSNtfPvpHistory* temp = _impl_.pvphistory_;
  _impl_.pvphistory_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPvpHistory* CSNtfBody::_internal_mutable_pvphistory() {
  
  if (_impl_.pvphistory_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPvpHistory>(GetArenaForAllocation());
    _impl_.pvphistory_ = p;
  }
  return _impl_.pvphistory_;
}
inline ::msg::CSNtfPvpHistory* CSNtfBody::mutable_pvphistory() {
  ::msg::CSNtfPvpHistory* _msg = _internal_mutable_pvphistory();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PvpHistory)
  return _msg;
}
inline void CSNtfBody::set_allocated_pvphistory(::msg::CSNtfPvpHistory* pvphistory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvphistory_);
  }
  if (pvphistory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvphistory));
    if (message_arena != submessage_arena) {
      pvphistory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvphistory, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvphistory_ = pvphistory;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PvpHistory)
}

// .msg.CSNtfTeamPvpEnd TeamPvpEnd = 54;
inline bool CSNtfBody::_internal_has_teampvpend() const {
  return this != internal_default_instance() && _impl_.teampvpend_ != nullptr;
}
inline bool CSNtfBody::has_teampvpend() const {
  return _internal_has_teampvpend();
}
inline const ::msg::CSNtfTeamPvpEnd& CSNtfBody::_internal_teampvpend() const {
  const ::msg::CSNtfTeamPvpEnd* p = _impl_.teampvpend_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfTeamPvpEnd&>(
      ::msg::_CSNtfTeamPvpEnd_default_instance_);
}
inline const ::msg::CSNtfTeamPvpEnd& CSNtfBody::teampvpend() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.TeamPvpEnd)
  return _internal_teampvpend();
}
inline void CSNtfBody::unsafe_arena_set_allocated_teampvpend(
    ::msg::CSNtfTeamPvpEnd* teampvpend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teampvpend_);
  }
  _impl_.teampvpend_ = teampvpend;
  if (teampvpend) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.TeamPvpEnd)
}
inline ::msg::CSNtfTeamPvpEnd* CSNtfBody::release_teampvpend() {
  
  ::msg::CSNtfTeamPvpEnd* temp = _impl_.teampvpend_;
  _impl_.teampvpend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfTeamPvpEnd* CSNtfBody::unsafe_arena_release_teampvpend() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.TeamPvpEnd)
  
  ::msg::CSNtfTeamPvpEnd* temp = _impl_.teampvpend_;
  _impl_.teampvpend_ = nullptr;
  return temp;
}
inline ::msg::CSNtfTeamPvpEnd* CSNtfBody::_internal_mutable_teampvpend() {
  
  if (_impl_.teampvpend_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfTeamPvpEnd>(GetArenaForAllocation());
    _impl_.teampvpend_ = p;
  }
  return _impl_.teampvpend_;
}
inline ::msg::CSNtfTeamPvpEnd* CSNtfBody::mutable_teampvpend() {
  ::msg::CSNtfTeamPvpEnd* _msg = _internal_mutable_teampvpend();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.TeamPvpEnd)
  return _msg;
}
inline void CSNtfBody::set_allocated_teampvpend(::msg::CSNtfTeamPvpEnd* teampvpend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teampvpend_);
  }
  if (teampvpend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teampvpend));
    if (message_arena != submessage_arena) {
      teampvpend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teampvpend, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.teampvpend_ = teampvpend;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.TeamPvpEnd)
}

// .msg.CSNtfProbeNetDelay ProbeNetDelay = 55;
inline bool CSNtfBody::_internal_has_probenetdelay() const {
  return this != internal_default_instance() && _impl_.probenetdelay_ != nullptr;
}
inline bool CSNtfBody::has_probenetdelay() const {
  return _internal_has_probenetdelay();
}
inline const ::msg::CSNtfProbeNetDelay& CSNtfBody::_internal_probenetdelay() const {
  const ::msg::CSNtfProbeNetDelay* p = _impl_.probenetdelay_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfProbeNetDelay&>(
      ::msg::_CSNtfProbeNetDelay_default_instance_);
}
inline const ::msg::CSNtfProbeNetDelay& CSNtfBody::probenetdelay() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.ProbeNetDelay)
  return _internal_probenetdelay();
}
inline void CSNtfBody::unsafe_arena_set_allocated_probenetdelay(
    ::msg::CSNtfProbeNetDelay* probenetdelay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.probenetdelay_);
  }
  _impl_.probenetdelay_ = probenetdelay;
  if (probenetdelay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.ProbeNetDelay)
}
inline ::msg::CSNtfProbeNetDelay* CSNtfBody::release_probenetdelay() {
  
  ::msg::CSNtfProbeNetDelay* temp = _impl_.probenetdelay_;
  _impl_.probenetdelay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfProbeNetDelay* CSNtfBody::unsafe_arena_release_probenetdelay() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.ProbeNetDelay)
  
  ::msg::CSNtfProbeNetDelay* temp = _impl_.probenetdelay_;
  _impl_.probenetdelay_ = nullptr;
  return temp;
}
inline ::msg::CSNtfProbeNetDelay* CSNtfBody::_internal_mutable_probenetdelay() {
  
  if (_impl_.probenetdelay_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfProbeNetDelay>(GetArenaForAllocation());
    _impl_.probenetdelay_ = p;
  }
  return _impl_.probenetdelay_;
}
inline ::msg::CSNtfProbeNetDelay* CSNtfBody::mutable_probenetdelay() {
  ::msg::CSNtfProbeNetDelay* _msg = _internal_mutable_probenetdelay();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.ProbeNetDelay)
  return _msg;
}
inline void CSNtfBody::set_allocated_probenetdelay(::msg::CSNtfProbeNetDelay* probenetdelay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.probenetdelay_);
  }
  if (probenetdelay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(probenetdelay));
    if (message_arena != submessage_arena) {
      probenetdelay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, probenetdelay, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.probenetdelay_ = probenetdelay;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.ProbeNetDelay)
}

// .msg.CSNtfRefreshGoods RefreshGoods = 56;
inline bool CSNtfBody::_internal_has_refreshgoods() const {
  return this != internal_default_instance() && _impl_.refreshgoods_ != nullptr;
}
inline bool CSNtfBody::has_refreshgoods() const {
  return _internal_has_refreshgoods();
}
inline const ::msg::CSNtfRefreshGoods& CSNtfBody::_internal_refreshgoods() const {
  const ::msg::CSNtfRefreshGoods* p = _impl_.refreshgoods_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfRefreshGoods&>(
      ::msg::_CSNtfRefreshGoods_default_instance_);
}
inline const ::msg::CSNtfRefreshGoods& CSNtfBody::refreshgoods() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.RefreshGoods)
  return _internal_refreshgoods();
}
inline void CSNtfBody::unsafe_arena_set_allocated_refreshgoods(
    ::msg::CSNtfRefreshGoods* refreshgoods) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refreshgoods_);
  }
  _impl_.refreshgoods_ = refreshgoods;
  if (refreshgoods) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.RefreshGoods)
}
inline ::msg::CSNtfRefreshGoods* CSNtfBody::release_refreshgoods() {
  
  ::msg::CSNtfRefreshGoods* temp = _impl_.refreshgoods_;
  _impl_.refreshgoods_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfRefreshGoods* CSNtfBody::unsafe_arena_release_refreshgoods() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.RefreshGoods)
  
  ::msg::CSNtfRefreshGoods* temp = _impl_.refreshgoods_;
  _impl_.refreshgoods_ = nullptr;
  return temp;
}
inline ::msg::CSNtfRefreshGoods* CSNtfBody::_internal_mutable_refreshgoods() {
  
  if (_impl_.refreshgoods_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfRefreshGoods>(GetArenaForAllocation());
    _impl_.refreshgoods_ = p;
  }
  return _impl_.refreshgoods_;
}
inline ::msg::CSNtfRefreshGoods* CSNtfBody::mutable_refreshgoods() {
  ::msg::CSNtfRefreshGoods* _msg = _internal_mutable_refreshgoods();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.RefreshGoods)
  return _msg;
}
inline void CSNtfBody::set_allocated_refreshgoods(::msg::CSNtfRefreshGoods* refreshgoods) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refreshgoods_);
  }
  if (refreshgoods) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(refreshgoods));
    if (message_arena != submessage_arena) {
      refreshgoods = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, refreshgoods, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.refreshgoods_ = refreshgoods;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.RefreshGoods)
}

// .msg.CSNtfRemoveEggs RemoveEggs = 57;
inline bool CSNtfBody::_internal_has_removeeggs() const {
  return this != internal_default_instance() && _impl_.removeeggs_ != nullptr;
}
inline bool CSNtfBody::has_removeeggs() const {
  return _internal_has_removeeggs();
}
inline const ::msg::CSNtfRemoveEggs& CSNtfBody::_internal_removeeggs() const {
  const ::msg::CSNtfRemoveEggs* p = _impl_.removeeggs_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfRemoveEggs&>(
      ::msg::_CSNtfRemoveEggs_default_instance_);
}
inline const ::msg::CSNtfRemoveEggs& CSNtfBody::removeeggs() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.RemoveEggs)
  return _internal_removeeggs();
}
inline void CSNtfBody::unsafe_arena_set_allocated_removeeggs(
    ::msg::CSNtfRemoveEggs* removeeggs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removeeggs_);
  }
  _impl_.removeeggs_ = removeeggs;
  if (removeeggs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.RemoveEggs)
}
inline ::msg::CSNtfRemoveEggs* CSNtfBody::release_removeeggs() {
  
  ::msg::CSNtfRemoveEggs* temp = _impl_.removeeggs_;
  _impl_.removeeggs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfRemoveEggs* CSNtfBody::unsafe_arena_release_removeeggs() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.RemoveEggs)
  
  ::msg::CSNtfRemoveEggs* temp = _impl_.removeeggs_;
  _impl_.removeeggs_ = nullptr;
  return temp;
}
inline ::msg::CSNtfRemoveEggs* CSNtfBody::_internal_mutable_removeeggs() {
  
  if (_impl_.removeeggs_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfRemoveEggs>(GetArenaForAllocation());
    _impl_.removeeggs_ = p;
  }
  return _impl_.removeeggs_;
}
inline ::msg::CSNtfRemoveEggs* CSNtfBody::mutable_removeeggs() {
  ::msg::CSNtfRemoveEggs* _msg = _internal_mutable_removeeggs();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.RemoveEggs)
  return _msg;
}
inline void CSNtfBody::set_allocated_removeeggs(::msg::CSNtfRemoveEggs* removeeggs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removeeggs_);
  }
  if (removeeggs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removeeggs));
    if (message_arena != submessage_arena) {
      removeeggs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removeeggs, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.removeeggs_ = removeeggs;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.RemoveEggs)
}

// .msg.CSNtfSwitchSet SwitchSet = 58;
inline bool CSNtfBody::_internal_has_switchset() const {
  return this != internal_default_instance() && _impl_.switchset_ != nullptr;
}
inline bool CSNtfBody::has_switchset() const {
  return _internal_has_switchset();
}
inline const ::msg::CSNtfSwitchSet& CSNtfBody::_internal_switchset() const {
  const ::msg::CSNtfSwitchSet* p = _impl_.switchset_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfSwitchSet&>(
      ::msg::_CSNtfSwitchSet_default_instance_);
}
inline const ::msg::CSNtfSwitchSet& CSNtfBody::switchset() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.SwitchSet)
  return _internal_switchset();
}
inline void CSNtfBody::unsafe_arena_set_allocated_switchset(
    ::msg::CSNtfSwitchSet* switchset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.switchset_);
  }
  _impl_.switchset_ = switchset;
  if (switchset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.SwitchSet)
}
inline ::msg::CSNtfSwitchSet* CSNtfBody::release_switchset() {
  
  ::msg::CSNtfSwitchSet* temp = _impl_.switchset_;
  _impl_.switchset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfSwitchSet* CSNtfBody::unsafe_arena_release_switchset() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.SwitchSet)
  
  ::msg::CSNtfSwitchSet* temp = _impl_.switchset_;
  _impl_.switchset_ = nullptr;
  return temp;
}
inline ::msg::CSNtfSwitchSet* CSNtfBody::_internal_mutable_switchset() {
  
  if (_impl_.switchset_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfSwitchSet>(GetArenaForAllocation());
    _impl_.switchset_ = p;
  }
  return _impl_.switchset_;
}
inline ::msg::CSNtfSwitchSet* CSNtfBody::mutable_switchset() {
  ::msg::CSNtfSwitchSet* _msg = _internal_mutable_switchset();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.SwitchSet)
  return _msg;
}
inline void CSNtfBody::set_allocated_switchset(::msg::CSNtfSwitchSet* switchset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.switchset_);
  }
  if (switchset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(switchset));
    if (message_arena != submessage_arena) {
      switchset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, switchset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.switchset_ = switchset;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.SwitchSet)
}

// .msg.CSNtfBlacklist Blacklist = 59;
inline bool CSNtfBody::_internal_has_blacklist() const {
  return this != internal_default_instance() && _impl_.blacklist_ != nullptr;
}
inline bool CSNtfBody::has_blacklist() const {
  return _internal_has_blacklist();
}
inline const ::msg::CSNtfBlacklist& CSNtfBody::_internal_blacklist() const {
  const ::msg::CSNtfBlacklist* p = _impl_.blacklist_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfBlacklist&>(
      ::msg::_CSNtfBlacklist_default_instance_);
}
inline const ::msg::CSNtfBlacklist& CSNtfBody::blacklist() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.Blacklist)
  return _internal_blacklist();
}
inline void CSNtfBody::unsafe_arena_set_allocated_blacklist(
    ::msg::CSNtfBlacklist* blacklist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blacklist_);
  }
  _impl_.blacklist_ = blacklist;
  if (blacklist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.Blacklist)
}
inline ::msg::CSNtfBlacklist* CSNtfBody::release_blacklist() {
  
  ::msg::CSNtfBlacklist* temp = _impl_.blacklist_;
  _impl_.blacklist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfBlacklist* CSNtfBody::unsafe_arena_release_blacklist() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.Blacklist)
  
  ::msg::CSNtfBlacklist* temp = _impl_.blacklist_;
  _impl_.blacklist_ = nullptr;
  return temp;
}
inline ::msg::CSNtfBlacklist* CSNtfBody::_internal_mutable_blacklist() {
  
  if (_impl_.blacklist_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfBlacklist>(GetArenaForAllocation());
    _impl_.blacklist_ = p;
  }
  return _impl_.blacklist_;
}
inline ::msg::CSNtfBlacklist* CSNtfBody::mutable_blacklist() {
  ::msg::CSNtfBlacklist* _msg = _internal_mutable_blacklist();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.Blacklist)
  return _msg;
}
inline void CSNtfBody::set_allocated_blacklist(::msg::CSNtfBlacklist* blacklist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blacklist_);
  }
  if (blacklist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blacklist));
    if (message_arena != submessage_arena) {
      blacklist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blacklist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.blacklist_ = blacklist;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.Blacklist)
}

// .msg.CSNtfBindPhoneNumberSwitch BindPhoneNumberSwitch = 60;
inline bool CSNtfBody::_internal_has_bindphonenumberswitch() const {
  return this != internal_default_instance() && _impl_.bindphonenumberswitch_ != nullptr;
}
inline bool CSNtfBody::has_bindphonenumberswitch() const {
  return _internal_has_bindphonenumberswitch();
}
inline const ::msg::CSNtfBindPhoneNumberSwitch& CSNtfBody::_internal_bindphonenumberswitch() const {
  const ::msg::CSNtfBindPhoneNumberSwitch* p = _impl_.bindphonenumberswitch_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfBindPhoneNumberSwitch&>(
      ::msg::_CSNtfBindPhoneNumberSwitch_default_instance_);
}
inline const ::msg::CSNtfBindPhoneNumberSwitch& CSNtfBody::bindphonenumberswitch() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.BindPhoneNumberSwitch)
  return _internal_bindphonenumberswitch();
}
inline void CSNtfBody::unsafe_arena_set_allocated_bindphonenumberswitch(
    ::msg::CSNtfBindPhoneNumberSwitch* bindphonenumberswitch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindphonenumberswitch_);
  }
  _impl_.bindphonenumberswitch_ = bindphonenumberswitch;
  if (bindphonenumberswitch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.BindPhoneNumberSwitch)
}
inline ::msg::CSNtfBindPhoneNumberSwitch* CSNtfBody::release_bindphonenumberswitch() {
  
  ::msg::CSNtfBindPhoneNumberSwitch* temp = _impl_.bindphonenumberswitch_;
  _impl_.bindphonenumberswitch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfBindPhoneNumberSwitch* CSNtfBody::unsafe_arena_release_bindphonenumberswitch() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.BindPhoneNumberSwitch)
  
  ::msg::CSNtfBindPhoneNumberSwitch* temp = _impl_.bindphonenumberswitch_;
  _impl_.bindphonenumberswitch_ = nullptr;
  return temp;
}
inline ::msg::CSNtfBindPhoneNumberSwitch* CSNtfBody::_internal_mutable_bindphonenumberswitch() {
  
  if (_impl_.bindphonenumberswitch_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfBindPhoneNumberSwitch>(GetArenaForAllocation());
    _impl_.bindphonenumberswitch_ = p;
  }
  return _impl_.bindphonenumberswitch_;
}
inline ::msg::CSNtfBindPhoneNumberSwitch* CSNtfBody::mutable_bindphonenumberswitch() {
  ::msg::CSNtfBindPhoneNumberSwitch* _msg = _internal_mutable_bindphonenumberswitch();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.BindPhoneNumberSwitch)
  return _msg;
}
inline void CSNtfBody::set_allocated_bindphonenumberswitch(::msg::CSNtfBindPhoneNumberSwitch* bindphonenumberswitch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindphonenumberswitch_);
  }
  if (bindphonenumberswitch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bindphonenumberswitch));
    if (message_arena != submessage_arena) {
      bindphonenumberswitch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bindphonenumberswitch, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bindphonenumberswitch_ = bindphonenumberswitch;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.BindPhoneNumberSwitch)
}

// .msg.CSNtfWorldInvite WorldInvite = 61;
inline bool CSNtfBody::_internal_has_worldinvite() const {
  return this != internal_default_instance() && _impl_.worldinvite_ != nullptr;
}
inline bool CSNtfBody::has_worldinvite() const {
  return _internal_has_worldinvite();
}
inline const ::msg::CSNtfWorldInvite& CSNtfBody::_internal_worldinvite() const {
  const ::msg::CSNtfWorldInvite* p = _impl_.worldinvite_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfWorldInvite&>(
      ::msg::_CSNtfWorldInvite_default_instance_);
}
inline const ::msg::CSNtfWorldInvite& CSNtfBody::worldinvite() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.WorldInvite)
  return _internal_worldinvite();
}
inline void CSNtfBody::unsafe_arena_set_allocated_worldinvite(
    ::msg::CSNtfWorldInvite* worldinvite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.worldinvite_);
  }
  _impl_.worldinvite_ = worldinvite;
  if (worldinvite) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.WorldInvite)
}
inline ::msg::CSNtfWorldInvite* CSNtfBody::release_worldinvite() {
  
  ::msg::CSNtfWorldInvite* temp = _impl_.worldinvite_;
  _impl_.worldinvite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfWorldInvite* CSNtfBody::unsafe_arena_release_worldinvite() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.WorldInvite)
  
  ::msg::CSNtfWorldInvite* temp = _impl_.worldinvite_;
  _impl_.worldinvite_ = nullptr;
  return temp;
}
inline ::msg::CSNtfWorldInvite* CSNtfBody::_internal_mutable_worldinvite() {
  
  if (_impl_.worldinvite_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfWorldInvite>(GetArenaForAllocation());
    _impl_.worldinvite_ = p;
  }
  return _impl_.worldinvite_;
}
inline ::msg::CSNtfWorldInvite* CSNtfBody::mutable_worldinvite() {
  ::msg::CSNtfWorldInvite* _msg = _internal_mutable_worldinvite();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.WorldInvite)
  return _msg;
}
inline void CSNtfBody::set_allocated_worldinvite(::msg::CSNtfWorldInvite* worldinvite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.worldinvite_);
  }
  if (worldinvite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(worldinvite));
    if (message_arena != submessage_arena) {
      worldinvite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, worldinvite, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.worldinvite_ = worldinvite;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.WorldInvite)
}

// .msg.CSNtfMallNotice MallNotice = 62;
inline bool CSNtfBody::_internal_has_mallnotice() const {
  return this != internal_default_instance() && _impl_.mallnotice_ != nullptr;
}
inline bool CSNtfBody::has_mallnotice() const {
  return _internal_has_mallnotice();
}
inline const ::msg::CSNtfMallNotice& CSNtfBody::_internal_mallnotice() const {
  const ::msg::CSNtfMallNotice* p = _impl_.mallnotice_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfMallNotice&>(
      ::msg::_CSNtfMallNotice_default_instance_);
}
inline const ::msg::CSNtfMallNotice& CSNtfBody::mallnotice() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.MallNotice)
  return _internal_mallnotice();
}
inline void CSNtfBody::unsafe_arena_set_allocated_mallnotice(
    ::msg::CSNtfMallNotice* mallnotice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mallnotice_);
  }
  _impl_.mallnotice_ = mallnotice;
  if (mallnotice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.MallNotice)
}
inline ::msg::CSNtfMallNotice* CSNtfBody::release_mallnotice() {
  
  ::msg::CSNtfMallNotice* temp = _impl_.mallnotice_;
  _impl_.mallnotice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfMallNotice* CSNtfBody::unsafe_arena_release_mallnotice() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.MallNotice)
  
  ::msg::CSNtfMallNotice* temp = _impl_.mallnotice_;
  _impl_.mallnotice_ = nullptr;
  return temp;
}
inline ::msg::CSNtfMallNotice* CSNtfBody::_internal_mutable_mallnotice() {
  
  if (_impl_.mallnotice_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfMallNotice>(GetArenaForAllocation());
    _impl_.mallnotice_ = p;
  }
  return _impl_.mallnotice_;
}
inline ::msg::CSNtfMallNotice* CSNtfBody::mutable_mallnotice() {
  ::msg::CSNtfMallNotice* _msg = _internal_mutable_mallnotice();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.MallNotice)
  return _msg;
}
inline void CSNtfBody::set_allocated_mallnotice(::msg::CSNtfMallNotice* mallnotice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mallnotice_);
  }
  if (mallnotice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mallnotice));
    if (message_arena != submessage_arena) {
      mallnotice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mallnotice, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mallnotice_ = mallnotice;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.MallNotice)
}

// .msg.CSNtfPrivilege Privilege = 63;
inline bool CSNtfBody::_internal_has_privilege() const {
  return this != internal_default_instance() && _impl_.privilege_ != nullptr;
}
inline bool CSNtfBody::has_privilege() const {
  return _internal_has_privilege();
}
inline const ::msg::CSNtfPrivilege& CSNtfBody::_internal_privilege() const {
  const ::msg::CSNtfPrivilege* p = _impl_.privilege_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPrivilege&>(
      ::msg::_CSNtfPrivilege_default_instance_);
}
inline const ::msg::CSNtfPrivilege& CSNtfBody::privilege() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.Privilege)
  return _internal_privilege();
}
inline void CSNtfBody::unsafe_arena_set_allocated_privilege(
    ::msg::CSNtfPrivilege* privilege) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.privilege_);
  }
  _impl_.privilege_ = privilege;
  if (privilege) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.Privilege)
}
inline ::msg::CSNtfPrivilege* CSNtfBody::release_privilege() {
  
  ::msg::CSNtfPrivilege* temp = _impl_.privilege_;
  _impl_.privilege_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPrivilege* CSNtfBody::unsafe_arena_release_privilege() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.Privilege)
  
  ::msg::CSNtfPrivilege* temp = _impl_.privilege_;
  _impl_.privilege_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPrivilege* CSNtfBody::_internal_mutable_privilege() {
  
  if (_impl_.privilege_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPrivilege>(GetArenaForAllocation());
    _impl_.privilege_ = p;
  }
  return _impl_.privilege_;
}
inline ::msg::CSNtfPrivilege* CSNtfBody::mutable_privilege() {
  ::msg::CSNtfPrivilege* _msg = _internal_mutable_privilege();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.Privilege)
  return _msg;
}
inline void CSNtfBody::set_allocated_privilege(::msg::CSNtfPrivilege* privilege) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.privilege_);
  }
  if (privilege) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(privilege));
    if (message_arena != submessage_arena) {
      privilege = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, privilege, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.privilege_ = privilege;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.Privilege)
}

// .msg.CSNtfAARemind AARemind = 64;
inline bool CSNtfBody::_internal_has_aaremind() const {
  return this != internal_default_instance() && _impl_.aaremind_ != nullptr;
}
inline bool CSNtfBody::has_aaremind() const {
  return _internal_has_aaremind();
}
inline const ::msg::CSNtfAARemind& CSNtfBody::_internal_aaremind() const {
  const ::msg::CSNtfAARemind* p = _impl_.aaremind_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfAARemind&>(
      ::msg::_CSNtfAARemind_default_instance_);
}
inline const ::msg::CSNtfAARemind& CSNtfBody::aaremind() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.AARemind)
  return _internal_aaremind();
}
inline void CSNtfBody::unsafe_arena_set_allocated_aaremind(
    ::msg::CSNtfAARemind* aaremind) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aaremind_);
  }
  _impl_.aaremind_ = aaremind;
  if (aaremind) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.AARemind)
}
inline ::msg::CSNtfAARemind* CSNtfBody::release_aaremind() {
  
  ::msg::CSNtfAARemind* temp = _impl_.aaremind_;
  _impl_.aaremind_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfAARemind* CSNtfBody::unsafe_arena_release_aaremind() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.AARemind)
  
  ::msg::CSNtfAARemind* temp = _impl_.aaremind_;
  _impl_.aaremind_ = nullptr;
  return temp;
}
inline ::msg::CSNtfAARemind* CSNtfBody::_internal_mutable_aaremind() {
  
  if (_impl_.aaremind_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfAARemind>(GetArenaForAllocation());
    _impl_.aaremind_ = p;
  }
  return _impl_.aaremind_;
}
inline ::msg::CSNtfAARemind* CSNtfBody::mutable_aaremind() {
  ::msg::CSNtfAARemind* _msg = _internal_mutable_aaremind();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.AARemind)
  return _msg;
}
inline void CSNtfBody::set_allocated_aaremind(::msg::CSNtfAARemind* aaremind) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aaremind_);
  }
  if (aaremind) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aaremind));
    if (message_arena != submessage_arena) {
      aaremind = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aaremind, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.aaremind_ = aaremind;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.AARemind)
}

// .msg.CSNtfAABan AABan = 65;
inline bool CSNtfBody::_internal_has_aaban() const {
  return this != internal_default_instance() && _impl_.aaban_ != nullptr;
}
inline bool CSNtfBody::has_aaban() const {
  return _internal_has_aaban();
}
inline const ::msg::CSNtfAABan& CSNtfBody::_internal_aaban() const {
  const ::msg::CSNtfAABan* p = _impl_.aaban_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfAABan&>(
      ::msg::_CSNtfAABan_default_instance_);
}
inline const ::msg::CSNtfAABan& CSNtfBody::aaban() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.AABan)
  return _internal_aaban();
}
inline void CSNtfBody::unsafe_arena_set_allocated_aaban(
    ::msg::CSNtfAABan* aaban) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aaban_);
  }
  _impl_.aaban_ = aaban;
  if (aaban) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.AABan)
}
inline ::msg::CSNtfAABan* CSNtfBody::release_aaban() {
  
  ::msg::CSNtfAABan* temp = _impl_.aaban_;
  _impl_.aaban_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfAABan* CSNtfBody::unsafe_arena_release_aaban() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.AABan)
  
  ::msg::CSNtfAABan* temp = _impl_.aaban_;
  _impl_.aaban_ = nullptr;
  return temp;
}
inline ::msg::CSNtfAABan* CSNtfBody::_internal_mutable_aaban() {
  
  if (_impl_.aaban_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfAABan>(GetArenaForAllocation());
    _impl_.aaban_ = p;
  }
  return _impl_.aaban_;
}
inline ::msg::CSNtfAABan* CSNtfBody::mutable_aaban() {
  ::msg::CSNtfAABan* _msg = _internal_mutable_aaban();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.AABan)
  return _msg;
}
inline void CSNtfBody::set_allocated_aaban(::msg::CSNtfAABan* aaban) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aaban_);
  }
  if (aaban) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aaban));
    if (message_arena != submessage_arena) {
      aaban = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aaban, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.aaban_ = aaban;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.AABan)
}

// .msg.CSNtfAAVerify AAVerify = 66;
inline bool CSNtfBody::_internal_has_aaverify() const {
  return this != internal_default_instance() && _impl_.aaverify_ != nullptr;
}
inline bool CSNtfBody::has_aaverify() const {
  return _internal_has_aaverify();
}
inline const ::msg::CSNtfAAVerify& CSNtfBody::_internal_aaverify() const {
  const ::msg::CSNtfAAVerify* p = _impl_.aaverify_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfAAVerify&>(
      ::msg::_CSNtfAAVerify_default_instance_);
}
inline const ::msg::CSNtfAAVerify& CSNtfBody::aaverify() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.AAVerify)
  return _internal_aaverify();
}
inline void CSNtfBody::unsafe_arena_set_allocated_aaverify(
    ::msg::CSNtfAAVerify* aaverify) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aaverify_);
  }
  _impl_.aaverify_ = aaverify;
  if (aaverify) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.AAVerify)
}
inline ::msg::CSNtfAAVerify* CSNtfBody::release_aaverify() {
  
  ::msg::CSNtfAAVerify* temp = _impl_.aaverify_;
  _impl_.aaverify_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfAAVerify* CSNtfBody::unsafe_arena_release_aaverify() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.AAVerify)
  
  ::msg::CSNtfAAVerify* temp = _impl_.aaverify_;
  _impl_.aaverify_ = nullptr;
  return temp;
}
inline ::msg::CSNtfAAVerify* CSNtfBody::_internal_mutable_aaverify() {
  
  if (_impl_.aaverify_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfAAVerify>(GetArenaForAllocation());
    _impl_.aaverify_ = p;
  }
  return _impl_.aaverify_;
}
inline ::msg::CSNtfAAVerify* CSNtfBody::mutable_aaverify() {
  ::msg::CSNtfAAVerify* _msg = _internal_mutable_aaverify();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.AAVerify)
  return _msg;
}
inline void CSNtfBody::set_allocated_aaverify(::msg::CSNtfAAVerify* aaverify) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aaverify_);
  }
  if (aaverify) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aaverify));
    if (message_arena != submessage_arena) {
      aaverify = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aaverify, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.aaverify_ = aaverify;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.AAVerify)
}

// .msg.CSNtfPhoneNumber PhoneNumber = 67;
inline bool CSNtfBody::_internal_has_phonenumber() const {
  return this != internal_default_instance() && _impl_.phonenumber_ != nullptr;
}
inline bool CSNtfBody::has_phonenumber() const {
  return _internal_has_phonenumber();
}
inline const ::msg::CSNtfPhoneNumber& CSNtfBody::_internal_phonenumber() const {
  const ::msg::CSNtfPhoneNumber* p = _impl_.phonenumber_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPhoneNumber&>(
      ::msg::_CSNtfPhoneNumber_default_instance_);
}
inline const ::msg::CSNtfPhoneNumber& CSNtfBody::phonenumber() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PhoneNumber)
  return _internal_phonenumber();
}
inline void CSNtfBody::unsafe_arena_set_allocated_phonenumber(
    ::msg::CSNtfPhoneNumber* phonenumber) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phonenumber_);
  }
  _impl_.phonenumber_ = phonenumber;
  if (phonenumber) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PhoneNumber)
}
inline ::msg::CSNtfPhoneNumber* CSNtfBody::release_phonenumber() {
  
  ::msg::CSNtfPhoneNumber* temp = _impl_.phonenumber_;
  _impl_.phonenumber_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPhoneNumber* CSNtfBody::unsafe_arena_release_phonenumber() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PhoneNumber)
  
  ::msg::CSNtfPhoneNumber* temp = _impl_.phonenumber_;
  _impl_.phonenumber_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPhoneNumber* CSNtfBody::_internal_mutable_phonenumber() {
  
  if (_impl_.phonenumber_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPhoneNumber>(GetArenaForAllocation());
    _impl_.phonenumber_ = p;
  }
  return _impl_.phonenumber_;
}
inline ::msg::CSNtfPhoneNumber* CSNtfBody::mutable_phonenumber() {
  ::msg::CSNtfPhoneNumber* _msg = _internal_mutable_phonenumber();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PhoneNumber)
  return _msg;
}
inline void CSNtfBody::set_allocated_phonenumber(::msg::CSNtfPhoneNumber* phonenumber) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.phonenumber_);
  }
  if (phonenumber) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phonenumber));
    if (message_arena != submessage_arena) {
      phonenumber = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phonenumber, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.phonenumber_ = phonenumber;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PhoneNumber)
}

// .msg.CSNtfAntiCallBack AntiCallBack = 68;
inline bool CSNtfBody::_internal_has_anticallback() const {
  return this != internal_default_instance() && _impl_.anticallback_ != nullptr;
}
inline bool CSNtfBody::has_anticallback() const {
  return _internal_has_anticallback();
}
inline const ::msg::CSNtfAntiCallBack& CSNtfBody::_internal_anticallback() const {
  const ::msg::CSNtfAntiCallBack* p = _impl_.anticallback_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfAntiCallBack&>(
      ::msg::_CSNtfAntiCallBack_default_instance_);
}
inline const ::msg::CSNtfAntiCallBack& CSNtfBody::anticallback() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.AntiCallBack)
  return _internal_anticallback();
}
inline void CSNtfBody::unsafe_arena_set_allocated_anticallback(
    ::msg::CSNtfAntiCallBack* anticallback) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anticallback_);
  }
  _impl_.anticallback_ = anticallback;
  if (anticallback) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.AntiCallBack)
}
inline ::msg::CSNtfAntiCallBack* CSNtfBody::release_anticallback() {
  
  ::msg::CSNtfAntiCallBack* temp = _impl_.anticallback_;
  _impl_.anticallback_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfAntiCallBack* CSNtfBody::unsafe_arena_release_anticallback() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.AntiCallBack)
  
  ::msg::CSNtfAntiCallBack* temp = _impl_.anticallback_;
  _impl_.anticallback_ = nullptr;
  return temp;
}
inline ::msg::CSNtfAntiCallBack* CSNtfBody::_internal_mutable_anticallback() {
  
  if (_impl_.anticallback_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfAntiCallBack>(GetArenaForAllocation());
    _impl_.anticallback_ = p;
  }
  return _impl_.anticallback_;
}
inline ::msg::CSNtfAntiCallBack* CSNtfBody::mutable_anticallback() {
  ::msg::CSNtfAntiCallBack* _msg = _internal_mutable_anticallback();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.AntiCallBack)
  return _msg;
}
inline void CSNtfBody::set_allocated_anticallback(::msg::CSNtfAntiCallBack* anticallback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anticallback_);
  }
  if (anticallback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anticallback));
    if (message_arena != submessage_arena) {
      anticallback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anticallback, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.anticallback_ = anticallback;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.AntiCallBack)
}

// .msg.CSNtfFortuneBagTime FortuneBagTime = 69;
inline bool CSNtfBody::_internal_has_fortunebagtime() const {
  return this != internal_default_instance() && _impl_.fortunebagtime_ != nullptr;
}
inline bool CSNtfBody::has_fortunebagtime() const {
  return _internal_has_fortunebagtime();
}
inline const ::msg::CSNtfFortuneBagTime& CSNtfBody::_internal_fortunebagtime() const {
  const ::msg::CSNtfFortuneBagTime* p = _impl_.fortunebagtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfFortuneBagTime&>(
      ::msg::_CSNtfFortuneBagTime_default_instance_);
}
inline const ::msg::CSNtfFortuneBagTime& CSNtfBody::fortunebagtime() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.FortuneBagTime)
  return _internal_fortunebagtime();
}
inline void CSNtfBody::unsafe_arena_set_allocated_fortunebagtime(
    ::msg::CSNtfFortuneBagTime* fortunebagtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fortunebagtime_);
  }
  _impl_.fortunebagtime_ = fortunebagtime;
  if (fortunebagtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.FortuneBagTime)
}
inline ::msg::CSNtfFortuneBagTime* CSNtfBody::release_fortunebagtime() {
  
  ::msg::CSNtfFortuneBagTime* temp = _impl_.fortunebagtime_;
  _impl_.fortunebagtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfFortuneBagTime* CSNtfBody::unsafe_arena_release_fortunebagtime() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.FortuneBagTime)
  
  ::msg::CSNtfFortuneBagTime* temp = _impl_.fortunebagtime_;
  _impl_.fortunebagtime_ = nullptr;
  return temp;
}
inline ::msg::CSNtfFortuneBagTime* CSNtfBody::_internal_mutable_fortunebagtime() {
  
  if (_impl_.fortunebagtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfFortuneBagTime>(GetArenaForAllocation());
    _impl_.fortunebagtime_ = p;
  }
  return _impl_.fortunebagtime_;
}
inline ::msg::CSNtfFortuneBagTime* CSNtfBody::mutable_fortunebagtime() {
  ::msg::CSNtfFortuneBagTime* _msg = _internal_mutable_fortunebagtime();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.FortuneBagTime)
  return _msg;
}
inline void CSNtfBody::set_allocated_fortunebagtime(::msg::CSNtfFortuneBagTime* fortunebagtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fortunebagtime_);
  }
  if (fortunebagtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fortunebagtime));
    if (message_arena != submessage_arena) {
      fortunebagtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fortunebagtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fortunebagtime_ = fortunebagtime;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.FortuneBagTime)
}

// .msg.CSNtfUpdateItem UpdateItem = 70;
inline bool CSNtfBody::_internal_has_updateitem() const {
  return this != internal_default_instance() && _impl_.updateitem_ != nullptr;
}
inline bool CSNtfBody::has_updateitem() const {
  return _internal_has_updateitem();
}
inline const ::msg::CSNtfUpdateItem& CSNtfBody::_internal_updateitem() const {
  const ::msg::CSNtfUpdateItem* p = _impl_.updateitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfUpdateItem&>(
      ::msg::_CSNtfUpdateItem_default_instance_);
}
inline const ::msg::CSNtfUpdateItem& CSNtfBody::updateitem() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.UpdateItem)
  return _internal_updateitem();
}
inline void CSNtfBody::unsafe_arena_set_allocated_updateitem(
    ::msg::CSNtfUpdateItem* updateitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updateitem_);
  }
  _impl_.updateitem_ = updateitem;
  if (updateitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.UpdateItem)
}
inline ::msg::CSNtfUpdateItem* CSNtfBody::release_updateitem() {
  
  ::msg::CSNtfUpdateItem* temp = _impl_.updateitem_;
  _impl_.updateitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfUpdateItem* CSNtfBody::unsafe_arena_release_updateitem() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.UpdateItem)
  
  ::msg::CSNtfUpdateItem* temp = _impl_.updateitem_;
  _impl_.updateitem_ = nullptr;
  return temp;
}
inline ::msg::CSNtfUpdateItem* CSNtfBody::_internal_mutable_updateitem() {
  
  if (_impl_.updateitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfUpdateItem>(GetArenaForAllocation());
    _impl_.updateitem_ = p;
  }
  return _impl_.updateitem_;
}
inline ::msg::CSNtfUpdateItem* CSNtfBody::mutable_updateitem() {
  ::msg::CSNtfUpdateItem* _msg = _internal_mutable_updateitem();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.UpdateItem)
  return _msg;
}
inline void CSNtfBody::set_allocated_updateitem(::msg::CSNtfUpdateItem* updateitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updateitem_);
  }
  if (updateitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updateitem));
    if (message_arena != submessage_arena) {
      updateitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updateitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updateitem_ = updateitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.UpdateItem)
}

// .msg.CSNtfCreditScore CreditScore = 71;
inline bool CSNtfBody::_internal_has_creditscore() const {
  return this != internal_default_instance() && _impl_.creditscore_ != nullptr;
}
inline bool CSNtfBody::has_creditscore() const {
  return _internal_has_creditscore();
}
inline const ::msg::CSNtfCreditScore& CSNtfBody::_internal_creditscore() const {
  const ::msg::CSNtfCreditScore* p = _impl_.creditscore_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfCreditScore&>(
      ::msg::_CSNtfCreditScore_default_instance_);
}
inline const ::msg::CSNtfCreditScore& CSNtfBody::creditscore() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.CreditScore)
  return _internal_creditscore();
}
inline void CSNtfBody::unsafe_arena_set_allocated_creditscore(
    ::msg::CSNtfCreditScore* creditscore) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.creditscore_);
  }
  _impl_.creditscore_ = creditscore;
  if (creditscore) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.CreditScore)
}
inline ::msg::CSNtfCreditScore* CSNtfBody::release_creditscore() {
  
  ::msg::CSNtfCreditScore* temp = _impl_.creditscore_;
  _impl_.creditscore_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfCreditScore* CSNtfBody::unsafe_arena_release_creditscore() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.CreditScore)
  
  ::msg::CSNtfCreditScore* temp = _impl_.creditscore_;
  _impl_.creditscore_ = nullptr;
  return temp;
}
inline ::msg::CSNtfCreditScore* CSNtfBody::_internal_mutable_creditscore() {
  
  if (_impl_.creditscore_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfCreditScore>(GetArenaForAllocation());
    _impl_.creditscore_ = p;
  }
  return _impl_.creditscore_;
}
inline ::msg::CSNtfCreditScore* CSNtfBody::mutable_creditscore() {
  ::msg::CSNtfCreditScore* _msg = _internal_mutable_creditscore();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.CreditScore)
  return _msg;
}
inline void CSNtfBody::set_allocated_creditscore(::msg::CSNtfCreditScore* creditscore) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.creditscore_);
  }
  if (creditscore) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(creditscore));
    if (message_arena != submessage_arena) {
      creditscore = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creditscore, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.creditscore_ = creditscore;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.CreditScore)
}

// .msg.CSNtfBuffAct BuffAct = 72;
inline bool CSNtfBody::_internal_has_buffact() const {
  return this != internal_default_instance() && _impl_.buffact_ != nullptr;
}
inline bool CSNtfBody::has_buffact() const {
  return _internal_has_buffact();
}
inline const ::msg::CSNtfBuffAct& CSNtfBody::_internal_buffact() const {
  const ::msg::CSNtfBuffAct* p = _impl_.buffact_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfBuffAct&>(
      ::msg::_CSNtfBuffAct_default_instance_);
}
inline const ::msg::CSNtfBuffAct& CSNtfBody::buffact() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.BuffAct)
  return _internal_buffact();
}
inline void CSNtfBody::unsafe_arena_set_allocated_buffact(
    ::msg::CSNtfBuffAct* buffact) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buffact_);
  }
  _impl_.buffact_ = buffact;
  if (buffact) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.BuffAct)
}
inline ::msg::CSNtfBuffAct* CSNtfBody::release_buffact() {
  
  ::msg::CSNtfBuffAct* temp = _impl_.buffact_;
  _impl_.buffact_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfBuffAct* CSNtfBody::unsafe_arena_release_buffact() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.BuffAct)
  
  ::msg::CSNtfBuffAct* temp = _impl_.buffact_;
  _impl_.buffact_ = nullptr;
  return temp;
}
inline ::msg::CSNtfBuffAct* CSNtfBody::_internal_mutable_buffact() {
  
  if (_impl_.buffact_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfBuffAct>(GetArenaForAllocation());
    _impl_.buffact_ = p;
  }
  return _impl_.buffact_;
}
inline ::msg::CSNtfBuffAct* CSNtfBody::mutable_buffact() {
  ::msg::CSNtfBuffAct* _msg = _internal_mutable_buffact();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.BuffAct)
  return _msg;
}
inline void CSNtfBody::set_allocated_buffact(::msg::CSNtfBuffAct* buffact) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buffact_);
  }
  if (buffact) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buffact));
    if (message_arena != submessage_arena) {
      buffact = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buffact, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buffact_ = buffact;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.BuffAct)
}

// .msg.CSNtfActivityGroup ActivityGroup = 73;
inline bool CSNtfBody::_internal_has_activitygroup() const {
  return this != internal_default_instance() && _impl_.activitygroup_ != nullptr;
}
inline bool CSNtfBody::has_activitygroup() const {
  return _internal_has_activitygroup();
}
inline const ::msg::CSNtfActivityGroup& CSNtfBody::_internal_activitygroup() const {
  const ::msg::CSNtfActivityGroup* p = _impl_.activitygroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfActivityGroup&>(
      ::msg::_CSNtfActivityGroup_default_instance_);
}
inline const ::msg::CSNtfActivityGroup& CSNtfBody::activitygroup() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.ActivityGroup)
  return _internal_activitygroup();
}
inline void CSNtfBody::unsafe_arena_set_allocated_activitygroup(
    ::msg::CSNtfActivityGroup* activitygroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activitygroup_);
  }
  _impl_.activitygroup_ = activitygroup;
  if (activitygroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.ActivityGroup)
}
inline ::msg::CSNtfActivityGroup* CSNtfBody::release_activitygroup() {
  
  ::msg::CSNtfActivityGroup* temp = _impl_.activitygroup_;
  _impl_.activitygroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfActivityGroup* CSNtfBody::unsafe_arena_release_activitygroup() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.ActivityGroup)
  
  ::msg::CSNtfActivityGroup* temp = _impl_.activitygroup_;
  _impl_.activitygroup_ = nullptr;
  return temp;
}
inline ::msg::CSNtfActivityGroup* CSNtfBody::_internal_mutable_activitygroup() {
  
  if (_impl_.activitygroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfActivityGroup>(GetArenaForAllocation());
    _impl_.activitygroup_ = p;
  }
  return _impl_.activitygroup_;
}
inline ::msg::CSNtfActivityGroup* CSNtfBody::mutable_activitygroup() {
  ::msg::CSNtfActivityGroup* _msg = _internal_mutable_activitygroup();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.ActivityGroup)
  return _msg;
}
inline void CSNtfBody::set_allocated_activitygroup(::msg::CSNtfActivityGroup* activitygroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activitygroup_);
  }
  if (activitygroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activitygroup));
    if (message_arena != submessage_arena) {
      activitygroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activitygroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.activitygroup_ = activitygroup;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.ActivityGroup)
}

// .msg.CSNtfClearChat ClearChat = 74;
inline bool CSNtfBody::_internal_has_clearchat() const {
  return this != internal_default_instance() && _impl_.clearchat_ != nullptr;
}
inline bool CSNtfBody::has_clearchat() const {
  return _internal_has_clearchat();
}
inline const ::msg::CSNtfClearChat& CSNtfBody::_internal_clearchat() const {
  const ::msg::CSNtfClearChat* p = _impl_.clearchat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfClearChat&>(
      ::msg::_CSNtfClearChat_default_instance_);
}
inline const ::msg::CSNtfClearChat& CSNtfBody::clearchat() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.ClearChat)
  return _internal_clearchat();
}
inline void CSNtfBody::unsafe_arena_set_allocated_clearchat(
    ::msg::CSNtfClearChat* clearchat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clearchat_);
  }
  _impl_.clearchat_ = clearchat;
  if (clearchat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.ClearChat)
}
inline ::msg::CSNtfClearChat* CSNtfBody::release_clearchat() {
  
  ::msg::CSNtfClearChat* temp = _impl_.clearchat_;
  _impl_.clearchat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfClearChat* CSNtfBody::unsafe_arena_release_clearchat() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.ClearChat)
  
  ::msg::CSNtfClearChat* temp = _impl_.clearchat_;
  _impl_.clearchat_ = nullptr;
  return temp;
}
inline ::msg::CSNtfClearChat* CSNtfBody::_internal_mutable_clearchat() {
  
  if (_impl_.clearchat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfClearChat>(GetArenaForAllocation());
    _impl_.clearchat_ = p;
  }
  return _impl_.clearchat_;
}
inline ::msg::CSNtfClearChat* CSNtfBody::mutable_clearchat() {
  ::msg::CSNtfClearChat* _msg = _internal_mutable_clearchat();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.ClearChat)
  return _msg;
}
inline void CSNtfBody::set_allocated_clearchat(::msg::CSNtfClearChat* clearchat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clearchat_);
  }
  if (clearchat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clearchat));
    if (message_arena != submessage_arena) {
      clearchat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clearchat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.clearchat_ = clearchat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.ClearChat)
}

// .msg.CSNtfForbidInfo ForbidInfo = 75;
inline bool CSNtfBody::_internal_has_forbidinfo() const {
  return this != internal_default_instance() && _impl_.forbidinfo_ != nullptr;
}
inline bool CSNtfBody::has_forbidinfo() const {
  return _internal_has_forbidinfo();
}
inline const ::msg::CSNtfForbidInfo& CSNtfBody::_internal_forbidinfo() const {
  const ::msg::CSNtfForbidInfo* p = _impl_.forbidinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfForbidInfo&>(
      ::msg::_CSNtfForbidInfo_default_instance_);
}
inline const ::msg::CSNtfForbidInfo& CSNtfBody::forbidinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.ForbidInfo)
  return _internal_forbidinfo();
}
inline void CSNtfBody::unsafe_arena_set_allocated_forbidinfo(
    ::msg::CSNtfForbidInfo* forbidinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.forbidinfo_);
  }
  _impl_.forbidinfo_ = forbidinfo;
  if (forbidinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.ForbidInfo)
}
inline ::msg::CSNtfForbidInfo* CSNtfBody::release_forbidinfo() {
  
  ::msg::CSNtfForbidInfo* temp = _impl_.forbidinfo_;
  _impl_.forbidinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfForbidInfo* CSNtfBody::unsafe_arena_release_forbidinfo() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.ForbidInfo)
  
  ::msg::CSNtfForbidInfo* temp = _impl_.forbidinfo_;
  _impl_.forbidinfo_ = nullptr;
  return temp;
}
inline ::msg::CSNtfForbidInfo* CSNtfBody::_internal_mutable_forbidinfo() {
  
  if (_impl_.forbidinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfForbidInfo>(GetArenaForAllocation());
    _impl_.forbidinfo_ = p;
  }
  return _impl_.forbidinfo_;
}
inline ::msg::CSNtfForbidInfo* CSNtfBody::mutable_forbidinfo() {
  ::msg::CSNtfForbidInfo* _msg = _internal_mutable_forbidinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.ForbidInfo)
  return _msg;
}
inline void CSNtfBody::set_allocated_forbidinfo(::msg::CSNtfForbidInfo* forbidinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.forbidinfo_);
  }
  if (forbidinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(forbidinfo));
    if (message_arena != submessage_arena) {
      forbidinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forbidinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.forbidinfo_ = forbidinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.ForbidInfo)
}

// .msg.CSNtfMidasDiamond MidasDiamond = 76;
inline bool CSNtfBody::_internal_has_midasdiamond() const {
  return this != internal_default_instance() && _impl_.midasdiamond_ != nullptr;
}
inline bool CSNtfBody::has_midasdiamond() const {
  return _internal_has_midasdiamond();
}
inline const ::msg::CSNtfMidasDiamond& CSNtfBody::_internal_midasdiamond() const {
  const ::msg::CSNtfMidasDiamond* p = _impl_.midasdiamond_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfMidasDiamond&>(
      ::msg::_CSNtfMidasDiamond_default_instance_);
}
inline const ::msg::CSNtfMidasDiamond& CSNtfBody::midasdiamond() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.MidasDiamond)
  return _internal_midasdiamond();
}
inline void CSNtfBody::unsafe_arena_set_allocated_midasdiamond(
    ::msg::CSNtfMidasDiamond* midasdiamond) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.midasdiamond_);
  }
  _impl_.midasdiamond_ = midasdiamond;
  if (midasdiamond) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.MidasDiamond)
}
inline ::msg::CSNtfMidasDiamond* CSNtfBody::release_midasdiamond() {
  
  ::msg::CSNtfMidasDiamond* temp = _impl_.midasdiamond_;
  _impl_.midasdiamond_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfMidasDiamond* CSNtfBody::unsafe_arena_release_midasdiamond() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.MidasDiamond)
  
  ::msg::CSNtfMidasDiamond* temp = _impl_.midasdiamond_;
  _impl_.midasdiamond_ = nullptr;
  return temp;
}
inline ::msg::CSNtfMidasDiamond* CSNtfBody::_internal_mutable_midasdiamond() {
  
  if (_impl_.midasdiamond_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfMidasDiamond>(GetArenaForAllocation());
    _impl_.midasdiamond_ = p;
  }
  return _impl_.midasdiamond_;
}
inline ::msg::CSNtfMidasDiamond* CSNtfBody::mutable_midasdiamond() {
  ::msg::CSNtfMidasDiamond* _msg = _internal_mutable_midasdiamond();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.MidasDiamond)
  return _msg;
}
inline void CSNtfBody::set_allocated_midasdiamond(::msg::CSNtfMidasDiamond* midasdiamond) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.midasdiamond_);
  }
  if (midasdiamond) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(midasdiamond));
    if (message_arena != submessage_arena) {
      midasdiamond = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, midasdiamond, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.midasdiamond_ = midasdiamond;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.MidasDiamond)
}

// .msg.CSNtfJoinVoiceTeam JoinVoiceTeam = 77;
inline bool CSNtfBody::_internal_has_joinvoiceteam() const {
  return this != internal_default_instance() && _impl_.joinvoiceteam_ != nullptr;
}
inline bool CSNtfBody::has_joinvoiceteam() const {
  return _internal_has_joinvoiceteam();
}
inline const ::msg::CSNtfJoinVoiceTeam& CSNtfBody::_internal_joinvoiceteam() const {
  const ::msg::CSNtfJoinVoiceTeam* p = _impl_.joinvoiceteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfJoinVoiceTeam&>(
      ::msg::_CSNtfJoinVoiceTeam_default_instance_);
}
inline const ::msg::CSNtfJoinVoiceTeam& CSNtfBody::joinvoiceteam() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.JoinVoiceTeam)
  return _internal_joinvoiceteam();
}
inline void CSNtfBody::unsafe_arena_set_allocated_joinvoiceteam(
    ::msg::CSNtfJoinVoiceTeam* joinvoiceteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joinvoiceteam_);
  }
  _impl_.joinvoiceteam_ = joinvoiceteam;
  if (joinvoiceteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.JoinVoiceTeam)
}
inline ::msg::CSNtfJoinVoiceTeam* CSNtfBody::release_joinvoiceteam() {
  
  ::msg::CSNtfJoinVoiceTeam* temp = _impl_.joinvoiceteam_;
  _impl_.joinvoiceteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfJoinVoiceTeam* CSNtfBody::unsafe_arena_release_joinvoiceteam() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.JoinVoiceTeam)
  
  ::msg::CSNtfJoinVoiceTeam* temp = _impl_.joinvoiceteam_;
  _impl_.joinvoiceteam_ = nullptr;
  return temp;
}
inline ::msg::CSNtfJoinVoiceTeam* CSNtfBody::_internal_mutable_joinvoiceteam() {
  
  if (_impl_.joinvoiceteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfJoinVoiceTeam>(GetArenaForAllocation());
    _impl_.joinvoiceteam_ = p;
  }
  return _impl_.joinvoiceteam_;
}
inline ::msg::CSNtfJoinVoiceTeam* CSNtfBody::mutable_joinvoiceteam() {
  ::msg::CSNtfJoinVoiceTeam* _msg = _internal_mutable_joinvoiceteam();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.JoinVoiceTeam)
  return _msg;
}
inline void CSNtfBody::set_allocated_joinvoiceteam(::msg::CSNtfJoinVoiceTeam* joinvoiceteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joinvoiceteam_);
  }
  if (joinvoiceteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joinvoiceteam));
    if (message_arena != submessage_arena) {
      joinvoiceteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joinvoiceteam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.joinvoiceteam_ = joinvoiceteam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.JoinVoiceTeam)
}

// .msg.CSNtfJoinVoicePvp JoinVoicePvp = 78;
inline bool CSNtfBody::_internal_has_joinvoicepvp() const {
  return this != internal_default_instance() && _impl_.joinvoicepvp_ != nullptr;
}
inline bool CSNtfBody::has_joinvoicepvp() const {
  return _internal_has_joinvoicepvp();
}
inline const ::msg::CSNtfJoinVoicePvp& CSNtfBody::_internal_joinvoicepvp() const {
  const ::msg::CSNtfJoinVoicePvp* p = _impl_.joinvoicepvp_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfJoinVoicePvp&>(
      ::msg::_CSNtfJoinVoicePvp_default_instance_);
}
inline const ::msg::CSNtfJoinVoicePvp& CSNtfBody::joinvoicepvp() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.JoinVoicePvp)
  return _internal_joinvoicepvp();
}
inline void CSNtfBody::unsafe_arena_set_allocated_joinvoicepvp(
    ::msg::CSNtfJoinVoicePvp* joinvoicepvp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joinvoicepvp_);
  }
  _impl_.joinvoicepvp_ = joinvoicepvp;
  if (joinvoicepvp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.JoinVoicePvp)
}
inline ::msg::CSNtfJoinVoicePvp* CSNtfBody::release_joinvoicepvp() {
  
  ::msg::CSNtfJoinVoicePvp* temp = _impl_.joinvoicepvp_;
  _impl_.joinvoicepvp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfJoinVoicePvp* CSNtfBody::unsafe_arena_release_joinvoicepvp() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.JoinVoicePvp)
  
  ::msg::CSNtfJoinVoicePvp* temp = _impl_.joinvoicepvp_;
  _impl_.joinvoicepvp_ = nullptr;
  return temp;
}
inline ::msg::CSNtfJoinVoicePvp* CSNtfBody::_internal_mutable_joinvoicepvp() {
  
  if (_impl_.joinvoicepvp_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfJoinVoicePvp>(GetArenaForAllocation());
    _impl_.joinvoicepvp_ = p;
  }
  return _impl_.joinvoicepvp_;
}
inline ::msg::CSNtfJoinVoicePvp* CSNtfBody::mutable_joinvoicepvp() {
  ::msg::CSNtfJoinVoicePvp* _msg = _internal_mutable_joinvoicepvp();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.JoinVoicePvp)
  return _msg;
}
inline void CSNtfBody::set_allocated_joinvoicepvp(::msg::CSNtfJoinVoicePvp* joinvoicepvp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joinvoicepvp_);
  }
  if (joinvoicepvp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joinvoicepvp));
    if (message_arena != submessage_arena) {
      joinvoicepvp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joinvoicepvp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.joinvoicepvp_ = joinvoicepvp;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.JoinVoicePvp)
}

// .msg.CSNtfJoinVoiceCamp JoinVoiceCamp = 79;
inline bool CSNtfBody::_internal_has_joinvoicecamp() const {
  return this != internal_default_instance() && _impl_.joinvoicecamp_ != nullptr;
}
inline bool CSNtfBody::has_joinvoicecamp() const {
  return _internal_has_joinvoicecamp();
}
inline const ::msg::CSNtfJoinVoiceCamp& CSNtfBody::_internal_joinvoicecamp() const {
  const ::msg::CSNtfJoinVoiceCamp* p = _impl_.joinvoicecamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfJoinVoiceCamp&>(
      ::msg::_CSNtfJoinVoiceCamp_default_instance_);
}
inline const ::msg::CSNtfJoinVoiceCamp& CSNtfBody::joinvoicecamp() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.JoinVoiceCamp)
  return _internal_joinvoicecamp();
}
inline void CSNtfBody::unsafe_arena_set_allocated_joinvoicecamp(
    ::msg::CSNtfJoinVoiceCamp* joinvoicecamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joinvoicecamp_);
  }
  _impl_.joinvoicecamp_ = joinvoicecamp;
  if (joinvoicecamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.JoinVoiceCamp)
}
inline ::msg::CSNtfJoinVoiceCamp* CSNtfBody::release_joinvoicecamp() {
  
  ::msg::CSNtfJoinVoiceCamp* temp = _impl_.joinvoicecamp_;
  _impl_.joinvoicecamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfJoinVoiceCamp* CSNtfBody::unsafe_arena_release_joinvoicecamp() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.JoinVoiceCamp)
  
  ::msg::CSNtfJoinVoiceCamp* temp = _impl_.joinvoicecamp_;
  _impl_.joinvoicecamp_ = nullptr;
  return temp;
}
inline ::msg::CSNtfJoinVoiceCamp* CSNtfBody::_internal_mutable_joinvoicecamp() {
  
  if (_impl_.joinvoicecamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfJoinVoiceCamp>(GetArenaForAllocation());
    _impl_.joinvoicecamp_ = p;
  }
  return _impl_.joinvoicecamp_;
}
inline ::msg::CSNtfJoinVoiceCamp* CSNtfBody::mutable_joinvoicecamp() {
  ::msg::CSNtfJoinVoiceCamp* _msg = _internal_mutable_joinvoicecamp();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.JoinVoiceCamp)
  return _msg;
}
inline void CSNtfBody::set_allocated_joinvoicecamp(::msg::CSNtfJoinVoiceCamp* joinvoicecamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joinvoicecamp_);
  }
  if (joinvoicecamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joinvoicecamp));
    if (message_arena != submessage_arena) {
      joinvoicecamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joinvoicecamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.joinvoicecamp_ = joinvoicecamp;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.JoinVoiceCamp)
}

// .msg.CSNtfWxVVip WxVVip = 80;
inline bool CSNtfBody::_internal_has_wxvvip() const {
  return this != internal_default_instance() && _impl_.wxvvip_ != nullptr;
}
inline bool CSNtfBody::has_wxvvip() const {
  return _internal_has_wxvvip();
}
inline const ::msg::CSNtfWxVVip& CSNtfBody::_internal_wxvvip() const {
  const ::msg::CSNtfWxVVip* p = _impl_.wxvvip_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfWxVVip&>(
      ::msg::_CSNtfWxVVip_default_instance_);
}
inline const ::msg::CSNtfWxVVip& CSNtfBody::wxvvip() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.WxVVip)
  return _internal_wxvvip();
}
inline void CSNtfBody::unsafe_arena_set_allocated_wxvvip(
    ::msg::CSNtfWxVVip* wxvvip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxvvip_);
  }
  _impl_.wxvvip_ = wxvvip;
  if (wxvvip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.WxVVip)
}
inline ::msg::CSNtfWxVVip* CSNtfBody::release_wxvvip() {
  
  ::msg::CSNtfWxVVip* temp = _impl_.wxvvip_;
  _impl_.wxvvip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfWxVVip* CSNtfBody::unsafe_arena_release_wxvvip() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.WxVVip)
  
  ::msg::CSNtfWxVVip* temp = _impl_.wxvvip_;
  _impl_.wxvvip_ = nullptr;
  return temp;
}
inline ::msg::CSNtfWxVVip* CSNtfBody::_internal_mutable_wxvvip() {
  
  if (_impl_.wxvvip_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfWxVVip>(GetArenaForAllocation());
    _impl_.wxvvip_ = p;
  }
  return _impl_.wxvvip_;
}
inline ::msg::CSNtfWxVVip* CSNtfBody::mutable_wxvvip() {
  ::msg::CSNtfWxVVip* _msg = _internal_mutable_wxvvip();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.WxVVip)
  return _msg;
}
inline void CSNtfBody::set_allocated_wxvvip(::msg::CSNtfWxVVip* wxvvip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxvvip_);
  }
  if (wxvvip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wxvvip));
    if (message_arena != submessage_arena) {
      wxvvip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wxvvip, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wxvvip_ = wxvvip;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.WxVVip)
}

// .msg.CSNtfFreeFlow FreeFlow = 81;
inline bool CSNtfBody::_internal_has_freeflow() const {
  return this != internal_default_instance() && _impl_.freeflow_ != nullptr;
}
inline bool CSNtfBody::has_freeflow() const {
  return _internal_has_freeflow();
}
inline const ::msg::CSNtfFreeFlow& CSNtfBody::_internal_freeflow() const {
  const ::msg::CSNtfFreeFlow* p = _impl_.freeflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfFreeFlow&>(
      ::msg::_CSNtfFreeFlow_default_instance_);
}
inline const ::msg::CSNtfFreeFlow& CSNtfBody::freeflow() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.FreeFlow)
  return _internal_freeflow();
}
inline void CSNtfBody::unsafe_arena_set_allocated_freeflow(
    ::msg::CSNtfFreeFlow* freeflow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.freeflow_);
  }
  _impl_.freeflow_ = freeflow;
  if (freeflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.FreeFlow)
}
inline ::msg::CSNtfFreeFlow* CSNtfBody::release_freeflow() {
  
  ::msg::CSNtfFreeFlow* temp = _impl_.freeflow_;
  _impl_.freeflow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfFreeFlow* CSNtfBody::unsafe_arena_release_freeflow() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.FreeFlow)
  
  ::msg::CSNtfFreeFlow* temp = _impl_.freeflow_;
  _impl_.freeflow_ = nullptr;
  return temp;
}
inline ::msg::CSNtfFreeFlow* CSNtfBody::_internal_mutable_freeflow() {
  
  if (_impl_.freeflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfFreeFlow>(GetArenaForAllocation());
    _impl_.freeflow_ = p;
  }
  return _impl_.freeflow_;
}
inline ::msg::CSNtfFreeFlow* CSNtfBody::mutable_freeflow() {
  ::msg::CSNtfFreeFlow* _msg = _internal_mutable_freeflow();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.FreeFlow)
  return _msg;
}
inline void CSNtfBody::set_allocated_freeflow(::msg::CSNtfFreeFlow* freeflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.freeflow_);
  }
  if (freeflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(freeflow));
    if (message_arena != submessage_arena) {
      freeflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, freeflow, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.freeflow_ = freeflow;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.FreeFlow)
}

// .msg.CSNtfObserveStatus ObserveStatus = 82;
inline bool CSNtfBody::_internal_has_observestatus() const {
  return this != internal_default_instance() && _impl_.observestatus_ != nullptr;
}
inline bool CSNtfBody::has_observestatus() const {
  return _internal_has_observestatus();
}
inline const ::msg::CSNtfObserveStatus& CSNtfBody::_internal_observestatus() const {
  const ::msg::CSNtfObserveStatus* p = _impl_.observestatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfObserveStatus&>(
      ::msg::_CSNtfObserveStatus_default_instance_);
}
inline const ::msg::CSNtfObserveStatus& CSNtfBody::observestatus() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.ObserveStatus)
  return _internal_observestatus();
}
inline void CSNtfBody::unsafe_arena_set_allocated_observestatus(
    ::msg::CSNtfObserveStatus* observestatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observestatus_);
  }
  _impl_.observestatus_ = observestatus;
  if (observestatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.ObserveStatus)
}
inline ::msg::CSNtfObserveStatus* CSNtfBody::release_observestatus() {
  
  ::msg::CSNtfObserveStatus* temp = _impl_.observestatus_;
  _impl_.observestatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfObserveStatus* CSNtfBody::unsafe_arena_release_observestatus() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.ObserveStatus)
  
  ::msg::CSNtfObserveStatus* temp = _impl_.observestatus_;
  _impl_.observestatus_ = nullptr;
  return temp;
}
inline ::msg::CSNtfObserveStatus* CSNtfBody::_internal_mutable_observestatus() {
  
  if (_impl_.observestatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfObserveStatus>(GetArenaForAllocation());
    _impl_.observestatus_ = p;
  }
  return _impl_.observestatus_;
}
inline ::msg::CSNtfObserveStatus* CSNtfBody::mutable_observestatus() {
  ::msg::CSNtfObserveStatus* _msg = _internal_mutable_observestatus();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.ObserveStatus)
  return _msg;
}
inline void CSNtfBody::set_allocated_observestatus(::msg::CSNtfObserveStatus* observestatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observestatus_);
  }
  if (observestatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(observestatus));
    if (message_arena != submessage_arena) {
      observestatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observestatus, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.observestatus_ = observestatus;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.ObserveStatus)
}

// .msg.CSNtfGameMarquee GameMarquee = 83;
inline bool CSNtfBody::_internal_has_gamemarquee() const {
  return this != internal_default_instance() && _impl_.gamemarquee_ != nullptr;
}
inline bool CSNtfBody::has_gamemarquee() const {
  return _internal_has_gamemarquee();
}
inline const ::msg::CSNtfGameMarquee& CSNtfBody::_internal_gamemarquee() const {
  const ::msg::CSNtfGameMarquee* p = _impl_.gamemarquee_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfGameMarquee&>(
      ::msg::_CSNtfGameMarquee_default_instance_);
}
inline const ::msg::CSNtfGameMarquee& CSNtfBody::gamemarquee() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.GameMarquee)
  return _internal_gamemarquee();
}
inline void CSNtfBody::unsafe_arena_set_allocated_gamemarquee(
    ::msg::CSNtfGameMarquee* gamemarquee) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gamemarquee_);
  }
  _impl_.gamemarquee_ = gamemarquee;
  if (gamemarquee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.GameMarquee)
}
inline ::msg::CSNtfGameMarquee* CSNtfBody::release_gamemarquee() {
  
  ::msg::CSNtfGameMarquee* temp = _impl_.gamemarquee_;
  _impl_.gamemarquee_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfGameMarquee* CSNtfBody::unsafe_arena_release_gamemarquee() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.GameMarquee)
  
  ::msg::CSNtfGameMarquee* temp = _impl_.gamemarquee_;
  _impl_.gamemarquee_ = nullptr;
  return temp;
}
inline ::msg::CSNtfGameMarquee* CSNtfBody::_internal_mutable_gamemarquee() {
  
  if (_impl_.gamemarquee_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfGameMarquee>(GetArenaForAllocation());
    _impl_.gamemarquee_ = p;
  }
  return _impl_.gamemarquee_;
}
inline ::msg::CSNtfGameMarquee* CSNtfBody::mutable_gamemarquee() {
  ::msg::CSNtfGameMarquee* _msg = _internal_mutable_gamemarquee();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.GameMarquee)
  return _msg;
}
inline void CSNtfBody::set_allocated_gamemarquee(::msg::CSNtfGameMarquee* gamemarquee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gamemarquee_);
  }
  if (gamemarquee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gamemarquee));
    if (message_arena != submessage_arena) {
      gamemarquee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gamemarquee, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gamemarquee_ = gamemarquee;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.GameMarquee)
}

// .msg.CSNtfWxRedPacket WxRedPacket = 84;
inline bool CSNtfBody::_internal_has_wxredpacket() const {
  return this != internal_default_instance() && _impl_.wxredpacket_ != nullptr;
}
inline bool CSNtfBody::has_wxredpacket() const {
  return _internal_has_wxredpacket();
}
inline const ::msg::CSNtfWxRedPacket& CSNtfBody::_internal_wxredpacket() const {
  const ::msg::CSNtfWxRedPacket* p = _impl_.wxredpacket_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfWxRedPacket&>(
      ::msg::_CSNtfWxRedPacket_default_instance_);
}
inline const ::msg::CSNtfWxRedPacket& CSNtfBody::wxredpacket() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.WxRedPacket)
  return _internal_wxredpacket();
}
inline void CSNtfBody::unsafe_arena_set_allocated_wxredpacket(
    ::msg::CSNtfWxRedPacket* wxredpacket) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxredpacket_);
  }
  _impl_.wxredpacket_ = wxredpacket;
  if (wxredpacket) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.WxRedPacket)
}
inline ::msg::CSNtfWxRedPacket* CSNtfBody::release_wxredpacket() {
  
  ::msg::CSNtfWxRedPacket* temp = _impl_.wxredpacket_;
  _impl_.wxredpacket_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfWxRedPacket* CSNtfBody::unsafe_arena_release_wxredpacket() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.WxRedPacket)
  
  ::msg::CSNtfWxRedPacket* temp = _impl_.wxredpacket_;
  _impl_.wxredpacket_ = nullptr;
  return temp;
}
inline ::msg::CSNtfWxRedPacket* CSNtfBody::_internal_mutable_wxredpacket() {
  
  if (_impl_.wxredpacket_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfWxRedPacket>(GetArenaForAllocation());
    _impl_.wxredpacket_ = p;
  }
  return _impl_.wxredpacket_;
}
inline ::msg::CSNtfWxRedPacket* CSNtfBody::mutable_wxredpacket() {
  ::msg::CSNtfWxRedPacket* _msg = _internal_mutable_wxredpacket();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.WxRedPacket)
  return _msg;
}
inline void CSNtfBody::set_allocated_wxredpacket(::msg::CSNtfWxRedPacket* wxredpacket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wxredpacket_);
  }
  if (wxredpacket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wxredpacket));
    if (message_arena != submessage_arena) {
      wxredpacket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wxredpacket, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.wxredpacket_ = wxredpacket;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.WxRedPacket)
}

// .msg.CSNtfGmSysMsg GmSysMsg = 85;
inline bool CSNtfBody::_internal_has_gmsysmsg() const {
  return this != internal_default_instance() && _impl_.gmsysmsg_ != nullptr;
}
inline bool CSNtfBody::has_gmsysmsg() const {
  return _internal_has_gmsysmsg();
}
inline const ::msg::CSNtfGmSysMsg& CSNtfBody::_internal_gmsysmsg() const {
  const ::msg::CSNtfGmSysMsg* p = _impl_.gmsysmsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfGmSysMsg&>(
      ::msg::_CSNtfGmSysMsg_default_instance_);
}
inline const ::msg::CSNtfGmSysMsg& CSNtfBody::gmsysmsg() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.GmSysMsg)
  return _internal_gmsysmsg();
}
inline void CSNtfBody::unsafe_arena_set_allocated_gmsysmsg(
    ::msg::CSNtfGmSysMsg* gmsysmsg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gmsysmsg_);
  }
  _impl_.gmsysmsg_ = gmsysmsg;
  if (gmsysmsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.GmSysMsg)
}
inline ::msg::CSNtfGmSysMsg* CSNtfBody::release_gmsysmsg() {
  
  ::msg::CSNtfGmSysMsg* temp = _impl_.gmsysmsg_;
  _impl_.gmsysmsg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfGmSysMsg* CSNtfBody::unsafe_arena_release_gmsysmsg() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.GmSysMsg)
  
  ::msg::CSNtfGmSysMsg* temp = _impl_.gmsysmsg_;
  _impl_.gmsysmsg_ = nullptr;
  return temp;
}
inline ::msg::CSNtfGmSysMsg* CSNtfBody::_internal_mutable_gmsysmsg() {
  
  if (_impl_.gmsysmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfGmSysMsg>(GetArenaForAllocation());
    _impl_.gmsysmsg_ = p;
  }
  return _impl_.gmsysmsg_;
}
inline ::msg::CSNtfGmSysMsg* CSNtfBody::mutable_gmsysmsg() {
  ::msg::CSNtfGmSysMsg* _msg = _internal_mutable_gmsysmsg();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.GmSysMsg)
  return _msg;
}
inline void CSNtfBody::set_allocated_gmsysmsg(::msg::CSNtfGmSysMsg* gmsysmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gmsysmsg_);
  }
  if (gmsysmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gmsysmsg));
    if (message_arena != submessage_arena) {
      gmsysmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gmsysmsg, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gmsysmsg_ = gmsysmsg;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.GmSysMsg)
}

// .msg.CSNtfNewPunishment NewPunishment = 86;
inline bool CSNtfBody::_internal_has_newpunishment() const {
  return this != internal_default_instance() && _impl_.newpunishment_ != nullptr;
}
inline bool CSNtfBody::has_newpunishment() const {
  return _internal_has_newpunishment();
}
inline const ::msg::CSNtfNewPunishment& CSNtfBody::_internal_newpunishment() const {
  const ::msg::CSNtfNewPunishment* p = _impl_.newpunishment_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfNewPunishment&>(
      ::msg::_CSNtfNewPunishment_default_instance_);
}
inline const ::msg::CSNtfNewPunishment& CSNtfBody::newpunishment() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.NewPunishment)
  return _internal_newpunishment();
}
inline void CSNtfBody::unsafe_arena_set_allocated_newpunishment(
    ::msg::CSNtfNewPunishment* newpunishment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newpunishment_);
  }
  _impl_.newpunishment_ = newpunishment;
  if (newpunishment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.NewPunishment)
}
inline ::msg::CSNtfNewPunishment* CSNtfBody::release_newpunishment() {
  
  ::msg::CSNtfNewPunishment* temp = _impl_.newpunishment_;
  _impl_.newpunishment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfNewPunishment* CSNtfBody::unsafe_arena_release_newpunishment() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.NewPunishment)
  
  ::msg::CSNtfNewPunishment* temp = _impl_.newpunishment_;
  _impl_.newpunishment_ = nullptr;
  return temp;
}
inline ::msg::CSNtfNewPunishment* CSNtfBody::_internal_mutable_newpunishment() {
  
  if (_impl_.newpunishment_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfNewPunishment>(GetArenaForAllocation());
    _impl_.newpunishment_ = p;
  }
  return _impl_.newpunishment_;
}
inline ::msg::CSNtfNewPunishment* CSNtfBody::mutable_newpunishment() {
  ::msg::CSNtfNewPunishment* _msg = _internal_mutable_newpunishment();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.NewPunishment)
  return _msg;
}
inline void CSNtfBody::set_allocated_newpunishment(::msg::CSNtfNewPunishment* newpunishment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newpunishment_);
  }
  if (newpunishment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newpunishment));
    if (message_arena != submessage_arena) {
      newpunishment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newpunishment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newpunishment_ = newpunishment;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.NewPunishment)
}

// .msg.CSNtfTeamSlot TeamSlot = 87;
inline bool CSNtfBody::_internal_has_teamslot() const {
  return this != internal_default_instance() && _impl_.teamslot_ != nullptr;
}
inline bool CSNtfBody::has_teamslot() const {
  return _internal_has_teamslot();
}
inline const ::msg::CSNtfTeamSlot& CSNtfBody::_internal_teamslot() const {
  const ::msg::CSNtfTeamSlot* p = _impl_.teamslot_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfTeamSlot&>(
      ::msg::_CSNtfTeamSlot_default_instance_);
}
inline const ::msg::CSNtfTeamSlot& CSNtfBody::teamslot() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.TeamSlot)
  return _internal_teamslot();
}
inline void CSNtfBody::unsafe_arena_set_allocated_teamslot(
    ::msg::CSNtfTeamSlot* teamslot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamslot_);
  }
  _impl_.teamslot_ = teamslot;
  if (teamslot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.TeamSlot)
}
inline ::msg::CSNtfTeamSlot* CSNtfBody::release_teamslot() {
  
  ::msg::CSNtfTeamSlot* temp = _impl_.teamslot_;
  _impl_.teamslot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfTeamSlot* CSNtfBody::unsafe_arena_release_teamslot() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.TeamSlot)
  
  ::msg::CSNtfTeamSlot* temp = _impl_.teamslot_;
  _impl_.teamslot_ = nullptr;
  return temp;
}
inline ::msg::CSNtfTeamSlot* CSNtfBody::_internal_mutable_teamslot() {
  
  if (_impl_.teamslot_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfTeamSlot>(GetArenaForAllocation());
    _impl_.teamslot_ = p;
  }
  return _impl_.teamslot_;
}
inline ::msg::CSNtfTeamSlot* CSNtfBody::mutable_teamslot() {
  ::msg::CSNtfTeamSlot* _msg = _internal_mutable_teamslot();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.TeamSlot)
  return _msg;
}
inline void CSNtfBody::set_allocated_teamslot(::msg::CSNtfTeamSlot* teamslot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamslot_);
  }
  if (teamslot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teamslot));
    if (message_arena != submessage_arena) {
      teamslot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamslot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.teamslot_ = teamslot;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.TeamSlot)
}

// .msg.CSNtfTeamSubMode TeamSubMode = 88;
inline bool CSNtfBody::_internal_has_teamsubmode() const {
  return this != internal_default_instance() && _impl_.teamsubmode_ != nullptr;
}
inline bool CSNtfBody::has_teamsubmode() const {
  return _internal_has_teamsubmode();
}
inline const ::msg::CSNtfTeamSubMode& CSNtfBody::_internal_teamsubmode() const {
  const ::msg::CSNtfTeamSubMode* p = _impl_.teamsubmode_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfTeamSubMode&>(
      ::msg::_CSNtfTeamSubMode_default_instance_);
}
inline const ::msg::CSNtfTeamSubMode& CSNtfBody::teamsubmode() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.TeamSubMode)
  return _internal_teamsubmode();
}
inline void CSNtfBody::unsafe_arena_set_allocated_teamsubmode(
    ::msg::CSNtfTeamSubMode* teamsubmode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamsubmode_);
  }
  _impl_.teamsubmode_ = teamsubmode;
  if (teamsubmode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.TeamSubMode)
}
inline ::msg::CSNtfTeamSubMode* CSNtfBody::release_teamsubmode() {
  
  ::msg::CSNtfTeamSubMode* temp = _impl_.teamsubmode_;
  _impl_.teamsubmode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfTeamSubMode* CSNtfBody::unsafe_arena_release_teamsubmode() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.TeamSubMode)
  
  ::msg::CSNtfTeamSubMode* temp = _impl_.teamsubmode_;
  _impl_.teamsubmode_ = nullptr;
  return temp;
}
inline ::msg::CSNtfTeamSubMode* CSNtfBody::_internal_mutable_teamsubmode() {
  
  if (_impl_.teamsubmode_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfTeamSubMode>(GetArenaForAllocation());
    _impl_.teamsubmode_ = p;
  }
  return _impl_.teamsubmode_;
}
inline ::msg::CSNtfTeamSubMode* CSNtfBody::mutable_teamsubmode() {
  ::msg::CSNtfTeamSubMode* _msg = _internal_mutable_teamsubmode();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.TeamSubMode)
  return _msg;
}
inline void CSNtfBody::set_allocated_teamsubmode(::msg::CSNtfTeamSubMode* teamsubmode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamsubmode_);
  }
  if (teamsubmode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teamsubmode));
    if (message_arena != submessage_arena) {
      teamsubmode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamsubmode, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.teamsubmode_ = teamsubmode;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.TeamSubMode)
}

// .msg.CSNtfTeamSlotStatus TeamSlotStatus = 89;
inline bool CSNtfBody::_internal_has_teamslotstatus() const {
  return this != internal_default_instance() && _impl_.teamslotstatus_ != nullptr;
}
inline bool CSNtfBody::has_teamslotstatus() const {
  return _internal_has_teamslotstatus();
}
inline const ::msg::CSNtfTeamSlotStatus& CSNtfBody::_internal_teamslotstatus() const {
  const ::msg::CSNtfTeamSlotStatus* p = _impl_.teamslotstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfTeamSlotStatus&>(
      ::msg::_CSNtfTeamSlotStatus_default_instance_);
}
inline const ::msg::CSNtfTeamSlotStatus& CSNtfBody::teamslotstatus() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.TeamSlotStatus)
  return _internal_teamslotstatus();
}
inline void CSNtfBody::unsafe_arena_set_allocated_teamslotstatus(
    ::msg::CSNtfTeamSlotStatus* teamslotstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamslotstatus_);
  }
  _impl_.teamslotstatus_ = teamslotstatus;
  if (teamslotstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.TeamSlotStatus)
}
inline ::msg::CSNtfTeamSlotStatus* CSNtfBody::release_teamslotstatus() {
  
  ::msg::CSNtfTeamSlotStatus* temp = _impl_.teamslotstatus_;
  _impl_.teamslotstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfTeamSlotStatus* CSNtfBody::unsafe_arena_release_teamslotstatus() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.TeamSlotStatus)
  
  ::msg::CSNtfTeamSlotStatus* temp = _impl_.teamslotstatus_;
  _impl_.teamslotstatus_ = nullptr;
  return temp;
}
inline ::msg::CSNtfTeamSlotStatus* CSNtfBody::_internal_mutable_teamslotstatus() {
  
  if (_impl_.teamslotstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfTeamSlotStatus>(GetArenaForAllocation());
    _impl_.teamslotstatus_ = p;
  }
  return _impl_.teamslotstatus_;
}
inline ::msg::CSNtfTeamSlotStatus* CSNtfBody::mutable_teamslotstatus() {
  ::msg::CSNtfTeamSlotStatus* _msg = _internal_mutable_teamslotstatus();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.TeamSlotStatus)
  return _msg;
}
inline void CSNtfBody::set_allocated_teamslotstatus(::msg::CSNtfTeamSlotStatus* teamslotstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamslotstatus_);
  }
  if (teamslotstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teamslotstatus));
    if (message_arena != submessage_arena) {
      teamslotstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamslotstatus, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.teamslotstatus_ = teamslotstatus;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.TeamSlotStatus)
}

// .msg.CSNtfPunishmentInfo PunishmentInfo = 90;
inline bool CSNtfBody::_internal_has_punishmentinfo() const {
  return this != internal_default_instance() && _impl_.punishmentinfo_ != nullptr;
}
inline bool CSNtfBody::has_punishmentinfo() const {
  return _internal_has_punishmentinfo();
}
inline const ::msg::CSNtfPunishmentInfo& CSNtfBody::_internal_punishmentinfo() const {
  const ::msg::CSNtfPunishmentInfo* p = _impl_.punishmentinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPunishmentInfo&>(
      ::msg::_CSNtfPunishmentInfo_default_instance_);
}
inline const ::msg::CSNtfPunishmentInfo& CSNtfBody::punishmentinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PunishmentInfo)
  return _internal_punishmentinfo();
}
inline void CSNtfBody::unsafe_arena_set_allocated_punishmentinfo(
    ::msg::CSNtfPunishmentInfo* punishmentinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.punishmentinfo_);
  }
  _impl_.punishmentinfo_ = punishmentinfo;
  if (punishmentinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PunishmentInfo)
}
inline ::msg::CSNtfPunishmentInfo* CSNtfBody::release_punishmentinfo() {
  
  ::msg::CSNtfPunishmentInfo* temp = _impl_.punishmentinfo_;
  _impl_.punishmentinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPunishmentInfo* CSNtfBody::unsafe_arena_release_punishmentinfo() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PunishmentInfo)
  
  ::msg::CSNtfPunishmentInfo* temp = _impl_.punishmentinfo_;
  _impl_.punishmentinfo_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPunishmentInfo* CSNtfBody::_internal_mutable_punishmentinfo() {
  
  if (_impl_.punishmentinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPunishmentInfo>(GetArenaForAllocation());
    _impl_.punishmentinfo_ = p;
  }
  return _impl_.punishmentinfo_;
}
inline ::msg::CSNtfPunishmentInfo* CSNtfBody::mutable_punishmentinfo() {
  ::msg::CSNtfPunishmentInfo* _msg = _internal_mutable_punishmentinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PunishmentInfo)
  return _msg;
}
inline void CSNtfBody::set_allocated_punishmentinfo(::msg::CSNtfPunishmentInfo* punishmentinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.punishmentinfo_);
  }
  if (punishmentinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(punishmentinfo));
    if (message_arena != submessage_arena) {
      punishmentinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, punishmentinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.punishmentinfo_ = punishmentinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PunishmentInfo)
}

// .msg.CSNtfRemovePunishment RemovePunishment = 91;
inline bool CSNtfBody::_internal_has_removepunishment() const {
  return this != internal_default_instance() && _impl_.removepunishment_ != nullptr;
}
inline bool CSNtfBody::has_removepunishment() const {
  return _internal_has_removepunishment();
}
inline const ::msg::CSNtfRemovePunishment& CSNtfBody::_internal_removepunishment() const {
  const ::msg::CSNtfRemovePunishment* p = _impl_.removepunishment_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfRemovePunishment&>(
      ::msg::_CSNtfRemovePunishment_default_instance_);
}
inline const ::msg::CSNtfRemovePunishment& CSNtfBody::removepunishment() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.RemovePunishment)
  return _internal_removepunishment();
}
inline void CSNtfBody::unsafe_arena_set_allocated_removepunishment(
    ::msg::CSNtfRemovePunishment* removepunishment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removepunishment_);
  }
  _impl_.removepunishment_ = removepunishment;
  if (removepunishment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.RemovePunishment)
}
inline ::msg::CSNtfRemovePunishment* CSNtfBody::release_removepunishment() {
  
  ::msg::CSNtfRemovePunishment* temp = _impl_.removepunishment_;
  _impl_.removepunishment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfRemovePunishment* CSNtfBody::unsafe_arena_release_removepunishment() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.RemovePunishment)
  
  ::msg::CSNtfRemovePunishment* temp = _impl_.removepunishment_;
  _impl_.removepunishment_ = nullptr;
  return temp;
}
inline ::msg::CSNtfRemovePunishment* CSNtfBody::_internal_mutable_removepunishment() {
  
  if (_impl_.removepunishment_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfRemovePunishment>(GetArenaForAllocation());
    _impl_.removepunishment_ = p;
  }
  return _impl_.removepunishment_;
}
inline ::msg::CSNtfRemovePunishment* CSNtfBody::mutable_removepunishment() {
  ::msg::CSNtfRemovePunishment* _msg = _internal_mutable_removepunishment();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.RemovePunishment)
  return _msg;
}
inline void CSNtfBody::set_allocated_removepunishment(::msg::CSNtfRemovePunishment* removepunishment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removepunishment_);
  }
  if (removepunishment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removepunishment));
    if (message_arena != submessage_arena) {
      removepunishment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removepunishment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.removepunishment_ = removepunishment;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.RemovePunishment)
}

// .msg.CSNtfPvpConfirm PvpConfirm = 92;
inline bool CSNtfBody::_internal_has_pvpconfirm() const {
  return this != internal_default_instance() && _impl_.pvpconfirm_ != nullptr;
}
inline bool CSNtfBody::has_pvpconfirm() const {
  return _internal_has_pvpconfirm();
}
inline const ::msg::CSNtfPvpConfirm& CSNtfBody::_internal_pvpconfirm() const {
  const ::msg::CSNtfPvpConfirm* p = _impl_.pvpconfirm_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPvpConfirm&>(
      ::msg::_CSNtfPvpConfirm_default_instance_);
}
inline const ::msg::CSNtfPvpConfirm& CSNtfBody::pvpconfirm() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PvpConfirm)
  return _internal_pvpconfirm();
}
inline void CSNtfBody::unsafe_arena_set_allocated_pvpconfirm(
    ::msg::CSNtfPvpConfirm* pvpconfirm) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpconfirm_);
  }
  _impl_.pvpconfirm_ = pvpconfirm;
  if (pvpconfirm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PvpConfirm)
}
inline ::msg::CSNtfPvpConfirm* CSNtfBody::release_pvpconfirm() {
  
  ::msg::CSNtfPvpConfirm* temp = _impl_.pvpconfirm_;
  _impl_.pvpconfirm_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPvpConfirm* CSNtfBody::unsafe_arena_release_pvpconfirm() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PvpConfirm)
  
  ::msg::CSNtfPvpConfirm* temp = _impl_.pvpconfirm_;
  _impl_.pvpconfirm_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPvpConfirm* CSNtfBody::_internal_mutable_pvpconfirm() {
  
  if (_impl_.pvpconfirm_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPvpConfirm>(GetArenaForAllocation());
    _impl_.pvpconfirm_ = p;
  }
  return _impl_.pvpconfirm_;
}
inline ::msg::CSNtfPvpConfirm* CSNtfBody::mutable_pvpconfirm() {
  ::msg::CSNtfPvpConfirm* _msg = _internal_mutable_pvpconfirm();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PvpConfirm)
  return _msg;
}
inline void CSNtfBody::set_allocated_pvpconfirm(::msg::CSNtfPvpConfirm* pvpconfirm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpconfirm_);
  }
  if (pvpconfirm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvpconfirm));
    if (message_arena != submessage_arena) {
      pvpconfirm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpconfirm, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpconfirm_ = pvpconfirm;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PvpConfirm)
}

// .msg.CSNtfMatchSuccess MatchSuccess = 93;
inline bool CSNtfBody::_internal_has_matchsuccess() const {
  return this != internal_default_instance() && _impl_.matchsuccess_ != nullptr;
}
inline bool CSNtfBody::has_matchsuccess() const {
  return _internal_has_matchsuccess();
}
inline const ::msg::CSNtfMatchSuccess& CSNtfBody::_internal_matchsuccess() const {
  const ::msg::CSNtfMatchSuccess* p = _impl_.matchsuccess_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfMatchSuccess&>(
      ::msg::_CSNtfMatchSuccess_default_instance_);
}
inline const ::msg::CSNtfMatchSuccess& CSNtfBody::matchsuccess() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.MatchSuccess)
  return _internal_matchsuccess();
}
inline void CSNtfBody::unsafe_arena_set_allocated_matchsuccess(
    ::msg::CSNtfMatchSuccess* matchsuccess) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matchsuccess_);
  }
  _impl_.matchsuccess_ = matchsuccess;
  if (matchsuccess) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.MatchSuccess)
}
inline ::msg::CSNtfMatchSuccess* CSNtfBody::release_matchsuccess() {
  
  ::msg::CSNtfMatchSuccess* temp = _impl_.matchsuccess_;
  _impl_.matchsuccess_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfMatchSuccess* CSNtfBody::unsafe_arena_release_matchsuccess() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.MatchSuccess)
  
  ::msg::CSNtfMatchSuccess* temp = _impl_.matchsuccess_;
  _impl_.matchsuccess_ = nullptr;
  return temp;
}
inline ::msg::CSNtfMatchSuccess* CSNtfBody::_internal_mutable_matchsuccess() {
  
  if (_impl_.matchsuccess_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfMatchSuccess>(GetArenaForAllocation());
    _impl_.matchsuccess_ = p;
  }
  return _impl_.matchsuccess_;
}
inline ::msg::CSNtfMatchSuccess* CSNtfBody::mutable_matchsuccess() {
  ::msg::CSNtfMatchSuccess* _msg = _internal_mutable_matchsuccess();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.MatchSuccess)
  return _msg;
}
inline void CSNtfBody::set_allocated_matchsuccess(::msg::CSNtfMatchSuccess* matchsuccess) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matchsuccess_);
  }
  if (matchsuccess) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matchsuccess));
    if (message_arena != submessage_arena) {
      matchsuccess = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matchsuccess, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.matchsuccess_ = matchsuccess;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.MatchSuccess)
}

// .msg.CSNtfOldBusinessPlayer OldBusinessPlayer = 94;
inline bool CSNtfBody::_internal_has_oldbusinessplayer() const {
  return this != internal_default_instance() && _impl_.oldbusinessplayer_ != nullptr;
}
inline bool CSNtfBody::has_oldbusinessplayer() const {
  return _internal_has_oldbusinessplayer();
}
inline const ::msg::CSNtfOldBusinessPlayer& CSNtfBody::_internal_oldbusinessplayer() const {
  const ::msg::CSNtfOldBusinessPlayer* p = _impl_.oldbusinessplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfOldBusinessPlayer&>(
      ::msg::_CSNtfOldBusinessPlayer_default_instance_);
}
inline const ::msg::CSNtfOldBusinessPlayer& CSNtfBody::oldbusinessplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.OldBusinessPlayer)
  return _internal_oldbusinessplayer();
}
inline void CSNtfBody::unsafe_arena_set_allocated_oldbusinessplayer(
    ::msg::CSNtfOldBusinessPlayer* oldbusinessplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldbusinessplayer_);
  }
  _impl_.oldbusinessplayer_ = oldbusinessplayer;
  if (oldbusinessplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.OldBusinessPlayer)
}
inline ::msg::CSNtfOldBusinessPlayer* CSNtfBody::release_oldbusinessplayer() {
  
  ::msg::CSNtfOldBusinessPlayer* temp = _impl_.oldbusinessplayer_;
  _impl_.oldbusinessplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfOldBusinessPlayer* CSNtfBody::unsafe_arena_release_oldbusinessplayer() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.OldBusinessPlayer)
  
  ::msg::CSNtfOldBusinessPlayer* temp = _impl_.oldbusinessplayer_;
  _impl_.oldbusinessplayer_ = nullptr;
  return temp;
}
inline ::msg::CSNtfOldBusinessPlayer* CSNtfBody::_internal_mutable_oldbusinessplayer() {
  
  if (_impl_.oldbusinessplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfOldBusinessPlayer>(GetArenaForAllocation());
    _impl_.oldbusinessplayer_ = p;
  }
  return _impl_.oldbusinessplayer_;
}
inline ::msg::CSNtfOldBusinessPlayer* CSNtfBody::mutable_oldbusinessplayer() {
  ::msg::CSNtfOldBusinessPlayer* _msg = _internal_mutable_oldbusinessplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.OldBusinessPlayer)
  return _msg;
}
inline void CSNtfBody::set_allocated_oldbusinessplayer(::msg::CSNtfOldBusinessPlayer* oldbusinessplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oldbusinessplayer_);
  }
  if (oldbusinessplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oldbusinessplayer));
    if (message_arena != submessage_arena) {
      oldbusinessplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oldbusinessplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.oldbusinessplayer_ = oldbusinessplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.OldBusinessPlayer)
}

// .msg.CSNtfChangeTeamSlot ChangeTeamSlot = 95;
inline bool CSNtfBody::_internal_has_changeteamslot() const {
  return this != internal_default_instance() && _impl_.changeteamslot_ != nullptr;
}
inline bool CSNtfBody::has_changeteamslot() const {
  return _internal_has_changeteamslot();
}
inline const ::msg::CSNtfChangeTeamSlot& CSNtfBody::_internal_changeteamslot() const {
  const ::msg::CSNtfChangeTeamSlot* p = _impl_.changeteamslot_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfChangeTeamSlot&>(
      ::msg::_CSNtfChangeTeamSlot_default_instance_);
}
inline const ::msg::CSNtfChangeTeamSlot& CSNtfBody::changeteamslot() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.ChangeTeamSlot)
  return _internal_changeteamslot();
}
inline void CSNtfBody::unsafe_arena_set_allocated_changeteamslot(
    ::msg::CSNtfChangeTeamSlot* changeteamslot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changeteamslot_);
  }
  _impl_.changeteamslot_ = changeteamslot;
  if (changeteamslot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.ChangeTeamSlot)
}
inline ::msg::CSNtfChangeTeamSlot* CSNtfBody::release_changeteamslot() {
  
  ::msg::CSNtfChangeTeamSlot* temp = _impl_.changeteamslot_;
  _impl_.changeteamslot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfChangeTeamSlot* CSNtfBody::unsafe_arena_release_changeteamslot() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.ChangeTeamSlot)
  
  ::msg::CSNtfChangeTeamSlot* temp = _impl_.changeteamslot_;
  _impl_.changeteamslot_ = nullptr;
  return temp;
}
inline ::msg::CSNtfChangeTeamSlot* CSNtfBody::_internal_mutable_changeteamslot() {
  
  if (_impl_.changeteamslot_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfChangeTeamSlot>(GetArenaForAllocation());
    _impl_.changeteamslot_ = p;
  }
  return _impl_.changeteamslot_;
}
inline ::msg::CSNtfChangeTeamSlot* CSNtfBody::mutable_changeteamslot() {
  ::msg::CSNtfChangeTeamSlot* _msg = _internal_mutable_changeteamslot();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.ChangeTeamSlot)
  return _msg;
}
inline void CSNtfBody::set_allocated_changeteamslot(::msg::CSNtfChangeTeamSlot* changeteamslot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changeteamslot_);
  }
  if (changeteamslot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(changeteamslot));
    if (message_arena != submessage_arena) {
      changeteamslot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changeteamslot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.changeteamslot_ = changeteamslot;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.ChangeTeamSlot)
}

// .msg.CSNtfRefuseChangeTeamSlot RefuseChangeTeamSlot = 96;
inline bool CSNtfBody::_internal_has_refusechangeteamslot() const {
  return this != internal_default_instance() && _impl_.refusechangeteamslot_ != nullptr;
}
inline bool CSNtfBody::has_refusechangeteamslot() const {
  return _internal_has_refusechangeteamslot();
}
inline const ::msg::CSNtfRefuseChangeTeamSlot& CSNtfBody::_internal_refusechangeteamslot() const {
  const ::msg::CSNtfRefuseChangeTeamSlot* p = _impl_.refusechangeteamslot_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfRefuseChangeTeamSlot&>(
      ::msg::_CSNtfRefuseChangeTeamSlot_default_instance_);
}
inline const ::msg::CSNtfRefuseChangeTeamSlot& CSNtfBody::refusechangeteamslot() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.RefuseChangeTeamSlot)
  return _internal_refusechangeteamslot();
}
inline void CSNtfBody::unsafe_arena_set_allocated_refusechangeteamslot(
    ::msg::CSNtfRefuseChangeTeamSlot* refusechangeteamslot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refusechangeteamslot_);
  }
  _impl_.refusechangeteamslot_ = refusechangeteamslot;
  if (refusechangeteamslot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.RefuseChangeTeamSlot)
}
inline ::msg::CSNtfRefuseChangeTeamSlot* CSNtfBody::release_refusechangeteamslot() {
  
  ::msg::CSNtfRefuseChangeTeamSlot* temp = _impl_.refusechangeteamslot_;
  _impl_.refusechangeteamslot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfRefuseChangeTeamSlot* CSNtfBody::unsafe_arena_release_refusechangeteamslot() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.RefuseChangeTeamSlot)
  
  ::msg::CSNtfRefuseChangeTeamSlot* temp = _impl_.refusechangeteamslot_;
  _impl_.refusechangeteamslot_ = nullptr;
  return temp;
}
inline ::msg::CSNtfRefuseChangeTeamSlot* CSNtfBody::_internal_mutable_refusechangeteamslot() {
  
  if (_impl_.refusechangeteamslot_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfRefuseChangeTeamSlot>(GetArenaForAllocation());
    _impl_.refusechangeteamslot_ = p;
  }
  return _impl_.refusechangeteamslot_;
}
inline ::msg::CSNtfRefuseChangeTeamSlot* CSNtfBody::mutable_refusechangeteamslot() {
  ::msg::CSNtfRefuseChangeTeamSlot* _msg = _internal_mutable_refusechangeteamslot();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.RefuseChangeTeamSlot)
  return _msg;
}
inline void CSNtfBody::set_allocated_refusechangeteamslot(::msg::CSNtfRefuseChangeTeamSlot* refusechangeteamslot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refusechangeteamslot_);
  }
  if (refusechangeteamslot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(refusechangeteamslot));
    if (message_arena != submessage_arena) {
      refusechangeteamslot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, refusechangeteamslot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.refusechangeteamslot_ = refusechangeteamslot;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.RefuseChangeTeamSlot)
}

// .msg.CSNtfCancelChangeSlot CancelChangeSlot = 97;
inline bool CSNtfBody::_internal_has_cancelchangeslot() const {
  return this != internal_default_instance() && _impl_.cancelchangeslot_ != nullptr;
}
inline bool CSNtfBody::has_cancelchangeslot() const {
  return _internal_has_cancelchangeslot();
}
inline const ::msg::CSNtfCancelChangeSlot& CSNtfBody::_internal_cancelchangeslot() const {
  const ::msg::CSNtfCancelChangeSlot* p = _impl_.cancelchangeslot_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfCancelChangeSlot&>(
      ::msg::_CSNtfCancelChangeSlot_default_instance_);
}
inline const ::msg::CSNtfCancelChangeSlot& CSNtfBody::cancelchangeslot() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.CancelChangeSlot)
  return _internal_cancelchangeslot();
}
inline void CSNtfBody::unsafe_arena_set_allocated_cancelchangeslot(
    ::msg::CSNtfCancelChangeSlot* cancelchangeslot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cancelchangeslot_);
  }
  _impl_.cancelchangeslot_ = cancelchangeslot;
  if (cancelchangeslot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.CancelChangeSlot)
}
inline ::msg::CSNtfCancelChangeSlot* CSNtfBody::release_cancelchangeslot() {
  
  ::msg::CSNtfCancelChangeSlot* temp = _impl_.cancelchangeslot_;
  _impl_.cancelchangeslot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfCancelChangeSlot* CSNtfBody::unsafe_arena_release_cancelchangeslot() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.CancelChangeSlot)
  
  ::msg::CSNtfCancelChangeSlot* temp = _impl_.cancelchangeslot_;
  _impl_.cancelchangeslot_ = nullptr;
  return temp;
}
inline ::msg::CSNtfCancelChangeSlot* CSNtfBody::_internal_mutable_cancelchangeslot() {
  
  if (_impl_.cancelchangeslot_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfCancelChangeSlot>(GetArenaForAllocation());
    _impl_.cancelchangeslot_ = p;
  }
  return _impl_.cancelchangeslot_;
}
inline ::msg::CSNtfCancelChangeSlot* CSNtfBody::mutable_cancelchangeslot() {
  ::msg::CSNtfCancelChangeSlot* _msg = _internal_mutable_cancelchangeslot();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.CancelChangeSlot)
  return _msg;
}
inline void CSNtfBody::set_allocated_cancelchangeslot(::msg::CSNtfCancelChangeSlot* cancelchangeslot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cancelchangeslot_);
  }
  if (cancelchangeslot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancelchangeslot));
    if (message_arena != submessage_arena) {
      cancelchangeslot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancelchangeslot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cancelchangeslot_ = cancelchangeslot;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.CancelChangeSlot)
}

// .msg.CSNtfShowChessSkin ShowChessSkin = 98;
inline bool CSNtfBody::_internal_has_showchessskin() const {
  return this != internal_default_instance() && _impl_.showchessskin_ != nullptr;
}
inline bool CSNtfBody::has_showchessskin() const {
  return _internal_has_showchessskin();
}
inline const ::msg::CSNtfShowChessSkin& CSNtfBody::_internal_showchessskin() const {
  const ::msg::CSNtfShowChessSkin* p = _impl_.showchessskin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfShowChessSkin&>(
      ::msg::_CSNtfShowChessSkin_default_instance_);
}
inline const ::msg::CSNtfShowChessSkin& CSNtfBody::showchessskin() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.ShowChessSkin)
  return _internal_showchessskin();
}
inline void CSNtfBody::unsafe_arena_set_allocated_showchessskin(
    ::msg::CSNtfShowChessSkin* showchessskin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.showchessskin_);
  }
  _impl_.showchessskin_ = showchessskin;
  if (showchessskin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.ShowChessSkin)
}
inline ::msg::CSNtfShowChessSkin* CSNtfBody::release_showchessskin() {
  
  ::msg::CSNtfShowChessSkin* temp = _impl_.showchessskin_;
  _impl_.showchessskin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfShowChessSkin* CSNtfBody::unsafe_arena_release_showchessskin() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.ShowChessSkin)
  
  ::msg::CSNtfShowChessSkin* temp = _impl_.showchessskin_;
  _impl_.showchessskin_ = nullptr;
  return temp;
}
inline ::msg::CSNtfShowChessSkin* CSNtfBody::_internal_mutable_showchessskin() {
  
  if (_impl_.showchessskin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfShowChessSkin>(GetArenaForAllocation());
    _impl_.showchessskin_ = p;
  }
  return _impl_.showchessskin_;
}
inline ::msg::CSNtfShowChessSkin* CSNtfBody::mutable_showchessskin() {
  ::msg::CSNtfShowChessSkin* _msg = _internal_mutable_showchessskin();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.ShowChessSkin)
  return _msg;
}
inline void CSNtfBody::set_allocated_showchessskin(::msg::CSNtfShowChessSkin* showchessskin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.showchessskin_);
  }
  if (showchessskin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(showchessskin));
    if (message_arena != submessage_arena) {
      showchessskin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, showchessskin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.showchessskin_ = showchessskin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.ShowChessSkin)
}

// .msg.CSNtfOnHelpReddot OnHelpReddot = 99;
inline bool CSNtfBody::_internal_has_onhelpreddot() const {
  return this != internal_default_instance() && _impl_.onhelpreddot_ != nullptr;
}
inline bool CSNtfBody::has_onhelpreddot() const {
  return _internal_has_onhelpreddot();
}
inline const ::msg::CSNtfOnHelpReddot& CSNtfBody::_internal_onhelpreddot() const {
  const ::msg::CSNtfOnHelpReddot* p = _impl_.onhelpreddot_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfOnHelpReddot&>(
      ::msg::_CSNtfOnHelpReddot_default_instance_);
}
inline const ::msg::CSNtfOnHelpReddot& CSNtfBody::onhelpreddot() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.OnHelpReddot)
  return _internal_onhelpreddot();
}
inline void CSNtfBody::unsafe_arena_set_allocated_onhelpreddot(
    ::msg::CSNtfOnHelpReddot* onhelpreddot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onhelpreddot_);
  }
  _impl_.onhelpreddot_ = onhelpreddot;
  if (onhelpreddot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.OnHelpReddot)
}
inline ::msg::CSNtfOnHelpReddot* CSNtfBody::release_onhelpreddot() {
  
  ::msg::CSNtfOnHelpReddot* temp = _impl_.onhelpreddot_;
  _impl_.onhelpreddot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfOnHelpReddot* CSNtfBody::unsafe_arena_release_onhelpreddot() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.OnHelpReddot)
  
  ::msg::CSNtfOnHelpReddot* temp = _impl_.onhelpreddot_;
  _impl_.onhelpreddot_ = nullptr;
  return temp;
}
inline ::msg::CSNtfOnHelpReddot* CSNtfBody::_internal_mutable_onhelpreddot() {
  
  if (_impl_.onhelpreddot_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfOnHelpReddot>(GetArenaForAllocation());
    _impl_.onhelpreddot_ = p;
  }
  return _impl_.onhelpreddot_;
}
inline ::msg::CSNtfOnHelpReddot* CSNtfBody::mutable_onhelpreddot() {
  ::msg::CSNtfOnHelpReddot* _msg = _internal_mutable_onhelpreddot();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.OnHelpReddot)
  return _msg;
}
inline void CSNtfBody::set_allocated_onhelpreddot(::msg::CSNtfOnHelpReddot* onhelpreddot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onhelpreddot_);
  }
  if (onhelpreddot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(onhelpreddot));
    if (message_arena != submessage_arena) {
      onhelpreddot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onhelpreddot, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.onhelpreddot_ = onhelpreddot;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.OnHelpReddot)
}

// .msg.CSNtfBagUpdate BagUpdate = 100;
inline bool CSNtfBody::_internal_has_bagupdate() const {
  return this != internal_default_instance() && _impl_.bagupdate_ != nullptr;
}
inline bool CSNtfBody::has_bagupdate() const {
  return _internal_has_bagupdate();
}
inline const ::msg::CSNtfBagUpdate& CSNtfBody::_internal_bagupdate() const {
  const ::msg::CSNtfBagUpdate* p = _impl_.bagupdate_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfBagUpdate&>(
      ::msg::_CSNtfBagUpdate_default_instance_);
}
inline const ::msg::CSNtfBagUpdate& CSNtfBody::bagupdate() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.BagUpdate)
  return _internal_bagupdate();
}
inline void CSNtfBody::unsafe_arena_set_allocated_bagupdate(
    ::msg::CSNtfBagUpdate* bagupdate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bagupdate_);
  }
  _impl_.bagupdate_ = bagupdate;
  if (bagupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.BagUpdate)
}
inline ::msg::CSNtfBagUpdate* CSNtfBody::release_bagupdate() {
  
  ::msg::CSNtfBagUpdate* temp = _impl_.bagupdate_;
  _impl_.bagupdate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfBagUpdate* CSNtfBody::unsafe_arena_release_bagupdate() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.BagUpdate)
  
  ::msg::CSNtfBagUpdate* temp = _impl_.bagupdate_;
  _impl_.bagupdate_ = nullptr;
  return temp;
}
inline ::msg::CSNtfBagUpdate* CSNtfBody::_internal_mutable_bagupdate() {
  
  if (_impl_.bagupdate_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfBagUpdate>(GetArenaForAllocation());
    _impl_.bagupdate_ = p;
  }
  return _impl_.bagupdate_;
}
inline ::msg::CSNtfBagUpdate* CSNtfBody::mutable_bagupdate() {
  ::msg::CSNtfBagUpdate* _msg = _internal_mutable_bagupdate();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.BagUpdate)
  return _msg;
}
inline void CSNtfBody::set_allocated_bagupdate(::msg::CSNtfBagUpdate* bagupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bagupdate_);
  }
  if (bagupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bagupdate));
    if (message_arena != submessage_arena) {
      bagupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bagupdate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bagupdate_ = bagupdate;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.BagUpdate)
}

// .msg.CSNtfRefreshMelee RefreshMelee = 101;
inline bool CSNtfBody::_internal_has_refreshmelee() const {
  return this != internal_default_instance() && _impl_.refreshmelee_ != nullptr;
}
inline bool CSNtfBody::has_refreshmelee() const {
  return _internal_has_refreshmelee();
}
inline const ::msg::CSNtfRefreshMelee& CSNtfBody::_internal_refreshmelee() const {
  const ::msg::CSNtfRefreshMelee* p = _impl_.refreshmelee_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfRefreshMelee&>(
      ::msg::_CSNtfRefreshMelee_default_instance_);
}
inline const ::msg::CSNtfRefreshMelee& CSNtfBody::refreshmelee() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.RefreshMelee)
  return _internal_refreshmelee();
}
inline void CSNtfBody::unsafe_arena_set_allocated_refreshmelee(
    ::msg::CSNtfRefreshMelee* refreshmelee) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refreshmelee_);
  }
  _impl_.refreshmelee_ = refreshmelee;
  if (refreshmelee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.RefreshMelee)
}
inline ::msg::CSNtfRefreshMelee* CSNtfBody::release_refreshmelee() {
  
  ::msg::CSNtfRefreshMelee* temp = _impl_.refreshmelee_;
  _impl_.refreshmelee_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfRefreshMelee* CSNtfBody::unsafe_arena_release_refreshmelee() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.RefreshMelee)
  
  ::msg::CSNtfRefreshMelee* temp = _impl_.refreshmelee_;
  _impl_.refreshmelee_ = nullptr;
  return temp;
}
inline ::msg::CSNtfRefreshMelee* CSNtfBody::_internal_mutable_refreshmelee() {
  
  if (_impl_.refreshmelee_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfRefreshMelee>(GetArenaForAllocation());
    _impl_.refreshmelee_ = p;
  }
  return _impl_.refreshmelee_;
}
inline ::msg::CSNtfRefreshMelee* CSNtfBody::mutable_refreshmelee() {
  ::msg::CSNtfRefreshMelee* _msg = _internal_mutable_refreshmelee();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.RefreshMelee)
  return _msg;
}
inline void CSNtfBody::set_allocated_refreshmelee(::msg::CSNtfRefreshMelee* refreshmelee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refreshmelee_);
  }
  if (refreshmelee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(refreshmelee));
    if (message_arena != submessage_arena) {
      refreshmelee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, refreshmelee, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.refreshmelee_ = refreshmelee;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.RefreshMelee)
}

// .msg.CSNtfWebLogin WebLogin = 102;
inline bool CSNtfBody::_internal_has_weblogin() const {
  return this != internal_default_instance() && _impl_.weblogin_ != nullptr;
}
inline bool CSNtfBody::has_weblogin() const {
  return _internal_has_weblogin();
}
inline const ::msg::CSNtfWebLogin& CSNtfBody::_internal_weblogin() const {
  const ::msg::CSNtfWebLogin* p = _impl_.weblogin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfWebLogin&>(
      ::msg::_CSNtfWebLogin_default_instance_);
}
inline const ::msg::CSNtfWebLogin& CSNtfBody::weblogin() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.WebLogin)
  return _internal_weblogin();
}
inline void CSNtfBody::unsafe_arena_set_allocated_weblogin(
    ::msg::CSNtfWebLogin* weblogin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weblogin_);
  }
  _impl_.weblogin_ = weblogin;
  if (weblogin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.WebLogin)
}
inline ::msg::CSNtfWebLogin* CSNtfBody::release_weblogin() {
  
  ::msg::CSNtfWebLogin* temp = _impl_.weblogin_;
  _impl_.weblogin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfWebLogin* CSNtfBody::unsafe_arena_release_weblogin() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.WebLogin)
  
  ::msg::CSNtfWebLogin* temp = _impl_.weblogin_;
  _impl_.weblogin_ = nullptr;
  return temp;
}
inline ::msg::CSNtfWebLogin* CSNtfBody::_internal_mutable_weblogin() {
  
  if (_impl_.weblogin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfWebLogin>(GetArenaForAllocation());
    _impl_.weblogin_ = p;
  }
  return _impl_.weblogin_;
}
inline ::msg::CSNtfWebLogin* CSNtfBody::mutable_weblogin() {
  ::msg::CSNtfWebLogin* _msg = _internal_mutable_weblogin();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.WebLogin)
  return _msg;
}
inline void CSNtfBody::set_allocated_weblogin(::msg::CSNtfWebLogin* weblogin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weblogin_);
  }
  if (weblogin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(weblogin));
    if (message_arena != submessage_arena) {
      weblogin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weblogin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.weblogin_ = weblogin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.WebLogin)
}

// .msg.CSNtfCurrentTournament CurrentTournament = 103;
inline bool CSNtfBody::_internal_has_currenttournament() const {
  return this != internal_default_instance() && _impl_.currenttournament_ != nullptr;
}
inline bool CSNtfBody::has_currenttournament() const {
  return _internal_has_currenttournament();
}
inline const ::msg::CSNtfCurrentTournament& CSNtfBody::_internal_currenttournament() const {
  const ::msg::CSNtfCurrentTournament* p = _impl_.currenttournament_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfCurrentTournament&>(
      ::msg::_CSNtfCurrentTournament_default_instance_);
}
inline const ::msg::CSNtfCurrentTournament& CSNtfBody::currenttournament() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.CurrentTournament)
  return _internal_currenttournament();
}
inline void CSNtfBody::unsafe_arena_set_allocated_currenttournament(
    ::msg::CSNtfCurrentTournament* currenttournament) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.currenttournament_);
  }
  _impl_.currenttournament_ = currenttournament;
  if (currenttournament) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.CurrentTournament)
}
inline ::msg::CSNtfCurrentTournament* CSNtfBody::release_currenttournament() {
  
  ::msg::CSNtfCurrentTournament* temp = _impl_.currenttournament_;
  _impl_.currenttournament_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfCurrentTournament* CSNtfBody::unsafe_arena_release_currenttournament() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.CurrentTournament)
  
  ::msg::CSNtfCurrentTournament* temp = _impl_.currenttournament_;
  _impl_.currenttournament_ = nullptr;
  return temp;
}
inline ::msg::CSNtfCurrentTournament* CSNtfBody::_internal_mutable_currenttournament() {
  
  if (_impl_.currenttournament_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfCurrentTournament>(GetArenaForAllocation());
    _impl_.currenttournament_ = p;
  }
  return _impl_.currenttournament_;
}
inline ::msg::CSNtfCurrentTournament* CSNtfBody::mutable_currenttournament() {
  ::msg::CSNtfCurrentTournament* _msg = _internal_mutable_currenttournament();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.CurrentTournament)
  return _msg;
}
inline void CSNtfBody::set_allocated_currenttournament(::msg::CSNtfCurrentTournament* currenttournament) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.currenttournament_);
  }
  if (currenttournament) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(currenttournament));
    if (message_arena != submessage_arena) {
      currenttournament = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currenttournament, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.currenttournament_ = currenttournament;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.CurrentTournament)
}

// .msg.CSNtfTournamentBegin TournamentBegin = 104;
inline bool CSNtfBody::_internal_has_tournamentbegin() const {
  return this != internal_default_instance() && _impl_.tournamentbegin_ != nullptr;
}
inline bool CSNtfBody::has_tournamentbegin() const {
  return _internal_has_tournamentbegin();
}
inline const ::msg::CSNtfTournamentBegin& CSNtfBody::_internal_tournamentbegin() const {
  const ::msg::CSNtfTournamentBegin* p = _impl_.tournamentbegin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfTournamentBegin&>(
      ::msg::_CSNtfTournamentBegin_default_instance_);
}
inline const ::msg::CSNtfTournamentBegin& CSNtfBody::tournamentbegin() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.TournamentBegin)
  return _internal_tournamentbegin();
}
inline void CSNtfBody::unsafe_arena_set_allocated_tournamentbegin(
    ::msg::CSNtfTournamentBegin* tournamentbegin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentbegin_);
  }
  _impl_.tournamentbegin_ = tournamentbegin;
  if (tournamentbegin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.TournamentBegin)
}
inline ::msg::CSNtfTournamentBegin* CSNtfBody::release_tournamentbegin() {
  
  ::msg::CSNtfTournamentBegin* temp = _impl_.tournamentbegin_;
  _impl_.tournamentbegin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfTournamentBegin* CSNtfBody::unsafe_arena_release_tournamentbegin() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.TournamentBegin)
  
  ::msg::CSNtfTournamentBegin* temp = _impl_.tournamentbegin_;
  _impl_.tournamentbegin_ = nullptr;
  return temp;
}
inline ::msg::CSNtfTournamentBegin* CSNtfBody::_internal_mutable_tournamentbegin() {
  
  if (_impl_.tournamentbegin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfTournamentBegin>(GetArenaForAllocation());
    _impl_.tournamentbegin_ = p;
  }
  return _impl_.tournamentbegin_;
}
inline ::msg::CSNtfTournamentBegin* CSNtfBody::mutable_tournamentbegin() {
  ::msg::CSNtfTournamentBegin* _msg = _internal_mutable_tournamentbegin();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.TournamentBegin)
  return _msg;
}
inline void CSNtfBody::set_allocated_tournamentbegin(::msg::CSNtfTournamentBegin* tournamentbegin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentbegin_);
  }
  if (tournamentbegin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tournamentbegin));
    if (message_arena != submessage_arena) {
      tournamentbegin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tournamentbegin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tournamentbegin_ = tournamentbegin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.TournamentBegin)
}

// .msg.CSNtfTournamentEnrollBegin TournamentEnrollBegin = 105;
inline bool CSNtfBody::_internal_has_tournamentenrollbegin() const {
  return this != internal_default_instance() && _impl_.tournamentenrollbegin_ != nullptr;
}
inline bool CSNtfBody::has_tournamentenrollbegin() const {
  return _internal_has_tournamentenrollbegin();
}
inline const ::msg::CSNtfTournamentEnrollBegin& CSNtfBody::_internal_tournamentenrollbegin() const {
  const ::msg::CSNtfTournamentEnrollBegin* p = _impl_.tournamentenrollbegin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfTournamentEnrollBegin&>(
      ::msg::_CSNtfTournamentEnrollBegin_default_instance_);
}
inline const ::msg::CSNtfTournamentEnrollBegin& CSNtfBody::tournamentenrollbegin() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.TournamentEnrollBegin)
  return _internal_tournamentenrollbegin();
}
inline void CSNtfBody::unsafe_arena_set_allocated_tournamentenrollbegin(
    ::msg::CSNtfTournamentEnrollBegin* tournamentenrollbegin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentenrollbegin_);
  }
  _impl_.tournamentenrollbegin_ = tournamentenrollbegin;
  if (tournamentenrollbegin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.TournamentEnrollBegin)
}
inline ::msg::CSNtfTournamentEnrollBegin* CSNtfBody::release_tournamentenrollbegin() {
  
  ::msg::CSNtfTournamentEnrollBegin* temp = _impl_.tournamentenrollbegin_;
  _impl_.tournamentenrollbegin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfTournamentEnrollBegin* CSNtfBody::unsafe_arena_release_tournamentenrollbegin() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.TournamentEnrollBegin)
  
  ::msg::CSNtfTournamentEnrollBegin* temp = _impl_.tournamentenrollbegin_;
  _impl_.tournamentenrollbegin_ = nullptr;
  return temp;
}
inline ::msg::CSNtfTournamentEnrollBegin* CSNtfBody::_internal_mutable_tournamentenrollbegin() {
  
  if (_impl_.tournamentenrollbegin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfTournamentEnrollBegin>(GetArenaForAllocation());
    _impl_.tournamentenrollbegin_ = p;
  }
  return _impl_.tournamentenrollbegin_;
}
inline ::msg::CSNtfTournamentEnrollBegin* CSNtfBody::mutable_tournamentenrollbegin() {
  ::msg::CSNtfTournamentEnrollBegin* _msg = _internal_mutable_tournamentenrollbegin();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.TournamentEnrollBegin)
  return _msg;
}
inline void CSNtfBody::set_allocated_tournamentenrollbegin(::msg::CSNtfTournamentEnrollBegin* tournamentenrollbegin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentenrollbegin_);
  }
  if (tournamentenrollbegin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tournamentenrollbegin));
    if (message_arena != submessage_arena) {
      tournamentenrollbegin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tournamentenrollbegin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tournamentenrollbegin_ = tournamentenrollbegin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.TournamentEnrollBegin)
}

// .msg.CSNtfTournamentEnrollEnd TournamentEnrollEnd = 106;
inline bool CSNtfBody::_internal_has_tournamentenrollend() const {
  return this != internal_default_instance() && _impl_.tournamentenrollend_ != nullptr;
}
inline bool CSNtfBody::has_tournamentenrollend() const {
  return _internal_has_tournamentenrollend();
}
inline const ::msg::CSNtfTournamentEnrollEnd& CSNtfBody::_internal_tournamentenrollend() const {
  const ::msg::CSNtfTournamentEnrollEnd* p = _impl_.tournamentenrollend_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfTournamentEnrollEnd&>(
      ::msg::_CSNtfTournamentEnrollEnd_default_instance_);
}
inline const ::msg::CSNtfTournamentEnrollEnd& CSNtfBody::tournamentenrollend() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.TournamentEnrollEnd)
  return _internal_tournamentenrollend();
}
inline void CSNtfBody::unsafe_arena_set_allocated_tournamentenrollend(
    ::msg::CSNtfTournamentEnrollEnd* tournamentenrollend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentenrollend_);
  }
  _impl_.tournamentenrollend_ = tournamentenrollend;
  if (tournamentenrollend) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.TournamentEnrollEnd)
}
inline ::msg::CSNtfTournamentEnrollEnd* CSNtfBody::release_tournamentenrollend() {
  
  ::msg::CSNtfTournamentEnrollEnd* temp = _impl_.tournamentenrollend_;
  _impl_.tournamentenrollend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfTournamentEnrollEnd* CSNtfBody::unsafe_arena_release_tournamentenrollend() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.TournamentEnrollEnd)
  
  ::msg::CSNtfTournamentEnrollEnd* temp = _impl_.tournamentenrollend_;
  _impl_.tournamentenrollend_ = nullptr;
  return temp;
}
inline ::msg::CSNtfTournamentEnrollEnd* CSNtfBody::_internal_mutable_tournamentenrollend() {
  
  if (_impl_.tournamentenrollend_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfTournamentEnrollEnd>(GetArenaForAllocation());
    _impl_.tournamentenrollend_ = p;
  }
  return _impl_.tournamentenrollend_;
}
inline ::msg::CSNtfTournamentEnrollEnd* CSNtfBody::mutable_tournamentenrollend() {
  ::msg::CSNtfTournamentEnrollEnd* _msg = _internal_mutable_tournamentenrollend();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.TournamentEnrollEnd)
  return _msg;
}
inline void CSNtfBody::set_allocated_tournamentenrollend(::msg::CSNtfTournamentEnrollEnd* tournamentenrollend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentenrollend_);
  }
  if (tournamentenrollend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tournamentenrollend));
    if (message_arena != submessage_arena) {
      tournamentenrollend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tournamentenrollend, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tournamentenrollend_ = tournamentenrollend;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.TournamentEnrollEnd)
}

// .msg.CSNtfJoinTournamentRoom JoinTournamentRoom = 107;
inline bool CSNtfBody::_internal_has_jointournamentroom() const {
  return this != internal_default_instance() && _impl_.jointournamentroom_ != nullptr;
}
inline bool CSNtfBody::has_jointournamentroom() const {
  return _internal_has_jointournamentroom();
}
inline const ::msg::CSNtfJoinTournamentRoom& CSNtfBody::_internal_jointournamentroom() const {
  const ::msg::CSNtfJoinTournamentRoom* p = _impl_.jointournamentroom_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfJoinTournamentRoom&>(
      ::msg::_CSNtfJoinTournamentRoom_default_instance_);
}
inline const ::msg::CSNtfJoinTournamentRoom& CSNtfBody::jointournamentroom() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.JoinTournamentRoom)
  return _internal_jointournamentroom();
}
inline void CSNtfBody::unsafe_arena_set_allocated_jointournamentroom(
    ::msg::CSNtfJoinTournamentRoom* jointournamentroom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jointournamentroom_);
  }
  _impl_.jointournamentroom_ = jointournamentroom;
  if (jointournamentroom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.JoinTournamentRoom)
}
inline ::msg::CSNtfJoinTournamentRoom* CSNtfBody::release_jointournamentroom() {
  
  ::msg::CSNtfJoinTournamentRoom* temp = _impl_.jointournamentroom_;
  _impl_.jointournamentroom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfJoinTournamentRoom* CSNtfBody::unsafe_arena_release_jointournamentroom() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.JoinTournamentRoom)
  
  ::msg::CSNtfJoinTournamentRoom* temp = _impl_.jointournamentroom_;
  _impl_.jointournamentroom_ = nullptr;
  return temp;
}
inline ::msg::CSNtfJoinTournamentRoom* CSNtfBody::_internal_mutable_jointournamentroom() {
  
  if (_impl_.jointournamentroom_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfJoinTournamentRoom>(GetArenaForAllocation());
    _impl_.jointournamentroom_ = p;
  }
  return _impl_.jointournamentroom_;
}
inline ::msg::CSNtfJoinTournamentRoom* CSNtfBody::mutable_jointournamentroom() {
  ::msg::CSNtfJoinTournamentRoom* _msg = _internal_mutable_jointournamentroom();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.JoinTournamentRoom)
  return _msg;
}
inline void CSNtfBody::set_allocated_jointournamentroom(::msg::CSNtfJoinTournamentRoom* jointournamentroom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.jointournamentroom_);
  }
  if (jointournamentroom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jointournamentroom));
    if (message_arena != submessage_arena) {
      jointournamentroom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jointournamentroom, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.jointournamentroom_ = jointournamentroom;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.JoinTournamentRoom)
}

// .msg.CSNtfTournamentEnd TournamentEnd = 108;
inline bool CSNtfBody::_internal_has_tournamentend() const {
  return this != internal_default_instance() && _impl_.tournamentend_ != nullptr;
}
inline bool CSNtfBody::has_tournamentend() const {
  return _internal_has_tournamentend();
}
inline const ::msg::CSNtfTournamentEnd& CSNtfBody::_internal_tournamentend() const {
  const ::msg::CSNtfTournamentEnd* p = _impl_.tournamentend_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfTournamentEnd&>(
      ::msg::_CSNtfTournamentEnd_default_instance_);
}
inline const ::msg::CSNtfTournamentEnd& CSNtfBody::tournamentend() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.TournamentEnd)
  return _internal_tournamentend();
}
inline void CSNtfBody::unsafe_arena_set_allocated_tournamentend(
    ::msg::CSNtfTournamentEnd* tournamentend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentend_);
  }
  _impl_.tournamentend_ = tournamentend;
  if (tournamentend) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.TournamentEnd)
}
inline ::msg::CSNtfTournamentEnd* CSNtfBody::release_tournamentend() {
  
  ::msg::CSNtfTournamentEnd* temp = _impl_.tournamentend_;
  _impl_.tournamentend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfTournamentEnd* CSNtfBody::unsafe_arena_release_tournamentend() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.TournamentEnd)
  
  ::msg::CSNtfTournamentEnd* temp = _impl_.tournamentend_;
  _impl_.tournamentend_ = nullptr;
  return temp;
}
inline ::msg::CSNtfTournamentEnd* CSNtfBody::_internal_mutable_tournamentend() {
  
  if (_impl_.tournamentend_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfTournamentEnd>(GetArenaForAllocation());
    _impl_.tournamentend_ = p;
  }
  return _impl_.tournamentend_;
}
inline ::msg::CSNtfTournamentEnd* CSNtfBody::mutable_tournamentend() {
  ::msg::CSNtfTournamentEnd* _msg = _internal_mutable_tournamentend();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.TournamentEnd)
  return _msg;
}
inline void CSNtfBody::set_allocated_tournamentend(::msg::CSNtfTournamentEnd* tournamentend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentend_);
  }
  if (tournamentend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tournamentend));
    if (message_arena != submessage_arena) {
      tournamentend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tournamentend, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tournamentend_ = tournamentend;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.TournamentEnd)
}

// .msg.CSNtfTournamentOut TournamentOut = 109;
inline bool CSNtfBody::_internal_has_tournamentout() const {
  return this != internal_default_instance() && _impl_.tournamentout_ != nullptr;
}
inline bool CSNtfBody::has_tournamentout() const {
  return _internal_has_tournamentout();
}
inline const ::msg::CSNtfTournamentOut& CSNtfBody::_internal_tournamentout() const {
  const ::msg::CSNtfTournamentOut* p = _impl_.tournamentout_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfTournamentOut&>(
      ::msg::_CSNtfTournamentOut_default_instance_);
}
inline const ::msg::CSNtfTournamentOut& CSNtfBody::tournamentout() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.TournamentOut)
  return _internal_tournamentout();
}
inline void CSNtfBody::unsafe_arena_set_allocated_tournamentout(
    ::msg::CSNtfTournamentOut* tournamentout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentout_);
  }
  _impl_.tournamentout_ = tournamentout;
  if (tournamentout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.TournamentOut)
}
inline ::msg::CSNtfTournamentOut* CSNtfBody::release_tournamentout() {
  
  ::msg::CSNtfTournamentOut* temp = _impl_.tournamentout_;
  _impl_.tournamentout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfTournamentOut* CSNtfBody::unsafe_arena_release_tournamentout() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.TournamentOut)
  
  ::msg::CSNtfTournamentOut* temp = _impl_.tournamentout_;
  _impl_.tournamentout_ = nullptr;
  return temp;
}
inline ::msg::CSNtfTournamentOut* CSNtfBody::_internal_mutable_tournamentout() {
  
  if (_impl_.tournamentout_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfTournamentOut>(GetArenaForAllocation());
    _impl_.tournamentout_ = p;
  }
  return _impl_.tournamentout_;
}
inline ::msg::CSNtfTournamentOut* CSNtfBody::mutable_tournamentout() {
  ::msg::CSNtfTournamentOut* _msg = _internal_mutable_tournamentout();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.TournamentOut)
  return _msg;
}
inline void CSNtfBody::set_allocated_tournamentout(::msg::CSNtfTournamentOut* tournamentout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentout_);
  }
  if (tournamentout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tournamentout));
    if (message_arena != submessage_arena) {
      tournamentout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tournamentout, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tournamentout_ = tournamentout;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.TournamentOut)
}

// .msg.CSNtfTournamentRoundEnd TournamentRoundEnd = 110;
inline bool CSNtfBody::_internal_has_tournamentroundend() const {
  return this != internal_default_instance() && _impl_.tournamentroundend_ != nullptr;
}
inline bool CSNtfBody::has_tournamentroundend() const {
  return _internal_has_tournamentroundend();
}
inline const ::msg::CSNtfTournamentRoundEnd& CSNtfBody::_internal_tournamentroundend() const {
  const ::msg::CSNtfTournamentRoundEnd* p = _impl_.tournamentroundend_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfTournamentRoundEnd&>(
      ::msg::_CSNtfTournamentRoundEnd_default_instance_);
}
inline const ::msg::CSNtfTournamentRoundEnd& CSNtfBody::tournamentroundend() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.TournamentRoundEnd)
  return _internal_tournamentroundend();
}
inline void CSNtfBody::unsafe_arena_set_allocated_tournamentroundend(
    ::msg::CSNtfTournamentRoundEnd* tournamentroundend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentroundend_);
  }
  _impl_.tournamentroundend_ = tournamentroundend;
  if (tournamentroundend) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.TournamentRoundEnd)
}
inline ::msg::CSNtfTournamentRoundEnd* CSNtfBody::release_tournamentroundend() {
  
  ::msg::CSNtfTournamentRoundEnd* temp = _impl_.tournamentroundend_;
  _impl_.tournamentroundend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfTournamentRoundEnd* CSNtfBody::unsafe_arena_release_tournamentroundend() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.TournamentRoundEnd)
  
  ::msg::CSNtfTournamentRoundEnd* temp = _impl_.tournamentroundend_;
  _impl_.tournamentroundend_ = nullptr;
  return temp;
}
inline ::msg::CSNtfTournamentRoundEnd* CSNtfBody::_internal_mutable_tournamentroundend() {
  
  if (_impl_.tournamentroundend_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfTournamentRoundEnd>(GetArenaForAllocation());
    _impl_.tournamentroundend_ = p;
  }
  return _impl_.tournamentroundend_;
}
inline ::msg::CSNtfTournamentRoundEnd* CSNtfBody::mutable_tournamentroundend() {
  ::msg::CSNtfTournamentRoundEnd* _msg = _internal_mutable_tournamentroundend();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.TournamentRoundEnd)
  return _msg;
}
inline void CSNtfBody::set_allocated_tournamentroundend(::msg::CSNtfTournamentRoundEnd* tournamentroundend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tournamentroundend_);
  }
  if (tournamentroundend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tournamentroundend));
    if (message_arena != submessage_arena) {
      tournamentroundend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tournamentroundend, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tournamentroundend_ = tournamentroundend;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.TournamentRoundEnd)
}

// .msg.CSNtfLuckStarAward LuckStarAward = 111;
inline bool CSNtfBody::_internal_has_luckstaraward() const {
  return this != internal_default_instance() && _impl_.luckstaraward_ != nullptr;
}
inline bool CSNtfBody::has_luckstaraward() const {
  return _internal_has_luckstaraward();
}
inline const ::msg::CSNtfLuckStarAward& CSNtfBody::_internal_luckstaraward() const {
  const ::msg::CSNtfLuckStarAward* p = _impl_.luckstaraward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfLuckStarAward&>(
      ::msg::_CSNtfLuckStarAward_default_instance_);
}
inline const ::msg::CSNtfLuckStarAward& CSNtfBody::luckstaraward() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.LuckStarAward)
  return _internal_luckstaraward();
}
inline void CSNtfBody::unsafe_arena_set_allocated_luckstaraward(
    ::msg::CSNtfLuckStarAward* luckstaraward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.luckstaraward_);
  }
  _impl_.luckstaraward_ = luckstaraward;
  if (luckstaraward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.LuckStarAward)
}
inline ::msg::CSNtfLuckStarAward* CSNtfBody::release_luckstaraward() {
  
  ::msg::CSNtfLuckStarAward* temp = _impl_.luckstaraward_;
  _impl_.luckstaraward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfLuckStarAward* CSNtfBody::unsafe_arena_release_luckstaraward() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.LuckStarAward)
  
  ::msg::CSNtfLuckStarAward* temp = _impl_.luckstaraward_;
  _impl_.luckstaraward_ = nullptr;
  return temp;
}
inline ::msg::CSNtfLuckStarAward* CSNtfBody::_internal_mutable_luckstaraward() {
  
  if (_impl_.luckstaraward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfLuckStarAward>(GetArenaForAllocation());
    _impl_.luckstaraward_ = p;
  }
  return _impl_.luckstaraward_;
}
inline ::msg::CSNtfLuckStarAward* CSNtfBody::mutable_luckstaraward() {
  ::msg::CSNtfLuckStarAward* _msg = _internal_mutable_luckstaraward();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.LuckStarAward)
  return _msg;
}
inline void CSNtfBody::set_allocated_luckstaraward(::msg::CSNtfLuckStarAward* luckstaraward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.luckstaraward_);
  }
  if (luckstaraward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(luckstaraward));
    if (message_arena != submessage_arena) {
      luckstaraward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, luckstaraward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.luckstaraward_ = luckstaraward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.LuckStarAward)
}

// .msg.CSNtfInviteObserve InviteObserve = 112;
inline bool CSNtfBody::_internal_has_inviteobserve() const {
  return this != internal_default_instance() && _impl_.inviteobserve_ != nullptr;
}
inline bool CSNtfBody::has_inviteobserve() const {
  return _internal_has_inviteobserve();
}
inline const ::msg::CSNtfInviteObserve& CSNtfBody::_internal_inviteobserve() const {
  const ::msg::CSNtfInviteObserve* p = _impl_.inviteobserve_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfInviteObserve&>(
      ::msg::_CSNtfInviteObserve_default_instance_);
}
inline const ::msg::CSNtfInviteObserve& CSNtfBody::inviteobserve() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.InviteObserve)
  return _internal_inviteobserve();
}
inline void CSNtfBody::unsafe_arena_set_allocated_inviteobserve(
    ::msg::CSNtfInviteObserve* inviteobserve) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inviteobserve_);
  }
  _impl_.inviteobserve_ = inviteobserve;
  if (inviteobserve) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.InviteObserve)
}
inline ::msg::CSNtfInviteObserve* CSNtfBody::release_inviteobserve() {
  
  ::msg::CSNtfInviteObserve* temp = _impl_.inviteobserve_;
  _impl_.inviteobserve_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfInviteObserve* CSNtfBody::unsafe_arena_release_inviteobserve() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.InviteObserve)
  
  ::msg::CSNtfInviteObserve* temp = _impl_.inviteobserve_;
  _impl_.inviteobserve_ = nullptr;
  return temp;
}
inline ::msg::CSNtfInviteObserve* CSNtfBody::_internal_mutable_inviteobserve() {
  
  if (_impl_.inviteobserve_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfInviteObserve>(GetArenaForAllocation());
    _impl_.inviteobserve_ = p;
  }
  return _impl_.inviteobserve_;
}
inline ::msg::CSNtfInviteObserve* CSNtfBody::mutable_inviteobserve() {
  ::msg::CSNtfInviteObserve* _msg = _internal_mutable_inviteobserve();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.InviteObserve)
  return _msg;
}
inline void CSNtfBody::set_allocated_inviteobserve(::msg::CSNtfInviteObserve* inviteobserve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inviteobserve_);
  }
  if (inviteobserve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inviteobserve));
    if (message_arena != submessage_arena) {
      inviteobserve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inviteobserve, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.inviteobserve_ = inviteobserve;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.InviteObserve)
}

// .msg.CSNtfRejectObserve RejectObserve = 113;
inline bool CSNtfBody::_internal_has_rejectobserve() const {
  return this != internal_default_instance() && _impl_.rejectobserve_ != nullptr;
}
inline bool CSNtfBody::has_rejectobserve() const {
  return _internal_has_rejectobserve();
}
inline const ::msg::CSNtfRejectObserve& CSNtfBody::_internal_rejectobserve() const {
  const ::msg::CSNtfRejectObserve* p = _impl_.rejectobserve_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfRejectObserve&>(
      ::msg::_CSNtfRejectObserve_default_instance_);
}
inline const ::msg::CSNtfRejectObserve& CSNtfBody::rejectobserve() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.RejectObserve)
  return _internal_rejectobserve();
}
inline void CSNtfBody::unsafe_arena_set_allocated_rejectobserve(
    ::msg::CSNtfRejectObserve* rejectobserve) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rejectobserve_);
  }
  _impl_.rejectobserve_ = rejectobserve;
  if (rejectobserve) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.RejectObserve)
}
inline ::msg::CSNtfRejectObserve* CSNtfBody::release_rejectobserve() {
  
  ::msg::CSNtfRejectObserve* temp = _impl_.rejectobserve_;
  _impl_.rejectobserve_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfRejectObserve* CSNtfBody::unsafe_arena_release_rejectobserve() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.RejectObserve)
  
  ::msg::CSNtfRejectObserve* temp = _impl_.rejectobserve_;
  _impl_.rejectobserve_ = nullptr;
  return temp;
}
inline ::msg::CSNtfRejectObserve* CSNtfBody::_internal_mutable_rejectobserve() {
  
  if (_impl_.rejectobserve_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfRejectObserve>(GetArenaForAllocation());
    _impl_.rejectobserve_ = p;
  }
  return _impl_.rejectobserve_;
}
inline ::msg::CSNtfRejectObserve* CSNtfBody::mutable_rejectobserve() {
  ::msg::CSNtfRejectObserve* _msg = _internal_mutable_rejectobserve();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.RejectObserve)
  return _msg;
}
inline void CSNtfBody::set_allocated_rejectobserve(::msg::CSNtfRejectObserve* rejectobserve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rejectobserve_);
  }
  if (rejectobserve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rejectobserve));
    if (message_arena != submessage_arena) {
      rejectobserve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rejectobserve, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rejectobserve_ = rejectobserve;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.RejectObserve)
}

// .msg.CSNtfChestCount ChestCount = 114;
inline bool CSNtfBody::_internal_has_chestcount() const {
  return this != internal_default_instance() && _impl_.chestcount_ != nullptr;
}
inline bool CSNtfBody::has_chestcount() const {
  return _internal_has_chestcount();
}
inline const ::msg::CSNtfChestCount& CSNtfBody::_internal_chestcount() const {
  const ::msg::CSNtfChestCount* p = _impl_.chestcount_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfChestCount&>(
      ::msg::_CSNtfChestCount_default_instance_);
}
inline const ::msg::CSNtfChestCount& CSNtfBody::chestcount() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.ChestCount)
  return _internal_chestcount();
}
inline void CSNtfBody::unsafe_arena_set_allocated_chestcount(
    ::msg::CSNtfChestCount* chestcount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chestcount_);
  }
  _impl_.chestcount_ = chestcount;
  if (chestcount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.ChestCount)
}
inline ::msg::CSNtfChestCount* CSNtfBody::release_chestcount() {
  
  ::msg::CSNtfChestCount* temp = _impl_.chestcount_;
  _impl_.chestcount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfChestCount* CSNtfBody::unsafe_arena_release_chestcount() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.ChestCount)
  
  ::msg::CSNtfChestCount* temp = _impl_.chestcount_;
  _impl_.chestcount_ = nullptr;
  return temp;
}
inline ::msg::CSNtfChestCount* CSNtfBody::_internal_mutable_chestcount() {
  
  if (_impl_.chestcount_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfChestCount>(GetArenaForAllocation());
    _impl_.chestcount_ = p;
  }
  return _impl_.chestcount_;
}
inline ::msg::CSNtfChestCount* CSNtfBody::mutable_chestcount() {
  ::msg::CSNtfChestCount* _msg = _internal_mutable_chestcount();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.ChestCount)
  return _msg;
}
inline void CSNtfBody::set_allocated_chestcount(::msg::CSNtfChestCount* chestcount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chestcount_);
  }
  if (chestcount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chestcount));
    if (message_arena != submessage_arena) {
      chestcount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chestcount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chestcount_ = chestcount;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.ChestCount)
}

// .msg.CSNtfRecruitInfo RecruitInfo = 115;
inline bool CSNtfBody::_internal_has_recruitinfo() const {
  return this != internal_default_instance() && _impl_.recruitinfo_ != nullptr;
}
inline bool CSNtfBody::has_recruitinfo() const {
  return _internal_has_recruitinfo();
}
inline const ::msg::CSNtfRecruitInfo& CSNtfBody::_internal_recruitinfo() const {
  const ::msg::CSNtfRecruitInfo* p = _impl_.recruitinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfRecruitInfo&>(
      ::msg::_CSNtfRecruitInfo_default_instance_);
}
inline const ::msg::CSNtfRecruitInfo& CSNtfBody::recruitinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.RecruitInfo)
  return _internal_recruitinfo();
}
inline void CSNtfBody::unsafe_arena_set_allocated_recruitinfo(
    ::msg::CSNtfRecruitInfo* recruitinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recruitinfo_);
  }
  _impl_.recruitinfo_ = recruitinfo;
  if (recruitinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.RecruitInfo)
}
inline ::msg::CSNtfRecruitInfo* CSNtfBody::release_recruitinfo() {
  
  ::msg::CSNtfRecruitInfo* temp = _impl_.recruitinfo_;
  _impl_.recruitinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfRecruitInfo* CSNtfBody::unsafe_arena_release_recruitinfo() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.RecruitInfo)
  
  ::msg::CSNtfRecruitInfo* temp = _impl_.recruitinfo_;
  _impl_.recruitinfo_ = nullptr;
  return temp;
}
inline ::msg::CSNtfRecruitInfo* CSNtfBody::_internal_mutable_recruitinfo() {
  
  if (_impl_.recruitinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfRecruitInfo>(GetArenaForAllocation());
    _impl_.recruitinfo_ = p;
  }
  return _impl_.recruitinfo_;
}
inline ::msg::CSNtfRecruitInfo* CSNtfBody::mutable_recruitinfo() {
  ::msg::CSNtfRecruitInfo* _msg = _internal_mutable_recruitinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.RecruitInfo)
  return _msg;
}
inline void CSNtfBody::set_allocated_recruitinfo(::msg::CSNtfRecruitInfo* recruitinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recruitinfo_);
  }
  if (recruitinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recruitinfo));
    if (message_arena != submessage_arena) {
      recruitinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recruitinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recruitinfo_ = recruitinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.RecruitInfo)
}

// .msg.CSNtfRecruitPlayer RecruitPlayer = 116;
inline bool CSNtfBody::_internal_has_recruitplayer() const {
  return this != internal_default_instance() && _impl_.recruitplayer_ != nullptr;
}
inline bool CSNtfBody::has_recruitplayer() const {
  return _internal_has_recruitplayer();
}
inline const ::msg::CSNtfRecruitPlayer& CSNtfBody::_internal_recruitplayer() const {
  const ::msg::CSNtfRecruitPlayer* p = _impl_.recruitplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfRecruitPlayer&>(
      ::msg::_CSNtfRecruitPlayer_default_instance_);
}
inline const ::msg::CSNtfRecruitPlayer& CSNtfBody::recruitplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.RecruitPlayer)
  return _internal_recruitplayer();
}
inline void CSNtfBody::unsafe_arena_set_allocated_recruitplayer(
    ::msg::CSNtfRecruitPlayer* recruitplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recruitplayer_);
  }
  _impl_.recruitplayer_ = recruitplayer;
  if (recruitplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.RecruitPlayer)
}
inline ::msg::CSNtfRecruitPlayer* CSNtfBody::release_recruitplayer() {
  
  ::msg::CSNtfRecruitPlayer* temp = _impl_.recruitplayer_;
  _impl_.recruitplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfRecruitPlayer* CSNtfBody::unsafe_arena_release_recruitplayer() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.RecruitPlayer)
  
  ::msg::CSNtfRecruitPlayer* temp = _impl_.recruitplayer_;
  _impl_.recruitplayer_ = nullptr;
  return temp;
}
inline ::msg::CSNtfRecruitPlayer* CSNtfBody::_internal_mutable_recruitplayer() {
  
  if (_impl_.recruitplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfRecruitPlayer>(GetArenaForAllocation());
    _impl_.recruitplayer_ = p;
  }
  return _impl_.recruitplayer_;
}
inline ::msg::CSNtfRecruitPlayer* CSNtfBody::mutable_recruitplayer() {
  ::msg::CSNtfRecruitPlayer* _msg = _internal_mutable_recruitplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.RecruitPlayer)
  return _msg;
}
inline void CSNtfBody::set_allocated_recruitplayer(::msg::CSNtfRecruitPlayer* recruitplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recruitplayer_);
  }
  if (recruitplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recruitplayer));
    if (message_arena != submessage_arena) {
      recruitplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recruitplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recruitplayer_ = recruitplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.RecruitPlayer)
}

// .msg.CSNtfRecruitPlayerBattle RecruitPlayerBattle = 117;
inline bool CSNtfBody::_internal_has_recruitplayerbattle() const {
  return this != internal_default_instance() && _impl_.recruitplayerbattle_ != nullptr;
}
inline bool CSNtfBody::has_recruitplayerbattle() const {
  return _internal_has_recruitplayerbattle();
}
inline const ::msg::CSNtfRecruitPlayerBattle& CSNtfBody::_internal_recruitplayerbattle() const {
  const ::msg::CSNtfRecruitPlayerBattle* p = _impl_.recruitplayerbattle_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfRecruitPlayerBattle&>(
      ::msg::_CSNtfRecruitPlayerBattle_default_instance_);
}
inline const ::msg::CSNtfRecruitPlayerBattle& CSNtfBody::recruitplayerbattle() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.RecruitPlayerBattle)
  return _internal_recruitplayerbattle();
}
inline void CSNtfBody::unsafe_arena_set_allocated_recruitplayerbattle(
    ::msg::CSNtfRecruitPlayerBattle* recruitplayerbattle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recruitplayerbattle_);
  }
  _impl_.recruitplayerbattle_ = recruitplayerbattle;
  if (recruitplayerbattle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.RecruitPlayerBattle)
}
inline ::msg::CSNtfRecruitPlayerBattle* CSNtfBody::release_recruitplayerbattle() {
  
  ::msg::CSNtfRecruitPlayerBattle* temp = _impl_.recruitplayerbattle_;
  _impl_.recruitplayerbattle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfRecruitPlayerBattle* CSNtfBody::unsafe_arena_release_recruitplayerbattle() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.RecruitPlayerBattle)
  
  ::msg::CSNtfRecruitPlayerBattle* temp = _impl_.recruitplayerbattle_;
  _impl_.recruitplayerbattle_ = nullptr;
  return temp;
}
inline ::msg::CSNtfRecruitPlayerBattle* CSNtfBody::_internal_mutable_recruitplayerbattle() {
  
  if (_impl_.recruitplayerbattle_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfRecruitPlayerBattle>(GetArenaForAllocation());
    _impl_.recruitplayerbattle_ = p;
  }
  return _impl_.recruitplayerbattle_;
}
inline ::msg::CSNtfRecruitPlayerBattle* CSNtfBody::mutable_recruitplayerbattle() {
  ::msg::CSNtfRecruitPlayerBattle* _msg = _internal_mutable_recruitplayerbattle();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.RecruitPlayerBattle)
  return _msg;
}
inline void CSNtfBody::set_allocated_recruitplayerbattle(::msg::CSNtfRecruitPlayerBattle* recruitplayerbattle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recruitplayerbattle_);
  }
  if (recruitplayerbattle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recruitplayerbattle));
    if (message_arena != submessage_arena) {
      recruitplayerbattle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recruitplayerbattle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.recruitplayerbattle_ = recruitplayerbattle;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.RecruitPlayerBattle)
}

// .msg.CSNtfBetOnBounty BetOnBounty = 118;
inline bool CSNtfBody::_internal_has_betonbounty() const {
  return this != internal_default_instance() && _impl_.betonbounty_ != nullptr;
}
inline bool CSNtfBody::has_betonbounty() const {
  return _internal_has_betonbounty();
}
inline const ::msg::CSNtfBetOnBounty& CSNtfBody::_internal_betonbounty() const {
  const ::msg::CSNtfBetOnBounty* p = _impl_.betonbounty_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfBetOnBounty&>(
      ::msg::_CSNtfBetOnBounty_default_instance_);
}
inline const ::msg::CSNtfBetOnBounty& CSNtfBody::betonbounty() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.BetOnBounty)
  return _internal_betonbounty();
}
inline void CSNtfBody::unsafe_arena_set_allocated_betonbounty(
    ::msg::CSNtfBetOnBounty* betonbounty) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.betonbounty_);
  }
  _impl_.betonbounty_ = betonbounty;
  if (betonbounty) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.BetOnBounty)
}
inline ::msg::CSNtfBetOnBounty* CSNtfBody::release_betonbounty() {
  
  ::msg::CSNtfBetOnBounty* temp = _impl_.betonbounty_;
  _impl_.betonbounty_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfBetOnBounty* CSNtfBody::unsafe_arena_release_betonbounty() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.BetOnBounty)
  
  ::msg::CSNtfBetOnBounty* temp = _impl_.betonbounty_;
  _impl_.betonbounty_ = nullptr;
  return temp;
}
inline ::msg::CSNtfBetOnBounty* CSNtfBody::_internal_mutable_betonbounty() {
  
  if (_impl_.betonbounty_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfBetOnBounty>(GetArenaForAllocation());
    _impl_.betonbounty_ = p;
  }
  return _impl_.betonbounty_;
}
inline ::msg::CSNtfBetOnBounty* CSNtfBody::mutable_betonbounty() {
  ::msg::CSNtfBetOnBounty* _msg = _internal_mutable_betonbounty();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.BetOnBounty)
  return _msg;
}
inline void CSNtfBody::set_allocated_betonbounty(::msg::CSNtfBetOnBounty* betonbounty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.betonbounty_);
  }
  if (betonbounty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(betonbounty));
    if (message_arena != submessage_arena) {
      betonbounty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, betonbounty, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.betonbounty_ = betonbounty;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.BetOnBounty)
}

// .msg.CSNtfActivityTaskUnlock ActivityTaskUnlock = 119;
inline bool CSNtfBody::_internal_has_activitytaskunlock() const {
  return this != internal_default_instance() && _impl_.activitytaskunlock_ != nullptr;
}
inline bool CSNtfBody::has_activitytaskunlock() const {
  return _internal_has_activitytaskunlock();
}
inline const ::msg::CSNtfActivityTaskUnlock& CSNtfBody::_internal_activitytaskunlock() const {
  const ::msg::CSNtfActivityTaskUnlock* p = _impl_.activitytaskunlock_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfActivityTaskUnlock&>(
      ::msg::_CSNtfActivityTaskUnlock_default_instance_);
}
inline const ::msg::CSNtfActivityTaskUnlock& CSNtfBody::activitytaskunlock() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.ActivityTaskUnlock)
  return _internal_activitytaskunlock();
}
inline void CSNtfBody::unsafe_arena_set_allocated_activitytaskunlock(
    ::msg::CSNtfActivityTaskUnlock* activitytaskunlock) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activitytaskunlock_);
  }
  _impl_.activitytaskunlock_ = activitytaskunlock;
  if (activitytaskunlock) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.ActivityTaskUnlock)
}
inline ::msg::CSNtfActivityTaskUnlock* CSNtfBody::release_activitytaskunlock() {
  
  ::msg::CSNtfActivityTaskUnlock* temp = _impl_.activitytaskunlock_;
  _impl_.activitytaskunlock_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfActivityTaskUnlock* CSNtfBody::unsafe_arena_release_activitytaskunlock() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.ActivityTaskUnlock)
  
  ::msg::CSNtfActivityTaskUnlock* temp = _impl_.activitytaskunlock_;
  _impl_.activitytaskunlock_ = nullptr;
  return temp;
}
inline ::msg::CSNtfActivityTaskUnlock* CSNtfBody::_internal_mutable_activitytaskunlock() {
  
  if (_impl_.activitytaskunlock_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfActivityTaskUnlock>(GetArenaForAllocation());
    _impl_.activitytaskunlock_ = p;
  }
  return _impl_.activitytaskunlock_;
}
inline ::msg::CSNtfActivityTaskUnlock* CSNtfBody::mutable_activitytaskunlock() {
  ::msg::CSNtfActivityTaskUnlock* _msg = _internal_mutable_activitytaskunlock();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.ActivityTaskUnlock)
  return _msg;
}
inline void CSNtfBody::set_allocated_activitytaskunlock(::msg::CSNtfActivityTaskUnlock* activitytaskunlock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activitytaskunlock_);
  }
  if (activitytaskunlock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activitytaskunlock));
    if (message_arena != submessage_arena) {
      activitytaskunlock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activitytaskunlock, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.activitytaskunlock_ = activitytaskunlock;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.ActivityTaskUnlock)
}

// .msg.CSNtfPsServerOnly PsServerOnly = 120;
inline bool CSNtfBody::_internal_has_psserveronly() const {
  return this != internal_default_instance() && _impl_.psserveronly_ != nullptr;
}
inline bool CSNtfBody::has_psserveronly() const {
  return _internal_has_psserveronly();
}
inline const ::msg::CSNtfPsServerOnly& CSNtfBody::_internal_psserveronly() const {
  const ::msg::CSNtfPsServerOnly* p = _impl_.psserveronly_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPsServerOnly&>(
      ::msg::_CSNtfPsServerOnly_default_instance_);
}
inline const ::msg::CSNtfPsServerOnly& CSNtfBody::psserveronly() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PsServerOnly)
  return _internal_psserveronly();
}
inline void CSNtfBody::unsafe_arena_set_allocated_psserveronly(
    ::msg::CSNtfPsServerOnly* psserveronly) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.psserveronly_);
  }
  _impl_.psserveronly_ = psserveronly;
  if (psserveronly) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PsServerOnly)
}
inline ::msg::CSNtfPsServerOnly* CSNtfBody::release_psserveronly() {
  
  ::msg::CSNtfPsServerOnly* temp = _impl_.psserveronly_;
  _impl_.psserveronly_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPsServerOnly* CSNtfBody::unsafe_arena_release_psserveronly() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PsServerOnly)
  
  ::msg::CSNtfPsServerOnly* temp = _impl_.psserveronly_;
  _impl_.psserveronly_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPsServerOnly* CSNtfBody::_internal_mutable_psserveronly() {
  
  if (_impl_.psserveronly_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPsServerOnly>(GetArenaForAllocation());
    _impl_.psserveronly_ = p;
  }
  return _impl_.psserveronly_;
}
inline ::msg::CSNtfPsServerOnly* CSNtfBody::mutable_psserveronly() {
  ::msg::CSNtfPsServerOnly* _msg = _internal_mutable_psserveronly();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PsServerOnly)
  return _msg;
}
inline void CSNtfBody::set_allocated_psserveronly(::msg::CSNtfPsServerOnly* psserveronly) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.psserveronly_);
  }
  if (psserveronly) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psserveronly));
    if (message_arena != submessage_arena) {
      psserveronly = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psserveronly, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.psserveronly_ = psserveronly;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PsServerOnly)
}

// .msg.CSNtfAddThirdPvpInfo AddThirdPvpInfo = 121;
inline bool CSNtfBody::_internal_has_addthirdpvpinfo() const {
  return this != internal_default_instance() && _impl_.addthirdpvpinfo_ != nullptr;
}
inline bool CSNtfBody::has_addthirdpvpinfo() const {
  return _internal_has_addthirdpvpinfo();
}
inline const ::msg::CSNtfAddThirdPvpInfo& CSNtfBody::_internal_addthirdpvpinfo() const {
  const ::msg::CSNtfAddThirdPvpInfo* p = _impl_.addthirdpvpinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfAddThirdPvpInfo&>(
      ::msg::_CSNtfAddThirdPvpInfo_default_instance_);
}
inline const ::msg::CSNtfAddThirdPvpInfo& CSNtfBody::addthirdpvpinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.AddThirdPvpInfo)
  return _internal_addthirdpvpinfo();
}
inline void CSNtfBody::unsafe_arena_set_allocated_addthirdpvpinfo(
    ::msg::CSNtfAddThirdPvpInfo* addthirdpvpinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.addthirdpvpinfo_);
  }
  _impl_.addthirdpvpinfo_ = addthirdpvpinfo;
  if (addthirdpvpinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.AddThirdPvpInfo)
}
inline ::msg::CSNtfAddThirdPvpInfo* CSNtfBody::release_addthirdpvpinfo() {
  
  ::msg::CSNtfAddThirdPvpInfo* temp = _impl_.addthirdpvpinfo_;
  _impl_.addthirdpvpinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfAddThirdPvpInfo* CSNtfBody::unsafe_arena_release_addthirdpvpinfo() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.AddThirdPvpInfo)
  
  ::msg::CSNtfAddThirdPvpInfo* temp = _impl_.addthirdpvpinfo_;
  _impl_.addthirdpvpinfo_ = nullptr;
  return temp;
}
inline ::msg::CSNtfAddThirdPvpInfo* CSNtfBody::_internal_mutable_addthirdpvpinfo() {
  
  if (_impl_.addthirdpvpinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfAddThirdPvpInfo>(GetArenaForAllocation());
    _impl_.addthirdpvpinfo_ = p;
  }
  return _impl_.addthirdpvpinfo_;
}
inline ::msg::CSNtfAddThirdPvpInfo* CSNtfBody::mutable_addthirdpvpinfo() {
  ::msg::CSNtfAddThirdPvpInfo* _msg = _internal_mutable_addthirdpvpinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.AddThirdPvpInfo)
  return _msg;
}
inline void CSNtfBody::set_allocated_addthirdpvpinfo(::msg::CSNtfAddThirdPvpInfo* addthirdpvpinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.addthirdpvpinfo_);
  }
  if (addthirdpvpinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(addthirdpvpinfo));
    if (message_arena != submessage_arena) {
      addthirdpvpinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addthirdpvpinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.addthirdpvpinfo_ = addthirdpvpinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.AddThirdPvpInfo)
}

// .msg.CSNtfDelThirdPvpInfo DelThirdPvpInfo = 122;
inline bool CSNtfBody::_internal_has_delthirdpvpinfo() const {
  return this != internal_default_instance() && _impl_.delthirdpvpinfo_ != nullptr;
}
inline bool CSNtfBody::has_delthirdpvpinfo() const {
  return _internal_has_delthirdpvpinfo();
}
inline const ::msg::CSNtfDelThirdPvpInfo& CSNtfBody::_internal_delthirdpvpinfo() const {
  const ::msg::CSNtfDelThirdPvpInfo* p = _impl_.delthirdpvpinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfDelThirdPvpInfo&>(
      ::msg::_CSNtfDelThirdPvpInfo_default_instance_);
}
inline const ::msg::CSNtfDelThirdPvpInfo& CSNtfBody::delthirdpvpinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.DelThirdPvpInfo)
  return _internal_delthirdpvpinfo();
}
inline void CSNtfBody::unsafe_arena_set_allocated_delthirdpvpinfo(
    ::msg::CSNtfDelThirdPvpInfo* delthirdpvpinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delthirdpvpinfo_);
  }
  _impl_.delthirdpvpinfo_ = delthirdpvpinfo;
  if (delthirdpvpinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.DelThirdPvpInfo)
}
inline ::msg::CSNtfDelThirdPvpInfo* CSNtfBody::release_delthirdpvpinfo() {
  
  ::msg::CSNtfDelThirdPvpInfo* temp = _impl_.delthirdpvpinfo_;
  _impl_.delthirdpvpinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfDelThirdPvpInfo* CSNtfBody::unsafe_arena_release_delthirdpvpinfo() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.DelThirdPvpInfo)
  
  ::msg::CSNtfDelThirdPvpInfo* temp = _impl_.delthirdpvpinfo_;
  _impl_.delthirdpvpinfo_ = nullptr;
  return temp;
}
inline ::msg::CSNtfDelThirdPvpInfo* CSNtfBody::_internal_mutable_delthirdpvpinfo() {
  
  if (_impl_.delthirdpvpinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfDelThirdPvpInfo>(GetArenaForAllocation());
    _impl_.delthirdpvpinfo_ = p;
  }
  return _impl_.delthirdpvpinfo_;
}
inline ::msg::CSNtfDelThirdPvpInfo* CSNtfBody::mutable_delthirdpvpinfo() {
  ::msg::CSNtfDelThirdPvpInfo* _msg = _internal_mutable_delthirdpvpinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.DelThirdPvpInfo)
  return _msg;
}
inline void CSNtfBody::set_allocated_delthirdpvpinfo(::msg::CSNtfDelThirdPvpInfo* delthirdpvpinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delthirdpvpinfo_);
  }
  if (delthirdpvpinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delthirdpvpinfo));
    if (message_arena != submessage_arena) {
      delthirdpvpinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delthirdpvpinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.delthirdpvpinfo_ = delthirdpvpinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.DelThirdPvpInfo)
}

// .msg.CSNtfPs4ServerOnly Ps4ServerOnly = 123;
inline bool CSNtfBody::_internal_has_ps4serveronly() const {
  return this != internal_default_instance() && _impl_.ps4serveronly_ != nullptr;
}
inline bool CSNtfBody::has_ps4serveronly() const {
  return _internal_has_ps4serveronly();
}
inline const ::msg::CSNtfPs4ServerOnly& CSNtfBody::_internal_ps4serveronly() const {
  const ::msg::CSNtfPs4ServerOnly* p = _impl_.ps4serveronly_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPs4ServerOnly&>(
      ::msg::_CSNtfPs4ServerOnly_default_instance_);
}
inline const ::msg::CSNtfPs4ServerOnly& CSNtfBody::ps4serveronly() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.Ps4ServerOnly)
  return _internal_ps4serveronly();
}
inline void CSNtfBody::unsafe_arena_set_allocated_ps4serveronly(
    ::msg::CSNtfPs4ServerOnly* ps4serveronly) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ps4serveronly_);
  }
  _impl_.ps4serveronly_ = ps4serveronly;
  if (ps4serveronly) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.Ps4ServerOnly)
}
inline ::msg::CSNtfPs4ServerOnly* CSNtfBody::release_ps4serveronly() {
  
  ::msg::CSNtfPs4ServerOnly* temp = _impl_.ps4serveronly_;
  _impl_.ps4serveronly_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPs4ServerOnly* CSNtfBody::unsafe_arena_release_ps4serveronly() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.Ps4ServerOnly)
  
  ::msg::CSNtfPs4ServerOnly* temp = _impl_.ps4serveronly_;
  _impl_.ps4serveronly_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPs4ServerOnly* CSNtfBody::_internal_mutable_ps4serveronly() {
  
  if (_impl_.ps4serveronly_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPs4ServerOnly>(GetArenaForAllocation());
    _impl_.ps4serveronly_ = p;
  }
  return _impl_.ps4serveronly_;
}
inline ::msg::CSNtfPs4ServerOnly* CSNtfBody::mutable_ps4serveronly() {
  ::msg::CSNtfPs4ServerOnly* _msg = _internal_mutable_ps4serveronly();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.Ps4ServerOnly)
  return _msg;
}
inline void CSNtfBody::set_allocated_ps4serveronly(::msg::CSNtfPs4ServerOnly* ps4serveronly) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ps4serveronly_);
  }
  if (ps4serveronly) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ps4serveronly));
    if (message_arena != submessage_arena) {
      ps4serveronly = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ps4serveronly, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ps4serveronly_ = ps4serveronly;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.Ps4ServerOnly)
}

// .msg.CSNtfLuckMallGoods LuckMallGoods = 124;
inline bool CSNtfBody::_internal_has_luckmallgoods() const {
  return this != internal_default_instance() && _impl_.luckmallgoods_ != nullptr;
}
inline bool CSNtfBody::has_luckmallgoods() const {
  return _internal_has_luckmallgoods();
}
inline const ::msg::CSNtfLuckMallGoods& CSNtfBody::_internal_luckmallgoods() const {
  const ::msg::CSNtfLuckMallGoods* p = _impl_.luckmallgoods_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfLuckMallGoods&>(
      ::msg::_CSNtfLuckMallGoods_default_instance_);
}
inline const ::msg::CSNtfLuckMallGoods& CSNtfBody::luckmallgoods() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.LuckMallGoods)
  return _internal_luckmallgoods();
}
inline void CSNtfBody::unsafe_arena_set_allocated_luckmallgoods(
    ::msg::CSNtfLuckMallGoods* luckmallgoods) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.luckmallgoods_);
  }
  _impl_.luckmallgoods_ = luckmallgoods;
  if (luckmallgoods) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.LuckMallGoods)
}
inline ::msg::CSNtfLuckMallGoods* CSNtfBody::release_luckmallgoods() {
  
  ::msg::CSNtfLuckMallGoods* temp = _impl_.luckmallgoods_;
  _impl_.luckmallgoods_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfLuckMallGoods* CSNtfBody::unsafe_arena_release_luckmallgoods() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.LuckMallGoods)
  
  ::msg::CSNtfLuckMallGoods* temp = _impl_.luckmallgoods_;
  _impl_.luckmallgoods_ = nullptr;
  return temp;
}
inline ::msg::CSNtfLuckMallGoods* CSNtfBody::_internal_mutable_luckmallgoods() {
  
  if (_impl_.luckmallgoods_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfLuckMallGoods>(GetArenaForAllocation());
    _impl_.luckmallgoods_ = p;
  }
  return _impl_.luckmallgoods_;
}
inline ::msg::CSNtfLuckMallGoods* CSNtfBody::mutable_luckmallgoods() {
  ::msg::CSNtfLuckMallGoods* _msg = _internal_mutable_luckmallgoods();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.LuckMallGoods)
  return _msg;
}
inline void CSNtfBody::set_allocated_luckmallgoods(::msg::CSNtfLuckMallGoods* luckmallgoods) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.luckmallgoods_);
  }
  if (luckmallgoods) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(luckmallgoods));
    if (message_arena != submessage_arena) {
      luckmallgoods = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, luckmallgoods, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.luckmallgoods_ = luckmallgoods;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.LuckMallGoods)
}

// .msg.CSNtfChessListErr ChessListErr = 125;
inline bool CSNtfBody::_internal_has_chesslisterr() const {
  return this != internal_default_instance() && _impl_.chesslisterr_ != nullptr;
}
inline bool CSNtfBody::has_chesslisterr() const {
  return _internal_has_chesslisterr();
}
inline const ::msg::CSNtfChessListErr& CSNtfBody::_internal_chesslisterr() const {
  const ::msg::CSNtfChessListErr* p = _impl_.chesslisterr_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfChessListErr&>(
      ::msg::_CSNtfChessListErr_default_instance_);
}
inline const ::msg::CSNtfChessListErr& CSNtfBody::chesslisterr() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.ChessListErr)
  return _internal_chesslisterr();
}
inline void CSNtfBody::unsafe_arena_set_allocated_chesslisterr(
    ::msg::CSNtfChessListErr* chesslisterr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chesslisterr_);
  }
  _impl_.chesslisterr_ = chesslisterr;
  if (chesslisterr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.ChessListErr)
}
inline ::msg::CSNtfChessListErr* CSNtfBody::release_chesslisterr() {
  
  ::msg::CSNtfChessListErr* temp = _impl_.chesslisterr_;
  _impl_.chesslisterr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfChessListErr* CSNtfBody::unsafe_arena_release_chesslisterr() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.ChessListErr)
  
  ::msg::CSNtfChessListErr* temp = _impl_.chesslisterr_;
  _impl_.chesslisterr_ = nullptr;
  return temp;
}
inline ::msg::CSNtfChessListErr* CSNtfBody::_internal_mutable_chesslisterr() {
  
  if (_impl_.chesslisterr_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfChessListErr>(GetArenaForAllocation());
    _impl_.chesslisterr_ = p;
  }
  return _impl_.chesslisterr_;
}
inline ::msg::CSNtfChessListErr* CSNtfBody::mutable_chesslisterr() {
  ::msg::CSNtfChessListErr* _msg = _internal_mutable_chesslisterr();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.ChessListErr)
  return _msg;
}
inline void CSNtfBody::set_allocated_chesslisterr(::msg::CSNtfChessListErr* chesslisterr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chesslisterr_);
  }
  if (chesslisterr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chesslisterr));
    if (message_arena != submessage_arena) {
      chesslisterr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chesslisterr, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chesslisterr_ = chesslisterr;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.ChessListErr)
}

// .msg.CSNtfChestRecord ChestRecord = 126;
inline bool CSNtfBody::_internal_has_chestrecord() const {
  return this != internal_default_instance() && _impl_.chestrecord_ != nullptr;
}
inline bool CSNtfBody::has_chestrecord() const {
  return _internal_has_chestrecord();
}
inline const ::msg::CSNtfChestRecord& CSNtfBody::_internal_chestrecord() const {
  const ::msg::CSNtfChestRecord* p = _impl_.chestrecord_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfChestRecord&>(
      ::msg::_CSNtfChestRecord_default_instance_);
}
inline const ::msg::CSNtfChestRecord& CSNtfBody::chestrecord() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.ChestRecord)
  return _internal_chestrecord();
}
inline void CSNtfBody::unsafe_arena_set_allocated_chestrecord(
    ::msg::CSNtfChestRecord* chestrecord) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chestrecord_);
  }
  _impl_.chestrecord_ = chestrecord;
  if (chestrecord) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.ChestRecord)
}
inline ::msg::CSNtfChestRecord* CSNtfBody::release_chestrecord() {
  
  ::msg::CSNtfChestRecord* temp = _impl_.chestrecord_;
  _impl_.chestrecord_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfChestRecord* CSNtfBody::unsafe_arena_release_chestrecord() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.ChestRecord)
  
  ::msg::CSNtfChestRecord* temp = _impl_.chestrecord_;
  _impl_.chestrecord_ = nullptr;
  return temp;
}
inline ::msg::CSNtfChestRecord* CSNtfBody::_internal_mutable_chestrecord() {
  
  if (_impl_.chestrecord_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfChestRecord>(GetArenaForAllocation());
    _impl_.chestrecord_ = p;
  }
  return _impl_.chestrecord_;
}
inline ::msg::CSNtfChestRecord* CSNtfBody::mutable_chestrecord() {
  ::msg::CSNtfChestRecord* _msg = _internal_mutable_chestrecord();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.ChestRecord)
  return _msg;
}
inline void CSNtfBody::set_allocated_chestrecord(::msg::CSNtfChestRecord* chestrecord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chestrecord_);
  }
  if (chestrecord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chestrecord));
    if (message_arena != submessage_arena) {
      chestrecord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chestrecord, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chestrecord_ = chestrecord;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.ChestRecord)
}

// .msg.CSNtfGOAInfo GOAInfo = 127;
inline bool CSNtfBody::_internal_has_goainfo() const {
  return this != internal_default_instance() && _impl_.goainfo_ != nullptr;
}
inline bool CSNtfBody::has_goainfo() const {
  return _internal_has_goainfo();
}
inline const ::msg::CSNtfGOAInfo& CSNtfBody::_internal_goainfo() const {
  const ::msg::CSNtfGOAInfo* p = _impl_.goainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfGOAInfo&>(
      ::msg::_CSNtfGOAInfo_default_instance_);
}
inline const ::msg::CSNtfGOAInfo& CSNtfBody::goainfo() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.GOAInfo)
  return _internal_goainfo();
}
inline void CSNtfBody::unsafe_arena_set_allocated_goainfo(
    ::msg::CSNtfGOAInfo* goainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.goainfo_);
  }
  _impl_.goainfo_ = goainfo;
  if (goainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.GOAInfo)
}
inline ::msg::CSNtfGOAInfo* CSNtfBody::release_goainfo() {
  
  ::msg::CSNtfGOAInfo* temp = _impl_.goainfo_;
  _impl_.goainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfGOAInfo* CSNtfBody::unsafe_arena_release_goainfo() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.GOAInfo)
  
  ::msg::CSNtfGOAInfo* temp = _impl_.goainfo_;
  _impl_.goainfo_ = nullptr;
  return temp;
}
inline ::msg::CSNtfGOAInfo* CSNtfBody::_internal_mutable_goainfo() {
  
  if (_impl_.goainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfGOAInfo>(GetArenaForAllocation());
    _impl_.goainfo_ = p;
  }
  return _impl_.goainfo_;
}
inline ::msg::CSNtfGOAInfo* CSNtfBody::mutable_goainfo() {
  ::msg::CSNtfGOAInfo* _msg = _internal_mutable_goainfo();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.GOAInfo)
  return _msg;
}
inline void CSNtfBody::set_allocated_goainfo(::msg::CSNtfGOAInfo* goainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.goainfo_);
  }
  if (goainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(goainfo));
    if (message_arena != submessage_arena) {
      goainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, goainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.goainfo_ = goainfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.GOAInfo)
}

// .msg.CSNtfMedalInfos MedalInfo = 128;
inline bool CSNtfBody::_internal_has_medalinfo() const {
  return this != internal_default_instance() && _impl_.medalinfo_ != nullptr;
}
inline bool CSNtfBody::has_medalinfo() const {
  return _internal_has_medalinfo();
}
inline const ::msg::CSNtfMedalInfos& CSNtfBody::_internal_medalinfo() const {
  const ::msg::CSNtfMedalInfos* p = _impl_.medalinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfMedalInfos&>(
      ::msg::_CSNtfMedalInfos_default_instance_);
}
inline const ::msg::CSNtfMedalInfos& CSNtfBody::medalinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.MedalInfo)
  return _internal_medalinfo();
}
inline void CSNtfBody::unsafe_arena_set_allocated_medalinfo(
    ::msg::CSNtfMedalInfos* medalinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.medalinfo_);
  }
  _impl_.medalinfo_ = medalinfo;
  if (medalinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.MedalInfo)
}
inline ::msg::CSNtfMedalInfos* CSNtfBody::release_medalinfo() {
  
  ::msg::CSNtfMedalInfos* temp = _impl_.medalinfo_;
  _impl_.medalinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfMedalInfos* CSNtfBody::unsafe_arena_release_medalinfo() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.MedalInfo)
  
  ::msg::CSNtfMedalInfos* temp = _impl_.medalinfo_;
  _impl_.medalinfo_ = nullptr;
  return temp;
}
inline ::msg::CSNtfMedalInfos* CSNtfBody::_internal_mutable_medalinfo() {
  
  if (_impl_.medalinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfMedalInfos>(GetArenaForAllocation());
    _impl_.medalinfo_ = p;
  }
  return _impl_.medalinfo_;
}
inline ::msg::CSNtfMedalInfos* CSNtfBody::mutable_medalinfo() {
  ::msg::CSNtfMedalInfos* _msg = _internal_mutable_medalinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.MedalInfo)
  return _msg;
}
inline void CSNtfBody::set_allocated_medalinfo(::msg::CSNtfMedalInfos* medalinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.medalinfo_);
  }
  if (medalinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(medalinfo));
    if (message_arena != submessage_arena) {
      medalinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, medalinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.medalinfo_ = medalinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.MedalInfo)
}

// .msg.CSNtfMedalId MedalId = 129;
inline bool CSNtfBody::_internal_has_medalid() const {
  return this != internal_default_instance() && _impl_.medalid_ != nullptr;
}
inline bool CSNtfBody::has_medalid() const {
  return _internal_has_medalid();
}
inline const ::msg::CSNtfMedalId& CSNtfBody::_internal_medalid() const {
  const ::msg::CSNtfMedalId* p = _impl_.medalid_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfMedalId&>(
      ::msg::_CSNtfMedalId_default_instance_);
}
inline const ::msg::CSNtfMedalId& CSNtfBody::medalid() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.MedalId)
  return _internal_medalid();
}
inline void CSNtfBody::unsafe_arena_set_allocated_medalid(
    ::msg::CSNtfMedalId* medalid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.medalid_);
  }
  _impl_.medalid_ = medalid;
  if (medalid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.MedalId)
}
inline ::msg::CSNtfMedalId* CSNtfBody::release_medalid() {
  
  ::msg::CSNtfMedalId* temp = _impl_.medalid_;
  _impl_.medalid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfMedalId* CSNtfBody::unsafe_arena_release_medalid() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.MedalId)
  
  ::msg::CSNtfMedalId* temp = _impl_.medalid_;
  _impl_.medalid_ = nullptr;
  return temp;
}
inline ::msg::CSNtfMedalId* CSNtfBody::_internal_mutable_medalid() {
  
  if (_impl_.medalid_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfMedalId>(GetArenaForAllocation());
    _impl_.medalid_ = p;
  }
  return _impl_.medalid_;
}
inline ::msg::CSNtfMedalId* CSNtfBody::mutable_medalid() {
  ::msg::CSNtfMedalId* _msg = _internal_mutable_medalid();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.MedalId)
  return _msg;
}
inline void CSNtfBody::set_allocated_medalid(::msg::CSNtfMedalId* medalid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.medalid_);
  }
  if (medalid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(medalid));
    if (message_arena != submessage_arena) {
      medalid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, medalid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.medalid_ = medalid;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.MedalId)
}

// .msg.CSNtfPvpReset PvpReset = 130;
inline bool CSNtfBody::_internal_has_pvpreset() const {
  return this != internal_default_instance() && _impl_.pvpreset_ != nullptr;
}
inline bool CSNtfBody::has_pvpreset() const {
  return _internal_has_pvpreset();
}
inline const ::msg::CSNtfPvpReset& CSNtfBody::_internal_pvpreset() const {
  const ::msg::CSNtfPvpReset* p = _impl_.pvpreset_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPvpReset&>(
      ::msg::_CSNtfPvpReset_default_instance_);
}
inline const ::msg::CSNtfPvpReset& CSNtfBody::pvpreset() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PvpReset)
  return _internal_pvpreset();
}
inline void CSNtfBody::unsafe_arena_set_allocated_pvpreset(
    ::msg::CSNtfPvpReset* pvpreset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpreset_);
  }
  _impl_.pvpreset_ = pvpreset;
  if (pvpreset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PvpReset)
}
inline ::msg::CSNtfPvpReset* CSNtfBody::release_pvpreset() {
  
  ::msg::CSNtfPvpReset* temp = _impl_.pvpreset_;
  _impl_.pvpreset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPvpReset* CSNtfBody::unsafe_arena_release_pvpreset() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PvpReset)
  
  ::msg::CSNtfPvpReset* temp = _impl_.pvpreset_;
  _impl_.pvpreset_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPvpReset* CSNtfBody::_internal_mutable_pvpreset() {
  
  if (_impl_.pvpreset_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPvpReset>(GetArenaForAllocation());
    _impl_.pvpreset_ = p;
  }
  return _impl_.pvpreset_;
}
inline ::msg::CSNtfPvpReset* CSNtfBody::mutable_pvpreset() {
  ::msg::CSNtfPvpReset* _msg = _internal_mutable_pvpreset();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PvpReset)
  return _msg;
}
inline void CSNtfBody::set_allocated_pvpreset(::msg::CSNtfPvpReset* pvpreset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpreset_);
  }
  if (pvpreset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvpreset));
    if (message_arena != submessage_arena) {
      pvpreset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpreset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpreset_ = pvpreset;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PvpReset)
}

// .msg.CSNtfDelMail DelMail = 131;
inline bool CSNtfBody::_internal_has_delmail() const {
  return this != internal_default_instance() && _impl_.delmail_ != nullptr;
}
inline bool CSNtfBody::has_delmail() const {
  return _internal_has_delmail();
}
inline const ::msg::CSNtfDelMail& CSNtfBody::_internal_delmail() const {
  const ::msg::CSNtfDelMail* p = _impl_.delmail_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfDelMail&>(
      ::msg::_CSNtfDelMail_default_instance_);
}
inline const ::msg::CSNtfDelMail& CSNtfBody::delmail() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.DelMail)
  return _internal_delmail();
}
inline void CSNtfBody::unsafe_arena_set_allocated_delmail(
    ::msg::CSNtfDelMail* delmail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delmail_);
  }
  _impl_.delmail_ = delmail;
  if (delmail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.DelMail)
}
inline ::msg::CSNtfDelMail* CSNtfBody::release_delmail() {
  
  ::msg::CSNtfDelMail* temp = _impl_.delmail_;
  _impl_.delmail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfDelMail* CSNtfBody::unsafe_arena_release_delmail() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.DelMail)
  
  ::msg::CSNtfDelMail* temp = _impl_.delmail_;
  _impl_.delmail_ = nullptr;
  return temp;
}
inline ::msg::CSNtfDelMail* CSNtfBody::_internal_mutable_delmail() {
  
  if (_impl_.delmail_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfDelMail>(GetArenaForAllocation());
    _impl_.delmail_ = p;
  }
  return _impl_.delmail_;
}
inline ::msg::CSNtfDelMail* CSNtfBody::mutable_delmail() {
  ::msg::CSNtfDelMail* _msg = _internal_mutable_delmail();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.DelMail)
  return _msg;
}
inline void CSNtfBody::set_allocated_delmail(::msg::CSNtfDelMail* delmail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delmail_);
  }
  if (delmail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delmail));
    if (message_arena != submessage_arena) {
      delmail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delmail, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.delmail_ = delmail;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.DelMail)
}

// .msg.CSNtfItemInfo ItemInfo = 132;
inline bool CSNtfBody::_internal_has_iteminfo() const {
  return this != internal_default_instance() && _impl_.iteminfo_ != nullptr;
}
inline bool CSNtfBody::has_iteminfo() const {
  return _internal_has_iteminfo();
}
inline const ::msg::CSNtfItemInfo& CSNtfBody::_internal_iteminfo() const {
  const ::msg::CSNtfItemInfo* p = _impl_.iteminfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfItemInfo&>(
      ::msg::_CSNtfItemInfo_default_instance_);
}
inline const ::msg::CSNtfItemInfo& CSNtfBody::iteminfo() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.ItemInfo)
  return _internal_iteminfo();
}
inline void CSNtfBody::unsafe_arena_set_allocated_iteminfo(
    ::msg::CSNtfItemInfo* iteminfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iteminfo_);
  }
  _impl_.iteminfo_ = iteminfo;
  if (iteminfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.ItemInfo)
}
inline ::msg::CSNtfItemInfo* CSNtfBody::release_iteminfo() {
  
  ::msg::CSNtfItemInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfItemInfo* CSNtfBody::unsafe_arena_release_iteminfo() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.ItemInfo)
  
  ::msg::CSNtfItemInfo* temp = _impl_.iteminfo_;
  _impl_.iteminfo_ = nullptr;
  return temp;
}
inline ::msg::CSNtfItemInfo* CSNtfBody::_internal_mutable_iteminfo() {
  
  if (_impl_.iteminfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfItemInfo>(GetArenaForAllocation());
    _impl_.iteminfo_ = p;
  }
  return _impl_.iteminfo_;
}
inline ::msg::CSNtfItemInfo* CSNtfBody::mutable_iteminfo() {
  ::msg::CSNtfItemInfo* _msg = _internal_mutable_iteminfo();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.ItemInfo)
  return _msg;
}
inline void CSNtfBody::set_allocated_iteminfo(::msg::CSNtfItemInfo* iteminfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.iteminfo_);
  }
  if (iteminfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iteminfo));
    if (message_arena != submessage_arena) {
      iteminfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iteminfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.iteminfo_ = iteminfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.ItemInfo)
}

// .msg.CSNtfPassportNum PassportNum = 133;
inline bool CSNtfBody::_internal_has_passportnum() const {
  return this != internal_default_instance() && _impl_.passportnum_ != nullptr;
}
inline bool CSNtfBody::has_passportnum() const {
  return _internal_has_passportnum();
}
inline const ::msg::CSNtfPassportNum& CSNtfBody::_internal_passportnum() const {
  const ::msg::CSNtfPassportNum* p = _impl_.passportnum_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPassportNum&>(
      ::msg::_CSNtfPassportNum_default_instance_);
}
inline const ::msg::CSNtfPassportNum& CSNtfBody::passportnum() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PassportNum)
  return _internal_passportnum();
}
inline void CSNtfBody::unsafe_arena_set_allocated_passportnum(
    ::msg::CSNtfPassportNum* passportnum) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passportnum_);
  }
  _impl_.passportnum_ = passportnum;
  if (passportnum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PassportNum)
}
inline ::msg::CSNtfPassportNum* CSNtfBody::release_passportnum() {
  
  ::msg::CSNtfPassportNum* temp = _impl_.passportnum_;
  _impl_.passportnum_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPassportNum* CSNtfBody::unsafe_arena_release_passportnum() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PassportNum)
  
  ::msg::CSNtfPassportNum* temp = _impl_.passportnum_;
  _impl_.passportnum_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPassportNum* CSNtfBody::_internal_mutable_passportnum() {
  
  if (_impl_.passportnum_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPassportNum>(GetArenaForAllocation());
    _impl_.passportnum_ = p;
  }
  return _impl_.passportnum_;
}
inline ::msg::CSNtfPassportNum* CSNtfBody::mutable_passportnum() {
  ::msg::CSNtfPassportNum* _msg = _internal_mutable_passportnum();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PassportNum)
  return _msg;
}
inline void CSNtfBody::set_allocated_passportnum(::msg::CSNtfPassportNum* passportnum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passportnum_);
  }
  if (passportnum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(passportnum));
    if (message_arena != submessage_arena) {
      passportnum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, passportnum, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.passportnum_ = passportnum;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PassportNum)
}

// .msg.CSNtfPassportYearCardNum PassportYearCardNum = 134;
inline bool CSNtfBody::_internal_has_passportyearcardnum() const {
  return this != internal_default_instance() && _impl_.passportyearcardnum_ != nullptr;
}
inline bool CSNtfBody::has_passportyearcardnum() const {
  return _internal_has_passportyearcardnum();
}
inline const ::msg::CSNtfPassportYearCardNum& CSNtfBody::_internal_passportyearcardnum() const {
  const ::msg::CSNtfPassportYearCardNum* p = _impl_.passportyearcardnum_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPassportYearCardNum&>(
      ::msg::_CSNtfPassportYearCardNum_default_instance_);
}
inline const ::msg::CSNtfPassportYearCardNum& CSNtfBody::passportyearcardnum() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PassportYearCardNum)
  return _internal_passportyearcardnum();
}
inline void CSNtfBody::unsafe_arena_set_allocated_passportyearcardnum(
    ::msg::CSNtfPassportYearCardNum* passportyearcardnum) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passportyearcardnum_);
  }
  _impl_.passportyearcardnum_ = passportyearcardnum;
  if (passportyearcardnum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PassportYearCardNum)
}
inline ::msg::CSNtfPassportYearCardNum* CSNtfBody::release_passportyearcardnum() {
  
  ::msg::CSNtfPassportYearCardNum* temp = _impl_.passportyearcardnum_;
  _impl_.passportyearcardnum_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPassportYearCardNum* CSNtfBody::unsafe_arena_release_passportyearcardnum() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PassportYearCardNum)
  
  ::msg::CSNtfPassportYearCardNum* temp = _impl_.passportyearcardnum_;
  _impl_.passportyearcardnum_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPassportYearCardNum* CSNtfBody::_internal_mutable_passportyearcardnum() {
  
  if (_impl_.passportyearcardnum_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPassportYearCardNum>(GetArenaForAllocation());
    _impl_.passportyearcardnum_ = p;
  }
  return _impl_.passportyearcardnum_;
}
inline ::msg::CSNtfPassportYearCardNum* CSNtfBody::mutable_passportyearcardnum() {
  ::msg::CSNtfPassportYearCardNum* _msg = _internal_mutable_passportyearcardnum();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PassportYearCardNum)
  return _msg;
}
inline void CSNtfBody::set_allocated_passportyearcardnum(::msg::CSNtfPassportYearCardNum* passportyearcardnum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passportyearcardnum_);
  }
  if (passportyearcardnum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(passportyearcardnum));
    if (message_arena != submessage_arena) {
      passportyearcardnum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, passportyearcardnum, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.passportyearcardnum_ = passportyearcardnum;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PassportYearCardNum)
}

// .msg.CSNtfTeamOP TeamOP = 300;
inline bool CSNtfBody::_internal_has_teamop() const {
  return this != internal_default_instance() && _impl_.teamop_ != nullptr;
}
inline bool CSNtfBody::has_teamop() const {
  return _internal_has_teamop();
}
inline const ::msg::CSNtfTeamOP& CSNtfBody::_internal_teamop() const {
  const ::msg::CSNtfTeamOP* p = _impl_.teamop_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfTeamOP&>(
      ::msg::_CSNtfTeamOP_default_instance_);
}
inline const ::msg::CSNtfTeamOP& CSNtfBody::teamop() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.TeamOP)
  return _internal_teamop();
}
inline void CSNtfBody::unsafe_arena_set_allocated_teamop(
    ::msg::CSNtfTeamOP* teamop) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamop_);
  }
  _impl_.teamop_ = teamop;
  if (teamop) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.TeamOP)
}
inline ::msg::CSNtfTeamOP* CSNtfBody::release_teamop() {
  
  ::msg::CSNtfTeamOP* temp = _impl_.teamop_;
  _impl_.teamop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfTeamOP* CSNtfBody::unsafe_arena_release_teamop() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.TeamOP)
  
  ::msg::CSNtfTeamOP* temp = _impl_.teamop_;
  _impl_.teamop_ = nullptr;
  return temp;
}
inline ::msg::CSNtfTeamOP* CSNtfBody::_internal_mutable_teamop() {
  
  if (_impl_.teamop_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfTeamOP>(GetArenaForAllocation());
    _impl_.teamop_ = p;
  }
  return _impl_.teamop_;
}
inline ::msg::CSNtfTeamOP* CSNtfBody::mutable_teamop() {
  ::msg::CSNtfTeamOP* _msg = _internal_mutable_teamop();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.TeamOP)
  return _msg;
}
inline void CSNtfBody::set_allocated_teamop(::msg::CSNtfTeamOP* teamop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamop_);
  }
  if (teamop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teamop));
    if (message_arena != submessage_arena) {
      teamop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamop, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.teamop_ = teamop;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.TeamOP)
}

// .msg.CSNtfTeamDismiss TeamDismiss = 301;
inline bool CSNtfBody::_internal_has_teamdismiss() const {
  return this != internal_default_instance() && _impl_.teamdismiss_ != nullptr;
}
inline bool CSNtfBody::has_teamdismiss() const {
  return _internal_has_teamdismiss();
}
inline const ::msg::CSNtfTeamDismiss& CSNtfBody::_internal_teamdismiss() const {
  const ::msg::CSNtfTeamDismiss* p = _impl_.teamdismiss_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfTeamDismiss&>(
      ::msg::_CSNtfTeamDismiss_default_instance_);
}
inline const ::msg::CSNtfTeamDismiss& CSNtfBody::teamdismiss() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.TeamDismiss)
  return _internal_teamdismiss();
}
inline void CSNtfBody::unsafe_arena_set_allocated_teamdismiss(
    ::msg::CSNtfTeamDismiss* teamdismiss) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamdismiss_);
  }
  _impl_.teamdismiss_ = teamdismiss;
  if (teamdismiss) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.TeamDismiss)
}
inline ::msg::CSNtfTeamDismiss* CSNtfBody::release_teamdismiss() {
  
  ::msg::CSNtfTeamDismiss* temp = _impl_.teamdismiss_;
  _impl_.teamdismiss_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfTeamDismiss* CSNtfBody::unsafe_arena_release_teamdismiss() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.TeamDismiss)
  
  ::msg::CSNtfTeamDismiss* temp = _impl_.teamdismiss_;
  _impl_.teamdismiss_ = nullptr;
  return temp;
}
inline ::msg::CSNtfTeamDismiss* CSNtfBody::_internal_mutable_teamdismiss() {
  
  if (_impl_.teamdismiss_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfTeamDismiss>(GetArenaForAllocation());
    _impl_.teamdismiss_ = p;
  }
  return _impl_.teamdismiss_;
}
inline ::msg::CSNtfTeamDismiss* CSNtfBody::mutable_teamdismiss() {
  ::msg::CSNtfTeamDismiss* _msg = _internal_mutable_teamdismiss();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.TeamDismiss)
  return _msg;
}
inline void CSNtfBody::set_allocated_teamdismiss(::msg::CSNtfTeamDismiss* teamdismiss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamdismiss_);
  }
  if (teamdismiss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teamdismiss));
    if (message_arena != submessage_arena) {
      teamdismiss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamdismiss, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.teamdismiss_ = teamdismiss;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.TeamDismiss)
}

// .msg.CSNtfSwitchModeInTeam SwitchModeInTeam = 302;
inline bool CSNtfBody::_internal_has_switchmodeinteam() const {
  return this != internal_default_instance() && _impl_.switchmodeinteam_ != nullptr;
}
inline bool CSNtfBody::has_switchmodeinteam() const {
  return _internal_has_switchmodeinteam();
}
inline const ::msg::CSNtfSwitchModeInTeam& CSNtfBody::_internal_switchmodeinteam() const {
  const ::msg::CSNtfSwitchModeInTeam* p = _impl_.switchmodeinteam_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfSwitchModeInTeam&>(
      ::msg::_CSNtfSwitchModeInTeam_default_instance_);
}
inline const ::msg::CSNtfSwitchModeInTeam& CSNtfBody::switchmodeinteam() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.SwitchModeInTeam)
  return _internal_switchmodeinteam();
}
inline void CSNtfBody::unsafe_arena_set_allocated_switchmodeinteam(
    ::msg::CSNtfSwitchModeInTeam* switchmodeinteam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.switchmodeinteam_);
  }
  _impl_.switchmodeinteam_ = switchmodeinteam;
  if (switchmodeinteam) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.SwitchModeInTeam)
}
inline ::msg::CSNtfSwitchModeInTeam* CSNtfBody::release_switchmodeinteam() {
  
  ::msg::CSNtfSwitchModeInTeam* temp = _impl_.switchmodeinteam_;
  _impl_.switchmodeinteam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfSwitchModeInTeam* CSNtfBody::unsafe_arena_release_switchmodeinteam() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.SwitchModeInTeam)
  
  ::msg::CSNtfSwitchModeInTeam* temp = _impl_.switchmodeinteam_;
  _impl_.switchmodeinteam_ = nullptr;
  return temp;
}
inline ::msg::CSNtfSwitchModeInTeam* CSNtfBody::_internal_mutable_switchmodeinteam() {
  
  if (_impl_.switchmodeinteam_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfSwitchModeInTeam>(GetArenaForAllocation());
    _impl_.switchmodeinteam_ = p;
  }
  return _impl_.switchmodeinteam_;
}
inline ::msg::CSNtfSwitchModeInTeam* CSNtfBody::mutable_switchmodeinteam() {
  ::msg::CSNtfSwitchModeInTeam* _msg = _internal_mutable_switchmodeinteam();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.SwitchModeInTeam)
  return _msg;
}
inline void CSNtfBody::set_allocated_switchmodeinteam(::msg::CSNtfSwitchModeInTeam* switchmodeinteam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.switchmodeinteam_);
  }
  if (switchmodeinteam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(switchmodeinteam));
    if (message_arena != submessage_arena) {
      switchmodeinteam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, switchmodeinteam, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.switchmodeinteam_ = switchmodeinteam;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.SwitchModeInTeam)
}

// .msg.CSNtfAddBanner AddBanner = 303;
inline bool CSNtfBody::_internal_has_addbanner() const {
  return this != internal_default_instance() && _impl_.addbanner_ != nullptr;
}
inline bool CSNtfBody::has_addbanner() const {
  return _internal_has_addbanner();
}
inline const ::msg::CSNtfAddBanner& CSNtfBody::_internal_addbanner() const {
  const ::msg::CSNtfAddBanner* p = _impl_.addbanner_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfAddBanner&>(
      ::msg::_CSNtfAddBanner_default_instance_);
}
inline const ::msg::CSNtfAddBanner& CSNtfBody::addbanner() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.AddBanner)
  return _internal_addbanner();
}
inline void CSNtfBody::unsafe_arena_set_allocated_addbanner(
    ::msg::CSNtfAddBanner* addbanner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.addbanner_);
  }
  _impl_.addbanner_ = addbanner;
  if (addbanner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.AddBanner)
}
inline ::msg::CSNtfAddBanner* CSNtfBody::release_addbanner() {
  
  ::msg::CSNtfAddBanner* temp = _impl_.addbanner_;
  _impl_.addbanner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfAddBanner* CSNtfBody::unsafe_arena_release_addbanner() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.AddBanner)
  
  ::msg::CSNtfAddBanner* temp = _impl_.addbanner_;
  _impl_.addbanner_ = nullptr;
  return temp;
}
inline ::msg::CSNtfAddBanner* CSNtfBody::_internal_mutable_addbanner() {
  
  if (_impl_.addbanner_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfAddBanner>(GetArenaForAllocation());
    _impl_.addbanner_ = p;
  }
  return _impl_.addbanner_;
}
inline ::msg::CSNtfAddBanner* CSNtfBody::mutable_addbanner() {
  ::msg::CSNtfAddBanner* _msg = _internal_mutable_addbanner();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.AddBanner)
  return _msg;
}
inline void CSNtfBody::set_allocated_addbanner(::msg::CSNtfAddBanner* addbanner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.addbanner_);
  }
  if (addbanner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(addbanner));
    if (message_arena != submessage_arena) {
      addbanner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addbanner, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.addbanner_ = addbanner;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.AddBanner)
}

// .msg.CSNtfRemoveBanner RemoveBanner = 304;
inline bool CSNtfBody::_internal_has_removebanner() const {
  return this != internal_default_instance() && _impl_.removebanner_ != nullptr;
}
inline bool CSNtfBody::has_removebanner() const {
  return _internal_has_removebanner();
}
inline const ::msg::CSNtfRemoveBanner& CSNtfBody::_internal_removebanner() const {
  const ::msg::CSNtfRemoveBanner* p = _impl_.removebanner_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfRemoveBanner&>(
      ::msg::_CSNtfRemoveBanner_default_instance_);
}
inline const ::msg::CSNtfRemoveBanner& CSNtfBody::removebanner() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.RemoveBanner)
  return _internal_removebanner();
}
inline void CSNtfBody::unsafe_arena_set_allocated_removebanner(
    ::msg::CSNtfRemoveBanner* removebanner) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removebanner_);
  }
  _impl_.removebanner_ = removebanner;
  if (removebanner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.RemoveBanner)
}
inline ::msg::CSNtfRemoveBanner* CSNtfBody::release_removebanner() {
  
  ::msg::CSNtfRemoveBanner* temp = _impl_.removebanner_;
  _impl_.removebanner_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfRemoveBanner* CSNtfBody::unsafe_arena_release_removebanner() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.RemoveBanner)
  
  ::msg::CSNtfRemoveBanner* temp = _impl_.removebanner_;
  _impl_.removebanner_ = nullptr;
  return temp;
}
inline ::msg::CSNtfRemoveBanner* CSNtfBody::_internal_mutable_removebanner() {
  
  if (_impl_.removebanner_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfRemoveBanner>(GetArenaForAllocation());
    _impl_.removebanner_ = p;
  }
  return _impl_.removebanner_;
}
inline ::msg::CSNtfRemoveBanner* CSNtfBody::mutable_removebanner() {
  ::msg::CSNtfRemoveBanner* _msg = _internal_mutable_removebanner();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.RemoveBanner)
  return _msg;
}
inline void CSNtfBody::set_allocated_removebanner(::msg::CSNtfRemoveBanner* removebanner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removebanner_);
  }
  if (removebanner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removebanner));
    if (message_arena != submessage_arena) {
      removebanner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removebanner, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.removebanner_ = removebanner;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.RemoveBanner)
}

// .msg.CSNtfSingleRoundFlow SingleRoundFlow = 305;
inline bool CSNtfBody::_internal_has_singleroundflow() const {
  return this != internal_default_instance() && _impl_.singleroundflow_ != nullptr;
}
inline bool CSNtfBody::has_singleroundflow() const {
  return _internal_has_singleroundflow();
}
inline const ::msg::CSNtfSingleRoundFlow& CSNtfBody::_internal_singleroundflow() const {
  const ::msg::CSNtfSingleRoundFlow* p = _impl_.singleroundflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfSingleRoundFlow&>(
      ::msg::_CSNtfSingleRoundFlow_default_instance_);
}
inline const ::msg::CSNtfSingleRoundFlow& CSNtfBody::singleroundflow() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.SingleRoundFlow)
  return _internal_singleroundflow();
}
inline void CSNtfBody::unsafe_arena_set_allocated_singleroundflow(
    ::msg::CSNtfSingleRoundFlow* singleroundflow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.singleroundflow_);
  }
  _impl_.singleroundflow_ = singleroundflow;
  if (singleroundflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.SingleRoundFlow)
}
inline ::msg::CSNtfSingleRoundFlow* CSNtfBody::release_singleroundflow() {
  
  ::msg::CSNtfSingleRoundFlow* temp = _impl_.singleroundflow_;
  _impl_.singleroundflow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfSingleRoundFlow* CSNtfBody::unsafe_arena_release_singleroundflow() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.SingleRoundFlow)
  
  ::msg::CSNtfSingleRoundFlow* temp = _impl_.singleroundflow_;
  _impl_.singleroundflow_ = nullptr;
  return temp;
}
inline ::msg::CSNtfSingleRoundFlow* CSNtfBody::_internal_mutable_singleroundflow() {
  
  if (_impl_.singleroundflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfSingleRoundFlow>(GetArenaForAllocation());
    _impl_.singleroundflow_ = p;
  }
  return _impl_.singleroundflow_;
}
inline ::msg::CSNtfSingleRoundFlow* CSNtfBody::mutable_singleroundflow() {
  ::msg::CSNtfSingleRoundFlow* _msg = _internal_mutable_singleroundflow();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.SingleRoundFlow)
  return _msg;
}
inline void CSNtfBody::set_allocated_singleroundflow(::msg::CSNtfSingleRoundFlow* singleroundflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.singleroundflow_);
  }
  if (singleroundflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(singleroundflow));
    if (message_arena != submessage_arena) {
      singleroundflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, singleroundflow, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.singleroundflow_ = singleroundflow;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.SingleRoundFlow)
}

// .msg.CSNtfTeamStatus TeamStatus = 306;
inline bool CSNtfBody::_internal_has_teamstatus() const {
  return this != internal_default_instance() && _impl_.teamstatus_ != nullptr;
}
inline bool CSNtfBody::has_teamstatus() const {
  return _internal_has_teamstatus();
}
inline const ::msg::CSNtfTeamStatus& CSNtfBody::_internal_teamstatus() const {
  const ::msg::CSNtfTeamStatus* p = _impl_.teamstatus_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfTeamStatus&>(
      ::msg::_CSNtfTeamStatus_default_instance_);
}
inline const ::msg::CSNtfTeamStatus& CSNtfBody::teamstatus() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.TeamStatus)
  return _internal_teamstatus();
}
inline void CSNtfBody::unsafe_arena_set_allocated_teamstatus(
    ::msg::CSNtfTeamStatus* teamstatus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamstatus_);
  }
  _impl_.teamstatus_ = teamstatus;
  if (teamstatus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.TeamStatus)
}
inline ::msg::CSNtfTeamStatus* CSNtfBody::release_teamstatus() {
  
  ::msg::CSNtfTeamStatus* temp = _impl_.teamstatus_;
  _impl_.teamstatus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfTeamStatus* CSNtfBody::unsafe_arena_release_teamstatus() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.TeamStatus)
  
  ::msg::CSNtfTeamStatus* temp = _impl_.teamstatus_;
  _impl_.teamstatus_ = nullptr;
  return temp;
}
inline ::msg::CSNtfTeamStatus* CSNtfBody::_internal_mutable_teamstatus() {
  
  if (_impl_.teamstatus_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfTeamStatus>(GetArenaForAllocation());
    _impl_.teamstatus_ = p;
  }
  return _impl_.teamstatus_;
}
inline ::msg::CSNtfTeamStatus* CSNtfBody::mutable_teamstatus() {
  ::msg::CSNtfTeamStatus* _msg = _internal_mutable_teamstatus();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.TeamStatus)
  return _msg;
}
inline void CSNtfBody::set_allocated_teamstatus(::msg::CSNtfTeamStatus* teamstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.teamstatus_);
  }
  if (teamstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(teamstatus));
    if (message_arena != submessage_arena) {
      teamstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teamstatus, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.teamstatus_ = teamstatus;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.TeamStatus)
}

// .msg.CSNtfTNGameEnd TNGameEnd = 320;
inline bool CSNtfBody::_internal_has_tngameend() const {
  return this != internal_default_instance() && _impl_.tngameend_ != nullptr;
}
inline bool CSNtfBody::has_tngameend() const {
  return _internal_has_tngameend();
}
inline const ::msg::CSNtfTNGameEnd& CSNtfBody::_internal_tngameend() const {
  const ::msg::CSNtfTNGameEnd* p = _impl_.tngameend_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfTNGameEnd&>(
      ::msg::_CSNtfTNGameEnd_default_instance_);
}
inline const ::msg::CSNtfTNGameEnd& CSNtfBody::tngameend() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.TNGameEnd)
  return _internal_tngameend();
}
inline void CSNtfBody::unsafe_arena_set_allocated_tngameend(
    ::msg::CSNtfTNGameEnd* tngameend) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tngameend_);
  }
  _impl_.tngameend_ = tngameend;
  if (tngameend) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.TNGameEnd)
}
inline ::msg::CSNtfTNGameEnd* CSNtfBody::release_tngameend() {
  
  ::msg::CSNtfTNGameEnd* temp = _impl_.tngameend_;
  _impl_.tngameend_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfTNGameEnd* CSNtfBody::unsafe_arena_release_tngameend() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.TNGameEnd)
  
  ::msg::CSNtfTNGameEnd* temp = _impl_.tngameend_;
  _impl_.tngameend_ = nullptr;
  return temp;
}
inline ::msg::CSNtfTNGameEnd* CSNtfBody::_internal_mutable_tngameend() {
  
  if (_impl_.tngameend_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfTNGameEnd>(GetArenaForAllocation());
    _impl_.tngameend_ = p;
  }
  return _impl_.tngameend_;
}
inline ::msg::CSNtfTNGameEnd* CSNtfBody::mutable_tngameend() {
  ::msg::CSNtfTNGameEnd* _msg = _internal_mutable_tngameend();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.TNGameEnd)
  return _msg;
}
inline void CSNtfBody::set_allocated_tngameend(::msg::CSNtfTNGameEnd* tngameend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tngameend_);
  }
  if (tngameend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tngameend));
    if (message_arena != submessage_arena) {
      tngameend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tngameend, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tngameend_ = tngameend;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.TNGameEnd)
}

// .msg.CSNtfPlayerLackResourceInTeam PlayerLackResource = 330;
inline bool CSNtfBody::_internal_has_playerlackresource() const {
  return this != internal_default_instance() && _impl_.playerlackresource_ != nullptr;
}
inline bool CSNtfBody::has_playerlackresource() const {
  return _internal_has_playerlackresource();
}
inline const ::msg::CSNtfPlayerLackResourceInTeam& CSNtfBody::_internal_playerlackresource() const {
  const ::msg::CSNtfPlayerLackResourceInTeam* p = _impl_.playerlackresource_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPlayerLackResourceInTeam&>(
      ::msg::_CSNtfPlayerLackResourceInTeam_default_instance_);
}
inline const ::msg::CSNtfPlayerLackResourceInTeam& CSNtfBody::playerlackresource() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PlayerLackResource)
  return _internal_playerlackresource();
}
inline void CSNtfBody::unsafe_arena_set_allocated_playerlackresource(
    ::msg::CSNtfPlayerLackResourceInTeam* playerlackresource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerlackresource_);
  }
  _impl_.playerlackresource_ = playerlackresource;
  if (playerlackresource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PlayerLackResource)
}
inline ::msg::CSNtfPlayerLackResourceInTeam* CSNtfBody::release_playerlackresource() {
  
  ::msg::CSNtfPlayerLackResourceInTeam* temp = _impl_.playerlackresource_;
  _impl_.playerlackresource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPlayerLackResourceInTeam* CSNtfBody::unsafe_arena_release_playerlackresource() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PlayerLackResource)
  
  ::msg::CSNtfPlayerLackResourceInTeam* temp = _impl_.playerlackresource_;
  _impl_.playerlackresource_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPlayerLackResourceInTeam* CSNtfBody::_internal_mutable_playerlackresource() {
  
  if (_impl_.playerlackresource_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPlayerLackResourceInTeam>(GetArenaForAllocation());
    _impl_.playerlackresource_ = p;
  }
  return _impl_.playerlackresource_;
}
inline ::msg::CSNtfPlayerLackResourceInTeam* CSNtfBody::mutable_playerlackresource() {
  ::msg::CSNtfPlayerLackResourceInTeam* _msg = _internal_mutable_playerlackresource();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PlayerLackResource)
  return _msg;
}
inline void CSNtfBody::set_allocated_playerlackresource(::msg::CSNtfPlayerLackResourceInTeam* playerlackresource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerlackresource_);
  }
  if (playerlackresource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerlackresource));
    if (message_arena != submessage_arena) {
      playerlackresource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerlackresource, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerlackresource_ = playerlackresource;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PlayerLackResource)
}

// .msg.CSNtfFavMapRemoved FavMapRemoved = 331;
inline bool CSNtfBody::_internal_has_favmapremoved() const {
  return this != internal_default_instance() && _impl_.favmapremoved_ != nullptr;
}
inline bool CSNtfBody::has_favmapremoved() const {
  return _internal_has_favmapremoved();
}
inline const ::msg::CSNtfFavMapRemoved& CSNtfBody::_internal_favmapremoved() const {
  const ::msg::CSNtfFavMapRemoved* p = _impl_.favmapremoved_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfFavMapRemoved&>(
      ::msg::_CSNtfFavMapRemoved_default_instance_);
}
inline const ::msg::CSNtfFavMapRemoved& CSNtfBody::favmapremoved() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.FavMapRemoved)
  return _internal_favmapremoved();
}
inline void CSNtfBody::unsafe_arena_set_allocated_favmapremoved(
    ::msg::CSNtfFavMapRemoved* favmapremoved) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.favmapremoved_);
  }
  _impl_.favmapremoved_ = favmapremoved;
  if (favmapremoved) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.FavMapRemoved)
}
inline ::msg::CSNtfFavMapRemoved* CSNtfBody::release_favmapremoved() {
  
  ::msg::CSNtfFavMapRemoved* temp = _impl_.favmapremoved_;
  _impl_.favmapremoved_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfFavMapRemoved* CSNtfBody::unsafe_arena_release_favmapremoved() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.FavMapRemoved)
  
  ::msg::CSNtfFavMapRemoved* temp = _impl_.favmapremoved_;
  _impl_.favmapremoved_ = nullptr;
  return temp;
}
inline ::msg::CSNtfFavMapRemoved* CSNtfBody::_internal_mutable_favmapremoved() {
  
  if (_impl_.favmapremoved_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfFavMapRemoved>(GetArenaForAllocation());
    _impl_.favmapremoved_ = p;
  }
  return _impl_.favmapremoved_;
}
inline ::msg::CSNtfFavMapRemoved* CSNtfBody::mutable_favmapremoved() {
  ::msg::CSNtfFavMapRemoved* _msg = _internal_mutable_favmapremoved();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.FavMapRemoved)
  return _msg;
}
inline void CSNtfBody::set_allocated_favmapremoved(::msg::CSNtfFavMapRemoved* favmapremoved) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.favmapremoved_);
  }
  if (favmapremoved) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(favmapremoved));
    if (message_arena != submessage_arena) {
      favmapremoved = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, favmapremoved, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.favmapremoved_ = favmapremoved;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.FavMapRemoved)
}

// .msg.CSNtfWorkshopMatchResult WorkshopMatchResult = 332;
inline bool CSNtfBody::_internal_has_workshopmatchresult() const {
  return this != internal_default_instance() && _impl_.workshopmatchresult_ != nullptr;
}
inline bool CSNtfBody::has_workshopmatchresult() const {
  return _internal_has_workshopmatchresult();
}
inline const ::msg::CSNtfWorkshopMatchResult& CSNtfBody::_internal_workshopmatchresult() const {
  const ::msg::CSNtfWorkshopMatchResult* p = _impl_.workshopmatchresult_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfWorkshopMatchResult&>(
      ::msg::_CSNtfWorkshopMatchResult_default_instance_);
}
inline const ::msg::CSNtfWorkshopMatchResult& CSNtfBody::workshopmatchresult() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.WorkshopMatchResult)
  return _internal_workshopmatchresult();
}
inline void CSNtfBody::unsafe_arena_set_allocated_workshopmatchresult(
    ::msg::CSNtfWorkshopMatchResult* workshopmatchresult) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.workshopmatchresult_);
  }
  _impl_.workshopmatchresult_ = workshopmatchresult;
  if (workshopmatchresult) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.WorkshopMatchResult)
}
inline ::msg::CSNtfWorkshopMatchResult* CSNtfBody::release_workshopmatchresult() {
  
  ::msg::CSNtfWorkshopMatchResult* temp = _impl_.workshopmatchresult_;
  _impl_.workshopmatchresult_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfWorkshopMatchResult* CSNtfBody::unsafe_arena_release_workshopmatchresult() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.WorkshopMatchResult)
  
  ::msg::CSNtfWorkshopMatchResult* temp = _impl_.workshopmatchresult_;
  _impl_.workshopmatchresult_ = nullptr;
  return temp;
}
inline ::msg::CSNtfWorkshopMatchResult* CSNtfBody::_internal_mutable_workshopmatchresult() {
  
  if (_impl_.workshopmatchresult_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfWorkshopMatchResult>(GetArenaForAllocation());
    _impl_.workshopmatchresult_ = p;
  }
  return _impl_.workshopmatchresult_;
}
inline ::msg::CSNtfWorkshopMatchResult* CSNtfBody::mutable_workshopmatchresult() {
  ::msg::CSNtfWorkshopMatchResult* _msg = _internal_mutable_workshopmatchresult();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.WorkshopMatchResult)
  return _msg;
}
inline void CSNtfBody::set_allocated_workshopmatchresult(::msg::CSNtfWorkshopMatchResult* workshopmatchresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.workshopmatchresult_);
  }
  if (workshopmatchresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workshopmatchresult));
    if (message_arena != submessage_arena) {
      workshopmatchresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workshopmatchresult, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.workshopmatchresult_ = workshopmatchresult;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.WorkshopMatchResult)
}

// .msg.CSNtfBigWinnerExpandMatch BigWinnerExpandMatch = 333;
inline bool CSNtfBody::_internal_has_bigwinnerexpandmatch() const {
  return this != internal_default_instance() && _impl_.bigwinnerexpandmatch_ != nullptr;
}
inline bool CSNtfBody::has_bigwinnerexpandmatch() const {
  return _internal_has_bigwinnerexpandmatch();
}
inline const ::msg::CSNtfBigWinnerExpandMatch& CSNtfBody::_internal_bigwinnerexpandmatch() const {
  const ::msg::CSNtfBigWinnerExpandMatch* p = _impl_.bigwinnerexpandmatch_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfBigWinnerExpandMatch&>(
      ::msg::_CSNtfBigWinnerExpandMatch_default_instance_);
}
inline const ::msg::CSNtfBigWinnerExpandMatch& CSNtfBody::bigwinnerexpandmatch() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.BigWinnerExpandMatch)
  return _internal_bigwinnerexpandmatch();
}
inline void CSNtfBody::unsafe_arena_set_allocated_bigwinnerexpandmatch(
    ::msg::CSNtfBigWinnerExpandMatch* bigwinnerexpandmatch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bigwinnerexpandmatch_);
  }
  _impl_.bigwinnerexpandmatch_ = bigwinnerexpandmatch;
  if (bigwinnerexpandmatch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.BigWinnerExpandMatch)
}
inline ::msg::CSNtfBigWinnerExpandMatch* CSNtfBody::release_bigwinnerexpandmatch() {
  
  ::msg::CSNtfBigWinnerExpandMatch* temp = _impl_.bigwinnerexpandmatch_;
  _impl_.bigwinnerexpandmatch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfBigWinnerExpandMatch* CSNtfBody::unsafe_arena_release_bigwinnerexpandmatch() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.BigWinnerExpandMatch)
  
  ::msg::CSNtfBigWinnerExpandMatch* temp = _impl_.bigwinnerexpandmatch_;
  _impl_.bigwinnerexpandmatch_ = nullptr;
  return temp;
}
inline ::msg::CSNtfBigWinnerExpandMatch* CSNtfBody::_internal_mutable_bigwinnerexpandmatch() {
  
  if (_impl_.bigwinnerexpandmatch_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfBigWinnerExpandMatch>(GetArenaForAllocation());
    _impl_.bigwinnerexpandmatch_ = p;
  }
  return _impl_.bigwinnerexpandmatch_;
}
inline ::msg::CSNtfBigWinnerExpandMatch* CSNtfBody::mutable_bigwinnerexpandmatch() {
  ::msg::CSNtfBigWinnerExpandMatch* _msg = _internal_mutable_bigwinnerexpandmatch();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.BigWinnerExpandMatch)
  return _msg;
}
inline void CSNtfBody::set_allocated_bigwinnerexpandmatch(::msg::CSNtfBigWinnerExpandMatch* bigwinnerexpandmatch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bigwinnerexpandmatch_);
  }
  if (bigwinnerexpandmatch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bigwinnerexpandmatch));
    if (message_arena != submessage_arena) {
      bigwinnerexpandmatch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bigwinnerexpandmatch, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bigwinnerexpandmatch_ = bigwinnerexpandmatch;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.BigWinnerExpandMatch)
}

// .msg.CSNtfVerifyRealName VerifyRealName = 350;
inline bool CSNtfBody::_internal_has_verifyrealname() const {
  return this != internal_default_instance() && _impl_.verifyrealname_ != nullptr;
}
inline bool CSNtfBody::has_verifyrealname() const {
  return _internal_has_verifyrealname();
}
inline const ::msg::CSNtfVerifyRealName& CSNtfBody::_internal_verifyrealname() const {
  const ::msg::CSNtfVerifyRealName* p = _impl_.verifyrealname_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfVerifyRealName&>(
      ::msg::_CSNtfVerifyRealName_default_instance_);
}
inline const ::msg::CSNtfVerifyRealName& CSNtfBody::verifyrealname() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.VerifyRealName)
  return _internal_verifyrealname();
}
inline void CSNtfBody::unsafe_arena_set_allocated_verifyrealname(
    ::msg::CSNtfVerifyRealName* verifyrealname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.verifyrealname_);
  }
  _impl_.verifyrealname_ = verifyrealname;
  if (verifyrealname) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.VerifyRealName)
}
inline ::msg::CSNtfVerifyRealName* CSNtfBody::release_verifyrealname() {
  
  ::msg::CSNtfVerifyRealName* temp = _impl_.verifyrealname_;
  _impl_.verifyrealname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfVerifyRealName* CSNtfBody::unsafe_arena_release_verifyrealname() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.VerifyRealName)
  
  ::msg::CSNtfVerifyRealName* temp = _impl_.verifyrealname_;
  _impl_.verifyrealname_ = nullptr;
  return temp;
}
inline ::msg::CSNtfVerifyRealName* CSNtfBody::_internal_mutable_verifyrealname() {
  
  if (_impl_.verifyrealname_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfVerifyRealName>(GetArenaForAllocation());
    _impl_.verifyrealname_ = p;
  }
  return _impl_.verifyrealname_;
}
inline ::msg::CSNtfVerifyRealName* CSNtfBody::mutable_verifyrealname() {
  ::msg::CSNtfVerifyRealName* _msg = _internal_mutable_verifyrealname();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.VerifyRealName)
  return _msg;
}
inline void CSNtfBody::set_allocated_verifyrealname(::msg::CSNtfVerifyRealName* verifyrealname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.verifyrealname_);
  }
  if (verifyrealname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(verifyrealname));
    if (message_arena != submessage_arena) {
      verifyrealname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verifyrealname, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.verifyrealname_ = verifyrealname;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.VerifyRealName)
}

// .msg.CSNtfGuildJoin GuildJoin = 360;
inline bool CSNtfBody::_internal_has_guildjoin() const {
  return this != internal_default_instance() && _impl_.guildjoin_ != nullptr;
}
inline bool CSNtfBody::has_guildjoin() const {
  return _internal_has_guildjoin();
}
inline const ::msg::CSNtfGuildJoin& CSNtfBody::_internal_guildjoin() const {
  const ::msg::CSNtfGuildJoin* p = _impl_.guildjoin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfGuildJoin&>(
      ::msg::_CSNtfGuildJoin_default_instance_);
}
inline const ::msg::CSNtfGuildJoin& CSNtfBody::guildjoin() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.GuildJoin)
  return _internal_guildjoin();
}
inline void CSNtfBody::unsafe_arena_set_allocated_guildjoin(
    ::msg::CSNtfGuildJoin* guildjoin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildjoin_);
  }
  _impl_.guildjoin_ = guildjoin;
  if (guildjoin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.GuildJoin)
}
inline ::msg::CSNtfGuildJoin* CSNtfBody::release_guildjoin() {
  
  ::msg::CSNtfGuildJoin* temp = _impl_.guildjoin_;
  _impl_.guildjoin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfGuildJoin* CSNtfBody::unsafe_arena_release_guildjoin() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.GuildJoin)
  
  ::msg::CSNtfGuildJoin* temp = _impl_.guildjoin_;
  _impl_.guildjoin_ = nullptr;
  return temp;
}
inline ::msg::CSNtfGuildJoin* CSNtfBody::_internal_mutable_guildjoin() {
  
  if (_impl_.guildjoin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfGuildJoin>(GetArenaForAllocation());
    _impl_.guildjoin_ = p;
  }
  return _impl_.guildjoin_;
}
inline ::msg::CSNtfGuildJoin* CSNtfBody::mutable_guildjoin() {
  ::msg::CSNtfGuildJoin* _msg = _internal_mutable_guildjoin();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.GuildJoin)
  return _msg;
}
inline void CSNtfBody::set_allocated_guildjoin(::msg::CSNtfGuildJoin* guildjoin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildjoin_);
  }
  if (guildjoin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildjoin));
    if (message_arena != submessage_arena) {
      guildjoin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildjoin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildjoin_ = guildjoin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.GuildJoin)
}

// .msg.CSNtfGuildMemberChange MemberChange = 361;
inline bool CSNtfBody::_internal_has_memberchange() const {
  return this != internal_default_instance() && _impl_.memberchange_ != nullptr;
}
inline bool CSNtfBody::has_memberchange() const {
  return _internal_has_memberchange();
}
inline const ::msg::CSNtfGuildMemberChange& CSNtfBody::_internal_memberchange() const {
  const ::msg::CSNtfGuildMemberChange* p = _impl_.memberchange_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfGuildMemberChange&>(
      ::msg::_CSNtfGuildMemberChange_default_instance_);
}
inline const ::msg::CSNtfGuildMemberChange& CSNtfBody::memberchange() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.MemberChange)
  return _internal_memberchange();
}
inline void CSNtfBody::unsafe_arena_set_allocated_memberchange(
    ::msg::CSNtfGuildMemberChange* memberchange) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.memberchange_);
  }
  _impl_.memberchange_ = memberchange;
  if (memberchange) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.MemberChange)
}
inline ::msg::CSNtfGuildMemberChange* CSNtfBody::release_memberchange() {
  
  ::msg::CSNtfGuildMemberChange* temp = _impl_.memberchange_;
  _impl_.memberchange_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfGuildMemberChange* CSNtfBody::unsafe_arena_release_memberchange() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.MemberChange)
  
  ::msg::CSNtfGuildMemberChange* temp = _impl_.memberchange_;
  _impl_.memberchange_ = nullptr;
  return temp;
}
inline ::msg::CSNtfGuildMemberChange* CSNtfBody::_internal_mutable_memberchange() {
  
  if (_impl_.memberchange_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfGuildMemberChange>(GetArenaForAllocation());
    _impl_.memberchange_ = p;
  }
  return _impl_.memberchange_;
}
inline ::msg::CSNtfGuildMemberChange* CSNtfBody::mutable_memberchange() {
  ::msg::CSNtfGuildMemberChange* _msg = _internal_mutable_memberchange();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.MemberChange)
  return _msg;
}
inline void CSNtfBody::set_allocated_memberchange(::msg::CSNtfGuildMemberChange* memberchange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.memberchange_);
  }
  if (memberchange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(memberchange));
    if (message_arena != submessage_arena) {
      memberchange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memberchange, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.memberchange_ = memberchange;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.MemberChange)
}

// .msg.CSNtfGuildKickoff GuildKickoff = 362;
inline bool CSNtfBody::_internal_has_guildkickoff() const {
  return this != internal_default_instance() && _impl_.guildkickoff_ != nullptr;
}
inline bool CSNtfBody::has_guildkickoff() const {
  return _internal_has_guildkickoff();
}
inline const ::msg::CSNtfGuildKickoff& CSNtfBody::_internal_guildkickoff() const {
  const ::msg::CSNtfGuildKickoff* p = _impl_.guildkickoff_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfGuildKickoff&>(
      ::msg::_CSNtfGuildKickoff_default_instance_);
}
inline const ::msg::CSNtfGuildKickoff& CSNtfBody::guildkickoff() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.GuildKickoff)
  return _internal_guildkickoff();
}
inline void CSNtfBody::unsafe_arena_set_allocated_guildkickoff(
    ::msg::CSNtfGuildKickoff* guildkickoff) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildkickoff_);
  }
  _impl_.guildkickoff_ = guildkickoff;
  if (guildkickoff) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.GuildKickoff)
}
inline ::msg::CSNtfGuildKickoff* CSNtfBody::release_guildkickoff() {
  
  ::msg::CSNtfGuildKickoff* temp = _impl_.guildkickoff_;
  _impl_.guildkickoff_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfGuildKickoff* CSNtfBody::unsafe_arena_release_guildkickoff() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.GuildKickoff)
  
  ::msg::CSNtfGuildKickoff* temp = _impl_.guildkickoff_;
  _impl_.guildkickoff_ = nullptr;
  return temp;
}
inline ::msg::CSNtfGuildKickoff* CSNtfBody::_internal_mutable_guildkickoff() {
  
  if (_impl_.guildkickoff_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfGuildKickoff>(GetArenaForAllocation());
    _impl_.guildkickoff_ = p;
  }
  return _impl_.guildkickoff_;
}
inline ::msg::CSNtfGuildKickoff* CSNtfBody::mutable_guildkickoff() {
  ::msg::CSNtfGuildKickoff* _msg = _internal_mutable_guildkickoff();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.GuildKickoff)
  return _msg;
}
inline void CSNtfBody::set_allocated_guildkickoff(::msg::CSNtfGuildKickoff* guildkickoff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildkickoff_);
  }
  if (guildkickoff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildkickoff));
    if (message_arena != submessage_arena) {
      guildkickoff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildkickoff, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildkickoff_ = guildkickoff;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.GuildKickoff)
}

// .msg.CSNtfGuildRoleChange GuildRoleChange = 363;
inline bool CSNtfBody::_internal_has_guildrolechange() const {
  return this != internal_default_instance() && _impl_.guildrolechange_ != nullptr;
}
inline bool CSNtfBody::has_guildrolechange() const {
  return _internal_has_guildrolechange();
}
inline const ::msg::CSNtfGuildRoleChange& CSNtfBody::_internal_guildrolechange() const {
  const ::msg::CSNtfGuildRoleChange* p = _impl_.guildrolechange_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfGuildRoleChange&>(
      ::msg::_CSNtfGuildRoleChange_default_instance_);
}
inline const ::msg::CSNtfGuildRoleChange& CSNtfBody::guildrolechange() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.GuildRoleChange)
  return _internal_guildrolechange();
}
inline void CSNtfBody::unsafe_arena_set_allocated_guildrolechange(
    ::msg::CSNtfGuildRoleChange* guildrolechange) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildrolechange_);
  }
  _impl_.guildrolechange_ = guildrolechange;
  if (guildrolechange) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.GuildRoleChange)
}
inline ::msg::CSNtfGuildRoleChange* CSNtfBody::release_guildrolechange() {
  
  ::msg::CSNtfGuildRoleChange* temp = _impl_.guildrolechange_;
  _impl_.guildrolechange_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfGuildRoleChange* CSNtfBody::unsafe_arena_release_guildrolechange() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.GuildRoleChange)
  
  ::msg::CSNtfGuildRoleChange* temp = _impl_.guildrolechange_;
  _impl_.guildrolechange_ = nullptr;
  return temp;
}
inline ::msg::CSNtfGuildRoleChange* CSNtfBody::_internal_mutable_guildrolechange() {
  
  if (_impl_.guildrolechange_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfGuildRoleChange>(GetArenaForAllocation());
    _impl_.guildrolechange_ = p;
  }
  return _impl_.guildrolechange_;
}
inline ::msg::CSNtfGuildRoleChange* CSNtfBody::mutable_guildrolechange() {
  ::msg::CSNtfGuildRoleChange* _msg = _internal_mutable_guildrolechange();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.GuildRoleChange)
  return _msg;
}
inline void CSNtfBody::set_allocated_guildrolechange(::msg::CSNtfGuildRoleChange* guildrolechange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildrolechange_);
  }
  if (guildrolechange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildrolechange));
    if (message_arena != submessage_arena) {
      guildrolechange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildrolechange, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildrolechange_ = guildrolechange;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.GuildRoleChange)
}

// .msg.CSNtfGuildAttrChange GuildAttrChange = 364;
inline bool CSNtfBody::_internal_has_guildattrchange() const {
  return this != internal_default_instance() && _impl_.guildattrchange_ != nullptr;
}
inline bool CSNtfBody::has_guildattrchange() const {
  return _internal_has_guildattrchange();
}
inline const ::msg::CSNtfGuildAttrChange& CSNtfBody::_internal_guildattrchange() const {
  const ::msg::CSNtfGuildAttrChange* p = _impl_.guildattrchange_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfGuildAttrChange&>(
      ::msg::_CSNtfGuildAttrChange_default_instance_);
}
inline const ::msg::CSNtfGuildAttrChange& CSNtfBody::guildattrchange() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.GuildAttrChange)
  return _internal_guildattrchange();
}
inline void CSNtfBody::unsafe_arena_set_allocated_guildattrchange(
    ::msg::CSNtfGuildAttrChange* guildattrchange) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildattrchange_);
  }
  _impl_.guildattrchange_ = guildattrchange;
  if (guildattrchange) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.GuildAttrChange)
}
inline ::msg::CSNtfGuildAttrChange* CSNtfBody::release_guildattrchange() {
  
  ::msg::CSNtfGuildAttrChange* temp = _impl_.guildattrchange_;
  _impl_.guildattrchange_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfGuildAttrChange* CSNtfBody::unsafe_arena_release_guildattrchange() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.GuildAttrChange)
  
  ::msg::CSNtfGuildAttrChange* temp = _impl_.guildattrchange_;
  _impl_.guildattrchange_ = nullptr;
  return temp;
}
inline ::msg::CSNtfGuildAttrChange* CSNtfBody::_internal_mutable_guildattrchange() {
  
  if (_impl_.guildattrchange_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfGuildAttrChange>(GetArenaForAllocation());
    _impl_.guildattrchange_ = p;
  }
  return _impl_.guildattrchange_;
}
inline ::msg::CSNtfGuildAttrChange* CSNtfBody::mutable_guildattrchange() {
  ::msg::CSNtfGuildAttrChange* _msg = _internal_mutable_guildattrchange();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.GuildAttrChange)
  return _msg;
}
inline void CSNtfBody::set_allocated_guildattrchange(::msg::CSNtfGuildAttrChange* guildattrchange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildattrchange_);
  }
  if (guildattrchange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildattrchange));
    if (message_arena != submessage_arena) {
      guildattrchange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildattrchange, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildattrchange_ = guildattrchange;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.GuildAttrChange)
}

// .msg.CSNtfGuildChat GuildChat = 365;
inline bool CSNtfBody::_internal_has_guildchat() const {
  return this != internal_default_instance() && _impl_.guildchat_ != nullptr;
}
inline bool CSNtfBody::has_guildchat() const {
  return _internal_has_guildchat();
}
inline const ::msg::CSNtfGuildChat& CSNtfBody::_internal_guildchat() const {
  const ::msg::CSNtfGuildChat* p = _impl_.guildchat_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfGuildChat&>(
      ::msg::_CSNtfGuildChat_default_instance_);
}
inline const ::msg::CSNtfGuildChat& CSNtfBody::guildchat() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.GuildChat)
  return _internal_guildchat();
}
inline void CSNtfBody::unsafe_arena_set_allocated_guildchat(
    ::msg::CSNtfGuildChat* guildchat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildchat_);
  }
  _impl_.guildchat_ = guildchat;
  if (guildchat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.GuildChat)
}
inline ::msg::CSNtfGuildChat* CSNtfBody::release_guildchat() {
  
  ::msg::CSNtfGuildChat* temp = _impl_.guildchat_;
  _impl_.guildchat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfGuildChat* CSNtfBody::unsafe_arena_release_guildchat() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.GuildChat)
  
  ::msg::CSNtfGuildChat* temp = _impl_.guildchat_;
  _impl_.guildchat_ = nullptr;
  return temp;
}
inline ::msg::CSNtfGuildChat* CSNtfBody::_internal_mutable_guildchat() {
  
  if (_impl_.guildchat_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfGuildChat>(GetArenaForAllocation());
    _impl_.guildchat_ = p;
  }
  return _impl_.guildchat_;
}
inline ::msg::CSNtfGuildChat* CSNtfBody::mutable_guildchat() {
  ::msg::CSNtfGuildChat* _msg = _internal_mutable_guildchat();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.GuildChat)
  return _msg;
}
inline void CSNtfBody::set_allocated_guildchat(::msg::CSNtfGuildChat* guildchat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildchat_);
  }
  if (guildchat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildchat));
    if (message_arena != submessage_arena) {
      guildchat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildchat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildchat_ = guildchat;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.GuildChat)
}

// .msg.CSNtfNewGuildLog NewGuildLog = 366;
inline bool CSNtfBody::_internal_has_newguildlog() const {
  return this != internal_default_instance() && _impl_.newguildlog_ != nullptr;
}
inline bool CSNtfBody::has_newguildlog() const {
  return _internal_has_newguildlog();
}
inline const ::msg::CSNtfNewGuildLog& CSNtfBody::_internal_newguildlog() const {
  const ::msg::CSNtfNewGuildLog* p = _impl_.newguildlog_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfNewGuildLog&>(
      ::msg::_CSNtfNewGuildLog_default_instance_);
}
inline const ::msg::CSNtfNewGuildLog& CSNtfBody::newguildlog() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.NewGuildLog)
  return _internal_newguildlog();
}
inline void CSNtfBody::unsafe_arena_set_allocated_newguildlog(
    ::msg::CSNtfNewGuildLog* newguildlog) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newguildlog_);
  }
  _impl_.newguildlog_ = newguildlog;
  if (newguildlog) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.NewGuildLog)
}
inline ::msg::CSNtfNewGuildLog* CSNtfBody::release_newguildlog() {
  
  ::msg::CSNtfNewGuildLog* temp = _impl_.newguildlog_;
  _impl_.newguildlog_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfNewGuildLog* CSNtfBody::unsafe_arena_release_newguildlog() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.NewGuildLog)
  
  ::msg::CSNtfNewGuildLog* temp = _impl_.newguildlog_;
  _impl_.newguildlog_ = nullptr;
  return temp;
}
inline ::msg::CSNtfNewGuildLog* CSNtfBody::_internal_mutable_newguildlog() {
  
  if (_impl_.newguildlog_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfNewGuildLog>(GetArenaForAllocation());
    _impl_.newguildlog_ = p;
  }
  return _impl_.newguildlog_;
}
inline ::msg::CSNtfNewGuildLog* CSNtfBody::mutable_newguildlog() {
  ::msg::CSNtfNewGuildLog* _msg = _internal_mutable_newguildlog();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.NewGuildLog)
  return _msg;
}
inline void CSNtfBody::set_allocated_newguildlog(::msg::CSNtfNewGuildLog* newguildlog) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newguildlog_);
  }
  if (newguildlog) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newguildlog));
    if (message_arena != submessage_arena) {
      newguildlog = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newguildlog, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newguildlog_ = newguildlog;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.NewGuildLog)
}

// .msg.CSNtfGuildApplicantChange ApplicantChange = 367;
inline bool CSNtfBody::_internal_has_applicantchange() const {
  return this != internal_default_instance() && _impl_.applicantchange_ != nullptr;
}
inline bool CSNtfBody::has_applicantchange() const {
  return _internal_has_applicantchange();
}
inline const ::msg::CSNtfGuildApplicantChange& CSNtfBody::_internal_applicantchange() const {
  const ::msg::CSNtfGuildApplicantChange* p = _impl_.applicantchange_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfGuildApplicantChange&>(
      ::msg::_CSNtfGuildApplicantChange_default_instance_);
}
inline const ::msg::CSNtfGuildApplicantChange& CSNtfBody::applicantchange() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.ApplicantChange)
  return _internal_applicantchange();
}
inline void CSNtfBody::unsafe_arena_set_allocated_applicantchange(
    ::msg::CSNtfGuildApplicantChange* applicantchange) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.applicantchange_);
  }
  _impl_.applicantchange_ = applicantchange;
  if (applicantchange) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.ApplicantChange)
}
inline ::msg::CSNtfGuildApplicantChange* CSNtfBody::release_applicantchange() {
  
  ::msg::CSNtfGuildApplicantChange* temp = _impl_.applicantchange_;
  _impl_.applicantchange_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfGuildApplicantChange* CSNtfBody::unsafe_arena_release_applicantchange() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.ApplicantChange)
  
  ::msg::CSNtfGuildApplicantChange* temp = _impl_.applicantchange_;
  _impl_.applicantchange_ = nullptr;
  return temp;
}
inline ::msg::CSNtfGuildApplicantChange* CSNtfBody::_internal_mutable_applicantchange() {
  
  if (_impl_.applicantchange_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfGuildApplicantChange>(GetArenaForAllocation());
    _impl_.applicantchange_ = p;
  }
  return _impl_.applicantchange_;
}
inline ::msg::CSNtfGuildApplicantChange* CSNtfBody::mutable_applicantchange() {
  ::msg::CSNtfGuildApplicantChange* _msg = _internal_mutable_applicantchange();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.ApplicantChange)
  return _msg;
}
inline void CSNtfBody::set_allocated_applicantchange(::msg::CSNtfGuildApplicantChange* applicantchange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.applicantchange_);
  }
  if (applicantchange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applicantchange));
    if (message_arena != submessage_arena) {
      applicantchange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applicantchange, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.applicantchange_ = applicantchange;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.ApplicantChange)
}

// .msg.CSNtfGuildInviteeChange InviteeChange = 368;
inline bool CSNtfBody::_internal_has_inviteechange() const {
  return this != internal_default_instance() && _impl_.inviteechange_ != nullptr;
}
inline bool CSNtfBody::has_inviteechange() const {
  return _internal_has_inviteechange();
}
inline const ::msg::CSNtfGuildInviteeChange& CSNtfBody::_internal_inviteechange() const {
  const ::msg::CSNtfGuildInviteeChange* p = _impl_.inviteechange_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfGuildInviteeChange&>(
      ::msg::_CSNtfGuildInviteeChange_default_instance_);
}
inline const ::msg::CSNtfGuildInviteeChange& CSNtfBody::inviteechange() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.InviteeChange)
  return _internal_inviteechange();
}
inline void CSNtfBody::unsafe_arena_set_allocated_inviteechange(
    ::msg::CSNtfGuildInviteeChange* inviteechange) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inviteechange_);
  }
  _impl_.inviteechange_ = inviteechange;
  if (inviteechange) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.InviteeChange)
}
inline ::msg::CSNtfGuildInviteeChange* CSNtfBody::release_inviteechange() {
  
  ::msg::CSNtfGuildInviteeChange* temp = _impl_.inviteechange_;
  _impl_.inviteechange_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfGuildInviteeChange* CSNtfBody::unsafe_arena_release_inviteechange() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.InviteeChange)
  
  ::msg::CSNtfGuildInviteeChange* temp = _impl_.inviteechange_;
  _impl_.inviteechange_ = nullptr;
  return temp;
}
inline ::msg::CSNtfGuildInviteeChange* CSNtfBody::_internal_mutable_inviteechange() {
  
  if (_impl_.inviteechange_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfGuildInviteeChange>(GetArenaForAllocation());
    _impl_.inviteechange_ = p;
  }
  return _impl_.inviteechange_;
}
inline ::msg::CSNtfGuildInviteeChange* CSNtfBody::mutable_inviteechange() {
  ::msg::CSNtfGuildInviteeChange* _msg = _internal_mutable_inviteechange();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.InviteeChange)
  return _msg;
}
inline void CSNtfBody::set_allocated_inviteechange(::msg::CSNtfGuildInviteeChange* inviteechange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inviteechange_);
  }
  if (inviteechange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inviteechange));
    if (message_arena != submessage_arena) {
      inviteechange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inviteechange, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.inviteechange_ = inviteechange;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.InviteeChange)
}

// .msg.CSNtfGuildNewInvite GuildNewInvite = 379;
inline bool CSNtfBody::_internal_has_guildnewinvite() const {
  return this != internal_default_instance() && _impl_.guildnewinvite_ != nullptr;
}
inline bool CSNtfBody::has_guildnewinvite() const {
  return _internal_has_guildnewinvite();
}
inline const ::msg::CSNtfGuildNewInvite& CSNtfBody::_internal_guildnewinvite() const {
  const ::msg::CSNtfGuildNewInvite* p = _impl_.guildnewinvite_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfGuildNewInvite&>(
      ::msg::_CSNtfGuildNewInvite_default_instance_);
}
inline const ::msg::CSNtfGuildNewInvite& CSNtfBody::guildnewinvite() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.GuildNewInvite)
  return _internal_guildnewinvite();
}
inline void CSNtfBody::unsafe_arena_set_allocated_guildnewinvite(
    ::msg::CSNtfGuildNewInvite* guildnewinvite) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildnewinvite_);
  }
  _impl_.guildnewinvite_ = guildnewinvite;
  if (guildnewinvite) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.GuildNewInvite)
}
inline ::msg::CSNtfGuildNewInvite* CSNtfBody::release_guildnewinvite() {
  
  ::msg::CSNtfGuildNewInvite* temp = _impl_.guildnewinvite_;
  _impl_.guildnewinvite_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfGuildNewInvite* CSNtfBody::unsafe_arena_release_guildnewinvite() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.GuildNewInvite)
  
  ::msg::CSNtfGuildNewInvite* temp = _impl_.guildnewinvite_;
  _impl_.guildnewinvite_ = nullptr;
  return temp;
}
inline ::msg::CSNtfGuildNewInvite* CSNtfBody::_internal_mutable_guildnewinvite() {
  
  if (_impl_.guildnewinvite_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfGuildNewInvite>(GetArenaForAllocation());
    _impl_.guildnewinvite_ = p;
  }
  return _impl_.guildnewinvite_;
}
inline ::msg::CSNtfGuildNewInvite* CSNtfBody::mutable_guildnewinvite() {
  ::msg::CSNtfGuildNewInvite* _msg = _internal_mutable_guildnewinvite();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.GuildNewInvite)
  return _msg;
}
inline void CSNtfBody::set_allocated_guildnewinvite(::msg::CSNtfGuildNewInvite* guildnewinvite) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildnewinvite_);
  }
  if (guildnewinvite) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildnewinvite));
    if (message_arena != submessage_arena) {
      guildnewinvite = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildnewinvite, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildnewinvite_ = guildnewinvite;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.GuildNewInvite)
}

// .msg.CSNtfGuildInfo GuildInfo = 380;
inline bool CSNtfBody::_internal_has_guildinfo() const {
  return this != internal_default_instance() && _impl_.guildinfo_ != nullptr;
}
inline bool CSNtfBody::has_guildinfo() const {
  return _internal_has_guildinfo();
}
inline const ::msg::CSNtfGuildInfo& CSNtfBody::_internal_guildinfo() const {
  const ::msg::CSNtfGuildInfo* p = _impl_.guildinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfGuildInfo&>(
      ::msg::_CSNtfGuildInfo_default_instance_);
}
inline const ::msg::CSNtfGuildInfo& CSNtfBody::guildinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.GuildInfo)
  return _internal_guildinfo();
}
inline void CSNtfBody::unsafe_arena_set_allocated_guildinfo(
    ::msg::CSNtfGuildInfo* guildinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildinfo_);
  }
  _impl_.guildinfo_ = guildinfo;
  if (guildinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.GuildInfo)
}
inline ::msg::CSNtfGuildInfo* CSNtfBody::release_guildinfo() {
  
  ::msg::CSNtfGuildInfo* temp = _impl_.guildinfo_;
  _impl_.guildinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfGuildInfo* CSNtfBody::unsafe_arena_release_guildinfo() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.GuildInfo)
  
  ::msg::CSNtfGuildInfo* temp = _impl_.guildinfo_;
  _impl_.guildinfo_ = nullptr;
  return temp;
}
inline ::msg::CSNtfGuildInfo* CSNtfBody::_internal_mutable_guildinfo() {
  
  if (_impl_.guildinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfGuildInfo>(GetArenaForAllocation());
    _impl_.guildinfo_ = p;
  }
  return _impl_.guildinfo_;
}
inline ::msg::CSNtfGuildInfo* CSNtfBody::mutable_guildinfo() {
  ::msg::CSNtfGuildInfo* _msg = _internal_mutable_guildinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.GuildInfo)
  return _msg;
}
inline void CSNtfBody::set_allocated_guildinfo(::msg::CSNtfGuildInfo* guildinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guildinfo_);
  }
  if (guildinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guildinfo));
    if (message_arena != submessage_arena) {
      guildinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guildinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.guildinfo_ = guildinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.GuildInfo)
}

// .msg.CSNtfVngCommentAwardReset VngAwardReset = 400;
inline bool CSNtfBody::_internal_has_vngawardreset() const {
  return this != internal_default_instance() && _impl_.vngawardreset_ != nullptr;
}
inline bool CSNtfBody::has_vngawardreset() const {
  return _internal_has_vngawardreset();
}
inline const ::msg::CSNtfVngCommentAwardReset& CSNtfBody::_internal_vngawardreset() const {
  const ::msg::CSNtfVngCommentAwardReset* p = _impl_.vngawardreset_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfVngCommentAwardReset&>(
      ::msg::_CSNtfVngCommentAwardReset_default_instance_);
}
inline const ::msg::CSNtfVngCommentAwardReset& CSNtfBody::vngawardreset() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.VngAwardReset)
  return _internal_vngawardreset();
}
inline void CSNtfBody::unsafe_arena_set_allocated_vngawardreset(
    ::msg::CSNtfVngCommentAwardReset* vngawardreset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vngawardreset_);
  }
  _impl_.vngawardreset_ = vngawardreset;
  if (vngawardreset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.VngAwardReset)
}
inline ::msg::CSNtfVngCommentAwardReset* CSNtfBody::release_vngawardreset() {
  
  ::msg::CSNtfVngCommentAwardReset* temp = _impl_.vngawardreset_;
  _impl_.vngawardreset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfVngCommentAwardReset* CSNtfBody::unsafe_arena_release_vngawardreset() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.VngAwardReset)
  
  ::msg::CSNtfVngCommentAwardReset* temp = _impl_.vngawardreset_;
  _impl_.vngawardreset_ = nullptr;
  return temp;
}
inline ::msg::CSNtfVngCommentAwardReset* CSNtfBody::_internal_mutable_vngawardreset() {
  
  if (_impl_.vngawardreset_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfVngCommentAwardReset>(GetArenaForAllocation());
    _impl_.vngawardreset_ = p;
  }
  return _impl_.vngawardreset_;
}
inline ::msg::CSNtfVngCommentAwardReset* CSNtfBody::mutable_vngawardreset() {
  ::msg::CSNtfVngCommentAwardReset* _msg = _internal_mutable_vngawardreset();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.VngAwardReset)
  return _msg;
}
inline void CSNtfBody::set_allocated_vngawardreset(::msg::CSNtfVngCommentAwardReset* vngawardreset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vngawardreset_);
  }
  if (vngawardreset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vngawardreset));
    if (message_arena != submessage_arena) {
      vngawardreset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vngawardreset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vngawardreset_ = vngawardreset;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.VngAwardReset)
}

// .msg.CSNtfAdAward AdAward = 401;
inline bool CSNtfBody::_internal_has_adaward() const {
  return this != internal_default_instance() && _impl_.adaward_ != nullptr;
}
inline bool CSNtfBody::has_adaward() const {
  return _internal_has_adaward();
}
inline const ::msg::CSNtfAdAward& CSNtfBody::_internal_adaward() const {
  const ::msg::CSNtfAdAward* p = _impl_.adaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfAdAward&>(
      ::msg::_CSNtfAdAward_default_instance_);
}
inline const ::msg::CSNtfAdAward& CSNtfBody::adaward() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.AdAward)
  return _internal_adaward();
}
inline void CSNtfBody::unsafe_arena_set_allocated_adaward(
    ::msg::CSNtfAdAward* adaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adaward_);
  }
  _impl_.adaward_ = adaward;
  if (adaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.AdAward)
}
inline ::msg::CSNtfAdAward* CSNtfBody::release_adaward() {
  
  ::msg::CSNtfAdAward* temp = _impl_.adaward_;
  _impl_.adaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfAdAward* CSNtfBody::unsafe_arena_release_adaward() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.AdAward)
  
  ::msg::CSNtfAdAward* temp = _impl_.adaward_;
  _impl_.adaward_ = nullptr;
  return temp;
}
inline ::msg::CSNtfAdAward* CSNtfBody::_internal_mutable_adaward() {
  
  if (_impl_.adaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfAdAward>(GetArenaForAllocation());
    _impl_.adaward_ = p;
  }
  return _impl_.adaward_;
}
inline ::msg::CSNtfAdAward* CSNtfBody::mutable_adaward() {
  ::msg::CSNtfAdAward* _msg = _internal_mutable_adaward();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.AdAward)
  return _msg;
}
inline void CSNtfBody::set_allocated_adaward(::msg::CSNtfAdAward* adaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adaward_);
  }
  if (adaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adaward));
    if (message_arena != submessage_arena) {
      adaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.adaward_ = adaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.AdAward)
}

// .msg.CSNtfAdCount AdCount = 402;
inline bool CSNtfBody::_internal_has_adcount() const {
  return this != internal_default_instance() && _impl_.adcount_ != nullptr;
}
inline bool CSNtfBody::has_adcount() const {
  return _internal_has_adcount();
}
inline const ::msg::CSNtfAdCount& CSNtfBody::_internal_adcount() const {
  const ::msg::CSNtfAdCount* p = _impl_.adcount_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfAdCount&>(
      ::msg::_CSNtfAdCount_default_instance_);
}
inline const ::msg::CSNtfAdCount& CSNtfBody::adcount() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.AdCount)
  return _internal_adcount();
}
inline void CSNtfBody::unsafe_arena_set_allocated_adcount(
    ::msg::CSNtfAdCount* adcount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adcount_);
  }
  _impl_.adcount_ = adcount;
  if (adcount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.AdCount)
}
inline ::msg::CSNtfAdCount* CSNtfBody::release_adcount() {
  
  ::msg::CSNtfAdCount* temp = _impl_.adcount_;
  _impl_.adcount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfAdCount* CSNtfBody::unsafe_arena_release_adcount() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.AdCount)
  
  ::msg::CSNtfAdCount* temp = _impl_.adcount_;
  _impl_.adcount_ = nullptr;
  return temp;
}
inline ::msg::CSNtfAdCount* CSNtfBody::_internal_mutable_adcount() {
  
  if (_impl_.adcount_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfAdCount>(GetArenaForAllocation());
    _impl_.adcount_ = p;
  }
  return _impl_.adcount_;
}
inline ::msg::CSNtfAdCount* CSNtfBody::mutable_adcount() {
  ::msg::CSNtfAdCount* _msg = _internal_mutable_adcount();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.AdCount)
  return _msg;
}
inline void CSNtfBody::set_allocated_adcount(::msg::CSNtfAdCount* adcount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adcount_);
  }
  if (adcount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adcount));
    if (message_arena != submessage_arena) {
      adcount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adcount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.adcount_ = adcount;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.AdCount)
}

// .msg.CSNtfUIForbid UIForbid = 403;
inline bool CSNtfBody::_internal_has_uiforbid() const {
  return this != internal_default_instance() && _impl_.uiforbid_ != nullptr;
}
inline bool CSNtfBody::has_uiforbid() const {
  return _internal_has_uiforbid();
}
inline const ::msg::CSNtfUIForbid& CSNtfBody::_internal_uiforbid() const {
  const ::msg::CSNtfUIForbid* p = _impl_.uiforbid_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfUIForbid&>(
      ::msg::_CSNtfUIForbid_default_instance_);
}
inline const ::msg::CSNtfUIForbid& CSNtfBody::uiforbid() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.UIForbid)
  return _internal_uiforbid();
}
inline void CSNtfBody::unsafe_arena_set_allocated_uiforbid(
    ::msg::CSNtfUIForbid* uiforbid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uiforbid_);
  }
  _impl_.uiforbid_ = uiforbid;
  if (uiforbid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.UIForbid)
}
inline ::msg::CSNtfUIForbid* CSNtfBody::release_uiforbid() {
  
  ::msg::CSNtfUIForbid* temp = _impl_.uiforbid_;
  _impl_.uiforbid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfUIForbid* CSNtfBody::unsafe_arena_release_uiforbid() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.UIForbid)
  
  ::msg::CSNtfUIForbid* temp = _impl_.uiforbid_;
  _impl_.uiforbid_ = nullptr;
  return temp;
}
inline ::msg::CSNtfUIForbid* CSNtfBody::_internal_mutable_uiforbid() {
  
  if (_impl_.uiforbid_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfUIForbid>(GetArenaForAllocation());
    _impl_.uiforbid_ = p;
  }
  return _impl_.uiforbid_;
}
inline ::msg::CSNtfUIForbid* CSNtfBody::mutable_uiforbid() {
  ::msg::CSNtfUIForbid* _msg = _internal_mutable_uiforbid();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.UIForbid)
  return _msg;
}
inline void CSNtfBody::set_allocated_uiforbid(::msg::CSNtfUIForbid* uiforbid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uiforbid_);
  }
  if (uiforbid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uiforbid));
    if (message_arena != submessage_arena) {
      uiforbid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uiforbid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.uiforbid_ = uiforbid;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.UIForbid)
}

// .msg.CSNtfPvpUpdateMessengerPos PvpUpdateMessengerPos = 522;
inline bool CSNtfBody::_internal_has_pvpupdatemessengerpos() const {
  return this != internal_default_instance() && _impl_.pvpupdatemessengerpos_ != nullptr;
}
inline bool CSNtfBody::has_pvpupdatemessengerpos() const {
  return _internal_has_pvpupdatemessengerpos();
}
inline const ::msg::CSNtfPvpUpdateMessengerPos& CSNtfBody::_internal_pvpupdatemessengerpos() const {
  const ::msg::CSNtfPvpUpdateMessengerPos* p = _impl_.pvpupdatemessengerpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPvpUpdateMessengerPos&>(
      ::msg::_CSNtfPvpUpdateMessengerPos_default_instance_);
}
inline const ::msg::CSNtfPvpUpdateMessengerPos& CSNtfBody::pvpupdatemessengerpos() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PvpUpdateMessengerPos)
  return _internal_pvpupdatemessengerpos();
}
inline void CSNtfBody::unsafe_arena_set_allocated_pvpupdatemessengerpos(
    ::msg::CSNtfPvpUpdateMessengerPos* pvpupdatemessengerpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpupdatemessengerpos_);
  }
  _impl_.pvpupdatemessengerpos_ = pvpupdatemessengerpos;
  if (pvpupdatemessengerpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PvpUpdateMessengerPos)
}
inline ::msg::CSNtfPvpUpdateMessengerPos* CSNtfBody::release_pvpupdatemessengerpos() {
  
  ::msg::CSNtfPvpUpdateMessengerPos* temp = _impl_.pvpupdatemessengerpos_;
  _impl_.pvpupdatemessengerpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPvpUpdateMessengerPos* CSNtfBody::unsafe_arena_release_pvpupdatemessengerpos() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PvpUpdateMessengerPos)
  
  ::msg::CSNtfPvpUpdateMessengerPos* temp = _impl_.pvpupdatemessengerpos_;
  _impl_.pvpupdatemessengerpos_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPvpUpdateMessengerPos* CSNtfBody::_internal_mutable_pvpupdatemessengerpos() {
  
  if (_impl_.pvpupdatemessengerpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPvpUpdateMessengerPos>(GetArenaForAllocation());
    _impl_.pvpupdatemessengerpos_ = p;
  }
  return _impl_.pvpupdatemessengerpos_;
}
inline ::msg::CSNtfPvpUpdateMessengerPos* CSNtfBody::mutable_pvpupdatemessengerpos() {
  ::msg::CSNtfPvpUpdateMessengerPos* _msg = _internal_mutable_pvpupdatemessengerpos();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PvpUpdateMessengerPos)
  return _msg;
}
inline void CSNtfBody::set_allocated_pvpupdatemessengerpos(::msg::CSNtfPvpUpdateMessengerPos* pvpupdatemessengerpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpupdatemessengerpos_);
  }
  if (pvpupdatemessengerpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvpupdatemessengerpos));
    if (message_arena != submessage_arena) {
      pvpupdatemessengerpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpupdatemessengerpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpupdatemessengerpos_ = pvpupdatemessengerpos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PvpUpdateMessengerPos)
}

// .msg.CSNtfPvpPlayerLoggedIn PvpPlayerLoggedIn = 523;
inline bool CSNtfBody::_internal_has_pvpplayerloggedin() const {
  return this != internal_default_instance() && _impl_.pvpplayerloggedin_ != nullptr;
}
inline bool CSNtfBody::has_pvpplayerloggedin() const {
  return _internal_has_pvpplayerloggedin();
}
inline const ::msg::CSNtfPvpPlayerLoggedIn& CSNtfBody::_internal_pvpplayerloggedin() const {
  const ::msg::CSNtfPvpPlayerLoggedIn* p = _impl_.pvpplayerloggedin_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPvpPlayerLoggedIn&>(
      ::msg::_CSNtfPvpPlayerLoggedIn_default_instance_);
}
inline const ::msg::CSNtfPvpPlayerLoggedIn& CSNtfBody::pvpplayerloggedin() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PvpPlayerLoggedIn)
  return _internal_pvpplayerloggedin();
}
inline void CSNtfBody::unsafe_arena_set_allocated_pvpplayerloggedin(
    ::msg::CSNtfPvpPlayerLoggedIn* pvpplayerloggedin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpplayerloggedin_);
  }
  _impl_.pvpplayerloggedin_ = pvpplayerloggedin;
  if (pvpplayerloggedin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PvpPlayerLoggedIn)
}
inline ::msg::CSNtfPvpPlayerLoggedIn* CSNtfBody::release_pvpplayerloggedin() {
  
  ::msg::CSNtfPvpPlayerLoggedIn* temp = _impl_.pvpplayerloggedin_;
  _impl_.pvpplayerloggedin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPvpPlayerLoggedIn* CSNtfBody::unsafe_arena_release_pvpplayerloggedin() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PvpPlayerLoggedIn)
  
  ::msg::CSNtfPvpPlayerLoggedIn* temp = _impl_.pvpplayerloggedin_;
  _impl_.pvpplayerloggedin_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPvpPlayerLoggedIn* CSNtfBody::_internal_mutable_pvpplayerloggedin() {
  
  if (_impl_.pvpplayerloggedin_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPvpPlayerLoggedIn>(GetArenaForAllocation());
    _impl_.pvpplayerloggedin_ = p;
  }
  return _impl_.pvpplayerloggedin_;
}
inline ::msg::CSNtfPvpPlayerLoggedIn* CSNtfBody::mutable_pvpplayerloggedin() {
  ::msg::CSNtfPvpPlayerLoggedIn* _msg = _internal_mutable_pvpplayerloggedin();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PvpPlayerLoggedIn)
  return _msg;
}
inline void CSNtfBody::set_allocated_pvpplayerloggedin(::msg::CSNtfPvpPlayerLoggedIn* pvpplayerloggedin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpplayerloggedin_);
  }
  if (pvpplayerloggedin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvpplayerloggedin));
    if (message_arena != submessage_arena) {
      pvpplayerloggedin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpplayerloggedin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpplayerloggedin_ = pvpplayerloggedin;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PvpPlayerLoggedIn)
}

// .msg.CSNtfPassThrough PassThrough = 566;
inline bool CSNtfBody::_internal_has_passthrough() const {
  return this != internal_default_instance() && _impl_.passthrough_ != nullptr;
}
inline bool CSNtfBody::has_passthrough() const {
  return _internal_has_passthrough();
}
inline const ::msg::CSNtfPassThrough& CSNtfBody::_internal_passthrough() const {
  const ::msg::CSNtfPassThrough* p = _impl_.passthrough_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPassThrough&>(
      ::msg::_CSNtfPassThrough_default_instance_);
}
inline const ::msg::CSNtfPassThrough& CSNtfBody::passthrough() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PassThrough)
  return _internal_passthrough();
}
inline void CSNtfBody::unsafe_arena_set_allocated_passthrough(
    ::msg::CSNtfPassThrough* passthrough) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passthrough_);
  }
  _impl_.passthrough_ = passthrough;
  if (passthrough) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PassThrough)
}
inline ::msg::CSNtfPassThrough* CSNtfBody::release_passthrough() {
  
  ::msg::CSNtfPassThrough* temp = _impl_.passthrough_;
  _impl_.passthrough_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPassThrough* CSNtfBody::unsafe_arena_release_passthrough() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PassThrough)
  
  ::msg::CSNtfPassThrough* temp = _impl_.passthrough_;
  _impl_.passthrough_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPassThrough* CSNtfBody::_internal_mutable_passthrough() {
  
  if (_impl_.passthrough_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPassThrough>(GetArenaForAllocation());
    _impl_.passthrough_ = p;
  }
  return _impl_.passthrough_;
}
inline ::msg::CSNtfPassThrough* CSNtfBody::mutable_passthrough() {
  ::msg::CSNtfPassThrough* _msg = _internal_mutable_passthrough();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PassThrough)
  return _msg;
}
inline void CSNtfBody::set_allocated_passthrough(::msg::CSNtfPassThrough* passthrough) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.passthrough_);
  }
  if (passthrough) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(passthrough));
    if (message_arena != submessage_arena) {
      passthrough = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, passthrough, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.passthrough_ = passthrough;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PassThrough)
}

// .msg.CSNtfAA AA = 570;
inline bool CSNtfBody::_internal_has_aa() const {
  return this != internal_default_instance() && _impl_.aa_ != nullptr;
}
inline bool CSNtfBody::has_aa() const {
  return _internal_has_aa();
}
inline const ::msg::CSNtfAA& CSNtfBody::_internal_aa() const {
  const ::msg::CSNtfAA* p = _impl_.aa_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfAA&>(
      ::msg::_CSNtfAA_default_instance_);
}
inline const ::msg::CSNtfAA& CSNtfBody::aa() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.AA)
  return _internal_aa();
}
inline void CSNtfBody::unsafe_arena_set_allocated_aa(
    ::msg::CSNtfAA* aa) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aa_);
  }
  _impl_.aa_ = aa;
  if (aa) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.AA)
}
inline ::msg::CSNtfAA* CSNtfBody::release_aa() {
  
  ::msg::CSNtfAA* temp = _impl_.aa_;
  _impl_.aa_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfAA* CSNtfBody::unsafe_arena_release_aa() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.AA)
  
  ::msg::CSNtfAA* temp = _impl_.aa_;
  _impl_.aa_ = nullptr;
  return temp;
}
inline ::msg::CSNtfAA* CSNtfBody::_internal_mutable_aa() {
  
  if (_impl_.aa_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfAA>(GetArenaForAllocation());
    _impl_.aa_ = p;
  }
  return _impl_.aa_;
}
inline ::msg::CSNtfAA* CSNtfBody::mutable_aa() {
  ::msg::CSNtfAA* _msg = _internal_mutable_aa();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.AA)
  return _msg;
}
inline void CSNtfBody::set_allocated_aa(::msg::CSNtfAA* aa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aa_);
  }
  if (aa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aa));
    if (message_arena != submessage_arena) {
      aa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aa, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.aa_ = aa;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.AA)
}

// .msg.CSNtfPvpReconnect PvpReconnect = 571;
inline bool CSNtfBody::_internal_has_pvpreconnect() const {
  return this != internal_default_instance() && _impl_.pvpreconnect_ != nullptr;
}
inline bool CSNtfBody::has_pvpreconnect() const {
  return _internal_has_pvpreconnect();
}
inline const ::msg::CSNtfPvpReconnect& CSNtfBody::_internal_pvpreconnect() const {
  const ::msg::CSNtfPvpReconnect* p = _impl_.pvpreconnect_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPvpReconnect&>(
      ::msg::_CSNtfPvpReconnect_default_instance_);
}
inline const ::msg::CSNtfPvpReconnect& CSNtfBody::pvpreconnect() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PvpReconnect)
  return _internal_pvpreconnect();
}
inline void CSNtfBody::unsafe_arena_set_allocated_pvpreconnect(
    ::msg::CSNtfPvpReconnect* pvpreconnect) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpreconnect_);
  }
  _impl_.pvpreconnect_ = pvpreconnect;
  if (pvpreconnect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PvpReconnect)
}
inline ::msg::CSNtfPvpReconnect* CSNtfBody::release_pvpreconnect() {
  
  ::msg::CSNtfPvpReconnect* temp = _impl_.pvpreconnect_;
  _impl_.pvpreconnect_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPvpReconnect* CSNtfBody::unsafe_arena_release_pvpreconnect() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PvpReconnect)
  
  ::msg::CSNtfPvpReconnect* temp = _impl_.pvpreconnect_;
  _impl_.pvpreconnect_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPvpReconnect* CSNtfBody::_internal_mutable_pvpreconnect() {
  
  if (_impl_.pvpreconnect_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPvpReconnect>(GetArenaForAllocation());
    _impl_.pvpreconnect_ = p;
  }
  return _impl_.pvpreconnect_;
}
inline ::msg::CSNtfPvpReconnect* CSNtfBody::mutable_pvpreconnect() {
  ::msg::CSNtfPvpReconnect* _msg = _internal_mutable_pvpreconnect();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PvpReconnect)
  return _msg;
}
inline void CSNtfBody::set_allocated_pvpreconnect(::msg::CSNtfPvpReconnect* pvpreconnect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpreconnect_);
  }
  if (pvpreconnect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvpreconnect));
    if (message_arena != submessage_arena) {
      pvpreconnect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpreconnect, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpreconnect_ = pvpreconnect;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PvpReconnect)
}

// .msg.CSNtfUpdateBattleResult UpdateBattleResult = 572;
inline bool CSNtfBody::_internal_has_updatebattleresult() const {
  return this != internal_default_instance() && _impl_.updatebattleresult_ != nullptr;
}
inline bool CSNtfBody::has_updatebattleresult() const {
  return _internal_has_updatebattleresult();
}
inline const ::msg::CSNtfUpdateBattleResult& CSNtfBody::_internal_updatebattleresult() const {
  const ::msg::CSNtfUpdateBattleResult* p = _impl_.updatebattleresult_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfUpdateBattleResult&>(
      ::msg::_CSNtfUpdateBattleResult_default_instance_);
}
inline const ::msg::CSNtfUpdateBattleResult& CSNtfBody::updatebattleresult() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.UpdateBattleResult)
  return _internal_updatebattleresult();
}
inline void CSNtfBody::unsafe_arena_set_allocated_updatebattleresult(
    ::msg::CSNtfUpdateBattleResult* updatebattleresult) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatebattleresult_);
  }
  _impl_.updatebattleresult_ = updatebattleresult;
  if (updatebattleresult) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.UpdateBattleResult)
}
inline ::msg::CSNtfUpdateBattleResult* CSNtfBody::release_updatebattleresult() {
  
  ::msg::CSNtfUpdateBattleResult* temp = _impl_.updatebattleresult_;
  _impl_.updatebattleresult_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfUpdateBattleResult* CSNtfBody::unsafe_arena_release_updatebattleresult() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.UpdateBattleResult)
  
  ::msg::CSNtfUpdateBattleResult* temp = _impl_.updatebattleresult_;
  _impl_.updatebattleresult_ = nullptr;
  return temp;
}
inline ::msg::CSNtfUpdateBattleResult* CSNtfBody::_internal_mutable_updatebattleresult() {
  
  if (_impl_.updatebattleresult_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfUpdateBattleResult>(GetArenaForAllocation());
    _impl_.updatebattleresult_ = p;
  }
  return _impl_.updatebattleresult_;
}
inline ::msg::CSNtfUpdateBattleResult* CSNtfBody::mutable_updatebattleresult() {
  ::msg::CSNtfUpdateBattleResult* _msg = _internal_mutable_updatebattleresult();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.UpdateBattleResult)
  return _msg;
}
inline void CSNtfBody::set_allocated_updatebattleresult(::msg::CSNtfUpdateBattleResult* updatebattleresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatebattleresult_);
  }
  if (updatebattleresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatebattleresult));
    if (message_arena != submessage_arena) {
      updatebattleresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatebattleresult, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updatebattleresult_ = updatebattleresult;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.UpdateBattleResult)
}

// .msg.CSNtfVisitPlayer VisitPlayer = 573;
inline bool CSNtfBody::_internal_has_visitplayer() const {
  return this != internal_default_instance() && _impl_.visitplayer_ != nullptr;
}
inline bool CSNtfBody::has_visitplayer() const {
  return _internal_has_visitplayer();
}
inline const ::msg::CSNtfVisitPlayer& CSNtfBody::_internal_visitplayer() const {
  const ::msg::CSNtfVisitPlayer* p = _impl_.visitplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfVisitPlayer&>(
      ::msg::_CSNtfVisitPlayer_default_instance_);
}
inline const ::msg::CSNtfVisitPlayer& CSNtfBody::visitplayer() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.VisitPlayer)
  return _internal_visitplayer();
}
inline void CSNtfBody::unsafe_arena_set_allocated_visitplayer(
    ::msg::CSNtfVisitPlayer* visitplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.visitplayer_);
  }
  _impl_.visitplayer_ = visitplayer;
  if (visitplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.VisitPlayer)
}
inline ::msg::CSNtfVisitPlayer* CSNtfBody::release_visitplayer() {
  
  ::msg::CSNtfVisitPlayer* temp = _impl_.visitplayer_;
  _impl_.visitplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfVisitPlayer* CSNtfBody::unsafe_arena_release_visitplayer() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.VisitPlayer)
  
  ::msg::CSNtfVisitPlayer* temp = _impl_.visitplayer_;
  _impl_.visitplayer_ = nullptr;
  return temp;
}
inline ::msg::CSNtfVisitPlayer* CSNtfBody::_internal_mutable_visitplayer() {
  
  if (_impl_.visitplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfVisitPlayer>(GetArenaForAllocation());
    _impl_.visitplayer_ = p;
  }
  return _impl_.visitplayer_;
}
inline ::msg::CSNtfVisitPlayer* CSNtfBody::mutable_visitplayer() {
  ::msg::CSNtfVisitPlayer* _msg = _internal_mutable_visitplayer();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.VisitPlayer)
  return _msg;
}
inline void CSNtfBody::set_allocated_visitplayer(::msg::CSNtfVisitPlayer* visitplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.visitplayer_);
  }
  if (visitplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visitplayer));
    if (message_arena != submessage_arena) {
      visitplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visitplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.visitplayer_ = visitplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.VisitPlayer)
}

// .msg.CSNtfKrIdentityAuth KrIdentityAuth = 574;
inline bool CSNtfBody::_internal_has_kridentityauth() const {
  return this != internal_default_instance() && _impl_.kridentityauth_ != nullptr;
}
inline bool CSNtfBody::has_kridentityauth() const {
  return _internal_has_kridentityauth();
}
inline const ::msg::CSNtfKrIdentityAuth& CSNtfBody::_internal_kridentityauth() const {
  const ::msg::CSNtfKrIdentityAuth* p = _impl_.kridentityauth_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfKrIdentityAuth&>(
      ::msg::_CSNtfKrIdentityAuth_default_instance_);
}
inline const ::msg::CSNtfKrIdentityAuth& CSNtfBody::kridentityauth() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.KrIdentityAuth)
  return _internal_kridentityauth();
}
inline void CSNtfBody::unsafe_arena_set_allocated_kridentityauth(
    ::msg::CSNtfKrIdentityAuth* kridentityauth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kridentityauth_);
  }
  _impl_.kridentityauth_ = kridentityauth;
  if (kridentityauth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.KrIdentityAuth)
}
inline ::msg::CSNtfKrIdentityAuth* CSNtfBody::release_kridentityauth() {
  
  ::msg::CSNtfKrIdentityAuth* temp = _impl_.kridentityauth_;
  _impl_.kridentityauth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfKrIdentityAuth* CSNtfBody::unsafe_arena_release_kridentityauth() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.KrIdentityAuth)
  
  ::msg::CSNtfKrIdentityAuth* temp = _impl_.kridentityauth_;
  _impl_.kridentityauth_ = nullptr;
  return temp;
}
inline ::msg::CSNtfKrIdentityAuth* CSNtfBody::_internal_mutable_kridentityauth() {
  
  if (_impl_.kridentityauth_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfKrIdentityAuth>(GetArenaForAllocation());
    _impl_.kridentityauth_ = p;
  }
  return _impl_.kridentityauth_;
}
inline ::msg::CSNtfKrIdentityAuth* CSNtfBody::mutable_kridentityauth() {
  ::msg::CSNtfKrIdentityAuth* _msg = _internal_mutable_kridentityauth();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.KrIdentityAuth)
  return _msg;
}
inline void CSNtfBody::set_allocated_kridentityauth(::msg::CSNtfKrIdentityAuth* kridentityauth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kridentityauth_);
  }
  if (kridentityauth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kridentityauth));
    if (message_arena != submessage_arena) {
      kridentityauth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kridentityauth, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kridentityauth_ = kridentityauth;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.KrIdentityAuth)
}

// .msg.CSNtfKrAddictionTip KrAddictionTip = 575;
inline bool CSNtfBody::_internal_has_kraddictiontip() const {
  return this != internal_default_instance() && _impl_.kraddictiontip_ != nullptr;
}
inline bool CSNtfBody::has_kraddictiontip() const {
  return _internal_has_kraddictiontip();
}
inline const ::msg::CSNtfKrAddictionTip& CSNtfBody::_internal_kraddictiontip() const {
  const ::msg::CSNtfKrAddictionTip* p = _impl_.kraddictiontip_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfKrAddictionTip&>(
      ::msg::_CSNtfKrAddictionTip_default_instance_);
}
inline const ::msg::CSNtfKrAddictionTip& CSNtfBody::kraddictiontip() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.KrAddictionTip)
  return _internal_kraddictiontip();
}
inline void CSNtfBody::unsafe_arena_set_allocated_kraddictiontip(
    ::msg::CSNtfKrAddictionTip* kraddictiontip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kraddictiontip_);
  }
  _impl_.kraddictiontip_ = kraddictiontip;
  if (kraddictiontip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.KrAddictionTip)
}
inline ::msg::CSNtfKrAddictionTip* CSNtfBody::release_kraddictiontip() {
  
  ::msg::CSNtfKrAddictionTip* temp = _impl_.kraddictiontip_;
  _impl_.kraddictiontip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfKrAddictionTip* CSNtfBody::unsafe_arena_release_kraddictiontip() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.KrAddictionTip)
  
  ::msg::CSNtfKrAddictionTip* temp = _impl_.kraddictiontip_;
  _impl_.kraddictiontip_ = nullptr;
  return temp;
}
inline ::msg::CSNtfKrAddictionTip* CSNtfBody::_internal_mutable_kraddictiontip() {
  
  if (_impl_.kraddictiontip_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfKrAddictionTip>(GetArenaForAllocation());
    _impl_.kraddictiontip_ = p;
  }
  return _impl_.kraddictiontip_;
}
inline ::msg::CSNtfKrAddictionTip* CSNtfBody::mutable_kraddictiontip() {
  ::msg::CSNtfKrAddictionTip* _msg = _internal_mutable_kraddictiontip();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.KrAddictionTip)
  return _msg;
}
inline void CSNtfBody::set_allocated_kraddictiontip(::msg::CSNtfKrAddictionTip* kraddictiontip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kraddictiontip_);
  }
  if (kraddictiontip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kraddictiontip));
    if (message_arena != submessage_arena) {
      kraddictiontip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kraddictiontip, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kraddictiontip_ = kraddictiontip;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.KrAddictionTip)
}

// .msg.CSNtfLeaveGameEarly LeaveGameEarly = 576;
inline bool CSNtfBody::_internal_has_leavegameearly() const {
  return this != internal_default_instance() && _impl_.leavegameearly_ != nullptr;
}
inline bool CSNtfBody::has_leavegameearly() const {
  return _internal_has_leavegameearly();
}
inline const ::msg::CSNtfLeaveGameEarly& CSNtfBody::_internal_leavegameearly() const {
  const ::msg::CSNtfLeaveGameEarly* p = _impl_.leavegameearly_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfLeaveGameEarly&>(
      ::msg::_CSNtfLeaveGameEarly_default_instance_);
}
inline const ::msg::CSNtfLeaveGameEarly& CSNtfBody::leavegameearly() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.LeaveGameEarly)
  return _internal_leavegameearly();
}
inline void CSNtfBody::unsafe_arena_set_allocated_leavegameearly(
    ::msg::CSNtfLeaveGameEarly* leavegameearly) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leavegameearly_);
  }
  _impl_.leavegameearly_ = leavegameearly;
  if (leavegameearly) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.LeaveGameEarly)
}
inline ::msg::CSNtfLeaveGameEarly* CSNtfBody::release_leavegameearly() {
  
  ::msg::CSNtfLeaveGameEarly* temp = _impl_.leavegameearly_;
  _impl_.leavegameearly_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfLeaveGameEarly* CSNtfBody::unsafe_arena_release_leavegameearly() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.LeaveGameEarly)
  
  ::msg::CSNtfLeaveGameEarly* temp = _impl_.leavegameearly_;
  _impl_.leavegameearly_ = nullptr;
  return temp;
}
inline ::msg::CSNtfLeaveGameEarly* CSNtfBody::_internal_mutable_leavegameearly() {
  
  if (_impl_.leavegameearly_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfLeaveGameEarly>(GetArenaForAllocation());
    _impl_.leavegameearly_ = p;
  }
  return _impl_.leavegameearly_;
}
inline ::msg::CSNtfLeaveGameEarly* CSNtfBody::mutable_leavegameearly() {
  ::msg::CSNtfLeaveGameEarly* _msg = _internal_mutable_leavegameearly();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.LeaveGameEarly)
  return _msg;
}
inline void CSNtfBody::set_allocated_leavegameearly(::msg::CSNtfLeaveGameEarly* leavegameearly) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leavegameearly_);
  }
  if (leavegameearly) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leavegameearly));
    if (message_arena != submessage_arena) {
      leavegameearly = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leavegameearly, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.leavegameearly_ = leavegameearly;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.LeaveGameEarly)
}

// .msg.CSNtfKrAddictionCountdown KrAddictionCountdown = 577;
inline bool CSNtfBody::_internal_has_kraddictioncountdown() const {
  return this != internal_default_instance() && _impl_.kraddictioncountdown_ != nullptr;
}
inline bool CSNtfBody::has_kraddictioncountdown() const {
  return _internal_has_kraddictioncountdown();
}
inline const ::msg::CSNtfKrAddictionCountdown& CSNtfBody::_internal_kraddictioncountdown() const {
  const ::msg::CSNtfKrAddictionCountdown* p = _impl_.kraddictioncountdown_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfKrAddictionCountdown&>(
      ::msg::_CSNtfKrAddictionCountdown_default_instance_);
}
inline const ::msg::CSNtfKrAddictionCountdown& CSNtfBody::kraddictioncountdown() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.KrAddictionCountdown)
  return _internal_kraddictioncountdown();
}
inline void CSNtfBody::unsafe_arena_set_allocated_kraddictioncountdown(
    ::msg::CSNtfKrAddictionCountdown* kraddictioncountdown) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kraddictioncountdown_);
  }
  _impl_.kraddictioncountdown_ = kraddictioncountdown;
  if (kraddictioncountdown) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.KrAddictionCountdown)
}
inline ::msg::CSNtfKrAddictionCountdown* CSNtfBody::release_kraddictioncountdown() {
  
  ::msg::CSNtfKrAddictionCountdown* temp = _impl_.kraddictioncountdown_;
  _impl_.kraddictioncountdown_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfKrAddictionCountdown* CSNtfBody::unsafe_arena_release_kraddictioncountdown() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.KrAddictionCountdown)
  
  ::msg::CSNtfKrAddictionCountdown* temp = _impl_.kraddictioncountdown_;
  _impl_.kraddictioncountdown_ = nullptr;
  return temp;
}
inline ::msg::CSNtfKrAddictionCountdown* CSNtfBody::_internal_mutable_kraddictioncountdown() {
  
  if (_impl_.kraddictioncountdown_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfKrAddictionCountdown>(GetArenaForAllocation());
    _impl_.kraddictioncountdown_ = p;
  }
  return _impl_.kraddictioncountdown_;
}
inline ::msg::CSNtfKrAddictionCountdown* CSNtfBody::mutable_kraddictioncountdown() {
  ::msg::CSNtfKrAddictionCountdown* _msg = _internal_mutable_kraddictioncountdown();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.KrAddictionCountdown)
  return _msg;
}
inline void CSNtfBody::set_allocated_kraddictioncountdown(::msg::CSNtfKrAddictionCountdown* kraddictioncountdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kraddictioncountdown_);
  }
  if (kraddictioncountdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kraddictioncountdown));
    if (message_arena != submessage_arena) {
      kraddictioncountdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kraddictioncountdown, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.kraddictioncountdown_ = kraddictioncountdown;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.KrAddictionCountdown)
}

// .msg.CSNtfHistoryChatMsg HistroyChatMsg = 578;
inline bool CSNtfBody::_internal_has_histroychatmsg() const {
  return this != internal_default_instance() && _impl_.histroychatmsg_ != nullptr;
}
inline bool CSNtfBody::has_histroychatmsg() const {
  return _internal_has_histroychatmsg();
}
inline const ::msg::CSNtfHistoryChatMsg& CSNtfBody::_internal_histroychatmsg() const {
  const ::msg::CSNtfHistoryChatMsg* p = _impl_.histroychatmsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfHistoryChatMsg&>(
      ::msg::_CSNtfHistoryChatMsg_default_instance_);
}
inline const ::msg::CSNtfHistoryChatMsg& CSNtfBody::histroychatmsg() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.HistroyChatMsg)
  return _internal_histroychatmsg();
}
inline void CSNtfBody::unsafe_arena_set_allocated_histroychatmsg(
    ::msg::CSNtfHistoryChatMsg* histroychatmsg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.histroychatmsg_);
  }
  _impl_.histroychatmsg_ = histroychatmsg;
  if (histroychatmsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.HistroyChatMsg)
}
inline ::msg::CSNtfHistoryChatMsg* CSNtfBody::release_histroychatmsg() {
  
  ::msg::CSNtfHistoryChatMsg* temp = _impl_.histroychatmsg_;
  _impl_.histroychatmsg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfHistoryChatMsg* CSNtfBody::unsafe_arena_release_histroychatmsg() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.HistroyChatMsg)
  
  ::msg::CSNtfHistoryChatMsg* temp = _impl_.histroychatmsg_;
  _impl_.histroychatmsg_ = nullptr;
  return temp;
}
inline ::msg::CSNtfHistoryChatMsg* CSNtfBody::_internal_mutable_histroychatmsg() {
  
  if (_impl_.histroychatmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfHistoryChatMsg>(GetArenaForAllocation());
    _impl_.histroychatmsg_ = p;
  }
  return _impl_.histroychatmsg_;
}
inline ::msg::CSNtfHistoryChatMsg* CSNtfBody::mutable_histroychatmsg() {
  ::msg::CSNtfHistoryChatMsg* _msg = _internal_mutable_histroychatmsg();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.HistroyChatMsg)
  return _msg;
}
inline void CSNtfBody::set_allocated_histroychatmsg(::msg::CSNtfHistoryChatMsg* histroychatmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.histroychatmsg_);
  }
  if (histroychatmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(histroychatmsg));
    if (message_arena != submessage_arena) {
      histroychatmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, histroychatmsg, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.histroychatmsg_ = histroychatmsg;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.HistroyChatMsg)
}

// .msg.CSNtfSystemGmTime GMTime = 579;
inline bool CSNtfBody::_internal_has_gmtime() const {
  return this != internal_default_instance() && _impl_.gmtime_ != nullptr;
}
inline bool CSNtfBody::has_gmtime() const {
  return _internal_has_gmtime();
}
inline const ::msg::CSNtfSystemGmTime& CSNtfBody::_internal_gmtime() const {
  const ::msg::CSNtfSystemGmTime* p = _impl_.gmtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfSystemGmTime&>(
      ::msg::_CSNtfSystemGmTime_default_instance_);
}
inline const ::msg::CSNtfSystemGmTime& CSNtfBody::gmtime() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.GMTime)
  return _internal_gmtime();
}
inline void CSNtfBody::unsafe_arena_set_allocated_gmtime(
    ::msg::CSNtfSystemGmTime* gmtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gmtime_);
  }
  _impl_.gmtime_ = gmtime;
  if (gmtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.GMTime)
}
inline ::msg::CSNtfSystemGmTime* CSNtfBody::release_gmtime() {
  
  ::msg::CSNtfSystemGmTime* temp = _impl_.gmtime_;
  _impl_.gmtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfSystemGmTime* CSNtfBody::unsafe_arena_release_gmtime() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.GMTime)
  
  ::msg::CSNtfSystemGmTime* temp = _impl_.gmtime_;
  _impl_.gmtime_ = nullptr;
  return temp;
}
inline ::msg::CSNtfSystemGmTime* CSNtfBody::_internal_mutable_gmtime() {
  
  if (_impl_.gmtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfSystemGmTime>(GetArenaForAllocation());
    _impl_.gmtime_ = p;
  }
  return _impl_.gmtime_;
}
inline ::msg::CSNtfSystemGmTime* CSNtfBody::mutable_gmtime() {
  ::msg::CSNtfSystemGmTime* _msg = _internal_mutable_gmtime();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.GMTime)
  return _msg;
}
inline void CSNtfBody::set_allocated_gmtime(::msg::CSNtfSystemGmTime* gmtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gmtime_);
  }
  if (gmtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gmtime));
    if (message_arena != submessage_arena) {
      gmtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gmtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gmtime_ = gmtime;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.GMTime)
}

// .msg.CSNtfChangeName ChangeName = 580;
inline bool CSNtfBody::_internal_has_changename() const {
  return this != internal_default_instance() && _impl_.changename_ != nullptr;
}
inline bool CSNtfBody::has_changename() const {
  return _internal_has_changename();
}
inline const ::msg::CSNtfChangeName& CSNtfBody::_internal_changename() const {
  const ::msg::CSNtfChangeName* p = _impl_.changename_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfChangeName&>(
      ::msg::_CSNtfChangeName_default_instance_);
}
inline const ::msg::CSNtfChangeName& CSNtfBody::changename() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.ChangeName)
  return _internal_changename();
}
inline void CSNtfBody::unsafe_arena_set_allocated_changename(
    ::msg::CSNtfChangeName* changename) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changename_);
  }
  _impl_.changename_ = changename;
  if (changename) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.ChangeName)
}
inline ::msg::CSNtfChangeName* CSNtfBody::release_changename() {
  
  ::msg::CSNtfChangeName* temp = _impl_.changename_;
  _impl_.changename_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfChangeName* CSNtfBody::unsafe_arena_release_changename() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.ChangeName)
  
  ::msg::CSNtfChangeName* temp = _impl_.changename_;
  _impl_.changename_ = nullptr;
  return temp;
}
inline ::msg::CSNtfChangeName* CSNtfBody::_internal_mutable_changename() {
  
  if (_impl_.changename_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfChangeName>(GetArenaForAllocation());
    _impl_.changename_ = p;
  }
  return _impl_.changename_;
}
inline ::msg::CSNtfChangeName* CSNtfBody::mutable_changename() {
  ::msg::CSNtfChangeName* _msg = _internal_mutable_changename();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.ChangeName)
  return _msg;
}
inline void CSNtfBody::set_allocated_changename(::msg::CSNtfChangeName* changename) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changename_);
  }
  if (changename) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(changename));
    if (message_arena != submessage_arena) {
      changename = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changename, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.changename_ = changename;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.ChangeName)
}

// .msg.CSNtfFirstPay FirstPay = 581;
inline bool CSNtfBody::_internal_has_firstpay() const {
  return this != internal_default_instance() && _impl_.firstpay_ != nullptr;
}
inline bool CSNtfBody::has_firstpay() const {
  return _internal_has_firstpay();
}
inline const ::msg::CSNtfFirstPay& CSNtfBody::_internal_firstpay() const {
  const ::msg::CSNtfFirstPay* p = _impl_.firstpay_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfFirstPay&>(
      ::msg::_CSNtfFirstPay_default_instance_);
}
inline const ::msg::CSNtfFirstPay& CSNtfBody::firstpay() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.FirstPay)
  return _internal_firstpay();
}
inline void CSNtfBody::unsafe_arena_set_allocated_firstpay(
    ::msg::CSNtfFirstPay* firstpay) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.firstpay_);
  }
  _impl_.firstpay_ = firstpay;
  if (firstpay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.FirstPay)
}
inline ::msg::CSNtfFirstPay* CSNtfBody::release_firstpay() {
  
  ::msg::CSNtfFirstPay* temp = _impl_.firstpay_;
  _impl_.firstpay_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfFirstPay* CSNtfBody::unsafe_arena_release_firstpay() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.FirstPay)
  
  ::msg::CSNtfFirstPay* temp = _impl_.firstpay_;
  _impl_.firstpay_ = nullptr;
  return temp;
}
inline ::msg::CSNtfFirstPay* CSNtfBody::_internal_mutable_firstpay() {
  
  if (_impl_.firstpay_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfFirstPay>(GetArenaForAllocation());
    _impl_.firstpay_ = p;
  }
  return _impl_.firstpay_;
}
inline ::msg::CSNtfFirstPay* CSNtfBody::mutable_firstpay() {
  ::msg::CSNtfFirstPay* _msg = _internal_mutable_firstpay();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.FirstPay)
  return _msg;
}
inline void CSNtfBody::set_allocated_firstpay(::msg::CSNtfFirstPay* firstpay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.firstpay_);
  }
  if (firstpay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(firstpay));
    if (message_arena != submessage_arena) {
      firstpay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, firstpay, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.firstpay_ = firstpay;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.FirstPay)
}

// .msg.CSNtfPlayerExpChanged ExpChanged = 582;
inline bool CSNtfBody::_internal_has_expchanged() const {
  return this != internal_default_instance() && _impl_.expchanged_ != nullptr;
}
inline bool CSNtfBody::has_expchanged() const {
  return _internal_has_expchanged();
}
inline const ::msg::CSNtfPlayerExpChanged& CSNtfBody::_internal_expchanged() const {
  const ::msg::CSNtfPlayerExpChanged* p = _impl_.expchanged_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPlayerExpChanged&>(
      ::msg::_CSNtfPlayerExpChanged_default_instance_);
}
inline const ::msg::CSNtfPlayerExpChanged& CSNtfBody::expchanged() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.ExpChanged)
  return _internal_expchanged();
}
inline void CSNtfBody::unsafe_arena_set_allocated_expchanged(
    ::msg::CSNtfPlayerExpChanged* expchanged) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expchanged_);
  }
  _impl_.expchanged_ = expchanged;
  if (expchanged) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.ExpChanged)
}
inline ::msg::CSNtfPlayerExpChanged* CSNtfBody::release_expchanged() {
  
  ::msg::CSNtfPlayerExpChanged* temp = _impl_.expchanged_;
  _impl_.expchanged_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPlayerExpChanged* CSNtfBody::unsafe_arena_release_expchanged() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.ExpChanged)
  
  ::msg::CSNtfPlayerExpChanged* temp = _impl_.expchanged_;
  _impl_.expchanged_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPlayerExpChanged* CSNtfBody::_internal_mutable_expchanged() {
  
  if (_impl_.expchanged_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPlayerExpChanged>(GetArenaForAllocation());
    _impl_.expchanged_ = p;
  }
  return _impl_.expchanged_;
}
inline ::msg::CSNtfPlayerExpChanged* CSNtfBody::mutable_expchanged() {
  ::msg::CSNtfPlayerExpChanged* _msg = _internal_mutable_expchanged();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.ExpChanged)
  return _msg;
}
inline void CSNtfBody::set_allocated_expchanged(::msg::CSNtfPlayerExpChanged* expchanged) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expchanged_);
  }
  if (expchanged) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expchanged));
    if (message_arena != submessage_arena) {
      expchanged = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expchanged, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expchanged_ = expchanged;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.ExpChanged)
}

// .msg.CSNtfTaskProgress TaskProgress = 583;
inline bool CSNtfBody::_internal_has_taskprogress() const {
  return this != internal_default_instance() && _impl_.taskprogress_ != nullptr;
}
inline bool CSNtfBody::has_taskprogress() const {
  return _internal_has_taskprogress();
}
inline const ::msg::CSNtfTaskProgress& CSNtfBody::_internal_taskprogress() const {
  const ::msg::CSNtfTaskProgress* p = _impl_.taskprogress_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfTaskProgress&>(
      ::msg::_CSNtfTaskProgress_default_instance_);
}
inline const ::msg::CSNtfTaskProgress& CSNtfBody::taskprogress() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.TaskProgress)
  return _internal_taskprogress();
}
inline void CSNtfBody::unsafe_arena_set_allocated_taskprogress(
    ::msg::CSNtfTaskProgress* taskprogress) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.taskprogress_);
  }
  _impl_.taskprogress_ = taskprogress;
  if (taskprogress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.TaskProgress)
}
inline ::msg::CSNtfTaskProgress* CSNtfBody::release_taskprogress() {
  
  ::msg::CSNtfTaskProgress* temp = _impl_.taskprogress_;
  _impl_.taskprogress_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfTaskProgress* CSNtfBody::unsafe_arena_release_taskprogress() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.TaskProgress)
  
  ::msg::CSNtfTaskProgress* temp = _impl_.taskprogress_;
  _impl_.taskprogress_ = nullptr;
  return temp;
}
inline ::msg::CSNtfTaskProgress* CSNtfBody::_internal_mutable_taskprogress() {
  
  if (_impl_.taskprogress_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfTaskProgress>(GetArenaForAllocation());
    _impl_.taskprogress_ = p;
  }
  return _impl_.taskprogress_;
}
inline ::msg::CSNtfTaskProgress* CSNtfBody::mutable_taskprogress() {
  ::msg::CSNtfTaskProgress* _msg = _internal_mutable_taskprogress();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.TaskProgress)
  return _msg;
}
inline void CSNtfBody::set_allocated_taskprogress(::msg::CSNtfTaskProgress* taskprogress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.taskprogress_);
  }
  if (taskprogress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(taskprogress));
    if (message_arena != submessage_arena) {
      taskprogress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, taskprogress, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.taskprogress_ = taskprogress;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.TaskProgress)
}

// .msg.CSNtfNewPlayerGuideEnded NewPlayerGuideEnded = 584;
inline bool CSNtfBody::_internal_has_newplayerguideended() const {
  return this != internal_default_instance() && _impl_.newplayerguideended_ != nullptr;
}
inline bool CSNtfBody::has_newplayerguideended() const {
  return _internal_has_newplayerguideended();
}
inline const ::msg::CSNtfNewPlayerGuideEnded& CSNtfBody::_internal_newplayerguideended() const {
  const ::msg::CSNtfNewPlayerGuideEnded* p = _impl_.newplayerguideended_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfNewPlayerGuideEnded&>(
      ::msg::_CSNtfNewPlayerGuideEnded_default_instance_);
}
inline const ::msg::CSNtfNewPlayerGuideEnded& CSNtfBody::newplayerguideended() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.NewPlayerGuideEnded)
  return _internal_newplayerguideended();
}
inline void CSNtfBody::unsafe_arena_set_allocated_newplayerguideended(
    ::msg::CSNtfNewPlayerGuideEnded* newplayerguideended) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newplayerguideended_);
  }
  _impl_.newplayerguideended_ = newplayerguideended;
  if (newplayerguideended) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.NewPlayerGuideEnded)
}
inline ::msg::CSNtfNewPlayerGuideEnded* CSNtfBody::release_newplayerguideended() {
  
  ::msg::CSNtfNewPlayerGuideEnded* temp = _impl_.newplayerguideended_;
  _impl_.newplayerguideended_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfNewPlayerGuideEnded* CSNtfBody::unsafe_arena_release_newplayerguideended() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.NewPlayerGuideEnded)
  
  ::msg::CSNtfNewPlayerGuideEnded* temp = _impl_.newplayerguideended_;
  _impl_.newplayerguideended_ = nullptr;
  return temp;
}
inline ::msg::CSNtfNewPlayerGuideEnded* CSNtfBody::_internal_mutable_newplayerguideended() {
  
  if (_impl_.newplayerguideended_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfNewPlayerGuideEnded>(GetArenaForAllocation());
    _impl_.newplayerguideended_ = p;
  }
  return _impl_.newplayerguideended_;
}
inline ::msg::CSNtfNewPlayerGuideEnded* CSNtfBody::mutable_newplayerguideended() {
  ::msg::CSNtfNewPlayerGuideEnded* _msg = _internal_mutable_newplayerguideended();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.NewPlayerGuideEnded)
  return _msg;
}
inline void CSNtfBody::set_allocated_newplayerguideended(::msg::CSNtfNewPlayerGuideEnded* newplayerguideended) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newplayerguideended_);
  }
  if (newplayerguideended) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newplayerguideended));
    if (message_arena != submessage_arena) {
      newplayerguideended = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newplayerguideended, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newplayerguideended_ = newplayerguideended;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.NewPlayerGuideEnded)
}

// .msg.CSNtfTasksInfo TasksInfo = 585;
inline bool CSNtfBody::_internal_has_tasksinfo() const {
  return this != internal_default_instance() && _impl_.tasksinfo_ != nullptr;
}
inline bool CSNtfBody::has_tasksinfo() const {
  return _internal_has_tasksinfo();
}
inline const ::msg::CSNtfTasksInfo& CSNtfBody::_internal_tasksinfo() const {
  const ::msg::CSNtfTasksInfo* p = _impl_.tasksinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfTasksInfo&>(
      ::msg::_CSNtfTasksInfo_default_instance_);
}
inline const ::msg::CSNtfTasksInfo& CSNtfBody::tasksinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.TasksInfo)
  return _internal_tasksinfo();
}
inline void CSNtfBody::unsafe_arena_set_allocated_tasksinfo(
    ::msg::CSNtfTasksInfo* tasksinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tasksinfo_);
  }
  _impl_.tasksinfo_ = tasksinfo;
  if (tasksinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.TasksInfo)
}
inline ::msg::CSNtfTasksInfo* CSNtfBody::release_tasksinfo() {
  
  ::msg::CSNtfTasksInfo* temp = _impl_.tasksinfo_;
  _impl_.tasksinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfTasksInfo* CSNtfBody::unsafe_arena_release_tasksinfo() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.TasksInfo)
  
  ::msg::CSNtfTasksInfo* temp = _impl_.tasksinfo_;
  _impl_.tasksinfo_ = nullptr;
  return temp;
}
inline ::msg::CSNtfTasksInfo* CSNtfBody::_internal_mutable_tasksinfo() {
  
  if (_impl_.tasksinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfTasksInfo>(GetArenaForAllocation());
    _impl_.tasksinfo_ = p;
  }
  return _impl_.tasksinfo_;
}
inline ::msg::CSNtfTasksInfo* CSNtfBody::mutable_tasksinfo() {
  ::msg::CSNtfTasksInfo* _msg = _internal_mutable_tasksinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.TasksInfo)
  return _msg;
}
inline void CSNtfBody::set_allocated_tasksinfo(::msg::CSNtfTasksInfo* tasksinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tasksinfo_);
  }
  if (tasksinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tasksinfo));
    if (message_arena != submessage_arena) {
      tasksinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tasksinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tasksinfo_ = tasksinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.TasksInfo)
}

// .msg.CSNtfPvpAwardsInfo PvpAwardsInfo = 586;
inline bool CSNtfBody::_internal_has_pvpawardsinfo() const {
  return this != internal_default_instance() && _impl_.pvpawardsinfo_ != nullptr;
}
inline bool CSNtfBody::has_pvpawardsinfo() const {
  return _internal_has_pvpawardsinfo();
}
inline const ::msg::CSNtfPvpAwardsInfo& CSNtfBody::_internal_pvpawardsinfo() const {
  const ::msg::CSNtfPvpAwardsInfo* p = _impl_.pvpawardsinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPvpAwardsInfo&>(
      ::msg::_CSNtfPvpAwardsInfo_default_instance_);
}
inline const ::msg::CSNtfPvpAwardsInfo& CSNtfBody::pvpawardsinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PvpAwardsInfo)
  return _internal_pvpawardsinfo();
}
inline void CSNtfBody::unsafe_arena_set_allocated_pvpawardsinfo(
    ::msg::CSNtfPvpAwardsInfo* pvpawardsinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpawardsinfo_);
  }
  _impl_.pvpawardsinfo_ = pvpawardsinfo;
  if (pvpawardsinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PvpAwardsInfo)
}
inline ::msg::CSNtfPvpAwardsInfo* CSNtfBody::release_pvpawardsinfo() {
  
  ::msg::CSNtfPvpAwardsInfo* temp = _impl_.pvpawardsinfo_;
  _impl_.pvpawardsinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPvpAwardsInfo* CSNtfBody::unsafe_arena_release_pvpawardsinfo() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PvpAwardsInfo)
  
  ::msg::CSNtfPvpAwardsInfo* temp = _impl_.pvpawardsinfo_;
  _impl_.pvpawardsinfo_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPvpAwardsInfo* CSNtfBody::_internal_mutable_pvpawardsinfo() {
  
  if (_impl_.pvpawardsinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPvpAwardsInfo>(GetArenaForAllocation());
    _impl_.pvpawardsinfo_ = p;
  }
  return _impl_.pvpawardsinfo_;
}
inline ::msg::CSNtfPvpAwardsInfo* CSNtfBody::mutable_pvpawardsinfo() {
  ::msg::CSNtfPvpAwardsInfo* _msg = _internal_mutable_pvpawardsinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PvpAwardsInfo)
  return _msg;
}
inline void CSNtfBody::set_allocated_pvpawardsinfo(::msg::CSNtfPvpAwardsInfo* pvpawardsinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpawardsinfo_);
  }
  if (pvpawardsinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvpawardsinfo));
    if (message_arena != submessage_arena) {
      pvpawardsinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpawardsinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpawardsinfo_ = pvpawardsinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PvpAwardsInfo)
}

// .msg.CSNtfAddAward AddAward = 587;
inline bool CSNtfBody::_internal_has_addaward() const {
  return this != internal_default_instance() && _impl_.addaward_ != nullptr;
}
inline bool CSNtfBody::has_addaward() const {
  return _internal_has_addaward();
}
inline const ::msg::CSNtfAddAward& CSNtfBody::_internal_addaward() const {
  const ::msg::CSNtfAddAward* p = _impl_.addaward_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfAddAward&>(
      ::msg::_CSNtfAddAward_default_instance_);
}
inline const ::msg::CSNtfAddAward& CSNtfBody::addaward() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.AddAward)
  return _internal_addaward();
}
inline void CSNtfBody::unsafe_arena_set_allocated_addaward(
    ::msg::CSNtfAddAward* addaward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.addaward_);
  }
  _impl_.addaward_ = addaward;
  if (addaward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.AddAward)
}
inline ::msg::CSNtfAddAward* CSNtfBody::release_addaward() {
  
  ::msg::CSNtfAddAward* temp = _impl_.addaward_;
  _impl_.addaward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfAddAward* CSNtfBody::unsafe_arena_release_addaward() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.AddAward)
  
  ::msg::CSNtfAddAward* temp = _impl_.addaward_;
  _impl_.addaward_ = nullptr;
  return temp;
}
inline ::msg::CSNtfAddAward* CSNtfBody::_internal_mutable_addaward() {
  
  if (_impl_.addaward_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfAddAward>(GetArenaForAllocation());
    _impl_.addaward_ = p;
  }
  return _impl_.addaward_;
}
inline ::msg::CSNtfAddAward* CSNtfBody::mutable_addaward() {
  ::msg::CSNtfAddAward* _msg = _internal_mutable_addaward();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.AddAward)
  return _msg;
}
inline void CSNtfBody::set_allocated_addaward(::msg::CSNtfAddAward* addaward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.addaward_);
  }
  if (addaward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(addaward));
    if (message_arena != submessage_arena) {
      addaward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addaward, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.addaward_ = addaward;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.AddAward)
}

// .msg.CSNtfLimitRefresh LimitRefresh = 588;
inline bool CSNtfBody::_internal_has_limitrefresh() const {
  return this != internal_default_instance() && _impl_.limitrefresh_ != nullptr;
}
inline bool CSNtfBody::has_limitrefresh() const {
  return _internal_has_limitrefresh();
}
inline const ::msg::CSNtfLimitRefresh& CSNtfBody::_internal_limitrefresh() const {
  const ::msg::CSNtfLimitRefresh* p = _impl_.limitrefresh_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfLimitRefresh&>(
      ::msg::_CSNtfLimitRefresh_default_instance_);
}
inline const ::msg::CSNtfLimitRefresh& CSNtfBody::limitrefresh() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.LimitRefresh)
  return _internal_limitrefresh();
}
inline void CSNtfBody::unsafe_arena_set_allocated_limitrefresh(
    ::msg::CSNtfLimitRefresh* limitrefresh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.limitrefresh_);
  }
  _impl_.limitrefresh_ = limitrefresh;
  if (limitrefresh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.LimitRefresh)
}
inline ::msg::CSNtfLimitRefresh* CSNtfBody::release_limitrefresh() {
  
  ::msg::CSNtfLimitRefresh* temp = _impl_.limitrefresh_;
  _impl_.limitrefresh_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfLimitRefresh* CSNtfBody::unsafe_arena_release_limitrefresh() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.LimitRefresh)
  
  ::msg::CSNtfLimitRefresh* temp = _impl_.limitrefresh_;
  _impl_.limitrefresh_ = nullptr;
  return temp;
}
inline ::msg::CSNtfLimitRefresh* CSNtfBody::_internal_mutable_limitrefresh() {
  
  if (_impl_.limitrefresh_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfLimitRefresh>(GetArenaForAllocation());
    _impl_.limitrefresh_ = p;
  }
  return _impl_.limitrefresh_;
}
inline ::msg::CSNtfLimitRefresh* CSNtfBody::mutable_limitrefresh() {
  ::msg::CSNtfLimitRefresh* _msg = _internal_mutable_limitrefresh();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.LimitRefresh)
  return _msg;
}
inline void CSNtfBody::set_allocated_limitrefresh(::msg::CSNtfLimitRefresh* limitrefresh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.limitrefresh_);
  }
  if (limitrefresh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limitrefresh));
    if (message_arena != submessage_arena) {
      limitrefresh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limitrefresh, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.limitrefresh_ = limitrefresh;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.LimitRefresh)
}

// .msg.CSNtfUpdateNotice UpdateNotice = 589;
inline bool CSNtfBody::_internal_has_updatenotice() const {
  return this != internal_default_instance() && _impl_.updatenotice_ != nullptr;
}
inline bool CSNtfBody::has_updatenotice() const {
  return _internal_has_updatenotice();
}
inline const ::msg::CSNtfUpdateNotice& CSNtfBody::_internal_updatenotice() const {
  const ::msg::CSNtfUpdateNotice* p = _impl_.updatenotice_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfUpdateNotice&>(
      ::msg::_CSNtfUpdateNotice_default_instance_);
}
inline const ::msg::CSNtfUpdateNotice& CSNtfBody::updatenotice() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.UpdateNotice)
  return _internal_updatenotice();
}
inline void CSNtfBody::unsafe_arena_set_allocated_updatenotice(
    ::msg::CSNtfUpdateNotice* updatenotice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatenotice_);
  }
  _impl_.updatenotice_ = updatenotice;
  if (updatenotice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.UpdateNotice)
}
inline ::msg::CSNtfUpdateNotice* CSNtfBody::release_updatenotice() {
  
  ::msg::CSNtfUpdateNotice* temp = _impl_.updatenotice_;
  _impl_.updatenotice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfUpdateNotice* CSNtfBody::unsafe_arena_release_updatenotice() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.UpdateNotice)
  
  ::msg::CSNtfUpdateNotice* temp = _impl_.updatenotice_;
  _impl_.updatenotice_ = nullptr;
  return temp;
}
inline ::msg::CSNtfUpdateNotice* CSNtfBody::_internal_mutable_updatenotice() {
  
  if (_impl_.updatenotice_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfUpdateNotice>(GetArenaForAllocation());
    _impl_.updatenotice_ = p;
  }
  return _impl_.updatenotice_;
}
inline ::msg::CSNtfUpdateNotice* CSNtfBody::mutable_updatenotice() {
  ::msg::CSNtfUpdateNotice* _msg = _internal_mutable_updatenotice();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.UpdateNotice)
  return _msg;
}
inline void CSNtfBody::set_allocated_updatenotice(::msg::CSNtfUpdateNotice* updatenotice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatenotice_);
  }
  if (updatenotice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatenotice));
    if (message_arena != submessage_arena) {
      updatenotice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatenotice, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updatenotice_ = updatenotice;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.UpdateNotice)
}

// .msg.CSNtfUpdatePveChallengeCount UpdatePveChallengeCount = 590;
inline bool CSNtfBody::_internal_has_updatepvechallengecount() const {
  return this != internal_default_instance() && _impl_.updatepvechallengecount_ != nullptr;
}
inline bool CSNtfBody::has_updatepvechallengecount() const {
  return _internal_has_updatepvechallengecount();
}
inline const ::msg::CSNtfUpdatePveChallengeCount& CSNtfBody::_internal_updatepvechallengecount() const {
  const ::msg::CSNtfUpdatePveChallengeCount* p = _impl_.updatepvechallengecount_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfUpdatePveChallengeCount&>(
      ::msg::_CSNtfUpdatePveChallengeCount_default_instance_);
}
inline const ::msg::CSNtfUpdatePveChallengeCount& CSNtfBody::updatepvechallengecount() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.UpdatePveChallengeCount)
  return _internal_updatepvechallengecount();
}
inline void CSNtfBody::unsafe_arena_set_allocated_updatepvechallengecount(
    ::msg::CSNtfUpdatePveChallengeCount* updatepvechallengecount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatepvechallengecount_);
  }
  _impl_.updatepvechallengecount_ = updatepvechallengecount;
  if (updatepvechallengecount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.UpdatePveChallengeCount)
}
inline ::msg::CSNtfUpdatePveChallengeCount* CSNtfBody::release_updatepvechallengecount() {
  
  ::msg::CSNtfUpdatePveChallengeCount* temp = _impl_.updatepvechallengecount_;
  _impl_.updatepvechallengecount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfUpdatePveChallengeCount* CSNtfBody::unsafe_arena_release_updatepvechallengecount() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.UpdatePveChallengeCount)
  
  ::msg::CSNtfUpdatePveChallengeCount* temp = _impl_.updatepvechallengecount_;
  _impl_.updatepvechallengecount_ = nullptr;
  return temp;
}
inline ::msg::CSNtfUpdatePveChallengeCount* CSNtfBody::_internal_mutable_updatepvechallengecount() {
  
  if (_impl_.updatepvechallengecount_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfUpdatePveChallengeCount>(GetArenaForAllocation());
    _impl_.updatepvechallengecount_ = p;
  }
  return _impl_.updatepvechallengecount_;
}
inline ::msg::CSNtfUpdatePveChallengeCount* CSNtfBody::mutable_updatepvechallengecount() {
  ::msg::CSNtfUpdatePveChallengeCount* _msg = _internal_mutable_updatepvechallengecount();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.UpdatePveChallengeCount)
  return _msg;
}
inline void CSNtfBody::set_allocated_updatepvechallengecount(::msg::CSNtfUpdatePveChallengeCount* updatepvechallengecount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatepvechallengecount_);
  }
  if (updatepvechallengecount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatepvechallengecount));
    if (message_arena != submessage_arena) {
      updatepvechallengecount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatepvechallengecount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updatepvechallengecount_ = updatepvechallengecount;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.UpdatePveChallengeCount)
}

// .msg.CSNtfAdDiscount AdDiscount = 591;
inline bool CSNtfBody::_internal_has_addiscount() const {
  return this != internal_default_instance() && _impl_.addiscount_ != nullptr;
}
inline bool CSNtfBody::has_addiscount() const {
  return _internal_has_addiscount();
}
inline const ::msg::CSNtfAdDiscount& CSNtfBody::_internal_addiscount() const {
  const ::msg::CSNtfAdDiscount* p = _impl_.addiscount_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfAdDiscount&>(
      ::msg::_CSNtfAdDiscount_default_instance_);
}
inline const ::msg::CSNtfAdDiscount& CSNtfBody::addiscount() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.AdDiscount)
  return _internal_addiscount();
}
inline void CSNtfBody::unsafe_arena_set_allocated_addiscount(
    ::msg::CSNtfAdDiscount* addiscount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.addiscount_);
  }
  _impl_.addiscount_ = addiscount;
  if (addiscount) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.AdDiscount)
}
inline ::msg::CSNtfAdDiscount* CSNtfBody::release_addiscount() {
  
  ::msg::CSNtfAdDiscount* temp = _impl_.addiscount_;
  _impl_.addiscount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfAdDiscount* CSNtfBody::unsafe_arena_release_addiscount() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.AdDiscount)
  
  ::msg::CSNtfAdDiscount* temp = _impl_.addiscount_;
  _impl_.addiscount_ = nullptr;
  return temp;
}
inline ::msg::CSNtfAdDiscount* CSNtfBody::_internal_mutable_addiscount() {
  
  if (_impl_.addiscount_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfAdDiscount>(GetArenaForAllocation());
    _impl_.addiscount_ = p;
  }
  return _impl_.addiscount_;
}
inline ::msg::CSNtfAdDiscount* CSNtfBody::mutable_addiscount() {
  ::msg::CSNtfAdDiscount* _msg = _internal_mutable_addiscount();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.AdDiscount)
  return _msg;
}
inline void CSNtfBody::set_allocated_addiscount(::msg::CSNtfAdDiscount* addiscount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.addiscount_);
  }
  if (addiscount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(addiscount));
    if (message_arena != submessage_arena) {
      addiscount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addiscount, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.addiscount_ = addiscount;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.AdDiscount)
}

// .msg.CSNtfCalcMmr CalcMmr = 592;
inline bool CSNtfBody::_internal_has_calcmmr() const {
  return this != internal_default_instance() && _impl_.calcmmr_ != nullptr;
}
inline bool CSNtfBody::has_calcmmr() const {
  return _internal_has_calcmmr();
}
inline const ::msg::CSNtfCalcMmr& CSNtfBody::_internal_calcmmr() const {
  const ::msg::CSNtfCalcMmr* p = _impl_.calcmmr_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfCalcMmr&>(
      ::msg::_CSNtfCalcMmr_default_instance_);
}
inline const ::msg::CSNtfCalcMmr& CSNtfBody::calcmmr() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.CalcMmr)
  return _internal_calcmmr();
}
inline void CSNtfBody::unsafe_arena_set_allocated_calcmmr(
    ::msg::CSNtfCalcMmr* calcmmr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.calcmmr_);
  }
  _impl_.calcmmr_ = calcmmr;
  if (calcmmr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.CalcMmr)
}
inline ::msg::CSNtfCalcMmr* CSNtfBody::release_calcmmr() {
  
  ::msg::CSNtfCalcMmr* temp = _impl_.calcmmr_;
  _impl_.calcmmr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfCalcMmr* CSNtfBody::unsafe_arena_release_calcmmr() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.CalcMmr)
  
  ::msg::CSNtfCalcMmr* temp = _impl_.calcmmr_;
  _impl_.calcmmr_ = nullptr;
  return temp;
}
inline ::msg::CSNtfCalcMmr* CSNtfBody::_internal_mutable_calcmmr() {
  
  if (_impl_.calcmmr_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfCalcMmr>(GetArenaForAllocation());
    _impl_.calcmmr_ = p;
  }
  return _impl_.calcmmr_;
}
inline ::msg::CSNtfCalcMmr* CSNtfBody::mutable_calcmmr() {
  ::msg::CSNtfCalcMmr* _msg = _internal_mutable_calcmmr();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.CalcMmr)
  return _msg;
}
inline void CSNtfBody::set_allocated_calcmmr(::msg::CSNtfCalcMmr* calcmmr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.calcmmr_);
  }
  if (calcmmr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calcmmr));
    if (message_arena != submessage_arena) {
      calcmmr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calcmmr, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.calcmmr_ = calcmmr;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.CalcMmr)
}

// .msg.CSNtfBag Bag = 593;
inline bool CSNtfBody::_internal_has_bag() const {
  return this != internal_default_instance() && _impl_.bag_ != nullptr;
}
inline bool CSNtfBody::has_bag() const {
  return _internal_has_bag();
}
inline const ::msg::CSNtfBag& CSNtfBody::_internal_bag() const {
  const ::msg::CSNtfBag* p = _impl_.bag_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfBag&>(
      ::msg::_CSNtfBag_default_instance_);
}
inline const ::msg::CSNtfBag& CSNtfBody::bag() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.Bag)
  return _internal_bag();
}
inline void CSNtfBody::unsafe_arena_set_allocated_bag(
    ::msg::CSNtfBag* bag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bag_);
  }
  _impl_.bag_ = bag;
  if (bag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.Bag)
}
inline ::msg::CSNtfBag* CSNtfBody::release_bag() {
  
  ::msg::CSNtfBag* temp = _impl_.bag_;
  _impl_.bag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfBag* CSNtfBody::unsafe_arena_release_bag() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.Bag)
  
  ::msg::CSNtfBag* temp = _impl_.bag_;
  _impl_.bag_ = nullptr;
  return temp;
}
inline ::msg::CSNtfBag* CSNtfBody::_internal_mutable_bag() {
  
  if (_impl_.bag_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfBag>(GetArenaForAllocation());
    _impl_.bag_ = p;
  }
  return _impl_.bag_;
}
inline ::msg::CSNtfBag* CSNtfBody::mutable_bag() {
  ::msg::CSNtfBag* _msg = _internal_mutable_bag();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.Bag)
  return _msg;
}
inline void CSNtfBody::set_allocated_bag(::msg::CSNtfBag* bag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bag_);
  }
  if (bag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bag));
    if (message_arena != submessage_arena) {
      bag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bag, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bag_ = bag;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.Bag)
}

// .msg.CSNtfItemAttributes ItemAttributes = 594;
inline bool CSNtfBody::_internal_has_itemattributes() const {
  return this != internal_default_instance() && _impl_.itemattributes_ != nullptr;
}
inline bool CSNtfBody::has_itemattributes() const {
  return _internal_has_itemattributes();
}
inline const ::msg::CSNtfItemAttributes& CSNtfBody::_internal_itemattributes() const {
  const ::msg::CSNtfItemAttributes* p = _impl_.itemattributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfItemAttributes&>(
      ::msg::_CSNtfItemAttributes_default_instance_);
}
inline const ::msg::CSNtfItemAttributes& CSNtfBody::itemattributes() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.ItemAttributes)
  return _internal_itemattributes();
}
inline void CSNtfBody::unsafe_arena_set_allocated_itemattributes(
    ::msg::CSNtfItemAttributes* itemattributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.itemattributes_);
  }
  _impl_.itemattributes_ = itemattributes;
  if (itemattributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.ItemAttributes)
}
inline ::msg::CSNtfItemAttributes* CSNtfBody::release_itemattributes() {
  
  ::msg::CSNtfItemAttributes* temp = _impl_.itemattributes_;
  _impl_.itemattributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfItemAttributes* CSNtfBody::unsafe_arena_release_itemattributes() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.ItemAttributes)
  
  ::msg::CSNtfItemAttributes* temp = _impl_.itemattributes_;
  _impl_.itemattributes_ = nullptr;
  return temp;
}
inline ::msg::CSNtfItemAttributes* CSNtfBody::_internal_mutable_itemattributes() {
  
  if (_impl_.itemattributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfItemAttributes>(GetArenaForAllocation());
    _impl_.itemattributes_ = p;
  }
  return _impl_.itemattributes_;
}
inline ::msg::CSNtfItemAttributes* CSNtfBody::mutable_itemattributes() {
  ::msg::CSNtfItemAttributes* _msg = _internal_mutable_itemattributes();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.ItemAttributes)
  return _msg;
}
inline void CSNtfBody::set_allocated_itemattributes(::msg::CSNtfItemAttributes* itemattributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.itemattributes_);
  }
  if (itemattributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(itemattributes));
    if (message_arena != submessage_arena) {
      itemattributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, itemattributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.itemattributes_ = itemattributes;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.ItemAttributes)
}

// .msg.CSNtfPvpAffixTrigger PVPAffixTrigger = 595;
inline bool CSNtfBody::_internal_has_pvpaffixtrigger() const {
  return this != internal_default_instance() && _impl_.pvpaffixtrigger_ != nullptr;
}
inline bool CSNtfBody::has_pvpaffixtrigger() const {
  return _internal_has_pvpaffixtrigger();
}
inline const ::msg::CSNtfPvpAffixTrigger& CSNtfBody::_internal_pvpaffixtrigger() const {
  const ::msg::CSNtfPvpAffixTrigger* p = _impl_.pvpaffixtrigger_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPvpAffixTrigger&>(
      ::msg::_CSNtfPvpAffixTrigger_default_instance_);
}
inline const ::msg::CSNtfPvpAffixTrigger& CSNtfBody::pvpaffixtrigger() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PVPAffixTrigger)
  return _internal_pvpaffixtrigger();
}
inline void CSNtfBody::unsafe_arena_set_allocated_pvpaffixtrigger(
    ::msg::CSNtfPvpAffixTrigger* pvpaffixtrigger) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpaffixtrigger_);
  }
  _impl_.pvpaffixtrigger_ = pvpaffixtrigger;
  if (pvpaffixtrigger) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PVPAffixTrigger)
}
inline ::msg::CSNtfPvpAffixTrigger* CSNtfBody::release_pvpaffixtrigger() {
  
  ::msg::CSNtfPvpAffixTrigger* temp = _impl_.pvpaffixtrigger_;
  _impl_.pvpaffixtrigger_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPvpAffixTrigger* CSNtfBody::unsafe_arena_release_pvpaffixtrigger() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PVPAffixTrigger)
  
  ::msg::CSNtfPvpAffixTrigger* temp = _impl_.pvpaffixtrigger_;
  _impl_.pvpaffixtrigger_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPvpAffixTrigger* CSNtfBody::_internal_mutable_pvpaffixtrigger() {
  
  if (_impl_.pvpaffixtrigger_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPvpAffixTrigger>(GetArenaForAllocation());
    _impl_.pvpaffixtrigger_ = p;
  }
  return _impl_.pvpaffixtrigger_;
}
inline ::msg::CSNtfPvpAffixTrigger* CSNtfBody::mutable_pvpaffixtrigger() {
  ::msg::CSNtfPvpAffixTrigger* _msg = _internal_mutable_pvpaffixtrigger();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PVPAffixTrigger)
  return _msg;
}
inline void CSNtfBody::set_allocated_pvpaffixtrigger(::msg::CSNtfPvpAffixTrigger* pvpaffixtrigger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpaffixtrigger_);
  }
  if (pvpaffixtrigger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvpaffixtrigger));
    if (message_arena != submessage_arena) {
      pvpaffixtrigger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpaffixtrigger, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpaffixtrigger_ = pvpaffixtrigger;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PVPAffixTrigger)
}

// .msg.CSNtfUpdatePvpData UpdatePvpData = 596;
inline bool CSNtfBody::_internal_has_updatepvpdata() const {
  return this != internal_default_instance() && _impl_.updatepvpdata_ != nullptr;
}
inline bool CSNtfBody::has_updatepvpdata() const {
  return _internal_has_updatepvpdata();
}
inline const ::msg::CSNtfUpdatePvpData& CSNtfBody::_internal_updatepvpdata() const {
  const ::msg::CSNtfUpdatePvpData* p = _impl_.updatepvpdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfUpdatePvpData&>(
      ::msg::_CSNtfUpdatePvpData_default_instance_);
}
inline const ::msg::CSNtfUpdatePvpData& CSNtfBody::updatepvpdata() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.UpdatePvpData)
  return _internal_updatepvpdata();
}
inline void CSNtfBody::unsafe_arena_set_allocated_updatepvpdata(
    ::msg::CSNtfUpdatePvpData* updatepvpdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatepvpdata_);
  }
  _impl_.updatepvpdata_ = updatepvpdata;
  if (updatepvpdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.UpdatePvpData)
}
inline ::msg::CSNtfUpdatePvpData* CSNtfBody::release_updatepvpdata() {
  
  ::msg::CSNtfUpdatePvpData* temp = _impl_.updatepvpdata_;
  _impl_.updatepvpdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfUpdatePvpData* CSNtfBody::unsafe_arena_release_updatepvpdata() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.UpdatePvpData)
  
  ::msg::CSNtfUpdatePvpData* temp = _impl_.updatepvpdata_;
  _impl_.updatepvpdata_ = nullptr;
  return temp;
}
inline ::msg::CSNtfUpdatePvpData* CSNtfBody::_internal_mutable_updatepvpdata() {
  
  if (_impl_.updatepvpdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfUpdatePvpData>(GetArenaForAllocation());
    _impl_.updatepvpdata_ = p;
  }
  return _impl_.updatepvpdata_;
}
inline ::msg::CSNtfUpdatePvpData* CSNtfBody::mutable_updatepvpdata() {
  ::msg::CSNtfUpdatePvpData* _msg = _internal_mutable_updatepvpdata();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.UpdatePvpData)
  return _msg;
}
inline void CSNtfBody::set_allocated_updatepvpdata(::msg::CSNtfUpdatePvpData* updatepvpdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatepvpdata_);
  }
  if (updatepvpdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updatepvpdata));
    if (message_arena != submessage_arena) {
      updatepvpdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatepvpdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updatepvpdata_ = updatepvpdata;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.UpdatePvpData)
}

// .msg.CSNtfUpgradePassport UpgradePassport = 597;
inline bool CSNtfBody::_internal_has_upgradepassport() const {
  return this != internal_default_instance() && _impl_.upgradepassport_ != nullptr;
}
inline bool CSNtfBody::has_upgradepassport() const {
  return _internal_has_upgradepassport();
}
inline const ::msg::CSNtfUpgradePassport& CSNtfBody::_internal_upgradepassport() const {
  const ::msg::CSNtfUpgradePassport* p = _impl_.upgradepassport_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfUpgradePassport&>(
      ::msg::_CSNtfUpgradePassport_default_instance_);
}
inline const ::msg::CSNtfUpgradePassport& CSNtfBody::upgradepassport() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.UpgradePassport)
  return _internal_upgradepassport();
}
inline void CSNtfBody::unsafe_arena_set_allocated_upgradepassport(
    ::msg::CSNtfUpgradePassport* upgradepassport) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upgradepassport_);
  }
  _impl_.upgradepassport_ = upgradepassport;
  if (upgradepassport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.UpgradePassport)
}
inline ::msg::CSNtfUpgradePassport* CSNtfBody::release_upgradepassport() {
  
  ::msg::CSNtfUpgradePassport* temp = _impl_.upgradepassport_;
  _impl_.upgradepassport_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfUpgradePassport* CSNtfBody::unsafe_arena_release_upgradepassport() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.UpgradePassport)
  
  ::msg::CSNtfUpgradePassport* temp = _impl_.upgradepassport_;
  _impl_.upgradepassport_ = nullptr;
  return temp;
}
inline ::msg::CSNtfUpgradePassport* CSNtfBody::_internal_mutable_upgradepassport() {
  
  if (_impl_.upgradepassport_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfUpgradePassport>(GetArenaForAllocation());
    _impl_.upgradepassport_ = p;
  }
  return _impl_.upgradepassport_;
}
inline ::msg::CSNtfUpgradePassport* CSNtfBody::mutable_upgradepassport() {
  ::msg::CSNtfUpgradePassport* _msg = _internal_mutable_upgradepassport();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.UpgradePassport)
  return _msg;
}
inline void CSNtfBody::set_allocated_upgradepassport(::msg::CSNtfUpgradePassport* upgradepassport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upgradepassport_);
  }
  if (upgradepassport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upgradepassport));
    if (message_arena != submessage_arena) {
      upgradepassport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upgradepassport, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.upgradepassport_ = upgradepassport;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.UpgradePassport)
}

// .msg.CSNtfUpdateTeamDeBuff UpdateTeamDeBuff = 598;
inline bool CSNtfBody::_internal_has_updateteamdebuff() const {
  return this != internal_default_instance() && _impl_.updateteamdebuff_ != nullptr;
}
inline bool CSNtfBody::has_updateteamdebuff() const {
  return _internal_has_updateteamdebuff();
}
inline const ::msg::CSNtfUpdateTeamDeBuff& CSNtfBody::_internal_updateteamdebuff() const {
  const ::msg::CSNtfUpdateTeamDeBuff* p = _impl_.updateteamdebuff_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfUpdateTeamDeBuff&>(
      ::msg::_CSNtfUpdateTeamDeBuff_default_instance_);
}
inline const ::msg::CSNtfUpdateTeamDeBuff& CSNtfBody::updateteamdebuff() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.UpdateTeamDeBuff)
  return _internal_updateteamdebuff();
}
inline void CSNtfBody::unsafe_arena_set_allocated_updateteamdebuff(
    ::msg::CSNtfUpdateTeamDeBuff* updateteamdebuff) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updateteamdebuff_);
  }
  _impl_.updateteamdebuff_ = updateteamdebuff;
  if (updateteamdebuff) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.UpdateTeamDeBuff)
}
inline ::msg::CSNtfUpdateTeamDeBuff* CSNtfBody::release_updateteamdebuff() {
  
  ::msg::CSNtfUpdateTeamDeBuff* temp = _impl_.updateteamdebuff_;
  _impl_.updateteamdebuff_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfUpdateTeamDeBuff* CSNtfBody::unsafe_arena_release_updateteamdebuff() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.UpdateTeamDeBuff)
  
  ::msg::CSNtfUpdateTeamDeBuff* temp = _impl_.updateteamdebuff_;
  _impl_.updateteamdebuff_ = nullptr;
  return temp;
}
inline ::msg::CSNtfUpdateTeamDeBuff* CSNtfBody::_internal_mutable_updateteamdebuff() {
  
  if (_impl_.updateteamdebuff_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfUpdateTeamDeBuff>(GetArenaForAllocation());
    _impl_.updateteamdebuff_ = p;
  }
  return _impl_.updateteamdebuff_;
}
inline ::msg::CSNtfUpdateTeamDeBuff* CSNtfBody::mutable_updateteamdebuff() {
  ::msg::CSNtfUpdateTeamDeBuff* _msg = _internal_mutable_updateteamdebuff();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.UpdateTeamDeBuff)
  return _msg;
}
inline void CSNtfBody::set_allocated_updateteamdebuff(::msg::CSNtfUpdateTeamDeBuff* updateteamdebuff) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updateteamdebuff_);
  }
  if (updateteamdebuff) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updateteamdebuff));
    if (message_arena != submessage_arena) {
      updateteamdebuff = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updateteamdebuff, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.updateteamdebuff_ = updateteamdebuff;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.UpdateTeamDeBuff)
}

// .msg.CSNtfPveEval PveEval = 599;
inline bool CSNtfBody::_internal_has_pveeval() const {
  return this != internal_default_instance() && _impl_.pveeval_ != nullptr;
}
inline bool CSNtfBody::has_pveeval() const {
  return _internal_has_pveeval();
}
inline const ::msg::CSNtfPveEval& CSNtfBody::_internal_pveeval() const {
  const ::msg::CSNtfPveEval* p = _impl_.pveeval_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPveEval&>(
      ::msg::_CSNtfPveEval_default_instance_);
}
inline const ::msg::CSNtfPveEval& CSNtfBody::pveeval() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.PveEval)
  return _internal_pveeval();
}
inline void CSNtfBody::unsafe_arena_set_allocated_pveeval(
    ::msg::CSNtfPveEval* pveeval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pveeval_);
  }
  _impl_.pveeval_ = pveeval;
  if (pveeval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.PveEval)
}
inline ::msg::CSNtfPveEval* CSNtfBody::release_pveeval() {
  
  ::msg::CSNtfPveEval* temp = _impl_.pveeval_;
  _impl_.pveeval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPveEval* CSNtfBody::unsafe_arena_release_pveeval() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.PveEval)
  
  ::msg::CSNtfPveEval* temp = _impl_.pveeval_;
  _impl_.pveeval_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPveEval* CSNtfBody::_internal_mutable_pveeval() {
  
  if (_impl_.pveeval_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPveEval>(GetArenaForAllocation());
    _impl_.pveeval_ = p;
  }
  return _impl_.pveeval_;
}
inline ::msg::CSNtfPveEval* CSNtfBody::mutable_pveeval() {
  ::msg::CSNtfPveEval* _msg = _internal_mutable_pveeval();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.PveEval)
  return _msg;
}
inline void CSNtfBody::set_allocated_pveeval(::msg::CSNtfPveEval* pveeval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pveeval_);
  }
  if (pveeval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pveeval));
    if (message_arena != submessage_arena) {
      pveeval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pveeval, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pveeval_ = pveeval;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.PveEval)
}

// .msg.CSNtfUnlockCardGroup UnlockCardGroup = 600;
inline bool CSNtfBody::_internal_has_unlockcardgroup() const {
  return this != internal_default_instance() && _impl_.unlockcardgroup_ != nullptr;
}
inline bool CSNtfBody::has_unlockcardgroup() const {
  return _internal_has_unlockcardgroup();
}
inline const ::msg::CSNtfUnlockCardGroup& CSNtfBody::_internal_unlockcardgroup() const {
  const ::msg::CSNtfUnlockCardGroup* p = _impl_.unlockcardgroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfUnlockCardGroup&>(
      ::msg::_CSNtfUnlockCardGroup_default_instance_);
}
inline const ::msg::CSNtfUnlockCardGroup& CSNtfBody::unlockcardgroup() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.UnlockCardGroup)
  return _internal_unlockcardgroup();
}
inline void CSNtfBody::unsafe_arena_set_allocated_unlockcardgroup(
    ::msg::CSNtfUnlockCardGroup* unlockcardgroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unlockcardgroup_);
  }
  _impl_.unlockcardgroup_ = unlockcardgroup;
  if (unlockcardgroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.UnlockCardGroup)
}
inline ::msg::CSNtfUnlockCardGroup* CSNtfBody::release_unlockcardgroup() {
  
  ::msg::CSNtfUnlockCardGroup* temp = _impl_.unlockcardgroup_;
  _impl_.unlockcardgroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfUnlockCardGroup* CSNtfBody::unsafe_arena_release_unlockcardgroup() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.UnlockCardGroup)
  
  ::msg::CSNtfUnlockCardGroup* temp = _impl_.unlockcardgroup_;
  _impl_.unlockcardgroup_ = nullptr;
  return temp;
}
inline ::msg::CSNtfUnlockCardGroup* CSNtfBody::_internal_mutable_unlockcardgroup() {
  
  if (_impl_.unlockcardgroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfUnlockCardGroup>(GetArenaForAllocation());
    _impl_.unlockcardgroup_ = p;
  }
  return _impl_.unlockcardgroup_;
}
inline ::msg::CSNtfUnlockCardGroup* CSNtfBody::mutable_unlockcardgroup() {
  ::msg::CSNtfUnlockCardGroup* _msg = _internal_mutable_unlockcardgroup();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.UnlockCardGroup)
  return _msg;
}
inline void CSNtfBody::set_allocated_unlockcardgroup(::msg::CSNtfUnlockCardGroup* unlockcardgroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unlockcardgroup_);
  }
  if (unlockcardgroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unlockcardgroup));
    if (message_arena != submessage_arena) {
      unlockcardgroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unlockcardgroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unlockcardgroup_ = unlockcardgroup;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.UnlockCardGroup)
}

// .msg.CSNtfCustomPveActivity CustomPveActivity = 601;
inline bool CSNtfBody::_internal_has_custompveactivity() const {
  return this != internal_default_instance() && _impl_.custompveactivity_ != nullptr;
}
inline bool CSNtfBody::has_custompveactivity() const {
  return _internal_has_custompveactivity();
}
inline const ::msg::CSNtfCustomPveActivity& CSNtfBody::_internal_custompveactivity() const {
  const ::msg::CSNtfCustomPveActivity* p = _impl_.custompveactivity_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfCustomPveActivity&>(
      ::msg::_CSNtfCustomPveActivity_default_instance_);
}
inline const ::msg::CSNtfCustomPveActivity& CSNtfBody::custompveactivity() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.CustomPveActivity)
  return _internal_custompveactivity();
}
inline void CSNtfBody::unsafe_arena_set_allocated_custompveactivity(
    ::msg::CSNtfCustomPveActivity* custompveactivity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custompveactivity_);
  }
  _impl_.custompveactivity_ = custompveactivity;
  if (custompveactivity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.CustomPveActivity)
}
inline ::msg::CSNtfCustomPveActivity* CSNtfBody::release_custompveactivity() {
  
  ::msg::CSNtfCustomPveActivity* temp = _impl_.custompveactivity_;
  _impl_.custompveactivity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfCustomPveActivity* CSNtfBody::unsafe_arena_release_custompveactivity() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.CustomPveActivity)
  
  ::msg::CSNtfCustomPveActivity* temp = _impl_.custompveactivity_;
  _impl_.custompveactivity_ = nullptr;
  return temp;
}
inline ::msg::CSNtfCustomPveActivity* CSNtfBody::_internal_mutable_custompveactivity() {
  
  if (_impl_.custompveactivity_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfCustomPveActivity>(GetArenaForAllocation());
    _impl_.custompveactivity_ = p;
  }
  return _impl_.custompveactivity_;
}
inline ::msg::CSNtfCustomPveActivity* CSNtfBody::mutable_custompveactivity() {
  ::msg::CSNtfCustomPveActivity* _msg = _internal_mutable_custompveactivity();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.CustomPveActivity)
  return _msg;
}
inline void CSNtfBody::set_allocated_custompveactivity(::msg::CSNtfCustomPveActivity* custompveactivity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custompveactivity_);
  }
  if (custompveactivity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custompveactivity));
    if (message_arena != submessage_arena) {
      custompveactivity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custompveactivity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.custompveactivity_ = custompveactivity;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.CustomPveActivity)
}

// .msg.CSNtfGmBan CSNtfGmBan = 602;
inline bool CSNtfBody::_internal_has_csntfgmban() const {
  return this != internal_default_instance() && _impl_.csntfgmban_ != nullptr;
}
inline bool CSNtfBody::has_csntfgmban() const {
  return _internal_has_csntfgmban();
}
inline const ::msg::CSNtfGmBan& CSNtfBody::_internal_csntfgmban() const {
  const ::msg::CSNtfGmBan* p = _impl_.csntfgmban_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfGmBan&>(
      ::msg::_CSNtfGmBan_default_instance_);
}
inline const ::msg::CSNtfGmBan& CSNtfBody::csntfgmban() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.CSNtfGmBan)
  return _internal_csntfgmban();
}
inline void CSNtfBody::unsafe_arena_set_allocated_csntfgmban(
    ::msg::CSNtfGmBan* csntfgmban) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.csntfgmban_);
  }
  _impl_.csntfgmban_ = csntfgmban;
  if (csntfgmban) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.CSNtfGmBan)
}
inline ::msg::CSNtfGmBan* CSNtfBody::release_csntfgmban() {
  
  ::msg::CSNtfGmBan* temp = _impl_.csntfgmban_;
  _impl_.csntfgmban_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfGmBan* CSNtfBody::unsafe_arena_release_csntfgmban() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.CSNtfGmBan)
  
  ::msg::CSNtfGmBan* temp = _impl_.csntfgmban_;
  _impl_.csntfgmban_ = nullptr;
  return temp;
}
inline ::msg::CSNtfGmBan* CSNtfBody::_internal_mutable_csntfgmban() {
  
  if (_impl_.csntfgmban_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfGmBan>(GetArenaForAllocation());
    _impl_.csntfgmban_ = p;
  }
  return _impl_.csntfgmban_;
}
inline ::msg::CSNtfGmBan* CSNtfBody::mutable_csntfgmban() {
  ::msg::CSNtfGmBan* _msg = _internal_mutable_csntfgmban();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.CSNtfGmBan)
  return _msg;
}
inline void CSNtfBody::set_allocated_csntfgmban(::msg::CSNtfGmBan* csntfgmban) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.csntfgmban_);
  }
  if (csntfgmban) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(csntfgmban));
    if (message_arena != submessage_arena) {
      csntfgmban = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, csntfgmban, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.csntfgmban_ = csntfgmban;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.CSNtfGmBan)
}

// .msg.CSNtfTDPlayerInfo TDPlayerInfo = 603;
inline bool CSNtfBody::_internal_has_tdplayerinfo() const {
  return this != internal_default_instance() && _impl_.tdplayerinfo_ != nullptr;
}
inline bool CSNtfBody::has_tdplayerinfo() const {
  return _internal_has_tdplayerinfo();
}
inline const ::msg::CSNtfTDPlayerInfo& CSNtfBody::_internal_tdplayerinfo() const {
  const ::msg::CSNtfTDPlayerInfo* p = _impl_.tdplayerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfTDPlayerInfo&>(
      ::msg::_CSNtfTDPlayerInfo_default_instance_);
}
inline const ::msg::CSNtfTDPlayerInfo& CSNtfBody::tdplayerinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.TDPlayerInfo)
  return _internal_tdplayerinfo();
}
inline void CSNtfBody::unsafe_arena_set_allocated_tdplayerinfo(
    ::msg::CSNtfTDPlayerInfo* tdplayerinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdplayerinfo_);
  }
  _impl_.tdplayerinfo_ = tdplayerinfo;
  if (tdplayerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.TDPlayerInfo)
}
inline ::msg::CSNtfTDPlayerInfo* CSNtfBody::release_tdplayerinfo() {
  
  ::msg::CSNtfTDPlayerInfo* temp = _impl_.tdplayerinfo_;
  _impl_.tdplayerinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfTDPlayerInfo* CSNtfBody::unsafe_arena_release_tdplayerinfo() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.TDPlayerInfo)
  
  ::msg::CSNtfTDPlayerInfo* temp = _impl_.tdplayerinfo_;
  _impl_.tdplayerinfo_ = nullptr;
  return temp;
}
inline ::msg::CSNtfTDPlayerInfo* CSNtfBody::_internal_mutable_tdplayerinfo() {
  
  if (_impl_.tdplayerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfTDPlayerInfo>(GetArenaForAllocation());
    _impl_.tdplayerinfo_ = p;
  }
  return _impl_.tdplayerinfo_;
}
inline ::msg::CSNtfTDPlayerInfo* CSNtfBody::mutable_tdplayerinfo() {
  ::msg::CSNtfTDPlayerInfo* _msg = _internal_mutable_tdplayerinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.TDPlayerInfo)
  return _msg;
}
inline void CSNtfBody::set_allocated_tdplayerinfo(::msg::CSNtfTDPlayerInfo* tdplayerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tdplayerinfo_);
  }
  if (tdplayerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tdplayerinfo));
    if (message_arena != submessage_arena) {
      tdplayerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tdplayerinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tdplayerinfo_ = tdplayerinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.TDPlayerInfo)
}

// .msg.CSNtfMentorInviteMsg MentorInviteMsg = 604;
inline bool CSNtfBody::_internal_has_mentorinvitemsg() const {
  return this != internal_default_instance() && _impl_.mentorinvitemsg_ != nullptr;
}
inline bool CSNtfBody::has_mentorinvitemsg() const {
  return _internal_has_mentorinvitemsg();
}
inline const ::msg::CSNtfMentorInviteMsg& CSNtfBody::_internal_mentorinvitemsg() const {
  const ::msg::CSNtfMentorInviteMsg* p = _impl_.mentorinvitemsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfMentorInviteMsg&>(
      ::msg::_CSNtfMentorInviteMsg_default_instance_);
}
inline const ::msg::CSNtfMentorInviteMsg& CSNtfBody::mentorinvitemsg() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.MentorInviteMsg)
  return _internal_mentorinvitemsg();
}
inline void CSNtfBody::unsafe_arena_set_allocated_mentorinvitemsg(
    ::msg::CSNtfMentorInviteMsg* mentorinvitemsg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorinvitemsg_);
  }
  _impl_.mentorinvitemsg_ = mentorinvitemsg;
  if (mentorinvitemsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.MentorInviteMsg)
}
inline ::msg::CSNtfMentorInviteMsg* CSNtfBody::release_mentorinvitemsg() {
  
  ::msg::CSNtfMentorInviteMsg* temp = _impl_.mentorinvitemsg_;
  _impl_.mentorinvitemsg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfMentorInviteMsg* CSNtfBody::unsafe_arena_release_mentorinvitemsg() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.MentorInviteMsg)
  
  ::msg::CSNtfMentorInviteMsg* temp = _impl_.mentorinvitemsg_;
  _impl_.mentorinvitemsg_ = nullptr;
  return temp;
}
inline ::msg::CSNtfMentorInviteMsg* CSNtfBody::_internal_mutable_mentorinvitemsg() {
  
  if (_impl_.mentorinvitemsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfMentorInviteMsg>(GetArenaForAllocation());
    _impl_.mentorinvitemsg_ = p;
  }
  return _impl_.mentorinvitemsg_;
}
inline ::msg::CSNtfMentorInviteMsg* CSNtfBody::mutable_mentorinvitemsg() {
  ::msg::CSNtfMentorInviteMsg* _msg = _internal_mutable_mentorinvitemsg();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.MentorInviteMsg)
  return _msg;
}
inline void CSNtfBody::set_allocated_mentorinvitemsg(::msg::CSNtfMentorInviteMsg* mentorinvitemsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorinvitemsg_);
  }
  if (mentorinvitemsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorinvitemsg));
    if (message_arena != submessage_arena) {
      mentorinvitemsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorinvitemsg, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorinvitemsg_ = mentorinvitemsg;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.MentorInviteMsg)
}

// .msg.CSNtfBecomeMentor BecomeMentor = 605;
inline bool CSNtfBody::_internal_has_becomementor() const {
  return this != internal_default_instance() && _impl_.becomementor_ != nullptr;
}
inline bool CSNtfBody::has_becomementor() const {
  return _internal_has_becomementor();
}
inline const ::msg::CSNtfBecomeMentor& CSNtfBody::_internal_becomementor() const {
  const ::msg::CSNtfBecomeMentor* p = _impl_.becomementor_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfBecomeMentor&>(
      ::msg::_CSNtfBecomeMentor_default_instance_);
}
inline const ::msg::CSNtfBecomeMentor& CSNtfBody::becomementor() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.BecomeMentor)
  return _internal_becomementor();
}
inline void CSNtfBody::unsafe_arena_set_allocated_becomementor(
    ::msg::CSNtfBecomeMentor* becomementor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.becomementor_);
  }
  _impl_.becomementor_ = becomementor;
  if (becomementor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.BecomeMentor)
}
inline ::msg::CSNtfBecomeMentor* CSNtfBody::release_becomementor() {
  
  ::msg::CSNtfBecomeMentor* temp = _impl_.becomementor_;
  _impl_.becomementor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfBecomeMentor* CSNtfBody::unsafe_arena_release_becomementor() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.BecomeMentor)
  
  ::msg::CSNtfBecomeMentor* temp = _impl_.becomementor_;
  _impl_.becomementor_ = nullptr;
  return temp;
}
inline ::msg::CSNtfBecomeMentor* CSNtfBody::_internal_mutable_becomementor() {
  
  if (_impl_.becomementor_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfBecomeMentor>(GetArenaForAllocation());
    _impl_.becomementor_ = p;
  }
  return _impl_.becomementor_;
}
inline ::msg::CSNtfBecomeMentor* CSNtfBody::mutable_becomementor() {
  ::msg::CSNtfBecomeMentor* _msg = _internal_mutable_becomementor();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.BecomeMentor)
  return _msg;
}
inline void CSNtfBody::set_allocated_becomementor(::msg::CSNtfBecomeMentor* becomementor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.becomementor_);
  }
  if (becomementor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(becomementor));
    if (message_arena != submessage_arena) {
      becomementor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, becomementor, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.becomementor_ = becomementor;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.BecomeMentor)
}

// .msg.CSNtfMentorRelation MentorRelation = 606;
inline bool CSNtfBody::_internal_has_mentorrelation() const {
  return this != internal_default_instance() && _impl_.mentorrelation_ != nullptr;
}
inline bool CSNtfBody::has_mentorrelation() const {
  return _internal_has_mentorrelation();
}
inline const ::msg::CSNtfMentorRelation& CSNtfBody::_internal_mentorrelation() const {
  const ::msg::CSNtfMentorRelation* p = _impl_.mentorrelation_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfMentorRelation&>(
      ::msg::_CSNtfMentorRelation_default_instance_);
}
inline const ::msg::CSNtfMentorRelation& CSNtfBody::mentorrelation() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.MentorRelation)
  return _internal_mentorrelation();
}
inline void CSNtfBody::unsafe_arena_set_allocated_mentorrelation(
    ::msg::CSNtfMentorRelation* mentorrelation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorrelation_);
  }
  _impl_.mentorrelation_ = mentorrelation;
  if (mentorrelation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.MentorRelation)
}
inline ::msg::CSNtfMentorRelation* CSNtfBody::release_mentorrelation() {
  
  ::msg::CSNtfMentorRelation* temp = _impl_.mentorrelation_;
  _impl_.mentorrelation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfMentorRelation* CSNtfBody::unsafe_arena_release_mentorrelation() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.MentorRelation)
  
  ::msg::CSNtfMentorRelation* temp = _impl_.mentorrelation_;
  _impl_.mentorrelation_ = nullptr;
  return temp;
}
inline ::msg::CSNtfMentorRelation* CSNtfBody::_internal_mutable_mentorrelation() {
  
  if (_impl_.mentorrelation_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfMentorRelation>(GetArenaForAllocation());
    _impl_.mentorrelation_ = p;
  }
  return _impl_.mentorrelation_;
}
inline ::msg::CSNtfMentorRelation* CSNtfBody::mutable_mentorrelation() {
  ::msg::CSNtfMentorRelation* _msg = _internal_mutable_mentorrelation();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.MentorRelation)
  return _msg;
}
inline void CSNtfBody::set_allocated_mentorrelation(::msg::CSNtfMentorRelation* mentorrelation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorrelation_);
  }
  if (mentorrelation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorrelation));
    if (message_arena != submessage_arena) {
      mentorrelation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorrelation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorrelation_ = mentorrelation;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.MentorRelation)
}

// .msg.CSNtfPupilTaskUpdate MentorShipTaskUpdate = 607;
inline bool CSNtfBody::_internal_has_mentorshiptaskupdate() const {
  return this != internal_default_instance() && _impl_.mentorshiptaskupdate_ != nullptr;
}
inline bool CSNtfBody::has_mentorshiptaskupdate() const {
  return _internal_has_mentorshiptaskupdate();
}
inline const ::msg::CSNtfPupilTaskUpdate& CSNtfBody::_internal_mentorshiptaskupdate() const {
  const ::msg::CSNtfPupilTaskUpdate* p = _impl_.mentorshiptaskupdate_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfPupilTaskUpdate&>(
      ::msg::_CSNtfPupilTaskUpdate_default_instance_);
}
inline const ::msg::CSNtfPupilTaskUpdate& CSNtfBody::mentorshiptaskupdate() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.MentorShipTaskUpdate)
  return _internal_mentorshiptaskupdate();
}
inline void CSNtfBody::unsafe_arena_set_allocated_mentorshiptaskupdate(
    ::msg::CSNtfPupilTaskUpdate* mentorshiptaskupdate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorshiptaskupdate_);
  }
  _impl_.mentorshiptaskupdate_ = mentorshiptaskupdate;
  if (mentorshiptaskupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.MentorShipTaskUpdate)
}
inline ::msg::CSNtfPupilTaskUpdate* CSNtfBody::release_mentorshiptaskupdate() {
  
  ::msg::CSNtfPupilTaskUpdate* temp = _impl_.mentorshiptaskupdate_;
  _impl_.mentorshiptaskupdate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfPupilTaskUpdate* CSNtfBody::unsafe_arena_release_mentorshiptaskupdate() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.MentorShipTaskUpdate)
  
  ::msg::CSNtfPupilTaskUpdate* temp = _impl_.mentorshiptaskupdate_;
  _impl_.mentorshiptaskupdate_ = nullptr;
  return temp;
}
inline ::msg::CSNtfPupilTaskUpdate* CSNtfBody::_internal_mutable_mentorshiptaskupdate() {
  
  if (_impl_.mentorshiptaskupdate_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfPupilTaskUpdate>(GetArenaForAllocation());
    _impl_.mentorshiptaskupdate_ = p;
  }
  return _impl_.mentorshiptaskupdate_;
}
inline ::msg::CSNtfPupilTaskUpdate* CSNtfBody::mutable_mentorshiptaskupdate() {
  ::msg::CSNtfPupilTaskUpdate* _msg = _internal_mutable_mentorshiptaskupdate();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.MentorShipTaskUpdate)
  return _msg;
}
inline void CSNtfBody::set_allocated_mentorshiptaskupdate(::msg::CSNtfPupilTaskUpdate* mentorshiptaskupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorshiptaskupdate_);
  }
  if (mentorshiptaskupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorshiptaskupdate));
    if (message_arena != submessage_arena) {
      mentorshiptaskupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorshiptaskupdate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorshiptaskupdate_ = mentorshiptaskupdate;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.MentorShipTaskUpdate)
}

// .msg.CSNtfMentorLevel MentorLevel = 608;
inline bool CSNtfBody::_internal_has_mentorlevel() const {
  return this != internal_default_instance() && _impl_.mentorlevel_ != nullptr;
}
inline bool CSNtfBody::has_mentorlevel() const {
  return _internal_has_mentorlevel();
}
inline const ::msg::CSNtfMentorLevel& CSNtfBody::_internal_mentorlevel() const {
  const ::msg::CSNtfMentorLevel* p = _impl_.mentorlevel_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfMentorLevel&>(
      ::msg::_CSNtfMentorLevel_default_instance_);
}
inline const ::msg::CSNtfMentorLevel& CSNtfBody::mentorlevel() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.MentorLevel)
  return _internal_mentorlevel();
}
inline void CSNtfBody::unsafe_arena_set_allocated_mentorlevel(
    ::msg::CSNtfMentorLevel* mentorlevel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorlevel_);
  }
  _impl_.mentorlevel_ = mentorlevel;
  if (mentorlevel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.MentorLevel)
}
inline ::msg::CSNtfMentorLevel* CSNtfBody::release_mentorlevel() {
  
  ::msg::CSNtfMentorLevel* temp = _impl_.mentorlevel_;
  _impl_.mentorlevel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfMentorLevel* CSNtfBody::unsafe_arena_release_mentorlevel() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.MentorLevel)
  
  ::msg::CSNtfMentorLevel* temp = _impl_.mentorlevel_;
  _impl_.mentorlevel_ = nullptr;
  return temp;
}
inline ::msg::CSNtfMentorLevel* CSNtfBody::_internal_mutable_mentorlevel() {
  
  if (_impl_.mentorlevel_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfMentorLevel>(GetArenaForAllocation());
    _impl_.mentorlevel_ = p;
  }
  return _impl_.mentorlevel_;
}
inline ::msg::CSNtfMentorLevel* CSNtfBody::mutable_mentorlevel() {
  ::msg::CSNtfMentorLevel* _msg = _internal_mutable_mentorlevel();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.MentorLevel)
  return _msg;
}
inline void CSNtfBody::set_allocated_mentorlevel(::msg::CSNtfMentorLevel* mentorlevel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mentorlevel_);
  }
  if (mentorlevel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mentorlevel));
    if (message_arena != submessage_arena) {
      mentorlevel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mentorlevel, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mentorlevel_ = mentorlevel;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.MentorLevel)
}

// .msg.CSNtfCurDressUpdate CurDressUpdate = 609;
inline bool CSNtfBody::_internal_has_curdressupdate() const {
  return this != internal_default_instance() && _impl_.curdressupdate_ != nullptr;
}
inline bool CSNtfBody::has_curdressupdate() const {
  return _internal_has_curdressupdate();
}
inline const ::msg::CSNtfCurDressUpdate& CSNtfBody::_internal_curdressupdate() const {
  const ::msg::CSNtfCurDressUpdate* p = _impl_.curdressupdate_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfCurDressUpdate&>(
      ::msg::_CSNtfCurDressUpdate_default_instance_);
}
inline const ::msg::CSNtfCurDressUpdate& CSNtfBody::curdressupdate() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.CurDressUpdate)
  return _internal_curdressupdate();
}
inline void CSNtfBody::unsafe_arena_set_allocated_curdressupdate(
    ::msg::CSNtfCurDressUpdate* curdressupdate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.curdressupdate_);
  }
  _impl_.curdressupdate_ = curdressupdate;
  if (curdressupdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.CurDressUpdate)
}
inline ::msg::CSNtfCurDressUpdate* CSNtfBody::release_curdressupdate() {
  
  ::msg::CSNtfCurDressUpdate* temp = _impl_.curdressupdate_;
  _impl_.curdressupdate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfCurDressUpdate* CSNtfBody::unsafe_arena_release_curdressupdate() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.CurDressUpdate)
  
  ::msg::CSNtfCurDressUpdate* temp = _impl_.curdressupdate_;
  _impl_.curdressupdate_ = nullptr;
  return temp;
}
inline ::msg::CSNtfCurDressUpdate* CSNtfBody::_internal_mutable_curdressupdate() {
  
  if (_impl_.curdressupdate_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfCurDressUpdate>(GetArenaForAllocation());
    _impl_.curdressupdate_ = p;
  }
  return _impl_.curdressupdate_;
}
inline ::msg::CSNtfCurDressUpdate* CSNtfBody::mutable_curdressupdate() {
  ::msg::CSNtfCurDressUpdate* _msg = _internal_mutable_curdressupdate();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.CurDressUpdate)
  return _msg;
}
inline void CSNtfBody::set_allocated_curdressupdate(::msg::CSNtfCurDressUpdate* curdressupdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.curdressupdate_);
  }
  if (curdressupdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(curdressupdate));
    if (message_arena != submessage_arena) {
      curdressupdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, curdressupdate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.curdressupdate_ = curdressupdate;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.CurDressUpdate)
}

// .msg.CSNtfChangeExchangeMark ChangeExchangeMark = 610;
inline bool CSNtfBody::_internal_has_changeexchangemark() const {
  return this != internal_default_instance() && _impl_.changeexchangemark_ != nullptr;
}
inline bool CSNtfBody::has_changeexchangemark() const {
  return _internal_has_changeexchangemark();
}
inline const ::msg::CSNtfChangeExchangeMark& CSNtfBody::_internal_changeexchangemark() const {
  const ::msg::CSNtfChangeExchangeMark* p = _impl_.changeexchangemark_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfChangeExchangeMark&>(
      ::msg::_CSNtfChangeExchangeMark_default_instance_);
}
inline const ::msg::CSNtfChangeExchangeMark& CSNtfBody::changeexchangemark() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.ChangeExchangeMark)
  return _internal_changeexchangemark();
}
inline void CSNtfBody::unsafe_arena_set_allocated_changeexchangemark(
    ::msg::CSNtfChangeExchangeMark* changeexchangemark) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changeexchangemark_);
  }
  _impl_.changeexchangemark_ = changeexchangemark;
  if (changeexchangemark) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.ChangeExchangeMark)
}
inline ::msg::CSNtfChangeExchangeMark* CSNtfBody::release_changeexchangemark() {
  
  ::msg::CSNtfChangeExchangeMark* temp = _impl_.changeexchangemark_;
  _impl_.changeexchangemark_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfChangeExchangeMark* CSNtfBody::unsafe_arena_release_changeexchangemark() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.ChangeExchangeMark)
  
  ::msg::CSNtfChangeExchangeMark* temp = _impl_.changeexchangemark_;
  _impl_.changeexchangemark_ = nullptr;
  return temp;
}
inline ::msg::CSNtfChangeExchangeMark* CSNtfBody::_internal_mutable_changeexchangemark() {
  
  if (_impl_.changeexchangemark_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfChangeExchangeMark>(GetArenaForAllocation());
    _impl_.changeexchangemark_ = p;
  }
  return _impl_.changeexchangemark_;
}
inline ::msg::CSNtfChangeExchangeMark* CSNtfBody::mutable_changeexchangemark() {
  ::msg::CSNtfChangeExchangeMark* _msg = _internal_mutable_changeexchangemark();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.ChangeExchangeMark)
  return _msg;
}
inline void CSNtfBody::set_allocated_changeexchangemark(::msg::CSNtfChangeExchangeMark* changeexchangemark) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changeexchangemark_);
  }
  if (changeexchangemark) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(changeexchangemark));
    if (message_arena != submessage_arena) {
      changeexchangemark = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changeexchangemark, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.changeexchangemark_ = changeexchangemark;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.ChangeExchangeMark)
}

// .msg.CSNtfRefreshPassport RefreshPassport = 611;
inline bool CSNtfBody::_internal_has_refreshpassport() const {
  return this != internal_default_instance() && _impl_.refreshpassport_ != nullptr;
}
inline bool CSNtfBody::has_refreshpassport() const {
  return _internal_has_refreshpassport();
}
inline const ::msg::CSNtfRefreshPassport& CSNtfBody::_internal_refreshpassport() const {
  const ::msg::CSNtfRefreshPassport* p = _impl_.refreshpassport_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfRefreshPassport&>(
      ::msg::_CSNtfRefreshPassport_default_instance_);
}
inline const ::msg::CSNtfRefreshPassport& CSNtfBody::refreshpassport() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.RefreshPassport)
  return _internal_refreshpassport();
}
inline void CSNtfBody::unsafe_arena_set_allocated_refreshpassport(
    ::msg::CSNtfRefreshPassport* refreshpassport) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refreshpassport_);
  }
  _impl_.refreshpassport_ = refreshpassport;
  if (refreshpassport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.RefreshPassport)
}
inline ::msg::CSNtfRefreshPassport* CSNtfBody::release_refreshpassport() {
  
  ::msg::CSNtfRefreshPassport* temp = _impl_.refreshpassport_;
  _impl_.refreshpassport_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfRefreshPassport* CSNtfBody::unsafe_arena_release_refreshpassport() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.RefreshPassport)
  
  ::msg::CSNtfRefreshPassport* temp = _impl_.refreshpassport_;
  _impl_.refreshpassport_ = nullptr;
  return temp;
}
inline ::msg::CSNtfRefreshPassport* CSNtfBody::_internal_mutable_refreshpassport() {
  
  if (_impl_.refreshpassport_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfRefreshPassport>(GetArenaForAllocation());
    _impl_.refreshpassport_ = p;
  }
  return _impl_.refreshpassport_;
}
inline ::msg::CSNtfRefreshPassport* CSNtfBody::mutable_refreshpassport() {
  ::msg::CSNtfRefreshPassport* _msg = _internal_mutable_refreshpassport();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.RefreshPassport)
  return _msg;
}
inline void CSNtfBody::set_allocated_refreshpassport(::msg::CSNtfRefreshPassport* refreshpassport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.refreshpassport_);
  }
  if (refreshpassport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(refreshpassport));
    if (message_arena != submessage_arena) {
      refreshpassport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, refreshpassport, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.refreshpassport_ = refreshpassport;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.RefreshPassport)
}

// .msg.CSNtfGmRemoveMail GmRemoveMail = 612;
inline bool CSNtfBody::_internal_has_gmremovemail() const {
  return this != internal_default_instance() && _impl_.gmremovemail_ != nullptr;
}
inline bool CSNtfBody::has_gmremovemail() const {
  return _internal_has_gmremovemail();
}
inline const ::msg::CSNtfGmRemoveMail& CSNtfBody::_internal_gmremovemail() const {
  const ::msg::CSNtfGmRemoveMail* p = _impl_.gmremovemail_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfGmRemoveMail&>(
      ::msg::_CSNtfGmRemoveMail_default_instance_);
}
inline const ::msg::CSNtfGmRemoveMail& CSNtfBody::gmremovemail() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.GmRemoveMail)
  return _internal_gmremovemail();
}
inline void CSNtfBody::unsafe_arena_set_allocated_gmremovemail(
    ::msg::CSNtfGmRemoveMail* gmremovemail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gmremovemail_);
  }
  _impl_.gmremovemail_ = gmremovemail;
  if (gmremovemail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.GmRemoveMail)
}
inline ::msg::CSNtfGmRemoveMail* CSNtfBody::release_gmremovemail() {
  
  ::msg::CSNtfGmRemoveMail* temp = _impl_.gmremovemail_;
  _impl_.gmremovemail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfGmRemoveMail* CSNtfBody::unsafe_arena_release_gmremovemail() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.GmRemoveMail)
  
  ::msg::CSNtfGmRemoveMail* temp = _impl_.gmremovemail_;
  _impl_.gmremovemail_ = nullptr;
  return temp;
}
inline ::msg::CSNtfGmRemoveMail* CSNtfBody::_internal_mutable_gmremovemail() {
  
  if (_impl_.gmremovemail_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfGmRemoveMail>(GetArenaForAllocation());
    _impl_.gmremovemail_ = p;
  }
  return _impl_.gmremovemail_;
}
inline ::msg::CSNtfGmRemoveMail* CSNtfBody::mutable_gmremovemail() {
  ::msg::CSNtfGmRemoveMail* _msg = _internal_mutable_gmremovemail();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.GmRemoveMail)
  return _msg;
}
inline void CSNtfBody::set_allocated_gmremovemail(::msg::CSNtfGmRemoveMail* gmremovemail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gmremovemail_);
  }
  if (gmremovemail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gmremovemail));
    if (message_arena != submessage_arena) {
      gmremovemail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gmremovemail, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.gmremovemail_ = gmremovemail;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.GmRemoveMail)
}

// .msg.CSNtfAutoUseItem AutoUseItem = 613;
inline bool CSNtfBody::_internal_has_autouseitem() const {
  return this != internal_default_instance() && _impl_.autouseitem_ != nullptr;
}
inline bool CSNtfBody::has_autouseitem() const {
  return _internal_has_autouseitem();
}
inline const ::msg::CSNtfAutoUseItem& CSNtfBody::_internal_autouseitem() const {
  const ::msg::CSNtfAutoUseItem* p = _impl_.autouseitem_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::CSNtfAutoUseItem&>(
      ::msg::_CSNtfAutoUseItem_default_instance_);
}
inline const ::msg::CSNtfAutoUseItem& CSNtfBody::autouseitem() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBody.AutoUseItem)
  return _internal_autouseitem();
}
inline void CSNtfBody::unsafe_arena_set_allocated_autouseitem(
    ::msg::CSNtfAutoUseItem* autouseitem) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autouseitem_);
  }
  _impl_.autouseitem_ = autouseitem;
  if (autouseitem) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfBody.AutoUseItem)
}
inline ::msg::CSNtfAutoUseItem* CSNtfBody::release_autouseitem() {
  
  ::msg::CSNtfAutoUseItem* temp = _impl_.autouseitem_;
  _impl_.autouseitem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::CSNtfAutoUseItem* CSNtfBody::unsafe_arena_release_autouseitem() {
  // @@protoc_insertion_point(field_release:msg.CSNtfBody.AutoUseItem)
  
  ::msg::CSNtfAutoUseItem* temp = _impl_.autouseitem_;
  _impl_.autouseitem_ = nullptr;
  return temp;
}
inline ::msg::CSNtfAutoUseItem* CSNtfBody::_internal_mutable_autouseitem() {
  
  if (_impl_.autouseitem_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::CSNtfAutoUseItem>(GetArenaForAllocation());
    _impl_.autouseitem_ = p;
  }
  return _impl_.autouseitem_;
}
inline ::msg::CSNtfAutoUseItem* CSNtfBody::mutable_autouseitem() {
  ::msg::CSNtfAutoUseItem* _msg = _internal_mutable_autouseitem();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfBody.AutoUseItem)
  return _msg;
}
inline void CSNtfBody::set_allocated_autouseitem(::msg::CSNtfAutoUseItem* autouseitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.autouseitem_);
  }
  if (autouseitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(autouseitem));
    if (message_arena != submessage_arena) {
      autouseitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autouseitem, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.autouseitem_ = autouseitem;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfBody.AutoUseItem)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::CSMsgID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::CSMsgID>() {
  return ::msg::CSMsgID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_csprotocol_2eproto
