#if PLATFORM_WINDOWS
#pragma warning(disable:4100)
#pragma warning(disable:4125)
#pragma warning(disable:4267)
#pragma warning(disable:4668)
#pragma warning(disable:4800)
#pragma warning(disable:4456)
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: result.proto

#if PLATFORM_WINDOWS
#pragma warning(disable:4125)
#pragma warning(disable:4668)
#endif
#ifndef GOOGLE_PROTOBUF_INCLUDED_result_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_result_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_result_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_result_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_result_2eproto;
namespace msg {
class CSDTObserveInfo;
struct CSDTObserveInfoDefaultTypeInternal;
extern CSDTObserveInfoDefaultTypeInternal _CSDTObserveInfo_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::CSDTObserveInfo* Arena::CreateMaybeMessage<::msg::CSDTObserveInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum RESULT : int {
  SUCCESS = 0,
  FAIL = 1,
  SERVER_STOP = 2,
  SERVER_CLOSING = 3,
  VERSION_NOT_ALLOW = 4,
  WAIT_COUNT_LIMIT = 5,
  AUTHENTIC_FAIL = 6,
  TIMEOUT = 7,
  TEAM_MATCHING = 8,
  LY_WHITE_LIST_AUTHENTIC_FAIL = 9,
  ACCOUNT_FROZED = 10,
  DEV_FROZED = 11,
  DIRTY_WORD = 12,
  CDKEY_NOT_EXIST = 13,
  CDKEY_CHANNEL_MISMATCH = 14,
  CDKEY_IS_USED = 15,
  CDKEY_OUT_OF_DATE = 16,
  CDKEY_GIFT_ALREADY_GET = 17,
  ACTIVECODE_AUTHENTIC_FAIL = 18,
  WORLD_CHAT_SILENCE = 19,
  APKVERSION_NOT_MATCH = 20,
  PVP_RESOURCEVERSION_NOT_MATCH = 21,
  WORLD_CHAT_LIMIT = 22,
  VERIFY_GATE_ADDR = 23,
  TEAM_DISMISSED = 24,
  TEAM_PVPING = 25,
  TEAM_PLAYERS_FULL = 26,
  TEAM_NOT_READY = 27,
  OFF_SEASON = 28,
  BIND_ACCOUNT_USED = 29,
  FUNCTION_NOT_OPEN = 30,
  PVP_RUNNING = 31,
  SEASON_NOT_EVAL = 32,
  PVP_MODE_LEVEL_LIMIT = 33,
  PVP_MODE_ILLEGAL = 34,
  DAILY_SMS_LIMIT = 35,
  DAILY_SMS_PER_LIMIT = 36,
  AWARDS_BE_GOTTEN = 37,
  PHONE_NUMBER_HAD_BINDED = 38,
  BIND_PHONE_NUMBER_DAILY_LIMIT = 39,
  GOODS_BUY_COUNT_RUN_OUT = 40,
  MALL_TAB_CLOSED = 41,
  DIFFERENT_LOGIN_DEVICE = 42,
  FREQUENT_PVP = 43,
  GROWUP_DEFEND_FROZED = 44,
  SHARE_INVALID = 45,
  BIND_SHARE_FAIL = 46,
  OLD_PLAYER_NOT_FOUND = 47,
  VERIFICATION_CODE_NOT_MATCH = 48,
  NOT_OLD_PLAYER = 49,
  HAD_BIND_PLAYER = 50,
  OLD_PLAYER_HAD_BIND = 51,
  BIND_OLD_PLAYER_TIMEOUT = 52,
  OLD_PLAYER_IS_NEW = 53,
  VERIFICATION_CODE_SEND_COOLING = 54,
  PHONE_NUMBER_ILLEGAL = 55,
  BIND_PHONE_COOLING = 56,
  OLD_PLAYER_IS_YOURSELF = 57,
  VERIFICATION_CODE_IS_NIL = 58,
  CREDIT_SCORE_LOWER = 59,
  REALATION_STAR_INVITED = 60,
  NO_AVAILABLE_SERVER = 61,
  NO_AVAILABLE_TEAM_SERVER = 62,
  NO_AVAILABLE_SNS_SERVER = 63,
  NO_AVAILABLE_RANK_SERVER = 64,
  SEND_MESSAGE_FAIL = 65,
  NO_AVAILABLE_PVP_SERVER = 66,
  NO_AVAILABLE_MATCH_SERVER = 67,
  NO_AVAILABLE_CHAT_SERVER = 68,
  NO_AVAILABLE_MAIL_SERVER = 69,
  NO_AVAILABLE_PAYMENT_SERVER = 70,
  NO_AVAILABLE_STATUS_SERVER = 71,
  NO_AVAILABLE_DB_SERVER = 72,
  CLOSE_REGISTER = 73,
  FUNCTION_FORBIDDEN = 74,
  TX_GET_MBUY_URL_FAILED = 75,
  FOLLOW_DAILY_COUNT_FAILED = 76,
  OFFLINE_INVIETE_LIMIT = 77,
  NO_AVAILABLE_GLOBAL_SERVER = 78,
  PVP_ALREADY_END = 79,
  PLAYER_NOT_BE_FOLLOWED = 80,
  OBSERVE_COUNT_IS_MAX = 81,
  PVP_TIME_IS_TOO_LONG = 82,
  LITTLE_SURVIVE_COUNT = 83,
  DO_NOT_OBSERVE = 84,
  PVP_NOT_EXIST = 85,
  WX_SEND_RED_PKT_LIMIT = 86,
  WX_RECV_RED_PKT_LIMIT = 87,
  WX_RECV_RED_PKT_REPEATED = 88,
  WX_RECV_RED_PKT_EMPTY = 89,
  WX_RED_PKT_ACT_OVER = 90,
  WX_RED_PKT_LIKE_REPEATED = 91,
  WX_RED_PKT_LIKE_LIMIT = 92,
  FOLLOW_MAX = 93,
  PLAYER_BE_PUNISHED = 94,
  ACT_GRPBUY_NOT_PAID = 95,
  PVP_CANCEL_BY_UNCONFIRMED = 96,
  PVP_CANCEL_BY_OFFLINE = 97,
  QUESTIONNAIRE_OUT_OFF_DATE = 98,
  QUESTIONNAIRE_NO_TARGET = 99,
  QUESTIONNAIRE_ANSWERED = 100,
  ALREADY_BE_SET = 101,
  NOT_OWN_THE_ITEM = 102,
  REPEAT_COMPOSE = 103,
  DISSATISFY_CONDITION = 104,
  EXCEED_THE_LIMIT = 105,
  MATERIAL_IS_NOT_ENOUGH = 106,
  PVP_CANCEL_BY_SELF_UNCONFIRMED = 107,
  PVP_CANCEL_BY_SELF_OFFLINE = 108,
  TEAM_PWD_ERR = 109,
  ILLEGAL_GAMELIB_VERSION = 110,
  PLAYER_DIED = 111,
  PLAYER_NOT_BE_FOUND = 112,
  KR_ADDICTION_LIMITTIME_REACH = 113,
  NO_FREE_CHANGE_PROVINCE_TIMES = 114,
  PROVINCE_NOT_EXIST = 115,
  NO_MATCH_ROOM_MEMBER = 116,
  MATCH_ROOM_TOKEN_ERR = 117,
  TEAM_NOT_FOUND = 118,
  CONFIG_NOT_FOUND = 119,
  MULTI_PLAYER = 120,
  NO_MULTI_PLAYER = 121,
  TOURNAMENT_PVP_RUNNING = 122,
  TOURNAMENT_PUNISH = 123,
  TOURNAMENT_NO_JOIN = 124,
  TOURNAMENT_WEED_OUT = 125,
  TOURNAMENT_ROUND_INVAILD = 126,
  TOURNAMENT_ROUND_BEYOND_TIME = 127,
  TOURNAMENT_WRONG_REGION = 129,
  TOURNAMENT_ENROLL_NOT_END = 130,
  TOURNAMENT_NOT_ENROLL = 131,
  TOURNAMENT_GOT_OUT = 132,
  TOURNAMENT_NOT_BEGIN = 133,
  TOURNAMENT_NOT_END = 134,
  TOURNAMENT_ENROLL_NOT_BEGIN = 135,
  TOURNAMENT_CLASS_NOT_EXIST = 136,
  TOURNAMENT_NOT_EXIST = 137,
  TOURNAMENT_ALREADY_ENROLLED = 138,
  TOURNAMENT_ENROLL_COUNT_IS_FULL = 139,
  TOURNAMENT_JOIN_COUNT_IS_MAX = 140,
  TOURNAMENT_CUP_IS_HIGH = 141,
  TOURNAMENT_CUP_IS_LOW = 142,
  TOURNAMENT_TICKET_NOT_SATISFIED = 143,
  TOURNAMENT_HAS_BATTLE_ROOM = 144,
  TOURNAMENT_POINT_NO_ENOUGH = 145,
  TOURNAMENT_POINT_HAS_GET = 146,
  TOURNAMENT_CLASS_CANCELED = 147,
  MAX_SINGLE_PAY_AMOUNT = 148,
  MAX_MONTHLY_PAY_AMOUNT = 149,
  GAMELIB_VERSION_DIFFERENT = 150,
  PASSPORT_UNLOCK = 151,
  PASSPORT_SEGMENT_CONFLICT = 152,
  PASSPORT_SEGMENT_NOPRE = 153,
  ITEM_DEDUCTION_EXPIRE = 154,
  ITEM_DEDUCTION_TYPE = 155,
  ITEM_DEDUCTION_RATEOFFLOW = 156,
  ITEM_DEDUCTION_ZEROCONSUME = 157,
  ITEM_DEDUCTION_MORECONSUME = 158,
  NO_MATCHING_STATUS = 159,
  PLAYER_LACK_TICKET = 160,
  PLAYER_LACK_BOUNTY = 161,
  TX_PLAYER_NOT_FIND = 162,
  TX_PLAYER_INVITE_ERR = 163,
  TX_PLAYER_HAVE_BEBIND = 164,
  TX_PLAYER_BIND_CLOSE = 165,
  TX_PLAYER_HAVE_BIND = 166,
  USRNAME_ILLEGAL = 167,
  WORKSHOP_NO_SUITABLE_ROOM = 168,
  INSUFFICIENT_TOKEN = 169,
  WORKSHOP_MAP_NOT_FOUND = 170,
  WORKSHOP_SUBMODE_CLOSED = 171,
  TOO_YOUNG_TO_PAY = 172,
  UNSET_READY_FORBBIDEN_IN_BOUNTY = 173,
  PS4_SERVER_ONLY = 174,
  PS4_SERVER_ONLY_OTHERS = 175,
  LOGIN_LIMIT = 176,
  PROMISE_TIMEOUT = 177,
  RECRUIT_FINISH_RECRUIT = 178,
  RECRUIT_PLAYER_NOINVITE = 179,
  PLAYER_LACK_MONEY = 180,
  GUILD_ALREADY_JOIN = 181,
  GUILD_NOT_JOIN = 182,
  GUILD_NAME_EXISTS = 183,
  GUILD_ALREADY_APPLY = 184,
  GUILD_NO_RIGHT = 185,
  GUILD_NO_SERVER = 186,
  GUILD_DURING_MAINTENANCE = 187,
  GUILD_MODIFY_CD = 188,
  GUILD_REJOIN_CD = 189,
  GUILD_APPOINT_LIMIT = 190,
  GUILD_MEMBER_FULL = 191,
  CONDITION_NOT_COMPLETED = 192,
  GUILD_LACK_DIAMOND = 193,
  GUILD_CUP_TOO_SMALL = 194,
  RECRUIT_PLAYER_INVITE = 195,
  RECRUIT_PLAYER_RECRUIT = 196,
  FAIL_SERVICE_CLOSE = 197,
  LOGIN_OLDSERVICE = 198,
  FUNCTION_NOT_UNLOCK = 199,
  LEVEL_UP_CHEST_LACK_SCORE = 200,
  LEVEL_LIMIT = 201,
  PREPASS_LOCK = 202,
  WORKSHOP_CUSTOM_CARD_NOT_FIT = 203,
  GUILD_APPLICANT_CD = 204,
  BIGWINNER_SCORE_OVER = 205,
  PASSPORT_CARD_SWITCH_FAIL = 206,
  NOT_IN_SEASONS = 207,
  TEAM_DELAY_OVER = 208,
  PVP_DELAY_OVER = 209,
  MATCH_PLAYER_EXIST = 210,
  MODULE_NOTLOAD = 211,
  TEAM_MEMBER_MMR_GAP = 212,
  MODULE_OPT_ILLEGAL = 213,
  ORDER_STATE_ILLEGAL = 214,
  ALREADY_SIGNED = 215,
  ITEM_USEED = 216,
  RESIGN_NOT_OPEN = 217,
  ITEM_NOT_ENOUGH = 218,
  AWARD_HAS_GET = 219,
  GROUP_AWARD_CAN_NOT_GET = 220,
  NO_MAP_OPEN = 221,
  GROUP_MALL_CHANNEL_NOT_EQUAL = 222,
  NS_ITEM_UPLIMIT = 223,
  ACTIVITY_OVER = 224,
  NOT_GET_SPECIAL_AWARD = 225,
  BUY_PVE_CHALLENGE_LIMIT = 226,
  AWARD_NUM_NOT_ENOUGH = 227,
  AWARD_GET_ALL = 228,
  SMELT_LACK = 229,
  AD_TIMES_USEUP = 230,
  SET_CACHE_FAIL = 231,
  GET_CACHE_FAIL = 232,
  PS_BIND_STATUS_SETNAME = 233,
  SMELT_ID_INVALID = 234,
  BAG_UPLIMIT = 235,
  MONGO_DUPLICATE_KEY = 236,
  PVP_PLAYER_LIMIT = 237,
  HAS_PERMANENT_ITEM = 238,
  RESULT_SKIN_HAS_EQUIP = 239,
  CANCEL_FAIL_IN_GUILD = 240,
  CANCEL_FAIL_MATCHING = 241,
  CANCEL_FAIL_IN_TEAM = 242,
  RESULT_IDENTIFY_CONSUME_NOT_ENOUGH = 243,
  RESULT_INSERT_AFFIX_ID_UNMATCHED = 244,
  RESULT_INSERT_AFFIX_ITEM_UNMATCHED = 245,
  EXHCHANGE_ORDER_IS_EXIST = 246,
  EXHCHANGE_NOT_TTL_LOCK = 247,
  EXHCHANGE_OFFLINE_NOT_FIND_HALL = 248,
  UPGRADE_PASSPORT_FAIL_BY_PASSPORT_CARD = 249,
  CHECKPASSPORT_BLACK_BOS_TIPS = 250,
  ITEM_IN_EXCHANGE = 251,
  IDENTIFY_ITEM_REPEAT = 252,
  PVE_SCORE_NOT_ENOUGH = 253,
  PVE_PROP_LIMIT = 254,
  CARD_GROUP_UPDATE_LIMIT = 255,
  PVE_BUFF_HAS_BUY = 256,
  NOT_ALLOW_ROBOT = 257,
  MS_MENTOR_PUPIL_FULL = 258,
  MS_PUPIL_HAS_MENTOR = 259,
  TD_ONHOOK_NOT_AWARDS = 260,
  TD_CARDGROUP_NOT_ENOUGH = 261,
  TD_EQUIP_MATERIAL_NOT_ENOUGH = 262,
  MS_IN_PUNISH = 263,
  MS_HAS_APPLY_GRADUATE = 264,
  MS_NOT_BUILD = 265,
  MS_IS_MENTOR = 266,
  MS_INVITEMSG_IS_OVERDUE = 267,
  MS_INVITEMSG_IS_THAN = 268,
  MS_INVITEMSG_IS_NOT_EXIET = 269,
  TD_GOLD_FULL = 270,
  BALANCE_NOT_ENOUGH = 271,
  EXCHANGE_IDENTIFY_NOT_INCORRECT = 272,
  NO_PERMISSION_NIGHTMARE_MODE = 273,
  CHEST_NOT_ENOUGH = 274,
  KEY_NOT_ENOUGH = 275,
  NOT_IN_CPU_RANGE = 276,
  RESULT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RESULT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RESULT_IsValid(int value);
constexpr RESULT RESULT_MIN = SUCCESS;
constexpr RESULT RESULT_MAX = NOT_IN_CPU_RANGE;
constexpr int RESULT_ARRAYSIZE = RESULT_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RESULT_descriptor();
template<typename T>
inline const std::string& RESULT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RESULT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RESULT_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RESULT_descriptor(), enum_t_value);
}
inline bool RESULT_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RESULT* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RESULT>(
    RESULT_descriptor(), name, value);
}
// ===================================================================

class CSDTObserveInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSDTObserveInfo) */ {
 public:
  inline CSDTObserveInfo() : CSDTObserveInfo(nullptr) {}
  ~CSDTObserveInfo() override;
  explicit PROTOBUF_CONSTEXPR CSDTObserveInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSDTObserveInfo(const CSDTObserveInfo& from);
  CSDTObserveInfo(CSDTObserveInfo&& from) noexcept
    : CSDTObserveInfo() {
    *this = ::std::move(from);
  }

  inline CSDTObserveInfo& operator=(const CSDTObserveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSDTObserveInfo& operator=(CSDTObserveInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSDTObserveInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSDTObserveInfo* internal_default_instance() {
    return reinterpret_cast<const CSDTObserveInfo*>(
               &_CSDTObserveInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CSDTObserveInfo& a, CSDTObserveInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSDTObserveInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSDTObserveInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSDTObserveInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSDTObserveInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSDTObserveInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSDTObserveInfo& from) {
    CSDTObserveInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSDTObserveInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSDTObserveInfo";
  }
  protected:
  explicit CSDTObserveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPvpIdFieldNumber = 2,
    kObserveCountFieldNumber = 1,
    kResultFieldNumber = 3,
  };
  // uint64 PvpId = 2;
  void clear_pvpid();
  uint64_t pvpid() const;
  void set_pvpid(uint64_t value);
  private:
  uint64_t _internal_pvpid() const;
  void _internal_set_pvpid(uint64_t value);
  public:

  // uint32 ObserveCount = 1;
  void clear_observecount();
  uint32_t observecount() const;
  void set_observecount(uint32_t value);
  private:
  uint32_t _internal_observecount() const;
  void _internal_set_observecount(uint32_t value);
  public:

  // .msg.RESULT Result = 3;
  void clear_result();
  ::msg::RESULT result() const;
  void set_result(::msg::RESULT value);
  private:
  ::msg::RESULT _internal_result() const;
  void _internal_set_result(::msg::RESULT value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSDTObserveInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t pvpid_;
    uint32_t observecount_;
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_result_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSDTObserveInfo

// uint32 ObserveCount = 1;
inline void CSDTObserveInfo::clear_observecount() {
  _impl_.observecount_ = 0u;
}
inline uint32_t CSDTObserveInfo::_internal_observecount() const {
  return _impl_.observecount_;
}
inline uint32_t CSDTObserveInfo::observecount() const {
  // @@protoc_insertion_point(field_get:msg.CSDTObserveInfo.ObserveCount)
  return _internal_observecount();
}
inline void CSDTObserveInfo::_internal_set_observecount(uint32_t value) {
  
  _impl_.observecount_ = value;
}
inline void CSDTObserveInfo::set_observecount(uint32_t value) {
  _internal_set_observecount(value);
  // @@protoc_insertion_point(field_set:msg.CSDTObserveInfo.ObserveCount)
}

// uint64 PvpId = 2;
inline void CSDTObserveInfo::clear_pvpid() {
  _impl_.pvpid_ = uint64_t{0u};
}
inline uint64_t CSDTObserveInfo::_internal_pvpid() const {
  return _impl_.pvpid_;
}
inline uint64_t CSDTObserveInfo::pvpid() const {
  // @@protoc_insertion_point(field_get:msg.CSDTObserveInfo.PvpId)
  return _internal_pvpid();
}
inline void CSDTObserveInfo::_internal_set_pvpid(uint64_t value) {
  
  _impl_.pvpid_ = value;
}
inline void CSDTObserveInfo::set_pvpid(uint64_t value) {
  _internal_set_pvpid(value);
  // @@protoc_insertion_point(field_set:msg.CSDTObserveInfo.PvpId)
}

// .msg.RESULT Result = 3;
inline void CSDTObserveInfo::clear_result() {
  _impl_.result_ = 0;
}
inline ::msg::RESULT CSDTObserveInfo::_internal_result() const {
  return static_cast< ::msg::RESULT >(_impl_.result_);
}
inline ::msg::RESULT CSDTObserveInfo::result() const {
  // @@protoc_insertion_point(field_get:msg.CSDTObserveInfo.Result)
  return _internal_result();
}
inline void CSDTObserveInfo::_internal_set_result(::msg::RESULT value) {
  
  _impl_.result_ = value;
}
inline void CSDTObserveInfo::set_result(::msg::RESULT value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:msg.CSDTObserveInfo.Result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::RESULT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::RESULT>() {
  return ::msg::RESULT_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_result_2eproto
