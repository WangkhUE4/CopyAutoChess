#if PLATFORM_WINDOWS
#pragma warning(disable:4100)
#pragma warning(disable:4125)
#pragma warning(disable:4267)
#pragma warning(disable:4668)
#pragma warning(disable:4800)
#pragma warning(disable:4456)
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle.proto

#if PLATFORM_WINDOWS
#pragma warning(disable:4125)
#pragma warning(disable:4668)
#endif
#ifndef GOOGLE_PROTOBUF_INCLUDED_battle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_battle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_battle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_battle_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_battle_2eproto;
namespace msg {
class AffixTriggerInfo;
struct AffixTriggerInfoDefaultTypeInternal;
extern AffixTriggerInfoDefaultTypeInternal _AffixTriggerInfo_default_instance_;
class BattleRoundData;
struct BattleRoundDataDefaultTypeInternal;
extern BattleRoundDataDefaultTypeInternal _BattleRoundData_default_instance_;
class CSNtfAA;
struct CSNtfAADefaultTypeInternal;
extern CSNtfAADefaultTypeInternal _CSNtfAA_default_instance_;
class CSNtfAntiAddictionRemoved;
struct CSNtfAntiAddictionRemovedDefaultTypeInternal;
extern CSNtfAntiAddictionRemovedDefaultTypeInternal _CSNtfAntiAddictionRemoved_default_instance_;
class CSNtfAntiAddictionTime;
struct CSNtfAntiAddictionTimeDefaultTypeInternal;
extern CSNtfAntiAddictionTimeDefaultTypeInternal _CSNtfAntiAddictionTime_default_instance_;
class CSNtfAntiAddictionTriggered;
struct CSNtfAntiAddictionTriggeredDefaultTypeInternal;
extern CSNtfAntiAddictionTriggeredDefaultTypeInternal _CSNtfAntiAddictionTriggered_default_instance_;
class CSNtfBattleTerminated;
struct CSNtfBattleTerminatedDefaultTypeInternal;
extern CSNtfBattleTerminatedDefaultTypeInternal _CSNtfBattleTerminated_default_instance_;
class CSNtfBuyChess;
struct CSNtfBuyChessDefaultTypeInternal;
extern CSNtfBuyChessDefaultTypeInternal _CSNtfBuyChess_default_instance_;
class CSNtfCandyReward;
struct CSNtfCandyRewardDefaultTypeInternal;
extern CSNtfCandyRewardDefaultTypeInternal _CSNtfCandyReward_default_instance_;
class CSNtfChessFromBagToMap;
struct CSNtfChessFromBagToMapDefaultTypeInternal;
extern CSNtfChessFromBagToMapDefaultTypeInternal _CSNtfChessFromBagToMap_default_instance_;
class CSNtfChessMoved;
struct CSNtfChessMovedDefaultTypeInternal;
extern CSNtfChessMovedDefaultTypeInternal _CSNtfChessMoved_default_instance_;
class CSNtfChessMovedWithinBag;
struct CSNtfChessMovedWithinBagDefaultTypeInternal;
extern CSNtfChessMovedWithinBagDefaultTypeInternal _CSNtfChessMovedWithinBag_default_instance_;
class CSNtfChessOnBoardSold;
struct CSNtfChessOnBoardSoldDefaultTypeInternal;
extern CSNtfChessOnBoardSoldDefaultTypeInternal _CSNtfChessOnBoardSold_default_instance_;
class CSNtfChessRemovedFromBag;
struct CSNtfChessRemovedFromBagDefaultTypeInternal;
extern CSNtfChessRemovedFromBagDefaultTypeInternal _CSNtfChessRemovedFromBag_default_instance_;
class CSNtfChessRetrievedToBag;
struct CSNtfChessRetrievedToBagDefaultTypeInternal;
extern CSNtfChessRetrievedToBagDefaultTypeInternal _CSNtfChessRetrievedToBag_default_instance_;
class CSNtfCreepDied;
struct CSNtfCreepDiedDefaultTypeInternal;
extern CSNtfCreepDiedDefaultTypeInternal _CSNtfCreepDied_default_instance_;
class CSNtfEquipDivision;
struct CSNtfEquipDivisionDefaultTypeInternal;
extern CSNtfEquipDivisionDefaultTypeInternal _CSNtfEquipDivision_default_instance_;
class CSNtfGameEnd;
struct CSNtfGameEndDefaultTypeInternal;
extern CSNtfGameEndDefaultTypeInternal _CSNtfGameEnd_default_instance_;
class CSNtfLeaveGameEarly;
struct CSNtfLeaveGameEarlyDefaultTypeInternal;
extern CSNtfLeaveGameEarlyDefaultTypeInternal _CSNtfLeaveGameEarly_default_instance_;
class CSNtfManuallyUpgradeCharacter;
struct CSNtfManuallyUpgradeCharacterDefaultTypeInternal;
extern CSNtfManuallyUpgradeCharacterDefaultTypeInternal _CSNtfManuallyUpgradeCharacter_default_instance_;
class CSNtfOperateEquipInBag;
struct CSNtfOperateEquipInBagDefaultTypeInternal;
extern CSNtfOperateEquipInBagDefaultTypeInternal _CSNtfOperateEquipInBag_default_instance_;
class CSNtfOperateEquipOnChess;
struct CSNtfOperateEquipOnChessDefaultTypeInternal;
extern CSNtfOperateEquipOnChessDefaultTypeInternal _CSNtfOperateEquipOnChess_default_instance_;
class CSNtfPassThrough;
struct CSNtfPassThroughDefaultTypeInternal;
extern CSNtfPassThroughDefaultTypeInternal _CSNtfPassThrough_default_instance_;
class CSNtfPickupEquipment;
struct CSNtfPickupEquipmentDefaultTypeInternal;
extern CSNtfPickupEquipmentDefaultTypeInternal _CSNtfPickupEquipment_default_instance_;
class CSNtfPlayerLvUpgraded;
struct CSNtfPlayerLvUpgradedDefaultTypeInternal;
extern CSNtfPlayerLvUpgradedDefaultTypeInternal _CSNtfPlayerLvUpgraded_default_instance_;
class CSNtfPvpAffixTrigger;
struct CSNtfPvpAffixTriggerDefaultTypeInternal;
extern CSNtfPvpAffixTriggerDefaultTypeInternal _CSNtfPvpAffixTrigger_default_instance_;
class CSNtfPvpChangeStage;
struct CSNtfPvpChangeStageDefaultTypeInternal;
extern CSNtfPvpChangeStageDefaultTypeInternal _CSNtfPvpChangeStage_default_instance_;
class CSNtfPvpPlayerAllReady;
struct CSNtfPvpPlayerAllReadyDefaultTypeInternal;
extern CSNtfPvpPlayerAllReadyDefaultTypeInternal _CSNtfPvpPlayerAllReady_default_instance_;
class CSNtfPvpPlayerDead;
struct CSNtfPvpPlayerDeadDefaultTypeInternal;
extern CSNtfPvpPlayerDeadDefaultTypeInternal _CSNtfPvpPlayerDead_default_instance_;
class CSNtfPvpPlayerLoggedIn;
struct CSNtfPvpPlayerLoggedInDefaultTypeInternal;
extern CSNtfPvpPlayerLoggedInDefaultTypeInternal _CSNtfPvpPlayerLoggedIn_default_instance_;
class CSNtfPvpPlayerOffline;
struct CSNtfPvpPlayerOfflineDefaultTypeInternal;
extern CSNtfPvpPlayerOfflineDefaultTypeInternal _CSNtfPvpPlayerOffline_default_instance_;
class CSNtfPvpSetReadyState;
struct CSNtfPvpSetReadyStateDefaultTypeInternal;
extern CSNtfPvpSetReadyStateDefaultTypeInternal _CSNtfPvpSetReadyState_default_instance_;
class CSNtfPvpState;
struct CSNtfPvpStateDefaultTypeInternal;
extern CSNtfPvpStateDefaultTypeInternal _CSNtfPvpState_default_instance_;
class CSNtfPvpUpdateMessengerPos;
struct CSNtfPvpUpdateMessengerPosDefaultTypeInternal;
extern CSNtfPvpUpdateMessengerPosDefaultTypeInternal _CSNtfPvpUpdateMessengerPos_default_instance_;
class CSNtfPvpUpdateMoney;
struct CSNtfPvpUpdateMoneyDefaultTypeInternal;
extern CSNtfPvpUpdateMoneyDefaultTypeInternal _CSNtfPvpUpdateMoney_default_instance_;
class CSNtfQuitBattle;
struct CSNtfQuitBattleDefaultTypeInternal;
extern CSNtfQuitBattleDefaultTypeInternal _CSNtfQuitBattle_default_instance_;
class CSNtfRoundResult;
struct CSNtfRoundResultDefaultTypeInternal;
extern CSNtfRoundResultDefaultTypeInternal _CSNtfRoundResult_default_instance_;
class CSNtfSetAutoUpgradeCharacter;
struct CSNtfSetAutoUpgradeCharacterDefaultTypeInternal;
extern CSNtfSetAutoUpgradeCharacterDefaultTypeInternal _CSNtfSetAutoUpgradeCharacter_default_instance_;
class CSNtfSetEnemy;
struct CSNtfSetEnemyDefaultTypeInternal;
extern CSNtfSetEnemyDefaultTypeInternal _CSNtfSetEnemy_default_instance_;
class CSNtfSetSeed;
struct CSNtfSetSeedDefaultTypeInternal;
extern CSNtfSetSeedDefaultTypeInternal _CSNtfSetSeed_default_instance_;
class CSNtfShopRefreshed;
struct CSNtfShopRefreshedDefaultTypeInternal;
extern CSNtfShopRefreshedDefaultTypeInternal _CSNtfShopRefreshed_default_instance_;
class CSNtfSuspendGame;
struct CSNtfSuspendGameDefaultTypeInternal;
extern CSNtfSuspendGameDefaultTypeInternal _CSNtfSuspendGame_default_instance_;
class CSNtfUnsuggestedPhase;
struct CSNtfUnsuggestedPhaseDefaultTypeInternal;
extern CSNtfUnsuggestedPhaseDefaultTypeInternal _CSNtfUnsuggestedPhase_default_instance_;
class CSNtfUpdateBattleResult;
struct CSNtfUpdateBattleResultDefaultTypeInternal;
extern CSNtfUpdateBattleResultDefaultTypeInternal _CSNtfUpdateBattleResult_default_instance_;
class CSNtfUpdateExp;
struct CSNtfUpdateExpDefaultTypeInternal;
extern CSNtfUpdateExpDefaultTypeInternal _CSNtfUpdateExp_default_instance_;
class CSNtfUpdateHp;
struct CSNtfUpdateHpDefaultTypeInternal;
extern CSNtfUpdateHpDefaultTypeInternal _CSNtfUpdateHp_default_instance_;
class CSNtfUseEquipment;
struct CSNtfUseEquipmentDefaultTypeInternal;
extern CSNtfUseEquipmentDefaultTypeInternal _CSNtfUseEquipment_default_instance_;
class CSNtfVisitPlayer;
struct CSNtfVisitPlayerDefaultTypeInternal;
extern CSNtfVisitPlayerDefaultTypeInternal _CSNtfVisitPlayer_default_instance_;
class CSNtfWinStreak;
struct CSNtfWinStreakDefaultTypeInternal;
extern CSNtfWinStreakDefaultTypeInternal _CSNtfWinStreak_default_instance_;
class CSReqBuyChess;
struct CSReqBuyChessDefaultTypeInternal;
extern CSReqBuyChessDefaultTypeInternal _CSReqBuyChess_default_instance_;
class CSReqBuyExp;
struct CSReqBuyExpDefaultTypeInternal;
extern CSReqBuyExpDefaultTypeInternal _CSReqBuyExp_default_instance_;
class CSReqCancelReconnect;
struct CSReqCancelReconnectDefaultTypeInternal;
extern CSReqCancelReconnectDefaultTypeInternal _CSReqCancelReconnect_default_instance_;
class CSReqChessDB;
struct CSReqChessDBDefaultTypeInternal;
extern CSReqChessDBDefaultTypeInternal _CSReqChessDB_default_instance_;
class CSReqCraftEquip;
struct CSReqCraftEquipDefaultTypeInternal;
extern CSReqCraftEquipDefaultTypeInternal _CSReqCraftEquip_default_instance_;
class CSReqLeaveGameEarly;
struct CSReqLeaveGameEarlyDefaultTypeInternal;
extern CSReqLeaveGameEarlyDefaultTypeInternal _CSReqLeaveGameEarly_default_instance_;
class CSReqManuallyUpgradeCharacter;
struct CSReqManuallyUpgradeCharacterDefaultTypeInternal;
extern CSReqManuallyUpgradeCharacterDefaultTypeInternal _CSReqManuallyUpgradeCharacter_default_instance_;
class CSReqMoveChess;
struct CSReqMoveChessDefaultTypeInternal;
extern CSReqMoveChessDefaultTypeInternal _CSReqMoveChess_default_instance_;
class CSReqMoveChessInBagToMap;
struct CSReqMoveChessInBagToMapDefaultTypeInternal;
extern CSReqMoveChessInBagToMapDefaultTypeInternal _CSReqMoveChessInBagToMap_default_instance_;
class CSReqMoveChessWithinBag;
struct CSReqMoveChessWithinBagDefaultTypeInternal;
extern CSReqMoveChessWithinBagDefaultTypeInternal _CSReqMoveChessWithinBag_default_instance_;
class CSReqPassThrough;
struct CSReqPassThroughDefaultTypeInternal;
extern CSReqPassThroughDefaultTypeInternal _CSReqPassThrough_default_instance_;
class CSReqPickupEquipment;
struct CSReqPickupEquipmentDefaultTypeInternal;
extern CSReqPickupEquipmentDefaultTypeInternal _CSReqPickupEquipment_default_instance_;
class CSReqPlayerLoaded;
struct CSReqPlayerLoadedDefaultTypeInternal;
extern CSReqPlayerLoadedDefaultTypeInternal _CSReqPlayerLoaded_default_instance_;
class CSReqPlayerRoundEnd;
struct CSReqPlayerRoundEndDefaultTypeInternal;
extern CSReqPlayerRoundEndDefaultTypeInternal _CSReqPlayerRoundEnd_default_instance_;
class CSReqPvpSetReadyState;
struct CSReqPvpSetReadyStateDefaultTypeInternal;
extern CSReqPvpSetReadyStateDefaultTypeInternal _CSReqPvpSetReadyState_default_instance_;
class CSReqQuitBattle;
struct CSReqQuitBattleDefaultTypeInternal;
extern CSReqQuitBattleDefaultTypeInternal _CSReqQuitBattle_default_instance_;
class CSReqReconnect;
struct CSReqReconnectDefaultTypeInternal;
extern CSReqReconnectDefaultTypeInternal _CSReqReconnect_default_instance_;
class CSReqRefreshShop;
struct CSReqRefreshShopDefaultTypeInternal;
extern CSReqRefreshShopDefaultTypeInternal _CSReqRefreshShop_default_instance_;
class CSReqReportAbsent;
struct CSReqReportAbsentDefaultTypeInternal;
extern CSReqReportAbsentDefaultTypeInternal _CSReqReportAbsent_default_instance_;
class CSReqRetrieveChess;
struct CSReqRetrieveChessDefaultTypeInternal;
extern CSReqRetrieveChessDefaultTypeInternal _CSReqRetrieveChess_default_instance_;
class CSReqSellChessInBag;
struct CSReqSellChessInBagDefaultTypeInternal;
extern CSReqSellChessInBagDefaultTypeInternal _CSReqSellChessInBag_default_instance_;
class CSReqSellChessOnBoard;
struct CSReqSellChessOnBoardDefaultTypeInternal;
extern CSReqSellChessOnBoardDefaultTypeInternal _CSReqSellChessOnBoard_default_instance_;
class CSReqSetAutoUpgradeCharacter;
struct CSReqSetAutoUpgradeCharacterDefaultTypeInternal;
extern CSReqSetAutoUpgradeCharacterDefaultTypeInternal _CSReqSetAutoUpgradeCharacter_default_instance_;
class CSReqSetMessengerPos;
struct CSReqSetMessengerPosDefaultTypeInternal;
extern CSReqSetMessengerPosDefaultTypeInternal _CSReqSetMessengerPos_default_instance_;
class CSReqSetRefreshShopLock;
struct CSReqSetRefreshShopLockDefaultTypeInternal;
extern CSReqSetRefreshShopLockDefaultTypeInternal _CSReqSetRefreshShopLock_default_instance_;
class CSReqStatisticsInfo;
struct CSReqStatisticsInfoDefaultTypeInternal;
extern CSReqStatisticsInfoDefaultTypeInternal _CSReqStatisticsInfo_default_instance_;
class CSReqSusPendGame;
struct CSReqSusPendGameDefaultTypeInternal;
extern CSReqSusPendGameDefaultTypeInternal _CSReqSusPendGame_default_instance_;
class CSReqUpdateAntiAddictionTime;
struct CSReqUpdateAntiAddictionTimeDefaultTypeInternal;
extern CSReqUpdateAntiAddictionTimeDefaultTypeInternal _CSReqUpdateAntiAddictionTime_default_instance_;
class CSReqUpdateBattleResult;
struct CSReqUpdateBattleResultDefaultTypeInternal;
extern CSReqUpdateBattleResultDefaultTypeInternal _CSReqUpdateBattleResult_default_instance_;
class CSReqUseEquipment;
struct CSReqUseEquipmentDefaultTypeInternal;
extern CSReqUseEquipmentDefaultTypeInternal _CSReqUseEquipment_default_instance_;
class CSReqVisitPlayer;
struct CSReqVisitPlayerDefaultTypeInternal;
extern CSReqVisitPlayerDefaultTypeInternal _CSReqVisitPlayer_default_instance_;
class CSRspBuyChess;
struct CSRspBuyChessDefaultTypeInternal;
extern CSRspBuyChessDefaultTypeInternal _CSRspBuyChess_default_instance_;
class CSRspBuyExp;
struct CSRspBuyExpDefaultTypeInternal;
extern CSRspBuyExpDefaultTypeInternal _CSRspBuyExp_default_instance_;
class CSRspCancelReconnect;
struct CSRspCancelReconnectDefaultTypeInternal;
extern CSRspCancelReconnectDefaultTypeInternal _CSRspCancelReconnect_default_instance_;
class CSRspChessDB;
struct CSRspChessDBDefaultTypeInternal;
extern CSRspChessDBDefaultTypeInternal _CSRspChessDB_default_instance_;
class CSRspCraftEquip;
struct CSRspCraftEquipDefaultTypeInternal;
extern CSRspCraftEquipDefaultTypeInternal _CSRspCraftEquip_default_instance_;
class CSRspLeaveGameEarly;
struct CSRspLeaveGameEarlyDefaultTypeInternal;
extern CSRspLeaveGameEarlyDefaultTypeInternal _CSRspLeaveGameEarly_default_instance_;
class CSRspManuallyUpgradeCharacter;
struct CSRspManuallyUpgradeCharacterDefaultTypeInternal;
extern CSRspManuallyUpgradeCharacterDefaultTypeInternal _CSRspManuallyUpgradeCharacter_default_instance_;
class CSRspMoveChess;
struct CSRspMoveChessDefaultTypeInternal;
extern CSRspMoveChessDefaultTypeInternal _CSRspMoveChess_default_instance_;
class CSRspMoveChessInBagToMap;
struct CSRspMoveChessInBagToMapDefaultTypeInternal;
extern CSRspMoveChessInBagToMapDefaultTypeInternal _CSRspMoveChessInBagToMap_default_instance_;
class CSRspMoveChessWithinBag;
struct CSRspMoveChessWithinBagDefaultTypeInternal;
extern CSRspMoveChessWithinBagDefaultTypeInternal _CSRspMoveChessWithinBag_default_instance_;
class CSRspPassThrough;
struct CSRspPassThroughDefaultTypeInternal;
extern CSRspPassThroughDefaultTypeInternal _CSRspPassThrough_default_instance_;
class CSRspPickupEquipment;
struct CSRspPickupEquipmentDefaultTypeInternal;
extern CSRspPickupEquipmentDefaultTypeInternal _CSRspPickupEquipment_default_instance_;
class CSRspPlayerLoaded;
struct CSRspPlayerLoadedDefaultTypeInternal;
extern CSRspPlayerLoadedDefaultTypeInternal _CSRspPlayerLoaded_default_instance_;
class CSRspPlayerRoundEnd;
struct CSRspPlayerRoundEndDefaultTypeInternal;
extern CSRspPlayerRoundEndDefaultTypeInternal _CSRspPlayerRoundEnd_default_instance_;
class CSRspPvpSetReadyState;
struct CSRspPvpSetReadyStateDefaultTypeInternal;
extern CSRspPvpSetReadyStateDefaultTypeInternal _CSRspPvpSetReadyState_default_instance_;
class CSRspQuitBattle;
struct CSRspQuitBattleDefaultTypeInternal;
extern CSRspQuitBattleDefaultTypeInternal _CSRspQuitBattle_default_instance_;
class CSRspReconnect;
struct CSRspReconnectDefaultTypeInternal;
extern CSRspReconnectDefaultTypeInternal _CSRspReconnect_default_instance_;
class CSRspRefreshShop;
struct CSRspRefreshShopDefaultTypeInternal;
extern CSRspRefreshShopDefaultTypeInternal _CSRspRefreshShop_default_instance_;
class CSRspReportAbsent;
struct CSRspReportAbsentDefaultTypeInternal;
extern CSRspReportAbsentDefaultTypeInternal _CSRspReportAbsent_default_instance_;
class CSRspRetrieveChess;
struct CSRspRetrieveChessDefaultTypeInternal;
extern CSRspRetrieveChessDefaultTypeInternal _CSRspRetrieveChess_default_instance_;
class CSRspSellChessInBag;
struct CSRspSellChessInBagDefaultTypeInternal;
extern CSRspSellChessInBagDefaultTypeInternal _CSRspSellChessInBag_default_instance_;
class CSRspSellChessOnBoard;
struct CSRspSellChessOnBoardDefaultTypeInternal;
extern CSRspSellChessOnBoardDefaultTypeInternal _CSRspSellChessOnBoard_default_instance_;
class CSRspSetAutoUpgradeCharacter;
struct CSRspSetAutoUpgradeCharacterDefaultTypeInternal;
extern CSRspSetAutoUpgradeCharacterDefaultTypeInternal _CSRspSetAutoUpgradeCharacter_default_instance_;
class CSRspSetMessengerPos;
struct CSRspSetMessengerPosDefaultTypeInternal;
extern CSRspSetMessengerPosDefaultTypeInternal _CSRspSetMessengerPos_default_instance_;
class CSRspSetRefreshShopLock;
struct CSRspSetRefreshShopLockDefaultTypeInternal;
extern CSRspSetRefreshShopLockDefaultTypeInternal _CSRspSetRefreshShopLock_default_instance_;
class CSRspStatisticsInfo;
struct CSRspStatisticsInfoDefaultTypeInternal;
extern CSRspStatisticsInfoDefaultTypeInternal _CSRspStatisticsInfo_default_instance_;
class CSRspSusPendGame;
struct CSRspSusPendGameDefaultTypeInternal;
extern CSRspSusPendGameDefaultTypeInternal _CSRspSusPendGame_default_instance_;
class CSRspUpdateAntiAddictionTime;
struct CSRspUpdateAntiAddictionTimeDefaultTypeInternal;
extern CSRspUpdateAntiAddictionTimeDefaultTypeInternal _CSRspUpdateAntiAddictionTime_default_instance_;
class CSRspUpdateBattleResult;
struct CSRspUpdateBattleResultDefaultTypeInternal;
extern CSRspUpdateBattleResultDefaultTypeInternal _CSRspUpdateBattleResult_default_instance_;
class CSRspUpdateRank;
struct CSRspUpdateRankDefaultTypeInternal;
extern CSRspUpdateRankDefaultTypeInternal _CSRspUpdateRank_default_instance_;
class CSRspUseEquipment;
struct CSRspUseEquipmentDefaultTypeInternal;
extern CSRspUseEquipmentDefaultTypeInternal _CSRspUseEquipment_default_instance_;
class CSRspVisitPlayer;
struct CSRspVisitPlayerDefaultTypeInternal;
extern CSRspVisitPlayerDefaultTypeInternal _CSRspVisitPlayer_default_instance_;
class Character;
struct CharacterDefaultTypeInternal;
extern CharacterDefaultTypeInternal _Character_default_instance_;
class CharacterInTheBag;
struct CharacterInTheBagDefaultTypeInternal;
extern CharacterInTheBagDefaultTypeInternal _CharacterInTheBag_default_instance_;
class CharacterOnTheMap;
struct CharacterOnTheMapDefaultTypeInternal;
extern CharacterOnTheMapDefaultTypeInternal _CharacterOnTheMap_default_instance_;
class ChessNumber;
struct ChessNumberDefaultTypeInternal;
extern ChessNumberDefaultTypeInternal _ChessNumber_default_instance_;
class ChessPiecesData;
struct ChessPiecesDataDefaultTypeInternal;
extern ChessPiecesDataDefaultTypeInternal _ChessPiecesData_default_instance_;
class ChessPiecesMapLevData;
struct ChessPiecesMapLevDataDefaultTypeInternal;
extern ChessPiecesMapLevDataDefaultTypeInternal _ChessPiecesMapLevData_default_instance_;
class CorrectFormation;
struct CorrectFormationDefaultTypeInternal;
extern CorrectFormationDefaultTypeInternal _CorrectFormation_default_instance_;
class Division;
struct DivisionDefaultTypeInternal;
extern DivisionDefaultTypeInternal _Division_default_instance_;
class EquipmentInfo;
struct EquipmentInfoDefaultTypeInternal;
extern EquipmentInfoDefaultTypeInternal _EquipmentInfo_default_instance_;
class Item;
struct ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class ItemInTheBag;
struct ItemInTheBagDefaultTypeInternal;
extern ItemInTheBagDefaultTypeInternal _ItemInTheBag_default_instance_;
class ItemOnTheGround;
struct ItemOnTheGroundDefaultTypeInternal;
extern ItemOnTheGroundDefaultTypeInternal _ItemOnTheGround_default_instance_;
class PlayerBasicInfo;
struct PlayerBasicInfoDefaultTypeInternal;
extern PlayerBasicInfoDefaultTypeInternal _PlayerBasicInfo_default_instance_;
class PlayerChessNumber;
struct PlayerChessNumberDefaultTypeInternal;
extern PlayerChessNumberDefaultTypeInternal _PlayerChessNumber_default_instance_;
class PlayerStatisticsInfo;
struct PlayerStatisticsInfoDefaultTypeInternal;
extern PlayerStatisticsInfoDefaultTypeInternal _PlayerStatisticsInfo_default_instance_;
class PositionFloat2D;
struct PositionFloat2DDefaultTypeInternal;
extern PositionFloat2DDefaultTypeInternal _PositionFloat2D_default_instance_;
class PositionInt2D;
struct PositionInt2DDefaultTypeInternal;
extern PositionInt2DDefaultTypeInternal _PositionInt2D_default_instance_;
class ReconnectPlayer;
struct ReconnectPlayerDefaultTypeInternal;
extern ReconnectPlayerDefaultTypeInternal _ReconnectPlayer_default_instance_;
class ReflushChessData;
struct ReflushChessDataDefaultTypeInternal;
extern ReflushChessDataDefaultTypeInternal _ReflushChessData_default_instance_;
class RoundInfo;
struct RoundInfoDefaultTypeInternal;
extern RoundInfoDefaultTypeInternal _RoundInfo_default_instance_;
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::AffixTriggerInfo* Arena::CreateMaybeMessage<::msg::AffixTriggerInfo>(Arena*);
template<> ::msg::BattleRoundData* Arena::CreateMaybeMessage<::msg::BattleRoundData>(Arena*);
template<> ::msg::CSNtfAA* Arena::CreateMaybeMessage<::msg::CSNtfAA>(Arena*);
template<> ::msg::CSNtfAntiAddictionRemoved* Arena::CreateMaybeMessage<::msg::CSNtfAntiAddictionRemoved>(Arena*);
template<> ::msg::CSNtfAntiAddictionTime* Arena::CreateMaybeMessage<::msg::CSNtfAntiAddictionTime>(Arena*);
template<> ::msg::CSNtfAntiAddictionTriggered* Arena::CreateMaybeMessage<::msg::CSNtfAntiAddictionTriggered>(Arena*);
template<> ::msg::CSNtfBattleTerminated* Arena::CreateMaybeMessage<::msg::CSNtfBattleTerminated>(Arena*);
template<> ::msg::CSNtfBuyChess* Arena::CreateMaybeMessage<::msg::CSNtfBuyChess>(Arena*);
template<> ::msg::CSNtfCandyReward* Arena::CreateMaybeMessage<::msg::CSNtfCandyReward>(Arena*);
template<> ::msg::CSNtfChessFromBagToMap* Arena::CreateMaybeMessage<::msg::CSNtfChessFromBagToMap>(Arena*);
template<> ::msg::CSNtfChessMoved* Arena::CreateMaybeMessage<::msg::CSNtfChessMoved>(Arena*);
template<> ::msg::CSNtfChessMovedWithinBag* Arena::CreateMaybeMessage<::msg::CSNtfChessMovedWithinBag>(Arena*);
template<> ::msg::CSNtfChessOnBoardSold* Arena::CreateMaybeMessage<::msg::CSNtfChessOnBoardSold>(Arena*);
template<> ::msg::CSNtfChessRemovedFromBag* Arena::CreateMaybeMessage<::msg::CSNtfChessRemovedFromBag>(Arena*);
template<> ::msg::CSNtfChessRetrievedToBag* Arena::CreateMaybeMessage<::msg::CSNtfChessRetrievedToBag>(Arena*);
template<> ::msg::CSNtfCreepDied* Arena::CreateMaybeMessage<::msg::CSNtfCreepDied>(Arena*);
template<> ::msg::CSNtfEquipDivision* Arena::CreateMaybeMessage<::msg::CSNtfEquipDivision>(Arena*);
template<> ::msg::CSNtfGameEnd* Arena::CreateMaybeMessage<::msg::CSNtfGameEnd>(Arena*);
template<> ::msg::CSNtfLeaveGameEarly* Arena::CreateMaybeMessage<::msg::CSNtfLeaveGameEarly>(Arena*);
template<> ::msg::CSNtfManuallyUpgradeCharacter* Arena::CreateMaybeMessage<::msg::CSNtfManuallyUpgradeCharacter>(Arena*);
template<> ::msg::CSNtfOperateEquipInBag* Arena::CreateMaybeMessage<::msg::CSNtfOperateEquipInBag>(Arena*);
template<> ::msg::CSNtfOperateEquipOnChess* Arena::CreateMaybeMessage<::msg::CSNtfOperateEquipOnChess>(Arena*);
template<> ::msg::CSNtfPassThrough* Arena::CreateMaybeMessage<::msg::CSNtfPassThrough>(Arena*);
template<> ::msg::CSNtfPickupEquipment* Arena::CreateMaybeMessage<::msg::CSNtfPickupEquipment>(Arena*);
template<> ::msg::CSNtfPlayerLvUpgraded* Arena::CreateMaybeMessage<::msg::CSNtfPlayerLvUpgraded>(Arena*);
template<> ::msg::CSNtfPvpAffixTrigger* Arena::CreateMaybeMessage<::msg::CSNtfPvpAffixTrigger>(Arena*);
template<> ::msg::CSNtfPvpChangeStage* Arena::CreateMaybeMessage<::msg::CSNtfPvpChangeStage>(Arena*);
template<> ::msg::CSNtfPvpPlayerAllReady* Arena::CreateMaybeMessage<::msg::CSNtfPvpPlayerAllReady>(Arena*);
template<> ::msg::CSNtfPvpPlayerDead* Arena::CreateMaybeMessage<::msg::CSNtfPvpPlayerDead>(Arena*);
template<> ::msg::CSNtfPvpPlayerLoggedIn* Arena::CreateMaybeMessage<::msg::CSNtfPvpPlayerLoggedIn>(Arena*);
template<> ::msg::CSNtfPvpPlayerOffline* Arena::CreateMaybeMessage<::msg::CSNtfPvpPlayerOffline>(Arena*);
template<> ::msg::CSNtfPvpSetReadyState* Arena::CreateMaybeMessage<::msg::CSNtfPvpSetReadyState>(Arena*);
template<> ::msg::CSNtfPvpState* Arena::CreateMaybeMessage<::msg::CSNtfPvpState>(Arena*);
template<> ::msg::CSNtfPvpUpdateMessengerPos* Arena::CreateMaybeMessage<::msg::CSNtfPvpUpdateMessengerPos>(Arena*);
template<> ::msg::CSNtfPvpUpdateMoney* Arena::CreateMaybeMessage<::msg::CSNtfPvpUpdateMoney>(Arena*);
template<> ::msg::CSNtfQuitBattle* Arena::CreateMaybeMessage<::msg::CSNtfQuitBattle>(Arena*);
template<> ::msg::CSNtfRoundResult* Arena::CreateMaybeMessage<::msg::CSNtfRoundResult>(Arena*);
template<> ::msg::CSNtfSetAutoUpgradeCharacter* Arena::CreateMaybeMessage<::msg::CSNtfSetAutoUpgradeCharacter>(Arena*);
template<> ::msg::CSNtfSetEnemy* Arena::CreateMaybeMessage<::msg::CSNtfSetEnemy>(Arena*);
template<> ::msg::CSNtfSetSeed* Arena::CreateMaybeMessage<::msg::CSNtfSetSeed>(Arena*);
template<> ::msg::CSNtfShopRefreshed* Arena::CreateMaybeMessage<::msg::CSNtfShopRefreshed>(Arena*);
template<> ::msg::CSNtfSuspendGame* Arena::CreateMaybeMessage<::msg::CSNtfSuspendGame>(Arena*);
template<> ::msg::CSNtfUnsuggestedPhase* Arena::CreateMaybeMessage<::msg::CSNtfUnsuggestedPhase>(Arena*);
template<> ::msg::CSNtfUpdateBattleResult* Arena::CreateMaybeMessage<::msg::CSNtfUpdateBattleResult>(Arena*);
template<> ::msg::CSNtfUpdateExp* Arena::CreateMaybeMessage<::msg::CSNtfUpdateExp>(Arena*);
template<> ::msg::CSNtfUpdateHp* Arena::CreateMaybeMessage<::msg::CSNtfUpdateHp>(Arena*);
template<> ::msg::CSNtfUseEquipment* Arena::CreateMaybeMessage<::msg::CSNtfUseEquipment>(Arena*);
template<> ::msg::CSNtfVisitPlayer* Arena::CreateMaybeMessage<::msg::CSNtfVisitPlayer>(Arena*);
template<> ::msg::CSNtfWinStreak* Arena::CreateMaybeMessage<::msg::CSNtfWinStreak>(Arena*);
template<> ::msg::CSReqBuyChess* Arena::CreateMaybeMessage<::msg::CSReqBuyChess>(Arena*);
template<> ::msg::CSReqBuyExp* Arena::CreateMaybeMessage<::msg::CSReqBuyExp>(Arena*);
template<> ::msg::CSReqCancelReconnect* Arena::CreateMaybeMessage<::msg::CSReqCancelReconnect>(Arena*);
template<> ::msg::CSReqChessDB* Arena::CreateMaybeMessage<::msg::CSReqChessDB>(Arena*);
template<> ::msg::CSReqCraftEquip* Arena::CreateMaybeMessage<::msg::CSReqCraftEquip>(Arena*);
template<> ::msg::CSReqLeaveGameEarly* Arena::CreateMaybeMessage<::msg::CSReqLeaveGameEarly>(Arena*);
template<> ::msg::CSReqManuallyUpgradeCharacter* Arena::CreateMaybeMessage<::msg::CSReqManuallyUpgradeCharacter>(Arena*);
template<> ::msg::CSReqMoveChess* Arena::CreateMaybeMessage<::msg::CSReqMoveChess>(Arena*);
template<> ::msg::CSReqMoveChessInBagToMap* Arena::CreateMaybeMessage<::msg::CSReqMoveChessInBagToMap>(Arena*);
template<> ::msg::CSReqMoveChessWithinBag* Arena::CreateMaybeMessage<::msg::CSReqMoveChessWithinBag>(Arena*);
template<> ::msg::CSReqPassThrough* Arena::CreateMaybeMessage<::msg::CSReqPassThrough>(Arena*);
template<> ::msg::CSReqPickupEquipment* Arena::CreateMaybeMessage<::msg::CSReqPickupEquipment>(Arena*);
template<> ::msg::CSReqPlayerLoaded* Arena::CreateMaybeMessage<::msg::CSReqPlayerLoaded>(Arena*);
template<> ::msg::CSReqPlayerRoundEnd* Arena::CreateMaybeMessage<::msg::CSReqPlayerRoundEnd>(Arena*);
template<> ::msg::CSReqPvpSetReadyState* Arena::CreateMaybeMessage<::msg::CSReqPvpSetReadyState>(Arena*);
template<> ::msg::CSReqQuitBattle* Arena::CreateMaybeMessage<::msg::CSReqQuitBattle>(Arena*);
template<> ::msg::CSReqReconnect* Arena::CreateMaybeMessage<::msg::CSReqReconnect>(Arena*);
template<> ::msg::CSReqRefreshShop* Arena::CreateMaybeMessage<::msg::CSReqRefreshShop>(Arena*);
template<> ::msg::CSReqReportAbsent* Arena::CreateMaybeMessage<::msg::CSReqReportAbsent>(Arena*);
template<> ::msg::CSReqRetrieveChess* Arena::CreateMaybeMessage<::msg::CSReqRetrieveChess>(Arena*);
template<> ::msg::CSReqSellChessInBag* Arena::CreateMaybeMessage<::msg::CSReqSellChessInBag>(Arena*);
template<> ::msg::CSReqSellChessOnBoard* Arena::CreateMaybeMessage<::msg::CSReqSellChessOnBoard>(Arena*);
template<> ::msg::CSReqSetAutoUpgradeCharacter* Arena::CreateMaybeMessage<::msg::CSReqSetAutoUpgradeCharacter>(Arena*);
template<> ::msg::CSReqSetMessengerPos* Arena::CreateMaybeMessage<::msg::CSReqSetMessengerPos>(Arena*);
template<> ::msg::CSReqSetRefreshShopLock* Arena::CreateMaybeMessage<::msg::CSReqSetRefreshShopLock>(Arena*);
template<> ::msg::CSReqStatisticsInfo* Arena::CreateMaybeMessage<::msg::CSReqStatisticsInfo>(Arena*);
template<> ::msg::CSReqSusPendGame* Arena::CreateMaybeMessage<::msg::CSReqSusPendGame>(Arena*);
template<> ::msg::CSReqUpdateAntiAddictionTime* Arena::CreateMaybeMessage<::msg::CSReqUpdateAntiAddictionTime>(Arena*);
template<> ::msg::CSReqUpdateBattleResult* Arena::CreateMaybeMessage<::msg::CSReqUpdateBattleResult>(Arena*);
template<> ::msg::CSReqUseEquipment* Arena::CreateMaybeMessage<::msg::CSReqUseEquipment>(Arena*);
template<> ::msg::CSReqVisitPlayer* Arena::CreateMaybeMessage<::msg::CSReqVisitPlayer>(Arena*);
template<> ::msg::CSRspBuyChess* Arena::CreateMaybeMessage<::msg::CSRspBuyChess>(Arena*);
template<> ::msg::CSRspBuyExp* Arena::CreateMaybeMessage<::msg::CSRspBuyExp>(Arena*);
template<> ::msg::CSRspCancelReconnect* Arena::CreateMaybeMessage<::msg::CSRspCancelReconnect>(Arena*);
template<> ::msg::CSRspChessDB* Arena::CreateMaybeMessage<::msg::CSRspChessDB>(Arena*);
template<> ::msg::CSRspCraftEquip* Arena::CreateMaybeMessage<::msg::CSRspCraftEquip>(Arena*);
template<> ::msg::CSRspLeaveGameEarly* Arena::CreateMaybeMessage<::msg::CSRspLeaveGameEarly>(Arena*);
template<> ::msg::CSRspManuallyUpgradeCharacter* Arena::CreateMaybeMessage<::msg::CSRspManuallyUpgradeCharacter>(Arena*);
template<> ::msg::CSRspMoveChess* Arena::CreateMaybeMessage<::msg::CSRspMoveChess>(Arena*);
template<> ::msg::CSRspMoveChessInBagToMap* Arena::CreateMaybeMessage<::msg::CSRspMoveChessInBagToMap>(Arena*);
template<> ::msg::CSRspMoveChessWithinBag* Arena::CreateMaybeMessage<::msg::CSRspMoveChessWithinBag>(Arena*);
template<> ::msg::CSRspPassThrough* Arena::CreateMaybeMessage<::msg::CSRspPassThrough>(Arena*);
template<> ::msg::CSRspPickupEquipment* Arena::CreateMaybeMessage<::msg::CSRspPickupEquipment>(Arena*);
template<> ::msg::CSRspPlayerLoaded* Arena::CreateMaybeMessage<::msg::CSRspPlayerLoaded>(Arena*);
template<> ::msg::CSRspPlayerRoundEnd* Arena::CreateMaybeMessage<::msg::CSRspPlayerRoundEnd>(Arena*);
template<> ::msg::CSRspPvpSetReadyState* Arena::CreateMaybeMessage<::msg::CSRspPvpSetReadyState>(Arena*);
template<> ::msg::CSRspQuitBattle* Arena::CreateMaybeMessage<::msg::CSRspQuitBattle>(Arena*);
template<> ::msg::CSRspReconnect* Arena::CreateMaybeMessage<::msg::CSRspReconnect>(Arena*);
template<> ::msg::CSRspRefreshShop* Arena::CreateMaybeMessage<::msg::CSRspRefreshShop>(Arena*);
template<> ::msg::CSRspReportAbsent* Arena::CreateMaybeMessage<::msg::CSRspReportAbsent>(Arena*);
template<> ::msg::CSRspRetrieveChess* Arena::CreateMaybeMessage<::msg::CSRspRetrieveChess>(Arena*);
template<> ::msg::CSRspSellChessInBag* Arena::CreateMaybeMessage<::msg::CSRspSellChessInBag>(Arena*);
template<> ::msg::CSRspSellChessOnBoard* Arena::CreateMaybeMessage<::msg::CSRspSellChessOnBoard>(Arena*);
template<> ::msg::CSRspSetAutoUpgradeCharacter* Arena::CreateMaybeMessage<::msg::CSRspSetAutoUpgradeCharacter>(Arena*);
template<> ::msg::CSRspSetMessengerPos* Arena::CreateMaybeMessage<::msg::CSRspSetMessengerPos>(Arena*);
template<> ::msg::CSRspSetRefreshShopLock* Arena::CreateMaybeMessage<::msg::CSRspSetRefreshShopLock>(Arena*);
template<> ::msg::CSRspStatisticsInfo* Arena::CreateMaybeMessage<::msg::CSRspStatisticsInfo>(Arena*);
template<> ::msg::CSRspSusPendGame* Arena::CreateMaybeMessage<::msg::CSRspSusPendGame>(Arena*);
template<> ::msg::CSRspUpdateAntiAddictionTime* Arena::CreateMaybeMessage<::msg::CSRspUpdateAntiAddictionTime>(Arena*);
template<> ::msg::CSRspUpdateBattleResult* Arena::CreateMaybeMessage<::msg::CSRspUpdateBattleResult>(Arena*);
template<> ::msg::CSRspUpdateRank* Arena::CreateMaybeMessage<::msg::CSRspUpdateRank>(Arena*);
template<> ::msg::CSRspUseEquipment* Arena::CreateMaybeMessage<::msg::CSRspUseEquipment>(Arena*);
template<> ::msg::CSRspVisitPlayer* Arena::CreateMaybeMessage<::msg::CSRspVisitPlayer>(Arena*);
template<> ::msg::Character* Arena::CreateMaybeMessage<::msg::Character>(Arena*);
template<> ::msg::CharacterInTheBag* Arena::CreateMaybeMessage<::msg::CharacterInTheBag>(Arena*);
template<> ::msg::CharacterOnTheMap* Arena::CreateMaybeMessage<::msg::CharacterOnTheMap>(Arena*);
template<> ::msg::ChessNumber* Arena::CreateMaybeMessage<::msg::ChessNumber>(Arena*);
template<> ::msg::ChessPiecesData* Arena::CreateMaybeMessage<::msg::ChessPiecesData>(Arena*);
template<> ::msg::ChessPiecesMapLevData* Arena::CreateMaybeMessage<::msg::ChessPiecesMapLevData>(Arena*);
template<> ::msg::CorrectFormation* Arena::CreateMaybeMessage<::msg::CorrectFormation>(Arena*);
template<> ::msg::Division* Arena::CreateMaybeMessage<::msg::Division>(Arena*);
template<> ::msg::EquipmentInfo* Arena::CreateMaybeMessage<::msg::EquipmentInfo>(Arena*);
template<> ::msg::Item* Arena::CreateMaybeMessage<::msg::Item>(Arena*);
template<> ::msg::ItemInTheBag* Arena::CreateMaybeMessage<::msg::ItemInTheBag>(Arena*);
template<> ::msg::ItemOnTheGround* Arena::CreateMaybeMessage<::msg::ItemOnTheGround>(Arena*);
template<> ::msg::PlayerBasicInfo* Arena::CreateMaybeMessage<::msg::PlayerBasicInfo>(Arena*);
template<> ::msg::PlayerChessNumber* Arena::CreateMaybeMessage<::msg::PlayerChessNumber>(Arena*);
template<> ::msg::PlayerStatisticsInfo* Arena::CreateMaybeMessage<::msg::PlayerStatisticsInfo>(Arena*);
template<> ::msg::PositionFloat2D* Arena::CreateMaybeMessage<::msg::PositionFloat2D>(Arena*);
template<> ::msg::PositionInt2D* Arena::CreateMaybeMessage<::msg::PositionInt2D>(Arena*);
template<> ::msg::ReconnectPlayer* Arena::CreateMaybeMessage<::msg::ReconnectPlayer>(Arena*);
template<> ::msg::ReflushChessData* Arena::CreateMaybeMessage<::msg::ReflushChessData>(Arena*);
template<> ::msg::RoundInfo* Arena::CreateMaybeMessage<::msg::RoundInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {

enum GameStage : int {
  RoundStart = 0,
  GetReady = 1,
  Freeze = 2,
  Battle = 3,
  End = 4,
  StageCount = 5,
  GameStage_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GameStage_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GameStage_IsValid(int value);
constexpr GameStage GameStage_MIN = RoundStart;
constexpr GameStage GameStage_MAX = StageCount;
constexpr int GameStage_ARRAYSIZE = GameStage_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameStage_descriptor();
template<typename T>
inline const std::string& GameStage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameStage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameStage_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameStage_descriptor(), enum_t_value);
}
inline bool GameStage_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GameStage* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameStage>(
    GameStage_descriptor(), name, value);
}
enum GamePhase : int {
  Early = 0,
  Late = 1,
  GamePhase_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GamePhase_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GamePhase_IsValid(int value);
constexpr GamePhase GamePhase_MIN = Early;
constexpr GamePhase GamePhase_MAX = Late;
constexpr int GamePhase_ARRAYSIZE = GamePhase_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GamePhase_descriptor();
template<typename T>
inline const std::string& GamePhase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GamePhase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GamePhase_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GamePhase_descriptor(), enum_t_value);
}
inline bool GamePhase_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GamePhase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GamePhase>(
    GamePhase_descriptor(), name, value);
}
enum AddictionState : int {
  Healthy = 0,
  Tired = 1,
  Unhealthy = 2,
  AddictionState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AddictionState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AddictionState_IsValid(int value);
constexpr AddictionState AddictionState_MIN = Healthy;
constexpr AddictionState AddictionState_MAX = Unhealthy;
constexpr int AddictionState_ARRAYSIZE = AddictionState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddictionState_descriptor();
template<typename T>
inline const std::string& AddictionState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AddictionState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AddictionState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AddictionState_descriptor(), enum_t_value);
}
inline bool AddictionState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AddictionState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AddictionState>(
    AddictionState_descriptor(), name, value);
}
enum MessengerMoveType : int {
  _ = 0,
  Normal = 1,
  Flash = 2,
  MessengerMoveType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessengerMoveType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessengerMoveType_IsValid(int value);
constexpr MessengerMoveType MessengerMoveType_MIN = _;
constexpr MessengerMoveType MessengerMoveType_MAX = Flash;
constexpr int MessengerMoveType_ARRAYSIZE = MessengerMoveType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessengerMoveType_descriptor();
template<typename T>
inline const std::string& MessengerMoveType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessengerMoveType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessengerMoveType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessengerMoveType_descriptor(), enum_t_value);
}
inline bool MessengerMoveType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessengerMoveType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessengerMoveType>(
    MessengerMoveType_descriptor(), name, value);
}
enum PvpOfflineType : int {
  Normally = 0,
  LeaveEarly = 1,
  PvpOfflineType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PvpOfflineType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PvpOfflineType_IsValid(int value);
constexpr PvpOfflineType PvpOfflineType_MIN = Normally;
constexpr PvpOfflineType PvpOfflineType_MAX = LeaveEarly;
constexpr int PvpOfflineType_ARRAYSIZE = PvpOfflineType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PvpOfflineType_descriptor();
template<typename T>
inline const std::string& PvpOfflineType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PvpOfflineType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PvpOfflineType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PvpOfflineType_descriptor(), enum_t_value);
}
inline bool PvpOfflineType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PvpOfflineType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PvpOfflineType>(
    PvpOfflineType_descriptor(), name, value);
}
// ===================================================================

class PositionInt2D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PositionInt2D) */ {
 public:
  inline PositionInt2D() : PositionInt2D(nullptr) {}
  ~PositionInt2D() override;
  explicit PROTOBUF_CONSTEXPR PositionInt2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionInt2D(const PositionInt2D& from);
  PositionInt2D(PositionInt2D&& from) noexcept
    : PositionInt2D() {
    *this = ::std::move(from);
  }

  inline PositionInt2D& operator=(const PositionInt2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionInt2D& operator=(PositionInt2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionInt2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionInt2D* internal_default_instance() {
    return reinterpret_cast<const PositionInt2D*>(
               &_PositionInt2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PositionInt2D& a, PositionInt2D& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionInt2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionInt2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionInt2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionInt2D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionInt2D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PositionInt2D& from) {
    PositionInt2D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionInt2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PositionInt2D";
  }
  protected:
  explicit PositionInt2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 X = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 Y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PositionInt2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class PositionFloat2D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PositionFloat2D) */ {
 public:
  inline PositionFloat2D() : PositionFloat2D(nullptr) {}
  ~PositionFloat2D() override;
  explicit PROTOBUF_CONSTEXPR PositionFloat2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionFloat2D(const PositionFloat2D& from);
  PositionFloat2D(PositionFloat2D&& from) noexcept
    : PositionFloat2D() {
    *this = ::std::move(from);
  }

  inline PositionFloat2D& operator=(const PositionFloat2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionFloat2D& operator=(PositionFloat2D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionFloat2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionFloat2D* internal_default_instance() {
    return reinterpret_cast<const PositionFloat2D*>(
               &_PositionFloat2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PositionFloat2D& a, PositionFloat2D& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionFloat2D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionFloat2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionFloat2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionFloat2D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionFloat2D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PositionFloat2D& from) {
    PositionFloat2D::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionFloat2D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PositionFloat2D";
  }
  protected:
  explicit PositionFloat2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float X = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float Y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PositionFloat2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class PlayerBasicInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PlayerBasicInfo) */ {
 public:
  inline PlayerBasicInfo() : PlayerBasicInfo(nullptr) {}
  ~PlayerBasicInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerBasicInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerBasicInfo(const PlayerBasicInfo& from);
  PlayerBasicInfo(PlayerBasicInfo&& from) noexcept
    : PlayerBasicInfo() {
    *this = ::std::move(from);
  }

  inline PlayerBasicInfo& operator=(const PlayerBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerBasicInfo& operator=(PlayerBasicInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerBasicInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerBasicInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerBasicInfo*>(
               &_PlayerBasicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlayerBasicInfo& a, PlayerBasicInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerBasicInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerBasicInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerBasicInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerBasicInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerBasicInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerBasicInfo& from) {
    PlayerBasicInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerBasicInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PlayerBasicInfo";
  }
  protected:
  explicit PlayerBasicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPvpPlayerFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // .msg.PvpPlayerData PvpPlayer = 2;
  bool has_pvpplayer() const;
  private:
  bool _internal_has_pvpplayer() const;
  public:
  void clear_pvpplayer();
  const ::msg::PvpPlayerData& pvpplayer() const;
  PROTOBUF_NODISCARD ::msg::PvpPlayerData* release_pvpplayer();
  ::msg::PvpPlayerData* mutable_pvpplayer();
  void set_allocated_pvpplayer(::msg::PvpPlayerData* pvpplayer);
  private:
  const ::msg::PvpPlayerData& _internal_pvpplayer() const;
  ::msg::PvpPlayerData* _internal_mutable_pvpplayer();
  public:
  void unsafe_arena_set_allocated_pvpplayer(
      ::msg::PvpPlayerData* pvpplayer);
  ::msg::PvpPlayerData* unsafe_arena_release_pvpplayer();

  // int32 Index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PlayerBasicInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PvpPlayerData* pvpplayer_;
    int32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class EquipmentInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.EquipmentInfo) */ {
 public:
  inline EquipmentInfo() : EquipmentInfo(nullptr) {}
  ~EquipmentInfo() override;
  explicit PROTOBUF_CONSTEXPR EquipmentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EquipmentInfo(const EquipmentInfo& from);
  EquipmentInfo(EquipmentInfo&& from) noexcept
    : EquipmentInfo() {
    *this = ::std::move(from);
  }

  inline EquipmentInfo& operator=(const EquipmentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EquipmentInfo& operator=(EquipmentInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EquipmentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EquipmentInfo* internal_default_instance() {
    return reinterpret_cast<const EquipmentInfo*>(
               &_EquipmentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EquipmentInfo& a, EquipmentInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EquipmentInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EquipmentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EquipmentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EquipmentInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EquipmentInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EquipmentInfo& from) {
    EquipmentInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EquipmentInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.EquipmentInfo";
  }
  protected:
  explicit EquipmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTilePosFieldNumber = 5,
    kNetIdFieldNumber = 1,
    kEquipIdFieldNumber = 2,
    kEquipBagIdxFieldNumber = 3,
    kPlayerIdxFieldNumber = 4,
    kOwnerHandleFieldNumber = 6,
  };
  // .msg.PositionInt2D TilePos = 5;
  bool has_tilepos() const;
  private:
  bool _internal_has_tilepos() const;
  public:
  void clear_tilepos();
  const ::msg::PositionInt2D& tilepos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_tilepos();
  ::msg::PositionInt2D* mutable_tilepos();
  void set_allocated_tilepos(::msg::PositionInt2D* tilepos);
  private:
  const ::msg::PositionInt2D& _internal_tilepos() const;
  ::msg::PositionInt2D* _internal_mutable_tilepos();
  public:
  void unsafe_arena_set_allocated_tilepos(
      ::msg::PositionInt2D* tilepos);
  ::msg::PositionInt2D* unsafe_arena_release_tilepos();

  // int32 NetId = 1;
  void clear_netid();
  int32_t netid() const;
  void set_netid(int32_t value);
  private:
  int32_t _internal_netid() const;
  void _internal_set_netid(int32_t value);
  public:

  // int32 EquipId = 2;
  void clear_equipid();
  int32_t equipid() const;
  void set_equipid(int32_t value);
  private:
  int32_t _internal_equipid() const;
  void _internal_set_equipid(int32_t value);
  public:

  // int32 EquipBagIdx = 3;
  void clear_equipbagidx();
  int32_t equipbagidx() const;
  void set_equipbagidx(int32_t value);
  private:
  int32_t _internal_equipbagidx() const;
  void _internal_set_equipbagidx(int32_t value);
  public:

  // int32 PlayerIdx = 4;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // int32 OwnerHandle = 6;
  void clear_ownerhandle();
  int32_t ownerhandle() const;
  void set_ownerhandle(int32_t value);
  private:
  int32_t _internal_ownerhandle() const;
  void _internal_set_ownerhandle(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.EquipmentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionInt2D* tilepos_;
    int32_t netid_;
    int32_t equipid_;
    int32_t equipbagidx_;
    int32_t playeridx_;
    int32_t ownerhandle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class ChessPiecesData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ChessPiecesData) */ {
 public:
  inline ChessPiecesData() : ChessPiecesData(nullptr) {}
  ~ChessPiecesData() override;
  explicit PROTOBUF_CONSTEXPR ChessPiecesData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChessPiecesData(const ChessPiecesData& from);
  ChessPiecesData(ChessPiecesData&& from) noexcept
    : ChessPiecesData() {
    *this = ::std::move(from);
  }

  inline ChessPiecesData& operator=(const ChessPiecesData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChessPiecesData& operator=(ChessPiecesData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChessPiecesData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChessPiecesData* internal_default_instance() {
    return reinterpret_cast<const ChessPiecesData*>(
               &_ChessPiecesData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChessPiecesData& a, ChessPiecesData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChessPiecesData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChessPiecesData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChessPiecesData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChessPiecesData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChessPiecesData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChessPiecesData& from) {
    ChessPiecesData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChessPiecesData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ChessPiecesData";
  }
  protected:
  explicit ChessPiecesData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kExtractProbFieldNumber = 2,
  };
  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 extractProb = 2;
  void clear_extractprob();
  int32_t extractprob() const;
  void set_extractprob(int32_t value);
  private:
  int32_t _internal_extractprob() const;
  void _internal_set_extractprob(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ChessPiecesData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t extractprob_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class ChessPiecesMapLevData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ChessPiecesMapLevData) */ {
 public:
  inline ChessPiecesMapLevData() : ChessPiecesMapLevData(nullptr) {}
  ~ChessPiecesMapLevData() override;
  explicit PROTOBUF_CONSTEXPR ChessPiecesMapLevData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChessPiecesMapLevData(const ChessPiecesMapLevData& from);
  ChessPiecesMapLevData(ChessPiecesMapLevData&& from) noexcept
    : ChessPiecesMapLevData() {
    *this = ::std::move(from);
  }

  inline ChessPiecesMapLevData& operator=(const ChessPiecesMapLevData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChessPiecesMapLevData& operator=(ChessPiecesMapLevData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChessPiecesMapLevData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChessPiecesMapLevData* internal_default_instance() {
    return reinterpret_cast<const ChessPiecesMapLevData*>(
               &_ChessPiecesMapLevData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChessPiecesMapLevData& a, ChessPiecesMapLevData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChessPiecesMapLevData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChessPiecesMapLevData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChessPiecesMapLevData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChessPiecesMapLevData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChessPiecesMapLevData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChessPiecesMapLevData& from) {
    ChessPiecesMapLevData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChessPiecesMapLevData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ChessPiecesMapLevData";
  }
  protected:
  explicit ChessPiecesMapLevData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChessPiecesFieldNumber = 2,
    kLevelFieldNumber = 1,
  };
  // repeated .msg.ChessPiecesData chessPieces = 2;
  int chesspieces_size() const;
  private:
  int _internal_chesspieces_size() const;
  public:
  void clear_chesspieces();
  ::msg::ChessPiecesData* mutable_chesspieces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessPiecesData >*
      mutable_chesspieces();
  private:
  const ::msg::ChessPiecesData& _internal_chesspieces(int index) const;
  ::msg::ChessPiecesData* _internal_add_chesspieces();
  public:
  const ::msg::ChessPiecesData& chesspieces(int index) const;
  ::msg::ChessPiecesData* add_chesspieces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessPiecesData >&
      chesspieces() const;

  // int32 level = 1;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ChessPiecesMapLevData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessPiecesData > chesspieces_;
    int32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class ChessNumber final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ChessNumber) */ {
 public:
  inline ChessNumber() : ChessNumber(nullptr) {}
  ~ChessNumber() override;
  explicit PROTOBUF_CONSTEXPR ChessNumber(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChessNumber(const ChessNumber& from);
  ChessNumber(ChessNumber&& from) noexcept
    : ChessNumber() {
    *this = ::std::move(from);
  }

  inline ChessNumber& operator=(const ChessNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChessNumber& operator=(ChessNumber&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChessNumber& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChessNumber* internal_default_instance() {
    return reinterpret_cast<const ChessNumber*>(
               &_ChessNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChessNumber& a, ChessNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(ChessNumber* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChessNumber* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChessNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChessNumber>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChessNumber& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChessNumber& from) {
    ChessNumber::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChessNumber* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ChessNumber";
  }
  protected:
  explicit ChessNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNumberFieldNumber = 2,
  };
  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 Number = 2;
  void clear_number();
  int32_t number() const;
  void set_number(int32_t value);
  private:
  int32_t _internal_number() const;
  void _internal_set_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ChessNumber)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    int32_t number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class PlayerChessNumber final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PlayerChessNumber) */ {
 public:
  inline PlayerChessNumber() : PlayerChessNumber(nullptr) {}
  ~PlayerChessNumber() override;
  explicit PROTOBUF_CONSTEXPR PlayerChessNumber(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerChessNumber(const PlayerChessNumber& from);
  PlayerChessNumber(PlayerChessNumber&& from) noexcept
    : PlayerChessNumber() {
    *this = ::std::move(from);
  }

  inline PlayerChessNumber& operator=(const PlayerChessNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerChessNumber& operator=(PlayerChessNumber&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerChessNumber& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerChessNumber* internal_default_instance() {
    return reinterpret_cast<const PlayerChessNumber*>(
               &_PlayerChessNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PlayerChessNumber& a, PlayerChessNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerChessNumber* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerChessNumber* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerChessNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerChessNumber>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerChessNumber& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerChessNumber& from) {
    PlayerChessNumber::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerChessNumber* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PlayerChessNumber";
  }
  protected:
  explicit PlayerChessNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChessFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .msg.ChessNumber chess = 2;
  int chess_size() const;
  private:
  int _internal_chess_size() const;
  public:
  void clear_chess();
  ::msg::ChessNumber* mutable_chess(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessNumber >*
      mutable_chess();
  private:
  const ::msg::ChessNumber& _internal_chess(int index) const;
  ::msg::ChessNumber* _internal_add_chess();
  public:
  const ::msg::ChessNumber& chess(int index) const;
  ::msg::ChessNumber* add_chess();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessNumber >&
      chess() const;

  // string Id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:msg.PlayerChessNumber)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessNumber > chess_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class ReflushChessData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ReflushChessData) */ {
 public:
  inline ReflushChessData() : ReflushChessData(nullptr) {}
  ~ReflushChessData() override;
  explicit PROTOBUF_CONSTEXPR ReflushChessData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReflushChessData(const ReflushChessData& from);
  ReflushChessData(ReflushChessData&& from) noexcept
    : ReflushChessData() {
    *this = ::std::move(from);
  }

  inline ReflushChessData& operator=(const ReflushChessData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReflushChessData& operator=(ReflushChessData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReflushChessData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReflushChessData* internal_default_instance() {
    return reinterpret_cast<const ReflushChessData*>(
               &_ReflushChessData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReflushChessData& a, ReflushChessData& b) {
    a.Swap(&b);
  }
  inline void Swap(ReflushChessData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReflushChessData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReflushChessData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReflushChessData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReflushChessData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReflushChessData& from) {
    ReflushChessData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReflushChessData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ReflushChessData";
  }
  protected:
  explicit ReflushChessData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChessIdsFieldNumber = 2,
    kSellChessIdxFieldNumber = 3,
    kIsAutoFieldNumber = 1,
  };
  // repeated int32 chessIds = 2;
  int chessids_size() const;
  private:
  int _internal_chessids_size() const;
  public:
  void clear_chessids();
  private:
  int32_t _internal_chessids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_chessids() const;
  void _internal_add_chessids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_chessids();
  public:
  int32_t chessids(int index) const;
  void set_chessids(int index, int32_t value);
  void add_chessids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      chessids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_chessids();

  // repeated int32 sellChessIdx = 3;
  int sellchessidx_size() const;
  private:
  int _internal_sellchessidx_size() const;
  public:
  void clear_sellchessidx();
  private:
  int32_t _internal_sellchessidx(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_sellchessidx() const;
  void _internal_add_sellchessidx(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_sellchessidx();
  public:
  int32_t sellchessidx(int index) const;
  void set_sellchessidx(int index, int32_t value);
  void add_sellchessidx(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      sellchessidx() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_sellchessidx();

  // bool isAuto = 1;
  void clear_isauto();
  bool isauto() const;
  void set_isauto(bool value);
  private:
  bool _internal_isauto() const;
  void _internal_set_isauto(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ReflushChessData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > chessids_;
    mutable std::atomic<int> _chessids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > sellchessidx_;
    mutable std::atomic<int> _sellchessidx_cached_byte_size_;
    bool isauto_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class BattleRoundData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.BattleRoundData) */ {
 public:
  inline BattleRoundData() : BattleRoundData(nullptr) {}
  ~BattleRoundData() override;
  explicit PROTOBUF_CONSTEXPR BattleRoundData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BattleRoundData(const BattleRoundData& from);
  BattleRoundData(BattleRoundData&& from) noexcept
    : BattleRoundData() {
    *this = ::std::move(from);
  }

  inline BattleRoundData& operator=(const BattleRoundData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleRoundData& operator=(BattleRoundData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BattleRoundData& default_instance() {
    return *internal_default_instance();
  }
  static inline const BattleRoundData* internal_default_instance() {
    return reinterpret_cast<const BattleRoundData*>(
               &_BattleRoundData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BattleRoundData& a, BattleRoundData& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleRoundData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleRoundData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BattleRoundData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BattleRoundData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BattleRoundData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BattleRoundData& from) {
    BattleRoundData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleRoundData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.BattleRoundData";
  }
  protected:
  explicit BattleRoundData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefreshChessFieldNumber = 11,
    kIntoBattleChessFieldNumber = 12,
    kRoundNumFieldNumber = 1,
    kDamageFieldNumber = 2,
    kMoneyGainedFieldNumber = 3,
    kMoneyCostByBuyExpFieldNumber = 4,
    kMoneyCostByRefreshShopFieldNumber = 5,
    kMoneyCostByBuyChessFieldNumber = 6,
    kIsMonsterFieldNumber = 7,
    kEnemyIdxFieldNumber = 8,
    kExpFieldNumber = 9,
    kWinTypeFieldNumber = 10,
    kMoneyGainedBySellChessFieldNumber = 13,
  };
  // repeated .msg.ReflushChessData refreshChess = 11;
  int refreshchess_size() const;
  private:
  int _internal_refreshchess_size() const;
  public:
  void clear_refreshchess();
  ::msg::ReflushChessData* mutable_refreshchess(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ReflushChessData >*
      mutable_refreshchess();
  private:
  const ::msg::ReflushChessData& _internal_refreshchess(int index) const;
  ::msg::ReflushChessData* _internal_add_refreshchess();
  public:
  const ::msg::ReflushChessData& refreshchess(int index) const;
  ::msg::ReflushChessData* add_refreshchess();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ReflushChessData >&
      refreshchess() const;

  // repeated int32 intoBattleChess = 12;
  int intobattlechess_size() const;
  private:
  int _internal_intobattlechess_size() const;
  public:
  void clear_intobattlechess();
  private:
  int32_t _internal_intobattlechess(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_intobattlechess() const;
  void _internal_add_intobattlechess(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_intobattlechess();
  public:
  int32_t intobattlechess(int index) const;
  void set_intobattlechess(int index, int32_t value);
  void add_intobattlechess(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      intobattlechess() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_intobattlechess();

  // int32 RoundNum = 1;
  void clear_roundnum();
  int32_t roundnum() const;
  void set_roundnum(int32_t value);
  private:
  int32_t _internal_roundnum() const;
  void _internal_set_roundnum(int32_t value);
  public:

  // int32 Damage = 2;
  void clear_damage();
  int32_t damage() const;
  void set_damage(int32_t value);
  private:
  int32_t _internal_damage() const;
  void _internal_set_damage(int32_t value);
  public:

  // int32 MoneyGained = 3;
  void clear_moneygained();
  int32_t moneygained() const;
  void set_moneygained(int32_t value);
  private:
  int32_t _internal_moneygained() const;
  void _internal_set_moneygained(int32_t value);
  public:

  // int32 MoneyCostByBuyExp = 4;
  void clear_moneycostbybuyexp();
  int32_t moneycostbybuyexp() const;
  void set_moneycostbybuyexp(int32_t value);
  private:
  int32_t _internal_moneycostbybuyexp() const;
  void _internal_set_moneycostbybuyexp(int32_t value);
  public:

  // int32 MoneyCostByRefreshShop = 5;
  void clear_moneycostbyrefreshshop();
  int32_t moneycostbyrefreshshop() const;
  void set_moneycostbyrefreshshop(int32_t value);
  private:
  int32_t _internal_moneycostbyrefreshshop() const;
  void _internal_set_moneycostbyrefreshshop(int32_t value);
  public:

  // int32 MoneyCostByBuyChess = 6;
  void clear_moneycostbybuychess();
  int32_t moneycostbybuychess() const;
  void set_moneycostbybuychess(int32_t value);
  private:
  int32_t _internal_moneycostbybuychess() const;
  void _internal_set_moneycostbybuychess(int32_t value);
  public:

  // bool IsMonster = 7;
  void clear_ismonster();
  bool ismonster() const;
  void set_ismonster(bool value);
  private:
  bool _internal_ismonster() const;
  void _internal_set_ismonster(bool value);
  public:

  // int32 EnemyIdx = 8;
  void clear_enemyidx();
  int32_t enemyidx() const;
  void set_enemyidx(int32_t value);
  private:
  int32_t _internal_enemyidx() const;
  void _internal_set_enemyidx(int32_t value);
  public:

  // int32 Exp = 9;
  void clear_exp();
  int32_t exp() const;
  void set_exp(int32_t value);
  private:
  int32_t _internal_exp() const;
  void _internal_set_exp(int32_t value);
  public:

  // .msg.WINTYPE winType = 10;
  void clear_wintype();
  ::msg::WINTYPE wintype() const;
  void set_wintype(::msg::WINTYPE value);
  private:
  ::msg::WINTYPE _internal_wintype() const;
  void _internal_set_wintype(::msg::WINTYPE value);
  public:

  // int32 MoneyGainedBySellChess = 13;
  void clear_moneygainedbysellchess();
  int32_t moneygainedbysellchess() const;
  void set_moneygainedbysellchess(int32_t value);
  private:
  int32_t _internal_moneygainedbysellchess() const;
  void _internal_set_moneygainedbysellchess(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.BattleRoundData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ReflushChessData > refreshchess_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > intobattlechess_;
    mutable std::atomic<int> _intobattlechess_cached_byte_size_;
    int32_t roundnum_;
    int32_t damage_;
    int32_t moneygained_;
    int32_t moneycostbybuyexp_;
    int32_t moneycostbyrefreshshop_;
    int32_t moneycostbybuychess_;
    bool ismonster_;
    int32_t enemyidx_;
    int32_t exp_;
    int wintype_;
    int32_t moneygainedbysellchess_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class PlayerStatisticsInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.PlayerStatisticsInfo) */ {
 public:
  inline PlayerStatisticsInfo() : PlayerStatisticsInfo(nullptr) {}
  ~PlayerStatisticsInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerStatisticsInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerStatisticsInfo(const PlayerStatisticsInfo& from);
  PlayerStatisticsInfo(PlayerStatisticsInfo&& from) noexcept
    : PlayerStatisticsInfo() {
    *this = ::std::move(from);
  }

  inline PlayerStatisticsInfo& operator=(const PlayerStatisticsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerStatisticsInfo& operator=(PlayerStatisticsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerStatisticsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerStatisticsInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerStatisticsInfo*>(
               &_PlayerStatisticsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PlayerStatisticsInfo& a, PlayerStatisticsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerStatisticsInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerStatisticsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerStatisticsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerStatisticsInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerStatisticsInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerStatisticsInfo& from) {
    PlayerStatisticsInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerStatisticsInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.PlayerStatisticsInfo";
  }
  protected:
  explicit PlayerStatisticsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoundDataFieldNumber = 3,
    kPidxFieldNumber = 1,
    kWinStreakFieldNumber = 2,
  };
  // repeated .msg.BattleRoundData roundData = 3;
  int rounddata_size() const;
  private:
  int _internal_rounddata_size() const;
  public:
  void clear_rounddata();
  ::msg::BattleRoundData* mutable_rounddata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::BattleRoundData >*
      mutable_rounddata();
  private:
  const ::msg::BattleRoundData& _internal_rounddata(int index) const;
  ::msg::BattleRoundData* _internal_add_rounddata();
  public:
  const ::msg::BattleRoundData& rounddata(int index) const;
  ::msg::BattleRoundData* add_rounddata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::BattleRoundData >&
      rounddata() const;

  // int32 pidx = 1;
  void clear_pidx();
  int32_t pidx() const;
  void set_pidx(int32_t value);
  private:
  int32_t _internal_pidx() const;
  void _internal_set_pidx(int32_t value);
  public:

  // int32 winStreak = 2;
  void clear_winstreak();
  int32_t winstreak() const;
  void set_winstreak(int32_t value);
  private:
  int32_t _internal_winstreak() const;
  void _internal_set_winstreak(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.PlayerStatisticsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::BattleRoundData > rounddata_;
    int32_t pidx_;
    int32_t winstreak_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Item) */ {
 public:
  inline Item() : Item(nullptr) {}
  ~Item() override;
  explicit PROTOBUF_CONSTEXPR Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Item& from) {
    Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Item";
  }
  protected:
  explicit Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipmentIdFieldNumber = 1,
    kNetIdFieldNumber = 2,
  };
  // int32 EquipmentId = 1;
  void clear_equipmentid();
  int32_t equipmentid() const;
  void set_equipmentid(int32_t value);
  private:
  int32_t _internal_equipmentid() const;
  void _internal_set_equipmentid(int32_t value);
  public:

  // int32 NetId = 2;
  void clear_netid();
  int32_t netid() const;
  void set_netid(int32_t value);
  private:
  int32_t _internal_netid() const;
  void _internal_set_netid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t equipmentid_;
    int32_t netid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class ItemOnTheGround final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ItemOnTheGround) */ {
 public:
  inline ItemOnTheGround() : ItemOnTheGround(nullptr) {}
  ~ItemOnTheGround() override;
  explicit PROTOBUF_CONSTEXPR ItemOnTheGround(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemOnTheGround(const ItemOnTheGround& from);
  ItemOnTheGround(ItemOnTheGround&& from) noexcept
    : ItemOnTheGround() {
    *this = ::std::move(from);
  }

  inline ItemOnTheGround& operator=(const ItemOnTheGround& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemOnTheGround& operator=(ItemOnTheGround&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemOnTheGround& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemOnTheGround* internal_default_instance() {
    return reinterpret_cast<const ItemOnTheGround*>(
               &_ItemOnTheGround_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ItemOnTheGround& a, ItemOnTheGround& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemOnTheGround* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemOnTheGround* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemOnTheGround* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemOnTheGround>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemOnTheGround& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ItemOnTheGround& from) {
    ItemOnTheGround::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemOnTheGround* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ItemOnTheGround";
  }
  protected:
  explicit ItemOnTheGround(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseInfoFieldNumber = 1,
    kMapXFieldNumber = 2,
    kMapYFieldNumber = 3,
  };
  // .msg.Item BaseInfo = 1;
  bool has_baseinfo() const;
  private:
  bool _internal_has_baseinfo() const;
  public:
  void clear_baseinfo();
  const ::msg::Item& baseinfo() const;
  PROTOBUF_NODISCARD ::msg::Item* release_baseinfo();
  ::msg::Item* mutable_baseinfo();
  void set_allocated_baseinfo(::msg::Item* baseinfo);
  private:
  const ::msg::Item& _internal_baseinfo() const;
  ::msg::Item* _internal_mutable_baseinfo();
  public:
  void unsafe_arena_set_allocated_baseinfo(
      ::msg::Item* baseinfo);
  ::msg::Item* unsafe_arena_release_baseinfo();

  // int32 MapX = 2;
  void clear_mapx();
  int32_t mapx() const;
  void set_mapx(int32_t value);
  private:
  int32_t _internal_mapx() const;
  void _internal_set_mapx(int32_t value);
  public:

  // int32 MapY = 3;
  void clear_mapy();
  int32_t mapy() const;
  void set_mapy(int32_t value);
  private:
  int32_t _internal_mapy() const;
  void _internal_set_mapy(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ItemOnTheGround)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::Item* baseinfo_;
    int32_t mapx_;
    int32_t mapy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class ItemInTheBag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ItemInTheBag) */ {
 public:
  inline ItemInTheBag() : ItemInTheBag(nullptr) {}
  ~ItemInTheBag() override;
  explicit PROTOBUF_CONSTEXPR ItemInTheBag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemInTheBag(const ItemInTheBag& from);
  ItemInTheBag(ItemInTheBag&& from) noexcept
    : ItemInTheBag() {
    *this = ::std::move(from);
  }

  inline ItemInTheBag& operator=(const ItemInTheBag& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemInTheBag& operator=(ItemInTheBag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemInTheBag& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemInTheBag* internal_default_instance() {
    return reinterpret_cast<const ItemInTheBag*>(
               &_ItemInTheBag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ItemInTheBag& a, ItemInTheBag& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemInTheBag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemInTheBag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemInTheBag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemInTheBag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemInTheBag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ItemInTheBag& from) {
    ItemInTheBag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemInTheBag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ItemInTheBag";
  }
  protected:
  explicit ItemInTheBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseInfoFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // .msg.Item BaseInfo = 1;
  bool has_baseinfo() const;
  private:
  bool _internal_has_baseinfo() const;
  public:
  void clear_baseinfo();
  const ::msg::Item& baseinfo() const;
  PROTOBUF_NODISCARD ::msg::Item* release_baseinfo();
  ::msg::Item* mutable_baseinfo();
  void set_allocated_baseinfo(::msg::Item* baseinfo);
  private:
  const ::msg::Item& _internal_baseinfo() const;
  ::msg::Item* _internal_mutable_baseinfo();
  public:
  void unsafe_arena_set_allocated_baseinfo(
      ::msg::Item* baseinfo);
  ::msg::Item* unsafe_arena_release_baseinfo();

  // int32 Index = 2;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ItemInTheBag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::Item* baseinfo_;
    int32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class Character final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Character) */ {
 public:
  inline Character() : Character(nullptr) {}
  ~Character() override;
  explicit PROTOBUF_CONSTEXPR Character(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Character(const Character& from);
  Character(Character&& from) noexcept
    : Character() {
    *this = ::std::move(from);
  }

  inline Character& operator=(const Character& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character& operator=(Character&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character* internal_default_instance() {
    return reinterpret_cast<const Character*>(
               &_Character_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Character& a, Character& b) {
    a.Swap(&b);
  }
  inline void Swap(Character* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Character& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Character& from) {
    Character::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Character";
  }
  protected:
  explicit Character(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterEquipsFieldNumber = 6,
    kPlayerIdxFieldNumber = 1,
    kCharacterIdFieldNumber = 2,
  };
  // repeated .msg.ItemInTheBag CharacterEquips = 6;
  int characterequips_size() const;
  private:
  int _internal_characterequips_size() const;
  public:
  void clear_characterequips();
  ::msg::ItemInTheBag* mutable_characterequips(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemInTheBag >*
      mutable_characterequips();
  private:
  const ::msg::ItemInTheBag& _internal_characterequips(int index) const;
  ::msg::ItemInTheBag* _internal_add_characterequips();
  public:
  const ::msg::ItemInTheBag& characterequips(int index) const;
  ::msg::ItemInTheBag* add_characterequips();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemInTheBag >&
      characterequips() const;

  // int32 PlayerIdx = 1;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // int32 CharacterId = 2;
  void clear_characterid();
  int32_t characterid() const;
  void set_characterid(int32_t value);
  private:
  int32_t _internal_characterid() const;
  void _internal_set_characterid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Character)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemInTheBag > characterequips_;
    int32_t playeridx_;
    int32_t characterid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CharacterInTheBag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CharacterInTheBag) */ {
 public:
  inline CharacterInTheBag() : CharacterInTheBag(nullptr) {}
  ~CharacterInTheBag() override;
  explicit PROTOBUF_CONSTEXPR CharacterInTheBag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterInTheBag(const CharacterInTheBag& from);
  CharacterInTheBag(CharacterInTheBag&& from) noexcept
    : CharacterInTheBag() {
    *this = ::std::move(from);
  }

  inline CharacterInTheBag& operator=(const CharacterInTheBag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterInTheBag& operator=(CharacterInTheBag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterInTheBag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterInTheBag* internal_default_instance() {
    return reinterpret_cast<const CharacterInTheBag*>(
               &_CharacterInTheBag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CharacterInTheBag& a, CharacterInTheBag& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterInTheBag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterInTheBag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterInTheBag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterInTheBag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterInTheBag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CharacterInTheBag& from) {
    CharacterInTheBag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterInTheBag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CharacterInTheBag";
  }
  protected:
  explicit CharacterInTheBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseInfoFieldNumber = 1,
    kBagIndexFieldNumber = 2,
  };
  // .msg.Character BaseInfo = 1;
  bool has_baseinfo() const;
  private:
  bool _internal_has_baseinfo() const;
  public:
  void clear_baseinfo();
  const ::msg::Character& baseinfo() const;
  PROTOBUF_NODISCARD ::msg::Character* release_baseinfo();
  ::msg::Character* mutable_baseinfo();
  void set_allocated_baseinfo(::msg::Character* baseinfo);
  private:
  const ::msg::Character& _internal_baseinfo() const;
  ::msg::Character* _internal_mutable_baseinfo();
  public:
  void unsafe_arena_set_allocated_baseinfo(
      ::msg::Character* baseinfo);
  ::msg::Character* unsafe_arena_release_baseinfo();

  // int32 BagIndex = 2;
  void clear_bagindex();
  int32_t bagindex() const;
  void set_bagindex(int32_t value);
  private:
  int32_t _internal_bagindex() const;
  void _internal_set_bagindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CharacterInTheBag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::Character* baseinfo_;
    int32_t bagindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CharacterOnTheMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CharacterOnTheMap) */ {
 public:
  inline CharacterOnTheMap() : CharacterOnTheMap(nullptr) {}
  ~CharacterOnTheMap() override;
  explicit PROTOBUF_CONSTEXPR CharacterOnTheMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterOnTheMap(const CharacterOnTheMap& from);
  CharacterOnTheMap(CharacterOnTheMap&& from) noexcept
    : CharacterOnTheMap() {
    *this = ::std::move(from);
  }

  inline CharacterOnTheMap& operator=(const CharacterOnTheMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterOnTheMap& operator=(CharacterOnTheMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterOnTheMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterOnTheMap* internal_default_instance() {
    return reinterpret_cast<const CharacterOnTheMap*>(
               &_CharacterOnTheMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CharacterOnTheMap& a, CharacterOnTheMap& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterOnTheMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterOnTheMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterOnTheMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterOnTheMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterOnTheMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CharacterOnTheMap& from) {
    CharacterOnTheMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterOnTheMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CharacterOnTheMap";
  }
  protected:
  explicit CharacterOnTheMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseInfoFieldNumber = 1,
    kTxFieldNumber = 2,
    kTyFieldNumber = 3,
  };
  // .msg.Character BaseInfo = 1;
  bool has_baseinfo() const;
  private:
  bool _internal_has_baseinfo() const;
  public:
  void clear_baseinfo();
  const ::msg::Character& baseinfo() const;
  PROTOBUF_NODISCARD ::msg::Character* release_baseinfo();
  ::msg::Character* mutable_baseinfo();
  void set_allocated_baseinfo(::msg::Character* baseinfo);
  private:
  const ::msg::Character& _internal_baseinfo() const;
  ::msg::Character* _internal_mutable_baseinfo();
  public:
  void unsafe_arena_set_allocated_baseinfo(
      ::msg::Character* baseinfo);
  ::msg::Character* unsafe_arena_release_baseinfo();

  // int32 Tx = 2;
  void clear_tx();
  int32_t tx() const;
  void set_tx(int32_t value);
  private:
  int32_t _internal_tx() const;
  void _internal_set_tx(int32_t value);
  public:

  // int32 Ty = 3;
  void clear_ty();
  int32_t ty() const;
  void set_ty(int32_t value);
  private:
  int32_t _internal_ty() const;
  void _internal_set_ty(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CharacterOnTheMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::Character* baseinfo_;
    int32_t tx_;
    int32_t ty_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class ReconnectPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.ReconnectPlayer) */ {
 public:
  inline ReconnectPlayer() : ReconnectPlayer(nullptr) {}
  ~ReconnectPlayer() override;
  explicit PROTOBUF_CONSTEXPR ReconnectPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReconnectPlayer(const ReconnectPlayer& from);
  ReconnectPlayer(ReconnectPlayer&& from) noexcept
    : ReconnectPlayer() {
    *this = ::std::move(from);
  }

  inline ReconnectPlayer& operator=(const ReconnectPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReconnectPlayer& operator=(ReconnectPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReconnectPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReconnectPlayer* internal_default_instance() {
    return reinterpret_cast<const ReconnectPlayer*>(
               &_ReconnectPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ReconnectPlayer& a, ReconnectPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReconnectPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReconnectPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReconnectPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReconnectPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReconnectPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReconnectPlayer& from) {
    ReconnectPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReconnectPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.ReconnectPlayer";
  }
  protected:
  explicit ReconnectPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShopContentsFieldNumber = 6,
    kBagCharactersFieldNumber = 10,
    kMapCharactersFieldNumber = 11,
    kBagItemsFieldNumber = 12,
    kGroundItemsFieldNumber = 13,
    kPlayerDataFieldNumber = 7,
    kPlayerIdxFieldNumber = 1,
    kCurrentHpFieldNumber = 2,
    kCurrentGoldFieldNumber = 3,
    kCurrentLevelFieldNumber = 4,
    kCurrentExpFieldNumber = 5,
    kMessengerPosXFieldNumber = 8,
    kMessengerPosYFieldNumber = 9,
    kEnemyPlayerIndexFieldNumber = 14,
    kWinStreakFieldNumber = 15,
    kWinRoundCountFieldNumber = 16,
    kLoseRoundCountFieldNumber = 17,
    kRankFieldNumber = 18,
  };
  // repeated int32 ShopContents = 6;
  int shopcontents_size() const;
  private:
  int _internal_shopcontents_size() const;
  public:
  void clear_shopcontents();
  private:
  int32_t _internal_shopcontents(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_shopcontents() const;
  void _internal_add_shopcontents(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_shopcontents();
  public:
  int32_t shopcontents(int index) const;
  void set_shopcontents(int index, int32_t value);
  void add_shopcontents(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      shopcontents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_shopcontents();

  // repeated .msg.CharacterInTheBag BagCharacters = 10;
  int bagcharacters_size() const;
  private:
  int _internal_bagcharacters_size() const;
  public:
  void clear_bagcharacters();
  ::msg::CharacterInTheBag* mutable_bagcharacters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterInTheBag >*
      mutable_bagcharacters();
  private:
  const ::msg::CharacterInTheBag& _internal_bagcharacters(int index) const;
  ::msg::CharacterInTheBag* _internal_add_bagcharacters();
  public:
  const ::msg::CharacterInTheBag& bagcharacters(int index) const;
  ::msg::CharacterInTheBag* add_bagcharacters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterInTheBag >&
      bagcharacters() const;

  // repeated .msg.CharacterOnTheMap MapCharacters = 11;
  int mapcharacters_size() const;
  private:
  int _internal_mapcharacters_size() const;
  public:
  void clear_mapcharacters();
  ::msg::CharacterOnTheMap* mutable_mapcharacters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterOnTheMap >*
      mutable_mapcharacters();
  private:
  const ::msg::CharacterOnTheMap& _internal_mapcharacters(int index) const;
  ::msg::CharacterOnTheMap* _internal_add_mapcharacters();
  public:
  const ::msg::CharacterOnTheMap& mapcharacters(int index) const;
  ::msg::CharacterOnTheMap* add_mapcharacters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterOnTheMap >&
      mapcharacters() const;

  // repeated .msg.ItemInTheBag BagItems = 12;
  int bagitems_size() const;
  private:
  int _internal_bagitems_size() const;
  public:
  void clear_bagitems();
  ::msg::ItemInTheBag* mutable_bagitems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemInTheBag >*
      mutable_bagitems();
  private:
  const ::msg::ItemInTheBag& _internal_bagitems(int index) const;
  ::msg::ItemInTheBag* _internal_add_bagitems();
  public:
  const ::msg::ItemInTheBag& bagitems(int index) const;
  ::msg::ItemInTheBag* add_bagitems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemInTheBag >&
      bagitems() const;

  // repeated .msg.ItemOnTheGround GroundItems = 13;
  int grounditems_size() const;
  private:
  int _internal_grounditems_size() const;
  public:
  void clear_grounditems();
  ::msg::ItemOnTheGround* mutable_grounditems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemOnTheGround >*
      mutable_grounditems();
  private:
  const ::msg::ItemOnTheGround& _internal_grounditems(int index) const;
  ::msg::ItemOnTheGround* _internal_add_grounditems();
  public:
  const ::msg::ItemOnTheGround& grounditems(int index) const;
  ::msg::ItemOnTheGround* add_grounditems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemOnTheGround >&
      grounditems() const;

  // .msg.PvpPlayerData PlayerData = 7;
  bool has_playerdata() const;
  private:
  bool _internal_has_playerdata() const;
  public:
  void clear_playerdata();
  const ::msg::PvpPlayerData& playerdata() const;
  PROTOBUF_NODISCARD ::msg::PvpPlayerData* release_playerdata();
  ::msg::PvpPlayerData* mutable_playerdata();
  void set_allocated_playerdata(::msg::PvpPlayerData* playerdata);
  private:
  const ::msg::PvpPlayerData& _internal_playerdata() const;
  ::msg::PvpPlayerData* _internal_mutable_playerdata();
  public:
  void unsafe_arena_set_allocated_playerdata(
      ::msg::PvpPlayerData* playerdata);
  ::msg::PvpPlayerData* unsafe_arena_release_playerdata();

  // int32 PlayerIdx = 1;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // int32 CurrentHp = 2;
  void clear_currenthp();
  int32_t currenthp() const;
  void set_currenthp(int32_t value);
  private:
  int32_t _internal_currenthp() const;
  void _internal_set_currenthp(int32_t value);
  public:

  // int32 CurrentGold = 3;
  void clear_currentgold();
  int32_t currentgold() const;
  void set_currentgold(int32_t value);
  private:
  int32_t _internal_currentgold() const;
  void _internal_set_currentgold(int32_t value);
  public:

  // int32 CurrentLevel = 4;
  void clear_currentlevel();
  int32_t currentlevel() const;
  void set_currentlevel(int32_t value);
  private:
  int32_t _internal_currentlevel() const;
  void _internal_set_currentlevel(int32_t value);
  public:

  // int32 CurrentExp = 5;
  void clear_currentexp();
  int32_t currentexp() const;
  void set_currentexp(int32_t value);
  private:
  int32_t _internal_currentexp() const;
  void _internal_set_currentexp(int32_t value);
  public:

  // float MessengerPosX = 8;
  void clear_messengerposx();
  float messengerposx() const;
  void set_messengerposx(float value);
  private:
  float _internal_messengerposx() const;
  void _internal_set_messengerposx(float value);
  public:

  // float MessengerPosY = 9;
  void clear_messengerposy();
  float messengerposy() const;
  void set_messengerposy(float value);
  private:
  float _internal_messengerposy() const;
  void _internal_set_messengerposy(float value);
  public:

  // int32 EnemyPlayerIndex = 14;
  void clear_enemyplayerindex();
  int32_t enemyplayerindex() const;
  void set_enemyplayerindex(int32_t value);
  private:
  int32_t _internal_enemyplayerindex() const;
  void _internal_set_enemyplayerindex(int32_t value);
  public:

  // int32 WinStreak = 15;
  void clear_winstreak();
  int32_t winstreak() const;
  void set_winstreak(int32_t value);
  private:
  int32_t _internal_winstreak() const;
  void _internal_set_winstreak(int32_t value);
  public:

  // int32 WinRoundCount = 16;
  void clear_winroundcount();
  int32_t winroundcount() const;
  void set_winroundcount(int32_t value);
  private:
  int32_t _internal_winroundcount() const;
  void _internal_set_winroundcount(int32_t value);
  public:

  // int32 LoseRoundCount = 17;
  void clear_loseroundcount();
  int32_t loseroundcount() const;
  void set_loseroundcount(int32_t value);
  private:
  int32_t _internal_loseroundcount() const;
  void _internal_set_loseroundcount(int32_t value);
  public:

  // int32 Rank = 18;
  void clear_rank();
  int32_t rank() const;
  void set_rank(int32_t value);
  private:
  int32_t _internal_rank() const;
  void _internal_set_rank(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.ReconnectPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > shopcontents_;
    mutable std::atomic<int> _shopcontents_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterInTheBag > bagcharacters_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterOnTheMap > mapcharacters_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemInTheBag > bagitems_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemOnTheGround > grounditems_;
    ::msg::PvpPlayerData* playerdata_;
    int32_t playeridx_;
    int32_t currenthp_;
    int32_t currentgold_;
    int32_t currentlevel_;
    int32_t currentexp_;
    float messengerposx_;
    float messengerposy_;
    int32_t enemyplayerindex_;
    int32_t winstreak_;
    int32_t winroundcount_;
    int32_t loseroundcount_;
    int32_t rank_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class RoundInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.RoundInfo) */ {
 public:
  inline RoundInfo() : RoundInfo(nullptr) {}
  ~RoundInfo() override;
  explicit PROTOBUF_CONSTEXPR RoundInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoundInfo(const RoundInfo& from);
  RoundInfo(RoundInfo&& from) noexcept
    : RoundInfo() {
    *this = ::std::move(from);
  }

  inline RoundInfo& operator=(const RoundInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoundInfo& operator=(RoundInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoundInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoundInfo* internal_default_instance() {
    return reinterpret_cast<const RoundInfo*>(
               &_RoundInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RoundInfo& a, RoundInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoundInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoundInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoundInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoundInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoundInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoundInfo& from) {
    RoundInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoundInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.RoundInfo";
  }
  protected:
  explicit RoundInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeedFieldNumber = 1,
    kRoundFieldNumber = 2,
    kGameFrameFieldNumber = 3,
    kCurrentPhaseFieldNumber = 4,
    kRemainTimeFieldNumber = 5,
  };
  // int32 Seed = 1;
  void clear_seed();
  int32_t seed() const;
  void set_seed(int32_t value);
  private:
  int32_t _internal_seed() const;
  void _internal_set_seed(int32_t value);
  public:

  // int32 Round = 2;
  void clear_round();
  int32_t round() const;
  void set_round(int32_t value);
  private:
  int32_t _internal_round() const;
  void _internal_set_round(int32_t value);
  public:

  // int32 GameFrame = 3;
  void clear_gameframe();
  int32_t gameframe() const;
  void set_gameframe(int32_t value);
  private:
  int32_t _internal_gameframe() const;
  void _internal_set_gameframe(int32_t value);
  public:

  // .msg.GameStage CurrentPhase = 4;
  void clear_currentphase();
  ::msg::GameStage currentphase() const;
  void set_currentphase(::msg::GameStage value);
  private:
  ::msg::GameStage _internal_currentphase() const;
  void _internal_set_currentphase(::msg::GameStage value);
  public:

  // int32 RemainTime = 5;
  void clear_remaintime();
  int32_t remaintime() const;
  void set_remaintime(int32_t value);
  private:
  int32_t _internal_remaintime() const;
  void _internal_set_remaintime(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.RoundInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t seed_;
    int32_t round_;
    int32_t gameframe_;
    int currentphase_;
    int32_t remaintime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CorrectFormation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CorrectFormation) */ {
 public:
  inline CorrectFormation() : CorrectFormation(nullptr) {}
  ~CorrectFormation() override;
  explicit PROTOBUF_CONSTEXPR CorrectFormation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CorrectFormation(const CorrectFormation& from);
  CorrectFormation(CorrectFormation&& from) noexcept
    : CorrectFormation() {
    *this = ::std::move(from);
  }

  inline CorrectFormation& operator=(const CorrectFormation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CorrectFormation& operator=(CorrectFormation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CorrectFormation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CorrectFormation* internal_default_instance() {
    return reinterpret_cast<const CorrectFormation*>(
               &_CorrectFormation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CorrectFormation& a, CorrectFormation& b) {
    a.Swap(&b);
  }
  inline void Swap(CorrectFormation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CorrectFormation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CorrectFormation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CorrectFormation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CorrectFormation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CorrectFormation& from) {
    CorrectFormation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CorrectFormation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CorrectFormation";
  }
  protected:
  explicit CorrectFormation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBagCharactersFieldNumber = 1,
    kMapCharactersFieldNumber = 2,
    kBagItemsFieldNumber = 3,
    kGroundItemsFieldNumber = 4,
    kPlayerIndexFieldNumber = 5,
  };
  // repeated .msg.CharacterInTheBag BagCharacters = 1;
  int bagcharacters_size() const;
  private:
  int _internal_bagcharacters_size() const;
  public:
  void clear_bagcharacters();
  ::msg::CharacterInTheBag* mutable_bagcharacters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterInTheBag >*
      mutable_bagcharacters();
  private:
  const ::msg::CharacterInTheBag& _internal_bagcharacters(int index) const;
  ::msg::CharacterInTheBag* _internal_add_bagcharacters();
  public:
  const ::msg::CharacterInTheBag& bagcharacters(int index) const;
  ::msg::CharacterInTheBag* add_bagcharacters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterInTheBag >&
      bagcharacters() const;

  // repeated .msg.CharacterOnTheMap MapCharacters = 2;
  int mapcharacters_size() const;
  private:
  int _internal_mapcharacters_size() const;
  public:
  void clear_mapcharacters();
  ::msg::CharacterOnTheMap* mutable_mapcharacters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterOnTheMap >*
      mutable_mapcharacters();
  private:
  const ::msg::CharacterOnTheMap& _internal_mapcharacters(int index) const;
  ::msg::CharacterOnTheMap* _internal_add_mapcharacters();
  public:
  const ::msg::CharacterOnTheMap& mapcharacters(int index) const;
  ::msg::CharacterOnTheMap* add_mapcharacters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterOnTheMap >&
      mapcharacters() const;

  // repeated .msg.ItemInTheBag BagItems = 3;
  int bagitems_size() const;
  private:
  int _internal_bagitems_size() const;
  public:
  void clear_bagitems();
  ::msg::ItemInTheBag* mutable_bagitems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemInTheBag >*
      mutable_bagitems();
  private:
  const ::msg::ItemInTheBag& _internal_bagitems(int index) const;
  ::msg::ItemInTheBag* _internal_add_bagitems();
  public:
  const ::msg::ItemInTheBag& bagitems(int index) const;
  ::msg::ItemInTheBag* add_bagitems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemInTheBag >&
      bagitems() const;

  // repeated .msg.ItemOnTheGround GroundItems = 4;
  int grounditems_size() const;
  private:
  int _internal_grounditems_size() const;
  public:
  void clear_grounditems();
  ::msg::ItemOnTheGround* mutable_grounditems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemOnTheGround >*
      mutable_grounditems();
  private:
  const ::msg::ItemOnTheGround& _internal_grounditems(int index) const;
  ::msg::ItemOnTheGround* _internal_add_grounditems();
  public:
  const ::msg::ItemOnTheGround& grounditems(int index) const;
  ::msg::ItemOnTheGround* add_grounditems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemOnTheGround >&
      grounditems() const;

  // int32 PlayerIndex = 5;
  void clear_playerindex();
  int32_t playerindex() const;
  void set_playerindex(int32_t value);
  private:
  int32_t _internal_playerindex() const;
  void _internal_set_playerindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CorrectFormation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterInTheBag > bagcharacters_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterOnTheMap > mapcharacters_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemInTheBag > bagitems_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemOnTheGround > grounditems_;
    int32_t playerindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqSetMessengerPos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqSetMessengerPos) */ {
 public:
  inline CSReqSetMessengerPos() : CSReqSetMessengerPos(nullptr) {}
  ~CSReqSetMessengerPos() override;
  explicit PROTOBUF_CONSTEXPR CSReqSetMessengerPos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqSetMessengerPos(const CSReqSetMessengerPos& from);
  CSReqSetMessengerPos(CSReqSetMessengerPos&& from) noexcept
    : CSReqSetMessengerPos() {
    *this = ::std::move(from);
  }

  inline CSReqSetMessengerPos& operator=(const CSReqSetMessengerPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqSetMessengerPos& operator=(CSReqSetMessengerPos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqSetMessengerPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqSetMessengerPos* internal_default_instance() {
    return reinterpret_cast<const CSReqSetMessengerPos*>(
               &_CSReqSetMessengerPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CSReqSetMessengerPos& a, CSReqSetMessengerPos& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqSetMessengerPos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqSetMessengerPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqSetMessengerPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqSetMessengerPos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqSetMessengerPos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqSetMessengerPos& from) {
    CSReqSetMessengerPos::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqSetMessengerPos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqSetMessengerPos";
  }
  protected:
  explicit CSReqSetMessengerPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .msg.PositionFloat2D Pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::msg::PositionFloat2D& pos() const;
  PROTOBUF_NODISCARD ::msg::PositionFloat2D* release_pos();
  ::msg::PositionFloat2D* mutable_pos();
  void set_allocated_pos(::msg::PositionFloat2D* pos);
  private:
  const ::msg::PositionFloat2D& _internal_pos() const;
  ::msg::PositionFloat2D* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::msg::PositionFloat2D* pos);
  ::msg::PositionFloat2D* unsafe_arena_release_pos();

  // .msg.MessengerMoveType Type = 2;
  void clear_type();
  ::msg::MessengerMoveType type() const;
  void set_type(::msg::MessengerMoveType value);
  private:
  ::msg::MessengerMoveType _internal_type() const;
  void _internal_set_type(::msg::MessengerMoveType value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqSetMessengerPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionFloat2D* pos_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqPvpSetReadyState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqPvpSetReadyState) */ {
 public:
  inline CSReqPvpSetReadyState() : CSReqPvpSetReadyState(nullptr) {}
  ~CSReqPvpSetReadyState() override;
  explicit PROTOBUF_CONSTEXPR CSReqPvpSetReadyState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqPvpSetReadyState(const CSReqPvpSetReadyState& from);
  CSReqPvpSetReadyState(CSReqPvpSetReadyState&& from) noexcept
    : CSReqPvpSetReadyState() {
    *this = ::std::move(from);
  }

  inline CSReqPvpSetReadyState& operator=(const CSReqPvpSetReadyState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqPvpSetReadyState& operator=(CSReqPvpSetReadyState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqPvpSetReadyState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqPvpSetReadyState* internal_default_instance() {
    return reinterpret_cast<const CSReqPvpSetReadyState*>(
               &_CSReqPvpSetReadyState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CSReqPvpSetReadyState& a, CSReqPvpSetReadyState& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqPvpSetReadyState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqPvpSetReadyState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqPvpSetReadyState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqPvpSetReadyState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqPvpSetReadyState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqPvpSetReadyState& from) {
    CSReqPvpSetReadyState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqPvpSetReadyState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqPvpSetReadyState";
  }
  protected:
  explicit CSReqPvpSetReadyState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // bool State = 1;
  void clear_state();
  bool state() const;
  void set_state(bool value);
  private:
  bool _internal_state() const;
  void _internal_set_state(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqPvpSetReadyState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqSetRefreshShopLock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqSetRefreshShopLock) */ {
 public:
  inline CSReqSetRefreshShopLock() : CSReqSetRefreshShopLock(nullptr) {}
  ~CSReqSetRefreshShopLock() override;
  explicit PROTOBUF_CONSTEXPR CSReqSetRefreshShopLock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqSetRefreshShopLock(const CSReqSetRefreshShopLock& from);
  CSReqSetRefreshShopLock(CSReqSetRefreshShopLock&& from) noexcept
    : CSReqSetRefreshShopLock() {
    *this = ::std::move(from);
  }

  inline CSReqSetRefreshShopLock& operator=(const CSReqSetRefreshShopLock& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqSetRefreshShopLock& operator=(CSReqSetRefreshShopLock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqSetRefreshShopLock& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqSetRefreshShopLock* internal_default_instance() {
    return reinterpret_cast<const CSReqSetRefreshShopLock*>(
               &_CSReqSetRefreshShopLock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CSReqSetRefreshShopLock& a, CSReqSetRefreshShopLock& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqSetRefreshShopLock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqSetRefreshShopLock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqSetRefreshShopLock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqSetRefreshShopLock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqSetRefreshShopLock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqSetRefreshShopLock& from) {
    CSReqSetRefreshShopLock::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqSetRefreshShopLock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqSetRefreshShopLock";
  }
  protected:
  explicit CSReqSetRefreshShopLock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsLockFieldNumber = 1,
  };
  // bool IsLock = 1;
  void clear_islock();
  bool islock() const;
  void set_islock(bool value);
  private:
  bool _internal_islock() const;
  void _internal_set_islock(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqSetRefreshShopLock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool islock_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqRetrieveChess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqRetrieveChess) */ {
 public:
  inline CSReqRetrieveChess() : CSReqRetrieveChess(nullptr) {}
  ~CSReqRetrieveChess() override;
  explicit PROTOBUF_CONSTEXPR CSReqRetrieveChess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqRetrieveChess(const CSReqRetrieveChess& from);
  CSReqRetrieveChess(CSReqRetrieveChess&& from) noexcept
    : CSReqRetrieveChess() {
    *this = ::std::move(from);
  }

  inline CSReqRetrieveChess& operator=(const CSReqRetrieveChess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqRetrieveChess& operator=(CSReqRetrieveChess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqRetrieveChess& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqRetrieveChess* internal_default_instance() {
    return reinterpret_cast<const CSReqRetrieveChess*>(
               &_CSReqRetrieveChess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CSReqRetrieveChess& a, CSReqRetrieveChess& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqRetrieveChess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqRetrieveChess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqRetrieveChess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqRetrieveChess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqRetrieveChess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqRetrieveChess& from) {
    CSReqRetrieveChess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqRetrieveChess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqRetrieveChess";
  }
  protected:
  explicit CSReqRetrieveChess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChessPosFieldNumber = 1,
    kBagIndexFieldNumber = 2,
  };
  // .msg.PositionInt2D ChessPos = 1;
  bool has_chesspos() const;
  private:
  bool _internal_has_chesspos() const;
  public:
  void clear_chesspos();
  const ::msg::PositionInt2D& chesspos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_chesspos();
  ::msg::PositionInt2D* mutable_chesspos();
  void set_allocated_chesspos(::msg::PositionInt2D* chesspos);
  private:
  const ::msg::PositionInt2D& _internal_chesspos() const;
  ::msg::PositionInt2D* _internal_mutable_chesspos();
  public:
  void unsafe_arena_set_allocated_chesspos(
      ::msg::PositionInt2D* chesspos);
  ::msg::PositionInt2D* unsafe_arena_release_chesspos();

  // int32 BagIndex = 2;
  void clear_bagindex();
  int32_t bagindex() const;
  void set_bagindex(int32_t value);
  private:
  int32_t _internal_bagindex() const;
  void _internal_set_bagindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqRetrieveChess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionInt2D* chesspos_;
    int32_t bagindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqBuyChess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqBuyChess) */ {
 public:
  inline CSReqBuyChess() : CSReqBuyChess(nullptr) {}
  ~CSReqBuyChess() override;
  explicit PROTOBUF_CONSTEXPR CSReqBuyChess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqBuyChess(const CSReqBuyChess& from);
  CSReqBuyChess(CSReqBuyChess&& from) noexcept
    : CSReqBuyChess() {
    *this = ::std::move(from);
  }

  inline CSReqBuyChess& operator=(const CSReqBuyChess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqBuyChess& operator=(CSReqBuyChess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqBuyChess& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqBuyChess* internal_default_instance() {
    return reinterpret_cast<const CSReqBuyChess*>(
               &_CSReqBuyChess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CSReqBuyChess& a, CSReqBuyChess& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqBuyChess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqBuyChess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqBuyChess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqBuyChess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqBuyChess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqBuyChess& from) {
    CSReqBuyChess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqBuyChess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqBuyChess";
  }
  protected:
  explicit CSReqBuyChess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShopIndexFieldNumber = 1,
    kBagIndexFieldNumber = 3,
    kTxFieldNumber = 4,
    kIsToBagFieldNumber = 2,
    kIsDragFieldNumber = 6,
    kTyFieldNumber = 5,
  };
  // int32 ShopIndex = 1;
  void clear_shopindex();
  int32_t shopindex() const;
  void set_shopindex(int32_t value);
  private:
  int32_t _internal_shopindex() const;
  void _internal_set_shopindex(int32_t value);
  public:

  // int32 BagIndex = 3;
  void clear_bagindex();
  int32_t bagindex() const;
  void set_bagindex(int32_t value);
  private:
  int32_t _internal_bagindex() const;
  void _internal_set_bagindex(int32_t value);
  public:

  // int32 Tx = 4;
  void clear_tx();
  int32_t tx() const;
  void set_tx(int32_t value);
  private:
  int32_t _internal_tx() const;
  void _internal_set_tx(int32_t value);
  public:

  // bool IsToBag = 2;
  void clear_istobag();
  bool istobag() const;
  void set_istobag(bool value);
  private:
  bool _internal_istobag() const;
  void _internal_set_istobag(bool value);
  public:

  // bool IsDrag = 6;
  void clear_isdrag();
  bool isdrag() const;
  void set_isdrag(bool value);
  private:
  bool _internal_isdrag() const;
  void _internal_set_isdrag(bool value);
  public:

  // int32 Ty = 5;
  void clear_ty();
  int32_t ty() const;
  void set_ty(int32_t value);
  private:
  int32_t _internal_ty() const;
  void _internal_set_ty(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqBuyChess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t shopindex_;
    int32_t bagindex_;
    int32_t tx_;
    bool istobag_;
    bool isdrag_;
    int32_t ty_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqSellChessInBag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqSellChessInBag) */ {
 public:
  inline CSReqSellChessInBag() : CSReqSellChessInBag(nullptr) {}
  ~CSReqSellChessInBag() override;
  explicit PROTOBUF_CONSTEXPR CSReqSellChessInBag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqSellChessInBag(const CSReqSellChessInBag& from);
  CSReqSellChessInBag(CSReqSellChessInBag&& from) noexcept
    : CSReqSellChessInBag() {
    *this = ::std::move(from);
  }

  inline CSReqSellChessInBag& operator=(const CSReqSellChessInBag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqSellChessInBag& operator=(CSReqSellChessInBag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqSellChessInBag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqSellChessInBag* internal_default_instance() {
    return reinterpret_cast<const CSReqSellChessInBag*>(
               &_CSReqSellChessInBag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CSReqSellChessInBag& a, CSReqSellChessInBag& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqSellChessInBag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqSellChessInBag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqSellChessInBag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqSellChessInBag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqSellChessInBag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqSellChessInBag& from) {
    CSReqSellChessInBag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqSellChessInBag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqSellChessInBag";
  }
  protected:
  explicit CSReqSellChessInBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBagIndexFieldNumber = 1,
  };
  // int32 BagIndex = 1;
  void clear_bagindex();
  int32_t bagindex() const;
  void set_bagindex(int32_t value);
  private:
  int32_t _internal_bagindex() const;
  void _internal_set_bagindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqSellChessInBag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t bagindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqSellChessOnBoard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqSellChessOnBoard) */ {
 public:
  inline CSReqSellChessOnBoard() : CSReqSellChessOnBoard(nullptr) {}
  ~CSReqSellChessOnBoard() override;
  explicit PROTOBUF_CONSTEXPR CSReqSellChessOnBoard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqSellChessOnBoard(const CSReqSellChessOnBoard& from);
  CSReqSellChessOnBoard(CSReqSellChessOnBoard&& from) noexcept
    : CSReqSellChessOnBoard() {
    *this = ::std::move(from);
  }

  inline CSReqSellChessOnBoard& operator=(const CSReqSellChessOnBoard& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqSellChessOnBoard& operator=(CSReqSellChessOnBoard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqSellChessOnBoard& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqSellChessOnBoard* internal_default_instance() {
    return reinterpret_cast<const CSReqSellChessOnBoard*>(
               &_CSReqSellChessOnBoard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CSReqSellChessOnBoard& a, CSReqSellChessOnBoard& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqSellChessOnBoard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqSellChessOnBoard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqSellChessOnBoard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqSellChessOnBoard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqSellChessOnBoard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqSellChessOnBoard& from) {
    CSReqSellChessOnBoard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqSellChessOnBoard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqSellChessOnBoard";
  }
  protected:
  explicit CSReqSellChessOnBoard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChessPosFieldNumber = 1,
  };
  // .msg.PositionInt2D ChessPos = 1;
  bool has_chesspos() const;
  private:
  bool _internal_has_chesspos() const;
  public:
  void clear_chesspos();
  const ::msg::PositionInt2D& chesspos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_chesspos();
  ::msg::PositionInt2D* mutable_chesspos();
  void set_allocated_chesspos(::msg::PositionInt2D* chesspos);
  private:
  const ::msg::PositionInt2D& _internal_chesspos() const;
  ::msg::PositionInt2D* _internal_mutable_chesspos();
  public:
  void unsafe_arena_set_allocated_chesspos(
      ::msg::PositionInt2D* chesspos);
  ::msg::PositionInt2D* unsafe_arena_release_chesspos();

  // @@protoc_insertion_point(class_scope:msg.CSReqSellChessOnBoard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionInt2D* chesspos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqMoveChess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqMoveChess) */ {
 public:
  inline CSReqMoveChess() : CSReqMoveChess(nullptr) {}
  ~CSReqMoveChess() override;
  explicit PROTOBUF_CONSTEXPR CSReqMoveChess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqMoveChess(const CSReqMoveChess& from);
  CSReqMoveChess(CSReqMoveChess&& from) noexcept
    : CSReqMoveChess() {
    *this = ::std::move(from);
  }

  inline CSReqMoveChess& operator=(const CSReqMoveChess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqMoveChess& operator=(CSReqMoveChess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqMoveChess& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqMoveChess* internal_default_instance() {
    return reinterpret_cast<const CSReqMoveChess*>(
               &_CSReqMoveChess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CSReqMoveChess& a, CSReqMoveChess& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqMoveChess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqMoveChess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqMoveChess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqMoveChess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqMoveChess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqMoveChess& from) {
    CSReqMoveChess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqMoveChess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqMoveChess";
  }
  protected:
  explicit CSReqMoveChess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcChessPosFieldNumber = 1,
    kDestChessPosFieldNumber = 2,
  };
  // .msg.PositionInt2D SrcChessPos = 1;
  bool has_srcchesspos() const;
  private:
  bool _internal_has_srcchesspos() const;
  public:
  void clear_srcchesspos();
  const ::msg::PositionInt2D& srcchesspos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_srcchesspos();
  ::msg::PositionInt2D* mutable_srcchesspos();
  void set_allocated_srcchesspos(::msg::PositionInt2D* srcchesspos);
  private:
  const ::msg::PositionInt2D& _internal_srcchesspos() const;
  ::msg::PositionInt2D* _internal_mutable_srcchesspos();
  public:
  void unsafe_arena_set_allocated_srcchesspos(
      ::msg::PositionInt2D* srcchesspos);
  ::msg::PositionInt2D* unsafe_arena_release_srcchesspos();

  // .msg.PositionInt2D DestChessPos = 2;
  bool has_destchesspos() const;
  private:
  bool _internal_has_destchesspos() const;
  public:
  void clear_destchesspos();
  const ::msg::PositionInt2D& destchesspos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_destchesspos();
  ::msg::PositionInt2D* mutable_destchesspos();
  void set_allocated_destchesspos(::msg::PositionInt2D* destchesspos);
  private:
  const ::msg::PositionInt2D& _internal_destchesspos() const;
  ::msg::PositionInt2D* _internal_mutable_destchesspos();
  public:
  void unsafe_arena_set_allocated_destchesspos(
      ::msg::PositionInt2D* destchesspos);
  ::msg::PositionInt2D* unsafe_arena_release_destchesspos();

  // @@protoc_insertion_point(class_scope:msg.CSReqMoveChess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionInt2D* srcchesspos_;
    ::msg::PositionInt2D* destchesspos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqBuyExp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqBuyExp) */ {
 public:
  inline CSReqBuyExp() : CSReqBuyExp(nullptr) {}
  ~CSReqBuyExp() override;
  explicit PROTOBUF_CONSTEXPR CSReqBuyExp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqBuyExp(const CSReqBuyExp& from);
  CSReqBuyExp(CSReqBuyExp&& from) noexcept
    : CSReqBuyExp() {
    *this = ::std::move(from);
  }

  inline CSReqBuyExp& operator=(const CSReqBuyExp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqBuyExp& operator=(CSReqBuyExp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqBuyExp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqBuyExp* internal_default_instance() {
    return reinterpret_cast<const CSReqBuyExp*>(
               &_CSReqBuyExp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CSReqBuyExp& a, CSReqBuyExp& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqBuyExp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqBuyExp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqBuyExp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqBuyExp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqBuyExp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqBuyExp& from) {
    CSReqBuyExp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqBuyExp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqBuyExp";
  }
  protected:
  explicit CSReqBuyExp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpFieldNumber = 1,
  };
  // int32 Exp = 1;
  void clear_exp();
  int32_t exp() const;
  void set_exp(int32_t value);
  private:
  int32_t _internal_exp() const;
  void _internal_set_exp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqBuyExp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t exp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqRefreshShop final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSReqRefreshShop) */ {
 public:
  inline CSReqRefreshShop() : CSReqRefreshShop(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSReqRefreshShop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqRefreshShop(const CSReqRefreshShop& from);
  CSReqRefreshShop(CSReqRefreshShop&& from) noexcept
    : CSReqRefreshShop() {
    *this = ::std::move(from);
  }

  inline CSReqRefreshShop& operator=(const CSReqRefreshShop& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqRefreshShop& operator=(CSReqRefreshShop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqRefreshShop& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqRefreshShop* internal_default_instance() {
    return reinterpret_cast<const CSReqRefreshShop*>(
               &_CSReqRefreshShop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CSReqRefreshShop& a, CSReqRefreshShop& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqRefreshShop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqRefreshShop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqRefreshShop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqRefreshShop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSReqRefreshShop& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSReqRefreshShop& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqRefreshShop";
  }
  protected:
  explicit CSReqRefreshShop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSReqRefreshShop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqMoveChessInBagToMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqMoveChessInBagToMap) */ {
 public:
  inline CSReqMoveChessInBagToMap() : CSReqMoveChessInBagToMap(nullptr) {}
  ~CSReqMoveChessInBagToMap() override;
  explicit PROTOBUF_CONSTEXPR CSReqMoveChessInBagToMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqMoveChessInBagToMap(const CSReqMoveChessInBagToMap& from);
  CSReqMoveChessInBagToMap(CSReqMoveChessInBagToMap&& from) noexcept
    : CSReqMoveChessInBagToMap() {
    *this = ::std::move(from);
  }

  inline CSReqMoveChessInBagToMap& operator=(const CSReqMoveChessInBagToMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqMoveChessInBagToMap& operator=(CSReqMoveChessInBagToMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqMoveChessInBagToMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqMoveChessInBagToMap* internal_default_instance() {
    return reinterpret_cast<const CSReqMoveChessInBagToMap*>(
               &_CSReqMoveChessInBagToMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CSReqMoveChessInBagToMap& a, CSReqMoveChessInBagToMap& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqMoveChessInBagToMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqMoveChessInBagToMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqMoveChessInBagToMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqMoveChessInBagToMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqMoveChessInBagToMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqMoveChessInBagToMap& from) {
    CSReqMoveChessInBagToMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqMoveChessInBagToMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqMoveChessInBagToMap";
  }
  protected:
  explicit CSReqMoveChessInBagToMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestPosFieldNumber = 2,
    kBagIdxFieldNumber = 1,
  };
  // .msg.PositionInt2D DestPos = 2;
  bool has_destpos() const;
  private:
  bool _internal_has_destpos() const;
  public:
  void clear_destpos();
  const ::msg::PositionInt2D& destpos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_destpos();
  ::msg::PositionInt2D* mutable_destpos();
  void set_allocated_destpos(::msg::PositionInt2D* destpos);
  private:
  const ::msg::PositionInt2D& _internal_destpos() const;
  ::msg::PositionInt2D* _internal_mutable_destpos();
  public:
  void unsafe_arena_set_allocated_destpos(
      ::msg::PositionInt2D* destpos);
  ::msg::PositionInt2D* unsafe_arena_release_destpos();

  // int32 BagIdx = 1;
  void clear_bagidx();
  int32_t bagidx() const;
  void set_bagidx(int32_t value);
  private:
  int32_t _internal_bagidx() const;
  void _internal_set_bagidx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqMoveChessInBagToMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionInt2D* destpos_;
    int32_t bagidx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqMoveChessWithinBag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqMoveChessWithinBag) */ {
 public:
  inline CSReqMoveChessWithinBag() : CSReqMoveChessWithinBag(nullptr) {}
  ~CSReqMoveChessWithinBag() override;
  explicit PROTOBUF_CONSTEXPR CSReqMoveChessWithinBag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqMoveChessWithinBag(const CSReqMoveChessWithinBag& from);
  CSReqMoveChessWithinBag(CSReqMoveChessWithinBag&& from) noexcept
    : CSReqMoveChessWithinBag() {
    *this = ::std::move(from);
  }

  inline CSReqMoveChessWithinBag& operator=(const CSReqMoveChessWithinBag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqMoveChessWithinBag& operator=(CSReqMoveChessWithinBag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqMoveChessWithinBag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqMoveChessWithinBag* internal_default_instance() {
    return reinterpret_cast<const CSReqMoveChessWithinBag*>(
               &_CSReqMoveChessWithinBag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CSReqMoveChessWithinBag& a, CSReqMoveChessWithinBag& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqMoveChessWithinBag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqMoveChessWithinBag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqMoveChessWithinBag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqMoveChessWithinBag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqMoveChessWithinBag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqMoveChessWithinBag& from) {
    CSReqMoveChessWithinBag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqMoveChessWithinBag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqMoveChessWithinBag";
  }
  protected:
  explicit CSReqMoveChessWithinBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcBagIdxFieldNumber = 1,
    kDestBagIdxFieldNumber = 2,
  };
  // int32 SrcBagIdx = 1;
  void clear_srcbagidx();
  int32_t srcbagidx() const;
  void set_srcbagidx(int32_t value);
  private:
  int32_t _internal_srcbagidx() const;
  void _internal_set_srcbagidx(int32_t value);
  public:

  // int32 DestBagIdx = 2;
  void clear_destbagidx();
  int32_t destbagidx() const;
  void set_destbagidx(int32_t value);
  private:
  int32_t _internal_destbagidx() const;
  void _internal_set_destbagidx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqMoveChessWithinBag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t srcbagidx_;
    int32_t destbagidx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqPlayerLoaded final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSReqPlayerLoaded) */ {
 public:
  inline CSReqPlayerLoaded() : CSReqPlayerLoaded(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSReqPlayerLoaded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqPlayerLoaded(const CSReqPlayerLoaded& from);
  CSReqPlayerLoaded(CSReqPlayerLoaded&& from) noexcept
    : CSReqPlayerLoaded() {
    *this = ::std::move(from);
  }

  inline CSReqPlayerLoaded& operator=(const CSReqPlayerLoaded& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqPlayerLoaded& operator=(CSReqPlayerLoaded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqPlayerLoaded& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqPlayerLoaded* internal_default_instance() {
    return reinterpret_cast<const CSReqPlayerLoaded*>(
               &_CSReqPlayerLoaded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CSReqPlayerLoaded& a, CSReqPlayerLoaded& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqPlayerLoaded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqPlayerLoaded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqPlayerLoaded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqPlayerLoaded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSReqPlayerLoaded& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSReqPlayerLoaded& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqPlayerLoaded";
  }
  protected:
  explicit CSReqPlayerLoaded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSReqPlayerLoaded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqPlayerRoundEnd final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSReqPlayerRoundEnd) */ {
 public:
  inline CSReqPlayerRoundEnd() : CSReqPlayerRoundEnd(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSReqPlayerRoundEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqPlayerRoundEnd(const CSReqPlayerRoundEnd& from);
  CSReqPlayerRoundEnd(CSReqPlayerRoundEnd&& from) noexcept
    : CSReqPlayerRoundEnd() {
    *this = ::std::move(from);
  }

  inline CSReqPlayerRoundEnd& operator=(const CSReqPlayerRoundEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqPlayerRoundEnd& operator=(CSReqPlayerRoundEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqPlayerRoundEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqPlayerRoundEnd* internal_default_instance() {
    return reinterpret_cast<const CSReqPlayerRoundEnd*>(
               &_CSReqPlayerRoundEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CSReqPlayerRoundEnd& a, CSReqPlayerRoundEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqPlayerRoundEnd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqPlayerRoundEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqPlayerRoundEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqPlayerRoundEnd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSReqPlayerRoundEnd& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSReqPlayerRoundEnd& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqPlayerRoundEnd";
  }
  protected:
  explicit CSReqPlayerRoundEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSReqPlayerRoundEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqPickupEquipment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqPickupEquipment) */ {
 public:
  inline CSReqPickupEquipment() : CSReqPickupEquipment(nullptr) {}
  ~CSReqPickupEquipment() override;
  explicit PROTOBUF_CONSTEXPR CSReqPickupEquipment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqPickupEquipment(const CSReqPickupEquipment& from);
  CSReqPickupEquipment(CSReqPickupEquipment&& from) noexcept
    : CSReqPickupEquipment() {
    *this = ::std::move(from);
  }

  inline CSReqPickupEquipment& operator=(const CSReqPickupEquipment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqPickupEquipment& operator=(CSReqPickupEquipment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqPickupEquipment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqPickupEquipment* internal_default_instance() {
    return reinterpret_cast<const CSReqPickupEquipment*>(
               &_CSReqPickupEquipment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CSReqPickupEquipment& a, CSReqPickupEquipment& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqPickupEquipment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqPickupEquipment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqPickupEquipment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqPickupEquipment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqPickupEquipment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqPickupEquipment& from) {
    CSReqPickupEquipment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqPickupEquipment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqPickupEquipment";
  }
  protected:
  explicit CSReqPickupEquipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetIdFieldNumber = 1,
  };
  // int32 NetId = 1;
  void clear_netid();
  int32_t netid() const;
  void set_netid(int32_t value);
  private:
  int32_t _internal_netid() const;
  void _internal_set_netid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqPickupEquipment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t netid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqCraftEquip final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqCraftEquip) */ {
 public:
  inline CSReqCraftEquip() : CSReqCraftEquip(nullptr) {}
  ~CSReqCraftEquip() override;
  explicit PROTOBUF_CONSTEXPR CSReqCraftEquip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqCraftEquip(const CSReqCraftEquip& from);
  CSReqCraftEquip(CSReqCraftEquip&& from) noexcept
    : CSReqCraftEquip() {
    *this = ::std::move(from);
  }

  inline CSReqCraftEquip& operator=(const CSReqCraftEquip& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqCraftEquip& operator=(CSReqCraftEquip&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqCraftEquip& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqCraftEquip* internal_default_instance() {
    return reinterpret_cast<const CSReqCraftEquip*>(
               &_CSReqCraftEquip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CSReqCraftEquip& a, CSReqCraftEquip& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqCraftEquip* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqCraftEquip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqCraftEquip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqCraftEquip>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqCraftEquip& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqCraftEquip& from) {
    CSReqCraftEquip::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqCraftEquip* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqCraftEquip";
  }
  protected:
  explicit CSReqCraftEquip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipNetIdsFieldNumber = 1,
    kIsToChessFieldNumber = 2,
  };
  // repeated int32 EquipNetIds = 1;
  int equipnetids_size() const;
  private:
  int _internal_equipnetids_size() const;
  public:
  void clear_equipnetids();
  private:
  int32_t _internal_equipnetids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_equipnetids() const;
  void _internal_add_equipnetids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_equipnetids();
  public:
  int32_t equipnetids(int index) const;
  void set_equipnetids(int index, int32_t value);
  void add_equipnetids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      equipnetids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_equipnetids();

  // bool IsToChess = 2;
  void clear_istochess();
  bool istochess() const;
  void set_istochess(bool value);
  private:
  bool _internal_istochess() const;
  void _internal_set_istochess(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqCraftEquip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > equipnetids_;
    mutable std::atomic<int> _equipnetids_cached_byte_size_;
    bool istochess_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqUseEquipment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqUseEquipment) */ {
 public:
  inline CSReqUseEquipment() : CSReqUseEquipment(nullptr) {}
  ~CSReqUseEquipment() override;
  explicit PROTOBUF_CONSTEXPR CSReqUseEquipment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqUseEquipment(const CSReqUseEquipment& from);
  CSReqUseEquipment(CSReqUseEquipment&& from) noexcept
    : CSReqUseEquipment() {
    *this = ::std::move(from);
  }

  inline CSReqUseEquipment& operator=(const CSReqUseEquipment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqUseEquipment& operator=(CSReqUseEquipment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqUseEquipment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqUseEquipment* internal_default_instance() {
    return reinterpret_cast<const CSReqUseEquipment*>(
               &_CSReqUseEquipment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CSReqUseEquipment& a, CSReqUseEquipment& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqUseEquipment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqUseEquipment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqUseEquipment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqUseEquipment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqUseEquipment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqUseEquipment& from) {
    CSReqUseEquipment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqUseEquipment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqUseEquipment";
  }
  protected:
  explicit CSReqUseEquipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 4,
    kNetIdFieldNumber = 1,
    kIsChessInBagFieldNumber = 2,
    kBagIndexFieldNumber = 3,
  };
  // .msg.PositionInt2D Pos = 4;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::msg::PositionInt2D& pos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_pos();
  ::msg::PositionInt2D* mutable_pos();
  void set_allocated_pos(::msg::PositionInt2D* pos);
  private:
  const ::msg::PositionInt2D& _internal_pos() const;
  ::msg::PositionInt2D* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::msg::PositionInt2D* pos);
  ::msg::PositionInt2D* unsafe_arena_release_pos();

  // int32 NetId = 1;
  void clear_netid();
  int32_t netid() const;
  void set_netid(int32_t value);
  private:
  int32_t _internal_netid() const;
  void _internal_set_netid(int32_t value);
  public:

  // bool IsChessInBag = 2;
  void clear_ischessinbag();
  bool ischessinbag() const;
  void set_ischessinbag(bool value);
  private:
  bool _internal_ischessinbag() const;
  void _internal_set_ischessinbag(bool value);
  public:

  // int32 BagIndex = 3;
  void clear_bagindex();
  int32_t bagindex() const;
  void set_bagindex(int32_t value);
  private:
  int32_t _internal_bagindex() const;
  void _internal_set_bagindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqUseEquipment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionInt2D* pos_;
    int32_t netid_;
    bool ischessinbag_;
    int32_t bagindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqUpdateAntiAddictionTime final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSReqUpdateAntiAddictionTime) */ {
 public:
  inline CSReqUpdateAntiAddictionTime() : CSReqUpdateAntiAddictionTime(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSReqUpdateAntiAddictionTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqUpdateAntiAddictionTime(const CSReqUpdateAntiAddictionTime& from);
  CSReqUpdateAntiAddictionTime(CSReqUpdateAntiAddictionTime&& from) noexcept
    : CSReqUpdateAntiAddictionTime() {
    *this = ::std::move(from);
  }

  inline CSReqUpdateAntiAddictionTime& operator=(const CSReqUpdateAntiAddictionTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqUpdateAntiAddictionTime& operator=(CSReqUpdateAntiAddictionTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqUpdateAntiAddictionTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqUpdateAntiAddictionTime* internal_default_instance() {
    return reinterpret_cast<const CSReqUpdateAntiAddictionTime*>(
               &_CSReqUpdateAntiAddictionTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CSReqUpdateAntiAddictionTime& a, CSReqUpdateAntiAddictionTime& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqUpdateAntiAddictionTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqUpdateAntiAddictionTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqUpdateAntiAddictionTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqUpdateAntiAddictionTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSReqUpdateAntiAddictionTime& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSReqUpdateAntiAddictionTime& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqUpdateAntiAddictionTime";
  }
  protected:
  explicit CSReqUpdateAntiAddictionTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSReqUpdateAntiAddictionTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqCancelReconnect final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSReqCancelReconnect) */ {
 public:
  inline CSReqCancelReconnect() : CSReqCancelReconnect(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSReqCancelReconnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqCancelReconnect(const CSReqCancelReconnect& from);
  CSReqCancelReconnect(CSReqCancelReconnect&& from) noexcept
    : CSReqCancelReconnect() {
    *this = ::std::move(from);
  }

  inline CSReqCancelReconnect& operator=(const CSReqCancelReconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqCancelReconnect& operator=(CSReqCancelReconnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqCancelReconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqCancelReconnect* internal_default_instance() {
    return reinterpret_cast<const CSReqCancelReconnect*>(
               &_CSReqCancelReconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CSReqCancelReconnect& a, CSReqCancelReconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqCancelReconnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqCancelReconnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqCancelReconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqCancelReconnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSReqCancelReconnect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSReqCancelReconnect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqCancelReconnect";
  }
  protected:
  explicit CSReqCancelReconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSReqCancelReconnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqSetAutoUpgradeCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqSetAutoUpgradeCharacter) */ {
 public:
  inline CSReqSetAutoUpgradeCharacter() : CSReqSetAutoUpgradeCharacter(nullptr) {}
  ~CSReqSetAutoUpgradeCharacter() override;
  explicit PROTOBUF_CONSTEXPR CSReqSetAutoUpgradeCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqSetAutoUpgradeCharacter(const CSReqSetAutoUpgradeCharacter& from);
  CSReqSetAutoUpgradeCharacter(CSReqSetAutoUpgradeCharacter&& from) noexcept
    : CSReqSetAutoUpgradeCharacter() {
    *this = ::std::move(from);
  }

  inline CSReqSetAutoUpgradeCharacter& operator=(const CSReqSetAutoUpgradeCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqSetAutoUpgradeCharacter& operator=(CSReqSetAutoUpgradeCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqSetAutoUpgradeCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqSetAutoUpgradeCharacter* internal_default_instance() {
    return reinterpret_cast<const CSReqSetAutoUpgradeCharacter*>(
               &_CSReqSetAutoUpgradeCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CSReqSetAutoUpgradeCharacter& a, CSReqSetAutoUpgradeCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqSetAutoUpgradeCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqSetAutoUpgradeCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqSetAutoUpgradeCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqSetAutoUpgradeCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqSetAutoUpgradeCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqSetAutoUpgradeCharacter& from) {
    CSReqSetAutoUpgradeCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqSetAutoUpgradeCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqSetAutoUpgradeCharacter";
  }
  protected:
  explicit CSReqSetAutoUpgradeCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwitchOnFieldNumber = 1,
  };
  // bool SwitchOn = 1;
  void clear_switchon();
  bool switchon() const;
  void set_switchon(bool value);
  private:
  bool _internal_switchon() const;
  void _internal_set_switchon(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqSetAutoUpgradeCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool switchon_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqReconnect final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSReqReconnect) */ {
 public:
  inline CSReqReconnect() : CSReqReconnect(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSReqReconnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqReconnect(const CSReqReconnect& from);
  CSReqReconnect(CSReqReconnect&& from) noexcept
    : CSReqReconnect() {
    *this = ::std::move(from);
  }

  inline CSReqReconnect& operator=(const CSReqReconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqReconnect& operator=(CSReqReconnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqReconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqReconnect* internal_default_instance() {
    return reinterpret_cast<const CSReqReconnect*>(
               &_CSReqReconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CSReqReconnect& a, CSReqReconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqReconnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqReconnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqReconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqReconnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSReqReconnect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSReqReconnect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqReconnect";
  }
  protected:
  explicit CSReqReconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSReqReconnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqManuallyUpgradeCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqManuallyUpgradeCharacter) */ {
 public:
  inline CSReqManuallyUpgradeCharacter() : CSReqManuallyUpgradeCharacter(nullptr) {}
  ~CSReqManuallyUpgradeCharacter() override;
  explicit PROTOBUF_CONSTEXPR CSReqManuallyUpgradeCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqManuallyUpgradeCharacter(const CSReqManuallyUpgradeCharacter& from);
  CSReqManuallyUpgradeCharacter(CSReqManuallyUpgradeCharacter&& from) noexcept
    : CSReqManuallyUpgradeCharacter() {
    *this = ::std::move(from);
  }

  inline CSReqManuallyUpgradeCharacter& operator=(const CSReqManuallyUpgradeCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqManuallyUpgradeCharacter& operator=(CSReqManuallyUpgradeCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqManuallyUpgradeCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqManuallyUpgradeCharacter* internal_default_instance() {
    return reinterpret_cast<const CSReqManuallyUpgradeCharacter*>(
               &_CSReqManuallyUpgradeCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CSReqManuallyUpgradeCharacter& a, CSReqManuallyUpgradeCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqManuallyUpgradeCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqManuallyUpgradeCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqManuallyUpgradeCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqManuallyUpgradeCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqManuallyUpgradeCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqManuallyUpgradeCharacter& from) {
    CSReqManuallyUpgradeCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqManuallyUpgradeCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqManuallyUpgradeCharacter";
  }
  protected:
  explicit CSReqManuallyUpgradeCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBagIndexFieldNumber = 1,
    kTxFieldNumber = 2,
    kTyFieldNumber = 3,
    kIsInBagFieldNumber = 4,
  };
  // int32 BagIndex = 1;
  void clear_bagindex();
  int32_t bagindex() const;
  void set_bagindex(int32_t value);
  private:
  int32_t _internal_bagindex() const;
  void _internal_set_bagindex(int32_t value);
  public:

  // int32 Tx = 2;
  void clear_tx();
  int32_t tx() const;
  void set_tx(int32_t value);
  private:
  int32_t _internal_tx() const;
  void _internal_set_tx(int32_t value);
  public:

  // int32 Ty = 3;
  void clear_ty();
  int32_t ty() const;
  void set_ty(int32_t value);
  private:
  int32_t _internal_ty() const;
  void _internal_set_ty(int32_t value);
  public:

  // bool IsInBag = 4;
  void clear_isinbag();
  bool isinbag() const;
  void set_isinbag(bool value);
  private:
  bool _internal_isinbag() const;
  void _internal_set_isinbag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqManuallyUpgradeCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t bagindex_;
    int32_t tx_;
    int32_t ty_;
    bool isinbag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqQuitBattle final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSReqQuitBattle) */ {
 public:
  inline CSReqQuitBattle() : CSReqQuitBattle(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSReqQuitBattle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqQuitBattle(const CSReqQuitBattle& from);
  CSReqQuitBattle(CSReqQuitBattle&& from) noexcept
    : CSReqQuitBattle() {
    *this = ::std::move(from);
  }

  inline CSReqQuitBattle& operator=(const CSReqQuitBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqQuitBattle& operator=(CSReqQuitBattle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqQuitBattle& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqQuitBattle* internal_default_instance() {
    return reinterpret_cast<const CSReqQuitBattle*>(
               &_CSReqQuitBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CSReqQuitBattle& a, CSReqQuitBattle& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqQuitBattle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqQuitBattle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqQuitBattle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqQuitBattle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSReqQuitBattle& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSReqQuitBattle& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqQuitBattle";
  }
  protected:
  explicit CSReqQuitBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSReqQuitBattle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqSusPendGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqSusPendGame) */ {
 public:
  inline CSReqSusPendGame() : CSReqSusPendGame(nullptr) {}
  ~CSReqSusPendGame() override;
  explicit PROTOBUF_CONSTEXPR CSReqSusPendGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqSusPendGame(const CSReqSusPendGame& from);
  CSReqSusPendGame(CSReqSusPendGame&& from) noexcept
    : CSReqSusPendGame() {
    *this = ::std::move(from);
  }

  inline CSReqSusPendGame& operator=(const CSReqSusPendGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqSusPendGame& operator=(CSReqSusPendGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqSusPendGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqSusPendGame* internal_default_instance() {
    return reinterpret_cast<const CSReqSusPendGame*>(
               &_CSReqSusPendGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CSReqSusPendGame& a, CSReqSusPendGame& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqSusPendGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqSusPendGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqSusPendGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqSusPendGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqSusPendGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqSusPendGame& from) {
    CSReqSusPendGame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqSusPendGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqSusPendGame";
  }
  protected:
  explicit CSReqSusPendGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSusPendFieldNumber = 1,
  };
  // bool susPend = 1;
  void clear_suspend();
  bool suspend() const;
  void set_suspend(bool value);
  private:
  bool _internal_suspend() const;
  void _internal_set_suspend(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqSusPendGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool suspend_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqChessDB final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSReqChessDB) */ {
 public:
  inline CSReqChessDB() : CSReqChessDB(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSReqChessDB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqChessDB(const CSReqChessDB& from);
  CSReqChessDB(CSReqChessDB&& from) noexcept
    : CSReqChessDB() {
    *this = ::std::move(from);
  }

  inline CSReqChessDB& operator=(const CSReqChessDB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqChessDB& operator=(CSReqChessDB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqChessDB& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqChessDB* internal_default_instance() {
    return reinterpret_cast<const CSReqChessDB*>(
               &_CSReqChessDB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CSReqChessDB& a, CSReqChessDB& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqChessDB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqChessDB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqChessDB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqChessDB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSReqChessDB& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSReqChessDB& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqChessDB";
  }
  protected:
  explicit CSReqChessDB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSReqChessDB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqStatisticsInfo final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSReqStatisticsInfo) */ {
 public:
  inline CSReqStatisticsInfo() : CSReqStatisticsInfo(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSReqStatisticsInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqStatisticsInfo(const CSReqStatisticsInfo& from);
  CSReqStatisticsInfo(CSReqStatisticsInfo&& from) noexcept
    : CSReqStatisticsInfo() {
    *this = ::std::move(from);
  }

  inline CSReqStatisticsInfo& operator=(const CSReqStatisticsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqStatisticsInfo& operator=(CSReqStatisticsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqStatisticsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqStatisticsInfo* internal_default_instance() {
    return reinterpret_cast<const CSReqStatisticsInfo*>(
               &_CSReqStatisticsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CSReqStatisticsInfo& a, CSReqStatisticsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqStatisticsInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqStatisticsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqStatisticsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqStatisticsInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSReqStatisticsInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSReqStatisticsInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqStatisticsInfo";
  }
  protected:
  explicit CSReqStatisticsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSReqStatisticsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqPassThrough final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqPassThrough) */ {
 public:
  inline CSReqPassThrough() : CSReqPassThrough(nullptr) {}
  ~CSReqPassThrough() override;
  explicit PROTOBUF_CONSTEXPR CSReqPassThrough(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqPassThrough(const CSReqPassThrough& from);
  CSReqPassThrough(CSReqPassThrough&& from) noexcept
    : CSReqPassThrough() {
    *this = ::std::move(from);
  }

  inline CSReqPassThrough& operator=(const CSReqPassThrough& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqPassThrough& operator=(CSReqPassThrough&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqPassThrough& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqPassThrough* internal_default_instance() {
    return reinterpret_cast<const CSReqPassThrough*>(
               &_CSReqPassThrough_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CSReqPassThrough& a, CSReqPassThrough& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqPassThrough* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqPassThrough* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqPassThrough* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqPassThrough>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqPassThrough& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqPassThrough& from) {
    CSReqPassThrough::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqPassThrough* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqPassThrough";
  }
  protected:
  explicit CSReqPassThrough(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqPassThrough)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqUpdateBattleResult final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSReqUpdateBattleResult) */ {
 public:
  inline CSReqUpdateBattleResult() : CSReqUpdateBattleResult(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSReqUpdateBattleResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqUpdateBattleResult(const CSReqUpdateBattleResult& from);
  CSReqUpdateBattleResult(CSReqUpdateBattleResult&& from) noexcept
    : CSReqUpdateBattleResult() {
    *this = ::std::move(from);
  }

  inline CSReqUpdateBattleResult& operator=(const CSReqUpdateBattleResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqUpdateBattleResult& operator=(CSReqUpdateBattleResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqUpdateBattleResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqUpdateBattleResult* internal_default_instance() {
    return reinterpret_cast<const CSReqUpdateBattleResult*>(
               &_CSReqUpdateBattleResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CSReqUpdateBattleResult& a, CSReqUpdateBattleResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqUpdateBattleResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqUpdateBattleResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqUpdateBattleResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqUpdateBattleResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSReqUpdateBattleResult& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSReqUpdateBattleResult& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqUpdateBattleResult";
  }
  protected:
  explicit CSReqUpdateBattleResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSReqUpdateBattleResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqVisitPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSReqVisitPlayer) */ {
 public:
  inline CSReqVisitPlayer() : CSReqVisitPlayer(nullptr) {}
  ~CSReqVisitPlayer() override;
  explicit PROTOBUF_CONSTEXPR CSReqVisitPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqVisitPlayer(const CSReqVisitPlayer& from);
  CSReqVisitPlayer(CSReqVisitPlayer&& from) noexcept
    : CSReqVisitPlayer() {
    *this = ::std::move(from);
  }

  inline CSReqVisitPlayer& operator=(const CSReqVisitPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqVisitPlayer& operator=(CSReqVisitPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqVisitPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqVisitPlayer* internal_default_instance() {
    return reinterpret_cast<const CSReqVisitPlayer*>(
               &_CSReqVisitPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CSReqVisitPlayer& a, CSReqVisitPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqVisitPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqVisitPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqVisitPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqVisitPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSReqVisitPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSReqVisitPlayer& from) {
    CSReqVisitPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSReqVisitPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqVisitPlayer";
  }
  protected:
  explicit CSReqVisitPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcPlayerIndexFieldNumber = 1,
    kDestPlayerIndexFieldNumber = 2,
  };
  // int32 SrcPlayerIndex = 1;
  void clear_srcplayerindex();
  int32_t srcplayerindex() const;
  void set_srcplayerindex(int32_t value);
  private:
  int32_t _internal_srcplayerindex() const;
  void _internal_set_srcplayerindex(int32_t value);
  public:

  // int32 DestPlayerIndex = 2;
  void clear_destplayerindex();
  int32_t destplayerindex() const;
  void set_destplayerindex(int32_t value);
  private:
  int32_t _internal_destplayerindex() const;
  void _internal_set_destplayerindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSReqVisitPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t srcplayerindex_;
    int32_t destplayerindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqLeaveGameEarly final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSReqLeaveGameEarly) */ {
 public:
  inline CSReqLeaveGameEarly() : CSReqLeaveGameEarly(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSReqLeaveGameEarly(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqLeaveGameEarly(const CSReqLeaveGameEarly& from);
  CSReqLeaveGameEarly(CSReqLeaveGameEarly&& from) noexcept
    : CSReqLeaveGameEarly() {
    *this = ::std::move(from);
  }

  inline CSReqLeaveGameEarly& operator=(const CSReqLeaveGameEarly& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqLeaveGameEarly& operator=(CSReqLeaveGameEarly&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqLeaveGameEarly& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqLeaveGameEarly* internal_default_instance() {
    return reinterpret_cast<const CSReqLeaveGameEarly*>(
               &_CSReqLeaveGameEarly_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CSReqLeaveGameEarly& a, CSReqLeaveGameEarly& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqLeaveGameEarly* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqLeaveGameEarly* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqLeaveGameEarly* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqLeaveGameEarly>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSReqLeaveGameEarly& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSReqLeaveGameEarly& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqLeaveGameEarly";
  }
  protected:
  explicit CSReqLeaveGameEarly(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSReqLeaveGameEarly)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSReqReportAbsent final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSReqReportAbsent) */ {
 public:
  inline CSReqReportAbsent() : CSReqReportAbsent(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSReqReportAbsent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSReqReportAbsent(const CSReqReportAbsent& from);
  CSReqReportAbsent(CSReqReportAbsent&& from) noexcept
    : CSReqReportAbsent() {
    *this = ::std::move(from);
  }

  inline CSReqReportAbsent& operator=(const CSReqReportAbsent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSReqReportAbsent& operator=(CSReqReportAbsent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSReqReportAbsent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSReqReportAbsent* internal_default_instance() {
    return reinterpret_cast<const CSReqReportAbsent*>(
               &_CSReqReportAbsent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CSReqReportAbsent& a, CSReqReportAbsent& b) {
    a.Swap(&b);
  }
  inline void Swap(CSReqReportAbsent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSReqReportAbsent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSReqReportAbsent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSReqReportAbsent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSReqReportAbsent& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSReqReportAbsent& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSReqReportAbsent";
  }
  protected:
  explicit CSReqReportAbsent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSReqReportAbsent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspSetMessengerPos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspSetMessengerPos) */ {
 public:
  inline CSRspSetMessengerPos() : CSRspSetMessengerPos(nullptr) {}
  ~CSRspSetMessengerPos() override;
  explicit PROTOBUF_CONSTEXPR CSRspSetMessengerPos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspSetMessengerPos(const CSRspSetMessengerPos& from);
  CSRspSetMessengerPos(CSRspSetMessengerPos&& from) noexcept
    : CSRspSetMessengerPos() {
    *this = ::std::move(from);
  }

  inline CSRspSetMessengerPos& operator=(const CSRspSetMessengerPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspSetMessengerPos& operator=(CSRspSetMessengerPos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspSetMessengerPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspSetMessengerPos* internal_default_instance() {
    return reinterpret_cast<const CSRspSetMessengerPos*>(
               &_CSRspSetMessengerPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CSRspSetMessengerPos& a, CSRspSetMessengerPos& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspSetMessengerPos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspSetMessengerPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspSetMessengerPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspSetMessengerPos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspSetMessengerPos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspSetMessengerPos& from) {
    CSRspSetMessengerPos::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspSetMessengerPos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspSetMessengerPos";
  }
  protected:
  explicit CSRspSetMessengerPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // .msg.MessengerMoveType Type = 2;
  void clear_type();
  ::msg::MessengerMoveType type() const;
  void set_type(::msg::MessengerMoveType value);
  private:
  ::msg::MessengerMoveType _internal_type() const;
  void _internal_set_type(::msg::MessengerMoveType value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspSetMessengerPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspPvpSetReadyState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspPvpSetReadyState) */ {
 public:
  inline CSRspPvpSetReadyState() : CSRspPvpSetReadyState(nullptr) {}
  ~CSRspPvpSetReadyState() override;
  explicit PROTOBUF_CONSTEXPR CSRspPvpSetReadyState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspPvpSetReadyState(const CSRspPvpSetReadyState& from);
  CSRspPvpSetReadyState(CSRspPvpSetReadyState&& from) noexcept
    : CSRspPvpSetReadyState() {
    *this = ::std::move(from);
  }

  inline CSRspPvpSetReadyState& operator=(const CSRspPvpSetReadyState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspPvpSetReadyState& operator=(CSRspPvpSetReadyState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspPvpSetReadyState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspPvpSetReadyState* internal_default_instance() {
    return reinterpret_cast<const CSRspPvpSetReadyState*>(
               &_CSRspPvpSetReadyState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CSRspPvpSetReadyState& a, CSRspPvpSetReadyState& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspPvpSetReadyState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspPvpSetReadyState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspPvpSetReadyState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspPvpSetReadyState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspPvpSetReadyState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspPvpSetReadyState& from) {
    CSRspPvpSetReadyState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspPvpSetReadyState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspPvpSetReadyState";
  }
  protected:
  explicit CSRspPvpSetReadyState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspPvpSetReadyState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspSetRefreshShopLock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspSetRefreshShopLock) */ {
 public:
  inline CSRspSetRefreshShopLock() : CSRspSetRefreshShopLock(nullptr) {}
  ~CSRspSetRefreshShopLock() override;
  explicit PROTOBUF_CONSTEXPR CSRspSetRefreshShopLock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspSetRefreshShopLock(const CSRspSetRefreshShopLock& from);
  CSRspSetRefreshShopLock(CSRspSetRefreshShopLock&& from) noexcept
    : CSRspSetRefreshShopLock() {
    *this = ::std::move(from);
  }

  inline CSRspSetRefreshShopLock& operator=(const CSRspSetRefreshShopLock& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspSetRefreshShopLock& operator=(CSRspSetRefreshShopLock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspSetRefreshShopLock& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspSetRefreshShopLock* internal_default_instance() {
    return reinterpret_cast<const CSRspSetRefreshShopLock*>(
               &_CSRspSetRefreshShopLock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CSRspSetRefreshShopLock& a, CSRspSetRefreshShopLock& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspSetRefreshShopLock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspSetRefreshShopLock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspSetRefreshShopLock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspSetRefreshShopLock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspSetRefreshShopLock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspSetRefreshShopLock& from) {
    CSRspSetRefreshShopLock::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspSetRefreshShopLock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspSetRefreshShopLock";
  }
  protected:
  explicit CSRspSetRefreshShopLock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kIsLockFieldNumber = 2,
  };
  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool IsLock = 2;
  void clear_islock();
  bool islock() const;
  void set_islock(bool value);
  private:
  bool _internal_islock() const;
  void _internal_set_islock(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspSetRefreshShopLock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    bool islock_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspRetrieveChess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspRetrieveChess) */ {
 public:
  inline CSRspRetrieveChess() : CSRspRetrieveChess(nullptr) {}
  ~CSRspRetrieveChess() override;
  explicit PROTOBUF_CONSTEXPR CSRspRetrieveChess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspRetrieveChess(const CSRspRetrieveChess& from);
  CSRspRetrieveChess(CSRspRetrieveChess&& from) noexcept
    : CSRspRetrieveChess() {
    *this = ::std::move(from);
  }

  inline CSRspRetrieveChess& operator=(const CSRspRetrieveChess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspRetrieveChess& operator=(CSRspRetrieveChess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspRetrieveChess& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspRetrieveChess* internal_default_instance() {
    return reinterpret_cast<const CSRspRetrieveChess*>(
               &_CSRspRetrieveChess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CSRspRetrieveChess& a, CSRspRetrieveChess& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspRetrieveChess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspRetrieveChess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspRetrieveChess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspRetrieveChess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspRetrieveChess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspRetrieveChess& from) {
    CSRspRetrieveChess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspRetrieveChess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspRetrieveChess";
  }
  protected:
  explicit CSRspRetrieveChess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcChessPosFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kBagIndexFieldNumber = 2,
  };
  // .msg.PositionInt2D SrcChessPos = 3;
  bool has_srcchesspos() const;
  private:
  bool _internal_has_srcchesspos() const;
  public:
  void clear_srcchesspos();
  const ::msg::PositionInt2D& srcchesspos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_srcchesspos();
  ::msg::PositionInt2D* mutable_srcchesspos();
  void set_allocated_srcchesspos(::msg::PositionInt2D* srcchesspos);
  private:
  const ::msg::PositionInt2D& _internal_srcchesspos() const;
  ::msg::PositionInt2D* _internal_mutable_srcchesspos();
  public:
  void unsafe_arena_set_allocated_srcchesspos(
      ::msg::PositionInt2D* srcchesspos);
  ::msg::PositionInt2D* unsafe_arena_release_srcchesspos();

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 BagIndex = 2;
  void clear_bagindex();
  int32_t bagindex() const;
  void set_bagindex(int32_t value);
  private:
  int32_t _internal_bagindex() const;
  void _internal_set_bagindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspRetrieveChess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionInt2D* srcchesspos_;
    bool success_;
    int32_t bagindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspBuyChess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspBuyChess) */ {
 public:
  inline CSRspBuyChess() : CSRspBuyChess(nullptr) {}
  ~CSRspBuyChess() override;
  explicit PROTOBUF_CONSTEXPR CSRspBuyChess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspBuyChess(const CSRspBuyChess& from);
  CSRspBuyChess(CSRspBuyChess&& from) noexcept
    : CSRspBuyChess() {
    *this = ::std::move(from);
  }

  inline CSRspBuyChess& operator=(const CSRspBuyChess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspBuyChess& operator=(CSRspBuyChess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspBuyChess& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspBuyChess* internal_default_instance() {
    return reinterpret_cast<const CSRspBuyChess*>(
               &_CSRspBuyChess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CSRspBuyChess& a, CSRspBuyChess& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspBuyChess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspBuyChess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspBuyChess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspBuyChess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspBuyChess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspBuyChess& from) {
    CSRspBuyChess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspBuyChess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspBuyChess";
  }
  protected:
  explicit CSRspBuyChess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBagIndexFieldNumber = 2,
    kShopIndexFieldNumber = 3,
    kConfigIdFieldNumber = 4,
    kSuccessFieldNumber = 1,
    kIsToBagFieldNumber = 5,
    kIsDragFieldNumber = 8,
    kTxFieldNumber = 6,
    kTyFieldNumber = 7,
  };
  // int32 BagIndex = 2;
  void clear_bagindex();
  int32_t bagindex() const;
  void set_bagindex(int32_t value);
  private:
  int32_t _internal_bagindex() const;
  void _internal_set_bagindex(int32_t value);
  public:

  // int32 ShopIndex = 3;
  void clear_shopindex();
  int32_t shopindex() const;
  void set_shopindex(int32_t value);
  private:
  int32_t _internal_shopindex() const;
  void _internal_set_shopindex(int32_t value);
  public:

  // int32 ConfigId = 4;
  void clear_configid();
  int32_t configid() const;
  void set_configid(int32_t value);
  private:
  int32_t _internal_configid() const;
  void _internal_set_configid(int32_t value);
  public:

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool IsToBag = 5;
  void clear_istobag();
  bool istobag() const;
  void set_istobag(bool value);
  private:
  bool _internal_istobag() const;
  void _internal_set_istobag(bool value);
  public:

  // bool IsDrag = 8;
  void clear_isdrag();
  bool isdrag() const;
  void set_isdrag(bool value);
  private:
  bool _internal_isdrag() const;
  void _internal_set_isdrag(bool value);
  public:

  // int32 Tx = 6;
  void clear_tx();
  int32_t tx() const;
  void set_tx(int32_t value);
  private:
  int32_t _internal_tx() const;
  void _internal_set_tx(int32_t value);
  public:

  // int32 Ty = 7;
  void clear_ty();
  int32_t ty() const;
  void set_ty(int32_t value);
  private:
  int32_t _internal_ty() const;
  void _internal_set_ty(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspBuyChess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t bagindex_;
    int32_t shopindex_;
    int32_t configid_;
    bool success_;
    bool istobag_;
    bool isdrag_;
    int32_t tx_;
    int32_t ty_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspSellChessInBag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspSellChessInBag) */ {
 public:
  inline CSRspSellChessInBag() : CSRspSellChessInBag(nullptr) {}
  ~CSRspSellChessInBag() override;
  explicit PROTOBUF_CONSTEXPR CSRspSellChessInBag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspSellChessInBag(const CSRspSellChessInBag& from);
  CSRspSellChessInBag(CSRspSellChessInBag&& from) noexcept
    : CSRspSellChessInBag() {
    *this = ::std::move(from);
  }

  inline CSRspSellChessInBag& operator=(const CSRspSellChessInBag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspSellChessInBag& operator=(CSRspSellChessInBag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspSellChessInBag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspSellChessInBag* internal_default_instance() {
    return reinterpret_cast<const CSRspSellChessInBag*>(
               &_CSRspSellChessInBag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CSRspSellChessInBag& a, CSRspSellChessInBag& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspSellChessInBag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspSellChessInBag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspSellChessInBag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspSellChessInBag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspSellChessInBag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspSellChessInBag& from) {
    CSRspSellChessInBag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspSellChessInBag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspSellChessInBag";
  }
  protected:
  explicit CSRspSellChessInBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kLeftMoneyFieldNumber = 2,
    kBagIndexFieldNumber = 3,
  };
  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 LeftMoney = 2;
  void clear_leftmoney();
  int32_t leftmoney() const;
  void set_leftmoney(int32_t value);
  private:
  int32_t _internal_leftmoney() const;
  void _internal_set_leftmoney(int32_t value);
  public:

  // int32 BagIndex = 3;
  void clear_bagindex();
  int32_t bagindex() const;
  void set_bagindex(int32_t value);
  private:
  int32_t _internal_bagindex() const;
  void _internal_set_bagindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspSellChessInBag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    int32_t leftmoney_;
    int32_t bagindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspSellChessOnBoard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspSellChessOnBoard) */ {
 public:
  inline CSRspSellChessOnBoard() : CSRspSellChessOnBoard(nullptr) {}
  ~CSRspSellChessOnBoard() override;
  explicit PROTOBUF_CONSTEXPR CSRspSellChessOnBoard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspSellChessOnBoard(const CSRspSellChessOnBoard& from);
  CSRspSellChessOnBoard(CSRspSellChessOnBoard&& from) noexcept
    : CSRspSellChessOnBoard() {
    *this = ::std::move(from);
  }

  inline CSRspSellChessOnBoard& operator=(const CSRspSellChessOnBoard& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspSellChessOnBoard& operator=(CSRspSellChessOnBoard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspSellChessOnBoard& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspSellChessOnBoard* internal_default_instance() {
    return reinterpret_cast<const CSRspSellChessOnBoard*>(
               &_CSRspSellChessOnBoard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CSRspSellChessOnBoard& a, CSRspSellChessOnBoard& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspSellChessOnBoard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspSellChessOnBoard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspSellChessOnBoard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspSellChessOnBoard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspSellChessOnBoard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspSellChessOnBoard& from) {
    CSRspSellChessOnBoard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspSellChessOnBoard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspSellChessOnBoard";
  }
  protected:
  explicit CSRspSellChessOnBoard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChessPosFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kLeftMoneyFieldNumber = 2,
  };
  // .msg.PositionInt2D ChessPos = 3;
  bool has_chesspos() const;
  private:
  bool _internal_has_chesspos() const;
  public:
  void clear_chesspos();
  const ::msg::PositionInt2D& chesspos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_chesspos();
  ::msg::PositionInt2D* mutable_chesspos();
  void set_allocated_chesspos(::msg::PositionInt2D* chesspos);
  private:
  const ::msg::PositionInt2D& _internal_chesspos() const;
  ::msg::PositionInt2D* _internal_mutable_chesspos();
  public:
  void unsafe_arena_set_allocated_chesspos(
      ::msg::PositionInt2D* chesspos);
  ::msg::PositionInt2D* unsafe_arena_release_chesspos();

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 LeftMoney = 2;
  void clear_leftmoney();
  int32_t leftmoney() const;
  void set_leftmoney(int32_t value);
  private:
  int32_t _internal_leftmoney() const;
  void _internal_set_leftmoney(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspSellChessOnBoard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionInt2D* chesspos_;
    bool success_;
    int32_t leftmoney_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspMoveChess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspMoveChess) */ {
 public:
  inline CSRspMoveChess() : CSRspMoveChess(nullptr) {}
  ~CSRspMoveChess() override;
  explicit PROTOBUF_CONSTEXPR CSRspMoveChess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspMoveChess(const CSRspMoveChess& from);
  CSRspMoveChess(CSRspMoveChess&& from) noexcept
    : CSRspMoveChess() {
    *this = ::std::move(from);
  }

  inline CSRspMoveChess& operator=(const CSRspMoveChess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspMoveChess& operator=(CSRspMoveChess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspMoveChess& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspMoveChess* internal_default_instance() {
    return reinterpret_cast<const CSRspMoveChess*>(
               &_CSRspMoveChess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CSRspMoveChess& a, CSRspMoveChess& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspMoveChess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspMoveChess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspMoveChess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspMoveChess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspMoveChess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspMoveChess& from) {
    CSRspMoveChess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspMoveChess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspMoveChess";
  }
  protected:
  explicit CSRspMoveChess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcChessPosFieldNumber = 2,
    kDestChessPosFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // .msg.PositionInt2D SrcChessPos = 2;
  bool has_srcchesspos() const;
  private:
  bool _internal_has_srcchesspos() const;
  public:
  void clear_srcchesspos();
  const ::msg::PositionInt2D& srcchesspos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_srcchesspos();
  ::msg::PositionInt2D* mutable_srcchesspos();
  void set_allocated_srcchesspos(::msg::PositionInt2D* srcchesspos);
  private:
  const ::msg::PositionInt2D& _internal_srcchesspos() const;
  ::msg::PositionInt2D* _internal_mutable_srcchesspos();
  public:
  void unsafe_arena_set_allocated_srcchesspos(
      ::msg::PositionInt2D* srcchesspos);
  ::msg::PositionInt2D* unsafe_arena_release_srcchesspos();

  // .msg.PositionInt2D DestChessPos = 3;
  bool has_destchesspos() const;
  private:
  bool _internal_has_destchesspos() const;
  public:
  void clear_destchesspos();
  const ::msg::PositionInt2D& destchesspos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_destchesspos();
  ::msg::PositionInt2D* mutable_destchesspos();
  void set_allocated_destchesspos(::msg::PositionInt2D* destchesspos);
  private:
  const ::msg::PositionInt2D& _internal_destchesspos() const;
  ::msg::PositionInt2D* _internal_mutable_destchesspos();
  public:
  void unsafe_arena_set_allocated_destchesspos(
      ::msg::PositionInt2D* destchesspos);
  ::msg::PositionInt2D* unsafe_arena_release_destchesspos();

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspMoveChess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionInt2D* srcchesspos_;
    ::msg::PositionInt2D* destchesspos_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspBuyExp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspBuyExp) */ {
 public:
  inline CSRspBuyExp() : CSRspBuyExp(nullptr) {}
  ~CSRspBuyExp() override;
  explicit PROTOBUF_CONSTEXPR CSRspBuyExp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspBuyExp(const CSRspBuyExp& from);
  CSRspBuyExp(CSRspBuyExp&& from) noexcept
    : CSRspBuyExp() {
    *this = ::std::move(from);
  }

  inline CSRspBuyExp& operator=(const CSRspBuyExp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspBuyExp& operator=(CSRspBuyExp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspBuyExp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspBuyExp* internal_default_instance() {
    return reinterpret_cast<const CSRspBuyExp*>(
               &_CSRspBuyExp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CSRspBuyExp& a, CSRspBuyExp& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspBuyExp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspBuyExp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspBuyExp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspBuyExp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspBuyExp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspBuyExp& from) {
    CSRspBuyExp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspBuyExp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspBuyExp";
  }
  protected:
  explicit CSRspBuyExp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kAddedExpFieldNumber = 2,
    kCurrentExpFieldNumber = 3,
  };
  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 AddedExp = 2;
  void clear_addedexp();
  int32_t addedexp() const;
  void set_addedexp(int32_t value);
  private:
  int32_t _internal_addedexp() const;
  void _internal_set_addedexp(int32_t value);
  public:

  // int32 CurrentExp = 3;
  void clear_currentexp();
  int32_t currentexp() const;
  void set_currentexp(int32_t value);
  private:
  int32_t _internal_currentexp() const;
  void _internal_set_currentexp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspBuyExp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    int32_t addedexp_;
    int32_t currentexp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspRefreshShop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspRefreshShop) */ {
 public:
  inline CSRspRefreshShop() : CSRspRefreshShop(nullptr) {}
  ~CSRspRefreshShop() override;
  explicit PROTOBUF_CONSTEXPR CSRspRefreshShop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspRefreshShop(const CSRspRefreshShop& from);
  CSRspRefreshShop(CSRspRefreshShop&& from) noexcept
    : CSRspRefreshShop() {
    *this = ::std::move(from);
  }

  inline CSRspRefreshShop& operator=(const CSRspRefreshShop& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspRefreshShop& operator=(CSRspRefreshShop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspRefreshShop& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspRefreshShop* internal_default_instance() {
    return reinterpret_cast<const CSRspRefreshShop*>(
               &_CSRspRefreshShop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CSRspRefreshShop& a, CSRspRefreshShop& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspRefreshShop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspRefreshShop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspRefreshShop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspRefreshShop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspRefreshShop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspRefreshShop& from) {
    CSRspRefreshShop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspRefreshShop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspRefreshShop";
  }
  protected:
  explicit CSRspRefreshShop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspRefreshShop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspMoveChessInBagToMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspMoveChessInBagToMap) */ {
 public:
  inline CSRspMoveChessInBagToMap() : CSRspMoveChessInBagToMap(nullptr) {}
  ~CSRspMoveChessInBagToMap() override;
  explicit PROTOBUF_CONSTEXPR CSRspMoveChessInBagToMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspMoveChessInBagToMap(const CSRspMoveChessInBagToMap& from);
  CSRspMoveChessInBagToMap(CSRspMoveChessInBagToMap&& from) noexcept
    : CSRspMoveChessInBagToMap() {
    *this = ::std::move(from);
  }

  inline CSRspMoveChessInBagToMap& operator=(const CSRspMoveChessInBagToMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspMoveChessInBagToMap& operator=(CSRspMoveChessInBagToMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspMoveChessInBagToMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspMoveChessInBagToMap* internal_default_instance() {
    return reinterpret_cast<const CSRspMoveChessInBagToMap*>(
               &_CSRspMoveChessInBagToMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CSRspMoveChessInBagToMap& a, CSRspMoveChessInBagToMap& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspMoveChessInBagToMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspMoveChessInBagToMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspMoveChessInBagToMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspMoveChessInBagToMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspMoveChessInBagToMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspMoveChessInBagToMap& from) {
    CSRspMoveChessInBagToMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspMoveChessInBagToMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspMoveChessInBagToMap";
  }
  protected:
  explicit CSRspMoveChessInBagToMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestPosFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kBagIdxFieldNumber = 2,
  };
  // .msg.PositionInt2D DestPos = 3;
  bool has_destpos() const;
  private:
  bool _internal_has_destpos() const;
  public:
  void clear_destpos();
  const ::msg::PositionInt2D& destpos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_destpos();
  ::msg::PositionInt2D* mutable_destpos();
  void set_allocated_destpos(::msg::PositionInt2D* destpos);
  private:
  const ::msg::PositionInt2D& _internal_destpos() const;
  ::msg::PositionInt2D* _internal_mutable_destpos();
  public:
  void unsafe_arena_set_allocated_destpos(
      ::msg::PositionInt2D* destpos);
  ::msg::PositionInt2D* unsafe_arena_release_destpos();

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 BagIdx = 2;
  void clear_bagidx();
  int32_t bagidx() const;
  void set_bagidx(int32_t value);
  private:
  int32_t _internal_bagidx() const;
  void _internal_set_bagidx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspMoveChessInBagToMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionInt2D* destpos_;
    bool success_;
    int32_t bagidx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspMoveChessWithinBag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspMoveChessWithinBag) */ {
 public:
  inline CSRspMoveChessWithinBag() : CSRspMoveChessWithinBag(nullptr) {}
  ~CSRspMoveChessWithinBag() override;
  explicit PROTOBUF_CONSTEXPR CSRspMoveChessWithinBag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspMoveChessWithinBag(const CSRspMoveChessWithinBag& from);
  CSRspMoveChessWithinBag(CSRspMoveChessWithinBag&& from) noexcept
    : CSRspMoveChessWithinBag() {
    *this = ::std::move(from);
  }

  inline CSRspMoveChessWithinBag& operator=(const CSRspMoveChessWithinBag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspMoveChessWithinBag& operator=(CSRspMoveChessWithinBag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspMoveChessWithinBag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspMoveChessWithinBag* internal_default_instance() {
    return reinterpret_cast<const CSRspMoveChessWithinBag*>(
               &_CSRspMoveChessWithinBag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CSRspMoveChessWithinBag& a, CSRspMoveChessWithinBag& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspMoveChessWithinBag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspMoveChessWithinBag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspMoveChessWithinBag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspMoveChessWithinBag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspMoveChessWithinBag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspMoveChessWithinBag& from) {
    CSRspMoveChessWithinBag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspMoveChessWithinBag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspMoveChessWithinBag";
  }
  protected:
  explicit CSRspMoveChessWithinBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcBagIdxFieldNumber = 1,
    kDestBagIdxFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // int32 SrcBagIdx = 1;
  void clear_srcbagidx();
  int32_t srcbagidx() const;
  void set_srcbagidx(int32_t value);
  private:
  int32_t _internal_srcbagidx() const;
  void _internal_set_srcbagidx(int32_t value);
  public:

  // int32 DestBagIdx = 2;
  void clear_destbagidx();
  int32_t destbagidx() const;
  void set_destbagidx(int32_t value);
  private:
  int32_t _internal_destbagidx() const;
  void _internal_set_destbagidx(int32_t value);
  public:

  // bool Success = 3;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspMoveChessWithinBag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t srcbagidx_;
    int32_t destbagidx_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspPlayerLoaded final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSRspPlayerLoaded) */ {
 public:
  inline CSRspPlayerLoaded() : CSRspPlayerLoaded(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSRspPlayerLoaded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspPlayerLoaded(const CSRspPlayerLoaded& from);
  CSRspPlayerLoaded(CSRspPlayerLoaded&& from) noexcept
    : CSRspPlayerLoaded() {
    *this = ::std::move(from);
  }

  inline CSRspPlayerLoaded& operator=(const CSRspPlayerLoaded& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspPlayerLoaded& operator=(CSRspPlayerLoaded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspPlayerLoaded& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspPlayerLoaded* internal_default_instance() {
    return reinterpret_cast<const CSRspPlayerLoaded*>(
               &_CSRspPlayerLoaded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CSRspPlayerLoaded& a, CSRspPlayerLoaded& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspPlayerLoaded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspPlayerLoaded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspPlayerLoaded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspPlayerLoaded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSRspPlayerLoaded& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSRspPlayerLoaded& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspPlayerLoaded";
  }
  protected:
  explicit CSRspPlayerLoaded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSRspPlayerLoaded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspPlayerRoundEnd final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSRspPlayerRoundEnd) */ {
 public:
  inline CSRspPlayerRoundEnd() : CSRspPlayerRoundEnd(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSRspPlayerRoundEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspPlayerRoundEnd(const CSRspPlayerRoundEnd& from);
  CSRspPlayerRoundEnd(CSRspPlayerRoundEnd&& from) noexcept
    : CSRspPlayerRoundEnd() {
    *this = ::std::move(from);
  }

  inline CSRspPlayerRoundEnd& operator=(const CSRspPlayerRoundEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspPlayerRoundEnd& operator=(CSRspPlayerRoundEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspPlayerRoundEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspPlayerRoundEnd* internal_default_instance() {
    return reinterpret_cast<const CSRspPlayerRoundEnd*>(
               &_CSRspPlayerRoundEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CSRspPlayerRoundEnd& a, CSRspPlayerRoundEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspPlayerRoundEnd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspPlayerRoundEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspPlayerRoundEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspPlayerRoundEnd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSRspPlayerRoundEnd& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSRspPlayerRoundEnd& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspPlayerRoundEnd";
  }
  protected:
  explicit CSRspPlayerRoundEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSRspPlayerRoundEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspPickupEquipment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspPickupEquipment) */ {
 public:
  inline CSRspPickupEquipment() : CSRspPickupEquipment(nullptr) {}
  ~CSRspPickupEquipment() override;
  explicit PROTOBUF_CONSTEXPR CSRspPickupEquipment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspPickupEquipment(const CSRspPickupEquipment& from);
  CSRspPickupEquipment(CSRspPickupEquipment&& from) noexcept
    : CSRspPickupEquipment() {
    *this = ::std::move(from);
  }

  inline CSRspPickupEquipment& operator=(const CSRspPickupEquipment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspPickupEquipment& operator=(CSRspPickupEquipment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspPickupEquipment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspPickupEquipment* internal_default_instance() {
    return reinterpret_cast<const CSRspPickupEquipment*>(
               &_CSRspPickupEquipment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CSRspPickupEquipment& a, CSRspPickupEquipment& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspPickupEquipment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspPickupEquipment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspPickupEquipment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspPickupEquipment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspPickupEquipment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspPickupEquipment& from) {
    CSRspPickupEquipment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspPickupEquipment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspPickupEquipment";
  }
  protected:
  explicit CSRspPickupEquipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetIdFieldNumber = 1,
    kSuccessFieldNumber = 2,
    kBagIdxFieldNumber = 3,
  };
  // int32 NetId = 1;
  void clear_netid();
  int32_t netid() const;
  void set_netid(int32_t value);
  private:
  int32_t _internal_netid() const;
  void _internal_set_netid(int32_t value);
  public:

  // bool Success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 BagIdx = 3;
  void clear_bagidx();
  int32_t bagidx() const;
  void set_bagidx(int32_t value);
  private:
  int32_t _internal_bagidx() const;
  void _internal_set_bagidx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspPickupEquipment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t netid_;
    bool success_;
    int32_t bagidx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspCraftEquip final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspCraftEquip) */ {
 public:
  inline CSRspCraftEquip() : CSRspCraftEquip(nullptr) {}
  ~CSRspCraftEquip() override;
  explicit PROTOBUF_CONSTEXPR CSRspCraftEquip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspCraftEquip(const CSRspCraftEquip& from);
  CSRspCraftEquip(CSRspCraftEquip&& from) noexcept
    : CSRspCraftEquip() {
    *this = ::std::move(from);
  }

  inline CSRspCraftEquip& operator=(const CSRspCraftEquip& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspCraftEquip& operator=(CSRspCraftEquip&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspCraftEquip& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspCraftEquip* internal_default_instance() {
    return reinterpret_cast<const CSRspCraftEquip*>(
               &_CSRspCraftEquip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(CSRspCraftEquip& a, CSRspCraftEquip& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspCraftEquip* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspCraftEquip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspCraftEquip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspCraftEquip>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspCraftEquip& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspCraftEquip& from) {
    CSRspCraftEquip::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspCraftEquip* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspCraftEquip";
  }
  protected:
  explicit CSRspCraftEquip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipsFieldNumber = 3,
    kNewEquipFieldNumber = 4,
    kSuccessFieldNumber = 1,
    kIsToChessFieldNumber = 2,
    kIsOnBattleFieldNumber = 6,
    kChessBagIdxFieldNumber = 5,
  };
  // repeated int32 Equips = 3;
  int equips_size() const;
  private:
  int _internal_equips_size() const;
  public:
  void clear_equips();
  private:
  int32_t _internal_equips(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_equips() const;
  void _internal_add_equips(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_equips();
  public:
  int32_t equips(int index) const;
  void set_equips(int index, int32_t value);
  void add_equips(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      equips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_equips();

  // .msg.EquipmentInfo NewEquip = 4;
  bool has_newequip() const;
  private:
  bool _internal_has_newequip() const;
  public:
  void clear_newequip();
  const ::msg::EquipmentInfo& newequip() const;
  PROTOBUF_NODISCARD ::msg::EquipmentInfo* release_newequip();
  ::msg::EquipmentInfo* mutable_newequip();
  void set_allocated_newequip(::msg::EquipmentInfo* newequip);
  private:
  const ::msg::EquipmentInfo& _internal_newequip() const;
  ::msg::EquipmentInfo* _internal_mutable_newequip();
  public:
  void unsafe_arena_set_allocated_newequip(
      ::msg::EquipmentInfo* newequip);
  ::msg::EquipmentInfo* unsafe_arena_release_newequip();

  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool IsToChess = 2;
  void clear_istochess();
  bool istochess() const;
  void set_istochess(bool value);
  private:
  bool _internal_istochess() const;
  void _internal_set_istochess(bool value);
  public:

  // bool IsOnBattle = 6;
  void clear_isonbattle();
  bool isonbattle() const;
  void set_isonbattle(bool value);
  private:
  bool _internal_isonbattle() const;
  void _internal_set_isonbattle(bool value);
  public:

  // int32 ChessBagIdx = 5;
  void clear_chessbagidx();
  int32_t chessbagidx() const;
  void set_chessbagidx(int32_t value);
  private:
  int32_t _internal_chessbagidx() const;
  void _internal_set_chessbagidx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspCraftEquip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > equips_;
    mutable std::atomic<int> _equips_cached_byte_size_;
    ::msg::EquipmentInfo* newequip_;
    bool success_;
    bool istochess_;
    bool isonbattle_;
    int32_t chessbagidx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspUseEquipment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspUseEquipment) */ {
 public:
  inline CSRspUseEquipment() : CSRspUseEquipment(nullptr) {}
  ~CSRspUseEquipment() override;
  explicit PROTOBUF_CONSTEXPR CSRspUseEquipment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspUseEquipment(const CSRspUseEquipment& from);
  CSRspUseEquipment(CSRspUseEquipment&& from) noexcept
    : CSRspUseEquipment() {
    *this = ::std::move(from);
  }

  inline CSRspUseEquipment& operator=(const CSRspUseEquipment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspUseEquipment& operator=(CSRspUseEquipment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspUseEquipment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspUseEquipment* internal_default_instance() {
    return reinterpret_cast<const CSRspUseEquipment*>(
               &_CSRspUseEquipment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CSRspUseEquipment& a, CSRspUseEquipment& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspUseEquipment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspUseEquipment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspUseEquipment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspUseEquipment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspUseEquipment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspUseEquipment& from) {
    CSRspUseEquipment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspUseEquipment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspUseEquipment";
  }
  protected:
  explicit CSRspUseEquipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 5,
    kNetIdFieldNumber = 1,
    kChessBagIndexFieldNumber = 3,
    kEquipBagIndexFieldNumber = 4,
    kIsChessInBagFieldNumber = 2,
    kSuccessFieldNumber = 6,
    kIsOnBattleFieldNumber = 7,
  };
  // .msg.PositionInt2D Pos = 5;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::msg::PositionInt2D& pos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_pos();
  ::msg::PositionInt2D* mutable_pos();
  void set_allocated_pos(::msg::PositionInt2D* pos);
  private:
  const ::msg::PositionInt2D& _internal_pos() const;
  ::msg::PositionInt2D* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::msg::PositionInt2D* pos);
  ::msg::PositionInt2D* unsafe_arena_release_pos();

  // int32 NetId = 1;
  void clear_netid();
  int32_t netid() const;
  void set_netid(int32_t value);
  private:
  int32_t _internal_netid() const;
  void _internal_set_netid(int32_t value);
  public:

  // int32 ChessBagIndex = 3;
  void clear_chessbagindex();
  int32_t chessbagindex() const;
  void set_chessbagindex(int32_t value);
  private:
  int32_t _internal_chessbagindex() const;
  void _internal_set_chessbagindex(int32_t value);
  public:

  // int32 EquipBagIndex = 4;
  void clear_equipbagindex();
  int32_t equipbagindex() const;
  void set_equipbagindex(int32_t value);
  private:
  int32_t _internal_equipbagindex() const;
  void _internal_set_equipbagindex(int32_t value);
  public:

  // bool IsChessInBag = 2;
  void clear_ischessinbag();
  bool ischessinbag() const;
  void set_ischessinbag(bool value);
  private:
  bool _internal_ischessinbag() const;
  void _internal_set_ischessinbag(bool value);
  public:

  // bool Success = 6;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool IsOnBattle = 7;
  void clear_isonbattle();
  bool isonbattle() const;
  void set_isonbattle(bool value);
  private:
  bool _internal_isonbattle() const;
  void _internal_set_isonbattle(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspUseEquipment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionInt2D* pos_;
    int32_t netid_;
    int32_t chessbagindex_;
    int32_t equipbagindex_;
    bool ischessinbag_;
    bool success_;
    bool isonbattle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspUpdateAntiAddictionTime final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSRspUpdateAntiAddictionTime) */ {
 public:
  inline CSRspUpdateAntiAddictionTime() : CSRspUpdateAntiAddictionTime(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSRspUpdateAntiAddictionTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspUpdateAntiAddictionTime(const CSRspUpdateAntiAddictionTime& from);
  CSRspUpdateAntiAddictionTime(CSRspUpdateAntiAddictionTime&& from) noexcept
    : CSRspUpdateAntiAddictionTime() {
    *this = ::std::move(from);
  }

  inline CSRspUpdateAntiAddictionTime& operator=(const CSRspUpdateAntiAddictionTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspUpdateAntiAddictionTime& operator=(CSRspUpdateAntiAddictionTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspUpdateAntiAddictionTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspUpdateAntiAddictionTime* internal_default_instance() {
    return reinterpret_cast<const CSRspUpdateAntiAddictionTime*>(
               &_CSRspUpdateAntiAddictionTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CSRspUpdateAntiAddictionTime& a, CSRspUpdateAntiAddictionTime& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspUpdateAntiAddictionTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspUpdateAntiAddictionTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspUpdateAntiAddictionTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspUpdateAntiAddictionTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSRspUpdateAntiAddictionTime& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSRspUpdateAntiAddictionTime& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspUpdateAntiAddictionTime";
  }
  protected:
  explicit CSRspUpdateAntiAddictionTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSRspUpdateAntiAddictionTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspCancelReconnect final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSRspCancelReconnect) */ {
 public:
  inline CSRspCancelReconnect() : CSRspCancelReconnect(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSRspCancelReconnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspCancelReconnect(const CSRspCancelReconnect& from);
  CSRspCancelReconnect(CSRspCancelReconnect&& from) noexcept
    : CSRspCancelReconnect() {
    *this = ::std::move(from);
  }

  inline CSRspCancelReconnect& operator=(const CSRspCancelReconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspCancelReconnect& operator=(CSRspCancelReconnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspCancelReconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspCancelReconnect* internal_default_instance() {
    return reinterpret_cast<const CSRspCancelReconnect*>(
               &_CSRspCancelReconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CSRspCancelReconnect& a, CSRspCancelReconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspCancelReconnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspCancelReconnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspCancelReconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspCancelReconnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSRspCancelReconnect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSRspCancelReconnect& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspCancelReconnect";
  }
  protected:
  explicit CSRspCancelReconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSRspCancelReconnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspSetAutoUpgradeCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspSetAutoUpgradeCharacter) */ {
 public:
  inline CSRspSetAutoUpgradeCharacter() : CSRspSetAutoUpgradeCharacter(nullptr) {}
  ~CSRspSetAutoUpgradeCharacter() override;
  explicit PROTOBUF_CONSTEXPR CSRspSetAutoUpgradeCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspSetAutoUpgradeCharacter(const CSRspSetAutoUpgradeCharacter& from);
  CSRspSetAutoUpgradeCharacter(CSRspSetAutoUpgradeCharacter&& from) noexcept
    : CSRspSetAutoUpgradeCharacter() {
    *this = ::std::move(from);
  }

  inline CSRspSetAutoUpgradeCharacter& operator=(const CSRspSetAutoUpgradeCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspSetAutoUpgradeCharacter& operator=(CSRspSetAutoUpgradeCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspSetAutoUpgradeCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspSetAutoUpgradeCharacter* internal_default_instance() {
    return reinterpret_cast<const CSRspSetAutoUpgradeCharacter*>(
               &_CSRspSetAutoUpgradeCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(CSRspSetAutoUpgradeCharacter& a, CSRspSetAutoUpgradeCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspSetAutoUpgradeCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspSetAutoUpgradeCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspSetAutoUpgradeCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspSetAutoUpgradeCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspSetAutoUpgradeCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspSetAutoUpgradeCharacter& from) {
    CSRspSetAutoUpgradeCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspSetAutoUpgradeCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspSetAutoUpgradeCharacter";
  }
  protected:
  explicit CSRspSetAutoUpgradeCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwitchOnFieldNumber = 1,
  };
  // bool SwitchOn = 1;
  void clear_switchon();
  bool switchon() const;
  void set_switchon(bool value);
  private:
  bool _internal_switchon() const;
  void _internal_set_switchon(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspSetAutoUpgradeCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool switchon_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspReconnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspReconnect) */ {
 public:
  inline CSRspReconnect() : CSRspReconnect(nullptr) {}
  ~CSRspReconnect() override;
  explicit PROTOBUF_CONSTEXPR CSRspReconnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspReconnect(const CSRspReconnect& from);
  CSRspReconnect(CSRspReconnect&& from) noexcept
    : CSRspReconnect() {
    *this = ::std::move(from);
  }

  inline CSRspReconnect& operator=(const CSRspReconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspReconnect& operator=(CSRspReconnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspReconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspReconnect* internal_default_instance() {
    return reinterpret_cast<const CSRspReconnect*>(
               &_CSRspReconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CSRspReconnect& a, CSRspReconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspReconnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspReconnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspReconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspReconnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspReconnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspReconnect& from) {
    CSRspReconnect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspReconnect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspReconnect";
  }
  protected:
  explicit CSRspReconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsValidFieldNumber = 1,
  };
  // bool IsValid = 1;
  void clear_isvalid();
  bool isvalid() const;
  void set_isvalid(bool value);
  private:
  bool _internal_isvalid() const;
  void _internal_set_isvalid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspReconnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool isvalid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspUpdateRank final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSRspUpdateRank) */ {
 public:
  inline CSRspUpdateRank() : CSRspUpdateRank(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSRspUpdateRank(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspUpdateRank(const CSRspUpdateRank& from);
  CSRspUpdateRank(CSRspUpdateRank&& from) noexcept
    : CSRspUpdateRank() {
    *this = ::std::move(from);
  }

  inline CSRspUpdateRank& operator=(const CSRspUpdateRank& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspUpdateRank& operator=(CSRspUpdateRank&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspUpdateRank& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspUpdateRank* internal_default_instance() {
    return reinterpret_cast<const CSRspUpdateRank*>(
               &_CSRspUpdateRank_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CSRspUpdateRank& a, CSRspUpdateRank& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspUpdateRank* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspUpdateRank* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspUpdateRank* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspUpdateRank>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSRspUpdateRank& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSRspUpdateRank& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspUpdateRank";
  }
  protected:
  explicit CSRspUpdateRank(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSRspUpdateRank)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspManuallyUpgradeCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspManuallyUpgradeCharacter) */ {
 public:
  inline CSRspManuallyUpgradeCharacter() : CSRspManuallyUpgradeCharacter(nullptr) {}
  ~CSRspManuallyUpgradeCharacter() override;
  explicit PROTOBUF_CONSTEXPR CSRspManuallyUpgradeCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspManuallyUpgradeCharacter(const CSRspManuallyUpgradeCharacter& from);
  CSRspManuallyUpgradeCharacter(CSRspManuallyUpgradeCharacter&& from) noexcept
    : CSRspManuallyUpgradeCharacter() {
    *this = ::std::move(from);
  }

  inline CSRspManuallyUpgradeCharacter& operator=(const CSRspManuallyUpgradeCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspManuallyUpgradeCharacter& operator=(CSRspManuallyUpgradeCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspManuallyUpgradeCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspManuallyUpgradeCharacter* internal_default_instance() {
    return reinterpret_cast<const CSRspManuallyUpgradeCharacter*>(
               &_CSRspManuallyUpgradeCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CSRspManuallyUpgradeCharacter& a, CSRspManuallyUpgradeCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspManuallyUpgradeCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspManuallyUpgradeCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspManuallyUpgradeCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspManuallyUpgradeCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspManuallyUpgradeCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspManuallyUpgradeCharacter& from) {
    CSRspManuallyUpgradeCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspManuallyUpgradeCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspManuallyUpgradeCharacter";
  }
  protected:
  explicit CSRspManuallyUpgradeCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBagIndexFieldNumber = 1,
    kTxFieldNumber = 2,
    kTyFieldNumber = 3,
    kSuccessFieldNumber = 4,
    kIsInBagFieldNumber = 5,
  };
  // int32 BagIndex = 1;
  void clear_bagindex();
  int32_t bagindex() const;
  void set_bagindex(int32_t value);
  private:
  int32_t _internal_bagindex() const;
  void _internal_set_bagindex(int32_t value);
  public:

  // int32 Tx = 2;
  void clear_tx();
  int32_t tx() const;
  void set_tx(int32_t value);
  private:
  int32_t _internal_tx() const;
  void _internal_set_tx(int32_t value);
  public:

  // int32 Ty = 3;
  void clear_ty();
  int32_t ty() const;
  void set_ty(int32_t value);
  private:
  int32_t _internal_ty() const;
  void _internal_set_ty(int32_t value);
  public:

  // bool Success = 4;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool IsInBag = 5;
  void clear_isinbag();
  bool isinbag() const;
  void set_isinbag(bool value);
  private:
  bool _internal_isinbag() const;
  void _internal_set_isinbag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspManuallyUpgradeCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t bagindex_;
    int32_t tx_;
    int32_t ty_;
    bool success_;
    bool isinbag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspQuitBattle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspQuitBattle) */ {
 public:
  inline CSRspQuitBattle() : CSRspQuitBattle(nullptr) {}
  ~CSRspQuitBattle() override;
  explicit PROTOBUF_CONSTEXPR CSRspQuitBattle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspQuitBattle(const CSRspQuitBattle& from);
  CSRspQuitBattle(CSRspQuitBattle&& from) noexcept
    : CSRspQuitBattle() {
    *this = ::std::move(from);
  }

  inline CSRspQuitBattle& operator=(const CSRspQuitBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspQuitBattle& operator=(CSRspQuitBattle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspQuitBattle& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspQuitBattle* internal_default_instance() {
    return reinterpret_cast<const CSRspQuitBattle*>(
               &_CSRspQuitBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CSRspQuitBattle& a, CSRspQuitBattle& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspQuitBattle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspQuitBattle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspQuitBattle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspQuitBattle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspQuitBattle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspQuitBattle& from) {
    CSRspQuitBattle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspQuitBattle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspQuitBattle";
  }
  protected:
  explicit CSRspQuitBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool Success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspQuitBattle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspSusPendGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspSusPendGame) */ {
 public:
  inline CSRspSusPendGame() : CSRspSusPendGame(nullptr) {}
  ~CSRspSusPendGame() override;
  explicit PROTOBUF_CONSTEXPR CSRspSusPendGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspSusPendGame(const CSRspSusPendGame& from);
  CSRspSusPendGame(CSRspSusPendGame&& from) noexcept
    : CSRspSusPendGame() {
    *this = ::std::move(from);
  }

  inline CSRspSusPendGame& operator=(const CSRspSusPendGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspSusPendGame& operator=(CSRspSusPendGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspSusPendGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspSusPendGame* internal_default_instance() {
    return reinterpret_cast<const CSRspSusPendGame*>(
               &_CSRspSusPendGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(CSRspSusPendGame& a, CSRspSusPendGame& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspSusPendGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspSusPendGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspSusPendGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspSusPendGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspSusPendGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspSusPendGame& from) {
    CSRspSusPendGame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspSusPendGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspSusPendGame";
  }
  protected:
  explicit CSRspSusPendGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSusPendFieldNumber = 1,
  };
  // bool susPend = 1;
  void clear_suspend();
  bool suspend() const;
  void set_suspend(bool value);
  private:
  bool _internal_suspend() const;
  void _internal_set_suspend(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspSusPendGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool suspend_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspChessDB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspChessDB) */ {
 public:
  inline CSRspChessDB() : CSRspChessDB(nullptr) {}
  ~CSRspChessDB() override;
  explicit PROTOBUF_CONSTEXPR CSRspChessDB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspChessDB(const CSRspChessDB& from);
  CSRspChessDB(CSRspChessDB&& from) noexcept
    : CSRspChessDB() {
    *this = ::std::move(from);
  }

  inline CSRspChessDB& operator=(const CSRspChessDB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspChessDB& operator=(CSRspChessDB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspChessDB& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspChessDB* internal_default_instance() {
    return reinterpret_cast<const CSRspChessDB*>(
               &_CSRspChessDB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(CSRspChessDB& a, CSRspChessDB& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspChessDB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspChessDB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspChessDB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspChessDB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspChessDB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspChessDB& from) {
    CSRspChessDB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspChessDB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspChessDB";
  }
  protected:
  explicit CSRspChessDB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChessPiecesMapLevFieldNumber = 1,
    kPlayerChessFieldNumber = 2,
  };
  // repeated .msg.ChessPiecesMapLevData chessPiecesMapLev = 1;
  int chesspiecesmaplev_size() const;
  private:
  int _internal_chesspiecesmaplev_size() const;
  public:
  void clear_chesspiecesmaplev();
  ::msg::ChessPiecesMapLevData* mutable_chesspiecesmaplev(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessPiecesMapLevData >*
      mutable_chesspiecesmaplev();
  private:
  const ::msg::ChessPiecesMapLevData& _internal_chesspiecesmaplev(int index) const;
  ::msg::ChessPiecesMapLevData* _internal_add_chesspiecesmaplev();
  public:
  const ::msg::ChessPiecesMapLevData& chesspiecesmaplev(int index) const;
  ::msg::ChessPiecesMapLevData* add_chesspiecesmaplev();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessPiecesMapLevData >&
      chesspiecesmaplev() const;

  // repeated .msg.PlayerChessNumber playerChess = 2;
  int playerchess_size() const;
  private:
  int _internal_playerchess_size() const;
  public:
  void clear_playerchess();
  ::msg::PlayerChessNumber* mutable_playerchess(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PlayerChessNumber >*
      mutable_playerchess();
  private:
  const ::msg::PlayerChessNumber& _internal_playerchess(int index) const;
  ::msg::PlayerChessNumber* _internal_add_playerchess();
  public:
  const ::msg::PlayerChessNumber& playerchess(int index) const;
  ::msg::PlayerChessNumber* add_playerchess();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PlayerChessNumber >&
      playerchess() const;

  // @@protoc_insertion_point(class_scope:msg.CSRspChessDB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessPiecesMapLevData > chesspiecesmaplev_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PlayerChessNumber > playerchess_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspStatisticsInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspStatisticsInfo) */ {
 public:
  inline CSRspStatisticsInfo() : CSRspStatisticsInfo(nullptr) {}
  ~CSRspStatisticsInfo() override;
  explicit PROTOBUF_CONSTEXPR CSRspStatisticsInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspStatisticsInfo(const CSRspStatisticsInfo& from);
  CSRspStatisticsInfo(CSRspStatisticsInfo&& from) noexcept
    : CSRspStatisticsInfo() {
    *this = ::std::move(from);
  }

  inline CSRspStatisticsInfo& operator=(const CSRspStatisticsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspStatisticsInfo& operator=(CSRspStatisticsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspStatisticsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspStatisticsInfo* internal_default_instance() {
    return reinterpret_cast<const CSRspStatisticsInfo*>(
               &_CSRspStatisticsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CSRspStatisticsInfo& a, CSRspStatisticsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspStatisticsInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspStatisticsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspStatisticsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspStatisticsInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspStatisticsInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspStatisticsInfo& from) {
    CSRspStatisticsInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspStatisticsInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspStatisticsInfo";
  }
  protected:
  explicit CSRspStatisticsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerStatisticsFieldNumber = 2,
    kInitMoneyFieldNumber = 1,
  };
  // repeated .msg.PlayerStatisticsInfo playerStatistics = 2;
  int playerstatistics_size() const;
  private:
  int _internal_playerstatistics_size() const;
  public:
  void clear_playerstatistics();
  ::msg::PlayerStatisticsInfo* mutable_playerstatistics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PlayerStatisticsInfo >*
      mutable_playerstatistics();
  private:
  const ::msg::PlayerStatisticsInfo& _internal_playerstatistics(int index) const;
  ::msg::PlayerStatisticsInfo* _internal_add_playerstatistics();
  public:
  const ::msg::PlayerStatisticsInfo& playerstatistics(int index) const;
  ::msg::PlayerStatisticsInfo* add_playerstatistics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PlayerStatisticsInfo >&
      playerstatistics() const;

  // int32 initMoney = 1;
  void clear_initmoney();
  int32_t initmoney() const;
  void set_initmoney(int32_t value);
  private:
  int32_t _internal_initmoney() const;
  void _internal_set_initmoney(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspStatisticsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PlayerStatisticsInfo > playerstatistics_;
    int32_t initmoney_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspPassThrough final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspPassThrough) */ {
 public:
  inline CSRspPassThrough() : CSRspPassThrough(nullptr) {}
  ~CSRspPassThrough() override;
  explicit PROTOBUF_CONSTEXPR CSRspPassThrough(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspPassThrough(const CSRspPassThrough& from);
  CSRspPassThrough(CSRspPassThrough&& from) noexcept
    : CSRspPassThrough() {
    *this = ::std::move(from);
  }

  inline CSRspPassThrough& operator=(const CSRspPassThrough& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspPassThrough& operator=(CSRspPassThrough&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspPassThrough& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspPassThrough* internal_default_instance() {
    return reinterpret_cast<const CSRspPassThrough*>(
               &_CSRspPassThrough_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(CSRspPassThrough& a, CSRspPassThrough& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspPassThrough* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspPassThrough* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspPassThrough* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspPassThrough>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspPassThrough& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspPassThrough& from) {
    CSRspPassThrough::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspPassThrough* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspPassThrough";
  }
  protected:
  explicit CSRspPassThrough(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated bytes data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const void* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspPassThrough)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspUpdateBattleResult final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSRspUpdateBattleResult) */ {
 public:
  inline CSRspUpdateBattleResult() : CSRspUpdateBattleResult(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSRspUpdateBattleResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspUpdateBattleResult(const CSRspUpdateBattleResult& from);
  CSRspUpdateBattleResult(CSRspUpdateBattleResult&& from) noexcept
    : CSRspUpdateBattleResult() {
    *this = ::std::move(from);
  }

  inline CSRspUpdateBattleResult& operator=(const CSRspUpdateBattleResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspUpdateBattleResult& operator=(CSRspUpdateBattleResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspUpdateBattleResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspUpdateBattleResult* internal_default_instance() {
    return reinterpret_cast<const CSRspUpdateBattleResult*>(
               &_CSRspUpdateBattleResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CSRspUpdateBattleResult& a, CSRspUpdateBattleResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspUpdateBattleResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspUpdateBattleResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspUpdateBattleResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspUpdateBattleResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSRspUpdateBattleResult& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSRspUpdateBattleResult& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspUpdateBattleResult";
  }
  protected:
  explicit CSRspUpdateBattleResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSRspUpdateBattleResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspVisitPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSRspVisitPlayer) */ {
 public:
  inline CSRspVisitPlayer() : CSRspVisitPlayer(nullptr) {}
  ~CSRspVisitPlayer() override;
  explicit PROTOBUF_CONSTEXPR CSRspVisitPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspVisitPlayer(const CSRspVisitPlayer& from);
  CSRspVisitPlayer(CSRspVisitPlayer&& from) noexcept
    : CSRspVisitPlayer() {
    *this = ::std::move(from);
  }

  inline CSRspVisitPlayer& operator=(const CSRspVisitPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspVisitPlayer& operator=(CSRspVisitPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspVisitPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspVisitPlayer* internal_default_instance() {
    return reinterpret_cast<const CSRspVisitPlayer*>(
               &_CSRspVisitPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(CSRspVisitPlayer& a, CSRspVisitPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspVisitPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspVisitPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspVisitPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspVisitPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSRspVisitPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSRspVisitPlayer& from) {
    CSRspVisitPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSRspVisitPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspVisitPlayer";
  }
  protected:
  explicit CSRspVisitPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcPlayerIndexFieldNumber = 1,
    kDestPlayerIndexFieldNumber = 2,
  };
  // int32 SrcPlayerIndex = 1;
  void clear_srcplayerindex();
  int32_t srcplayerindex() const;
  void set_srcplayerindex(int32_t value);
  private:
  int32_t _internal_srcplayerindex() const;
  void _internal_set_srcplayerindex(int32_t value);
  public:

  // int32 DestPlayerIndex = 2;
  void clear_destplayerindex();
  int32_t destplayerindex() const;
  void set_destplayerindex(int32_t value);
  private:
  int32_t _internal_destplayerindex() const;
  void _internal_set_destplayerindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSRspVisitPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t srcplayerindex_;
    int32_t destplayerindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspLeaveGameEarly final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSRspLeaveGameEarly) */ {
 public:
  inline CSRspLeaveGameEarly() : CSRspLeaveGameEarly(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSRspLeaveGameEarly(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspLeaveGameEarly(const CSRspLeaveGameEarly& from);
  CSRspLeaveGameEarly(CSRspLeaveGameEarly&& from) noexcept
    : CSRspLeaveGameEarly() {
    *this = ::std::move(from);
  }

  inline CSRspLeaveGameEarly& operator=(const CSRspLeaveGameEarly& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspLeaveGameEarly& operator=(CSRspLeaveGameEarly&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspLeaveGameEarly& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspLeaveGameEarly* internal_default_instance() {
    return reinterpret_cast<const CSRspLeaveGameEarly*>(
               &_CSRspLeaveGameEarly_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(CSRspLeaveGameEarly& a, CSRspLeaveGameEarly& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspLeaveGameEarly* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspLeaveGameEarly* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspLeaveGameEarly* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspLeaveGameEarly>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSRspLeaveGameEarly& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSRspLeaveGameEarly& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspLeaveGameEarly";
  }
  protected:
  explicit CSRspLeaveGameEarly(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSRspLeaveGameEarly)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSRspReportAbsent final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSRspReportAbsent) */ {
 public:
  inline CSRspReportAbsent() : CSRspReportAbsent(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSRspReportAbsent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSRspReportAbsent(const CSRspReportAbsent& from);
  CSRspReportAbsent(CSRspReportAbsent&& from) noexcept
    : CSRspReportAbsent() {
    *this = ::std::move(from);
  }

  inline CSRspReportAbsent& operator=(const CSRspReportAbsent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSRspReportAbsent& operator=(CSRspReportAbsent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSRspReportAbsent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSRspReportAbsent* internal_default_instance() {
    return reinterpret_cast<const CSRspReportAbsent*>(
               &_CSRspReportAbsent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(CSRspReportAbsent& a, CSRspReportAbsent& b) {
    a.Swap(&b);
  }
  inline void Swap(CSRspReportAbsent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSRspReportAbsent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSRspReportAbsent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSRspReportAbsent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSRspReportAbsent& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSRspReportAbsent& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSRspReportAbsent";
  }
  protected:
  explicit CSRspReportAbsent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSRspReportAbsent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfPvpChangeStage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfPvpChangeStage) */ {
 public:
  inline CSNtfPvpChangeStage() : CSNtfPvpChangeStage(nullptr) {}
  ~CSNtfPvpChangeStage() override;
  explicit PROTOBUF_CONSTEXPR CSNtfPvpChangeStage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfPvpChangeStage(const CSNtfPvpChangeStage& from);
  CSNtfPvpChangeStage(CSNtfPvpChangeStage&& from) noexcept
    : CSNtfPvpChangeStage() {
    *this = ::std::move(from);
  }

  inline CSNtfPvpChangeStage& operator=(const CSNtfPvpChangeStage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfPvpChangeStage& operator=(CSNtfPvpChangeStage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfPvpChangeStage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfPvpChangeStage* internal_default_instance() {
    return reinterpret_cast<const CSNtfPvpChangeStage*>(
               &_CSNtfPvpChangeStage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(CSNtfPvpChangeStage& a, CSNtfPvpChangeStage& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfPvpChangeStage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfPvpChangeStage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfPvpChangeStage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfPvpChangeStage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfPvpChangeStage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfPvpChangeStage& from) {
    CSNtfPvpChangeStage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfPvpChangeStage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfPvpChangeStage";
  }
  protected:
  explicit CSNtfPvpChangeStage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCorrectionFieldNumber = 4,
    kRoundCntFieldNumber = 1,
    kDurationFieldNumber = 2,
    kStageFieldNumber = 3,
  };
  // repeated .msg.CorrectFormation Correction = 4;
  int correction_size() const;
  private:
  int _internal_correction_size() const;
  public:
  void clear_correction();
  ::msg::CorrectFormation* mutable_correction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CorrectFormation >*
      mutable_correction();
  private:
  const ::msg::CorrectFormation& _internal_correction(int index) const;
  ::msg::CorrectFormation* _internal_add_correction();
  public:
  const ::msg::CorrectFormation& correction(int index) const;
  ::msg::CorrectFormation* add_correction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CorrectFormation >&
      correction() const;

  // int32 RoundCnt = 1;
  void clear_roundcnt();
  int32_t roundcnt() const;
  void set_roundcnt(int32_t value);
  private:
  int32_t _internal_roundcnt() const;
  void _internal_set_roundcnt(int32_t value);
  public:

  // int32 Duration = 2;
  void clear_duration();
  int32_t duration() const;
  void set_duration(int32_t value);
  private:
  int32_t _internal_duration() const;
  void _internal_set_duration(int32_t value);
  public:

  // .msg.GameStage Stage = 3;
  void clear_stage();
  ::msg::GameStage stage() const;
  void set_stage(::msg::GameStage value);
  private:
  ::msg::GameStage _internal_stage() const;
  void _internal_set_stage(::msg::GameStage value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfPvpChangeStage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CorrectFormation > correction_;
    int32_t roundcnt_;
    int32_t duration_;
    int stage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfPvpUpdateMoney final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfPvpUpdateMoney) */ {
 public:
  inline CSNtfPvpUpdateMoney() : CSNtfPvpUpdateMoney(nullptr) {}
  ~CSNtfPvpUpdateMoney() override;
  explicit PROTOBUF_CONSTEXPR CSNtfPvpUpdateMoney(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfPvpUpdateMoney(const CSNtfPvpUpdateMoney& from);
  CSNtfPvpUpdateMoney(CSNtfPvpUpdateMoney&& from) noexcept
    : CSNtfPvpUpdateMoney() {
    *this = ::std::move(from);
  }

  inline CSNtfPvpUpdateMoney& operator=(const CSNtfPvpUpdateMoney& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfPvpUpdateMoney& operator=(CSNtfPvpUpdateMoney&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfPvpUpdateMoney& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfPvpUpdateMoney* internal_default_instance() {
    return reinterpret_cast<const CSNtfPvpUpdateMoney*>(
               &_CSNtfPvpUpdateMoney_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(CSNtfPvpUpdateMoney& a, CSNtfPvpUpdateMoney& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfPvpUpdateMoney* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfPvpUpdateMoney* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfPvpUpdateMoney* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfPvpUpdateMoney>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfPvpUpdateMoney& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfPvpUpdateMoney& from) {
    CSNtfPvpUpdateMoney::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfPvpUpdateMoney* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfPvpUpdateMoney";
  }
  protected:
  explicit CSNtfPvpUpdateMoney(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoneyFieldNumber = 1,
    kPlayerIdxFieldNumber = 2,
    kSrcTagFieldNumber = 3,
  };
  // int32 Money = 1;
  void clear_money();
  int32_t money() const;
  void set_money(int32_t value);
  private:
  int32_t _internal_money() const;
  void _internal_set_money(int32_t value);
  public:

  // int32 PlayerIdx = 2;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // int32 SrcTag = 3;
  void clear_srctag();
  int32_t srctag() const;
  void set_srctag(int32_t value);
  private:
  int32_t _internal_srctag() const;
  void _internal_set_srctag(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfPvpUpdateMoney)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t money_;
    int32_t playeridx_;
    int32_t srctag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfPvpUpdateMessengerPos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfPvpUpdateMessengerPos) */ {
 public:
  inline CSNtfPvpUpdateMessengerPos() : CSNtfPvpUpdateMessengerPos(nullptr) {}
  ~CSNtfPvpUpdateMessengerPos() override;
  explicit PROTOBUF_CONSTEXPR CSNtfPvpUpdateMessengerPos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfPvpUpdateMessengerPos(const CSNtfPvpUpdateMessengerPos& from);
  CSNtfPvpUpdateMessengerPos(CSNtfPvpUpdateMessengerPos&& from) noexcept
    : CSNtfPvpUpdateMessengerPos() {
    *this = ::std::move(from);
  }

  inline CSNtfPvpUpdateMessengerPos& operator=(const CSNtfPvpUpdateMessengerPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfPvpUpdateMessengerPos& operator=(CSNtfPvpUpdateMessengerPos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfPvpUpdateMessengerPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfPvpUpdateMessengerPos* internal_default_instance() {
    return reinterpret_cast<const CSNtfPvpUpdateMessengerPos*>(
               &_CSNtfPvpUpdateMessengerPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(CSNtfPvpUpdateMessengerPos& a, CSNtfPvpUpdateMessengerPos& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfPvpUpdateMessengerPos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfPvpUpdateMessengerPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfPvpUpdateMessengerPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfPvpUpdateMessengerPos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfPvpUpdateMessengerPos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfPvpUpdateMessengerPos& from) {
    CSNtfPvpUpdateMessengerPos::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfPvpUpdateMessengerPos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfPvpUpdateMessengerPos";
  }
  protected:
  explicit CSNtfPvpUpdateMessengerPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kPlayerIndexFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // .msg.PositionFloat2D Pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::msg::PositionFloat2D& pos() const;
  PROTOBUF_NODISCARD ::msg::PositionFloat2D* release_pos();
  ::msg::PositionFloat2D* mutable_pos();
  void set_allocated_pos(::msg::PositionFloat2D* pos);
  private:
  const ::msg::PositionFloat2D& _internal_pos() const;
  ::msg::PositionFloat2D* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::msg::PositionFloat2D* pos);
  ::msg::PositionFloat2D* unsafe_arena_release_pos();

  // int32 PlayerIndex = 1;
  void clear_playerindex();
  int32_t playerindex() const;
  void set_playerindex(int32_t value);
  private:
  int32_t _internal_playerindex() const;
  void _internal_set_playerindex(int32_t value);
  public:

  // .msg.MessengerMoveType Type = 3;
  void clear_type();
  ::msg::MessengerMoveType type() const;
  void set_type(::msg::MessengerMoveType value);
  private:
  ::msg::MessengerMoveType _internal_type() const;
  void _internal_set_type(::msg::MessengerMoveType value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfPvpUpdateMessengerPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionFloat2D* pos_;
    int32_t playerindex_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfPvpPlayerLoggedIn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfPvpPlayerLoggedIn) */ {
 public:
  inline CSNtfPvpPlayerLoggedIn() : CSNtfPvpPlayerLoggedIn(nullptr) {}
  ~CSNtfPvpPlayerLoggedIn() override;
  explicit PROTOBUF_CONSTEXPR CSNtfPvpPlayerLoggedIn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfPvpPlayerLoggedIn(const CSNtfPvpPlayerLoggedIn& from);
  CSNtfPvpPlayerLoggedIn(CSNtfPvpPlayerLoggedIn&& from) noexcept
    : CSNtfPvpPlayerLoggedIn() {
    *this = ::std::move(from);
  }

  inline CSNtfPvpPlayerLoggedIn& operator=(const CSNtfPvpPlayerLoggedIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfPvpPlayerLoggedIn& operator=(CSNtfPvpPlayerLoggedIn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfPvpPlayerLoggedIn& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfPvpPlayerLoggedIn* internal_default_instance() {
    return reinterpret_cast<const CSNtfPvpPlayerLoggedIn*>(
               &_CSNtfPvpPlayerLoggedIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(CSNtfPvpPlayerLoggedIn& a, CSNtfPvpPlayerLoggedIn& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfPvpPlayerLoggedIn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfPvpPlayerLoggedIn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfPvpPlayerLoggedIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfPvpPlayerLoggedIn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfPvpPlayerLoggedIn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfPvpPlayerLoggedIn& from) {
    CSNtfPvpPlayerLoggedIn::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfPvpPlayerLoggedIn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfPvpPlayerLoggedIn";
  }
  protected:
  explicit CSNtfPvpPlayerLoggedIn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 1,
  };
  // .msg.PlayerBasicInfo PlayerInfo = 1;
  bool has_playerinfo() const;
  private:
  bool _internal_has_playerinfo() const;
  public:
  void clear_playerinfo();
  const ::msg::PlayerBasicInfo& playerinfo() const;
  PROTOBUF_NODISCARD ::msg::PlayerBasicInfo* release_playerinfo();
  ::msg::PlayerBasicInfo* mutable_playerinfo();
  void set_allocated_playerinfo(::msg::PlayerBasicInfo* playerinfo);
  private:
  const ::msg::PlayerBasicInfo& _internal_playerinfo() const;
  ::msg::PlayerBasicInfo* _internal_mutable_playerinfo();
  public:
  void unsafe_arena_set_allocated_playerinfo(
      ::msg::PlayerBasicInfo* playerinfo);
  ::msg::PlayerBasicInfo* unsafe_arena_release_playerinfo();

  // @@protoc_insertion_point(class_scope:msg.CSNtfPvpPlayerLoggedIn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PlayerBasicInfo* playerinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfPvpSetReadyState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfPvpSetReadyState) */ {
 public:
  inline CSNtfPvpSetReadyState() : CSNtfPvpSetReadyState(nullptr) {}
  ~CSNtfPvpSetReadyState() override;
  explicit PROTOBUF_CONSTEXPR CSNtfPvpSetReadyState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfPvpSetReadyState(const CSNtfPvpSetReadyState& from);
  CSNtfPvpSetReadyState(CSNtfPvpSetReadyState&& from) noexcept
    : CSNtfPvpSetReadyState() {
    *this = ::std::move(from);
  }

  inline CSNtfPvpSetReadyState& operator=(const CSNtfPvpSetReadyState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfPvpSetReadyState& operator=(CSNtfPvpSetReadyState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfPvpSetReadyState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfPvpSetReadyState* internal_default_instance() {
    return reinterpret_cast<const CSNtfPvpSetReadyState*>(
               &_CSNtfPvpSetReadyState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(CSNtfPvpSetReadyState& a, CSNtfPvpSetReadyState& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfPvpSetReadyState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfPvpSetReadyState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfPvpSetReadyState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfPvpSetReadyState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfPvpSetReadyState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfPvpSetReadyState& from) {
    CSNtfPvpSetReadyState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfPvpSetReadyState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfPvpSetReadyState";
  }
  protected:
  explicit CSNtfPvpSetReadyState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdxFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // int32 PlayerIdx = 1;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // bool State = 2;
  void clear_state();
  bool state() const;
  void set_state(bool value);
  private:
  bool _internal_state() const;
  void _internal_set_state(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfPvpSetReadyState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playeridx_;
    bool state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfPvpPlayerAllReady final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSNtfPvpPlayerAllReady) */ {
 public:
  inline CSNtfPvpPlayerAllReady() : CSNtfPvpPlayerAllReady(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSNtfPvpPlayerAllReady(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfPvpPlayerAllReady(const CSNtfPvpPlayerAllReady& from);
  CSNtfPvpPlayerAllReady(CSNtfPvpPlayerAllReady&& from) noexcept
    : CSNtfPvpPlayerAllReady() {
    *this = ::std::move(from);
  }

  inline CSNtfPvpPlayerAllReady& operator=(const CSNtfPvpPlayerAllReady& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfPvpPlayerAllReady& operator=(CSNtfPvpPlayerAllReady&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfPvpPlayerAllReady& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfPvpPlayerAllReady* internal_default_instance() {
    return reinterpret_cast<const CSNtfPvpPlayerAllReady*>(
               &_CSNtfPvpPlayerAllReady_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(CSNtfPvpPlayerAllReady& a, CSNtfPvpPlayerAllReady& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfPvpPlayerAllReady* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfPvpPlayerAllReady* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfPvpPlayerAllReady* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfPvpPlayerAllReady>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSNtfPvpPlayerAllReady& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSNtfPvpPlayerAllReady& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfPvpPlayerAllReady";
  }
  protected:
  explicit CSNtfPvpPlayerAllReady(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSNtfPvpPlayerAllReady)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfPvpPlayerDead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfPvpPlayerDead) */ {
 public:
  inline CSNtfPvpPlayerDead() : CSNtfPvpPlayerDead(nullptr) {}
  ~CSNtfPvpPlayerDead() override;
  explicit PROTOBUF_CONSTEXPR CSNtfPvpPlayerDead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfPvpPlayerDead(const CSNtfPvpPlayerDead& from);
  CSNtfPvpPlayerDead(CSNtfPvpPlayerDead&& from) noexcept
    : CSNtfPvpPlayerDead() {
    *this = ::std::move(from);
  }

  inline CSNtfPvpPlayerDead& operator=(const CSNtfPvpPlayerDead& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfPvpPlayerDead& operator=(CSNtfPvpPlayerDead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfPvpPlayerDead& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfPvpPlayerDead* internal_default_instance() {
    return reinterpret_cast<const CSNtfPvpPlayerDead*>(
               &_CSNtfPvpPlayerDead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(CSNtfPvpPlayerDead& a, CSNtfPvpPlayerDead& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfPvpPlayerDead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfPvpPlayerDead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfPvpPlayerDead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfPvpPlayerDead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfPvpPlayerDead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfPvpPlayerDead& from) {
    CSNtfPvpPlayerDead::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfPvpPlayerDead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfPvpPlayerDead";
  }
  protected:
  explicit CSNtfPvpPlayerDead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdxFieldNumber = 1,
  };
  // int32 PlayerIdx = 1;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfPvpPlayerDead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playeridx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfPvpPlayerOffline final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfPvpPlayerOffline) */ {
 public:
  inline CSNtfPvpPlayerOffline() : CSNtfPvpPlayerOffline(nullptr) {}
  ~CSNtfPvpPlayerOffline() override;
  explicit PROTOBUF_CONSTEXPR CSNtfPvpPlayerOffline(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfPvpPlayerOffline(const CSNtfPvpPlayerOffline& from);
  CSNtfPvpPlayerOffline(CSNtfPvpPlayerOffline&& from) noexcept
    : CSNtfPvpPlayerOffline() {
    *this = ::std::move(from);
  }

  inline CSNtfPvpPlayerOffline& operator=(const CSNtfPvpPlayerOffline& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfPvpPlayerOffline& operator=(CSNtfPvpPlayerOffline&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfPvpPlayerOffline& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfPvpPlayerOffline* internal_default_instance() {
    return reinterpret_cast<const CSNtfPvpPlayerOffline*>(
               &_CSNtfPvpPlayerOffline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(CSNtfPvpPlayerOffline& a, CSNtfPvpPlayerOffline& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfPvpPlayerOffline* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfPvpPlayerOffline* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfPvpPlayerOffline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfPvpPlayerOffline>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfPvpPlayerOffline& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfPvpPlayerOffline& from) {
    CSNtfPvpPlayerOffline::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfPvpPlayerOffline* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfPvpPlayerOffline";
  }
  protected:
  explicit CSNtfPvpPlayerOffline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdxFieldNumber = 1,
  };
  // int32 PlayerIdx = 1;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfPvpPlayerOffline)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playeridx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfChessOnBoardSold final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfChessOnBoardSold) */ {
 public:
  inline CSNtfChessOnBoardSold() : CSNtfChessOnBoardSold(nullptr) {}
  ~CSNtfChessOnBoardSold() override;
  explicit PROTOBUF_CONSTEXPR CSNtfChessOnBoardSold(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfChessOnBoardSold(const CSNtfChessOnBoardSold& from);
  CSNtfChessOnBoardSold(CSNtfChessOnBoardSold&& from) noexcept
    : CSNtfChessOnBoardSold() {
    *this = ::std::move(from);
  }

  inline CSNtfChessOnBoardSold& operator=(const CSNtfChessOnBoardSold& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfChessOnBoardSold& operator=(CSNtfChessOnBoardSold&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfChessOnBoardSold& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfChessOnBoardSold* internal_default_instance() {
    return reinterpret_cast<const CSNtfChessOnBoardSold*>(
               &_CSNtfChessOnBoardSold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(CSNtfChessOnBoardSold& a, CSNtfChessOnBoardSold& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfChessOnBoardSold* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfChessOnBoardSold* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfChessOnBoardSold* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfChessOnBoardSold>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfChessOnBoardSold& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfChessOnBoardSold& from) {
    CSNtfChessOnBoardSold::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfChessOnBoardSold* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfChessOnBoardSold";
  }
  protected:
  explicit CSNtfChessOnBoardSold(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcPosFieldNumber = 2,
    kPlayerIdxFieldNumber = 1,
  };
  // .msg.PositionInt2D SrcPos = 2;
  bool has_srcpos() const;
  private:
  bool _internal_has_srcpos() const;
  public:
  void clear_srcpos();
  const ::msg::PositionInt2D& srcpos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_srcpos();
  ::msg::PositionInt2D* mutable_srcpos();
  void set_allocated_srcpos(::msg::PositionInt2D* srcpos);
  private:
  const ::msg::PositionInt2D& _internal_srcpos() const;
  ::msg::PositionInt2D* _internal_mutable_srcpos();
  public:
  void unsafe_arena_set_allocated_srcpos(
      ::msg::PositionInt2D* srcpos);
  ::msg::PositionInt2D* unsafe_arena_release_srcpos();

  // int32 PlayerIdx = 1;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfChessOnBoardSold)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionInt2D* srcpos_;
    int32_t playeridx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfChessRemovedFromBag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfChessRemovedFromBag) */ {
 public:
  inline CSNtfChessRemovedFromBag() : CSNtfChessRemovedFromBag(nullptr) {}
  ~CSNtfChessRemovedFromBag() override;
  explicit PROTOBUF_CONSTEXPR CSNtfChessRemovedFromBag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfChessRemovedFromBag(const CSNtfChessRemovedFromBag& from);
  CSNtfChessRemovedFromBag(CSNtfChessRemovedFromBag&& from) noexcept
    : CSNtfChessRemovedFromBag() {
    *this = ::std::move(from);
  }

  inline CSNtfChessRemovedFromBag& operator=(const CSNtfChessRemovedFromBag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfChessRemovedFromBag& operator=(CSNtfChessRemovedFromBag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfChessRemovedFromBag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfChessRemovedFromBag* internal_default_instance() {
    return reinterpret_cast<const CSNtfChessRemovedFromBag*>(
               &_CSNtfChessRemovedFromBag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(CSNtfChessRemovedFromBag& a, CSNtfChessRemovedFromBag& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfChessRemovedFromBag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfChessRemovedFromBag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfChessRemovedFromBag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfChessRemovedFromBag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfChessRemovedFromBag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfChessRemovedFromBag& from) {
    CSNtfChessRemovedFromBag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfChessRemovedFromBag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfChessRemovedFromBag";
  }
  protected:
  explicit CSNtfChessRemovedFromBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdxFieldNumber = 1,
    kBagIndexFieldNumber = 2,
  };
  // int32 PlayerIdx = 1;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // int32 BagIndex = 2;
  void clear_bagindex();
  int32_t bagindex() const;
  void set_bagindex(int32_t value);
  private:
  int32_t _internal_bagindex() const;
  void _internal_set_bagindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfChessRemovedFromBag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playeridx_;
    int32_t bagindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfBuyChess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfBuyChess) */ {
 public:
  inline CSNtfBuyChess() : CSNtfBuyChess(nullptr) {}
  ~CSNtfBuyChess() override;
  explicit PROTOBUF_CONSTEXPR CSNtfBuyChess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfBuyChess(const CSNtfBuyChess& from);
  CSNtfBuyChess(CSNtfBuyChess&& from) noexcept
    : CSNtfBuyChess() {
    *this = ::std::move(from);
  }

  inline CSNtfBuyChess& operator=(const CSNtfBuyChess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfBuyChess& operator=(CSNtfBuyChess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfBuyChess& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfBuyChess* internal_default_instance() {
    return reinterpret_cast<const CSNtfBuyChess*>(
               &_CSNtfBuyChess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(CSNtfBuyChess& a, CSNtfBuyChess& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfBuyChess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfBuyChess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfBuyChess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfBuyChess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfBuyChess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfBuyChess& from) {
    CSNtfBuyChess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfBuyChess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfBuyChess";
  }
  protected:
  explicit CSNtfBuyChess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdxFieldNumber = 1,
    kChessConfigIdFieldNumber = 2,
    kBagIndexFieldNumber = 4,
    kTxFieldNumber = 5,
    kIsToBagFieldNumber = 3,
    kIsDragFieldNumber = 7,
    kTyFieldNumber = 6,
  };
  // int32 PlayerIdx = 1;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // int32 ChessConfigId = 2;
  void clear_chessconfigid();
  int32_t chessconfigid() const;
  void set_chessconfigid(int32_t value);
  private:
  int32_t _internal_chessconfigid() const;
  void _internal_set_chessconfigid(int32_t value);
  public:

  // int32 BagIndex = 4;
  void clear_bagindex();
  int32_t bagindex() const;
  void set_bagindex(int32_t value);
  private:
  int32_t _internal_bagindex() const;
  void _internal_set_bagindex(int32_t value);
  public:

  // int32 Tx = 5;
  void clear_tx();
  int32_t tx() const;
  void set_tx(int32_t value);
  private:
  int32_t _internal_tx() const;
  void _internal_set_tx(int32_t value);
  public:

  // bool IsToBag = 3;
  void clear_istobag();
  bool istobag() const;
  void set_istobag(bool value);
  private:
  bool _internal_istobag() const;
  void _internal_set_istobag(bool value);
  public:

  // bool IsDrag = 7;
  void clear_isdrag();
  bool isdrag() const;
  void set_isdrag(bool value);
  private:
  bool _internal_isdrag() const;
  void _internal_set_isdrag(bool value);
  public:

  // int32 Ty = 6;
  void clear_ty();
  int32_t ty() const;
  void set_ty(int32_t value);
  private:
  int32_t _internal_ty() const;
  void _internal_set_ty(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfBuyChess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playeridx_;
    int32_t chessconfigid_;
    int32_t bagindex_;
    int32_t tx_;
    bool istobag_;
    bool isdrag_;
    int32_t ty_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfChessRetrievedToBag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfChessRetrievedToBag) */ {
 public:
  inline CSNtfChessRetrievedToBag() : CSNtfChessRetrievedToBag(nullptr) {}
  ~CSNtfChessRetrievedToBag() override;
  explicit PROTOBUF_CONSTEXPR CSNtfChessRetrievedToBag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfChessRetrievedToBag(const CSNtfChessRetrievedToBag& from);
  CSNtfChessRetrievedToBag(CSNtfChessRetrievedToBag&& from) noexcept
    : CSNtfChessRetrievedToBag() {
    *this = ::std::move(from);
  }

  inline CSNtfChessRetrievedToBag& operator=(const CSNtfChessRetrievedToBag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfChessRetrievedToBag& operator=(CSNtfChessRetrievedToBag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfChessRetrievedToBag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfChessRetrievedToBag* internal_default_instance() {
    return reinterpret_cast<const CSNtfChessRetrievedToBag*>(
               &_CSNtfChessRetrievedToBag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(CSNtfChessRetrievedToBag& a, CSNtfChessRetrievedToBag& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfChessRetrievedToBag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfChessRetrievedToBag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfChessRetrievedToBag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfChessRetrievedToBag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfChessRetrievedToBag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfChessRetrievedToBag& from) {
    CSNtfChessRetrievedToBag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfChessRetrievedToBag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfChessRetrievedToBag";
  }
  protected:
  explicit CSNtfChessRetrievedToBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcPosFieldNumber = 3,
    kPlayerIdxFieldNumber = 1,
    kBagIndexFieldNumber = 2,
  };
  // .msg.PositionInt2D SrcPos = 3;
  bool has_srcpos() const;
  private:
  bool _internal_has_srcpos() const;
  public:
  void clear_srcpos();
  const ::msg::PositionInt2D& srcpos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_srcpos();
  ::msg::PositionInt2D* mutable_srcpos();
  void set_allocated_srcpos(::msg::PositionInt2D* srcpos);
  private:
  const ::msg::PositionInt2D& _internal_srcpos() const;
  ::msg::PositionInt2D* _internal_mutable_srcpos();
  public:
  void unsafe_arena_set_allocated_srcpos(
      ::msg::PositionInt2D* srcpos);
  ::msg::PositionInt2D* unsafe_arena_release_srcpos();

  // int32 PlayerIdx = 1;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // int32 BagIndex = 2;
  void clear_bagindex();
  int32_t bagindex() const;
  void set_bagindex(int32_t value);
  private:
  int32_t _internal_bagindex() const;
  void _internal_set_bagindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfChessRetrievedToBag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionInt2D* srcpos_;
    int32_t playeridx_;
    int32_t bagindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfChessMoved final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfChessMoved) */ {
 public:
  inline CSNtfChessMoved() : CSNtfChessMoved(nullptr) {}
  ~CSNtfChessMoved() override;
  explicit PROTOBUF_CONSTEXPR CSNtfChessMoved(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfChessMoved(const CSNtfChessMoved& from);
  CSNtfChessMoved(CSNtfChessMoved&& from) noexcept
    : CSNtfChessMoved() {
    *this = ::std::move(from);
  }

  inline CSNtfChessMoved& operator=(const CSNtfChessMoved& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfChessMoved& operator=(CSNtfChessMoved&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfChessMoved& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfChessMoved* internal_default_instance() {
    return reinterpret_cast<const CSNtfChessMoved*>(
               &_CSNtfChessMoved_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(CSNtfChessMoved& a, CSNtfChessMoved& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfChessMoved* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfChessMoved* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfChessMoved* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfChessMoved>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfChessMoved& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfChessMoved& from) {
    CSNtfChessMoved::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfChessMoved* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfChessMoved";
  }
  protected:
  explicit CSNtfChessMoved(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcPosFieldNumber = 1,
    kDestPosFieldNumber = 2,
    kPlayerIdxFieldNumber = 3,
    kSuccessFieldNumber = 4,
  };
  // .msg.PositionInt2D SrcPos = 1;
  bool has_srcpos() const;
  private:
  bool _internal_has_srcpos() const;
  public:
  void clear_srcpos();
  const ::msg::PositionInt2D& srcpos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_srcpos();
  ::msg::PositionInt2D* mutable_srcpos();
  void set_allocated_srcpos(::msg::PositionInt2D* srcpos);
  private:
  const ::msg::PositionInt2D& _internal_srcpos() const;
  ::msg::PositionInt2D* _internal_mutable_srcpos();
  public:
  void unsafe_arena_set_allocated_srcpos(
      ::msg::PositionInt2D* srcpos);
  ::msg::PositionInt2D* unsafe_arena_release_srcpos();

  // .msg.PositionInt2D DestPos = 2;
  bool has_destpos() const;
  private:
  bool _internal_has_destpos() const;
  public:
  void clear_destpos();
  const ::msg::PositionInt2D& destpos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_destpos();
  ::msg::PositionInt2D* mutable_destpos();
  void set_allocated_destpos(::msg::PositionInt2D* destpos);
  private:
  const ::msg::PositionInt2D& _internal_destpos() const;
  ::msg::PositionInt2D* _internal_mutable_destpos();
  public:
  void unsafe_arena_set_allocated_destpos(
      ::msg::PositionInt2D* destpos);
  ::msg::PositionInt2D* unsafe_arena_release_destpos();

  // int32 PlayerIdx = 3;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // bool Success = 4;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfChessMoved)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionInt2D* srcpos_;
    ::msg::PositionInt2D* destpos_;
    int32_t playeridx_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfChessFromBagToMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfChessFromBagToMap) */ {
 public:
  inline CSNtfChessFromBagToMap() : CSNtfChessFromBagToMap(nullptr) {}
  ~CSNtfChessFromBagToMap() override;
  explicit PROTOBUF_CONSTEXPR CSNtfChessFromBagToMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfChessFromBagToMap(const CSNtfChessFromBagToMap& from);
  CSNtfChessFromBagToMap(CSNtfChessFromBagToMap&& from) noexcept
    : CSNtfChessFromBagToMap() {
    *this = ::std::move(from);
  }

  inline CSNtfChessFromBagToMap& operator=(const CSNtfChessFromBagToMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfChessFromBagToMap& operator=(CSNtfChessFromBagToMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfChessFromBagToMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfChessFromBagToMap* internal_default_instance() {
    return reinterpret_cast<const CSNtfChessFromBagToMap*>(
               &_CSNtfChessFromBagToMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(CSNtfChessFromBagToMap& a, CSNtfChessFromBagToMap& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfChessFromBagToMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfChessFromBagToMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfChessFromBagToMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfChessFromBagToMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfChessFromBagToMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfChessFromBagToMap& from) {
    CSNtfChessFromBagToMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfChessFromBagToMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfChessFromBagToMap";
  }
  protected:
  explicit CSNtfChessFromBagToMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestPosFieldNumber = 3,
    kPlayerIdxFieldNumber = 1,
    kBagIdxFieldNumber = 2,
  };
  // .msg.PositionInt2D DestPos = 3;
  bool has_destpos() const;
  private:
  bool _internal_has_destpos() const;
  public:
  void clear_destpos();
  const ::msg::PositionInt2D& destpos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_destpos();
  ::msg::PositionInt2D* mutable_destpos();
  void set_allocated_destpos(::msg::PositionInt2D* destpos);
  private:
  const ::msg::PositionInt2D& _internal_destpos() const;
  ::msg::PositionInt2D* _internal_mutable_destpos();
  public:
  void unsafe_arena_set_allocated_destpos(
      ::msg::PositionInt2D* destpos);
  ::msg::PositionInt2D* unsafe_arena_release_destpos();

  // int32 PlayerIdx = 1;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // int32 BagIdx = 2;
  void clear_bagidx();
  int32_t bagidx() const;
  void set_bagidx(int32_t value);
  private:
  int32_t _internal_bagidx() const;
  void _internal_set_bagidx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfChessFromBagToMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionInt2D* destpos_;
    int32_t playeridx_;
    int32_t bagidx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfPlayerLvUpgraded final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfPlayerLvUpgraded) */ {
 public:
  inline CSNtfPlayerLvUpgraded() : CSNtfPlayerLvUpgraded(nullptr) {}
  ~CSNtfPlayerLvUpgraded() override;
  explicit PROTOBUF_CONSTEXPR CSNtfPlayerLvUpgraded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfPlayerLvUpgraded(const CSNtfPlayerLvUpgraded& from);
  CSNtfPlayerLvUpgraded(CSNtfPlayerLvUpgraded&& from) noexcept
    : CSNtfPlayerLvUpgraded() {
    *this = ::std::move(from);
  }

  inline CSNtfPlayerLvUpgraded& operator=(const CSNtfPlayerLvUpgraded& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfPlayerLvUpgraded& operator=(CSNtfPlayerLvUpgraded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfPlayerLvUpgraded& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfPlayerLvUpgraded* internal_default_instance() {
    return reinterpret_cast<const CSNtfPlayerLvUpgraded*>(
               &_CSNtfPlayerLvUpgraded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(CSNtfPlayerLvUpgraded& a, CSNtfPlayerLvUpgraded& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfPlayerLvUpgraded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfPlayerLvUpgraded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfPlayerLvUpgraded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfPlayerLvUpgraded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfPlayerLvUpgraded& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfPlayerLvUpgraded& from) {
    CSNtfPlayerLvUpgraded::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfPlayerLvUpgraded* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfPlayerLvUpgraded";
  }
  protected:
  explicit CSNtfPlayerLvUpgraded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdxFieldNumber = 1,
    kNewPlayerLvFieldNumber = 2,
  };
  // int32 PlayerIdx = 1;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // int32 NewPlayerLv = 2;
  void clear_newplayerlv();
  int32_t newplayerlv() const;
  void set_newplayerlv(int32_t value);
  private:
  int32_t _internal_newplayerlv() const;
  void _internal_set_newplayerlv(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfPlayerLvUpgraded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playeridx_;
    int32_t newplayerlv_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfUpdateExp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfUpdateExp) */ {
 public:
  inline CSNtfUpdateExp() : CSNtfUpdateExp(nullptr) {}
  ~CSNtfUpdateExp() override;
  explicit PROTOBUF_CONSTEXPR CSNtfUpdateExp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfUpdateExp(const CSNtfUpdateExp& from);
  CSNtfUpdateExp(CSNtfUpdateExp&& from) noexcept
    : CSNtfUpdateExp() {
    *this = ::std::move(from);
  }

  inline CSNtfUpdateExp& operator=(const CSNtfUpdateExp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfUpdateExp& operator=(CSNtfUpdateExp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfUpdateExp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfUpdateExp* internal_default_instance() {
    return reinterpret_cast<const CSNtfUpdateExp*>(
               &_CSNtfUpdateExp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(CSNtfUpdateExp& a, CSNtfUpdateExp& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfUpdateExp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfUpdateExp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfUpdateExp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfUpdateExp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfUpdateExp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfUpdateExp& from) {
    CSNtfUpdateExp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfUpdateExp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfUpdateExp";
  }
  protected:
  explicit CSNtfUpdateExp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentExpFieldNumber = 1,
  };
  // int32 CurrentExp = 1;
  void clear_currentexp();
  int32_t currentexp() const;
  void set_currentexp(int32_t value);
  private:
  int32_t _internal_currentexp() const;
  void _internal_set_currentexp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfUpdateExp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t currentexp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfSetEnemy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfSetEnemy) */ {
 public:
  inline CSNtfSetEnemy() : CSNtfSetEnemy(nullptr) {}
  ~CSNtfSetEnemy() override;
  explicit PROTOBUF_CONSTEXPR CSNtfSetEnemy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfSetEnemy(const CSNtfSetEnemy& from);
  CSNtfSetEnemy(CSNtfSetEnemy&& from) noexcept
    : CSNtfSetEnemy() {
    *this = ::std::move(from);
  }

  inline CSNtfSetEnemy& operator=(const CSNtfSetEnemy& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfSetEnemy& operator=(CSNtfSetEnemy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfSetEnemy& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfSetEnemy* internal_default_instance() {
    return reinterpret_cast<const CSNtfSetEnemy*>(
               &_CSNtfSetEnemy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(CSNtfSetEnemy& a, CSNtfSetEnemy& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfSetEnemy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfSetEnemy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfSetEnemy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfSetEnemy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfSetEnemy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfSetEnemy& from) {
    CSNtfSetEnemy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfSetEnemy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfSetEnemy";
  }
  protected:
  explicit CSNtfSetEnemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdxFieldNumber = 1,
    kEnemyIdxFieldNumber = 2,
  };
  // int32 PlayerIdx = 1;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // int32 EnemyIdx = 2;
  void clear_enemyidx();
  int32_t enemyidx() const;
  void set_enemyidx(int32_t value);
  private:
  int32_t _internal_enemyidx() const;
  void _internal_set_enemyidx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfSetEnemy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playeridx_;
    int32_t enemyidx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfSetSeed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfSetSeed) */ {
 public:
  inline CSNtfSetSeed() : CSNtfSetSeed(nullptr) {}
  ~CSNtfSetSeed() override;
  explicit PROTOBUF_CONSTEXPR CSNtfSetSeed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfSetSeed(const CSNtfSetSeed& from);
  CSNtfSetSeed(CSNtfSetSeed&& from) noexcept
    : CSNtfSetSeed() {
    *this = ::std::move(from);
  }

  inline CSNtfSetSeed& operator=(const CSNtfSetSeed& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfSetSeed& operator=(CSNtfSetSeed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfSetSeed& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfSetSeed* internal_default_instance() {
    return reinterpret_cast<const CSNtfSetSeed*>(
               &_CSNtfSetSeed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(CSNtfSetSeed& a, CSNtfSetSeed& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfSetSeed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfSetSeed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfSetSeed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfSetSeed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfSetSeed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfSetSeed& from) {
    CSNtfSetSeed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfSetSeed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfSetSeed";
  }
  protected:
  explicit CSNtfSetSeed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeedFieldNumber = 1,
  };
  // int32 Seed = 1;
  void clear_seed();
  int32_t seed() const;
  void set_seed(int32_t value);
  private:
  int32_t _internal_seed() const;
  void _internal_set_seed(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfSetSeed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t seed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfBattleTerminated final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSNtfBattleTerminated) */ {
 public:
  inline CSNtfBattleTerminated() : CSNtfBattleTerminated(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSNtfBattleTerminated(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfBattleTerminated(const CSNtfBattleTerminated& from);
  CSNtfBattleTerminated(CSNtfBattleTerminated&& from) noexcept
    : CSNtfBattleTerminated() {
    *this = ::std::move(from);
  }

  inline CSNtfBattleTerminated& operator=(const CSNtfBattleTerminated& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfBattleTerminated& operator=(CSNtfBattleTerminated&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfBattleTerminated& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfBattleTerminated* internal_default_instance() {
    return reinterpret_cast<const CSNtfBattleTerminated*>(
               &_CSNtfBattleTerminated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(CSNtfBattleTerminated& a, CSNtfBattleTerminated& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfBattleTerminated* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfBattleTerminated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfBattleTerminated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfBattleTerminated>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSNtfBattleTerminated& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSNtfBattleTerminated& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfBattleTerminated";
  }
  protected:
  explicit CSNtfBattleTerminated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSNtfBattleTerminated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfShopRefreshed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfShopRefreshed) */ {
 public:
  inline CSNtfShopRefreshed() : CSNtfShopRefreshed(nullptr) {}
  ~CSNtfShopRefreshed() override;
  explicit PROTOBUF_CONSTEXPR CSNtfShopRefreshed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfShopRefreshed(const CSNtfShopRefreshed& from);
  CSNtfShopRefreshed(CSNtfShopRefreshed&& from) noexcept
    : CSNtfShopRefreshed() {
    *this = ::std::move(from);
  }

  inline CSNtfShopRefreshed& operator=(const CSNtfShopRefreshed& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfShopRefreshed& operator=(CSNtfShopRefreshed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfShopRefreshed& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfShopRefreshed* internal_default_instance() {
    return reinterpret_cast<const CSNtfShopRefreshed*>(
               &_CSNtfShopRefreshed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(CSNtfShopRefreshed& a, CSNtfShopRefreshed& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfShopRefreshed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfShopRefreshed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfShopRefreshed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfShopRefreshed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfShopRefreshed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfShopRefreshed& from) {
    CSNtfShopRefreshed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfShopRefreshed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfShopRefreshed";
  }
  protected:
  explicit CSNtfShopRefreshed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChessesFieldNumber = 1,
  };
  // repeated int32 Chesses = 1;
  int chesses_size() const;
  private:
  int _internal_chesses_size() const;
  public:
  void clear_chesses();
  private:
  int32_t _internal_chesses(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_chesses() const;
  void _internal_add_chesses(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_chesses();
  public:
  int32_t chesses(int index) const;
  void set_chesses(int index, int32_t value);
  void add_chesses(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      chesses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_chesses();

  // @@protoc_insertion_point(class_scope:msg.CSNtfShopRefreshed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > chesses_;
    mutable std::atomic<int> _chesses_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfChessMovedWithinBag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfChessMovedWithinBag) */ {
 public:
  inline CSNtfChessMovedWithinBag() : CSNtfChessMovedWithinBag(nullptr) {}
  ~CSNtfChessMovedWithinBag() override;
  explicit PROTOBUF_CONSTEXPR CSNtfChessMovedWithinBag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfChessMovedWithinBag(const CSNtfChessMovedWithinBag& from);
  CSNtfChessMovedWithinBag(CSNtfChessMovedWithinBag&& from) noexcept
    : CSNtfChessMovedWithinBag() {
    *this = ::std::move(from);
  }

  inline CSNtfChessMovedWithinBag& operator=(const CSNtfChessMovedWithinBag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfChessMovedWithinBag& operator=(CSNtfChessMovedWithinBag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfChessMovedWithinBag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfChessMovedWithinBag* internal_default_instance() {
    return reinterpret_cast<const CSNtfChessMovedWithinBag*>(
               &_CSNtfChessMovedWithinBag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(CSNtfChessMovedWithinBag& a, CSNtfChessMovedWithinBag& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfChessMovedWithinBag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfChessMovedWithinBag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfChessMovedWithinBag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfChessMovedWithinBag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfChessMovedWithinBag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfChessMovedWithinBag& from) {
    CSNtfChessMovedWithinBag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfChessMovedWithinBag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfChessMovedWithinBag";
  }
  protected:
  explicit CSNtfChessMovedWithinBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdxFieldNumber = 1,
    kSrcBagIdxFieldNumber = 2,
    kDestBagIdxFieldNumber = 3,
  };
  // int32 PlayerIdx = 1;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // int32 SrcBagIdx = 2;
  void clear_srcbagidx();
  int32_t srcbagidx() const;
  void set_srcbagidx(int32_t value);
  private:
  int32_t _internal_srcbagidx() const;
  void _internal_set_srcbagidx(int32_t value);
  public:

  // int32 DestBagIdx = 3;
  void clear_destbagidx();
  int32_t destbagidx() const;
  void set_destbagidx(int32_t value);
  private:
  int32_t _internal_destbagidx() const;
  void _internal_set_destbagidx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfChessMovedWithinBag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playeridx_;
    int32_t srcbagidx_;
    int32_t destbagidx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfCreepDied final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfCreepDied) */ {
 public:
  inline CSNtfCreepDied() : CSNtfCreepDied(nullptr) {}
  ~CSNtfCreepDied() override;
  explicit PROTOBUF_CONSTEXPR CSNtfCreepDied(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfCreepDied(const CSNtfCreepDied& from);
  CSNtfCreepDied(CSNtfCreepDied&& from) noexcept
    : CSNtfCreepDied() {
    *this = ::std::move(from);
  }

  inline CSNtfCreepDied& operator=(const CSNtfCreepDied& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfCreepDied& operator=(CSNtfCreepDied&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfCreepDied& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfCreepDied* internal_default_instance() {
    return reinterpret_cast<const CSNtfCreepDied*>(
               &_CSNtfCreepDied_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(CSNtfCreepDied& a, CSNtfCreepDied& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfCreepDied* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfCreepDied* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfCreepDied* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfCreepDied>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfCreepDied& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfCreepDied& from) {
    CSNtfCreepDied::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfCreepDied* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfCreepDied";
  }
  protected:
  explicit CSNtfCreepDied(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreepPosFieldNumber = 5,
    kPlayerIdxFieldNumber = 1,
    kCreepIdFieldNumber = 2,
    kEquipNetIdFieldNumber = 3,
    kEquipIdFieldNumber = 4,
  };
  // .msg.PositionInt2D CreepPos = 5;
  bool has_creeppos() const;
  private:
  bool _internal_has_creeppos() const;
  public:
  void clear_creeppos();
  const ::msg::PositionInt2D& creeppos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_creeppos();
  ::msg::PositionInt2D* mutable_creeppos();
  void set_allocated_creeppos(::msg::PositionInt2D* creeppos);
  private:
  const ::msg::PositionInt2D& _internal_creeppos() const;
  ::msg::PositionInt2D* _internal_mutable_creeppos();
  public:
  void unsafe_arena_set_allocated_creeppos(
      ::msg::PositionInt2D* creeppos);
  ::msg::PositionInt2D* unsafe_arena_release_creeppos();

  // int32 PlayerIdx = 1;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // int32 CreepId = 2;
  void clear_creepid();
  int32_t creepid() const;
  void set_creepid(int32_t value);
  private:
  int32_t _internal_creepid() const;
  void _internal_set_creepid(int32_t value);
  public:

  // int32 EquipNetId = 3;
  void clear_equipnetid();
  int32_t equipnetid() const;
  void set_equipnetid(int32_t value);
  private:
  int32_t _internal_equipnetid() const;
  void _internal_set_equipnetid(int32_t value);
  public:

  // int32 EquipId = 4;
  void clear_equipid();
  int32_t equipid() const;
  void set_equipid(int32_t value);
  private:
  int32_t _internal_equipid() const;
  void _internal_set_equipid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfCreepDied)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionInt2D* creeppos_;
    int32_t playeridx_;
    int32_t creepid_;
    int32_t equipnetid_;
    int32_t equipid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfUpdateHp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfUpdateHp) */ {
 public:
  inline CSNtfUpdateHp() : CSNtfUpdateHp(nullptr) {}
  ~CSNtfUpdateHp() override;
  explicit PROTOBUF_CONSTEXPR CSNtfUpdateHp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfUpdateHp(const CSNtfUpdateHp& from);
  CSNtfUpdateHp(CSNtfUpdateHp&& from) noexcept
    : CSNtfUpdateHp() {
    *this = ::std::move(from);
  }

  inline CSNtfUpdateHp& operator=(const CSNtfUpdateHp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfUpdateHp& operator=(CSNtfUpdateHp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfUpdateHp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfUpdateHp* internal_default_instance() {
    return reinterpret_cast<const CSNtfUpdateHp*>(
               &_CSNtfUpdateHp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(CSNtfUpdateHp& a, CSNtfUpdateHp& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfUpdateHp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfUpdateHp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfUpdateHp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfUpdateHp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfUpdateHp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfUpdateHp& from) {
    CSNtfUpdateHp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfUpdateHp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfUpdateHp";
  }
  protected:
  explicit CSNtfUpdateHp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdxFieldNumber = 1,
    kHpFieldNumber = 2,
  };
  // int32 PlayerIdx = 1;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // int32 Hp = 2;
  void clear_hp();
  int32_t hp() const;
  void set_hp(int32_t value);
  private:
  int32_t _internal_hp() const;
  void _internal_set_hp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfUpdateHp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playeridx_;
    int32_t hp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfPickupEquipment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfPickupEquipment) */ {
 public:
  inline CSNtfPickupEquipment() : CSNtfPickupEquipment(nullptr) {}
  ~CSNtfPickupEquipment() override;
  explicit PROTOBUF_CONSTEXPR CSNtfPickupEquipment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfPickupEquipment(const CSNtfPickupEquipment& from);
  CSNtfPickupEquipment(CSNtfPickupEquipment&& from) noexcept
    : CSNtfPickupEquipment() {
    *this = ::std::move(from);
  }

  inline CSNtfPickupEquipment& operator=(const CSNtfPickupEquipment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfPickupEquipment& operator=(CSNtfPickupEquipment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfPickupEquipment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfPickupEquipment* internal_default_instance() {
    return reinterpret_cast<const CSNtfPickupEquipment*>(
               &_CSNtfPickupEquipment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(CSNtfPickupEquipment& a, CSNtfPickupEquipment& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfPickupEquipment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfPickupEquipment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfPickupEquipment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfPickupEquipment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfPickupEquipment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfPickupEquipment& from) {
    CSNtfPickupEquipment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfPickupEquipment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfPickupEquipment";
  }
  protected:
  explicit CSNtfPickupEquipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdxFieldNumber = 1,
    kEquipNetIdFieldNumber = 2,
    kBagIdxFieldNumber = 3,
  };
  // int32 PlayerIdx = 1;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // int32 EquipNetId = 2;
  void clear_equipnetid();
  int32_t equipnetid() const;
  void set_equipnetid(int32_t value);
  private:
  int32_t _internal_equipnetid() const;
  void _internal_set_equipnetid(int32_t value);
  public:

  // int32 BagIdx = 3;
  void clear_bagidx();
  int32_t bagidx() const;
  void set_bagidx(int32_t value);
  private:
  int32_t _internal_bagidx() const;
  void _internal_set_bagidx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfPickupEquipment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playeridx_;
    int32_t equipnetid_;
    int32_t bagidx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfUseEquipment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfUseEquipment) */ {
 public:
  inline CSNtfUseEquipment() : CSNtfUseEquipment(nullptr) {}
  ~CSNtfUseEquipment() override;
  explicit PROTOBUF_CONSTEXPR CSNtfUseEquipment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfUseEquipment(const CSNtfUseEquipment& from);
  CSNtfUseEquipment(CSNtfUseEquipment&& from) noexcept
    : CSNtfUseEquipment() {
    *this = ::std::move(from);
  }

  inline CSNtfUseEquipment& operator=(const CSNtfUseEquipment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfUseEquipment& operator=(CSNtfUseEquipment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfUseEquipment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfUseEquipment* internal_default_instance() {
    return reinterpret_cast<const CSNtfUseEquipment*>(
               &_CSNtfUseEquipment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(CSNtfUseEquipment& a, CSNtfUseEquipment& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfUseEquipment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfUseEquipment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfUseEquipment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfUseEquipment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfUseEquipment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfUseEquipment& from) {
    CSNtfUseEquipment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfUseEquipment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfUseEquipment";
  }
  protected:
  explicit CSNtfUseEquipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 5,
    kNetIdFieldNumber = 1,
    kBagIndexFieldNumber = 3,
    kPlayerIdxFieldNumber = 4,
    kIsChessInBagFieldNumber = 2,
    kIsOnBattleFieldNumber = 7,
    kEquipBagIndexFieldNumber = 6,
  };
  // .msg.PositionInt2D Pos = 5;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::msg::PositionInt2D& pos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_pos();
  ::msg::PositionInt2D* mutable_pos();
  void set_allocated_pos(::msg::PositionInt2D* pos);
  private:
  const ::msg::PositionInt2D& _internal_pos() const;
  ::msg::PositionInt2D* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::msg::PositionInt2D* pos);
  ::msg::PositionInt2D* unsafe_arena_release_pos();

  // int32 NetId = 1;
  void clear_netid();
  int32_t netid() const;
  void set_netid(int32_t value);
  private:
  int32_t _internal_netid() const;
  void _internal_set_netid(int32_t value);
  public:

  // int32 BagIndex = 3;
  void clear_bagindex();
  int32_t bagindex() const;
  void set_bagindex(int32_t value);
  private:
  int32_t _internal_bagindex() const;
  void _internal_set_bagindex(int32_t value);
  public:

  // int32 PlayerIdx = 4;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // bool IsChessInBag = 2;
  void clear_ischessinbag();
  bool ischessinbag() const;
  void set_ischessinbag(bool value);
  private:
  bool _internal_ischessinbag() const;
  void _internal_set_ischessinbag(bool value);
  public:

  // bool IsOnBattle = 7;
  void clear_isonbattle();
  bool isonbattle() const;
  void set_isonbattle(bool value);
  private:
  bool _internal_isonbattle() const;
  void _internal_set_isonbattle(bool value);
  public:

  // int32 EquipBagIndex = 6;
  void clear_equipbagindex();
  int32_t equipbagindex() const;
  void set_equipbagindex(int32_t value);
  private:
  int32_t _internal_equipbagindex() const;
  void _internal_set_equipbagindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfUseEquipment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionInt2D* pos_;
    int32_t netid_;
    int32_t bagindex_;
    int32_t playeridx_;
    bool ischessinbag_;
    bool isonbattle_;
    int32_t equipbagindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfOperateEquipInBag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfOperateEquipInBag) */ {
 public:
  inline CSNtfOperateEquipInBag() : CSNtfOperateEquipInBag(nullptr) {}
  ~CSNtfOperateEquipInBag() override;
  explicit PROTOBUF_CONSTEXPR CSNtfOperateEquipInBag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfOperateEquipInBag(const CSNtfOperateEquipInBag& from);
  CSNtfOperateEquipInBag(CSNtfOperateEquipInBag&& from) noexcept
    : CSNtfOperateEquipInBag() {
    *this = ::std::move(from);
  }

  inline CSNtfOperateEquipInBag& operator=(const CSNtfOperateEquipInBag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfOperateEquipInBag& operator=(CSNtfOperateEquipInBag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfOperateEquipInBag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfOperateEquipInBag* internal_default_instance() {
    return reinterpret_cast<const CSNtfOperateEquipInBag*>(
               &_CSNtfOperateEquipInBag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(CSNtfOperateEquipInBag& a, CSNtfOperateEquipInBag& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfOperateEquipInBag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfOperateEquipInBag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfOperateEquipInBag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfOperateEquipInBag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfOperateEquipInBag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfOperateEquipInBag& from) {
    CSNtfOperateEquipInBag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfOperateEquipInBag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfOperateEquipInBag";
  }
  protected:
  explicit CSNtfOperateEquipInBag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetIdFieldNumber = 1,
    kEquipmentIdFieldNumber = 2,
    kBagIdxFieldNumber = 3,
    kPlayerIdxFieldNumber = 4,
    kIsRemovedFieldNumber = 5,
  };
  // int32 NetId = 1;
  void clear_netid();
  int32_t netid() const;
  void set_netid(int32_t value);
  private:
  int32_t _internal_netid() const;
  void _internal_set_netid(int32_t value);
  public:

  // int32 EquipmentId = 2;
  void clear_equipmentid();
  int32_t equipmentid() const;
  void set_equipmentid(int32_t value);
  private:
  int32_t _internal_equipmentid() const;
  void _internal_set_equipmentid(int32_t value);
  public:

  // int32 BagIdx = 3;
  void clear_bagidx();
  int32_t bagidx() const;
  void set_bagidx(int32_t value);
  private:
  int32_t _internal_bagidx() const;
  void _internal_set_bagidx(int32_t value);
  public:

  // int32 PlayerIdx = 4;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // bool IsRemoved = 5;
  void clear_isremoved();
  bool isremoved() const;
  void set_isremoved(bool value);
  private:
  bool _internal_isremoved() const;
  void _internal_set_isremoved(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfOperateEquipInBag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t netid_;
    int32_t equipmentid_;
    int32_t bagidx_;
    int32_t playeridx_;
    bool isremoved_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfOperateEquipOnChess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfOperateEquipOnChess) */ {
 public:
  inline CSNtfOperateEquipOnChess() : CSNtfOperateEquipOnChess(nullptr) {}
  ~CSNtfOperateEquipOnChess() override;
  explicit PROTOBUF_CONSTEXPR CSNtfOperateEquipOnChess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfOperateEquipOnChess(const CSNtfOperateEquipOnChess& from);
  CSNtfOperateEquipOnChess(CSNtfOperateEquipOnChess&& from) noexcept
    : CSNtfOperateEquipOnChess() {
    *this = ::std::move(from);
  }

  inline CSNtfOperateEquipOnChess& operator=(const CSNtfOperateEquipOnChess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfOperateEquipOnChess& operator=(CSNtfOperateEquipOnChess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfOperateEquipOnChess& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfOperateEquipOnChess* internal_default_instance() {
    return reinterpret_cast<const CSNtfOperateEquipOnChess*>(
               &_CSNtfOperateEquipOnChess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(CSNtfOperateEquipOnChess& a, CSNtfOperateEquipOnChess& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfOperateEquipOnChess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfOperateEquipOnChess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfOperateEquipOnChess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfOperateEquipOnChess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfOperateEquipOnChess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfOperateEquipOnChess& from) {
    CSNtfOperateEquipOnChess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfOperateEquipOnChess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfOperateEquipOnChess";
  }
  protected:
  explicit CSNtfOperateEquipOnChess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChessTilePosFieldNumber = 6,
    kNetIdFieldNumber = 1,
    kPlayerIdxFieldNumber = 2,
    kChessBagIndexFieldNumber = 5,
    kIsRemovedFieldNumber = 3,
    kIsChessOnBoardFieldNumber = 4,
    kIsOnBattleFieldNumber = 9,
    kEquipmentIdFieldNumber = 7,
    kChessSlotIndexFieldNumber = 8,
  };
  // .msg.PositionInt2D ChessTilePos = 6;
  bool has_chesstilepos() const;
  private:
  bool _internal_has_chesstilepos() const;
  public:
  void clear_chesstilepos();
  const ::msg::PositionInt2D& chesstilepos() const;
  PROTOBUF_NODISCARD ::msg::PositionInt2D* release_chesstilepos();
  ::msg::PositionInt2D* mutable_chesstilepos();
  void set_allocated_chesstilepos(::msg::PositionInt2D* chesstilepos);
  private:
  const ::msg::PositionInt2D& _internal_chesstilepos() const;
  ::msg::PositionInt2D* _internal_mutable_chesstilepos();
  public:
  void unsafe_arena_set_allocated_chesstilepos(
      ::msg::PositionInt2D* chesstilepos);
  ::msg::PositionInt2D* unsafe_arena_release_chesstilepos();

  // int32 NetId = 1;
  void clear_netid();
  int32_t netid() const;
  void set_netid(int32_t value);
  private:
  int32_t _internal_netid() const;
  void _internal_set_netid(int32_t value);
  public:

  // int32 PlayerIdx = 2;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // int32 ChessBagIndex = 5;
  void clear_chessbagindex();
  int32_t chessbagindex() const;
  void set_chessbagindex(int32_t value);
  private:
  int32_t _internal_chessbagindex() const;
  void _internal_set_chessbagindex(int32_t value);
  public:

  // bool IsRemoved = 3;
  void clear_isremoved();
  bool isremoved() const;
  void set_isremoved(bool value);
  private:
  bool _internal_isremoved() const;
  void _internal_set_isremoved(bool value);
  public:

  // bool IsChessOnBoard = 4;
  void clear_ischessonboard();
  bool ischessonboard() const;
  void set_ischessonboard(bool value);
  private:
  bool _internal_ischessonboard() const;
  void _internal_set_ischessonboard(bool value);
  public:

  // bool IsOnBattle = 9;
  void clear_isonbattle();
  bool isonbattle() const;
  void set_isonbattle(bool value);
  private:
  bool _internal_isonbattle() const;
  void _internal_set_isonbattle(bool value);
  public:

  // int32 EquipmentId = 7;
  void clear_equipmentid();
  int32_t equipmentid() const;
  void set_equipmentid(int32_t value);
  private:
  int32_t _internal_equipmentid() const;
  void _internal_set_equipmentid(int32_t value);
  public:

  // int32 ChessSlotIndex = 8;
  void clear_chessslotindex();
  int32_t chessslotindex() const;
  void set_chessslotindex(int32_t value);
  private:
  int32_t _internal_chessslotindex() const;
  void _internal_set_chessslotindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfOperateEquipOnChess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::msg::PositionInt2D* chesstilepos_;
    int32_t netid_;
    int32_t playeridx_;
    int32_t chessbagindex_;
    bool isremoved_;
    bool ischessonboard_;
    bool isonbattle_;
    int32_t equipmentid_;
    int32_t chessslotindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfAntiAddictionTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfAntiAddictionTime) */ {
 public:
  inline CSNtfAntiAddictionTime() : CSNtfAntiAddictionTime(nullptr) {}
  ~CSNtfAntiAddictionTime() override;
  explicit PROTOBUF_CONSTEXPR CSNtfAntiAddictionTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfAntiAddictionTime(const CSNtfAntiAddictionTime& from);
  CSNtfAntiAddictionTime(CSNtfAntiAddictionTime&& from) noexcept
    : CSNtfAntiAddictionTime() {
    *this = ::std::move(from);
  }

  inline CSNtfAntiAddictionTime& operator=(const CSNtfAntiAddictionTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfAntiAddictionTime& operator=(CSNtfAntiAddictionTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfAntiAddictionTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfAntiAddictionTime* internal_default_instance() {
    return reinterpret_cast<const CSNtfAntiAddictionTime*>(
               &_CSNtfAntiAddictionTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(CSNtfAntiAddictionTime& a, CSNtfAntiAddictionTime& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfAntiAddictionTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfAntiAddictionTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfAntiAddictionTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfAntiAddictionTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfAntiAddictionTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfAntiAddictionTime& from) {
    CSNtfAntiAddictionTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfAntiAddictionTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfAntiAddictionTime";
  }
  protected:
  explicit CSNtfAntiAddictionTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalOnlineDurationFieldNumber = 1,
    kTotalOfflineDurationFieldNumber = 2,
  };
  // int32 TotalOnlineDuration = 1;
  void clear_totalonlineduration();
  int32_t totalonlineduration() const;
  void set_totalonlineduration(int32_t value);
  private:
  int32_t _internal_totalonlineduration() const;
  void _internal_set_totalonlineduration(int32_t value);
  public:

  // int32 TotalOfflineDuration = 2;
  void clear_totalofflineduration();
  int32_t totalofflineduration() const;
  void set_totalofflineduration(int32_t value);
  private:
  int32_t _internal_totalofflineduration() const;
  void _internal_set_totalofflineduration(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfAntiAddictionTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t totalonlineduration_;
    int32_t totalofflineduration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfAntiAddictionTriggered final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSNtfAntiAddictionTriggered) */ {
 public:
  inline CSNtfAntiAddictionTriggered() : CSNtfAntiAddictionTriggered(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSNtfAntiAddictionTriggered(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfAntiAddictionTriggered(const CSNtfAntiAddictionTriggered& from);
  CSNtfAntiAddictionTriggered(CSNtfAntiAddictionTriggered&& from) noexcept
    : CSNtfAntiAddictionTriggered() {
    *this = ::std::move(from);
  }

  inline CSNtfAntiAddictionTriggered& operator=(const CSNtfAntiAddictionTriggered& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfAntiAddictionTriggered& operator=(CSNtfAntiAddictionTriggered&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfAntiAddictionTriggered& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfAntiAddictionTriggered* internal_default_instance() {
    return reinterpret_cast<const CSNtfAntiAddictionTriggered*>(
               &_CSNtfAntiAddictionTriggered_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(CSNtfAntiAddictionTriggered& a, CSNtfAntiAddictionTriggered& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfAntiAddictionTriggered* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfAntiAddictionTriggered* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfAntiAddictionTriggered* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfAntiAddictionTriggered>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSNtfAntiAddictionTriggered& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSNtfAntiAddictionTriggered& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfAntiAddictionTriggered";
  }
  protected:
  explicit CSNtfAntiAddictionTriggered(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSNtfAntiAddictionTriggered)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfAntiAddictionRemoved final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSNtfAntiAddictionRemoved) */ {
 public:
  inline CSNtfAntiAddictionRemoved() : CSNtfAntiAddictionRemoved(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSNtfAntiAddictionRemoved(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfAntiAddictionRemoved(const CSNtfAntiAddictionRemoved& from);
  CSNtfAntiAddictionRemoved(CSNtfAntiAddictionRemoved&& from) noexcept
    : CSNtfAntiAddictionRemoved() {
    *this = ::std::move(from);
  }

  inline CSNtfAntiAddictionRemoved& operator=(const CSNtfAntiAddictionRemoved& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfAntiAddictionRemoved& operator=(CSNtfAntiAddictionRemoved&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfAntiAddictionRemoved& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfAntiAddictionRemoved* internal_default_instance() {
    return reinterpret_cast<const CSNtfAntiAddictionRemoved*>(
               &_CSNtfAntiAddictionRemoved_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(CSNtfAntiAddictionRemoved& a, CSNtfAntiAddictionRemoved& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfAntiAddictionRemoved* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfAntiAddictionRemoved* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfAntiAddictionRemoved* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfAntiAddictionRemoved>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSNtfAntiAddictionRemoved& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSNtfAntiAddictionRemoved& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfAntiAddictionRemoved";
  }
  protected:
  explicit CSNtfAntiAddictionRemoved(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSNtfAntiAddictionRemoved)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfUnsuggestedPhase final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSNtfUnsuggestedPhase) */ {
 public:
  inline CSNtfUnsuggestedPhase() : CSNtfUnsuggestedPhase(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSNtfUnsuggestedPhase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfUnsuggestedPhase(const CSNtfUnsuggestedPhase& from);
  CSNtfUnsuggestedPhase(CSNtfUnsuggestedPhase&& from) noexcept
    : CSNtfUnsuggestedPhase() {
    *this = ::std::move(from);
  }

  inline CSNtfUnsuggestedPhase& operator=(const CSNtfUnsuggestedPhase& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfUnsuggestedPhase& operator=(CSNtfUnsuggestedPhase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfUnsuggestedPhase& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfUnsuggestedPhase* internal_default_instance() {
    return reinterpret_cast<const CSNtfUnsuggestedPhase*>(
               &_CSNtfUnsuggestedPhase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(CSNtfUnsuggestedPhase& a, CSNtfUnsuggestedPhase& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfUnsuggestedPhase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfUnsuggestedPhase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfUnsuggestedPhase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfUnsuggestedPhase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSNtfUnsuggestedPhase& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSNtfUnsuggestedPhase& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfUnsuggestedPhase";
  }
  protected:
  explicit CSNtfUnsuggestedPhase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSNtfUnsuggestedPhase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfGameEnd final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:msg.CSNtfGameEnd) */ {
 public:
  inline CSNtfGameEnd() : CSNtfGameEnd(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSNtfGameEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfGameEnd(const CSNtfGameEnd& from);
  CSNtfGameEnd(CSNtfGameEnd&& from) noexcept
    : CSNtfGameEnd() {
    *this = ::std::move(from);
  }

  inline CSNtfGameEnd& operator=(const CSNtfGameEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfGameEnd& operator=(CSNtfGameEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfGameEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfGameEnd* internal_default_instance() {
    return reinterpret_cast<const CSNtfGameEnd*>(
               &_CSNtfGameEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(CSNtfGameEnd& a, CSNtfGameEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfGameEnd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfGameEnd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfGameEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfGameEnd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSNtfGameEnd& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSNtfGameEnd& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfGameEnd";
  }
  protected:
  explicit CSNtfGameEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:msg.CSNtfGameEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfCandyReward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfCandyReward) */ {
 public:
  inline CSNtfCandyReward() : CSNtfCandyReward(nullptr) {}
  ~CSNtfCandyReward() override;
  explicit PROTOBUF_CONSTEXPR CSNtfCandyReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfCandyReward(const CSNtfCandyReward& from);
  CSNtfCandyReward(CSNtfCandyReward&& from) noexcept
    : CSNtfCandyReward() {
    *this = ::std::move(from);
  }

  inline CSNtfCandyReward& operator=(const CSNtfCandyReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfCandyReward& operator=(CSNtfCandyReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfCandyReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfCandyReward* internal_default_instance() {
    return reinterpret_cast<const CSNtfCandyReward*>(
               &_CSNtfCandyReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(CSNtfCandyReward& a, CSNtfCandyReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfCandyReward* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfCandyReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfCandyReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfCandyReward>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfCandyReward& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfCandyReward& from) {
    CSNtfCandyReward::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfCandyReward* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfCandyReward";
  }
  protected:
  explicit CSNtfCandyReward(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandyCntFieldNumber = 1,
    kPlayerIdxFieldNumber = 2,
  };
  // int32 CandyCnt = 1;
  void clear_candycnt();
  int32_t candycnt() const;
  void set_candycnt(int32_t value);
  private:
  int32_t _internal_candycnt() const;
  void _internal_set_candycnt(int32_t value);
  public:

  // int32 PlayerIdx = 2;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfCandyReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t candycnt_;
    int32_t playeridx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfWinStreak final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfWinStreak) */ {
 public:
  inline CSNtfWinStreak() : CSNtfWinStreak(nullptr) {}
  ~CSNtfWinStreak() override;
  explicit PROTOBUF_CONSTEXPR CSNtfWinStreak(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfWinStreak(const CSNtfWinStreak& from);
  CSNtfWinStreak(CSNtfWinStreak&& from) noexcept
    : CSNtfWinStreak() {
    *this = ::std::move(from);
  }

  inline CSNtfWinStreak& operator=(const CSNtfWinStreak& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfWinStreak& operator=(CSNtfWinStreak&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfWinStreak& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfWinStreak* internal_default_instance() {
    return reinterpret_cast<const CSNtfWinStreak*>(
               &_CSNtfWinStreak_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(CSNtfWinStreak& a, CSNtfWinStreak& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfWinStreak* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfWinStreak* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfWinStreak* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfWinStreak>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfWinStreak& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfWinStreak& from) {
    CSNtfWinStreak::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfWinStreak* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfWinStreak";
  }
  protected:
  explicit CSNtfWinStreak(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinStreakFieldNumber = 1,
    kPlayerIdxFieldNumber = 2,
  };
  // int32 WinStreak = 1;
  void clear_winstreak();
  int32_t winstreak() const;
  void set_winstreak(int32_t value);
  private:
  int32_t _internal_winstreak() const;
  void _internal_set_winstreak(int32_t value);
  public:

  // int32 PlayerIdx = 2;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfWinStreak)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t winstreak_;
    int32_t playeridx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfPvpState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfPvpState) */ {
 public:
  inline CSNtfPvpState() : CSNtfPvpState(nullptr) {}
  ~CSNtfPvpState() override;
  explicit PROTOBUF_CONSTEXPR CSNtfPvpState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfPvpState(const CSNtfPvpState& from);
  CSNtfPvpState(CSNtfPvpState&& from) noexcept
    : CSNtfPvpState() {
    *this = ::std::move(from);
  }

  inline CSNtfPvpState& operator=(const CSNtfPvpState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfPvpState& operator=(CSNtfPvpState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfPvpState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfPvpState* internal_default_instance() {
    return reinterpret_cast<const CSNtfPvpState*>(
               &_CSNtfPvpState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(CSNtfPvpState& a, CSNtfPvpState& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfPvpState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfPvpState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfPvpState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfPvpState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfPvpState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfPvpState& from) {
    CSNtfPvpState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfPvpState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfPvpState";
  }
  protected:
  explicit CSNtfPvpState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPvpTCPAddrFieldNumber = 3,
    kPvpIDFieldNumber = 1,
    kGameIDFieldNumber = 2,
  };
  // string PvpTCPAddr = 3;
  void clear_pvptcpaddr();
  const std::string& pvptcpaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pvptcpaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pvptcpaddr();
  PROTOBUF_NODISCARD std::string* release_pvptcpaddr();
  void set_allocated_pvptcpaddr(std::string* pvptcpaddr);
  private:
  const std::string& _internal_pvptcpaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pvptcpaddr(const std::string& value);
  std::string* _internal_mutable_pvptcpaddr();
  public:

  // int32 PvpID = 1;
  void clear_pvpid();
  int32_t pvpid() const;
  void set_pvpid(int32_t value);
  private:
  int32_t _internal_pvpid() const;
  void _internal_set_pvpid(int32_t value);
  public:

  // int32 GameID = 2;
  void clear_gameid();
  int32_t gameid() const;
  void set_gameid(int32_t value);
  private:
  int32_t _internal_gameid() const;
  void _internal_set_gameid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfPvpState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pvptcpaddr_;
    int32_t pvpid_;
    int32_t gameid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfSetAutoUpgradeCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfSetAutoUpgradeCharacter) */ {
 public:
  inline CSNtfSetAutoUpgradeCharacter() : CSNtfSetAutoUpgradeCharacter(nullptr) {}
  ~CSNtfSetAutoUpgradeCharacter() override;
  explicit PROTOBUF_CONSTEXPR CSNtfSetAutoUpgradeCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfSetAutoUpgradeCharacter(const CSNtfSetAutoUpgradeCharacter& from);
  CSNtfSetAutoUpgradeCharacter(CSNtfSetAutoUpgradeCharacter&& from) noexcept
    : CSNtfSetAutoUpgradeCharacter() {
    *this = ::std::move(from);
  }

  inline CSNtfSetAutoUpgradeCharacter& operator=(const CSNtfSetAutoUpgradeCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfSetAutoUpgradeCharacter& operator=(CSNtfSetAutoUpgradeCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfSetAutoUpgradeCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfSetAutoUpgradeCharacter* internal_default_instance() {
    return reinterpret_cast<const CSNtfSetAutoUpgradeCharacter*>(
               &_CSNtfSetAutoUpgradeCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(CSNtfSetAutoUpgradeCharacter& a, CSNtfSetAutoUpgradeCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfSetAutoUpgradeCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfSetAutoUpgradeCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfSetAutoUpgradeCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfSetAutoUpgradeCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfSetAutoUpgradeCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfSetAutoUpgradeCharacter& from) {
    CSNtfSetAutoUpgradeCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfSetAutoUpgradeCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfSetAutoUpgradeCharacter";
  }
  protected:
  explicit CSNtfSetAutoUpgradeCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdxFieldNumber = 1,
    kSwitchOnFieldNumber = 2,
  };
  // int32 PlayerIdx = 1;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // bool SwitchOn = 2;
  void clear_switchon();
  bool switchon() const;
  void set_switchon(bool value);
  private:
  bool _internal_switchon() const;
  void _internal_set_switchon(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfSetAutoUpgradeCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playeridx_;
    bool switchon_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfManuallyUpgradeCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfManuallyUpgradeCharacter) */ {
 public:
  inline CSNtfManuallyUpgradeCharacter() : CSNtfManuallyUpgradeCharacter(nullptr) {}
  ~CSNtfManuallyUpgradeCharacter() override;
  explicit PROTOBUF_CONSTEXPR CSNtfManuallyUpgradeCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfManuallyUpgradeCharacter(const CSNtfManuallyUpgradeCharacter& from);
  CSNtfManuallyUpgradeCharacter(CSNtfManuallyUpgradeCharacter&& from) noexcept
    : CSNtfManuallyUpgradeCharacter() {
    *this = ::std::move(from);
  }

  inline CSNtfManuallyUpgradeCharacter& operator=(const CSNtfManuallyUpgradeCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfManuallyUpgradeCharacter& operator=(CSNtfManuallyUpgradeCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfManuallyUpgradeCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfManuallyUpgradeCharacter* internal_default_instance() {
    return reinterpret_cast<const CSNtfManuallyUpgradeCharacter*>(
               &_CSNtfManuallyUpgradeCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(CSNtfManuallyUpgradeCharacter& a, CSNtfManuallyUpgradeCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfManuallyUpgradeCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfManuallyUpgradeCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfManuallyUpgradeCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfManuallyUpgradeCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfManuallyUpgradeCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfManuallyUpgradeCharacter& from) {
    CSNtfManuallyUpgradeCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfManuallyUpgradeCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfManuallyUpgradeCharacter";
  }
  protected:
  explicit CSNtfManuallyUpgradeCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdxFieldNumber = 1,
    kBagIndexFieldNumber = 2,
    kTxFieldNumber = 3,
    kTyFieldNumber = 4,
    kIsInBagFieldNumber = 5,
  };
  // int32 PlayerIdx = 1;
  void clear_playeridx();
  int32_t playeridx() const;
  void set_playeridx(int32_t value);
  private:
  int32_t _internal_playeridx() const;
  void _internal_set_playeridx(int32_t value);
  public:

  // int32 BagIndex = 2;
  void clear_bagindex();
  int32_t bagindex() const;
  void set_bagindex(int32_t value);
  private:
  int32_t _internal_bagindex() const;
  void _internal_set_bagindex(int32_t value);
  public:

  // int32 Tx = 3;
  void clear_tx();
  int32_t tx() const;
  void set_tx(int32_t value);
  private:
  int32_t _internal_tx() const;
  void _internal_set_tx(int32_t value);
  public:

  // int32 Ty = 4;
  void clear_ty();
  int32_t ty() const;
  void set_ty(int32_t value);
  private:
  int32_t _internal_ty() const;
  void _internal_set_ty(int32_t value);
  public:

  // bool IsInBag = 5;
  void clear_isinbag();
  bool isinbag() const;
  void set_isinbag(bool value);
  private:
  bool _internal_isinbag() const;
  void _internal_set_isinbag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfManuallyUpgradeCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playeridx_;
    int32_t bagindex_;
    int32_t tx_;
    int32_t ty_;
    bool isinbag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfQuitBattle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfQuitBattle) */ {
 public:
  inline CSNtfQuitBattle() : CSNtfQuitBattle(nullptr) {}
  ~CSNtfQuitBattle() override;
  explicit PROTOBUF_CONSTEXPR CSNtfQuitBattle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfQuitBattle(const CSNtfQuitBattle& from);
  CSNtfQuitBattle(CSNtfQuitBattle&& from) noexcept
    : CSNtfQuitBattle() {
    *this = ::std::move(from);
  }

  inline CSNtfQuitBattle& operator=(const CSNtfQuitBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfQuitBattle& operator=(CSNtfQuitBattle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfQuitBattle& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfQuitBattle* internal_default_instance() {
    return reinterpret_cast<const CSNtfQuitBattle*>(
               &_CSNtfQuitBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(CSNtfQuitBattle& a, CSNtfQuitBattle& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfQuitBattle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfQuitBattle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfQuitBattle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfQuitBattle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfQuitBattle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfQuitBattle& from) {
    CSNtfQuitBattle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfQuitBattle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfQuitBattle";
  }
  protected:
  explicit CSNtfQuitBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
  };
  // int32 PlayerIndex = 1;
  void clear_playerindex();
  int32_t playerindex() const;
  void set_playerindex(int32_t value);
  private:
  int32_t _internal_playerindex() const;
  void _internal_set_playerindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfQuitBattle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playerindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfRoundResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfRoundResult) */ {
 public:
  inline CSNtfRoundResult() : CSNtfRoundResult(nullptr) {}
  ~CSNtfRoundResult() override;
  explicit PROTOBUF_CONSTEXPR CSNtfRoundResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfRoundResult(const CSNtfRoundResult& from);
  CSNtfRoundResult(CSNtfRoundResult&& from) noexcept
    : CSNtfRoundResult() {
    *this = ::std::move(from);
  }

  inline CSNtfRoundResult& operator=(const CSNtfRoundResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfRoundResult& operator=(CSNtfRoundResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfRoundResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfRoundResult* internal_default_instance() {
    return reinterpret_cast<const CSNtfRoundResult*>(
               &_CSNtfRoundResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(CSNtfRoundResult& a, CSNtfRoundResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfRoundResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfRoundResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfRoundResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfRoundResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfRoundResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfRoundResult& from) {
    CSNtfRoundResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfRoundResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfRoundResult";
  }
  protected:
  explicit CSNtfRoundResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kLeftFriendCountFieldNumber = 2,
    kDamageFieldNumber = 3,
  };
  // .msg.WINTYPE Result = 1;
  void clear_result();
  ::msg::WINTYPE result() const;
  void set_result(::msg::WINTYPE value);
  private:
  ::msg::WINTYPE _internal_result() const;
  void _internal_set_result(::msg::WINTYPE value);
  public:

  // int32 LeftFriendCount = 2;
  void clear_leftfriendcount();
  int32_t leftfriendcount() const;
  void set_leftfriendcount(int32_t value);
  private:
  int32_t _internal_leftfriendcount() const;
  void _internal_set_leftfriendcount(int32_t value);
  public:

  // int32 Damage = 3;
  void clear_damage();
  int32_t damage() const;
  void set_damage(int32_t value);
  private:
  int32_t _internal_damage() const;
  void _internal_set_damage(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfRoundResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int result_;
    int32_t leftfriendcount_;
    int32_t damage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfSuspendGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfSuspendGame) */ {
 public:
  inline CSNtfSuspendGame() : CSNtfSuspendGame(nullptr) {}
  ~CSNtfSuspendGame() override;
  explicit PROTOBUF_CONSTEXPR CSNtfSuspendGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfSuspendGame(const CSNtfSuspendGame& from);
  CSNtfSuspendGame(CSNtfSuspendGame&& from) noexcept
    : CSNtfSuspendGame() {
    *this = ::std::move(from);
  }

  inline CSNtfSuspendGame& operator=(const CSNtfSuspendGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfSuspendGame& operator=(CSNtfSuspendGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfSuspendGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfSuspendGame* internal_default_instance() {
    return reinterpret_cast<const CSNtfSuspendGame*>(
               &_CSNtfSuspendGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(CSNtfSuspendGame& a, CSNtfSuspendGame& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfSuspendGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfSuspendGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfSuspendGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfSuspendGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfSuspendGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfSuspendGame& from) {
    CSNtfSuspendGame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfSuspendGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfSuspendGame";
  }
  protected:
  explicit CSNtfSuspendGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 2,
    kSusPendFieldNumber = 1,
    kResumeTimeFieldNumber = 3,
  };
  // string pid = 2;
  void clear_pid();
  const std::string& pid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pid();
  PROTOBUF_NODISCARD std::string* release_pid();
  void set_allocated_pid(std::string* pid);
  private:
  const std::string& _internal_pid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pid(const std::string& value);
  std::string* _internal_mutable_pid();
  public:

  // bool susPend = 1;
  void clear_suspend();
  bool suspend() const;
  void set_suspend(bool value);
  private:
  bool _internal_suspend() const;
  void _internal_set_suspend(bool value);
  public:

  // int32 resumeTime = 3;
  void clear_resumetime();
  int32_t resumetime() const;
  void set_resumetime(int32_t value);
  private:
  int32_t _internal_resumetime() const;
  void _internal_set_resumetime(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfSuspendGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pid_;
    bool suspend_;
    int32_t resumetime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfPassThrough final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfPassThrough) */ {
 public:
  inline CSNtfPassThrough() : CSNtfPassThrough(nullptr) {}
  ~CSNtfPassThrough() override;
  explicit PROTOBUF_CONSTEXPR CSNtfPassThrough(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfPassThrough(const CSNtfPassThrough& from);
  CSNtfPassThrough(CSNtfPassThrough&& from) noexcept
    : CSNtfPassThrough() {
    *this = ::std::move(from);
  }

  inline CSNtfPassThrough& operator=(const CSNtfPassThrough& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfPassThrough& operator=(CSNtfPassThrough&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfPassThrough& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfPassThrough* internal_default_instance() {
    return reinterpret_cast<const CSNtfPassThrough*>(
               &_CSNtfPassThrough_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(CSNtfPassThrough& a, CSNtfPassThrough& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfPassThrough* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfPassThrough* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfPassThrough* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfPassThrough>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfPassThrough& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfPassThrough& from) {
    CSNtfPassThrough::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfPassThrough* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfPassThrough";
  }
  protected:
  explicit CSNtfPassThrough(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfPassThrough)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfUpdateBattleResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfUpdateBattleResult) */ {
 public:
  inline CSNtfUpdateBattleResult() : CSNtfUpdateBattleResult(nullptr) {}
  ~CSNtfUpdateBattleResult() override;
  explicit PROTOBUF_CONSTEXPR CSNtfUpdateBattleResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfUpdateBattleResult(const CSNtfUpdateBattleResult& from);
  CSNtfUpdateBattleResult(CSNtfUpdateBattleResult&& from) noexcept
    : CSNtfUpdateBattleResult() {
    *this = ::std::move(from);
  }

  inline CSNtfUpdateBattleResult& operator=(const CSNtfUpdateBattleResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfUpdateBattleResult& operator=(CSNtfUpdateBattleResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfUpdateBattleResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfUpdateBattleResult* internal_default_instance() {
    return reinterpret_cast<const CSNtfUpdateBattleResult*>(
               &_CSNtfUpdateBattleResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(CSNtfUpdateBattleResult& a, CSNtfUpdateBattleResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfUpdateBattleResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfUpdateBattleResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfUpdateBattleResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfUpdateBattleResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfUpdateBattleResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfUpdateBattleResult& from) {
    CSNtfUpdateBattleResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfUpdateBattleResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfUpdateBattleResult";
  }
  protected:
  explicit CSNtfUpdateBattleResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCampFieldNumber = 1,
  };
  // repeated .msg.CSDTCampData Camp = 1;
  int camp_size() const;
  private:
  int _internal_camp_size() const;
  public:
  void clear_camp();
  ::msg::CSDTCampData* mutable_camp(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTCampData >*
      mutable_camp();
  private:
  const ::msg::CSDTCampData& _internal_camp(int index) const;
  ::msg::CSDTCampData* _internal_add_camp();
  public:
  const ::msg::CSDTCampData& camp(int index) const;
  ::msg::CSDTCampData* add_camp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTCampData >&
      camp() const;

  // @@protoc_insertion_point(class_scope:msg.CSNtfUpdateBattleResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTCampData > camp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfAA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfAA) */ {
 public:
  inline CSNtfAA() : CSNtfAA(nullptr) {}
  ~CSNtfAA() override;
  explicit PROTOBUF_CONSTEXPR CSNtfAA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfAA(const CSNtfAA& from);
  CSNtfAA(CSNtfAA&& from) noexcept
    : CSNtfAA() {
    *this = ::std::move(from);
  }

  inline CSNtfAA& operator=(const CSNtfAA& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfAA& operator=(CSNtfAA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfAA& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfAA* internal_default_instance() {
    return reinterpret_cast<const CSNtfAA*>(
               &_CSNtfAA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(CSNtfAA& a, CSNtfAA& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfAA* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfAA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfAA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfAA>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfAA& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfAA& from) {
    CSNtfAA::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfAA* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfAA";
  }
  protected:
  explicit CSNtfAA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalOnlineDurationFieldNumber = 2,
    kTotalOfflineDurationFieldNumber = 3,
    kStateFieldNumber = 1,
  };
  // int64 TotalOnlineDuration = 2;
  void clear_totalonlineduration();
  int64_t totalonlineduration() const;
  void set_totalonlineduration(int64_t value);
  private:
  int64_t _internal_totalonlineduration() const;
  void _internal_set_totalonlineduration(int64_t value);
  public:

  // int64 TotalOfflineDuration = 3;
  void clear_totalofflineduration();
  int64_t totalofflineduration() const;
  void set_totalofflineduration(int64_t value);
  private:
  int64_t _internal_totalofflineduration() const;
  void _internal_set_totalofflineduration(int64_t value);
  public:

  // .msg.AddictionState State = 1;
  void clear_state();
  ::msg::AddictionState state() const;
  void set_state(::msg::AddictionState value);
  private:
  ::msg::AddictionState _internal_state() const;
  void _internal_set_state(::msg::AddictionState value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfAA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t totalonlineduration_;
    int64_t totalofflineduration_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class Division final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.Division) */ {
 public:
  inline Division() : Division(nullptr) {}
  ~Division() override;
  explicit PROTOBUF_CONSTEXPR Division(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Division(const Division& from);
  Division(Division&& from) noexcept
    : Division() {
    *this = ::std::move(from);
  }

  inline Division& operator=(const Division& from) {
    CopyFrom(from);
    return *this;
  }
  inline Division& operator=(Division&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Division& default_instance() {
    return *internal_default_instance();
  }
  static inline const Division* internal_default_instance() {
    return reinterpret_cast<const Division*>(
               &_Division_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(Division& a, Division& b) {
    a.Swap(&b);
  }
  inline void Swap(Division* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Division* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Division* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Division>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Division& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Division& from) {
    Division::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Division* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.Division";
  }
  protected:
  explicit Division(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetIDFieldNumber = 1,
    kEquipIDFieldNumber = 2,
    kDestPlayerIndexFieldNumber = 3,
    kTXFieldNumber = 4,
    kTYFieldNumber = 5,
  };
  // int32 NetID = 1;
  void clear_netid();
  int32_t netid() const;
  void set_netid(int32_t value);
  private:
  int32_t _internal_netid() const;
  void _internal_set_netid(int32_t value);
  public:

  // int32 EquipID = 2;
  void clear_equipid();
  int32_t equipid() const;
  void set_equipid(int32_t value);
  private:
  int32_t _internal_equipid() const;
  void _internal_set_equipid(int32_t value);
  public:

  // int32 DestPlayerIndex = 3;
  void clear_destplayerindex();
  int32_t destplayerindex() const;
  void set_destplayerindex(int32_t value);
  private:
  int32_t _internal_destplayerindex() const;
  void _internal_set_destplayerindex(int32_t value);
  public:

  // int32 TX = 4;
  void clear_tx();
  int32_t tx() const;
  void set_tx(int32_t value);
  private:
  int32_t _internal_tx() const;
  void _internal_set_tx(int32_t value);
  public:

  // int32 TY = 5;
  void clear_ty();
  int32_t ty() const;
  void set_ty(int32_t value);
  private:
  int32_t _internal_ty() const;
  void _internal_set_ty(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.Division)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t netid_;
    int32_t equipid_;
    int32_t destplayerindex_;
    int32_t tx_;
    int32_t ty_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfEquipDivision final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfEquipDivision) */ {
 public:
  inline CSNtfEquipDivision() : CSNtfEquipDivision(nullptr) {}
  ~CSNtfEquipDivision() override;
  explicit PROTOBUF_CONSTEXPR CSNtfEquipDivision(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfEquipDivision(const CSNtfEquipDivision& from);
  CSNtfEquipDivision(CSNtfEquipDivision&& from) noexcept
    : CSNtfEquipDivision() {
    *this = ::std::move(from);
  }

  inline CSNtfEquipDivision& operator=(const CSNtfEquipDivision& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfEquipDivision& operator=(CSNtfEquipDivision&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfEquipDivision& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfEquipDivision* internal_default_instance() {
    return reinterpret_cast<const CSNtfEquipDivision*>(
               &_CSNtfEquipDivision_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(CSNtfEquipDivision& a, CSNtfEquipDivision& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfEquipDivision* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfEquipDivision* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfEquipDivision* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfEquipDivision>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfEquipDivision& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfEquipDivision& from) {
    CSNtfEquipDivision::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfEquipDivision* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfEquipDivision";
  }
  protected:
  explicit CSNtfEquipDivision(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDivisionsFieldNumber = 2,
    kSrcPlayerIndexFieldNumber = 1,
  };
  // repeated .msg.Division Divisions = 2;
  int divisions_size() const;
  private:
  int _internal_divisions_size() const;
  public:
  void clear_divisions();
  ::msg::Division* mutable_divisions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Division >*
      mutable_divisions();
  private:
  const ::msg::Division& _internal_divisions(int index) const;
  ::msg::Division* _internal_add_divisions();
  public:
  const ::msg::Division& divisions(int index) const;
  ::msg::Division* add_divisions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Division >&
      divisions() const;

  // int32 SrcPlayerIndex = 1;
  void clear_srcplayerindex();
  int32_t srcplayerindex() const;
  void set_srcplayerindex(int32_t value);
  private:
  int32_t _internal_srcplayerindex() const;
  void _internal_set_srcplayerindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfEquipDivision)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Division > divisions_;
    int32_t srcplayerindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfVisitPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfVisitPlayer) */ {
 public:
  inline CSNtfVisitPlayer() : CSNtfVisitPlayer(nullptr) {}
  ~CSNtfVisitPlayer() override;
  explicit PROTOBUF_CONSTEXPR CSNtfVisitPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfVisitPlayer(const CSNtfVisitPlayer& from);
  CSNtfVisitPlayer(CSNtfVisitPlayer&& from) noexcept
    : CSNtfVisitPlayer() {
    *this = ::std::move(from);
  }

  inline CSNtfVisitPlayer& operator=(const CSNtfVisitPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfVisitPlayer& operator=(CSNtfVisitPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfVisitPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfVisitPlayer* internal_default_instance() {
    return reinterpret_cast<const CSNtfVisitPlayer*>(
               &_CSNtfVisitPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(CSNtfVisitPlayer& a, CSNtfVisitPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfVisitPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfVisitPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfVisitPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfVisitPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfVisitPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfVisitPlayer& from) {
    CSNtfVisitPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfVisitPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfVisitPlayer";
  }
  protected:
  explicit CSNtfVisitPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcPlayerIndexFieldNumber = 1,
    kDestPlayerIndexFieldNumber = 2,
  };
  // int32 SrcPlayerIndex = 1;
  void clear_srcplayerindex();
  int32_t srcplayerindex() const;
  void set_srcplayerindex(int32_t value);
  private:
  int32_t _internal_srcplayerindex() const;
  void _internal_set_srcplayerindex(int32_t value);
  public:

  // int32 DestPlayerIndex = 2;
  void clear_destplayerindex();
  int32_t destplayerindex() const;
  void set_destplayerindex(int32_t value);
  private:
  int32_t _internal_destplayerindex() const;
  void _internal_set_destplayerindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfVisitPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t srcplayerindex_;
    int32_t destplayerindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfLeaveGameEarly final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfLeaveGameEarly) */ {
 public:
  inline CSNtfLeaveGameEarly() : CSNtfLeaveGameEarly(nullptr) {}
  ~CSNtfLeaveGameEarly() override;
  explicit PROTOBUF_CONSTEXPR CSNtfLeaveGameEarly(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfLeaveGameEarly(const CSNtfLeaveGameEarly& from);
  CSNtfLeaveGameEarly(CSNtfLeaveGameEarly&& from) noexcept
    : CSNtfLeaveGameEarly() {
    *this = ::std::move(from);
  }

  inline CSNtfLeaveGameEarly& operator=(const CSNtfLeaveGameEarly& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfLeaveGameEarly& operator=(CSNtfLeaveGameEarly&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfLeaveGameEarly& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfLeaveGameEarly* internal_default_instance() {
    return reinterpret_cast<const CSNtfLeaveGameEarly*>(
               &_CSNtfLeaveGameEarly_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(CSNtfLeaveGameEarly& a, CSNtfLeaveGameEarly& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfLeaveGameEarly* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfLeaveGameEarly* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfLeaveGameEarly* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfLeaveGameEarly>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfLeaveGameEarly& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfLeaveGameEarly& from) {
    CSNtfLeaveGameEarly::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfLeaveGameEarly* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfLeaveGameEarly";
  }
  protected:
  explicit CSNtfLeaveGameEarly(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
  };
  // uint32 PlayerIndex = 1;
  void clear_playerindex();
  uint32_t playerindex() const;
  void set_playerindex(uint32_t value);
  private:
  uint32_t _internal_playerindex() const;
  void _internal_set_playerindex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfLeaveGameEarly)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t playerindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class CSNtfPvpAffixTrigger final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.CSNtfPvpAffixTrigger) */ {
 public:
  inline CSNtfPvpAffixTrigger() : CSNtfPvpAffixTrigger(nullptr) {}
  ~CSNtfPvpAffixTrigger() override;
  explicit PROTOBUF_CONSTEXPR CSNtfPvpAffixTrigger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSNtfPvpAffixTrigger(const CSNtfPvpAffixTrigger& from);
  CSNtfPvpAffixTrigger(CSNtfPvpAffixTrigger&& from) noexcept
    : CSNtfPvpAffixTrigger() {
    *this = ::std::move(from);
  }

  inline CSNtfPvpAffixTrigger& operator=(const CSNtfPvpAffixTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSNtfPvpAffixTrigger& operator=(CSNtfPvpAffixTrigger&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSNtfPvpAffixTrigger& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSNtfPvpAffixTrigger* internal_default_instance() {
    return reinterpret_cast<const CSNtfPvpAffixTrigger*>(
               &_CSNtfPvpAffixTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(CSNtfPvpAffixTrigger& a, CSNtfPvpAffixTrigger& b) {
    a.Swap(&b);
  }
  inline void Swap(CSNtfPvpAffixTrigger* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSNtfPvpAffixTrigger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSNtfPvpAffixTrigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSNtfPvpAffixTrigger>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSNtfPvpAffixTrigger& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSNtfPvpAffixTrigger& from) {
    CSNtfPvpAffixTrigger::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSNtfPvpAffixTrigger* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.CSNtfPvpAffixTrigger";
  }
  protected:
  explicit CSNtfPvpAffixTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAffixFieldNumber = 3,
    kPlayerIndexFieldNumber = 1,
  };
  // repeated .msg.AffixTriggerInfo Affix = 3;
  int affix_size() const;
  private:
  int _internal_affix_size() const;
  public:
  void clear_affix();
  ::msg::AffixTriggerInfo* mutable_affix(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::AffixTriggerInfo >*
      mutable_affix();
  private:
  const ::msg::AffixTriggerInfo& _internal_affix(int index) const;
  ::msg::AffixTriggerInfo* _internal_add_affix();
  public:
  const ::msg::AffixTriggerInfo& affix(int index) const;
  ::msg::AffixTriggerInfo* add_affix();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::AffixTriggerInfo >&
      affix() const;

  // uint32 PlayerIndex = 1;
  void clear_playerindex();
  uint32_t playerindex() const;
  void set_playerindex(uint32_t value);
  private:
  uint32_t _internal_playerindex() const;
  void _internal_set_playerindex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:msg.CSNtfPvpAffixTrigger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::AffixTriggerInfo > affix_;
    uint32_t playerindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// -------------------------------------------------------------------

class AffixTriggerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.AffixTriggerInfo) */ {
 public:
  inline AffixTriggerInfo() : AffixTriggerInfo(nullptr) {}
  ~AffixTriggerInfo() override;
  explicit PROTOBUF_CONSTEXPR AffixTriggerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AffixTriggerInfo(const AffixTriggerInfo& from);
  AffixTriggerInfo(AffixTriggerInfo&& from) noexcept
    : AffixTriggerInfo() {
    *this = ::std::move(from);
  }

  inline AffixTriggerInfo& operator=(const AffixTriggerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AffixTriggerInfo& operator=(AffixTriggerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AffixTriggerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AffixTriggerInfo* internal_default_instance() {
    return reinterpret_cast<const AffixTriggerInfo*>(
               &_AffixTriggerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(AffixTriggerInfo& a, AffixTriggerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AffixTriggerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AffixTriggerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AffixTriggerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AffixTriggerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AffixTriggerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AffixTriggerInfo& from) {
    AffixTriggerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AffixTriggerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.AffixTriggerInfo";
  }
  protected:
  explicit AffixTriggerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAffixIdFieldNumber = 1,
    kValueFieldNumber = 2,
    kChessHandleFieldNumber = 3,
    kChessIdFieldNumber = 4,
    kFrameIdxFieldNumber = 5,
    kIsOnlyTriggerFieldNumber = 6,
  };
  // uint32 AffixId = 1;
  void clear_affixid();
  uint32_t affixid() const;
  void set_affixid(uint32_t value);
  private:
  uint32_t _internal_affixid() const;
  void _internal_set_affixid(uint32_t value);
  public:

  // float Value = 2;
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // uint32 ChessHandle = 3;
  void clear_chesshandle();
  uint32_t chesshandle() const;
  void set_chesshandle(uint32_t value);
  private:
  uint32_t _internal_chesshandle() const;
  void _internal_set_chesshandle(uint32_t value);
  public:

  // uint32 ChessId = 4;
  void clear_chessid();
  uint32_t chessid() const;
  void set_chessid(uint32_t value);
  private:
  uint32_t _internal_chessid() const;
  void _internal_set_chessid(uint32_t value);
  public:

  // uint32 FrameIdx = 5;
  void clear_frameidx();
  uint32_t frameidx() const;
  void set_frameidx(uint32_t value);
  private:
  uint32_t _internal_frameidx() const;
  void _internal_set_frameidx(uint32_t value);
  public:

  // bool IsOnlyTrigger = 6;
  void clear_isonlytrigger();
  bool isonlytrigger() const;
  void set_isonlytrigger(bool value);
  private:
  bool _internal_isonlytrigger() const;
  void _internal_set_isonlytrigger(bool value);
  public:

  // @@protoc_insertion_point(class_scope:msg.AffixTriggerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t affixid_;
    float value_;
    uint32_t chesshandle_;
    uint32_t chessid_;
    uint32_t frameidx_;
    bool isonlytrigger_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_battle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PositionInt2D

// int32 X = 1;
inline void PositionInt2D::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t PositionInt2D::_internal_x() const {
  return _impl_.x_;
}
inline int32_t PositionInt2D::x() const {
  // @@protoc_insertion_point(field_get:msg.PositionInt2D.X)
  return _internal_x();
}
inline void PositionInt2D::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void PositionInt2D::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:msg.PositionInt2D.X)
}

// int32 Y = 2;
inline void PositionInt2D::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t PositionInt2D::_internal_y() const {
  return _impl_.y_;
}
inline int32_t PositionInt2D::y() const {
  // @@protoc_insertion_point(field_get:msg.PositionInt2D.Y)
  return _internal_y();
}
inline void PositionInt2D::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void PositionInt2D::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:msg.PositionInt2D.Y)
}

// -------------------------------------------------------------------

// PositionFloat2D

// float X = 1;
inline void PositionFloat2D::clear_x() {
  _impl_.x_ = 0;
}
inline float PositionFloat2D::_internal_x() const {
  return _impl_.x_;
}
inline float PositionFloat2D::x() const {
  // @@protoc_insertion_point(field_get:msg.PositionFloat2D.X)
  return _internal_x();
}
inline void PositionFloat2D::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void PositionFloat2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:msg.PositionFloat2D.X)
}

// float Y = 2;
inline void PositionFloat2D::clear_y() {
  _impl_.y_ = 0;
}
inline float PositionFloat2D::_internal_y() const {
  return _impl_.y_;
}
inline float PositionFloat2D::y() const {
  // @@protoc_insertion_point(field_get:msg.PositionFloat2D.Y)
  return _internal_y();
}
inline void PositionFloat2D::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void PositionFloat2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:msg.PositionFloat2D.Y)
}

// -------------------------------------------------------------------

// PlayerBasicInfo

// int32 Index = 1;
inline void PlayerBasicInfo::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t PlayerBasicInfo::_internal_index() const {
  return _impl_.index_;
}
inline int32_t PlayerBasicInfo::index() const {
  // @@protoc_insertion_point(field_get:msg.PlayerBasicInfo.Index)
  return _internal_index();
}
inline void PlayerBasicInfo::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void PlayerBasicInfo::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:msg.PlayerBasicInfo.Index)
}

// .msg.PvpPlayerData PvpPlayer = 2;
inline bool PlayerBasicInfo::_internal_has_pvpplayer() const {
  return this != internal_default_instance() && _impl_.pvpplayer_ != nullptr;
}
inline bool PlayerBasicInfo::has_pvpplayer() const {
  return _internal_has_pvpplayer();
}
inline const ::msg::PvpPlayerData& PlayerBasicInfo::_internal_pvpplayer() const {
  const ::msg::PvpPlayerData* p = _impl_.pvpplayer_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PvpPlayerData&>(
      ::msg::_PvpPlayerData_default_instance_);
}
inline const ::msg::PvpPlayerData& PlayerBasicInfo::pvpplayer() const {
  // @@protoc_insertion_point(field_get:msg.PlayerBasicInfo.PvpPlayer)
  return _internal_pvpplayer();
}
inline void PlayerBasicInfo::unsafe_arena_set_allocated_pvpplayer(
    ::msg::PvpPlayerData* pvpplayer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpplayer_);
  }
  _impl_.pvpplayer_ = pvpplayer;
  if (pvpplayer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.PlayerBasicInfo.PvpPlayer)
}
inline ::msg::PvpPlayerData* PlayerBasicInfo::release_pvpplayer() {
  
  ::msg::PvpPlayerData* temp = _impl_.pvpplayer_;
  _impl_.pvpplayer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PvpPlayerData* PlayerBasicInfo::unsafe_arena_release_pvpplayer() {
  // @@protoc_insertion_point(field_release:msg.PlayerBasicInfo.PvpPlayer)
  
  ::msg::PvpPlayerData* temp = _impl_.pvpplayer_;
  _impl_.pvpplayer_ = nullptr;
  return temp;
}
inline ::msg::PvpPlayerData* PlayerBasicInfo::_internal_mutable_pvpplayer() {
  
  if (_impl_.pvpplayer_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PvpPlayerData>(GetArenaForAllocation());
    _impl_.pvpplayer_ = p;
  }
  return _impl_.pvpplayer_;
}
inline ::msg::PvpPlayerData* PlayerBasicInfo::mutable_pvpplayer() {
  ::msg::PvpPlayerData* _msg = _internal_mutable_pvpplayer();
  // @@protoc_insertion_point(field_mutable:msg.PlayerBasicInfo.PvpPlayer)
  return _msg;
}
inline void PlayerBasicInfo::set_allocated_pvpplayer(::msg::PvpPlayerData* pvpplayer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pvpplayer_);
  }
  if (pvpplayer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pvpplayer));
    if (message_arena != submessage_arena) {
      pvpplayer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pvpplayer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pvpplayer_ = pvpplayer;
  // @@protoc_insertion_point(field_set_allocated:msg.PlayerBasicInfo.PvpPlayer)
}

// -------------------------------------------------------------------

// EquipmentInfo

// int32 NetId = 1;
inline void EquipmentInfo::clear_netid() {
  _impl_.netid_ = 0;
}
inline int32_t EquipmentInfo::_internal_netid() const {
  return _impl_.netid_;
}
inline int32_t EquipmentInfo::netid() const {
  // @@protoc_insertion_point(field_get:msg.EquipmentInfo.NetId)
  return _internal_netid();
}
inline void EquipmentInfo::_internal_set_netid(int32_t value) {
  
  _impl_.netid_ = value;
}
inline void EquipmentInfo::set_netid(int32_t value) {
  _internal_set_netid(value);
  // @@protoc_insertion_point(field_set:msg.EquipmentInfo.NetId)
}

// int32 EquipId = 2;
inline void EquipmentInfo::clear_equipid() {
  _impl_.equipid_ = 0;
}
inline int32_t EquipmentInfo::_internal_equipid() const {
  return _impl_.equipid_;
}
inline int32_t EquipmentInfo::equipid() const {
  // @@protoc_insertion_point(field_get:msg.EquipmentInfo.EquipId)
  return _internal_equipid();
}
inline void EquipmentInfo::_internal_set_equipid(int32_t value) {
  
  _impl_.equipid_ = value;
}
inline void EquipmentInfo::set_equipid(int32_t value) {
  _internal_set_equipid(value);
  // @@protoc_insertion_point(field_set:msg.EquipmentInfo.EquipId)
}

// int32 EquipBagIdx = 3;
inline void EquipmentInfo::clear_equipbagidx() {
  _impl_.equipbagidx_ = 0;
}
inline int32_t EquipmentInfo::_internal_equipbagidx() const {
  return _impl_.equipbagidx_;
}
inline int32_t EquipmentInfo::equipbagidx() const {
  // @@protoc_insertion_point(field_get:msg.EquipmentInfo.EquipBagIdx)
  return _internal_equipbagidx();
}
inline void EquipmentInfo::_internal_set_equipbagidx(int32_t value) {
  
  _impl_.equipbagidx_ = value;
}
inline void EquipmentInfo::set_equipbagidx(int32_t value) {
  _internal_set_equipbagidx(value);
  // @@protoc_insertion_point(field_set:msg.EquipmentInfo.EquipBagIdx)
}

// int32 PlayerIdx = 4;
inline void EquipmentInfo::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t EquipmentInfo::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t EquipmentInfo::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.EquipmentInfo.PlayerIdx)
  return _internal_playeridx();
}
inline void EquipmentInfo::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void EquipmentInfo::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.EquipmentInfo.PlayerIdx)
}

// .msg.PositionInt2D TilePos = 5;
inline bool EquipmentInfo::_internal_has_tilepos() const {
  return this != internal_default_instance() && _impl_.tilepos_ != nullptr;
}
inline bool EquipmentInfo::has_tilepos() const {
  return _internal_has_tilepos();
}
inline void EquipmentInfo::clear_tilepos() {
  if (GetArenaForAllocation() == nullptr && _impl_.tilepos_ != nullptr) {
    delete _impl_.tilepos_;
  }
  _impl_.tilepos_ = nullptr;
}
inline const ::msg::PositionInt2D& EquipmentInfo::_internal_tilepos() const {
  const ::msg::PositionInt2D* p = _impl_.tilepos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& EquipmentInfo::tilepos() const {
  // @@protoc_insertion_point(field_get:msg.EquipmentInfo.TilePos)
  return _internal_tilepos();
}
inline void EquipmentInfo::unsafe_arena_set_allocated_tilepos(
    ::msg::PositionInt2D* tilepos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tilepos_);
  }
  _impl_.tilepos_ = tilepos;
  if (tilepos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.EquipmentInfo.TilePos)
}
inline ::msg::PositionInt2D* EquipmentInfo::release_tilepos() {
  
  ::msg::PositionInt2D* temp = _impl_.tilepos_;
  _impl_.tilepos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* EquipmentInfo::unsafe_arena_release_tilepos() {
  // @@protoc_insertion_point(field_release:msg.EquipmentInfo.TilePos)
  
  ::msg::PositionInt2D* temp = _impl_.tilepos_;
  _impl_.tilepos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* EquipmentInfo::_internal_mutable_tilepos() {
  
  if (_impl_.tilepos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.tilepos_ = p;
  }
  return _impl_.tilepos_;
}
inline ::msg::PositionInt2D* EquipmentInfo::mutable_tilepos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_tilepos();
  // @@protoc_insertion_point(field_mutable:msg.EquipmentInfo.TilePos)
  return _msg;
}
inline void EquipmentInfo::set_allocated_tilepos(::msg::PositionInt2D* tilepos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tilepos_;
  }
  if (tilepos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tilepos);
    if (message_arena != submessage_arena) {
      tilepos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tilepos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tilepos_ = tilepos;
  // @@protoc_insertion_point(field_set_allocated:msg.EquipmentInfo.TilePos)
}

// int32 OwnerHandle = 6;
inline void EquipmentInfo::clear_ownerhandle() {
  _impl_.ownerhandle_ = 0;
}
inline int32_t EquipmentInfo::_internal_ownerhandle() const {
  return _impl_.ownerhandle_;
}
inline int32_t EquipmentInfo::ownerhandle() const {
  // @@protoc_insertion_point(field_get:msg.EquipmentInfo.OwnerHandle)
  return _internal_ownerhandle();
}
inline void EquipmentInfo::_internal_set_ownerhandle(int32_t value) {
  
  _impl_.ownerhandle_ = value;
}
inline void EquipmentInfo::set_ownerhandle(int32_t value) {
  _internal_set_ownerhandle(value);
  // @@protoc_insertion_point(field_set:msg.EquipmentInfo.OwnerHandle)
}

// -------------------------------------------------------------------

// ChessPiecesData

// int32 Id = 1;
inline void ChessPiecesData::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t ChessPiecesData::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ChessPiecesData::id() const {
  // @@protoc_insertion_point(field_get:msg.ChessPiecesData.Id)
  return _internal_id();
}
inline void ChessPiecesData::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void ChessPiecesData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.ChessPiecesData.Id)
}

// int32 extractProb = 2;
inline void ChessPiecesData::clear_extractprob() {
  _impl_.extractprob_ = 0;
}
inline int32_t ChessPiecesData::_internal_extractprob() const {
  return _impl_.extractprob_;
}
inline int32_t ChessPiecesData::extractprob() const {
  // @@protoc_insertion_point(field_get:msg.ChessPiecesData.extractProb)
  return _internal_extractprob();
}
inline void ChessPiecesData::_internal_set_extractprob(int32_t value) {
  
  _impl_.extractprob_ = value;
}
inline void ChessPiecesData::set_extractprob(int32_t value) {
  _internal_set_extractprob(value);
  // @@protoc_insertion_point(field_set:msg.ChessPiecesData.extractProb)
}

// -------------------------------------------------------------------

// ChessPiecesMapLevData

// int32 level = 1;
inline void ChessPiecesMapLevData::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t ChessPiecesMapLevData::_internal_level() const {
  return _impl_.level_;
}
inline int32_t ChessPiecesMapLevData::level() const {
  // @@protoc_insertion_point(field_get:msg.ChessPiecesMapLevData.level)
  return _internal_level();
}
inline void ChessPiecesMapLevData::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void ChessPiecesMapLevData::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:msg.ChessPiecesMapLevData.level)
}

// repeated .msg.ChessPiecesData chessPieces = 2;
inline int ChessPiecesMapLevData::_internal_chesspieces_size() const {
  return _impl_.chesspieces_.size();
}
inline int ChessPiecesMapLevData::chesspieces_size() const {
  return _internal_chesspieces_size();
}
inline void ChessPiecesMapLevData::clear_chesspieces() {
  _impl_.chesspieces_.Clear();
}
inline ::msg::ChessPiecesData* ChessPiecesMapLevData::mutable_chesspieces(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ChessPiecesMapLevData.chessPieces)
  return _impl_.chesspieces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessPiecesData >*
ChessPiecesMapLevData::mutable_chesspieces() {
  // @@protoc_insertion_point(field_mutable_list:msg.ChessPiecesMapLevData.chessPieces)
  return &_impl_.chesspieces_;
}
inline const ::msg::ChessPiecesData& ChessPiecesMapLevData::_internal_chesspieces(int index) const {
  return _impl_.chesspieces_.Get(index);
}
inline const ::msg::ChessPiecesData& ChessPiecesMapLevData::chesspieces(int index) const {
  // @@protoc_insertion_point(field_get:msg.ChessPiecesMapLevData.chessPieces)
  return _internal_chesspieces(index);
}
inline ::msg::ChessPiecesData* ChessPiecesMapLevData::_internal_add_chesspieces() {
  return _impl_.chesspieces_.Add();
}
inline ::msg::ChessPiecesData* ChessPiecesMapLevData::add_chesspieces() {
  ::msg::ChessPiecesData* _add = _internal_add_chesspieces();
  // @@protoc_insertion_point(field_add:msg.ChessPiecesMapLevData.chessPieces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessPiecesData >&
ChessPiecesMapLevData::chesspieces() const {
  // @@protoc_insertion_point(field_list:msg.ChessPiecesMapLevData.chessPieces)
  return _impl_.chesspieces_;
}

// -------------------------------------------------------------------

// ChessNumber

// int32 Id = 1;
inline void ChessNumber::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t ChessNumber::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ChessNumber::id() const {
  // @@protoc_insertion_point(field_get:msg.ChessNumber.Id)
  return _internal_id();
}
inline void ChessNumber::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void ChessNumber::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:msg.ChessNumber.Id)
}

// int32 Number = 2;
inline void ChessNumber::clear_number() {
  _impl_.number_ = 0;
}
inline int32_t ChessNumber::_internal_number() const {
  return _impl_.number_;
}
inline int32_t ChessNumber::number() const {
  // @@protoc_insertion_point(field_get:msg.ChessNumber.Number)
  return _internal_number();
}
inline void ChessNumber::_internal_set_number(int32_t value) {
  
  _impl_.number_ = value;
}
inline void ChessNumber::set_number(int32_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:msg.ChessNumber.Number)
}

// -------------------------------------------------------------------

// PlayerChessNumber

// string Id = 1;
inline void PlayerChessNumber::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& PlayerChessNumber::id() const {
  // @@protoc_insertion_point(field_get:msg.PlayerChessNumber.Id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerChessNumber::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.PlayerChessNumber.Id)
}
inline std::string* PlayerChessNumber::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:msg.PlayerChessNumber.Id)
  return _s;
}
inline const std::string& PlayerChessNumber::_internal_id() const {
  return _impl_.id_.Get();
}
inline void PlayerChessNumber::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerChessNumber::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerChessNumber::release_id() {
  // @@protoc_insertion_point(field_release:msg.PlayerChessNumber.Id)
  return _impl_.id_.Release();
}
inline void PlayerChessNumber::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.PlayerChessNumber.Id)
}

// repeated .msg.ChessNumber chess = 2;
inline int PlayerChessNumber::_internal_chess_size() const {
  return _impl_.chess_.size();
}
inline int PlayerChessNumber::chess_size() const {
  return _internal_chess_size();
}
inline void PlayerChessNumber::clear_chess() {
  _impl_.chess_.Clear();
}
inline ::msg::ChessNumber* PlayerChessNumber::mutable_chess(int index) {
  // @@protoc_insertion_point(field_mutable:msg.PlayerChessNumber.chess)
  return _impl_.chess_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessNumber >*
PlayerChessNumber::mutable_chess() {
  // @@protoc_insertion_point(field_mutable_list:msg.PlayerChessNumber.chess)
  return &_impl_.chess_;
}
inline const ::msg::ChessNumber& PlayerChessNumber::_internal_chess(int index) const {
  return _impl_.chess_.Get(index);
}
inline const ::msg::ChessNumber& PlayerChessNumber::chess(int index) const {
  // @@protoc_insertion_point(field_get:msg.PlayerChessNumber.chess)
  return _internal_chess(index);
}
inline ::msg::ChessNumber* PlayerChessNumber::_internal_add_chess() {
  return _impl_.chess_.Add();
}
inline ::msg::ChessNumber* PlayerChessNumber::add_chess() {
  ::msg::ChessNumber* _add = _internal_add_chess();
  // @@protoc_insertion_point(field_add:msg.PlayerChessNumber.chess)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessNumber >&
PlayerChessNumber::chess() const {
  // @@protoc_insertion_point(field_list:msg.PlayerChessNumber.chess)
  return _impl_.chess_;
}

// -------------------------------------------------------------------

// ReflushChessData

// bool isAuto = 1;
inline void ReflushChessData::clear_isauto() {
  _impl_.isauto_ = false;
}
inline bool ReflushChessData::_internal_isauto() const {
  return _impl_.isauto_;
}
inline bool ReflushChessData::isauto() const {
  // @@protoc_insertion_point(field_get:msg.ReflushChessData.isAuto)
  return _internal_isauto();
}
inline void ReflushChessData::_internal_set_isauto(bool value) {
  
  _impl_.isauto_ = value;
}
inline void ReflushChessData::set_isauto(bool value) {
  _internal_set_isauto(value);
  // @@protoc_insertion_point(field_set:msg.ReflushChessData.isAuto)
}

// repeated int32 chessIds = 2;
inline int ReflushChessData::_internal_chessids_size() const {
  return _impl_.chessids_.size();
}
inline int ReflushChessData::chessids_size() const {
  return _internal_chessids_size();
}
inline void ReflushChessData::clear_chessids() {
  _impl_.chessids_.Clear();
}
inline int32_t ReflushChessData::_internal_chessids(int index) const {
  return _impl_.chessids_.Get(index);
}
inline int32_t ReflushChessData::chessids(int index) const {
  // @@protoc_insertion_point(field_get:msg.ReflushChessData.chessIds)
  return _internal_chessids(index);
}
inline void ReflushChessData::set_chessids(int index, int32_t value) {
  _impl_.chessids_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.ReflushChessData.chessIds)
}
inline void ReflushChessData::_internal_add_chessids(int32_t value) {
  _impl_.chessids_.Add(value);
}
inline void ReflushChessData::add_chessids(int32_t value) {
  _internal_add_chessids(value);
  // @@protoc_insertion_point(field_add:msg.ReflushChessData.chessIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ReflushChessData::_internal_chessids() const {
  return _impl_.chessids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ReflushChessData::chessids() const {
  // @@protoc_insertion_point(field_list:msg.ReflushChessData.chessIds)
  return _internal_chessids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ReflushChessData::_internal_mutable_chessids() {
  return &_impl_.chessids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ReflushChessData::mutable_chessids() {
  // @@protoc_insertion_point(field_mutable_list:msg.ReflushChessData.chessIds)
  return _internal_mutable_chessids();
}

// repeated int32 sellChessIdx = 3;
inline int ReflushChessData::_internal_sellchessidx_size() const {
  return _impl_.sellchessidx_.size();
}
inline int ReflushChessData::sellchessidx_size() const {
  return _internal_sellchessidx_size();
}
inline void ReflushChessData::clear_sellchessidx() {
  _impl_.sellchessidx_.Clear();
}
inline int32_t ReflushChessData::_internal_sellchessidx(int index) const {
  return _impl_.sellchessidx_.Get(index);
}
inline int32_t ReflushChessData::sellchessidx(int index) const {
  // @@protoc_insertion_point(field_get:msg.ReflushChessData.sellChessIdx)
  return _internal_sellchessidx(index);
}
inline void ReflushChessData::set_sellchessidx(int index, int32_t value) {
  _impl_.sellchessidx_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.ReflushChessData.sellChessIdx)
}
inline void ReflushChessData::_internal_add_sellchessidx(int32_t value) {
  _impl_.sellchessidx_.Add(value);
}
inline void ReflushChessData::add_sellchessidx(int32_t value) {
  _internal_add_sellchessidx(value);
  // @@protoc_insertion_point(field_add:msg.ReflushChessData.sellChessIdx)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ReflushChessData::_internal_sellchessidx() const {
  return _impl_.sellchessidx_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ReflushChessData::sellchessidx() const {
  // @@protoc_insertion_point(field_list:msg.ReflushChessData.sellChessIdx)
  return _internal_sellchessidx();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ReflushChessData::_internal_mutable_sellchessidx() {
  return &_impl_.sellchessidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ReflushChessData::mutable_sellchessidx() {
  // @@protoc_insertion_point(field_mutable_list:msg.ReflushChessData.sellChessIdx)
  return _internal_mutable_sellchessidx();
}

// -------------------------------------------------------------------

// BattleRoundData

// int32 RoundNum = 1;
inline void BattleRoundData::clear_roundnum() {
  _impl_.roundnum_ = 0;
}
inline int32_t BattleRoundData::_internal_roundnum() const {
  return _impl_.roundnum_;
}
inline int32_t BattleRoundData::roundnum() const {
  // @@protoc_insertion_point(field_get:msg.BattleRoundData.RoundNum)
  return _internal_roundnum();
}
inline void BattleRoundData::_internal_set_roundnum(int32_t value) {
  
  _impl_.roundnum_ = value;
}
inline void BattleRoundData::set_roundnum(int32_t value) {
  _internal_set_roundnum(value);
  // @@protoc_insertion_point(field_set:msg.BattleRoundData.RoundNum)
}

// int32 Damage = 2;
inline void BattleRoundData::clear_damage() {
  _impl_.damage_ = 0;
}
inline int32_t BattleRoundData::_internal_damage() const {
  return _impl_.damage_;
}
inline int32_t BattleRoundData::damage() const {
  // @@protoc_insertion_point(field_get:msg.BattleRoundData.Damage)
  return _internal_damage();
}
inline void BattleRoundData::_internal_set_damage(int32_t value) {
  
  _impl_.damage_ = value;
}
inline void BattleRoundData::set_damage(int32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:msg.BattleRoundData.Damage)
}

// int32 MoneyGained = 3;
inline void BattleRoundData::clear_moneygained() {
  _impl_.moneygained_ = 0;
}
inline int32_t BattleRoundData::_internal_moneygained() const {
  return _impl_.moneygained_;
}
inline int32_t BattleRoundData::moneygained() const {
  // @@protoc_insertion_point(field_get:msg.BattleRoundData.MoneyGained)
  return _internal_moneygained();
}
inline void BattleRoundData::_internal_set_moneygained(int32_t value) {
  
  _impl_.moneygained_ = value;
}
inline void BattleRoundData::set_moneygained(int32_t value) {
  _internal_set_moneygained(value);
  // @@protoc_insertion_point(field_set:msg.BattleRoundData.MoneyGained)
}

// int32 MoneyCostByBuyExp = 4;
inline void BattleRoundData::clear_moneycostbybuyexp() {
  _impl_.moneycostbybuyexp_ = 0;
}
inline int32_t BattleRoundData::_internal_moneycostbybuyexp() const {
  return _impl_.moneycostbybuyexp_;
}
inline int32_t BattleRoundData::moneycostbybuyexp() const {
  // @@protoc_insertion_point(field_get:msg.BattleRoundData.MoneyCostByBuyExp)
  return _internal_moneycostbybuyexp();
}
inline void BattleRoundData::_internal_set_moneycostbybuyexp(int32_t value) {
  
  _impl_.moneycostbybuyexp_ = value;
}
inline void BattleRoundData::set_moneycostbybuyexp(int32_t value) {
  _internal_set_moneycostbybuyexp(value);
  // @@protoc_insertion_point(field_set:msg.BattleRoundData.MoneyCostByBuyExp)
}

// int32 MoneyCostByRefreshShop = 5;
inline void BattleRoundData::clear_moneycostbyrefreshshop() {
  _impl_.moneycostbyrefreshshop_ = 0;
}
inline int32_t BattleRoundData::_internal_moneycostbyrefreshshop() const {
  return _impl_.moneycostbyrefreshshop_;
}
inline int32_t BattleRoundData::moneycostbyrefreshshop() const {
  // @@protoc_insertion_point(field_get:msg.BattleRoundData.MoneyCostByRefreshShop)
  return _internal_moneycostbyrefreshshop();
}
inline void BattleRoundData::_internal_set_moneycostbyrefreshshop(int32_t value) {
  
  _impl_.moneycostbyrefreshshop_ = value;
}
inline void BattleRoundData::set_moneycostbyrefreshshop(int32_t value) {
  _internal_set_moneycostbyrefreshshop(value);
  // @@protoc_insertion_point(field_set:msg.BattleRoundData.MoneyCostByRefreshShop)
}

// int32 MoneyCostByBuyChess = 6;
inline void BattleRoundData::clear_moneycostbybuychess() {
  _impl_.moneycostbybuychess_ = 0;
}
inline int32_t BattleRoundData::_internal_moneycostbybuychess() const {
  return _impl_.moneycostbybuychess_;
}
inline int32_t BattleRoundData::moneycostbybuychess() const {
  // @@protoc_insertion_point(field_get:msg.BattleRoundData.MoneyCostByBuyChess)
  return _internal_moneycostbybuychess();
}
inline void BattleRoundData::_internal_set_moneycostbybuychess(int32_t value) {
  
  _impl_.moneycostbybuychess_ = value;
}
inline void BattleRoundData::set_moneycostbybuychess(int32_t value) {
  _internal_set_moneycostbybuychess(value);
  // @@protoc_insertion_point(field_set:msg.BattleRoundData.MoneyCostByBuyChess)
}

// bool IsMonster = 7;
inline void BattleRoundData::clear_ismonster() {
  _impl_.ismonster_ = false;
}
inline bool BattleRoundData::_internal_ismonster() const {
  return _impl_.ismonster_;
}
inline bool BattleRoundData::ismonster() const {
  // @@protoc_insertion_point(field_get:msg.BattleRoundData.IsMonster)
  return _internal_ismonster();
}
inline void BattleRoundData::_internal_set_ismonster(bool value) {
  
  _impl_.ismonster_ = value;
}
inline void BattleRoundData::set_ismonster(bool value) {
  _internal_set_ismonster(value);
  // @@protoc_insertion_point(field_set:msg.BattleRoundData.IsMonster)
}

// int32 EnemyIdx = 8;
inline void BattleRoundData::clear_enemyidx() {
  _impl_.enemyidx_ = 0;
}
inline int32_t BattleRoundData::_internal_enemyidx() const {
  return _impl_.enemyidx_;
}
inline int32_t BattleRoundData::enemyidx() const {
  // @@protoc_insertion_point(field_get:msg.BattleRoundData.EnemyIdx)
  return _internal_enemyidx();
}
inline void BattleRoundData::_internal_set_enemyidx(int32_t value) {
  
  _impl_.enemyidx_ = value;
}
inline void BattleRoundData::set_enemyidx(int32_t value) {
  _internal_set_enemyidx(value);
  // @@protoc_insertion_point(field_set:msg.BattleRoundData.EnemyIdx)
}

// int32 Exp = 9;
inline void BattleRoundData::clear_exp() {
  _impl_.exp_ = 0;
}
inline int32_t BattleRoundData::_internal_exp() const {
  return _impl_.exp_;
}
inline int32_t BattleRoundData::exp() const {
  // @@protoc_insertion_point(field_get:msg.BattleRoundData.Exp)
  return _internal_exp();
}
inline void BattleRoundData::_internal_set_exp(int32_t value) {
  
  _impl_.exp_ = value;
}
inline void BattleRoundData::set_exp(int32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:msg.BattleRoundData.Exp)
}

// .msg.WINTYPE winType = 10;
inline void BattleRoundData::clear_wintype() {
  _impl_.wintype_ = 0;
}
inline ::msg::WINTYPE BattleRoundData::_internal_wintype() const {
  return static_cast< ::msg::WINTYPE >(_impl_.wintype_);
}
inline ::msg::WINTYPE BattleRoundData::wintype() const {
  // @@protoc_insertion_point(field_get:msg.BattleRoundData.winType)
  return _internal_wintype();
}
inline void BattleRoundData::_internal_set_wintype(::msg::WINTYPE value) {
  
  _impl_.wintype_ = value;
}
inline void BattleRoundData::set_wintype(::msg::WINTYPE value) {
  _internal_set_wintype(value);
  // @@protoc_insertion_point(field_set:msg.BattleRoundData.winType)
}

// repeated .msg.ReflushChessData refreshChess = 11;
inline int BattleRoundData::_internal_refreshchess_size() const {
  return _impl_.refreshchess_.size();
}
inline int BattleRoundData::refreshchess_size() const {
  return _internal_refreshchess_size();
}
inline void BattleRoundData::clear_refreshchess() {
  _impl_.refreshchess_.Clear();
}
inline ::msg::ReflushChessData* BattleRoundData::mutable_refreshchess(int index) {
  // @@protoc_insertion_point(field_mutable:msg.BattleRoundData.refreshChess)
  return _impl_.refreshchess_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ReflushChessData >*
BattleRoundData::mutable_refreshchess() {
  // @@protoc_insertion_point(field_mutable_list:msg.BattleRoundData.refreshChess)
  return &_impl_.refreshchess_;
}
inline const ::msg::ReflushChessData& BattleRoundData::_internal_refreshchess(int index) const {
  return _impl_.refreshchess_.Get(index);
}
inline const ::msg::ReflushChessData& BattleRoundData::refreshchess(int index) const {
  // @@protoc_insertion_point(field_get:msg.BattleRoundData.refreshChess)
  return _internal_refreshchess(index);
}
inline ::msg::ReflushChessData* BattleRoundData::_internal_add_refreshchess() {
  return _impl_.refreshchess_.Add();
}
inline ::msg::ReflushChessData* BattleRoundData::add_refreshchess() {
  ::msg::ReflushChessData* _add = _internal_add_refreshchess();
  // @@protoc_insertion_point(field_add:msg.BattleRoundData.refreshChess)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ReflushChessData >&
BattleRoundData::refreshchess() const {
  // @@protoc_insertion_point(field_list:msg.BattleRoundData.refreshChess)
  return _impl_.refreshchess_;
}

// repeated int32 intoBattleChess = 12;
inline int BattleRoundData::_internal_intobattlechess_size() const {
  return _impl_.intobattlechess_.size();
}
inline int BattleRoundData::intobattlechess_size() const {
  return _internal_intobattlechess_size();
}
inline void BattleRoundData::clear_intobattlechess() {
  _impl_.intobattlechess_.Clear();
}
inline int32_t BattleRoundData::_internal_intobattlechess(int index) const {
  return _impl_.intobattlechess_.Get(index);
}
inline int32_t BattleRoundData::intobattlechess(int index) const {
  // @@protoc_insertion_point(field_get:msg.BattleRoundData.intoBattleChess)
  return _internal_intobattlechess(index);
}
inline void BattleRoundData::set_intobattlechess(int index, int32_t value) {
  _impl_.intobattlechess_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.BattleRoundData.intoBattleChess)
}
inline void BattleRoundData::_internal_add_intobattlechess(int32_t value) {
  _impl_.intobattlechess_.Add(value);
}
inline void BattleRoundData::add_intobattlechess(int32_t value) {
  _internal_add_intobattlechess(value);
  // @@protoc_insertion_point(field_add:msg.BattleRoundData.intoBattleChess)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BattleRoundData::_internal_intobattlechess() const {
  return _impl_.intobattlechess_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BattleRoundData::intobattlechess() const {
  // @@protoc_insertion_point(field_list:msg.BattleRoundData.intoBattleChess)
  return _internal_intobattlechess();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BattleRoundData::_internal_mutable_intobattlechess() {
  return &_impl_.intobattlechess_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BattleRoundData::mutable_intobattlechess() {
  // @@protoc_insertion_point(field_mutable_list:msg.BattleRoundData.intoBattleChess)
  return _internal_mutable_intobattlechess();
}

// int32 MoneyGainedBySellChess = 13;
inline void BattleRoundData::clear_moneygainedbysellchess() {
  _impl_.moneygainedbysellchess_ = 0;
}
inline int32_t BattleRoundData::_internal_moneygainedbysellchess() const {
  return _impl_.moneygainedbysellchess_;
}
inline int32_t BattleRoundData::moneygainedbysellchess() const {
  // @@protoc_insertion_point(field_get:msg.BattleRoundData.MoneyGainedBySellChess)
  return _internal_moneygainedbysellchess();
}
inline void BattleRoundData::_internal_set_moneygainedbysellchess(int32_t value) {
  
  _impl_.moneygainedbysellchess_ = value;
}
inline void BattleRoundData::set_moneygainedbysellchess(int32_t value) {
  _internal_set_moneygainedbysellchess(value);
  // @@protoc_insertion_point(field_set:msg.BattleRoundData.MoneyGainedBySellChess)
}

// -------------------------------------------------------------------

// PlayerStatisticsInfo

// int32 pidx = 1;
inline void PlayerStatisticsInfo::clear_pidx() {
  _impl_.pidx_ = 0;
}
inline int32_t PlayerStatisticsInfo::_internal_pidx() const {
  return _impl_.pidx_;
}
inline int32_t PlayerStatisticsInfo::pidx() const {
  // @@protoc_insertion_point(field_get:msg.PlayerStatisticsInfo.pidx)
  return _internal_pidx();
}
inline void PlayerStatisticsInfo::_internal_set_pidx(int32_t value) {
  
  _impl_.pidx_ = value;
}
inline void PlayerStatisticsInfo::set_pidx(int32_t value) {
  _internal_set_pidx(value);
  // @@protoc_insertion_point(field_set:msg.PlayerStatisticsInfo.pidx)
}

// int32 winStreak = 2;
inline void PlayerStatisticsInfo::clear_winstreak() {
  _impl_.winstreak_ = 0;
}
inline int32_t PlayerStatisticsInfo::_internal_winstreak() const {
  return _impl_.winstreak_;
}
inline int32_t PlayerStatisticsInfo::winstreak() const {
  // @@protoc_insertion_point(field_get:msg.PlayerStatisticsInfo.winStreak)
  return _internal_winstreak();
}
inline void PlayerStatisticsInfo::_internal_set_winstreak(int32_t value) {
  
  _impl_.winstreak_ = value;
}
inline void PlayerStatisticsInfo::set_winstreak(int32_t value) {
  _internal_set_winstreak(value);
  // @@protoc_insertion_point(field_set:msg.PlayerStatisticsInfo.winStreak)
}

// repeated .msg.BattleRoundData roundData = 3;
inline int PlayerStatisticsInfo::_internal_rounddata_size() const {
  return _impl_.rounddata_.size();
}
inline int PlayerStatisticsInfo::rounddata_size() const {
  return _internal_rounddata_size();
}
inline void PlayerStatisticsInfo::clear_rounddata() {
  _impl_.rounddata_.Clear();
}
inline ::msg::BattleRoundData* PlayerStatisticsInfo::mutable_rounddata(int index) {
  // @@protoc_insertion_point(field_mutable:msg.PlayerStatisticsInfo.roundData)
  return _impl_.rounddata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::BattleRoundData >*
PlayerStatisticsInfo::mutable_rounddata() {
  // @@protoc_insertion_point(field_mutable_list:msg.PlayerStatisticsInfo.roundData)
  return &_impl_.rounddata_;
}
inline const ::msg::BattleRoundData& PlayerStatisticsInfo::_internal_rounddata(int index) const {
  return _impl_.rounddata_.Get(index);
}
inline const ::msg::BattleRoundData& PlayerStatisticsInfo::rounddata(int index) const {
  // @@protoc_insertion_point(field_get:msg.PlayerStatisticsInfo.roundData)
  return _internal_rounddata(index);
}
inline ::msg::BattleRoundData* PlayerStatisticsInfo::_internal_add_rounddata() {
  return _impl_.rounddata_.Add();
}
inline ::msg::BattleRoundData* PlayerStatisticsInfo::add_rounddata() {
  ::msg::BattleRoundData* _add = _internal_add_rounddata();
  // @@protoc_insertion_point(field_add:msg.PlayerStatisticsInfo.roundData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::BattleRoundData >&
PlayerStatisticsInfo::rounddata() const {
  // @@protoc_insertion_point(field_list:msg.PlayerStatisticsInfo.roundData)
  return _impl_.rounddata_;
}

// -------------------------------------------------------------------

// Item

// int32 EquipmentId = 1;
inline void Item::clear_equipmentid() {
  _impl_.equipmentid_ = 0;
}
inline int32_t Item::_internal_equipmentid() const {
  return _impl_.equipmentid_;
}
inline int32_t Item::equipmentid() const {
  // @@protoc_insertion_point(field_get:msg.Item.EquipmentId)
  return _internal_equipmentid();
}
inline void Item::_internal_set_equipmentid(int32_t value) {
  
  _impl_.equipmentid_ = value;
}
inline void Item::set_equipmentid(int32_t value) {
  _internal_set_equipmentid(value);
  // @@protoc_insertion_point(field_set:msg.Item.EquipmentId)
}

// int32 NetId = 2;
inline void Item::clear_netid() {
  _impl_.netid_ = 0;
}
inline int32_t Item::_internal_netid() const {
  return _impl_.netid_;
}
inline int32_t Item::netid() const {
  // @@protoc_insertion_point(field_get:msg.Item.NetId)
  return _internal_netid();
}
inline void Item::_internal_set_netid(int32_t value) {
  
  _impl_.netid_ = value;
}
inline void Item::set_netid(int32_t value) {
  _internal_set_netid(value);
  // @@protoc_insertion_point(field_set:msg.Item.NetId)
}

// -------------------------------------------------------------------

// ItemOnTheGround

// .msg.Item BaseInfo = 1;
inline bool ItemOnTheGround::_internal_has_baseinfo() const {
  return this != internal_default_instance() && _impl_.baseinfo_ != nullptr;
}
inline bool ItemOnTheGround::has_baseinfo() const {
  return _internal_has_baseinfo();
}
inline void ItemOnTheGround::clear_baseinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.baseinfo_ != nullptr) {
    delete _impl_.baseinfo_;
  }
  _impl_.baseinfo_ = nullptr;
}
inline const ::msg::Item& ItemOnTheGround::_internal_baseinfo() const {
  const ::msg::Item* p = _impl_.baseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::Item&>(
      ::msg::_Item_default_instance_);
}
inline const ::msg::Item& ItemOnTheGround::baseinfo() const {
  // @@protoc_insertion_point(field_get:msg.ItemOnTheGround.BaseInfo)
  return _internal_baseinfo();
}
inline void ItemOnTheGround::unsafe_arena_set_allocated_baseinfo(
    ::msg::Item* baseinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.baseinfo_);
  }
  _impl_.baseinfo_ = baseinfo;
  if (baseinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ItemOnTheGround.BaseInfo)
}
inline ::msg::Item* ItemOnTheGround::release_baseinfo() {
  
  ::msg::Item* temp = _impl_.baseinfo_;
  _impl_.baseinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::Item* ItemOnTheGround::unsafe_arena_release_baseinfo() {
  // @@protoc_insertion_point(field_release:msg.ItemOnTheGround.BaseInfo)
  
  ::msg::Item* temp = _impl_.baseinfo_;
  _impl_.baseinfo_ = nullptr;
  return temp;
}
inline ::msg::Item* ItemOnTheGround::_internal_mutable_baseinfo() {
  
  if (_impl_.baseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Item>(GetArenaForAllocation());
    _impl_.baseinfo_ = p;
  }
  return _impl_.baseinfo_;
}
inline ::msg::Item* ItemOnTheGround::mutable_baseinfo() {
  ::msg::Item* _msg = _internal_mutable_baseinfo();
  // @@protoc_insertion_point(field_mutable:msg.ItemOnTheGround.BaseInfo)
  return _msg;
}
inline void ItemOnTheGround::set_allocated_baseinfo(::msg::Item* baseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.baseinfo_;
  }
  if (baseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(baseinfo);
    if (message_arena != submessage_arena) {
      baseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.ItemOnTheGround.BaseInfo)
}

// int32 MapX = 2;
inline void ItemOnTheGround::clear_mapx() {
  _impl_.mapx_ = 0;
}
inline int32_t ItemOnTheGround::_internal_mapx() const {
  return _impl_.mapx_;
}
inline int32_t ItemOnTheGround::mapx() const {
  // @@protoc_insertion_point(field_get:msg.ItemOnTheGround.MapX)
  return _internal_mapx();
}
inline void ItemOnTheGround::_internal_set_mapx(int32_t value) {
  
  _impl_.mapx_ = value;
}
inline void ItemOnTheGround::set_mapx(int32_t value) {
  _internal_set_mapx(value);
  // @@protoc_insertion_point(field_set:msg.ItemOnTheGround.MapX)
}

// int32 MapY = 3;
inline void ItemOnTheGround::clear_mapy() {
  _impl_.mapy_ = 0;
}
inline int32_t ItemOnTheGround::_internal_mapy() const {
  return _impl_.mapy_;
}
inline int32_t ItemOnTheGround::mapy() const {
  // @@protoc_insertion_point(field_get:msg.ItemOnTheGround.MapY)
  return _internal_mapy();
}
inline void ItemOnTheGround::_internal_set_mapy(int32_t value) {
  
  _impl_.mapy_ = value;
}
inline void ItemOnTheGround::set_mapy(int32_t value) {
  _internal_set_mapy(value);
  // @@protoc_insertion_point(field_set:msg.ItemOnTheGround.MapY)
}

// -------------------------------------------------------------------

// ItemInTheBag

// .msg.Item BaseInfo = 1;
inline bool ItemInTheBag::_internal_has_baseinfo() const {
  return this != internal_default_instance() && _impl_.baseinfo_ != nullptr;
}
inline bool ItemInTheBag::has_baseinfo() const {
  return _internal_has_baseinfo();
}
inline void ItemInTheBag::clear_baseinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.baseinfo_ != nullptr) {
    delete _impl_.baseinfo_;
  }
  _impl_.baseinfo_ = nullptr;
}
inline const ::msg::Item& ItemInTheBag::_internal_baseinfo() const {
  const ::msg::Item* p = _impl_.baseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::Item&>(
      ::msg::_Item_default_instance_);
}
inline const ::msg::Item& ItemInTheBag::baseinfo() const {
  // @@protoc_insertion_point(field_get:msg.ItemInTheBag.BaseInfo)
  return _internal_baseinfo();
}
inline void ItemInTheBag::unsafe_arena_set_allocated_baseinfo(
    ::msg::Item* baseinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.baseinfo_);
  }
  _impl_.baseinfo_ = baseinfo;
  if (baseinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ItemInTheBag.BaseInfo)
}
inline ::msg::Item* ItemInTheBag::release_baseinfo() {
  
  ::msg::Item* temp = _impl_.baseinfo_;
  _impl_.baseinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::Item* ItemInTheBag::unsafe_arena_release_baseinfo() {
  // @@protoc_insertion_point(field_release:msg.ItemInTheBag.BaseInfo)
  
  ::msg::Item* temp = _impl_.baseinfo_;
  _impl_.baseinfo_ = nullptr;
  return temp;
}
inline ::msg::Item* ItemInTheBag::_internal_mutable_baseinfo() {
  
  if (_impl_.baseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Item>(GetArenaForAllocation());
    _impl_.baseinfo_ = p;
  }
  return _impl_.baseinfo_;
}
inline ::msg::Item* ItemInTheBag::mutable_baseinfo() {
  ::msg::Item* _msg = _internal_mutable_baseinfo();
  // @@protoc_insertion_point(field_mutable:msg.ItemInTheBag.BaseInfo)
  return _msg;
}
inline void ItemInTheBag::set_allocated_baseinfo(::msg::Item* baseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.baseinfo_;
  }
  if (baseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(baseinfo);
    if (message_arena != submessage_arena) {
      baseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.ItemInTheBag.BaseInfo)
}

// int32 Index = 2;
inline void ItemInTheBag::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t ItemInTheBag::_internal_index() const {
  return _impl_.index_;
}
inline int32_t ItemInTheBag::index() const {
  // @@protoc_insertion_point(field_get:msg.ItemInTheBag.Index)
  return _internal_index();
}
inline void ItemInTheBag::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void ItemInTheBag::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:msg.ItemInTheBag.Index)
}

// -------------------------------------------------------------------

// Character

// int32 PlayerIdx = 1;
inline void Character::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t Character::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t Character::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.Character.PlayerIdx)
  return _internal_playeridx();
}
inline void Character::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void Character::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.Character.PlayerIdx)
}

// int32 CharacterId = 2;
inline void Character::clear_characterid() {
  _impl_.characterid_ = 0;
}
inline int32_t Character::_internal_characterid() const {
  return _impl_.characterid_;
}
inline int32_t Character::characterid() const {
  // @@protoc_insertion_point(field_get:msg.Character.CharacterId)
  return _internal_characterid();
}
inline void Character::_internal_set_characterid(int32_t value) {
  
  _impl_.characterid_ = value;
}
inline void Character::set_characterid(int32_t value) {
  _internal_set_characterid(value);
  // @@protoc_insertion_point(field_set:msg.Character.CharacterId)
}

// repeated .msg.ItemInTheBag CharacterEquips = 6;
inline int Character::_internal_characterequips_size() const {
  return _impl_.characterequips_.size();
}
inline int Character::characterequips_size() const {
  return _internal_characterequips_size();
}
inline void Character::clear_characterequips() {
  _impl_.characterequips_.Clear();
}
inline ::msg::ItemInTheBag* Character::mutable_characterequips(int index) {
  // @@protoc_insertion_point(field_mutable:msg.Character.CharacterEquips)
  return _impl_.characterequips_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemInTheBag >*
Character::mutable_characterequips() {
  // @@protoc_insertion_point(field_mutable_list:msg.Character.CharacterEquips)
  return &_impl_.characterequips_;
}
inline const ::msg::ItemInTheBag& Character::_internal_characterequips(int index) const {
  return _impl_.characterequips_.Get(index);
}
inline const ::msg::ItemInTheBag& Character::characterequips(int index) const {
  // @@protoc_insertion_point(field_get:msg.Character.CharacterEquips)
  return _internal_characterequips(index);
}
inline ::msg::ItemInTheBag* Character::_internal_add_characterequips() {
  return _impl_.characterequips_.Add();
}
inline ::msg::ItemInTheBag* Character::add_characterequips() {
  ::msg::ItemInTheBag* _add = _internal_add_characterequips();
  // @@protoc_insertion_point(field_add:msg.Character.CharacterEquips)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemInTheBag >&
Character::characterequips() const {
  // @@protoc_insertion_point(field_list:msg.Character.CharacterEquips)
  return _impl_.characterequips_;
}

// -------------------------------------------------------------------

// CharacterInTheBag

// .msg.Character BaseInfo = 1;
inline bool CharacterInTheBag::_internal_has_baseinfo() const {
  return this != internal_default_instance() && _impl_.baseinfo_ != nullptr;
}
inline bool CharacterInTheBag::has_baseinfo() const {
  return _internal_has_baseinfo();
}
inline void CharacterInTheBag::clear_baseinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.baseinfo_ != nullptr) {
    delete _impl_.baseinfo_;
  }
  _impl_.baseinfo_ = nullptr;
}
inline const ::msg::Character& CharacterInTheBag::_internal_baseinfo() const {
  const ::msg::Character* p = _impl_.baseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::Character&>(
      ::msg::_Character_default_instance_);
}
inline const ::msg::Character& CharacterInTheBag::baseinfo() const {
  // @@protoc_insertion_point(field_get:msg.CharacterInTheBag.BaseInfo)
  return _internal_baseinfo();
}
inline void CharacterInTheBag::unsafe_arena_set_allocated_baseinfo(
    ::msg::Character* baseinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.baseinfo_);
  }
  _impl_.baseinfo_ = baseinfo;
  if (baseinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CharacterInTheBag.BaseInfo)
}
inline ::msg::Character* CharacterInTheBag::release_baseinfo() {
  
  ::msg::Character* temp = _impl_.baseinfo_;
  _impl_.baseinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::Character* CharacterInTheBag::unsafe_arena_release_baseinfo() {
  // @@protoc_insertion_point(field_release:msg.CharacterInTheBag.BaseInfo)
  
  ::msg::Character* temp = _impl_.baseinfo_;
  _impl_.baseinfo_ = nullptr;
  return temp;
}
inline ::msg::Character* CharacterInTheBag::_internal_mutable_baseinfo() {
  
  if (_impl_.baseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Character>(GetArenaForAllocation());
    _impl_.baseinfo_ = p;
  }
  return _impl_.baseinfo_;
}
inline ::msg::Character* CharacterInTheBag::mutable_baseinfo() {
  ::msg::Character* _msg = _internal_mutable_baseinfo();
  // @@protoc_insertion_point(field_mutable:msg.CharacterInTheBag.BaseInfo)
  return _msg;
}
inline void CharacterInTheBag::set_allocated_baseinfo(::msg::Character* baseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.baseinfo_;
  }
  if (baseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(baseinfo);
    if (message_arena != submessage_arena) {
      baseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CharacterInTheBag.BaseInfo)
}

// int32 BagIndex = 2;
inline void CharacterInTheBag::clear_bagindex() {
  _impl_.bagindex_ = 0;
}
inline int32_t CharacterInTheBag::_internal_bagindex() const {
  return _impl_.bagindex_;
}
inline int32_t CharacterInTheBag::bagindex() const {
  // @@protoc_insertion_point(field_get:msg.CharacterInTheBag.BagIndex)
  return _internal_bagindex();
}
inline void CharacterInTheBag::_internal_set_bagindex(int32_t value) {
  
  _impl_.bagindex_ = value;
}
inline void CharacterInTheBag::set_bagindex(int32_t value) {
  _internal_set_bagindex(value);
  // @@protoc_insertion_point(field_set:msg.CharacterInTheBag.BagIndex)
}

// -------------------------------------------------------------------

// CharacterOnTheMap

// .msg.Character BaseInfo = 1;
inline bool CharacterOnTheMap::_internal_has_baseinfo() const {
  return this != internal_default_instance() && _impl_.baseinfo_ != nullptr;
}
inline bool CharacterOnTheMap::has_baseinfo() const {
  return _internal_has_baseinfo();
}
inline void CharacterOnTheMap::clear_baseinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.baseinfo_ != nullptr) {
    delete _impl_.baseinfo_;
  }
  _impl_.baseinfo_ = nullptr;
}
inline const ::msg::Character& CharacterOnTheMap::_internal_baseinfo() const {
  const ::msg::Character* p = _impl_.baseinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::Character&>(
      ::msg::_Character_default_instance_);
}
inline const ::msg::Character& CharacterOnTheMap::baseinfo() const {
  // @@protoc_insertion_point(field_get:msg.CharacterOnTheMap.BaseInfo)
  return _internal_baseinfo();
}
inline void CharacterOnTheMap::unsafe_arena_set_allocated_baseinfo(
    ::msg::Character* baseinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.baseinfo_);
  }
  _impl_.baseinfo_ = baseinfo;
  if (baseinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CharacterOnTheMap.BaseInfo)
}
inline ::msg::Character* CharacterOnTheMap::release_baseinfo() {
  
  ::msg::Character* temp = _impl_.baseinfo_;
  _impl_.baseinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::Character* CharacterOnTheMap::unsafe_arena_release_baseinfo() {
  // @@protoc_insertion_point(field_release:msg.CharacterOnTheMap.BaseInfo)
  
  ::msg::Character* temp = _impl_.baseinfo_;
  _impl_.baseinfo_ = nullptr;
  return temp;
}
inline ::msg::Character* CharacterOnTheMap::_internal_mutable_baseinfo() {
  
  if (_impl_.baseinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::Character>(GetArenaForAllocation());
    _impl_.baseinfo_ = p;
  }
  return _impl_.baseinfo_;
}
inline ::msg::Character* CharacterOnTheMap::mutable_baseinfo() {
  ::msg::Character* _msg = _internal_mutable_baseinfo();
  // @@protoc_insertion_point(field_mutable:msg.CharacterOnTheMap.BaseInfo)
  return _msg;
}
inline void CharacterOnTheMap::set_allocated_baseinfo(::msg::Character* baseinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.baseinfo_;
  }
  if (baseinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(baseinfo);
    if (message_arena != submessage_arena) {
      baseinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, baseinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.baseinfo_ = baseinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CharacterOnTheMap.BaseInfo)
}

// int32 Tx = 2;
inline void CharacterOnTheMap::clear_tx() {
  _impl_.tx_ = 0;
}
inline int32_t CharacterOnTheMap::_internal_tx() const {
  return _impl_.tx_;
}
inline int32_t CharacterOnTheMap::tx() const {
  // @@protoc_insertion_point(field_get:msg.CharacterOnTheMap.Tx)
  return _internal_tx();
}
inline void CharacterOnTheMap::_internal_set_tx(int32_t value) {
  
  _impl_.tx_ = value;
}
inline void CharacterOnTheMap::set_tx(int32_t value) {
  _internal_set_tx(value);
  // @@protoc_insertion_point(field_set:msg.CharacterOnTheMap.Tx)
}

// int32 Ty = 3;
inline void CharacterOnTheMap::clear_ty() {
  _impl_.ty_ = 0;
}
inline int32_t CharacterOnTheMap::_internal_ty() const {
  return _impl_.ty_;
}
inline int32_t CharacterOnTheMap::ty() const {
  // @@protoc_insertion_point(field_get:msg.CharacterOnTheMap.Ty)
  return _internal_ty();
}
inline void CharacterOnTheMap::_internal_set_ty(int32_t value) {
  
  _impl_.ty_ = value;
}
inline void CharacterOnTheMap::set_ty(int32_t value) {
  _internal_set_ty(value);
  // @@protoc_insertion_point(field_set:msg.CharacterOnTheMap.Ty)
}

// -------------------------------------------------------------------

// ReconnectPlayer

// int32 PlayerIdx = 1;
inline void ReconnectPlayer::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t ReconnectPlayer::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t ReconnectPlayer::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.ReconnectPlayer.PlayerIdx)
  return _internal_playeridx();
}
inline void ReconnectPlayer::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void ReconnectPlayer::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.ReconnectPlayer.PlayerIdx)
}

// int32 CurrentHp = 2;
inline void ReconnectPlayer::clear_currenthp() {
  _impl_.currenthp_ = 0;
}
inline int32_t ReconnectPlayer::_internal_currenthp() const {
  return _impl_.currenthp_;
}
inline int32_t ReconnectPlayer::currenthp() const {
  // @@protoc_insertion_point(field_get:msg.ReconnectPlayer.CurrentHp)
  return _internal_currenthp();
}
inline void ReconnectPlayer::_internal_set_currenthp(int32_t value) {
  
  _impl_.currenthp_ = value;
}
inline void ReconnectPlayer::set_currenthp(int32_t value) {
  _internal_set_currenthp(value);
  // @@protoc_insertion_point(field_set:msg.ReconnectPlayer.CurrentHp)
}

// int32 CurrentGold = 3;
inline void ReconnectPlayer::clear_currentgold() {
  _impl_.currentgold_ = 0;
}
inline int32_t ReconnectPlayer::_internal_currentgold() const {
  return _impl_.currentgold_;
}
inline int32_t ReconnectPlayer::currentgold() const {
  // @@protoc_insertion_point(field_get:msg.ReconnectPlayer.CurrentGold)
  return _internal_currentgold();
}
inline void ReconnectPlayer::_internal_set_currentgold(int32_t value) {
  
  _impl_.currentgold_ = value;
}
inline void ReconnectPlayer::set_currentgold(int32_t value) {
  _internal_set_currentgold(value);
  // @@protoc_insertion_point(field_set:msg.ReconnectPlayer.CurrentGold)
}

// int32 CurrentLevel = 4;
inline void ReconnectPlayer::clear_currentlevel() {
  _impl_.currentlevel_ = 0;
}
inline int32_t ReconnectPlayer::_internal_currentlevel() const {
  return _impl_.currentlevel_;
}
inline int32_t ReconnectPlayer::currentlevel() const {
  // @@protoc_insertion_point(field_get:msg.ReconnectPlayer.CurrentLevel)
  return _internal_currentlevel();
}
inline void ReconnectPlayer::_internal_set_currentlevel(int32_t value) {
  
  _impl_.currentlevel_ = value;
}
inline void ReconnectPlayer::set_currentlevel(int32_t value) {
  _internal_set_currentlevel(value);
  // @@protoc_insertion_point(field_set:msg.ReconnectPlayer.CurrentLevel)
}

// int32 CurrentExp = 5;
inline void ReconnectPlayer::clear_currentexp() {
  _impl_.currentexp_ = 0;
}
inline int32_t ReconnectPlayer::_internal_currentexp() const {
  return _impl_.currentexp_;
}
inline int32_t ReconnectPlayer::currentexp() const {
  // @@protoc_insertion_point(field_get:msg.ReconnectPlayer.CurrentExp)
  return _internal_currentexp();
}
inline void ReconnectPlayer::_internal_set_currentexp(int32_t value) {
  
  _impl_.currentexp_ = value;
}
inline void ReconnectPlayer::set_currentexp(int32_t value) {
  _internal_set_currentexp(value);
  // @@protoc_insertion_point(field_set:msg.ReconnectPlayer.CurrentExp)
}

// repeated int32 ShopContents = 6;
inline int ReconnectPlayer::_internal_shopcontents_size() const {
  return _impl_.shopcontents_.size();
}
inline int ReconnectPlayer::shopcontents_size() const {
  return _internal_shopcontents_size();
}
inline void ReconnectPlayer::clear_shopcontents() {
  _impl_.shopcontents_.Clear();
}
inline int32_t ReconnectPlayer::_internal_shopcontents(int index) const {
  return _impl_.shopcontents_.Get(index);
}
inline int32_t ReconnectPlayer::shopcontents(int index) const {
  // @@protoc_insertion_point(field_get:msg.ReconnectPlayer.ShopContents)
  return _internal_shopcontents(index);
}
inline void ReconnectPlayer::set_shopcontents(int index, int32_t value) {
  _impl_.shopcontents_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.ReconnectPlayer.ShopContents)
}
inline void ReconnectPlayer::_internal_add_shopcontents(int32_t value) {
  _impl_.shopcontents_.Add(value);
}
inline void ReconnectPlayer::add_shopcontents(int32_t value) {
  _internal_add_shopcontents(value);
  // @@protoc_insertion_point(field_add:msg.ReconnectPlayer.ShopContents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ReconnectPlayer::_internal_shopcontents() const {
  return _impl_.shopcontents_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ReconnectPlayer::shopcontents() const {
  // @@protoc_insertion_point(field_list:msg.ReconnectPlayer.ShopContents)
  return _internal_shopcontents();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ReconnectPlayer::_internal_mutable_shopcontents() {
  return &_impl_.shopcontents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ReconnectPlayer::mutable_shopcontents() {
  // @@protoc_insertion_point(field_mutable_list:msg.ReconnectPlayer.ShopContents)
  return _internal_mutable_shopcontents();
}

// .msg.PvpPlayerData PlayerData = 7;
inline bool ReconnectPlayer::_internal_has_playerdata() const {
  return this != internal_default_instance() && _impl_.playerdata_ != nullptr;
}
inline bool ReconnectPlayer::has_playerdata() const {
  return _internal_has_playerdata();
}
inline const ::msg::PvpPlayerData& ReconnectPlayer::_internal_playerdata() const {
  const ::msg::PvpPlayerData* p = _impl_.playerdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PvpPlayerData&>(
      ::msg::_PvpPlayerData_default_instance_);
}
inline const ::msg::PvpPlayerData& ReconnectPlayer::playerdata() const {
  // @@protoc_insertion_point(field_get:msg.ReconnectPlayer.PlayerData)
  return _internal_playerdata();
}
inline void ReconnectPlayer::unsafe_arena_set_allocated_playerdata(
    ::msg::PvpPlayerData* playerdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerdata_);
  }
  _impl_.playerdata_ = playerdata;
  if (playerdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.ReconnectPlayer.PlayerData)
}
inline ::msg::PvpPlayerData* ReconnectPlayer::release_playerdata() {
  
  ::msg::PvpPlayerData* temp = _impl_.playerdata_;
  _impl_.playerdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PvpPlayerData* ReconnectPlayer::unsafe_arena_release_playerdata() {
  // @@protoc_insertion_point(field_release:msg.ReconnectPlayer.PlayerData)
  
  ::msg::PvpPlayerData* temp = _impl_.playerdata_;
  _impl_.playerdata_ = nullptr;
  return temp;
}
inline ::msg::PvpPlayerData* ReconnectPlayer::_internal_mutable_playerdata() {
  
  if (_impl_.playerdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PvpPlayerData>(GetArenaForAllocation());
    _impl_.playerdata_ = p;
  }
  return _impl_.playerdata_;
}
inline ::msg::PvpPlayerData* ReconnectPlayer::mutable_playerdata() {
  ::msg::PvpPlayerData* _msg = _internal_mutable_playerdata();
  // @@protoc_insertion_point(field_mutable:msg.ReconnectPlayer.PlayerData)
  return _msg;
}
inline void ReconnectPlayer::set_allocated_playerdata(::msg::PvpPlayerData* playerdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerdata_);
  }
  if (playerdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playerdata));
    if (message_arena != submessage_arena) {
      playerdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerdata_ = playerdata;
  // @@protoc_insertion_point(field_set_allocated:msg.ReconnectPlayer.PlayerData)
}

// float MessengerPosX = 8;
inline void ReconnectPlayer::clear_messengerposx() {
  _impl_.messengerposx_ = 0;
}
inline float ReconnectPlayer::_internal_messengerposx() const {
  return _impl_.messengerposx_;
}
inline float ReconnectPlayer::messengerposx() const {
  // @@protoc_insertion_point(field_get:msg.ReconnectPlayer.MessengerPosX)
  return _internal_messengerposx();
}
inline void ReconnectPlayer::_internal_set_messengerposx(float value) {
  
  _impl_.messengerposx_ = value;
}
inline void ReconnectPlayer::set_messengerposx(float value) {
  _internal_set_messengerposx(value);
  // @@protoc_insertion_point(field_set:msg.ReconnectPlayer.MessengerPosX)
}

// float MessengerPosY = 9;
inline void ReconnectPlayer::clear_messengerposy() {
  _impl_.messengerposy_ = 0;
}
inline float ReconnectPlayer::_internal_messengerposy() const {
  return _impl_.messengerposy_;
}
inline float ReconnectPlayer::messengerposy() const {
  // @@protoc_insertion_point(field_get:msg.ReconnectPlayer.MessengerPosY)
  return _internal_messengerposy();
}
inline void ReconnectPlayer::_internal_set_messengerposy(float value) {
  
  _impl_.messengerposy_ = value;
}
inline void ReconnectPlayer::set_messengerposy(float value) {
  _internal_set_messengerposy(value);
  // @@protoc_insertion_point(field_set:msg.ReconnectPlayer.MessengerPosY)
}

// repeated .msg.CharacterInTheBag BagCharacters = 10;
inline int ReconnectPlayer::_internal_bagcharacters_size() const {
  return _impl_.bagcharacters_.size();
}
inline int ReconnectPlayer::bagcharacters_size() const {
  return _internal_bagcharacters_size();
}
inline void ReconnectPlayer::clear_bagcharacters() {
  _impl_.bagcharacters_.Clear();
}
inline ::msg::CharacterInTheBag* ReconnectPlayer::mutable_bagcharacters(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ReconnectPlayer.BagCharacters)
  return _impl_.bagcharacters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterInTheBag >*
ReconnectPlayer::mutable_bagcharacters() {
  // @@protoc_insertion_point(field_mutable_list:msg.ReconnectPlayer.BagCharacters)
  return &_impl_.bagcharacters_;
}
inline const ::msg::CharacterInTheBag& ReconnectPlayer::_internal_bagcharacters(int index) const {
  return _impl_.bagcharacters_.Get(index);
}
inline const ::msg::CharacterInTheBag& ReconnectPlayer::bagcharacters(int index) const {
  // @@protoc_insertion_point(field_get:msg.ReconnectPlayer.BagCharacters)
  return _internal_bagcharacters(index);
}
inline ::msg::CharacterInTheBag* ReconnectPlayer::_internal_add_bagcharacters() {
  return _impl_.bagcharacters_.Add();
}
inline ::msg::CharacterInTheBag* ReconnectPlayer::add_bagcharacters() {
  ::msg::CharacterInTheBag* _add = _internal_add_bagcharacters();
  // @@protoc_insertion_point(field_add:msg.ReconnectPlayer.BagCharacters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterInTheBag >&
ReconnectPlayer::bagcharacters() const {
  // @@protoc_insertion_point(field_list:msg.ReconnectPlayer.BagCharacters)
  return _impl_.bagcharacters_;
}

// repeated .msg.CharacterOnTheMap MapCharacters = 11;
inline int ReconnectPlayer::_internal_mapcharacters_size() const {
  return _impl_.mapcharacters_.size();
}
inline int ReconnectPlayer::mapcharacters_size() const {
  return _internal_mapcharacters_size();
}
inline void ReconnectPlayer::clear_mapcharacters() {
  _impl_.mapcharacters_.Clear();
}
inline ::msg::CharacterOnTheMap* ReconnectPlayer::mutable_mapcharacters(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ReconnectPlayer.MapCharacters)
  return _impl_.mapcharacters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterOnTheMap >*
ReconnectPlayer::mutable_mapcharacters() {
  // @@protoc_insertion_point(field_mutable_list:msg.ReconnectPlayer.MapCharacters)
  return &_impl_.mapcharacters_;
}
inline const ::msg::CharacterOnTheMap& ReconnectPlayer::_internal_mapcharacters(int index) const {
  return _impl_.mapcharacters_.Get(index);
}
inline const ::msg::CharacterOnTheMap& ReconnectPlayer::mapcharacters(int index) const {
  // @@protoc_insertion_point(field_get:msg.ReconnectPlayer.MapCharacters)
  return _internal_mapcharacters(index);
}
inline ::msg::CharacterOnTheMap* ReconnectPlayer::_internal_add_mapcharacters() {
  return _impl_.mapcharacters_.Add();
}
inline ::msg::CharacterOnTheMap* ReconnectPlayer::add_mapcharacters() {
  ::msg::CharacterOnTheMap* _add = _internal_add_mapcharacters();
  // @@protoc_insertion_point(field_add:msg.ReconnectPlayer.MapCharacters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterOnTheMap >&
ReconnectPlayer::mapcharacters() const {
  // @@protoc_insertion_point(field_list:msg.ReconnectPlayer.MapCharacters)
  return _impl_.mapcharacters_;
}

// repeated .msg.ItemInTheBag BagItems = 12;
inline int ReconnectPlayer::_internal_bagitems_size() const {
  return _impl_.bagitems_.size();
}
inline int ReconnectPlayer::bagitems_size() const {
  return _internal_bagitems_size();
}
inline void ReconnectPlayer::clear_bagitems() {
  _impl_.bagitems_.Clear();
}
inline ::msg::ItemInTheBag* ReconnectPlayer::mutable_bagitems(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ReconnectPlayer.BagItems)
  return _impl_.bagitems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemInTheBag >*
ReconnectPlayer::mutable_bagitems() {
  // @@protoc_insertion_point(field_mutable_list:msg.ReconnectPlayer.BagItems)
  return &_impl_.bagitems_;
}
inline const ::msg::ItemInTheBag& ReconnectPlayer::_internal_bagitems(int index) const {
  return _impl_.bagitems_.Get(index);
}
inline const ::msg::ItemInTheBag& ReconnectPlayer::bagitems(int index) const {
  // @@protoc_insertion_point(field_get:msg.ReconnectPlayer.BagItems)
  return _internal_bagitems(index);
}
inline ::msg::ItemInTheBag* ReconnectPlayer::_internal_add_bagitems() {
  return _impl_.bagitems_.Add();
}
inline ::msg::ItemInTheBag* ReconnectPlayer::add_bagitems() {
  ::msg::ItemInTheBag* _add = _internal_add_bagitems();
  // @@protoc_insertion_point(field_add:msg.ReconnectPlayer.BagItems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemInTheBag >&
ReconnectPlayer::bagitems() const {
  // @@protoc_insertion_point(field_list:msg.ReconnectPlayer.BagItems)
  return _impl_.bagitems_;
}

// repeated .msg.ItemOnTheGround GroundItems = 13;
inline int ReconnectPlayer::_internal_grounditems_size() const {
  return _impl_.grounditems_.size();
}
inline int ReconnectPlayer::grounditems_size() const {
  return _internal_grounditems_size();
}
inline void ReconnectPlayer::clear_grounditems() {
  _impl_.grounditems_.Clear();
}
inline ::msg::ItemOnTheGround* ReconnectPlayer::mutable_grounditems(int index) {
  // @@protoc_insertion_point(field_mutable:msg.ReconnectPlayer.GroundItems)
  return _impl_.grounditems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemOnTheGround >*
ReconnectPlayer::mutable_grounditems() {
  // @@protoc_insertion_point(field_mutable_list:msg.ReconnectPlayer.GroundItems)
  return &_impl_.grounditems_;
}
inline const ::msg::ItemOnTheGround& ReconnectPlayer::_internal_grounditems(int index) const {
  return _impl_.grounditems_.Get(index);
}
inline const ::msg::ItemOnTheGround& ReconnectPlayer::grounditems(int index) const {
  // @@protoc_insertion_point(field_get:msg.ReconnectPlayer.GroundItems)
  return _internal_grounditems(index);
}
inline ::msg::ItemOnTheGround* ReconnectPlayer::_internal_add_grounditems() {
  return _impl_.grounditems_.Add();
}
inline ::msg::ItemOnTheGround* ReconnectPlayer::add_grounditems() {
  ::msg::ItemOnTheGround* _add = _internal_add_grounditems();
  // @@protoc_insertion_point(field_add:msg.ReconnectPlayer.GroundItems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemOnTheGround >&
ReconnectPlayer::grounditems() const {
  // @@protoc_insertion_point(field_list:msg.ReconnectPlayer.GroundItems)
  return _impl_.grounditems_;
}

// int32 EnemyPlayerIndex = 14;
inline void ReconnectPlayer::clear_enemyplayerindex() {
  _impl_.enemyplayerindex_ = 0;
}
inline int32_t ReconnectPlayer::_internal_enemyplayerindex() const {
  return _impl_.enemyplayerindex_;
}
inline int32_t ReconnectPlayer::enemyplayerindex() const {
  // @@protoc_insertion_point(field_get:msg.ReconnectPlayer.EnemyPlayerIndex)
  return _internal_enemyplayerindex();
}
inline void ReconnectPlayer::_internal_set_enemyplayerindex(int32_t value) {
  
  _impl_.enemyplayerindex_ = value;
}
inline void ReconnectPlayer::set_enemyplayerindex(int32_t value) {
  _internal_set_enemyplayerindex(value);
  // @@protoc_insertion_point(field_set:msg.ReconnectPlayer.EnemyPlayerIndex)
}

// int32 WinStreak = 15;
inline void ReconnectPlayer::clear_winstreak() {
  _impl_.winstreak_ = 0;
}
inline int32_t ReconnectPlayer::_internal_winstreak() const {
  return _impl_.winstreak_;
}
inline int32_t ReconnectPlayer::winstreak() const {
  // @@protoc_insertion_point(field_get:msg.ReconnectPlayer.WinStreak)
  return _internal_winstreak();
}
inline void ReconnectPlayer::_internal_set_winstreak(int32_t value) {
  
  _impl_.winstreak_ = value;
}
inline void ReconnectPlayer::set_winstreak(int32_t value) {
  _internal_set_winstreak(value);
  // @@protoc_insertion_point(field_set:msg.ReconnectPlayer.WinStreak)
}

// int32 WinRoundCount = 16;
inline void ReconnectPlayer::clear_winroundcount() {
  _impl_.winroundcount_ = 0;
}
inline int32_t ReconnectPlayer::_internal_winroundcount() const {
  return _impl_.winroundcount_;
}
inline int32_t ReconnectPlayer::winroundcount() const {
  // @@protoc_insertion_point(field_get:msg.ReconnectPlayer.WinRoundCount)
  return _internal_winroundcount();
}
inline void ReconnectPlayer::_internal_set_winroundcount(int32_t value) {
  
  _impl_.winroundcount_ = value;
}
inline void ReconnectPlayer::set_winroundcount(int32_t value) {
  _internal_set_winroundcount(value);
  // @@protoc_insertion_point(field_set:msg.ReconnectPlayer.WinRoundCount)
}

// int32 LoseRoundCount = 17;
inline void ReconnectPlayer::clear_loseroundcount() {
  _impl_.loseroundcount_ = 0;
}
inline int32_t ReconnectPlayer::_internal_loseroundcount() const {
  return _impl_.loseroundcount_;
}
inline int32_t ReconnectPlayer::loseroundcount() const {
  // @@protoc_insertion_point(field_get:msg.ReconnectPlayer.LoseRoundCount)
  return _internal_loseroundcount();
}
inline void ReconnectPlayer::_internal_set_loseroundcount(int32_t value) {
  
  _impl_.loseroundcount_ = value;
}
inline void ReconnectPlayer::set_loseroundcount(int32_t value) {
  _internal_set_loseroundcount(value);
  // @@protoc_insertion_point(field_set:msg.ReconnectPlayer.LoseRoundCount)
}

// int32 Rank = 18;
inline void ReconnectPlayer::clear_rank() {
  _impl_.rank_ = 0;
}
inline int32_t ReconnectPlayer::_internal_rank() const {
  return _impl_.rank_;
}
inline int32_t ReconnectPlayer::rank() const {
  // @@protoc_insertion_point(field_get:msg.ReconnectPlayer.Rank)
  return _internal_rank();
}
inline void ReconnectPlayer::_internal_set_rank(int32_t value) {
  
  _impl_.rank_ = value;
}
inline void ReconnectPlayer::set_rank(int32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:msg.ReconnectPlayer.Rank)
}

// -------------------------------------------------------------------

// RoundInfo

// int32 Seed = 1;
inline void RoundInfo::clear_seed() {
  _impl_.seed_ = 0;
}
inline int32_t RoundInfo::_internal_seed() const {
  return _impl_.seed_;
}
inline int32_t RoundInfo::seed() const {
  // @@protoc_insertion_point(field_get:msg.RoundInfo.Seed)
  return _internal_seed();
}
inline void RoundInfo::_internal_set_seed(int32_t value) {
  
  _impl_.seed_ = value;
}
inline void RoundInfo::set_seed(int32_t value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:msg.RoundInfo.Seed)
}

// int32 Round = 2;
inline void RoundInfo::clear_round() {
  _impl_.round_ = 0;
}
inline int32_t RoundInfo::_internal_round() const {
  return _impl_.round_;
}
inline int32_t RoundInfo::round() const {
  // @@protoc_insertion_point(field_get:msg.RoundInfo.Round)
  return _internal_round();
}
inline void RoundInfo::_internal_set_round(int32_t value) {
  
  _impl_.round_ = value;
}
inline void RoundInfo::set_round(int32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:msg.RoundInfo.Round)
}

// int32 GameFrame = 3;
inline void RoundInfo::clear_gameframe() {
  _impl_.gameframe_ = 0;
}
inline int32_t RoundInfo::_internal_gameframe() const {
  return _impl_.gameframe_;
}
inline int32_t RoundInfo::gameframe() const {
  // @@protoc_insertion_point(field_get:msg.RoundInfo.GameFrame)
  return _internal_gameframe();
}
inline void RoundInfo::_internal_set_gameframe(int32_t value) {
  
  _impl_.gameframe_ = value;
}
inline void RoundInfo::set_gameframe(int32_t value) {
  _internal_set_gameframe(value);
  // @@protoc_insertion_point(field_set:msg.RoundInfo.GameFrame)
}

// .msg.GameStage CurrentPhase = 4;
inline void RoundInfo::clear_currentphase() {
  _impl_.currentphase_ = 0;
}
inline ::msg::GameStage RoundInfo::_internal_currentphase() const {
  return static_cast< ::msg::GameStage >(_impl_.currentphase_);
}
inline ::msg::GameStage RoundInfo::currentphase() const {
  // @@protoc_insertion_point(field_get:msg.RoundInfo.CurrentPhase)
  return _internal_currentphase();
}
inline void RoundInfo::_internal_set_currentphase(::msg::GameStage value) {
  
  _impl_.currentphase_ = value;
}
inline void RoundInfo::set_currentphase(::msg::GameStage value) {
  _internal_set_currentphase(value);
  // @@protoc_insertion_point(field_set:msg.RoundInfo.CurrentPhase)
}

// int32 RemainTime = 5;
inline void RoundInfo::clear_remaintime() {
  _impl_.remaintime_ = 0;
}
inline int32_t RoundInfo::_internal_remaintime() const {
  return _impl_.remaintime_;
}
inline int32_t RoundInfo::remaintime() const {
  // @@protoc_insertion_point(field_get:msg.RoundInfo.RemainTime)
  return _internal_remaintime();
}
inline void RoundInfo::_internal_set_remaintime(int32_t value) {
  
  _impl_.remaintime_ = value;
}
inline void RoundInfo::set_remaintime(int32_t value) {
  _internal_set_remaintime(value);
  // @@protoc_insertion_point(field_set:msg.RoundInfo.RemainTime)
}

// -------------------------------------------------------------------

// CorrectFormation

// repeated .msg.CharacterInTheBag BagCharacters = 1;
inline int CorrectFormation::_internal_bagcharacters_size() const {
  return _impl_.bagcharacters_.size();
}
inline int CorrectFormation::bagcharacters_size() const {
  return _internal_bagcharacters_size();
}
inline void CorrectFormation::clear_bagcharacters() {
  _impl_.bagcharacters_.Clear();
}
inline ::msg::CharacterInTheBag* CorrectFormation::mutable_bagcharacters(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CorrectFormation.BagCharacters)
  return _impl_.bagcharacters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterInTheBag >*
CorrectFormation::mutable_bagcharacters() {
  // @@protoc_insertion_point(field_mutable_list:msg.CorrectFormation.BagCharacters)
  return &_impl_.bagcharacters_;
}
inline const ::msg::CharacterInTheBag& CorrectFormation::_internal_bagcharacters(int index) const {
  return _impl_.bagcharacters_.Get(index);
}
inline const ::msg::CharacterInTheBag& CorrectFormation::bagcharacters(int index) const {
  // @@protoc_insertion_point(field_get:msg.CorrectFormation.BagCharacters)
  return _internal_bagcharacters(index);
}
inline ::msg::CharacterInTheBag* CorrectFormation::_internal_add_bagcharacters() {
  return _impl_.bagcharacters_.Add();
}
inline ::msg::CharacterInTheBag* CorrectFormation::add_bagcharacters() {
  ::msg::CharacterInTheBag* _add = _internal_add_bagcharacters();
  // @@protoc_insertion_point(field_add:msg.CorrectFormation.BagCharacters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterInTheBag >&
CorrectFormation::bagcharacters() const {
  // @@protoc_insertion_point(field_list:msg.CorrectFormation.BagCharacters)
  return _impl_.bagcharacters_;
}

// repeated .msg.CharacterOnTheMap MapCharacters = 2;
inline int CorrectFormation::_internal_mapcharacters_size() const {
  return _impl_.mapcharacters_.size();
}
inline int CorrectFormation::mapcharacters_size() const {
  return _internal_mapcharacters_size();
}
inline void CorrectFormation::clear_mapcharacters() {
  _impl_.mapcharacters_.Clear();
}
inline ::msg::CharacterOnTheMap* CorrectFormation::mutable_mapcharacters(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CorrectFormation.MapCharacters)
  return _impl_.mapcharacters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterOnTheMap >*
CorrectFormation::mutable_mapcharacters() {
  // @@protoc_insertion_point(field_mutable_list:msg.CorrectFormation.MapCharacters)
  return &_impl_.mapcharacters_;
}
inline const ::msg::CharacterOnTheMap& CorrectFormation::_internal_mapcharacters(int index) const {
  return _impl_.mapcharacters_.Get(index);
}
inline const ::msg::CharacterOnTheMap& CorrectFormation::mapcharacters(int index) const {
  // @@protoc_insertion_point(field_get:msg.CorrectFormation.MapCharacters)
  return _internal_mapcharacters(index);
}
inline ::msg::CharacterOnTheMap* CorrectFormation::_internal_add_mapcharacters() {
  return _impl_.mapcharacters_.Add();
}
inline ::msg::CharacterOnTheMap* CorrectFormation::add_mapcharacters() {
  ::msg::CharacterOnTheMap* _add = _internal_add_mapcharacters();
  // @@protoc_insertion_point(field_add:msg.CorrectFormation.MapCharacters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CharacterOnTheMap >&
CorrectFormation::mapcharacters() const {
  // @@protoc_insertion_point(field_list:msg.CorrectFormation.MapCharacters)
  return _impl_.mapcharacters_;
}

// repeated .msg.ItemInTheBag BagItems = 3;
inline int CorrectFormation::_internal_bagitems_size() const {
  return _impl_.bagitems_.size();
}
inline int CorrectFormation::bagitems_size() const {
  return _internal_bagitems_size();
}
inline void CorrectFormation::clear_bagitems() {
  _impl_.bagitems_.Clear();
}
inline ::msg::ItemInTheBag* CorrectFormation::mutable_bagitems(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CorrectFormation.BagItems)
  return _impl_.bagitems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemInTheBag >*
CorrectFormation::mutable_bagitems() {
  // @@protoc_insertion_point(field_mutable_list:msg.CorrectFormation.BagItems)
  return &_impl_.bagitems_;
}
inline const ::msg::ItemInTheBag& CorrectFormation::_internal_bagitems(int index) const {
  return _impl_.bagitems_.Get(index);
}
inline const ::msg::ItemInTheBag& CorrectFormation::bagitems(int index) const {
  // @@protoc_insertion_point(field_get:msg.CorrectFormation.BagItems)
  return _internal_bagitems(index);
}
inline ::msg::ItemInTheBag* CorrectFormation::_internal_add_bagitems() {
  return _impl_.bagitems_.Add();
}
inline ::msg::ItemInTheBag* CorrectFormation::add_bagitems() {
  ::msg::ItemInTheBag* _add = _internal_add_bagitems();
  // @@protoc_insertion_point(field_add:msg.CorrectFormation.BagItems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemInTheBag >&
CorrectFormation::bagitems() const {
  // @@protoc_insertion_point(field_list:msg.CorrectFormation.BagItems)
  return _impl_.bagitems_;
}

// repeated .msg.ItemOnTheGround GroundItems = 4;
inline int CorrectFormation::_internal_grounditems_size() const {
  return _impl_.grounditems_.size();
}
inline int CorrectFormation::grounditems_size() const {
  return _internal_grounditems_size();
}
inline void CorrectFormation::clear_grounditems() {
  _impl_.grounditems_.Clear();
}
inline ::msg::ItemOnTheGround* CorrectFormation::mutable_grounditems(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CorrectFormation.GroundItems)
  return _impl_.grounditems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemOnTheGround >*
CorrectFormation::mutable_grounditems() {
  // @@protoc_insertion_point(field_mutable_list:msg.CorrectFormation.GroundItems)
  return &_impl_.grounditems_;
}
inline const ::msg::ItemOnTheGround& CorrectFormation::_internal_grounditems(int index) const {
  return _impl_.grounditems_.Get(index);
}
inline const ::msg::ItemOnTheGround& CorrectFormation::grounditems(int index) const {
  // @@protoc_insertion_point(field_get:msg.CorrectFormation.GroundItems)
  return _internal_grounditems(index);
}
inline ::msg::ItemOnTheGround* CorrectFormation::_internal_add_grounditems() {
  return _impl_.grounditems_.Add();
}
inline ::msg::ItemOnTheGround* CorrectFormation::add_grounditems() {
  ::msg::ItemOnTheGround* _add = _internal_add_grounditems();
  // @@protoc_insertion_point(field_add:msg.CorrectFormation.GroundItems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ItemOnTheGround >&
CorrectFormation::grounditems() const {
  // @@protoc_insertion_point(field_list:msg.CorrectFormation.GroundItems)
  return _impl_.grounditems_;
}

// int32 PlayerIndex = 5;
inline void CorrectFormation::clear_playerindex() {
  _impl_.playerindex_ = 0;
}
inline int32_t CorrectFormation::_internal_playerindex() const {
  return _impl_.playerindex_;
}
inline int32_t CorrectFormation::playerindex() const {
  // @@protoc_insertion_point(field_get:msg.CorrectFormation.PlayerIndex)
  return _internal_playerindex();
}
inline void CorrectFormation::_internal_set_playerindex(int32_t value) {
  
  _impl_.playerindex_ = value;
}
inline void CorrectFormation::set_playerindex(int32_t value) {
  _internal_set_playerindex(value);
  // @@protoc_insertion_point(field_set:msg.CorrectFormation.PlayerIndex)
}

// -------------------------------------------------------------------

// CSReqSetMessengerPos

// .msg.PositionFloat2D Pos = 1;
inline bool CSReqSetMessengerPos::_internal_has_pos() const {
  return this != internal_default_instance() && _impl_.pos_ != nullptr;
}
inline bool CSReqSetMessengerPos::has_pos() const {
  return _internal_has_pos();
}
inline void CSReqSetMessengerPos::clear_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
}
inline const ::msg::PositionFloat2D& CSReqSetMessengerPos::_internal_pos() const {
  const ::msg::PositionFloat2D* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionFloat2D&>(
      ::msg::_PositionFloat2D_default_instance_);
}
inline const ::msg::PositionFloat2D& CSReqSetMessengerPos::pos() const {
  // @@protoc_insertion_point(field_get:msg.CSReqSetMessengerPos.Pos)
  return _internal_pos();
}
inline void CSReqSetMessengerPos::unsafe_arena_set_allocated_pos(
    ::msg::PositionFloat2D* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqSetMessengerPos.Pos)
}
inline ::msg::PositionFloat2D* CSReqSetMessengerPos::release_pos() {
  
  ::msg::PositionFloat2D* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionFloat2D* CSReqSetMessengerPos::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:msg.CSReqSetMessengerPos.Pos)
  
  ::msg::PositionFloat2D* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::msg::PositionFloat2D* CSReqSetMessengerPos::_internal_mutable_pos() {
  
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionFloat2D>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::msg::PositionFloat2D* CSReqSetMessengerPos::mutable_pos() {
  ::msg::PositionFloat2D* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:msg.CSReqSetMessengerPos.Pos)
  return _msg;
}
inline void CSReqSetMessengerPos::set_allocated_pos(::msg::PositionFloat2D* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqSetMessengerPos.Pos)
}

// .msg.MessengerMoveType Type = 2;
inline void CSReqSetMessengerPos::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::MessengerMoveType CSReqSetMessengerPos::_internal_type() const {
  return static_cast< ::msg::MessengerMoveType >(_impl_.type_);
}
inline ::msg::MessengerMoveType CSReqSetMessengerPos::type() const {
  // @@protoc_insertion_point(field_get:msg.CSReqSetMessengerPos.Type)
  return _internal_type();
}
inline void CSReqSetMessengerPos::_internal_set_type(::msg::MessengerMoveType value) {
  
  _impl_.type_ = value;
}
inline void CSReqSetMessengerPos::set_type(::msg::MessengerMoveType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.CSReqSetMessengerPos.Type)
}

// -------------------------------------------------------------------

// CSReqPvpSetReadyState

// bool State = 1;
inline void CSReqPvpSetReadyState::clear_state() {
  _impl_.state_ = false;
}
inline bool CSReqPvpSetReadyState::_internal_state() const {
  return _impl_.state_;
}
inline bool CSReqPvpSetReadyState::state() const {
  // @@protoc_insertion_point(field_get:msg.CSReqPvpSetReadyState.State)
  return _internal_state();
}
inline void CSReqPvpSetReadyState::_internal_set_state(bool value) {
  
  _impl_.state_ = value;
}
inline void CSReqPvpSetReadyState::set_state(bool value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:msg.CSReqPvpSetReadyState.State)
}

// -------------------------------------------------------------------

// CSReqSetRefreshShopLock

// bool IsLock = 1;
inline void CSReqSetRefreshShopLock::clear_islock() {
  _impl_.islock_ = false;
}
inline bool CSReqSetRefreshShopLock::_internal_islock() const {
  return _impl_.islock_;
}
inline bool CSReqSetRefreshShopLock::islock() const {
  // @@protoc_insertion_point(field_get:msg.CSReqSetRefreshShopLock.IsLock)
  return _internal_islock();
}
inline void CSReqSetRefreshShopLock::_internal_set_islock(bool value) {
  
  _impl_.islock_ = value;
}
inline void CSReqSetRefreshShopLock::set_islock(bool value) {
  _internal_set_islock(value);
  // @@protoc_insertion_point(field_set:msg.CSReqSetRefreshShopLock.IsLock)
}

// -------------------------------------------------------------------

// CSReqRetrieveChess

// .msg.PositionInt2D ChessPos = 1;
inline bool CSReqRetrieveChess::_internal_has_chesspos() const {
  return this != internal_default_instance() && _impl_.chesspos_ != nullptr;
}
inline bool CSReqRetrieveChess::has_chesspos() const {
  return _internal_has_chesspos();
}
inline void CSReqRetrieveChess::clear_chesspos() {
  if (GetArenaForAllocation() == nullptr && _impl_.chesspos_ != nullptr) {
    delete _impl_.chesspos_;
  }
  _impl_.chesspos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSReqRetrieveChess::_internal_chesspos() const {
  const ::msg::PositionInt2D* p = _impl_.chesspos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSReqRetrieveChess::chesspos() const {
  // @@protoc_insertion_point(field_get:msg.CSReqRetrieveChess.ChessPos)
  return _internal_chesspos();
}
inline void CSReqRetrieveChess::unsafe_arena_set_allocated_chesspos(
    ::msg::PositionInt2D* chesspos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chesspos_);
  }
  _impl_.chesspos_ = chesspos;
  if (chesspos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqRetrieveChess.ChessPos)
}
inline ::msg::PositionInt2D* CSReqRetrieveChess::release_chesspos() {
  
  ::msg::PositionInt2D* temp = _impl_.chesspos_;
  _impl_.chesspos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSReqRetrieveChess::unsafe_arena_release_chesspos() {
  // @@protoc_insertion_point(field_release:msg.CSReqRetrieveChess.ChessPos)
  
  ::msg::PositionInt2D* temp = _impl_.chesspos_;
  _impl_.chesspos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSReqRetrieveChess::_internal_mutable_chesspos() {
  
  if (_impl_.chesspos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.chesspos_ = p;
  }
  return _impl_.chesspos_;
}
inline ::msg::PositionInt2D* CSReqRetrieveChess::mutable_chesspos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_chesspos();
  // @@protoc_insertion_point(field_mutable:msg.CSReqRetrieveChess.ChessPos)
  return _msg;
}
inline void CSReqRetrieveChess::set_allocated_chesspos(::msg::PositionInt2D* chesspos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chesspos_;
  }
  if (chesspos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chesspos);
    if (message_arena != submessage_arena) {
      chesspos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chesspos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chesspos_ = chesspos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqRetrieveChess.ChessPos)
}

// int32 BagIndex = 2;
inline void CSReqRetrieveChess::clear_bagindex() {
  _impl_.bagindex_ = 0;
}
inline int32_t CSReqRetrieveChess::_internal_bagindex() const {
  return _impl_.bagindex_;
}
inline int32_t CSReqRetrieveChess::bagindex() const {
  // @@protoc_insertion_point(field_get:msg.CSReqRetrieveChess.BagIndex)
  return _internal_bagindex();
}
inline void CSReqRetrieveChess::_internal_set_bagindex(int32_t value) {
  
  _impl_.bagindex_ = value;
}
inline void CSReqRetrieveChess::set_bagindex(int32_t value) {
  _internal_set_bagindex(value);
  // @@protoc_insertion_point(field_set:msg.CSReqRetrieveChess.BagIndex)
}

// -------------------------------------------------------------------

// CSReqBuyChess

// int32 ShopIndex = 1;
inline void CSReqBuyChess::clear_shopindex() {
  _impl_.shopindex_ = 0;
}
inline int32_t CSReqBuyChess::_internal_shopindex() const {
  return _impl_.shopindex_;
}
inline int32_t CSReqBuyChess::shopindex() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBuyChess.ShopIndex)
  return _internal_shopindex();
}
inline void CSReqBuyChess::_internal_set_shopindex(int32_t value) {
  
  _impl_.shopindex_ = value;
}
inline void CSReqBuyChess::set_shopindex(int32_t value) {
  _internal_set_shopindex(value);
  // @@protoc_insertion_point(field_set:msg.CSReqBuyChess.ShopIndex)
}

// bool IsToBag = 2;
inline void CSReqBuyChess::clear_istobag() {
  _impl_.istobag_ = false;
}
inline bool CSReqBuyChess::_internal_istobag() const {
  return _impl_.istobag_;
}
inline bool CSReqBuyChess::istobag() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBuyChess.IsToBag)
  return _internal_istobag();
}
inline void CSReqBuyChess::_internal_set_istobag(bool value) {
  
  _impl_.istobag_ = value;
}
inline void CSReqBuyChess::set_istobag(bool value) {
  _internal_set_istobag(value);
  // @@protoc_insertion_point(field_set:msg.CSReqBuyChess.IsToBag)
}

// int32 BagIndex = 3;
inline void CSReqBuyChess::clear_bagindex() {
  _impl_.bagindex_ = 0;
}
inline int32_t CSReqBuyChess::_internal_bagindex() const {
  return _impl_.bagindex_;
}
inline int32_t CSReqBuyChess::bagindex() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBuyChess.BagIndex)
  return _internal_bagindex();
}
inline void CSReqBuyChess::_internal_set_bagindex(int32_t value) {
  
  _impl_.bagindex_ = value;
}
inline void CSReqBuyChess::set_bagindex(int32_t value) {
  _internal_set_bagindex(value);
  // @@protoc_insertion_point(field_set:msg.CSReqBuyChess.BagIndex)
}

// int32 Tx = 4;
inline void CSReqBuyChess::clear_tx() {
  _impl_.tx_ = 0;
}
inline int32_t CSReqBuyChess::_internal_tx() const {
  return _impl_.tx_;
}
inline int32_t CSReqBuyChess::tx() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBuyChess.Tx)
  return _internal_tx();
}
inline void CSReqBuyChess::_internal_set_tx(int32_t value) {
  
  _impl_.tx_ = value;
}
inline void CSReqBuyChess::set_tx(int32_t value) {
  _internal_set_tx(value);
  // @@protoc_insertion_point(field_set:msg.CSReqBuyChess.Tx)
}

// int32 Ty = 5;
inline void CSReqBuyChess::clear_ty() {
  _impl_.ty_ = 0;
}
inline int32_t CSReqBuyChess::_internal_ty() const {
  return _impl_.ty_;
}
inline int32_t CSReqBuyChess::ty() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBuyChess.Ty)
  return _internal_ty();
}
inline void CSReqBuyChess::_internal_set_ty(int32_t value) {
  
  _impl_.ty_ = value;
}
inline void CSReqBuyChess::set_ty(int32_t value) {
  _internal_set_ty(value);
  // @@protoc_insertion_point(field_set:msg.CSReqBuyChess.Ty)
}

// bool IsDrag = 6;
inline void CSReqBuyChess::clear_isdrag() {
  _impl_.isdrag_ = false;
}
inline bool CSReqBuyChess::_internal_isdrag() const {
  return _impl_.isdrag_;
}
inline bool CSReqBuyChess::isdrag() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBuyChess.IsDrag)
  return _internal_isdrag();
}
inline void CSReqBuyChess::_internal_set_isdrag(bool value) {
  
  _impl_.isdrag_ = value;
}
inline void CSReqBuyChess::set_isdrag(bool value) {
  _internal_set_isdrag(value);
  // @@protoc_insertion_point(field_set:msg.CSReqBuyChess.IsDrag)
}

// -------------------------------------------------------------------

// CSReqSellChessInBag

// int32 BagIndex = 1;
inline void CSReqSellChessInBag::clear_bagindex() {
  _impl_.bagindex_ = 0;
}
inline int32_t CSReqSellChessInBag::_internal_bagindex() const {
  return _impl_.bagindex_;
}
inline int32_t CSReqSellChessInBag::bagindex() const {
  // @@protoc_insertion_point(field_get:msg.CSReqSellChessInBag.BagIndex)
  return _internal_bagindex();
}
inline void CSReqSellChessInBag::_internal_set_bagindex(int32_t value) {
  
  _impl_.bagindex_ = value;
}
inline void CSReqSellChessInBag::set_bagindex(int32_t value) {
  _internal_set_bagindex(value);
  // @@protoc_insertion_point(field_set:msg.CSReqSellChessInBag.BagIndex)
}

// -------------------------------------------------------------------

// CSReqSellChessOnBoard

// .msg.PositionInt2D ChessPos = 1;
inline bool CSReqSellChessOnBoard::_internal_has_chesspos() const {
  return this != internal_default_instance() && _impl_.chesspos_ != nullptr;
}
inline bool CSReqSellChessOnBoard::has_chesspos() const {
  return _internal_has_chesspos();
}
inline void CSReqSellChessOnBoard::clear_chesspos() {
  if (GetArenaForAllocation() == nullptr && _impl_.chesspos_ != nullptr) {
    delete _impl_.chesspos_;
  }
  _impl_.chesspos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSReqSellChessOnBoard::_internal_chesspos() const {
  const ::msg::PositionInt2D* p = _impl_.chesspos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSReqSellChessOnBoard::chesspos() const {
  // @@protoc_insertion_point(field_get:msg.CSReqSellChessOnBoard.ChessPos)
  return _internal_chesspos();
}
inline void CSReqSellChessOnBoard::unsafe_arena_set_allocated_chesspos(
    ::msg::PositionInt2D* chesspos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chesspos_);
  }
  _impl_.chesspos_ = chesspos;
  if (chesspos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqSellChessOnBoard.ChessPos)
}
inline ::msg::PositionInt2D* CSReqSellChessOnBoard::release_chesspos() {
  
  ::msg::PositionInt2D* temp = _impl_.chesspos_;
  _impl_.chesspos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSReqSellChessOnBoard::unsafe_arena_release_chesspos() {
  // @@protoc_insertion_point(field_release:msg.CSReqSellChessOnBoard.ChessPos)
  
  ::msg::PositionInt2D* temp = _impl_.chesspos_;
  _impl_.chesspos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSReqSellChessOnBoard::_internal_mutable_chesspos() {
  
  if (_impl_.chesspos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.chesspos_ = p;
  }
  return _impl_.chesspos_;
}
inline ::msg::PositionInt2D* CSReqSellChessOnBoard::mutable_chesspos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_chesspos();
  // @@protoc_insertion_point(field_mutable:msg.CSReqSellChessOnBoard.ChessPos)
  return _msg;
}
inline void CSReqSellChessOnBoard::set_allocated_chesspos(::msg::PositionInt2D* chesspos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chesspos_;
  }
  if (chesspos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chesspos);
    if (message_arena != submessage_arena) {
      chesspos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chesspos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chesspos_ = chesspos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqSellChessOnBoard.ChessPos)
}

// -------------------------------------------------------------------

// CSReqMoveChess

// .msg.PositionInt2D SrcChessPos = 1;
inline bool CSReqMoveChess::_internal_has_srcchesspos() const {
  return this != internal_default_instance() && _impl_.srcchesspos_ != nullptr;
}
inline bool CSReqMoveChess::has_srcchesspos() const {
  return _internal_has_srcchesspos();
}
inline void CSReqMoveChess::clear_srcchesspos() {
  if (GetArenaForAllocation() == nullptr && _impl_.srcchesspos_ != nullptr) {
    delete _impl_.srcchesspos_;
  }
  _impl_.srcchesspos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSReqMoveChess::_internal_srcchesspos() const {
  const ::msg::PositionInt2D* p = _impl_.srcchesspos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSReqMoveChess::srcchesspos() const {
  // @@protoc_insertion_point(field_get:msg.CSReqMoveChess.SrcChessPos)
  return _internal_srcchesspos();
}
inline void CSReqMoveChess::unsafe_arena_set_allocated_srcchesspos(
    ::msg::PositionInt2D* srcchesspos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.srcchesspos_);
  }
  _impl_.srcchesspos_ = srcchesspos;
  if (srcchesspos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqMoveChess.SrcChessPos)
}
inline ::msg::PositionInt2D* CSReqMoveChess::release_srcchesspos() {
  
  ::msg::PositionInt2D* temp = _impl_.srcchesspos_;
  _impl_.srcchesspos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSReqMoveChess::unsafe_arena_release_srcchesspos() {
  // @@protoc_insertion_point(field_release:msg.CSReqMoveChess.SrcChessPos)
  
  ::msg::PositionInt2D* temp = _impl_.srcchesspos_;
  _impl_.srcchesspos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSReqMoveChess::_internal_mutable_srcchesspos() {
  
  if (_impl_.srcchesspos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.srcchesspos_ = p;
  }
  return _impl_.srcchesspos_;
}
inline ::msg::PositionInt2D* CSReqMoveChess::mutable_srcchesspos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_srcchesspos();
  // @@protoc_insertion_point(field_mutable:msg.CSReqMoveChess.SrcChessPos)
  return _msg;
}
inline void CSReqMoveChess::set_allocated_srcchesspos(::msg::PositionInt2D* srcchesspos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.srcchesspos_;
  }
  if (srcchesspos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(srcchesspos);
    if (message_arena != submessage_arena) {
      srcchesspos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srcchesspos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.srcchesspos_ = srcchesspos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqMoveChess.SrcChessPos)
}

// .msg.PositionInt2D DestChessPos = 2;
inline bool CSReqMoveChess::_internal_has_destchesspos() const {
  return this != internal_default_instance() && _impl_.destchesspos_ != nullptr;
}
inline bool CSReqMoveChess::has_destchesspos() const {
  return _internal_has_destchesspos();
}
inline void CSReqMoveChess::clear_destchesspos() {
  if (GetArenaForAllocation() == nullptr && _impl_.destchesspos_ != nullptr) {
    delete _impl_.destchesspos_;
  }
  _impl_.destchesspos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSReqMoveChess::_internal_destchesspos() const {
  const ::msg::PositionInt2D* p = _impl_.destchesspos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSReqMoveChess::destchesspos() const {
  // @@protoc_insertion_point(field_get:msg.CSReqMoveChess.DestChessPos)
  return _internal_destchesspos();
}
inline void CSReqMoveChess::unsafe_arena_set_allocated_destchesspos(
    ::msg::PositionInt2D* destchesspos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destchesspos_);
  }
  _impl_.destchesspos_ = destchesspos;
  if (destchesspos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqMoveChess.DestChessPos)
}
inline ::msg::PositionInt2D* CSReqMoveChess::release_destchesspos() {
  
  ::msg::PositionInt2D* temp = _impl_.destchesspos_;
  _impl_.destchesspos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSReqMoveChess::unsafe_arena_release_destchesspos() {
  // @@protoc_insertion_point(field_release:msg.CSReqMoveChess.DestChessPos)
  
  ::msg::PositionInt2D* temp = _impl_.destchesspos_;
  _impl_.destchesspos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSReqMoveChess::_internal_mutable_destchesspos() {
  
  if (_impl_.destchesspos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.destchesspos_ = p;
  }
  return _impl_.destchesspos_;
}
inline ::msg::PositionInt2D* CSReqMoveChess::mutable_destchesspos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_destchesspos();
  // @@protoc_insertion_point(field_mutable:msg.CSReqMoveChess.DestChessPos)
  return _msg;
}
inline void CSReqMoveChess::set_allocated_destchesspos(::msg::PositionInt2D* destchesspos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.destchesspos_;
  }
  if (destchesspos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destchesspos);
    if (message_arena != submessage_arena) {
      destchesspos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destchesspos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destchesspos_ = destchesspos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqMoveChess.DestChessPos)
}

// -------------------------------------------------------------------

// CSReqBuyExp

// int32 Exp = 1;
inline void CSReqBuyExp::clear_exp() {
  _impl_.exp_ = 0;
}
inline int32_t CSReqBuyExp::_internal_exp() const {
  return _impl_.exp_;
}
inline int32_t CSReqBuyExp::exp() const {
  // @@protoc_insertion_point(field_get:msg.CSReqBuyExp.Exp)
  return _internal_exp();
}
inline void CSReqBuyExp::_internal_set_exp(int32_t value) {
  
  _impl_.exp_ = value;
}
inline void CSReqBuyExp::set_exp(int32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:msg.CSReqBuyExp.Exp)
}

// -------------------------------------------------------------------

// CSReqRefreshShop

// -------------------------------------------------------------------

// CSReqMoveChessInBagToMap

// int32 BagIdx = 1;
inline void CSReqMoveChessInBagToMap::clear_bagidx() {
  _impl_.bagidx_ = 0;
}
inline int32_t CSReqMoveChessInBagToMap::_internal_bagidx() const {
  return _impl_.bagidx_;
}
inline int32_t CSReqMoveChessInBagToMap::bagidx() const {
  // @@protoc_insertion_point(field_get:msg.CSReqMoveChessInBagToMap.BagIdx)
  return _internal_bagidx();
}
inline void CSReqMoveChessInBagToMap::_internal_set_bagidx(int32_t value) {
  
  _impl_.bagidx_ = value;
}
inline void CSReqMoveChessInBagToMap::set_bagidx(int32_t value) {
  _internal_set_bagidx(value);
  // @@protoc_insertion_point(field_set:msg.CSReqMoveChessInBagToMap.BagIdx)
}

// .msg.PositionInt2D DestPos = 2;
inline bool CSReqMoveChessInBagToMap::_internal_has_destpos() const {
  return this != internal_default_instance() && _impl_.destpos_ != nullptr;
}
inline bool CSReqMoveChessInBagToMap::has_destpos() const {
  return _internal_has_destpos();
}
inline void CSReqMoveChessInBagToMap::clear_destpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.destpos_ != nullptr) {
    delete _impl_.destpos_;
  }
  _impl_.destpos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSReqMoveChessInBagToMap::_internal_destpos() const {
  const ::msg::PositionInt2D* p = _impl_.destpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSReqMoveChessInBagToMap::destpos() const {
  // @@protoc_insertion_point(field_get:msg.CSReqMoveChessInBagToMap.DestPos)
  return _internal_destpos();
}
inline void CSReqMoveChessInBagToMap::unsafe_arena_set_allocated_destpos(
    ::msg::PositionInt2D* destpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destpos_);
  }
  _impl_.destpos_ = destpos;
  if (destpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqMoveChessInBagToMap.DestPos)
}
inline ::msg::PositionInt2D* CSReqMoveChessInBagToMap::release_destpos() {
  
  ::msg::PositionInt2D* temp = _impl_.destpos_;
  _impl_.destpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSReqMoveChessInBagToMap::unsafe_arena_release_destpos() {
  // @@protoc_insertion_point(field_release:msg.CSReqMoveChessInBagToMap.DestPos)
  
  ::msg::PositionInt2D* temp = _impl_.destpos_;
  _impl_.destpos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSReqMoveChessInBagToMap::_internal_mutable_destpos() {
  
  if (_impl_.destpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.destpos_ = p;
  }
  return _impl_.destpos_;
}
inline ::msg::PositionInt2D* CSReqMoveChessInBagToMap::mutable_destpos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_destpos();
  // @@protoc_insertion_point(field_mutable:msg.CSReqMoveChessInBagToMap.DestPos)
  return _msg;
}
inline void CSReqMoveChessInBagToMap::set_allocated_destpos(::msg::PositionInt2D* destpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.destpos_;
  }
  if (destpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destpos);
    if (message_arena != submessage_arena) {
      destpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destpos_ = destpos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqMoveChessInBagToMap.DestPos)
}

// -------------------------------------------------------------------

// CSReqMoveChessWithinBag

// int32 SrcBagIdx = 1;
inline void CSReqMoveChessWithinBag::clear_srcbagidx() {
  _impl_.srcbagidx_ = 0;
}
inline int32_t CSReqMoveChessWithinBag::_internal_srcbagidx() const {
  return _impl_.srcbagidx_;
}
inline int32_t CSReqMoveChessWithinBag::srcbagidx() const {
  // @@protoc_insertion_point(field_get:msg.CSReqMoveChessWithinBag.SrcBagIdx)
  return _internal_srcbagidx();
}
inline void CSReqMoveChessWithinBag::_internal_set_srcbagidx(int32_t value) {
  
  _impl_.srcbagidx_ = value;
}
inline void CSReqMoveChessWithinBag::set_srcbagidx(int32_t value) {
  _internal_set_srcbagidx(value);
  // @@protoc_insertion_point(field_set:msg.CSReqMoveChessWithinBag.SrcBagIdx)
}

// int32 DestBagIdx = 2;
inline void CSReqMoveChessWithinBag::clear_destbagidx() {
  _impl_.destbagidx_ = 0;
}
inline int32_t CSReqMoveChessWithinBag::_internal_destbagidx() const {
  return _impl_.destbagidx_;
}
inline int32_t CSReqMoveChessWithinBag::destbagidx() const {
  // @@protoc_insertion_point(field_get:msg.CSReqMoveChessWithinBag.DestBagIdx)
  return _internal_destbagidx();
}
inline void CSReqMoveChessWithinBag::_internal_set_destbagidx(int32_t value) {
  
  _impl_.destbagidx_ = value;
}
inline void CSReqMoveChessWithinBag::set_destbagidx(int32_t value) {
  _internal_set_destbagidx(value);
  // @@protoc_insertion_point(field_set:msg.CSReqMoveChessWithinBag.DestBagIdx)
}

// -------------------------------------------------------------------

// CSReqPlayerLoaded

// -------------------------------------------------------------------

// CSReqPlayerRoundEnd

// -------------------------------------------------------------------

// CSReqPickupEquipment

// int32 NetId = 1;
inline void CSReqPickupEquipment::clear_netid() {
  _impl_.netid_ = 0;
}
inline int32_t CSReqPickupEquipment::_internal_netid() const {
  return _impl_.netid_;
}
inline int32_t CSReqPickupEquipment::netid() const {
  // @@protoc_insertion_point(field_get:msg.CSReqPickupEquipment.NetId)
  return _internal_netid();
}
inline void CSReqPickupEquipment::_internal_set_netid(int32_t value) {
  
  _impl_.netid_ = value;
}
inline void CSReqPickupEquipment::set_netid(int32_t value) {
  _internal_set_netid(value);
  // @@protoc_insertion_point(field_set:msg.CSReqPickupEquipment.NetId)
}

// -------------------------------------------------------------------

// CSReqCraftEquip

// repeated int32 EquipNetIds = 1;
inline int CSReqCraftEquip::_internal_equipnetids_size() const {
  return _impl_.equipnetids_.size();
}
inline int CSReqCraftEquip::equipnetids_size() const {
  return _internal_equipnetids_size();
}
inline void CSReqCraftEquip::clear_equipnetids() {
  _impl_.equipnetids_.Clear();
}
inline int32_t CSReqCraftEquip::_internal_equipnetids(int index) const {
  return _impl_.equipnetids_.Get(index);
}
inline int32_t CSReqCraftEquip::equipnetids(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSReqCraftEquip.EquipNetIds)
  return _internal_equipnetids(index);
}
inline void CSReqCraftEquip::set_equipnetids(int index, int32_t value) {
  _impl_.equipnetids_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSReqCraftEquip.EquipNetIds)
}
inline void CSReqCraftEquip::_internal_add_equipnetids(int32_t value) {
  _impl_.equipnetids_.Add(value);
}
inline void CSReqCraftEquip::add_equipnetids(int32_t value) {
  _internal_add_equipnetids(value);
  // @@protoc_insertion_point(field_add:msg.CSReqCraftEquip.EquipNetIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CSReqCraftEquip::_internal_equipnetids() const {
  return _impl_.equipnetids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CSReqCraftEquip::equipnetids() const {
  // @@protoc_insertion_point(field_list:msg.CSReqCraftEquip.EquipNetIds)
  return _internal_equipnetids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CSReqCraftEquip::_internal_mutable_equipnetids() {
  return &_impl_.equipnetids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CSReqCraftEquip::mutable_equipnetids() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSReqCraftEquip.EquipNetIds)
  return _internal_mutable_equipnetids();
}

// bool IsToChess = 2;
inline void CSReqCraftEquip::clear_istochess() {
  _impl_.istochess_ = false;
}
inline bool CSReqCraftEquip::_internal_istochess() const {
  return _impl_.istochess_;
}
inline bool CSReqCraftEquip::istochess() const {
  // @@protoc_insertion_point(field_get:msg.CSReqCraftEquip.IsToChess)
  return _internal_istochess();
}
inline void CSReqCraftEquip::_internal_set_istochess(bool value) {
  
  _impl_.istochess_ = value;
}
inline void CSReqCraftEquip::set_istochess(bool value) {
  _internal_set_istochess(value);
  // @@protoc_insertion_point(field_set:msg.CSReqCraftEquip.IsToChess)
}

// -------------------------------------------------------------------

// CSReqUseEquipment

// int32 NetId = 1;
inline void CSReqUseEquipment::clear_netid() {
  _impl_.netid_ = 0;
}
inline int32_t CSReqUseEquipment::_internal_netid() const {
  return _impl_.netid_;
}
inline int32_t CSReqUseEquipment::netid() const {
  // @@protoc_insertion_point(field_get:msg.CSReqUseEquipment.NetId)
  return _internal_netid();
}
inline void CSReqUseEquipment::_internal_set_netid(int32_t value) {
  
  _impl_.netid_ = value;
}
inline void CSReqUseEquipment::set_netid(int32_t value) {
  _internal_set_netid(value);
  // @@protoc_insertion_point(field_set:msg.CSReqUseEquipment.NetId)
}

// bool IsChessInBag = 2;
inline void CSReqUseEquipment::clear_ischessinbag() {
  _impl_.ischessinbag_ = false;
}
inline bool CSReqUseEquipment::_internal_ischessinbag() const {
  return _impl_.ischessinbag_;
}
inline bool CSReqUseEquipment::ischessinbag() const {
  // @@protoc_insertion_point(field_get:msg.CSReqUseEquipment.IsChessInBag)
  return _internal_ischessinbag();
}
inline void CSReqUseEquipment::_internal_set_ischessinbag(bool value) {
  
  _impl_.ischessinbag_ = value;
}
inline void CSReqUseEquipment::set_ischessinbag(bool value) {
  _internal_set_ischessinbag(value);
  // @@protoc_insertion_point(field_set:msg.CSReqUseEquipment.IsChessInBag)
}

// int32 BagIndex = 3;
inline void CSReqUseEquipment::clear_bagindex() {
  _impl_.bagindex_ = 0;
}
inline int32_t CSReqUseEquipment::_internal_bagindex() const {
  return _impl_.bagindex_;
}
inline int32_t CSReqUseEquipment::bagindex() const {
  // @@protoc_insertion_point(field_get:msg.CSReqUseEquipment.BagIndex)
  return _internal_bagindex();
}
inline void CSReqUseEquipment::_internal_set_bagindex(int32_t value) {
  
  _impl_.bagindex_ = value;
}
inline void CSReqUseEquipment::set_bagindex(int32_t value) {
  _internal_set_bagindex(value);
  // @@protoc_insertion_point(field_set:msg.CSReqUseEquipment.BagIndex)
}

// .msg.PositionInt2D Pos = 4;
inline bool CSReqUseEquipment::_internal_has_pos() const {
  return this != internal_default_instance() && _impl_.pos_ != nullptr;
}
inline bool CSReqUseEquipment::has_pos() const {
  return _internal_has_pos();
}
inline void CSReqUseEquipment::clear_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSReqUseEquipment::_internal_pos() const {
  const ::msg::PositionInt2D* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSReqUseEquipment::pos() const {
  // @@protoc_insertion_point(field_get:msg.CSReqUseEquipment.Pos)
  return _internal_pos();
}
inline void CSReqUseEquipment::unsafe_arena_set_allocated_pos(
    ::msg::PositionInt2D* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSReqUseEquipment.Pos)
}
inline ::msg::PositionInt2D* CSReqUseEquipment::release_pos() {
  
  ::msg::PositionInt2D* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSReqUseEquipment::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:msg.CSReqUseEquipment.Pos)
  
  ::msg::PositionInt2D* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSReqUseEquipment::_internal_mutable_pos() {
  
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::msg::PositionInt2D* CSReqUseEquipment::mutable_pos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:msg.CSReqUseEquipment.Pos)
  return _msg;
}
inline void CSReqUseEquipment::set_allocated_pos(::msg::PositionInt2D* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqUseEquipment.Pos)
}

// -------------------------------------------------------------------

// CSReqUpdateAntiAddictionTime

// -------------------------------------------------------------------

// CSReqCancelReconnect

// -------------------------------------------------------------------

// CSReqSetAutoUpgradeCharacter

// bool SwitchOn = 1;
inline void CSReqSetAutoUpgradeCharacter::clear_switchon() {
  _impl_.switchon_ = false;
}
inline bool CSReqSetAutoUpgradeCharacter::_internal_switchon() const {
  return _impl_.switchon_;
}
inline bool CSReqSetAutoUpgradeCharacter::switchon() const {
  // @@protoc_insertion_point(field_get:msg.CSReqSetAutoUpgradeCharacter.SwitchOn)
  return _internal_switchon();
}
inline void CSReqSetAutoUpgradeCharacter::_internal_set_switchon(bool value) {
  
  _impl_.switchon_ = value;
}
inline void CSReqSetAutoUpgradeCharacter::set_switchon(bool value) {
  _internal_set_switchon(value);
  // @@protoc_insertion_point(field_set:msg.CSReqSetAutoUpgradeCharacter.SwitchOn)
}

// -------------------------------------------------------------------

// CSReqReconnect

// -------------------------------------------------------------------

// CSReqManuallyUpgradeCharacter

// int32 BagIndex = 1;
inline void CSReqManuallyUpgradeCharacter::clear_bagindex() {
  _impl_.bagindex_ = 0;
}
inline int32_t CSReqManuallyUpgradeCharacter::_internal_bagindex() const {
  return _impl_.bagindex_;
}
inline int32_t CSReqManuallyUpgradeCharacter::bagindex() const {
  // @@protoc_insertion_point(field_get:msg.CSReqManuallyUpgradeCharacter.BagIndex)
  return _internal_bagindex();
}
inline void CSReqManuallyUpgradeCharacter::_internal_set_bagindex(int32_t value) {
  
  _impl_.bagindex_ = value;
}
inline void CSReqManuallyUpgradeCharacter::set_bagindex(int32_t value) {
  _internal_set_bagindex(value);
  // @@protoc_insertion_point(field_set:msg.CSReqManuallyUpgradeCharacter.BagIndex)
}

// int32 Tx = 2;
inline void CSReqManuallyUpgradeCharacter::clear_tx() {
  _impl_.tx_ = 0;
}
inline int32_t CSReqManuallyUpgradeCharacter::_internal_tx() const {
  return _impl_.tx_;
}
inline int32_t CSReqManuallyUpgradeCharacter::tx() const {
  // @@protoc_insertion_point(field_get:msg.CSReqManuallyUpgradeCharacter.Tx)
  return _internal_tx();
}
inline void CSReqManuallyUpgradeCharacter::_internal_set_tx(int32_t value) {
  
  _impl_.tx_ = value;
}
inline void CSReqManuallyUpgradeCharacter::set_tx(int32_t value) {
  _internal_set_tx(value);
  // @@protoc_insertion_point(field_set:msg.CSReqManuallyUpgradeCharacter.Tx)
}

// int32 Ty = 3;
inline void CSReqManuallyUpgradeCharacter::clear_ty() {
  _impl_.ty_ = 0;
}
inline int32_t CSReqManuallyUpgradeCharacter::_internal_ty() const {
  return _impl_.ty_;
}
inline int32_t CSReqManuallyUpgradeCharacter::ty() const {
  // @@protoc_insertion_point(field_get:msg.CSReqManuallyUpgradeCharacter.Ty)
  return _internal_ty();
}
inline void CSReqManuallyUpgradeCharacter::_internal_set_ty(int32_t value) {
  
  _impl_.ty_ = value;
}
inline void CSReqManuallyUpgradeCharacter::set_ty(int32_t value) {
  _internal_set_ty(value);
  // @@protoc_insertion_point(field_set:msg.CSReqManuallyUpgradeCharacter.Ty)
}

// bool IsInBag = 4;
inline void CSReqManuallyUpgradeCharacter::clear_isinbag() {
  _impl_.isinbag_ = false;
}
inline bool CSReqManuallyUpgradeCharacter::_internal_isinbag() const {
  return _impl_.isinbag_;
}
inline bool CSReqManuallyUpgradeCharacter::isinbag() const {
  // @@protoc_insertion_point(field_get:msg.CSReqManuallyUpgradeCharacter.IsInBag)
  return _internal_isinbag();
}
inline void CSReqManuallyUpgradeCharacter::_internal_set_isinbag(bool value) {
  
  _impl_.isinbag_ = value;
}
inline void CSReqManuallyUpgradeCharacter::set_isinbag(bool value) {
  _internal_set_isinbag(value);
  // @@protoc_insertion_point(field_set:msg.CSReqManuallyUpgradeCharacter.IsInBag)
}

// -------------------------------------------------------------------

// CSReqQuitBattle

// -------------------------------------------------------------------

// CSReqSusPendGame

// bool susPend = 1;
inline void CSReqSusPendGame::clear_suspend() {
  _impl_.suspend_ = false;
}
inline bool CSReqSusPendGame::_internal_suspend() const {
  return _impl_.suspend_;
}
inline bool CSReqSusPendGame::suspend() const {
  // @@protoc_insertion_point(field_get:msg.CSReqSusPendGame.susPend)
  return _internal_suspend();
}
inline void CSReqSusPendGame::_internal_set_suspend(bool value) {
  
  _impl_.suspend_ = value;
}
inline void CSReqSusPendGame::set_suspend(bool value) {
  _internal_set_suspend(value);
  // @@protoc_insertion_point(field_set:msg.CSReqSusPendGame.susPend)
}

// -------------------------------------------------------------------

// CSReqChessDB

// -------------------------------------------------------------------

// CSReqStatisticsInfo

// -------------------------------------------------------------------

// CSReqPassThrough

// bytes data = 1;
inline void CSReqPassThrough::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& CSReqPassThrough::data() const {
  // @@protoc_insertion_point(field_get:msg.CSReqPassThrough.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSReqPassThrough::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSReqPassThrough.data)
}
inline std::string* CSReqPassThrough::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:msg.CSReqPassThrough.data)
  return _s;
}
inline const std::string& CSReqPassThrough::_internal_data() const {
  return _impl_.data_.Get();
}
inline void CSReqPassThrough::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* CSReqPassThrough::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* CSReqPassThrough::release_data() {
  // @@protoc_insertion_point(field_release:msg.CSReqPassThrough.data)
  return _impl_.data_.Release();
}
inline void CSReqPassThrough::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSReqPassThrough.data)
}

// -------------------------------------------------------------------

// CSReqUpdateBattleResult

// -------------------------------------------------------------------

// CSReqVisitPlayer

// int32 SrcPlayerIndex = 1;
inline void CSReqVisitPlayer::clear_srcplayerindex() {
  _impl_.srcplayerindex_ = 0;
}
inline int32_t CSReqVisitPlayer::_internal_srcplayerindex() const {
  return _impl_.srcplayerindex_;
}
inline int32_t CSReqVisitPlayer::srcplayerindex() const {
  // @@protoc_insertion_point(field_get:msg.CSReqVisitPlayer.SrcPlayerIndex)
  return _internal_srcplayerindex();
}
inline void CSReqVisitPlayer::_internal_set_srcplayerindex(int32_t value) {
  
  _impl_.srcplayerindex_ = value;
}
inline void CSReqVisitPlayer::set_srcplayerindex(int32_t value) {
  _internal_set_srcplayerindex(value);
  // @@protoc_insertion_point(field_set:msg.CSReqVisitPlayer.SrcPlayerIndex)
}

// int32 DestPlayerIndex = 2;
inline void CSReqVisitPlayer::clear_destplayerindex() {
  _impl_.destplayerindex_ = 0;
}
inline int32_t CSReqVisitPlayer::_internal_destplayerindex() const {
  return _impl_.destplayerindex_;
}
inline int32_t CSReqVisitPlayer::destplayerindex() const {
  // @@protoc_insertion_point(field_get:msg.CSReqVisitPlayer.DestPlayerIndex)
  return _internal_destplayerindex();
}
inline void CSReqVisitPlayer::_internal_set_destplayerindex(int32_t value) {
  
  _impl_.destplayerindex_ = value;
}
inline void CSReqVisitPlayer::set_destplayerindex(int32_t value) {
  _internal_set_destplayerindex(value);
  // @@protoc_insertion_point(field_set:msg.CSReqVisitPlayer.DestPlayerIndex)
}

// -------------------------------------------------------------------

// CSReqLeaveGameEarly

// -------------------------------------------------------------------

// CSReqReportAbsent

// -------------------------------------------------------------------

// CSRspSetMessengerPos

// bool Success = 1;
inline void CSRspSetMessengerPos::clear_success() {
  _impl_.success_ = false;
}
inline bool CSRspSetMessengerPos::_internal_success() const {
  return _impl_.success_;
}
inline bool CSRspSetMessengerPos::success() const {
  // @@protoc_insertion_point(field_get:msg.CSRspSetMessengerPos.Success)
  return _internal_success();
}
inline void CSRspSetMessengerPos::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CSRspSetMessengerPos::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msg.CSRspSetMessengerPos.Success)
}

// .msg.MessengerMoveType Type = 2;
inline void CSRspSetMessengerPos::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::MessengerMoveType CSRspSetMessengerPos::_internal_type() const {
  return static_cast< ::msg::MessengerMoveType >(_impl_.type_);
}
inline ::msg::MessengerMoveType CSRspSetMessengerPos::type() const {
  // @@protoc_insertion_point(field_get:msg.CSRspSetMessengerPos.Type)
  return _internal_type();
}
inline void CSRspSetMessengerPos::_internal_set_type(::msg::MessengerMoveType value) {
  
  _impl_.type_ = value;
}
inline void CSRspSetMessengerPos::set_type(::msg::MessengerMoveType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.CSRspSetMessengerPos.Type)
}

// -------------------------------------------------------------------

// CSRspPvpSetReadyState

// bool Success = 1;
inline void CSRspPvpSetReadyState::clear_success() {
  _impl_.success_ = false;
}
inline bool CSRspPvpSetReadyState::_internal_success() const {
  return _impl_.success_;
}
inline bool CSRspPvpSetReadyState::success() const {
  // @@protoc_insertion_point(field_get:msg.CSRspPvpSetReadyState.Success)
  return _internal_success();
}
inline void CSRspPvpSetReadyState::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CSRspPvpSetReadyState::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msg.CSRspPvpSetReadyState.Success)
}

// -------------------------------------------------------------------

// CSRspSetRefreshShopLock

// bool Success = 1;
inline void CSRspSetRefreshShopLock::clear_success() {
  _impl_.success_ = false;
}
inline bool CSRspSetRefreshShopLock::_internal_success() const {
  return _impl_.success_;
}
inline bool CSRspSetRefreshShopLock::success() const {
  // @@protoc_insertion_point(field_get:msg.CSRspSetRefreshShopLock.Success)
  return _internal_success();
}
inline void CSRspSetRefreshShopLock::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CSRspSetRefreshShopLock::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msg.CSRspSetRefreshShopLock.Success)
}

// bool IsLock = 2;
inline void CSRspSetRefreshShopLock::clear_islock() {
  _impl_.islock_ = false;
}
inline bool CSRspSetRefreshShopLock::_internal_islock() const {
  return _impl_.islock_;
}
inline bool CSRspSetRefreshShopLock::islock() const {
  // @@protoc_insertion_point(field_get:msg.CSRspSetRefreshShopLock.IsLock)
  return _internal_islock();
}
inline void CSRspSetRefreshShopLock::_internal_set_islock(bool value) {
  
  _impl_.islock_ = value;
}
inline void CSRspSetRefreshShopLock::set_islock(bool value) {
  _internal_set_islock(value);
  // @@protoc_insertion_point(field_set:msg.CSRspSetRefreshShopLock.IsLock)
}

// -------------------------------------------------------------------

// CSRspRetrieveChess

// bool Success = 1;
inline void CSRspRetrieveChess::clear_success() {
  _impl_.success_ = false;
}
inline bool CSRspRetrieveChess::_internal_success() const {
  return _impl_.success_;
}
inline bool CSRspRetrieveChess::success() const {
  // @@protoc_insertion_point(field_get:msg.CSRspRetrieveChess.Success)
  return _internal_success();
}
inline void CSRspRetrieveChess::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CSRspRetrieveChess::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msg.CSRspRetrieveChess.Success)
}

// int32 BagIndex = 2;
inline void CSRspRetrieveChess::clear_bagindex() {
  _impl_.bagindex_ = 0;
}
inline int32_t CSRspRetrieveChess::_internal_bagindex() const {
  return _impl_.bagindex_;
}
inline int32_t CSRspRetrieveChess::bagindex() const {
  // @@protoc_insertion_point(field_get:msg.CSRspRetrieveChess.BagIndex)
  return _internal_bagindex();
}
inline void CSRspRetrieveChess::_internal_set_bagindex(int32_t value) {
  
  _impl_.bagindex_ = value;
}
inline void CSRspRetrieveChess::set_bagindex(int32_t value) {
  _internal_set_bagindex(value);
  // @@protoc_insertion_point(field_set:msg.CSRspRetrieveChess.BagIndex)
}

// .msg.PositionInt2D SrcChessPos = 3;
inline bool CSRspRetrieveChess::_internal_has_srcchesspos() const {
  return this != internal_default_instance() && _impl_.srcchesspos_ != nullptr;
}
inline bool CSRspRetrieveChess::has_srcchesspos() const {
  return _internal_has_srcchesspos();
}
inline void CSRspRetrieveChess::clear_srcchesspos() {
  if (GetArenaForAllocation() == nullptr && _impl_.srcchesspos_ != nullptr) {
    delete _impl_.srcchesspos_;
  }
  _impl_.srcchesspos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSRspRetrieveChess::_internal_srcchesspos() const {
  const ::msg::PositionInt2D* p = _impl_.srcchesspos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSRspRetrieveChess::srcchesspos() const {
  // @@protoc_insertion_point(field_get:msg.CSRspRetrieveChess.SrcChessPos)
  return _internal_srcchesspos();
}
inline void CSRspRetrieveChess::unsafe_arena_set_allocated_srcchesspos(
    ::msg::PositionInt2D* srcchesspos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.srcchesspos_);
  }
  _impl_.srcchesspos_ = srcchesspos;
  if (srcchesspos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspRetrieveChess.SrcChessPos)
}
inline ::msg::PositionInt2D* CSRspRetrieveChess::release_srcchesspos() {
  
  ::msg::PositionInt2D* temp = _impl_.srcchesspos_;
  _impl_.srcchesspos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSRspRetrieveChess::unsafe_arena_release_srcchesspos() {
  // @@protoc_insertion_point(field_release:msg.CSRspRetrieveChess.SrcChessPos)
  
  ::msg::PositionInt2D* temp = _impl_.srcchesspos_;
  _impl_.srcchesspos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSRspRetrieveChess::_internal_mutable_srcchesspos() {
  
  if (_impl_.srcchesspos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.srcchesspos_ = p;
  }
  return _impl_.srcchesspos_;
}
inline ::msg::PositionInt2D* CSRspRetrieveChess::mutable_srcchesspos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_srcchesspos();
  // @@protoc_insertion_point(field_mutable:msg.CSRspRetrieveChess.SrcChessPos)
  return _msg;
}
inline void CSRspRetrieveChess::set_allocated_srcchesspos(::msg::PositionInt2D* srcchesspos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.srcchesspos_;
  }
  if (srcchesspos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(srcchesspos);
    if (message_arena != submessage_arena) {
      srcchesspos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srcchesspos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.srcchesspos_ = srcchesspos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspRetrieveChess.SrcChessPos)
}

// -------------------------------------------------------------------

// CSRspBuyChess

// bool Success = 1;
inline void CSRspBuyChess::clear_success() {
  _impl_.success_ = false;
}
inline bool CSRspBuyChess::_internal_success() const {
  return _impl_.success_;
}
inline bool CSRspBuyChess::success() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBuyChess.Success)
  return _internal_success();
}
inline void CSRspBuyChess::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CSRspBuyChess::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msg.CSRspBuyChess.Success)
}

// int32 BagIndex = 2;
inline void CSRspBuyChess::clear_bagindex() {
  _impl_.bagindex_ = 0;
}
inline int32_t CSRspBuyChess::_internal_bagindex() const {
  return _impl_.bagindex_;
}
inline int32_t CSRspBuyChess::bagindex() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBuyChess.BagIndex)
  return _internal_bagindex();
}
inline void CSRspBuyChess::_internal_set_bagindex(int32_t value) {
  
  _impl_.bagindex_ = value;
}
inline void CSRspBuyChess::set_bagindex(int32_t value) {
  _internal_set_bagindex(value);
  // @@protoc_insertion_point(field_set:msg.CSRspBuyChess.BagIndex)
}

// int32 ShopIndex = 3;
inline void CSRspBuyChess::clear_shopindex() {
  _impl_.shopindex_ = 0;
}
inline int32_t CSRspBuyChess::_internal_shopindex() const {
  return _impl_.shopindex_;
}
inline int32_t CSRspBuyChess::shopindex() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBuyChess.ShopIndex)
  return _internal_shopindex();
}
inline void CSRspBuyChess::_internal_set_shopindex(int32_t value) {
  
  _impl_.shopindex_ = value;
}
inline void CSRspBuyChess::set_shopindex(int32_t value) {
  _internal_set_shopindex(value);
  // @@protoc_insertion_point(field_set:msg.CSRspBuyChess.ShopIndex)
}

// int32 ConfigId = 4;
inline void CSRspBuyChess::clear_configid() {
  _impl_.configid_ = 0;
}
inline int32_t CSRspBuyChess::_internal_configid() const {
  return _impl_.configid_;
}
inline int32_t CSRspBuyChess::configid() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBuyChess.ConfigId)
  return _internal_configid();
}
inline void CSRspBuyChess::_internal_set_configid(int32_t value) {
  
  _impl_.configid_ = value;
}
inline void CSRspBuyChess::set_configid(int32_t value) {
  _internal_set_configid(value);
  // @@protoc_insertion_point(field_set:msg.CSRspBuyChess.ConfigId)
}

// bool IsToBag = 5;
inline void CSRspBuyChess::clear_istobag() {
  _impl_.istobag_ = false;
}
inline bool CSRspBuyChess::_internal_istobag() const {
  return _impl_.istobag_;
}
inline bool CSRspBuyChess::istobag() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBuyChess.IsToBag)
  return _internal_istobag();
}
inline void CSRspBuyChess::_internal_set_istobag(bool value) {
  
  _impl_.istobag_ = value;
}
inline void CSRspBuyChess::set_istobag(bool value) {
  _internal_set_istobag(value);
  // @@protoc_insertion_point(field_set:msg.CSRspBuyChess.IsToBag)
}

// int32 Tx = 6;
inline void CSRspBuyChess::clear_tx() {
  _impl_.tx_ = 0;
}
inline int32_t CSRspBuyChess::_internal_tx() const {
  return _impl_.tx_;
}
inline int32_t CSRspBuyChess::tx() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBuyChess.Tx)
  return _internal_tx();
}
inline void CSRspBuyChess::_internal_set_tx(int32_t value) {
  
  _impl_.tx_ = value;
}
inline void CSRspBuyChess::set_tx(int32_t value) {
  _internal_set_tx(value);
  // @@protoc_insertion_point(field_set:msg.CSRspBuyChess.Tx)
}

// int32 Ty = 7;
inline void CSRspBuyChess::clear_ty() {
  _impl_.ty_ = 0;
}
inline int32_t CSRspBuyChess::_internal_ty() const {
  return _impl_.ty_;
}
inline int32_t CSRspBuyChess::ty() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBuyChess.Ty)
  return _internal_ty();
}
inline void CSRspBuyChess::_internal_set_ty(int32_t value) {
  
  _impl_.ty_ = value;
}
inline void CSRspBuyChess::set_ty(int32_t value) {
  _internal_set_ty(value);
  // @@protoc_insertion_point(field_set:msg.CSRspBuyChess.Ty)
}

// bool IsDrag = 8;
inline void CSRspBuyChess::clear_isdrag() {
  _impl_.isdrag_ = false;
}
inline bool CSRspBuyChess::_internal_isdrag() const {
  return _impl_.isdrag_;
}
inline bool CSRspBuyChess::isdrag() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBuyChess.IsDrag)
  return _internal_isdrag();
}
inline void CSRspBuyChess::_internal_set_isdrag(bool value) {
  
  _impl_.isdrag_ = value;
}
inline void CSRspBuyChess::set_isdrag(bool value) {
  _internal_set_isdrag(value);
  // @@protoc_insertion_point(field_set:msg.CSRspBuyChess.IsDrag)
}

// -------------------------------------------------------------------

// CSRspSellChessInBag

// bool Success = 1;
inline void CSRspSellChessInBag::clear_success() {
  _impl_.success_ = false;
}
inline bool CSRspSellChessInBag::_internal_success() const {
  return _impl_.success_;
}
inline bool CSRspSellChessInBag::success() const {
  // @@protoc_insertion_point(field_get:msg.CSRspSellChessInBag.Success)
  return _internal_success();
}
inline void CSRspSellChessInBag::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CSRspSellChessInBag::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msg.CSRspSellChessInBag.Success)
}

// int32 LeftMoney = 2;
inline void CSRspSellChessInBag::clear_leftmoney() {
  _impl_.leftmoney_ = 0;
}
inline int32_t CSRspSellChessInBag::_internal_leftmoney() const {
  return _impl_.leftmoney_;
}
inline int32_t CSRspSellChessInBag::leftmoney() const {
  // @@protoc_insertion_point(field_get:msg.CSRspSellChessInBag.LeftMoney)
  return _internal_leftmoney();
}
inline void CSRspSellChessInBag::_internal_set_leftmoney(int32_t value) {
  
  _impl_.leftmoney_ = value;
}
inline void CSRspSellChessInBag::set_leftmoney(int32_t value) {
  _internal_set_leftmoney(value);
  // @@protoc_insertion_point(field_set:msg.CSRspSellChessInBag.LeftMoney)
}

// int32 BagIndex = 3;
inline void CSRspSellChessInBag::clear_bagindex() {
  _impl_.bagindex_ = 0;
}
inline int32_t CSRspSellChessInBag::_internal_bagindex() const {
  return _impl_.bagindex_;
}
inline int32_t CSRspSellChessInBag::bagindex() const {
  // @@protoc_insertion_point(field_get:msg.CSRspSellChessInBag.BagIndex)
  return _internal_bagindex();
}
inline void CSRspSellChessInBag::_internal_set_bagindex(int32_t value) {
  
  _impl_.bagindex_ = value;
}
inline void CSRspSellChessInBag::set_bagindex(int32_t value) {
  _internal_set_bagindex(value);
  // @@protoc_insertion_point(field_set:msg.CSRspSellChessInBag.BagIndex)
}

// -------------------------------------------------------------------

// CSRspSellChessOnBoard

// bool Success = 1;
inline void CSRspSellChessOnBoard::clear_success() {
  _impl_.success_ = false;
}
inline bool CSRspSellChessOnBoard::_internal_success() const {
  return _impl_.success_;
}
inline bool CSRspSellChessOnBoard::success() const {
  // @@protoc_insertion_point(field_get:msg.CSRspSellChessOnBoard.Success)
  return _internal_success();
}
inline void CSRspSellChessOnBoard::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CSRspSellChessOnBoard::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msg.CSRspSellChessOnBoard.Success)
}

// int32 LeftMoney = 2;
inline void CSRspSellChessOnBoard::clear_leftmoney() {
  _impl_.leftmoney_ = 0;
}
inline int32_t CSRspSellChessOnBoard::_internal_leftmoney() const {
  return _impl_.leftmoney_;
}
inline int32_t CSRspSellChessOnBoard::leftmoney() const {
  // @@protoc_insertion_point(field_get:msg.CSRspSellChessOnBoard.LeftMoney)
  return _internal_leftmoney();
}
inline void CSRspSellChessOnBoard::_internal_set_leftmoney(int32_t value) {
  
  _impl_.leftmoney_ = value;
}
inline void CSRspSellChessOnBoard::set_leftmoney(int32_t value) {
  _internal_set_leftmoney(value);
  // @@protoc_insertion_point(field_set:msg.CSRspSellChessOnBoard.LeftMoney)
}

// .msg.PositionInt2D ChessPos = 3;
inline bool CSRspSellChessOnBoard::_internal_has_chesspos() const {
  return this != internal_default_instance() && _impl_.chesspos_ != nullptr;
}
inline bool CSRspSellChessOnBoard::has_chesspos() const {
  return _internal_has_chesspos();
}
inline void CSRspSellChessOnBoard::clear_chesspos() {
  if (GetArenaForAllocation() == nullptr && _impl_.chesspos_ != nullptr) {
    delete _impl_.chesspos_;
  }
  _impl_.chesspos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSRspSellChessOnBoard::_internal_chesspos() const {
  const ::msg::PositionInt2D* p = _impl_.chesspos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSRspSellChessOnBoard::chesspos() const {
  // @@protoc_insertion_point(field_get:msg.CSRspSellChessOnBoard.ChessPos)
  return _internal_chesspos();
}
inline void CSRspSellChessOnBoard::unsafe_arena_set_allocated_chesspos(
    ::msg::PositionInt2D* chesspos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chesspos_);
  }
  _impl_.chesspos_ = chesspos;
  if (chesspos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspSellChessOnBoard.ChessPos)
}
inline ::msg::PositionInt2D* CSRspSellChessOnBoard::release_chesspos() {
  
  ::msg::PositionInt2D* temp = _impl_.chesspos_;
  _impl_.chesspos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSRspSellChessOnBoard::unsafe_arena_release_chesspos() {
  // @@protoc_insertion_point(field_release:msg.CSRspSellChessOnBoard.ChessPos)
  
  ::msg::PositionInt2D* temp = _impl_.chesspos_;
  _impl_.chesspos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSRspSellChessOnBoard::_internal_mutable_chesspos() {
  
  if (_impl_.chesspos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.chesspos_ = p;
  }
  return _impl_.chesspos_;
}
inline ::msg::PositionInt2D* CSRspSellChessOnBoard::mutable_chesspos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_chesspos();
  // @@protoc_insertion_point(field_mutable:msg.CSRspSellChessOnBoard.ChessPos)
  return _msg;
}
inline void CSRspSellChessOnBoard::set_allocated_chesspos(::msg::PositionInt2D* chesspos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chesspos_;
  }
  if (chesspos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chesspos);
    if (message_arena != submessage_arena) {
      chesspos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chesspos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chesspos_ = chesspos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspSellChessOnBoard.ChessPos)
}

// -------------------------------------------------------------------

// CSRspMoveChess

// bool Success = 1;
inline void CSRspMoveChess::clear_success() {
  _impl_.success_ = false;
}
inline bool CSRspMoveChess::_internal_success() const {
  return _impl_.success_;
}
inline bool CSRspMoveChess::success() const {
  // @@protoc_insertion_point(field_get:msg.CSRspMoveChess.Success)
  return _internal_success();
}
inline void CSRspMoveChess::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CSRspMoveChess::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msg.CSRspMoveChess.Success)
}

// .msg.PositionInt2D SrcChessPos = 2;
inline bool CSRspMoveChess::_internal_has_srcchesspos() const {
  return this != internal_default_instance() && _impl_.srcchesspos_ != nullptr;
}
inline bool CSRspMoveChess::has_srcchesspos() const {
  return _internal_has_srcchesspos();
}
inline void CSRspMoveChess::clear_srcchesspos() {
  if (GetArenaForAllocation() == nullptr && _impl_.srcchesspos_ != nullptr) {
    delete _impl_.srcchesspos_;
  }
  _impl_.srcchesspos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSRspMoveChess::_internal_srcchesspos() const {
  const ::msg::PositionInt2D* p = _impl_.srcchesspos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSRspMoveChess::srcchesspos() const {
  // @@protoc_insertion_point(field_get:msg.CSRspMoveChess.SrcChessPos)
  return _internal_srcchesspos();
}
inline void CSRspMoveChess::unsafe_arena_set_allocated_srcchesspos(
    ::msg::PositionInt2D* srcchesspos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.srcchesspos_);
  }
  _impl_.srcchesspos_ = srcchesspos;
  if (srcchesspos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspMoveChess.SrcChessPos)
}
inline ::msg::PositionInt2D* CSRspMoveChess::release_srcchesspos() {
  
  ::msg::PositionInt2D* temp = _impl_.srcchesspos_;
  _impl_.srcchesspos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSRspMoveChess::unsafe_arena_release_srcchesspos() {
  // @@protoc_insertion_point(field_release:msg.CSRspMoveChess.SrcChessPos)
  
  ::msg::PositionInt2D* temp = _impl_.srcchesspos_;
  _impl_.srcchesspos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSRspMoveChess::_internal_mutable_srcchesspos() {
  
  if (_impl_.srcchesspos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.srcchesspos_ = p;
  }
  return _impl_.srcchesspos_;
}
inline ::msg::PositionInt2D* CSRspMoveChess::mutable_srcchesspos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_srcchesspos();
  // @@protoc_insertion_point(field_mutable:msg.CSRspMoveChess.SrcChessPos)
  return _msg;
}
inline void CSRspMoveChess::set_allocated_srcchesspos(::msg::PositionInt2D* srcchesspos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.srcchesspos_;
  }
  if (srcchesspos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(srcchesspos);
    if (message_arena != submessage_arena) {
      srcchesspos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srcchesspos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.srcchesspos_ = srcchesspos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspMoveChess.SrcChessPos)
}

// .msg.PositionInt2D DestChessPos = 3;
inline bool CSRspMoveChess::_internal_has_destchesspos() const {
  return this != internal_default_instance() && _impl_.destchesspos_ != nullptr;
}
inline bool CSRspMoveChess::has_destchesspos() const {
  return _internal_has_destchesspos();
}
inline void CSRspMoveChess::clear_destchesspos() {
  if (GetArenaForAllocation() == nullptr && _impl_.destchesspos_ != nullptr) {
    delete _impl_.destchesspos_;
  }
  _impl_.destchesspos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSRspMoveChess::_internal_destchesspos() const {
  const ::msg::PositionInt2D* p = _impl_.destchesspos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSRspMoveChess::destchesspos() const {
  // @@protoc_insertion_point(field_get:msg.CSRspMoveChess.DestChessPos)
  return _internal_destchesspos();
}
inline void CSRspMoveChess::unsafe_arena_set_allocated_destchesspos(
    ::msg::PositionInt2D* destchesspos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destchesspos_);
  }
  _impl_.destchesspos_ = destchesspos;
  if (destchesspos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspMoveChess.DestChessPos)
}
inline ::msg::PositionInt2D* CSRspMoveChess::release_destchesspos() {
  
  ::msg::PositionInt2D* temp = _impl_.destchesspos_;
  _impl_.destchesspos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSRspMoveChess::unsafe_arena_release_destchesspos() {
  // @@protoc_insertion_point(field_release:msg.CSRspMoveChess.DestChessPos)
  
  ::msg::PositionInt2D* temp = _impl_.destchesspos_;
  _impl_.destchesspos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSRspMoveChess::_internal_mutable_destchesspos() {
  
  if (_impl_.destchesspos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.destchesspos_ = p;
  }
  return _impl_.destchesspos_;
}
inline ::msg::PositionInt2D* CSRspMoveChess::mutable_destchesspos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_destchesspos();
  // @@protoc_insertion_point(field_mutable:msg.CSRspMoveChess.DestChessPos)
  return _msg;
}
inline void CSRspMoveChess::set_allocated_destchesspos(::msg::PositionInt2D* destchesspos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.destchesspos_;
  }
  if (destchesspos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destchesspos);
    if (message_arena != submessage_arena) {
      destchesspos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destchesspos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destchesspos_ = destchesspos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspMoveChess.DestChessPos)
}

// -------------------------------------------------------------------

// CSRspBuyExp

// bool Success = 1;
inline void CSRspBuyExp::clear_success() {
  _impl_.success_ = false;
}
inline bool CSRspBuyExp::_internal_success() const {
  return _impl_.success_;
}
inline bool CSRspBuyExp::success() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBuyExp.Success)
  return _internal_success();
}
inline void CSRspBuyExp::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CSRspBuyExp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msg.CSRspBuyExp.Success)
}

// int32 AddedExp = 2;
inline void CSRspBuyExp::clear_addedexp() {
  _impl_.addedexp_ = 0;
}
inline int32_t CSRspBuyExp::_internal_addedexp() const {
  return _impl_.addedexp_;
}
inline int32_t CSRspBuyExp::addedexp() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBuyExp.AddedExp)
  return _internal_addedexp();
}
inline void CSRspBuyExp::_internal_set_addedexp(int32_t value) {
  
  _impl_.addedexp_ = value;
}
inline void CSRspBuyExp::set_addedexp(int32_t value) {
  _internal_set_addedexp(value);
  // @@protoc_insertion_point(field_set:msg.CSRspBuyExp.AddedExp)
}

// int32 CurrentExp = 3;
inline void CSRspBuyExp::clear_currentexp() {
  _impl_.currentexp_ = 0;
}
inline int32_t CSRspBuyExp::_internal_currentexp() const {
  return _impl_.currentexp_;
}
inline int32_t CSRspBuyExp::currentexp() const {
  // @@protoc_insertion_point(field_get:msg.CSRspBuyExp.CurrentExp)
  return _internal_currentexp();
}
inline void CSRspBuyExp::_internal_set_currentexp(int32_t value) {
  
  _impl_.currentexp_ = value;
}
inline void CSRspBuyExp::set_currentexp(int32_t value) {
  _internal_set_currentexp(value);
  // @@protoc_insertion_point(field_set:msg.CSRspBuyExp.CurrentExp)
}

// -------------------------------------------------------------------

// CSRspRefreshShop

// bool Success = 1;
inline void CSRspRefreshShop::clear_success() {
  _impl_.success_ = false;
}
inline bool CSRspRefreshShop::_internal_success() const {
  return _impl_.success_;
}
inline bool CSRspRefreshShop::success() const {
  // @@protoc_insertion_point(field_get:msg.CSRspRefreshShop.Success)
  return _internal_success();
}
inline void CSRspRefreshShop::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CSRspRefreshShop::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msg.CSRspRefreshShop.Success)
}

// -------------------------------------------------------------------

// CSRspMoveChessInBagToMap

// bool Success = 1;
inline void CSRspMoveChessInBagToMap::clear_success() {
  _impl_.success_ = false;
}
inline bool CSRspMoveChessInBagToMap::_internal_success() const {
  return _impl_.success_;
}
inline bool CSRspMoveChessInBagToMap::success() const {
  // @@protoc_insertion_point(field_get:msg.CSRspMoveChessInBagToMap.Success)
  return _internal_success();
}
inline void CSRspMoveChessInBagToMap::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CSRspMoveChessInBagToMap::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msg.CSRspMoveChessInBagToMap.Success)
}

// int32 BagIdx = 2;
inline void CSRspMoveChessInBagToMap::clear_bagidx() {
  _impl_.bagidx_ = 0;
}
inline int32_t CSRspMoveChessInBagToMap::_internal_bagidx() const {
  return _impl_.bagidx_;
}
inline int32_t CSRspMoveChessInBagToMap::bagidx() const {
  // @@protoc_insertion_point(field_get:msg.CSRspMoveChessInBagToMap.BagIdx)
  return _internal_bagidx();
}
inline void CSRspMoveChessInBagToMap::_internal_set_bagidx(int32_t value) {
  
  _impl_.bagidx_ = value;
}
inline void CSRspMoveChessInBagToMap::set_bagidx(int32_t value) {
  _internal_set_bagidx(value);
  // @@protoc_insertion_point(field_set:msg.CSRspMoveChessInBagToMap.BagIdx)
}

// .msg.PositionInt2D DestPos = 3;
inline bool CSRspMoveChessInBagToMap::_internal_has_destpos() const {
  return this != internal_default_instance() && _impl_.destpos_ != nullptr;
}
inline bool CSRspMoveChessInBagToMap::has_destpos() const {
  return _internal_has_destpos();
}
inline void CSRspMoveChessInBagToMap::clear_destpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.destpos_ != nullptr) {
    delete _impl_.destpos_;
  }
  _impl_.destpos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSRspMoveChessInBagToMap::_internal_destpos() const {
  const ::msg::PositionInt2D* p = _impl_.destpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSRspMoveChessInBagToMap::destpos() const {
  // @@protoc_insertion_point(field_get:msg.CSRspMoveChessInBagToMap.DestPos)
  return _internal_destpos();
}
inline void CSRspMoveChessInBagToMap::unsafe_arena_set_allocated_destpos(
    ::msg::PositionInt2D* destpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destpos_);
  }
  _impl_.destpos_ = destpos;
  if (destpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspMoveChessInBagToMap.DestPos)
}
inline ::msg::PositionInt2D* CSRspMoveChessInBagToMap::release_destpos() {
  
  ::msg::PositionInt2D* temp = _impl_.destpos_;
  _impl_.destpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSRspMoveChessInBagToMap::unsafe_arena_release_destpos() {
  // @@protoc_insertion_point(field_release:msg.CSRspMoveChessInBagToMap.DestPos)
  
  ::msg::PositionInt2D* temp = _impl_.destpos_;
  _impl_.destpos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSRspMoveChessInBagToMap::_internal_mutable_destpos() {
  
  if (_impl_.destpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.destpos_ = p;
  }
  return _impl_.destpos_;
}
inline ::msg::PositionInt2D* CSRspMoveChessInBagToMap::mutable_destpos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_destpos();
  // @@protoc_insertion_point(field_mutable:msg.CSRspMoveChessInBagToMap.DestPos)
  return _msg;
}
inline void CSRspMoveChessInBagToMap::set_allocated_destpos(::msg::PositionInt2D* destpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.destpos_;
  }
  if (destpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destpos);
    if (message_arena != submessage_arena) {
      destpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destpos_ = destpos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspMoveChessInBagToMap.DestPos)
}

// -------------------------------------------------------------------

// CSRspMoveChessWithinBag

// int32 SrcBagIdx = 1;
inline void CSRspMoveChessWithinBag::clear_srcbagidx() {
  _impl_.srcbagidx_ = 0;
}
inline int32_t CSRspMoveChessWithinBag::_internal_srcbagidx() const {
  return _impl_.srcbagidx_;
}
inline int32_t CSRspMoveChessWithinBag::srcbagidx() const {
  // @@protoc_insertion_point(field_get:msg.CSRspMoveChessWithinBag.SrcBagIdx)
  return _internal_srcbagidx();
}
inline void CSRspMoveChessWithinBag::_internal_set_srcbagidx(int32_t value) {
  
  _impl_.srcbagidx_ = value;
}
inline void CSRspMoveChessWithinBag::set_srcbagidx(int32_t value) {
  _internal_set_srcbagidx(value);
  // @@protoc_insertion_point(field_set:msg.CSRspMoveChessWithinBag.SrcBagIdx)
}

// int32 DestBagIdx = 2;
inline void CSRspMoveChessWithinBag::clear_destbagidx() {
  _impl_.destbagidx_ = 0;
}
inline int32_t CSRspMoveChessWithinBag::_internal_destbagidx() const {
  return _impl_.destbagidx_;
}
inline int32_t CSRspMoveChessWithinBag::destbagidx() const {
  // @@protoc_insertion_point(field_get:msg.CSRspMoveChessWithinBag.DestBagIdx)
  return _internal_destbagidx();
}
inline void CSRspMoveChessWithinBag::_internal_set_destbagidx(int32_t value) {
  
  _impl_.destbagidx_ = value;
}
inline void CSRspMoveChessWithinBag::set_destbagidx(int32_t value) {
  _internal_set_destbagidx(value);
  // @@protoc_insertion_point(field_set:msg.CSRspMoveChessWithinBag.DestBagIdx)
}

// bool Success = 3;
inline void CSRspMoveChessWithinBag::clear_success() {
  _impl_.success_ = false;
}
inline bool CSRspMoveChessWithinBag::_internal_success() const {
  return _impl_.success_;
}
inline bool CSRspMoveChessWithinBag::success() const {
  // @@protoc_insertion_point(field_get:msg.CSRspMoveChessWithinBag.Success)
  return _internal_success();
}
inline void CSRspMoveChessWithinBag::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CSRspMoveChessWithinBag::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msg.CSRspMoveChessWithinBag.Success)
}

// -------------------------------------------------------------------

// CSRspPlayerLoaded

// -------------------------------------------------------------------

// CSRspPlayerRoundEnd

// -------------------------------------------------------------------

// CSRspPickupEquipment

// int32 NetId = 1;
inline void CSRspPickupEquipment::clear_netid() {
  _impl_.netid_ = 0;
}
inline int32_t CSRspPickupEquipment::_internal_netid() const {
  return _impl_.netid_;
}
inline int32_t CSRspPickupEquipment::netid() const {
  // @@protoc_insertion_point(field_get:msg.CSRspPickupEquipment.NetId)
  return _internal_netid();
}
inline void CSRspPickupEquipment::_internal_set_netid(int32_t value) {
  
  _impl_.netid_ = value;
}
inline void CSRspPickupEquipment::set_netid(int32_t value) {
  _internal_set_netid(value);
  // @@protoc_insertion_point(field_set:msg.CSRspPickupEquipment.NetId)
}

// bool Success = 2;
inline void CSRspPickupEquipment::clear_success() {
  _impl_.success_ = false;
}
inline bool CSRspPickupEquipment::_internal_success() const {
  return _impl_.success_;
}
inline bool CSRspPickupEquipment::success() const {
  // @@protoc_insertion_point(field_get:msg.CSRspPickupEquipment.Success)
  return _internal_success();
}
inline void CSRspPickupEquipment::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CSRspPickupEquipment::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msg.CSRspPickupEquipment.Success)
}

// int32 BagIdx = 3;
inline void CSRspPickupEquipment::clear_bagidx() {
  _impl_.bagidx_ = 0;
}
inline int32_t CSRspPickupEquipment::_internal_bagidx() const {
  return _impl_.bagidx_;
}
inline int32_t CSRspPickupEquipment::bagidx() const {
  // @@protoc_insertion_point(field_get:msg.CSRspPickupEquipment.BagIdx)
  return _internal_bagidx();
}
inline void CSRspPickupEquipment::_internal_set_bagidx(int32_t value) {
  
  _impl_.bagidx_ = value;
}
inline void CSRspPickupEquipment::set_bagidx(int32_t value) {
  _internal_set_bagidx(value);
  // @@protoc_insertion_point(field_set:msg.CSRspPickupEquipment.BagIdx)
}

// -------------------------------------------------------------------

// CSRspCraftEquip

// bool Success = 1;
inline void CSRspCraftEquip::clear_success() {
  _impl_.success_ = false;
}
inline bool CSRspCraftEquip::_internal_success() const {
  return _impl_.success_;
}
inline bool CSRspCraftEquip::success() const {
  // @@protoc_insertion_point(field_get:msg.CSRspCraftEquip.Success)
  return _internal_success();
}
inline void CSRspCraftEquip::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CSRspCraftEquip::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msg.CSRspCraftEquip.Success)
}

// bool IsToChess = 2;
inline void CSRspCraftEquip::clear_istochess() {
  _impl_.istochess_ = false;
}
inline bool CSRspCraftEquip::_internal_istochess() const {
  return _impl_.istochess_;
}
inline bool CSRspCraftEquip::istochess() const {
  // @@protoc_insertion_point(field_get:msg.CSRspCraftEquip.IsToChess)
  return _internal_istochess();
}
inline void CSRspCraftEquip::_internal_set_istochess(bool value) {
  
  _impl_.istochess_ = value;
}
inline void CSRspCraftEquip::set_istochess(bool value) {
  _internal_set_istochess(value);
  // @@protoc_insertion_point(field_set:msg.CSRspCraftEquip.IsToChess)
}

// repeated int32 Equips = 3;
inline int CSRspCraftEquip::_internal_equips_size() const {
  return _impl_.equips_.size();
}
inline int CSRspCraftEquip::equips_size() const {
  return _internal_equips_size();
}
inline void CSRspCraftEquip::clear_equips() {
  _impl_.equips_.Clear();
}
inline int32_t CSRspCraftEquip::_internal_equips(int index) const {
  return _impl_.equips_.Get(index);
}
inline int32_t CSRspCraftEquip::equips(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSRspCraftEquip.Equips)
  return _internal_equips(index);
}
inline void CSRspCraftEquip::set_equips(int index, int32_t value) {
  _impl_.equips_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSRspCraftEquip.Equips)
}
inline void CSRspCraftEquip::_internal_add_equips(int32_t value) {
  _impl_.equips_.Add(value);
}
inline void CSRspCraftEquip::add_equips(int32_t value) {
  _internal_add_equips(value);
  // @@protoc_insertion_point(field_add:msg.CSRspCraftEquip.Equips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CSRspCraftEquip::_internal_equips() const {
  return _impl_.equips_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CSRspCraftEquip::equips() const {
  // @@protoc_insertion_point(field_list:msg.CSRspCraftEquip.Equips)
  return _internal_equips();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CSRspCraftEquip::_internal_mutable_equips() {
  return &_impl_.equips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CSRspCraftEquip::mutable_equips() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSRspCraftEquip.Equips)
  return _internal_mutable_equips();
}

// .msg.EquipmentInfo NewEquip = 4;
inline bool CSRspCraftEquip::_internal_has_newequip() const {
  return this != internal_default_instance() && _impl_.newequip_ != nullptr;
}
inline bool CSRspCraftEquip::has_newequip() const {
  return _internal_has_newequip();
}
inline void CSRspCraftEquip::clear_newequip() {
  if (GetArenaForAllocation() == nullptr && _impl_.newequip_ != nullptr) {
    delete _impl_.newequip_;
  }
  _impl_.newequip_ = nullptr;
}
inline const ::msg::EquipmentInfo& CSRspCraftEquip::_internal_newequip() const {
  const ::msg::EquipmentInfo* p = _impl_.newequip_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::EquipmentInfo&>(
      ::msg::_EquipmentInfo_default_instance_);
}
inline const ::msg::EquipmentInfo& CSRspCraftEquip::newequip() const {
  // @@protoc_insertion_point(field_get:msg.CSRspCraftEquip.NewEquip)
  return _internal_newequip();
}
inline void CSRspCraftEquip::unsafe_arena_set_allocated_newequip(
    ::msg::EquipmentInfo* newequip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newequip_);
  }
  _impl_.newequip_ = newequip;
  if (newequip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspCraftEquip.NewEquip)
}
inline ::msg::EquipmentInfo* CSRspCraftEquip::release_newequip() {
  
  ::msg::EquipmentInfo* temp = _impl_.newequip_;
  _impl_.newequip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::EquipmentInfo* CSRspCraftEquip::unsafe_arena_release_newequip() {
  // @@protoc_insertion_point(field_release:msg.CSRspCraftEquip.NewEquip)
  
  ::msg::EquipmentInfo* temp = _impl_.newequip_;
  _impl_.newequip_ = nullptr;
  return temp;
}
inline ::msg::EquipmentInfo* CSRspCraftEquip::_internal_mutable_newequip() {
  
  if (_impl_.newequip_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::EquipmentInfo>(GetArenaForAllocation());
    _impl_.newequip_ = p;
  }
  return _impl_.newequip_;
}
inline ::msg::EquipmentInfo* CSRspCraftEquip::mutable_newequip() {
  ::msg::EquipmentInfo* _msg = _internal_mutable_newequip();
  // @@protoc_insertion_point(field_mutable:msg.CSRspCraftEquip.NewEquip)
  return _msg;
}
inline void CSRspCraftEquip::set_allocated_newequip(::msg::EquipmentInfo* newequip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.newequip_;
  }
  if (newequip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(newequip);
    if (message_arena != submessage_arena) {
      newequip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newequip, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newequip_ = newequip;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspCraftEquip.NewEquip)
}

// int32 ChessBagIdx = 5;
inline void CSRspCraftEquip::clear_chessbagidx() {
  _impl_.chessbagidx_ = 0;
}
inline int32_t CSRspCraftEquip::_internal_chessbagidx() const {
  return _impl_.chessbagidx_;
}
inline int32_t CSRspCraftEquip::chessbagidx() const {
  // @@protoc_insertion_point(field_get:msg.CSRspCraftEquip.ChessBagIdx)
  return _internal_chessbagidx();
}
inline void CSRspCraftEquip::_internal_set_chessbagidx(int32_t value) {
  
  _impl_.chessbagidx_ = value;
}
inline void CSRspCraftEquip::set_chessbagidx(int32_t value) {
  _internal_set_chessbagidx(value);
  // @@protoc_insertion_point(field_set:msg.CSRspCraftEquip.ChessBagIdx)
}

// bool IsOnBattle = 6;
inline void CSRspCraftEquip::clear_isonbattle() {
  _impl_.isonbattle_ = false;
}
inline bool CSRspCraftEquip::_internal_isonbattle() const {
  return _impl_.isonbattle_;
}
inline bool CSRspCraftEquip::isonbattle() const {
  // @@protoc_insertion_point(field_get:msg.CSRspCraftEquip.IsOnBattle)
  return _internal_isonbattle();
}
inline void CSRspCraftEquip::_internal_set_isonbattle(bool value) {
  
  _impl_.isonbattle_ = value;
}
inline void CSRspCraftEquip::set_isonbattle(bool value) {
  _internal_set_isonbattle(value);
  // @@protoc_insertion_point(field_set:msg.CSRspCraftEquip.IsOnBattle)
}

// -------------------------------------------------------------------

// CSRspUseEquipment

// int32 NetId = 1;
inline void CSRspUseEquipment::clear_netid() {
  _impl_.netid_ = 0;
}
inline int32_t CSRspUseEquipment::_internal_netid() const {
  return _impl_.netid_;
}
inline int32_t CSRspUseEquipment::netid() const {
  // @@protoc_insertion_point(field_get:msg.CSRspUseEquipment.NetId)
  return _internal_netid();
}
inline void CSRspUseEquipment::_internal_set_netid(int32_t value) {
  
  _impl_.netid_ = value;
}
inline void CSRspUseEquipment::set_netid(int32_t value) {
  _internal_set_netid(value);
  // @@protoc_insertion_point(field_set:msg.CSRspUseEquipment.NetId)
}

// bool IsChessInBag = 2;
inline void CSRspUseEquipment::clear_ischessinbag() {
  _impl_.ischessinbag_ = false;
}
inline bool CSRspUseEquipment::_internal_ischessinbag() const {
  return _impl_.ischessinbag_;
}
inline bool CSRspUseEquipment::ischessinbag() const {
  // @@protoc_insertion_point(field_get:msg.CSRspUseEquipment.IsChessInBag)
  return _internal_ischessinbag();
}
inline void CSRspUseEquipment::_internal_set_ischessinbag(bool value) {
  
  _impl_.ischessinbag_ = value;
}
inline void CSRspUseEquipment::set_ischessinbag(bool value) {
  _internal_set_ischessinbag(value);
  // @@protoc_insertion_point(field_set:msg.CSRspUseEquipment.IsChessInBag)
}

// int32 ChessBagIndex = 3;
inline void CSRspUseEquipment::clear_chessbagindex() {
  _impl_.chessbagindex_ = 0;
}
inline int32_t CSRspUseEquipment::_internal_chessbagindex() const {
  return _impl_.chessbagindex_;
}
inline int32_t CSRspUseEquipment::chessbagindex() const {
  // @@protoc_insertion_point(field_get:msg.CSRspUseEquipment.ChessBagIndex)
  return _internal_chessbagindex();
}
inline void CSRspUseEquipment::_internal_set_chessbagindex(int32_t value) {
  
  _impl_.chessbagindex_ = value;
}
inline void CSRspUseEquipment::set_chessbagindex(int32_t value) {
  _internal_set_chessbagindex(value);
  // @@protoc_insertion_point(field_set:msg.CSRspUseEquipment.ChessBagIndex)
}

// int32 EquipBagIndex = 4;
inline void CSRspUseEquipment::clear_equipbagindex() {
  _impl_.equipbagindex_ = 0;
}
inline int32_t CSRspUseEquipment::_internal_equipbagindex() const {
  return _impl_.equipbagindex_;
}
inline int32_t CSRspUseEquipment::equipbagindex() const {
  // @@protoc_insertion_point(field_get:msg.CSRspUseEquipment.EquipBagIndex)
  return _internal_equipbagindex();
}
inline void CSRspUseEquipment::_internal_set_equipbagindex(int32_t value) {
  
  _impl_.equipbagindex_ = value;
}
inline void CSRspUseEquipment::set_equipbagindex(int32_t value) {
  _internal_set_equipbagindex(value);
  // @@protoc_insertion_point(field_set:msg.CSRspUseEquipment.EquipBagIndex)
}

// .msg.PositionInt2D Pos = 5;
inline bool CSRspUseEquipment::_internal_has_pos() const {
  return this != internal_default_instance() && _impl_.pos_ != nullptr;
}
inline bool CSRspUseEquipment::has_pos() const {
  return _internal_has_pos();
}
inline void CSRspUseEquipment::clear_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSRspUseEquipment::_internal_pos() const {
  const ::msg::PositionInt2D* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSRspUseEquipment::pos() const {
  // @@protoc_insertion_point(field_get:msg.CSRspUseEquipment.Pos)
  return _internal_pos();
}
inline void CSRspUseEquipment::unsafe_arena_set_allocated_pos(
    ::msg::PositionInt2D* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSRspUseEquipment.Pos)
}
inline ::msg::PositionInt2D* CSRspUseEquipment::release_pos() {
  
  ::msg::PositionInt2D* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSRspUseEquipment::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:msg.CSRspUseEquipment.Pos)
  
  ::msg::PositionInt2D* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSRspUseEquipment::_internal_mutable_pos() {
  
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::msg::PositionInt2D* CSRspUseEquipment::mutable_pos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:msg.CSRspUseEquipment.Pos)
  return _msg;
}
inline void CSRspUseEquipment::set_allocated_pos(::msg::PositionInt2D* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSRspUseEquipment.Pos)
}

// bool Success = 6;
inline void CSRspUseEquipment::clear_success() {
  _impl_.success_ = false;
}
inline bool CSRspUseEquipment::_internal_success() const {
  return _impl_.success_;
}
inline bool CSRspUseEquipment::success() const {
  // @@protoc_insertion_point(field_get:msg.CSRspUseEquipment.Success)
  return _internal_success();
}
inline void CSRspUseEquipment::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CSRspUseEquipment::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msg.CSRspUseEquipment.Success)
}

// bool IsOnBattle = 7;
inline void CSRspUseEquipment::clear_isonbattle() {
  _impl_.isonbattle_ = false;
}
inline bool CSRspUseEquipment::_internal_isonbattle() const {
  return _impl_.isonbattle_;
}
inline bool CSRspUseEquipment::isonbattle() const {
  // @@protoc_insertion_point(field_get:msg.CSRspUseEquipment.IsOnBattle)
  return _internal_isonbattle();
}
inline void CSRspUseEquipment::_internal_set_isonbattle(bool value) {
  
  _impl_.isonbattle_ = value;
}
inline void CSRspUseEquipment::set_isonbattle(bool value) {
  _internal_set_isonbattle(value);
  // @@protoc_insertion_point(field_set:msg.CSRspUseEquipment.IsOnBattle)
}

// -------------------------------------------------------------------

// CSRspUpdateAntiAddictionTime

// -------------------------------------------------------------------

// CSRspCancelReconnect

// -------------------------------------------------------------------

// CSRspSetAutoUpgradeCharacter

// bool SwitchOn = 1;
inline void CSRspSetAutoUpgradeCharacter::clear_switchon() {
  _impl_.switchon_ = false;
}
inline bool CSRspSetAutoUpgradeCharacter::_internal_switchon() const {
  return _impl_.switchon_;
}
inline bool CSRspSetAutoUpgradeCharacter::switchon() const {
  // @@protoc_insertion_point(field_get:msg.CSRspSetAutoUpgradeCharacter.SwitchOn)
  return _internal_switchon();
}
inline void CSRspSetAutoUpgradeCharacter::_internal_set_switchon(bool value) {
  
  _impl_.switchon_ = value;
}
inline void CSRspSetAutoUpgradeCharacter::set_switchon(bool value) {
  _internal_set_switchon(value);
  // @@protoc_insertion_point(field_set:msg.CSRspSetAutoUpgradeCharacter.SwitchOn)
}

// -------------------------------------------------------------------

// CSRspReconnect

// bool IsValid = 1;
inline void CSRspReconnect::clear_isvalid() {
  _impl_.isvalid_ = false;
}
inline bool CSRspReconnect::_internal_isvalid() const {
  return _impl_.isvalid_;
}
inline bool CSRspReconnect::isvalid() const {
  // @@protoc_insertion_point(field_get:msg.CSRspReconnect.IsValid)
  return _internal_isvalid();
}
inline void CSRspReconnect::_internal_set_isvalid(bool value) {
  
  _impl_.isvalid_ = value;
}
inline void CSRspReconnect::set_isvalid(bool value) {
  _internal_set_isvalid(value);
  // @@protoc_insertion_point(field_set:msg.CSRspReconnect.IsValid)
}

// -------------------------------------------------------------------

// CSRspUpdateRank

// -------------------------------------------------------------------

// CSRspManuallyUpgradeCharacter

// int32 BagIndex = 1;
inline void CSRspManuallyUpgradeCharacter::clear_bagindex() {
  _impl_.bagindex_ = 0;
}
inline int32_t CSRspManuallyUpgradeCharacter::_internal_bagindex() const {
  return _impl_.bagindex_;
}
inline int32_t CSRspManuallyUpgradeCharacter::bagindex() const {
  // @@protoc_insertion_point(field_get:msg.CSRspManuallyUpgradeCharacter.BagIndex)
  return _internal_bagindex();
}
inline void CSRspManuallyUpgradeCharacter::_internal_set_bagindex(int32_t value) {
  
  _impl_.bagindex_ = value;
}
inline void CSRspManuallyUpgradeCharacter::set_bagindex(int32_t value) {
  _internal_set_bagindex(value);
  // @@protoc_insertion_point(field_set:msg.CSRspManuallyUpgradeCharacter.BagIndex)
}

// int32 Tx = 2;
inline void CSRspManuallyUpgradeCharacter::clear_tx() {
  _impl_.tx_ = 0;
}
inline int32_t CSRspManuallyUpgradeCharacter::_internal_tx() const {
  return _impl_.tx_;
}
inline int32_t CSRspManuallyUpgradeCharacter::tx() const {
  // @@protoc_insertion_point(field_get:msg.CSRspManuallyUpgradeCharacter.Tx)
  return _internal_tx();
}
inline void CSRspManuallyUpgradeCharacter::_internal_set_tx(int32_t value) {
  
  _impl_.tx_ = value;
}
inline void CSRspManuallyUpgradeCharacter::set_tx(int32_t value) {
  _internal_set_tx(value);
  // @@protoc_insertion_point(field_set:msg.CSRspManuallyUpgradeCharacter.Tx)
}

// int32 Ty = 3;
inline void CSRspManuallyUpgradeCharacter::clear_ty() {
  _impl_.ty_ = 0;
}
inline int32_t CSRspManuallyUpgradeCharacter::_internal_ty() const {
  return _impl_.ty_;
}
inline int32_t CSRspManuallyUpgradeCharacter::ty() const {
  // @@protoc_insertion_point(field_get:msg.CSRspManuallyUpgradeCharacter.Ty)
  return _internal_ty();
}
inline void CSRspManuallyUpgradeCharacter::_internal_set_ty(int32_t value) {
  
  _impl_.ty_ = value;
}
inline void CSRspManuallyUpgradeCharacter::set_ty(int32_t value) {
  _internal_set_ty(value);
  // @@protoc_insertion_point(field_set:msg.CSRspManuallyUpgradeCharacter.Ty)
}

// bool Success = 4;
inline void CSRspManuallyUpgradeCharacter::clear_success() {
  _impl_.success_ = false;
}
inline bool CSRspManuallyUpgradeCharacter::_internal_success() const {
  return _impl_.success_;
}
inline bool CSRspManuallyUpgradeCharacter::success() const {
  // @@protoc_insertion_point(field_get:msg.CSRspManuallyUpgradeCharacter.Success)
  return _internal_success();
}
inline void CSRspManuallyUpgradeCharacter::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CSRspManuallyUpgradeCharacter::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msg.CSRspManuallyUpgradeCharacter.Success)
}

// bool IsInBag = 5;
inline void CSRspManuallyUpgradeCharacter::clear_isinbag() {
  _impl_.isinbag_ = false;
}
inline bool CSRspManuallyUpgradeCharacter::_internal_isinbag() const {
  return _impl_.isinbag_;
}
inline bool CSRspManuallyUpgradeCharacter::isinbag() const {
  // @@protoc_insertion_point(field_get:msg.CSRspManuallyUpgradeCharacter.IsInBag)
  return _internal_isinbag();
}
inline void CSRspManuallyUpgradeCharacter::_internal_set_isinbag(bool value) {
  
  _impl_.isinbag_ = value;
}
inline void CSRspManuallyUpgradeCharacter::set_isinbag(bool value) {
  _internal_set_isinbag(value);
  // @@protoc_insertion_point(field_set:msg.CSRspManuallyUpgradeCharacter.IsInBag)
}

// -------------------------------------------------------------------

// CSRspQuitBattle

// bool Success = 1;
inline void CSRspQuitBattle::clear_success() {
  _impl_.success_ = false;
}
inline bool CSRspQuitBattle::_internal_success() const {
  return _impl_.success_;
}
inline bool CSRspQuitBattle::success() const {
  // @@protoc_insertion_point(field_get:msg.CSRspQuitBattle.Success)
  return _internal_success();
}
inline void CSRspQuitBattle::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CSRspQuitBattle::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msg.CSRspQuitBattle.Success)
}

// -------------------------------------------------------------------

// CSRspSusPendGame

// bool susPend = 1;
inline void CSRspSusPendGame::clear_suspend() {
  _impl_.suspend_ = false;
}
inline bool CSRspSusPendGame::_internal_suspend() const {
  return _impl_.suspend_;
}
inline bool CSRspSusPendGame::suspend() const {
  // @@protoc_insertion_point(field_get:msg.CSRspSusPendGame.susPend)
  return _internal_suspend();
}
inline void CSRspSusPendGame::_internal_set_suspend(bool value) {
  
  _impl_.suspend_ = value;
}
inline void CSRspSusPendGame::set_suspend(bool value) {
  _internal_set_suspend(value);
  // @@protoc_insertion_point(field_set:msg.CSRspSusPendGame.susPend)
}

// -------------------------------------------------------------------

// CSRspChessDB

// repeated .msg.ChessPiecesMapLevData chessPiecesMapLev = 1;
inline int CSRspChessDB::_internal_chesspiecesmaplev_size() const {
  return _impl_.chesspiecesmaplev_.size();
}
inline int CSRspChessDB::chesspiecesmaplev_size() const {
  return _internal_chesspiecesmaplev_size();
}
inline void CSRspChessDB::clear_chesspiecesmaplev() {
  _impl_.chesspiecesmaplev_.Clear();
}
inline ::msg::ChessPiecesMapLevData* CSRspChessDB::mutable_chesspiecesmaplev(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSRspChessDB.chessPiecesMapLev)
  return _impl_.chesspiecesmaplev_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessPiecesMapLevData >*
CSRspChessDB::mutable_chesspiecesmaplev() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSRspChessDB.chessPiecesMapLev)
  return &_impl_.chesspiecesmaplev_;
}
inline const ::msg::ChessPiecesMapLevData& CSRspChessDB::_internal_chesspiecesmaplev(int index) const {
  return _impl_.chesspiecesmaplev_.Get(index);
}
inline const ::msg::ChessPiecesMapLevData& CSRspChessDB::chesspiecesmaplev(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSRspChessDB.chessPiecesMapLev)
  return _internal_chesspiecesmaplev(index);
}
inline ::msg::ChessPiecesMapLevData* CSRspChessDB::_internal_add_chesspiecesmaplev() {
  return _impl_.chesspiecesmaplev_.Add();
}
inline ::msg::ChessPiecesMapLevData* CSRspChessDB::add_chesspiecesmaplev() {
  ::msg::ChessPiecesMapLevData* _add = _internal_add_chesspiecesmaplev();
  // @@protoc_insertion_point(field_add:msg.CSRspChessDB.chessPiecesMapLev)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::ChessPiecesMapLevData >&
CSRspChessDB::chesspiecesmaplev() const {
  // @@protoc_insertion_point(field_list:msg.CSRspChessDB.chessPiecesMapLev)
  return _impl_.chesspiecesmaplev_;
}

// repeated .msg.PlayerChessNumber playerChess = 2;
inline int CSRspChessDB::_internal_playerchess_size() const {
  return _impl_.playerchess_.size();
}
inline int CSRspChessDB::playerchess_size() const {
  return _internal_playerchess_size();
}
inline void CSRspChessDB::clear_playerchess() {
  _impl_.playerchess_.Clear();
}
inline ::msg::PlayerChessNumber* CSRspChessDB::mutable_playerchess(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSRspChessDB.playerChess)
  return _impl_.playerchess_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PlayerChessNumber >*
CSRspChessDB::mutable_playerchess() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSRspChessDB.playerChess)
  return &_impl_.playerchess_;
}
inline const ::msg::PlayerChessNumber& CSRspChessDB::_internal_playerchess(int index) const {
  return _impl_.playerchess_.Get(index);
}
inline const ::msg::PlayerChessNumber& CSRspChessDB::playerchess(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSRspChessDB.playerChess)
  return _internal_playerchess(index);
}
inline ::msg::PlayerChessNumber* CSRspChessDB::_internal_add_playerchess() {
  return _impl_.playerchess_.Add();
}
inline ::msg::PlayerChessNumber* CSRspChessDB::add_playerchess() {
  ::msg::PlayerChessNumber* _add = _internal_add_playerchess();
  // @@protoc_insertion_point(field_add:msg.CSRspChessDB.playerChess)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PlayerChessNumber >&
CSRspChessDB::playerchess() const {
  // @@protoc_insertion_point(field_list:msg.CSRspChessDB.playerChess)
  return _impl_.playerchess_;
}

// -------------------------------------------------------------------

// CSRspStatisticsInfo

// int32 initMoney = 1;
inline void CSRspStatisticsInfo::clear_initmoney() {
  _impl_.initmoney_ = 0;
}
inline int32_t CSRspStatisticsInfo::_internal_initmoney() const {
  return _impl_.initmoney_;
}
inline int32_t CSRspStatisticsInfo::initmoney() const {
  // @@protoc_insertion_point(field_get:msg.CSRspStatisticsInfo.initMoney)
  return _internal_initmoney();
}
inline void CSRspStatisticsInfo::_internal_set_initmoney(int32_t value) {
  
  _impl_.initmoney_ = value;
}
inline void CSRspStatisticsInfo::set_initmoney(int32_t value) {
  _internal_set_initmoney(value);
  // @@protoc_insertion_point(field_set:msg.CSRspStatisticsInfo.initMoney)
}

// repeated .msg.PlayerStatisticsInfo playerStatistics = 2;
inline int CSRspStatisticsInfo::_internal_playerstatistics_size() const {
  return _impl_.playerstatistics_.size();
}
inline int CSRspStatisticsInfo::playerstatistics_size() const {
  return _internal_playerstatistics_size();
}
inline void CSRspStatisticsInfo::clear_playerstatistics() {
  _impl_.playerstatistics_.Clear();
}
inline ::msg::PlayerStatisticsInfo* CSRspStatisticsInfo::mutable_playerstatistics(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSRspStatisticsInfo.playerStatistics)
  return _impl_.playerstatistics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PlayerStatisticsInfo >*
CSRspStatisticsInfo::mutable_playerstatistics() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSRspStatisticsInfo.playerStatistics)
  return &_impl_.playerstatistics_;
}
inline const ::msg::PlayerStatisticsInfo& CSRspStatisticsInfo::_internal_playerstatistics(int index) const {
  return _impl_.playerstatistics_.Get(index);
}
inline const ::msg::PlayerStatisticsInfo& CSRspStatisticsInfo::playerstatistics(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSRspStatisticsInfo.playerStatistics)
  return _internal_playerstatistics(index);
}
inline ::msg::PlayerStatisticsInfo* CSRspStatisticsInfo::_internal_add_playerstatistics() {
  return _impl_.playerstatistics_.Add();
}
inline ::msg::PlayerStatisticsInfo* CSRspStatisticsInfo::add_playerstatistics() {
  ::msg::PlayerStatisticsInfo* _add = _internal_add_playerstatistics();
  // @@protoc_insertion_point(field_add:msg.CSRspStatisticsInfo.playerStatistics)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::PlayerStatisticsInfo >&
CSRspStatisticsInfo::playerstatistics() const {
  // @@protoc_insertion_point(field_list:msg.CSRspStatisticsInfo.playerStatistics)
  return _impl_.playerstatistics_;
}

// -------------------------------------------------------------------

// CSRspPassThrough

// repeated bytes data = 1;
inline int CSRspPassThrough::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int CSRspPassThrough::data_size() const {
  return _internal_data_size();
}
inline void CSRspPassThrough::clear_data() {
  _impl_.data_.Clear();
}
inline std::string* CSRspPassThrough::add_data() {
  std::string* _s = _internal_add_data();
  // @@protoc_insertion_point(field_add_mutable:msg.CSRspPassThrough.data)
  return _s;
}
inline const std::string& CSRspPassThrough::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline const std::string& CSRspPassThrough::data(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSRspPassThrough.data)
  return _internal_data(index);
}
inline std::string* CSRspPassThrough::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSRspPassThrough.data)
  return _impl_.data_.Mutable(index);
}
inline void CSRspPassThrough::set_data(int index, const std::string& value) {
  _impl_.data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:msg.CSRspPassThrough.data)
}
inline void CSRspPassThrough::set_data(int index, std::string&& value) {
  _impl_.data_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:msg.CSRspPassThrough.data)
}
inline void CSRspPassThrough::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.CSRspPassThrough.data)
}
inline void CSRspPassThrough::set_data(int index, const void* value, size_t size) {
  _impl_.data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.CSRspPassThrough.data)
}
inline std::string* CSRspPassThrough::_internal_add_data() {
  return _impl_.data_.Add();
}
inline void CSRspPassThrough::add_data(const std::string& value) {
  _impl_.data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:msg.CSRspPassThrough.data)
}
inline void CSRspPassThrough::add_data(std::string&& value) {
  _impl_.data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:msg.CSRspPassThrough.data)
}
inline void CSRspPassThrough::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:msg.CSRspPassThrough.data)
}
inline void CSRspPassThrough::add_data(const void* value, size_t size) {
  _impl_.data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:msg.CSRspPassThrough.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CSRspPassThrough::data() const {
  // @@protoc_insertion_point(field_list:msg.CSRspPassThrough.data)
  return _impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CSRspPassThrough::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSRspPassThrough.data)
  return &_impl_.data_;
}

// -------------------------------------------------------------------

// CSRspUpdateBattleResult

// -------------------------------------------------------------------

// CSRspVisitPlayer

// int32 SrcPlayerIndex = 1;
inline void CSRspVisitPlayer::clear_srcplayerindex() {
  _impl_.srcplayerindex_ = 0;
}
inline int32_t CSRspVisitPlayer::_internal_srcplayerindex() const {
  return _impl_.srcplayerindex_;
}
inline int32_t CSRspVisitPlayer::srcplayerindex() const {
  // @@protoc_insertion_point(field_get:msg.CSRspVisitPlayer.SrcPlayerIndex)
  return _internal_srcplayerindex();
}
inline void CSRspVisitPlayer::_internal_set_srcplayerindex(int32_t value) {
  
  _impl_.srcplayerindex_ = value;
}
inline void CSRspVisitPlayer::set_srcplayerindex(int32_t value) {
  _internal_set_srcplayerindex(value);
  // @@protoc_insertion_point(field_set:msg.CSRspVisitPlayer.SrcPlayerIndex)
}

// int32 DestPlayerIndex = 2;
inline void CSRspVisitPlayer::clear_destplayerindex() {
  _impl_.destplayerindex_ = 0;
}
inline int32_t CSRspVisitPlayer::_internal_destplayerindex() const {
  return _impl_.destplayerindex_;
}
inline int32_t CSRspVisitPlayer::destplayerindex() const {
  // @@protoc_insertion_point(field_get:msg.CSRspVisitPlayer.DestPlayerIndex)
  return _internal_destplayerindex();
}
inline void CSRspVisitPlayer::_internal_set_destplayerindex(int32_t value) {
  
  _impl_.destplayerindex_ = value;
}
inline void CSRspVisitPlayer::set_destplayerindex(int32_t value) {
  _internal_set_destplayerindex(value);
  // @@protoc_insertion_point(field_set:msg.CSRspVisitPlayer.DestPlayerIndex)
}

// -------------------------------------------------------------------

// CSRspLeaveGameEarly

// -------------------------------------------------------------------

// CSRspReportAbsent

// -------------------------------------------------------------------

// CSNtfPvpChangeStage

// int32 RoundCnt = 1;
inline void CSNtfPvpChangeStage::clear_roundcnt() {
  _impl_.roundcnt_ = 0;
}
inline int32_t CSNtfPvpChangeStage::_internal_roundcnt() const {
  return _impl_.roundcnt_;
}
inline int32_t CSNtfPvpChangeStage::roundcnt() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChangeStage.RoundCnt)
  return _internal_roundcnt();
}
inline void CSNtfPvpChangeStage::_internal_set_roundcnt(int32_t value) {
  
  _impl_.roundcnt_ = value;
}
inline void CSNtfPvpChangeStage::set_roundcnt(int32_t value) {
  _internal_set_roundcnt(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChangeStage.RoundCnt)
}

// int32 Duration = 2;
inline void CSNtfPvpChangeStage::clear_duration() {
  _impl_.duration_ = 0;
}
inline int32_t CSNtfPvpChangeStage::_internal_duration() const {
  return _impl_.duration_;
}
inline int32_t CSNtfPvpChangeStage::duration() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChangeStage.Duration)
  return _internal_duration();
}
inline void CSNtfPvpChangeStage::_internal_set_duration(int32_t value) {
  
  _impl_.duration_ = value;
}
inline void CSNtfPvpChangeStage::set_duration(int32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChangeStage.Duration)
}

// .msg.GameStage Stage = 3;
inline void CSNtfPvpChangeStage::clear_stage() {
  _impl_.stage_ = 0;
}
inline ::msg::GameStage CSNtfPvpChangeStage::_internal_stage() const {
  return static_cast< ::msg::GameStage >(_impl_.stage_);
}
inline ::msg::GameStage CSNtfPvpChangeStage::stage() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChangeStage.Stage)
  return _internal_stage();
}
inline void CSNtfPvpChangeStage::_internal_set_stage(::msg::GameStage value) {
  
  _impl_.stage_ = value;
}
inline void CSNtfPvpChangeStage::set_stage(::msg::GameStage value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpChangeStage.Stage)
}

// repeated .msg.CorrectFormation Correction = 4;
inline int CSNtfPvpChangeStage::_internal_correction_size() const {
  return _impl_.correction_.size();
}
inline int CSNtfPvpChangeStage::correction_size() const {
  return _internal_correction_size();
}
inline void CSNtfPvpChangeStage::clear_correction() {
  _impl_.correction_.Clear();
}
inline ::msg::CorrectFormation* CSNtfPvpChangeStage::mutable_correction(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSNtfPvpChangeStage.Correction)
  return _impl_.correction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CorrectFormation >*
CSNtfPvpChangeStage::mutable_correction() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSNtfPvpChangeStage.Correction)
  return &_impl_.correction_;
}
inline const ::msg::CorrectFormation& CSNtfPvpChangeStage::_internal_correction(int index) const {
  return _impl_.correction_.Get(index);
}
inline const ::msg::CorrectFormation& CSNtfPvpChangeStage::correction(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpChangeStage.Correction)
  return _internal_correction(index);
}
inline ::msg::CorrectFormation* CSNtfPvpChangeStage::_internal_add_correction() {
  return _impl_.correction_.Add();
}
inline ::msg::CorrectFormation* CSNtfPvpChangeStage::add_correction() {
  ::msg::CorrectFormation* _add = _internal_add_correction();
  // @@protoc_insertion_point(field_add:msg.CSNtfPvpChangeStage.Correction)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CorrectFormation >&
CSNtfPvpChangeStage::correction() const {
  // @@protoc_insertion_point(field_list:msg.CSNtfPvpChangeStage.Correction)
  return _impl_.correction_;
}

// -------------------------------------------------------------------

// CSNtfPvpUpdateMoney

// int32 Money = 1;
inline void CSNtfPvpUpdateMoney::clear_money() {
  _impl_.money_ = 0;
}
inline int32_t CSNtfPvpUpdateMoney::_internal_money() const {
  return _impl_.money_;
}
inline int32_t CSNtfPvpUpdateMoney::money() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpUpdateMoney.Money)
  return _internal_money();
}
inline void CSNtfPvpUpdateMoney::_internal_set_money(int32_t value) {
  
  _impl_.money_ = value;
}
inline void CSNtfPvpUpdateMoney::set_money(int32_t value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpUpdateMoney.Money)
}

// int32 PlayerIdx = 2;
inline void CSNtfPvpUpdateMoney::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfPvpUpdateMoney::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfPvpUpdateMoney::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpUpdateMoney.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfPvpUpdateMoney::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfPvpUpdateMoney::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpUpdateMoney.PlayerIdx)
}

// int32 SrcTag = 3;
inline void CSNtfPvpUpdateMoney::clear_srctag() {
  _impl_.srctag_ = 0;
}
inline int32_t CSNtfPvpUpdateMoney::_internal_srctag() const {
  return _impl_.srctag_;
}
inline int32_t CSNtfPvpUpdateMoney::srctag() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpUpdateMoney.SrcTag)
  return _internal_srctag();
}
inline void CSNtfPvpUpdateMoney::_internal_set_srctag(int32_t value) {
  
  _impl_.srctag_ = value;
}
inline void CSNtfPvpUpdateMoney::set_srctag(int32_t value) {
  _internal_set_srctag(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpUpdateMoney.SrcTag)
}

// -------------------------------------------------------------------

// CSNtfPvpUpdateMessengerPos

// int32 PlayerIndex = 1;
inline void CSNtfPvpUpdateMessengerPos::clear_playerindex() {
  _impl_.playerindex_ = 0;
}
inline int32_t CSNtfPvpUpdateMessengerPos::_internal_playerindex() const {
  return _impl_.playerindex_;
}
inline int32_t CSNtfPvpUpdateMessengerPos::playerindex() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpUpdateMessengerPos.PlayerIndex)
  return _internal_playerindex();
}
inline void CSNtfPvpUpdateMessengerPos::_internal_set_playerindex(int32_t value) {
  
  _impl_.playerindex_ = value;
}
inline void CSNtfPvpUpdateMessengerPos::set_playerindex(int32_t value) {
  _internal_set_playerindex(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpUpdateMessengerPos.PlayerIndex)
}

// .msg.PositionFloat2D Pos = 2;
inline bool CSNtfPvpUpdateMessengerPos::_internal_has_pos() const {
  return this != internal_default_instance() && _impl_.pos_ != nullptr;
}
inline bool CSNtfPvpUpdateMessengerPos::has_pos() const {
  return _internal_has_pos();
}
inline void CSNtfPvpUpdateMessengerPos::clear_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
}
inline const ::msg::PositionFloat2D& CSNtfPvpUpdateMessengerPos::_internal_pos() const {
  const ::msg::PositionFloat2D* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionFloat2D&>(
      ::msg::_PositionFloat2D_default_instance_);
}
inline const ::msg::PositionFloat2D& CSNtfPvpUpdateMessengerPos::pos() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpUpdateMessengerPos.Pos)
  return _internal_pos();
}
inline void CSNtfPvpUpdateMessengerPos::unsafe_arena_set_allocated_pos(
    ::msg::PositionFloat2D* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfPvpUpdateMessengerPos.Pos)
}
inline ::msg::PositionFloat2D* CSNtfPvpUpdateMessengerPos::release_pos() {
  
  ::msg::PositionFloat2D* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionFloat2D* CSNtfPvpUpdateMessengerPos::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:msg.CSNtfPvpUpdateMessengerPos.Pos)
  
  ::msg::PositionFloat2D* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::msg::PositionFloat2D* CSNtfPvpUpdateMessengerPos::_internal_mutable_pos() {
  
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionFloat2D>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::msg::PositionFloat2D* CSNtfPvpUpdateMessengerPos::mutable_pos() {
  ::msg::PositionFloat2D* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfPvpUpdateMessengerPos.Pos)
  return _msg;
}
inline void CSNtfPvpUpdateMessengerPos::set_allocated_pos(::msg::PositionFloat2D* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfPvpUpdateMessengerPos.Pos)
}

// .msg.MessengerMoveType Type = 3;
inline void CSNtfPvpUpdateMessengerPos::clear_type() {
  _impl_.type_ = 0;
}
inline ::msg::MessengerMoveType CSNtfPvpUpdateMessengerPos::_internal_type() const {
  return static_cast< ::msg::MessengerMoveType >(_impl_.type_);
}
inline ::msg::MessengerMoveType CSNtfPvpUpdateMessengerPos::type() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpUpdateMessengerPos.Type)
  return _internal_type();
}
inline void CSNtfPvpUpdateMessengerPos::_internal_set_type(::msg::MessengerMoveType value) {
  
  _impl_.type_ = value;
}
inline void CSNtfPvpUpdateMessengerPos::set_type(::msg::MessengerMoveType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpUpdateMessengerPos.Type)
}

// -------------------------------------------------------------------

// CSNtfPvpPlayerLoggedIn

// .msg.PlayerBasicInfo PlayerInfo = 1;
inline bool CSNtfPvpPlayerLoggedIn::_internal_has_playerinfo() const {
  return this != internal_default_instance() && _impl_.playerinfo_ != nullptr;
}
inline bool CSNtfPvpPlayerLoggedIn::has_playerinfo() const {
  return _internal_has_playerinfo();
}
inline void CSNtfPvpPlayerLoggedIn::clear_playerinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.playerinfo_ != nullptr) {
    delete _impl_.playerinfo_;
  }
  _impl_.playerinfo_ = nullptr;
}
inline const ::msg::PlayerBasicInfo& CSNtfPvpPlayerLoggedIn::_internal_playerinfo() const {
  const ::msg::PlayerBasicInfo* p = _impl_.playerinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PlayerBasicInfo&>(
      ::msg::_PlayerBasicInfo_default_instance_);
}
inline const ::msg::PlayerBasicInfo& CSNtfPvpPlayerLoggedIn::playerinfo() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpPlayerLoggedIn.PlayerInfo)
  return _internal_playerinfo();
}
inline void CSNtfPvpPlayerLoggedIn::unsafe_arena_set_allocated_playerinfo(
    ::msg::PlayerBasicInfo* playerinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playerinfo_);
  }
  _impl_.playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfPvpPlayerLoggedIn.PlayerInfo)
}
inline ::msg::PlayerBasicInfo* CSNtfPvpPlayerLoggedIn::release_playerinfo() {
  
  ::msg::PlayerBasicInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PlayerBasicInfo* CSNtfPvpPlayerLoggedIn::unsafe_arena_release_playerinfo() {
  // @@protoc_insertion_point(field_release:msg.CSNtfPvpPlayerLoggedIn.PlayerInfo)
  
  ::msg::PlayerBasicInfo* temp = _impl_.playerinfo_;
  _impl_.playerinfo_ = nullptr;
  return temp;
}
inline ::msg::PlayerBasicInfo* CSNtfPvpPlayerLoggedIn::_internal_mutable_playerinfo() {
  
  if (_impl_.playerinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PlayerBasicInfo>(GetArenaForAllocation());
    _impl_.playerinfo_ = p;
  }
  return _impl_.playerinfo_;
}
inline ::msg::PlayerBasicInfo* CSNtfPvpPlayerLoggedIn::mutable_playerinfo() {
  ::msg::PlayerBasicInfo* _msg = _internal_mutable_playerinfo();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfPvpPlayerLoggedIn.PlayerInfo)
  return _msg;
}
inline void CSNtfPvpPlayerLoggedIn::set_allocated_playerinfo(::msg::PlayerBasicInfo* playerinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.playerinfo_;
  }
  if (playerinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(playerinfo);
    if (message_arena != submessage_arena) {
      playerinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playerinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.playerinfo_ = playerinfo;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfPvpPlayerLoggedIn.PlayerInfo)
}

// -------------------------------------------------------------------

// CSNtfPvpSetReadyState

// int32 PlayerIdx = 1;
inline void CSNtfPvpSetReadyState::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfPvpSetReadyState::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfPvpSetReadyState::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpSetReadyState.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfPvpSetReadyState::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfPvpSetReadyState::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpSetReadyState.PlayerIdx)
}

// bool State = 2;
inline void CSNtfPvpSetReadyState::clear_state() {
  _impl_.state_ = false;
}
inline bool CSNtfPvpSetReadyState::_internal_state() const {
  return _impl_.state_;
}
inline bool CSNtfPvpSetReadyState::state() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpSetReadyState.State)
  return _internal_state();
}
inline void CSNtfPvpSetReadyState::_internal_set_state(bool value) {
  
  _impl_.state_ = value;
}
inline void CSNtfPvpSetReadyState::set_state(bool value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpSetReadyState.State)
}

// -------------------------------------------------------------------

// CSNtfPvpPlayerAllReady

// -------------------------------------------------------------------

// CSNtfPvpPlayerDead

// int32 PlayerIdx = 1;
inline void CSNtfPvpPlayerDead::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfPvpPlayerDead::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfPvpPlayerDead::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpPlayerDead.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfPvpPlayerDead::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfPvpPlayerDead::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpPlayerDead.PlayerIdx)
}

// -------------------------------------------------------------------

// CSNtfPvpPlayerOffline

// int32 PlayerIdx = 1;
inline void CSNtfPvpPlayerOffline::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfPvpPlayerOffline::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfPvpPlayerOffline::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpPlayerOffline.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfPvpPlayerOffline::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfPvpPlayerOffline::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpPlayerOffline.PlayerIdx)
}

// -------------------------------------------------------------------

// CSNtfChessOnBoardSold

// int32 PlayerIdx = 1;
inline void CSNtfChessOnBoardSold::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfChessOnBoardSold::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfChessOnBoardSold::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfChessOnBoardSold.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfChessOnBoardSold::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfChessOnBoardSold::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfChessOnBoardSold.PlayerIdx)
}

// .msg.PositionInt2D SrcPos = 2;
inline bool CSNtfChessOnBoardSold::_internal_has_srcpos() const {
  return this != internal_default_instance() && _impl_.srcpos_ != nullptr;
}
inline bool CSNtfChessOnBoardSold::has_srcpos() const {
  return _internal_has_srcpos();
}
inline void CSNtfChessOnBoardSold::clear_srcpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.srcpos_ != nullptr) {
    delete _impl_.srcpos_;
  }
  _impl_.srcpos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSNtfChessOnBoardSold::_internal_srcpos() const {
  const ::msg::PositionInt2D* p = _impl_.srcpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSNtfChessOnBoardSold::srcpos() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfChessOnBoardSold.SrcPos)
  return _internal_srcpos();
}
inline void CSNtfChessOnBoardSold::unsafe_arena_set_allocated_srcpos(
    ::msg::PositionInt2D* srcpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.srcpos_);
  }
  _impl_.srcpos_ = srcpos;
  if (srcpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfChessOnBoardSold.SrcPos)
}
inline ::msg::PositionInt2D* CSNtfChessOnBoardSold::release_srcpos() {
  
  ::msg::PositionInt2D* temp = _impl_.srcpos_;
  _impl_.srcpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSNtfChessOnBoardSold::unsafe_arena_release_srcpos() {
  // @@protoc_insertion_point(field_release:msg.CSNtfChessOnBoardSold.SrcPos)
  
  ::msg::PositionInt2D* temp = _impl_.srcpos_;
  _impl_.srcpos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSNtfChessOnBoardSold::_internal_mutable_srcpos() {
  
  if (_impl_.srcpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.srcpos_ = p;
  }
  return _impl_.srcpos_;
}
inline ::msg::PositionInt2D* CSNtfChessOnBoardSold::mutable_srcpos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_srcpos();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfChessOnBoardSold.SrcPos)
  return _msg;
}
inline void CSNtfChessOnBoardSold::set_allocated_srcpos(::msg::PositionInt2D* srcpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.srcpos_;
  }
  if (srcpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(srcpos);
    if (message_arena != submessage_arena) {
      srcpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srcpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.srcpos_ = srcpos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfChessOnBoardSold.SrcPos)
}

// -------------------------------------------------------------------

// CSNtfChessRemovedFromBag

// int32 PlayerIdx = 1;
inline void CSNtfChessRemovedFromBag::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfChessRemovedFromBag::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfChessRemovedFromBag::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfChessRemovedFromBag.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfChessRemovedFromBag::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfChessRemovedFromBag::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfChessRemovedFromBag.PlayerIdx)
}

// int32 BagIndex = 2;
inline void CSNtfChessRemovedFromBag::clear_bagindex() {
  _impl_.bagindex_ = 0;
}
inline int32_t CSNtfChessRemovedFromBag::_internal_bagindex() const {
  return _impl_.bagindex_;
}
inline int32_t CSNtfChessRemovedFromBag::bagindex() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfChessRemovedFromBag.BagIndex)
  return _internal_bagindex();
}
inline void CSNtfChessRemovedFromBag::_internal_set_bagindex(int32_t value) {
  
  _impl_.bagindex_ = value;
}
inline void CSNtfChessRemovedFromBag::set_bagindex(int32_t value) {
  _internal_set_bagindex(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfChessRemovedFromBag.BagIndex)
}

// -------------------------------------------------------------------

// CSNtfBuyChess

// int32 PlayerIdx = 1;
inline void CSNtfBuyChess::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfBuyChess::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfBuyChess::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBuyChess.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfBuyChess::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfBuyChess::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfBuyChess.PlayerIdx)
}

// int32 ChessConfigId = 2;
inline void CSNtfBuyChess::clear_chessconfigid() {
  _impl_.chessconfigid_ = 0;
}
inline int32_t CSNtfBuyChess::_internal_chessconfigid() const {
  return _impl_.chessconfigid_;
}
inline int32_t CSNtfBuyChess::chessconfigid() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBuyChess.ChessConfigId)
  return _internal_chessconfigid();
}
inline void CSNtfBuyChess::_internal_set_chessconfigid(int32_t value) {
  
  _impl_.chessconfigid_ = value;
}
inline void CSNtfBuyChess::set_chessconfigid(int32_t value) {
  _internal_set_chessconfigid(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfBuyChess.ChessConfigId)
}

// bool IsToBag = 3;
inline void CSNtfBuyChess::clear_istobag() {
  _impl_.istobag_ = false;
}
inline bool CSNtfBuyChess::_internal_istobag() const {
  return _impl_.istobag_;
}
inline bool CSNtfBuyChess::istobag() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBuyChess.IsToBag)
  return _internal_istobag();
}
inline void CSNtfBuyChess::_internal_set_istobag(bool value) {
  
  _impl_.istobag_ = value;
}
inline void CSNtfBuyChess::set_istobag(bool value) {
  _internal_set_istobag(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfBuyChess.IsToBag)
}

// int32 BagIndex = 4;
inline void CSNtfBuyChess::clear_bagindex() {
  _impl_.bagindex_ = 0;
}
inline int32_t CSNtfBuyChess::_internal_bagindex() const {
  return _impl_.bagindex_;
}
inline int32_t CSNtfBuyChess::bagindex() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBuyChess.BagIndex)
  return _internal_bagindex();
}
inline void CSNtfBuyChess::_internal_set_bagindex(int32_t value) {
  
  _impl_.bagindex_ = value;
}
inline void CSNtfBuyChess::set_bagindex(int32_t value) {
  _internal_set_bagindex(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfBuyChess.BagIndex)
}

// int32 Tx = 5;
inline void CSNtfBuyChess::clear_tx() {
  _impl_.tx_ = 0;
}
inline int32_t CSNtfBuyChess::_internal_tx() const {
  return _impl_.tx_;
}
inline int32_t CSNtfBuyChess::tx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBuyChess.Tx)
  return _internal_tx();
}
inline void CSNtfBuyChess::_internal_set_tx(int32_t value) {
  
  _impl_.tx_ = value;
}
inline void CSNtfBuyChess::set_tx(int32_t value) {
  _internal_set_tx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfBuyChess.Tx)
}

// int32 Ty = 6;
inline void CSNtfBuyChess::clear_ty() {
  _impl_.ty_ = 0;
}
inline int32_t CSNtfBuyChess::_internal_ty() const {
  return _impl_.ty_;
}
inline int32_t CSNtfBuyChess::ty() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBuyChess.Ty)
  return _internal_ty();
}
inline void CSNtfBuyChess::_internal_set_ty(int32_t value) {
  
  _impl_.ty_ = value;
}
inline void CSNtfBuyChess::set_ty(int32_t value) {
  _internal_set_ty(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfBuyChess.Ty)
}

// bool IsDrag = 7;
inline void CSNtfBuyChess::clear_isdrag() {
  _impl_.isdrag_ = false;
}
inline bool CSNtfBuyChess::_internal_isdrag() const {
  return _impl_.isdrag_;
}
inline bool CSNtfBuyChess::isdrag() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfBuyChess.IsDrag)
  return _internal_isdrag();
}
inline void CSNtfBuyChess::_internal_set_isdrag(bool value) {
  
  _impl_.isdrag_ = value;
}
inline void CSNtfBuyChess::set_isdrag(bool value) {
  _internal_set_isdrag(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfBuyChess.IsDrag)
}

// -------------------------------------------------------------------

// CSNtfChessRetrievedToBag

// int32 PlayerIdx = 1;
inline void CSNtfChessRetrievedToBag::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfChessRetrievedToBag::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfChessRetrievedToBag::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfChessRetrievedToBag.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfChessRetrievedToBag::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfChessRetrievedToBag::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfChessRetrievedToBag.PlayerIdx)
}

// int32 BagIndex = 2;
inline void CSNtfChessRetrievedToBag::clear_bagindex() {
  _impl_.bagindex_ = 0;
}
inline int32_t CSNtfChessRetrievedToBag::_internal_bagindex() const {
  return _impl_.bagindex_;
}
inline int32_t CSNtfChessRetrievedToBag::bagindex() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfChessRetrievedToBag.BagIndex)
  return _internal_bagindex();
}
inline void CSNtfChessRetrievedToBag::_internal_set_bagindex(int32_t value) {
  
  _impl_.bagindex_ = value;
}
inline void CSNtfChessRetrievedToBag::set_bagindex(int32_t value) {
  _internal_set_bagindex(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfChessRetrievedToBag.BagIndex)
}

// .msg.PositionInt2D SrcPos = 3;
inline bool CSNtfChessRetrievedToBag::_internal_has_srcpos() const {
  return this != internal_default_instance() && _impl_.srcpos_ != nullptr;
}
inline bool CSNtfChessRetrievedToBag::has_srcpos() const {
  return _internal_has_srcpos();
}
inline void CSNtfChessRetrievedToBag::clear_srcpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.srcpos_ != nullptr) {
    delete _impl_.srcpos_;
  }
  _impl_.srcpos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSNtfChessRetrievedToBag::_internal_srcpos() const {
  const ::msg::PositionInt2D* p = _impl_.srcpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSNtfChessRetrievedToBag::srcpos() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfChessRetrievedToBag.SrcPos)
  return _internal_srcpos();
}
inline void CSNtfChessRetrievedToBag::unsafe_arena_set_allocated_srcpos(
    ::msg::PositionInt2D* srcpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.srcpos_);
  }
  _impl_.srcpos_ = srcpos;
  if (srcpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfChessRetrievedToBag.SrcPos)
}
inline ::msg::PositionInt2D* CSNtfChessRetrievedToBag::release_srcpos() {
  
  ::msg::PositionInt2D* temp = _impl_.srcpos_;
  _impl_.srcpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSNtfChessRetrievedToBag::unsafe_arena_release_srcpos() {
  // @@protoc_insertion_point(field_release:msg.CSNtfChessRetrievedToBag.SrcPos)
  
  ::msg::PositionInt2D* temp = _impl_.srcpos_;
  _impl_.srcpos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSNtfChessRetrievedToBag::_internal_mutable_srcpos() {
  
  if (_impl_.srcpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.srcpos_ = p;
  }
  return _impl_.srcpos_;
}
inline ::msg::PositionInt2D* CSNtfChessRetrievedToBag::mutable_srcpos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_srcpos();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfChessRetrievedToBag.SrcPos)
  return _msg;
}
inline void CSNtfChessRetrievedToBag::set_allocated_srcpos(::msg::PositionInt2D* srcpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.srcpos_;
  }
  if (srcpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(srcpos);
    if (message_arena != submessage_arena) {
      srcpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srcpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.srcpos_ = srcpos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfChessRetrievedToBag.SrcPos)
}

// -------------------------------------------------------------------

// CSNtfChessMoved

// .msg.PositionInt2D SrcPos = 1;
inline bool CSNtfChessMoved::_internal_has_srcpos() const {
  return this != internal_default_instance() && _impl_.srcpos_ != nullptr;
}
inline bool CSNtfChessMoved::has_srcpos() const {
  return _internal_has_srcpos();
}
inline void CSNtfChessMoved::clear_srcpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.srcpos_ != nullptr) {
    delete _impl_.srcpos_;
  }
  _impl_.srcpos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSNtfChessMoved::_internal_srcpos() const {
  const ::msg::PositionInt2D* p = _impl_.srcpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSNtfChessMoved::srcpos() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfChessMoved.SrcPos)
  return _internal_srcpos();
}
inline void CSNtfChessMoved::unsafe_arena_set_allocated_srcpos(
    ::msg::PositionInt2D* srcpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.srcpos_);
  }
  _impl_.srcpos_ = srcpos;
  if (srcpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfChessMoved.SrcPos)
}
inline ::msg::PositionInt2D* CSNtfChessMoved::release_srcpos() {
  
  ::msg::PositionInt2D* temp = _impl_.srcpos_;
  _impl_.srcpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSNtfChessMoved::unsafe_arena_release_srcpos() {
  // @@protoc_insertion_point(field_release:msg.CSNtfChessMoved.SrcPos)
  
  ::msg::PositionInt2D* temp = _impl_.srcpos_;
  _impl_.srcpos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSNtfChessMoved::_internal_mutable_srcpos() {
  
  if (_impl_.srcpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.srcpos_ = p;
  }
  return _impl_.srcpos_;
}
inline ::msg::PositionInt2D* CSNtfChessMoved::mutable_srcpos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_srcpos();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfChessMoved.SrcPos)
  return _msg;
}
inline void CSNtfChessMoved::set_allocated_srcpos(::msg::PositionInt2D* srcpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.srcpos_;
  }
  if (srcpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(srcpos);
    if (message_arena != submessage_arena) {
      srcpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, srcpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.srcpos_ = srcpos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfChessMoved.SrcPos)
}

// .msg.PositionInt2D DestPos = 2;
inline bool CSNtfChessMoved::_internal_has_destpos() const {
  return this != internal_default_instance() && _impl_.destpos_ != nullptr;
}
inline bool CSNtfChessMoved::has_destpos() const {
  return _internal_has_destpos();
}
inline void CSNtfChessMoved::clear_destpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.destpos_ != nullptr) {
    delete _impl_.destpos_;
  }
  _impl_.destpos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSNtfChessMoved::_internal_destpos() const {
  const ::msg::PositionInt2D* p = _impl_.destpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSNtfChessMoved::destpos() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfChessMoved.DestPos)
  return _internal_destpos();
}
inline void CSNtfChessMoved::unsafe_arena_set_allocated_destpos(
    ::msg::PositionInt2D* destpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destpos_);
  }
  _impl_.destpos_ = destpos;
  if (destpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfChessMoved.DestPos)
}
inline ::msg::PositionInt2D* CSNtfChessMoved::release_destpos() {
  
  ::msg::PositionInt2D* temp = _impl_.destpos_;
  _impl_.destpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSNtfChessMoved::unsafe_arena_release_destpos() {
  // @@protoc_insertion_point(field_release:msg.CSNtfChessMoved.DestPos)
  
  ::msg::PositionInt2D* temp = _impl_.destpos_;
  _impl_.destpos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSNtfChessMoved::_internal_mutable_destpos() {
  
  if (_impl_.destpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.destpos_ = p;
  }
  return _impl_.destpos_;
}
inline ::msg::PositionInt2D* CSNtfChessMoved::mutable_destpos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_destpos();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfChessMoved.DestPos)
  return _msg;
}
inline void CSNtfChessMoved::set_allocated_destpos(::msg::PositionInt2D* destpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.destpos_;
  }
  if (destpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destpos);
    if (message_arena != submessage_arena) {
      destpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destpos_ = destpos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfChessMoved.DestPos)
}

// int32 PlayerIdx = 3;
inline void CSNtfChessMoved::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfChessMoved::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfChessMoved::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfChessMoved.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfChessMoved::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfChessMoved::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfChessMoved.PlayerIdx)
}

// bool Success = 4;
inline void CSNtfChessMoved::clear_success() {
  _impl_.success_ = false;
}
inline bool CSNtfChessMoved::_internal_success() const {
  return _impl_.success_;
}
inline bool CSNtfChessMoved::success() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfChessMoved.Success)
  return _internal_success();
}
inline void CSNtfChessMoved::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CSNtfChessMoved::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfChessMoved.Success)
}

// -------------------------------------------------------------------

// CSNtfChessFromBagToMap

// int32 PlayerIdx = 1;
inline void CSNtfChessFromBagToMap::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfChessFromBagToMap::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfChessFromBagToMap::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfChessFromBagToMap.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfChessFromBagToMap::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfChessFromBagToMap::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfChessFromBagToMap.PlayerIdx)
}

// int32 BagIdx = 2;
inline void CSNtfChessFromBagToMap::clear_bagidx() {
  _impl_.bagidx_ = 0;
}
inline int32_t CSNtfChessFromBagToMap::_internal_bagidx() const {
  return _impl_.bagidx_;
}
inline int32_t CSNtfChessFromBagToMap::bagidx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfChessFromBagToMap.BagIdx)
  return _internal_bagidx();
}
inline void CSNtfChessFromBagToMap::_internal_set_bagidx(int32_t value) {
  
  _impl_.bagidx_ = value;
}
inline void CSNtfChessFromBagToMap::set_bagidx(int32_t value) {
  _internal_set_bagidx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfChessFromBagToMap.BagIdx)
}

// .msg.PositionInt2D DestPos = 3;
inline bool CSNtfChessFromBagToMap::_internal_has_destpos() const {
  return this != internal_default_instance() && _impl_.destpos_ != nullptr;
}
inline bool CSNtfChessFromBagToMap::has_destpos() const {
  return _internal_has_destpos();
}
inline void CSNtfChessFromBagToMap::clear_destpos() {
  if (GetArenaForAllocation() == nullptr && _impl_.destpos_ != nullptr) {
    delete _impl_.destpos_;
  }
  _impl_.destpos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSNtfChessFromBagToMap::_internal_destpos() const {
  const ::msg::PositionInt2D* p = _impl_.destpos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSNtfChessFromBagToMap::destpos() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfChessFromBagToMap.DestPos)
  return _internal_destpos();
}
inline void CSNtfChessFromBagToMap::unsafe_arena_set_allocated_destpos(
    ::msg::PositionInt2D* destpos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destpos_);
  }
  _impl_.destpos_ = destpos;
  if (destpos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfChessFromBagToMap.DestPos)
}
inline ::msg::PositionInt2D* CSNtfChessFromBagToMap::release_destpos() {
  
  ::msg::PositionInt2D* temp = _impl_.destpos_;
  _impl_.destpos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSNtfChessFromBagToMap::unsafe_arena_release_destpos() {
  // @@protoc_insertion_point(field_release:msg.CSNtfChessFromBagToMap.DestPos)
  
  ::msg::PositionInt2D* temp = _impl_.destpos_;
  _impl_.destpos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSNtfChessFromBagToMap::_internal_mutable_destpos() {
  
  if (_impl_.destpos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.destpos_ = p;
  }
  return _impl_.destpos_;
}
inline ::msg::PositionInt2D* CSNtfChessFromBagToMap::mutable_destpos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_destpos();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfChessFromBagToMap.DestPos)
  return _msg;
}
inline void CSNtfChessFromBagToMap::set_allocated_destpos(::msg::PositionInt2D* destpos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.destpos_;
  }
  if (destpos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destpos);
    if (message_arena != submessage_arena) {
      destpos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destpos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destpos_ = destpos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfChessFromBagToMap.DestPos)
}

// -------------------------------------------------------------------

// CSNtfPlayerLvUpgraded

// int32 PlayerIdx = 1;
inline void CSNtfPlayerLvUpgraded::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfPlayerLvUpgraded::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfPlayerLvUpgraded::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPlayerLvUpgraded.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfPlayerLvUpgraded::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfPlayerLvUpgraded::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPlayerLvUpgraded.PlayerIdx)
}

// int32 NewPlayerLv = 2;
inline void CSNtfPlayerLvUpgraded::clear_newplayerlv() {
  _impl_.newplayerlv_ = 0;
}
inline int32_t CSNtfPlayerLvUpgraded::_internal_newplayerlv() const {
  return _impl_.newplayerlv_;
}
inline int32_t CSNtfPlayerLvUpgraded::newplayerlv() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPlayerLvUpgraded.NewPlayerLv)
  return _internal_newplayerlv();
}
inline void CSNtfPlayerLvUpgraded::_internal_set_newplayerlv(int32_t value) {
  
  _impl_.newplayerlv_ = value;
}
inline void CSNtfPlayerLvUpgraded::set_newplayerlv(int32_t value) {
  _internal_set_newplayerlv(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPlayerLvUpgraded.NewPlayerLv)
}

// -------------------------------------------------------------------

// CSNtfUpdateExp

// int32 CurrentExp = 1;
inline void CSNtfUpdateExp::clear_currentexp() {
  _impl_.currentexp_ = 0;
}
inline int32_t CSNtfUpdateExp::_internal_currentexp() const {
  return _impl_.currentexp_;
}
inline int32_t CSNtfUpdateExp::currentexp() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfUpdateExp.CurrentExp)
  return _internal_currentexp();
}
inline void CSNtfUpdateExp::_internal_set_currentexp(int32_t value) {
  
  _impl_.currentexp_ = value;
}
inline void CSNtfUpdateExp::set_currentexp(int32_t value) {
  _internal_set_currentexp(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfUpdateExp.CurrentExp)
}

// -------------------------------------------------------------------

// CSNtfSetEnemy

// int32 PlayerIdx = 1;
inline void CSNtfSetEnemy::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfSetEnemy::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfSetEnemy::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfSetEnemy.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfSetEnemy::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfSetEnemy::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfSetEnemy.PlayerIdx)
}

// int32 EnemyIdx = 2;
inline void CSNtfSetEnemy::clear_enemyidx() {
  _impl_.enemyidx_ = 0;
}
inline int32_t CSNtfSetEnemy::_internal_enemyidx() const {
  return _impl_.enemyidx_;
}
inline int32_t CSNtfSetEnemy::enemyidx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfSetEnemy.EnemyIdx)
  return _internal_enemyidx();
}
inline void CSNtfSetEnemy::_internal_set_enemyidx(int32_t value) {
  
  _impl_.enemyidx_ = value;
}
inline void CSNtfSetEnemy::set_enemyidx(int32_t value) {
  _internal_set_enemyidx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfSetEnemy.EnemyIdx)
}

// -------------------------------------------------------------------

// CSNtfSetSeed

// int32 Seed = 1;
inline void CSNtfSetSeed::clear_seed() {
  _impl_.seed_ = 0;
}
inline int32_t CSNtfSetSeed::_internal_seed() const {
  return _impl_.seed_;
}
inline int32_t CSNtfSetSeed::seed() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfSetSeed.Seed)
  return _internal_seed();
}
inline void CSNtfSetSeed::_internal_set_seed(int32_t value) {
  
  _impl_.seed_ = value;
}
inline void CSNtfSetSeed::set_seed(int32_t value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfSetSeed.Seed)
}

// -------------------------------------------------------------------

// CSNtfBattleTerminated

// -------------------------------------------------------------------

// CSNtfShopRefreshed

// repeated int32 Chesses = 1;
inline int CSNtfShopRefreshed::_internal_chesses_size() const {
  return _impl_.chesses_.size();
}
inline int CSNtfShopRefreshed::chesses_size() const {
  return _internal_chesses_size();
}
inline void CSNtfShopRefreshed::clear_chesses() {
  _impl_.chesses_.Clear();
}
inline int32_t CSNtfShopRefreshed::_internal_chesses(int index) const {
  return _impl_.chesses_.Get(index);
}
inline int32_t CSNtfShopRefreshed::chesses(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSNtfShopRefreshed.Chesses)
  return _internal_chesses(index);
}
inline void CSNtfShopRefreshed::set_chesses(int index, int32_t value) {
  _impl_.chesses_.Set(index, value);
  // @@protoc_insertion_point(field_set:msg.CSNtfShopRefreshed.Chesses)
}
inline void CSNtfShopRefreshed::_internal_add_chesses(int32_t value) {
  _impl_.chesses_.Add(value);
}
inline void CSNtfShopRefreshed::add_chesses(int32_t value) {
  _internal_add_chesses(value);
  // @@protoc_insertion_point(field_add:msg.CSNtfShopRefreshed.Chesses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CSNtfShopRefreshed::_internal_chesses() const {
  return _impl_.chesses_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CSNtfShopRefreshed::chesses() const {
  // @@protoc_insertion_point(field_list:msg.CSNtfShopRefreshed.Chesses)
  return _internal_chesses();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CSNtfShopRefreshed::_internal_mutable_chesses() {
  return &_impl_.chesses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CSNtfShopRefreshed::mutable_chesses() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSNtfShopRefreshed.Chesses)
  return _internal_mutable_chesses();
}

// -------------------------------------------------------------------

// CSNtfChessMovedWithinBag

// int32 PlayerIdx = 1;
inline void CSNtfChessMovedWithinBag::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfChessMovedWithinBag::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfChessMovedWithinBag::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfChessMovedWithinBag.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfChessMovedWithinBag::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfChessMovedWithinBag::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfChessMovedWithinBag.PlayerIdx)
}

// int32 SrcBagIdx = 2;
inline void CSNtfChessMovedWithinBag::clear_srcbagidx() {
  _impl_.srcbagidx_ = 0;
}
inline int32_t CSNtfChessMovedWithinBag::_internal_srcbagidx() const {
  return _impl_.srcbagidx_;
}
inline int32_t CSNtfChessMovedWithinBag::srcbagidx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfChessMovedWithinBag.SrcBagIdx)
  return _internal_srcbagidx();
}
inline void CSNtfChessMovedWithinBag::_internal_set_srcbagidx(int32_t value) {
  
  _impl_.srcbagidx_ = value;
}
inline void CSNtfChessMovedWithinBag::set_srcbagidx(int32_t value) {
  _internal_set_srcbagidx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfChessMovedWithinBag.SrcBagIdx)
}

// int32 DestBagIdx = 3;
inline void CSNtfChessMovedWithinBag::clear_destbagidx() {
  _impl_.destbagidx_ = 0;
}
inline int32_t CSNtfChessMovedWithinBag::_internal_destbagidx() const {
  return _impl_.destbagidx_;
}
inline int32_t CSNtfChessMovedWithinBag::destbagidx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfChessMovedWithinBag.DestBagIdx)
  return _internal_destbagidx();
}
inline void CSNtfChessMovedWithinBag::_internal_set_destbagidx(int32_t value) {
  
  _impl_.destbagidx_ = value;
}
inline void CSNtfChessMovedWithinBag::set_destbagidx(int32_t value) {
  _internal_set_destbagidx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfChessMovedWithinBag.DestBagIdx)
}

// -------------------------------------------------------------------

// CSNtfCreepDied

// int32 PlayerIdx = 1;
inline void CSNtfCreepDied::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfCreepDied::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfCreepDied::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfCreepDied.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfCreepDied::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfCreepDied::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfCreepDied.PlayerIdx)
}

// int32 CreepId = 2;
inline void CSNtfCreepDied::clear_creepid() {
  _impl_.creepid_ = 0;
}
inline int32_t CSNtfCreepDied::_internal_creepid() const {
  return _impl_.creepid_;
}
inline int32_t CSNtfCreepDied::creepid() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfCreepDied.CreepId)
  return _internal_creepid();
}
inline void CSNtfCreepDied::_internal_set_creepid(int32_t value) {
  
  _impl_.creepid_ = value;
}
inline void CSNtfCreepDied::set_creepid(int32_t value) {
  _internal_set_creepid(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfCreepDied.CreepId)
}

// int32 EquipNetId = 3;
inline void CSNtfCreepDied::clear_equipnetid() {
  _impl_.equipnetid_ = 0;
}
inline int32_t CSNtfCreepDied::_internal_equipnetid() const {
  return _impl_.equipnetid_;
}
inline int32_t CSNtfCreepDied::equipnetid() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfCreepDied.EquipNetId)
  return _internal_equipnetid();
}
inline void CSNtfCreepDied::_internal_set_equipnetid(int32_t value) {
  
  _impl_.equipnetid_ = value;
}
inline void CSNtfCreepDied::set_equipnetid(int32_t value) {
  _internal_set_equipnetid(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfCreepDied.EquipNetId)
}

// int32 EquipId = 4;
inline void CSNtfCreepDied::clear_equipid() {
  _impl_.equipid_ = 0;
}
inline int32_t CSNtfCreepDied::_internal_equipid() const {
  return _impl_.equipid_;
}
inline int32_t CSNtfCreepDied::equipid() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfCreepDied.EquipId)
  return _internal_equipid();
}
inline void CSNtfCreepDied::_internal_set_equipid(int32_t value) {
  
  _impl_.equipid_ = value;
}
inline void CSNtfCreepDied::set_equipid(int32_t value) {
  _internal_set_equipid(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfCreepDied.EquipId)
}

// .msg.PositionInt2D CreepPos = 5;
inline bool CSNtfCreepDied::_internal_has_creeppos() const {
  return this != internal_default_instance() && _impl_.creeppos_ != nullptr;
}
inline bool CSNtfCreepDied::has_creeppos() const {
  return _internal_has_creeppos();
}
inline void CSNtfCreepDied::clear_creeppos() {
  if (GetArenaForAllocation() == nullptr && _impl_.creeppos_ != nullptr) {
    delete _impl_.creeppos_;
  }
  _impl_.creeppos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSNtfCreepDied::_internal_creeppos() const {
  const ::msg::PositionInt2D* p = _impl_.creeppos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSNtfCreepDied::creeppos() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfCreepDied.CreepPos)
  return _internal_creeppos();
}
inline void CSNtfCreepDied::unsafe_arena_set_allocated_creeppos(
    ::msg::PositionInt2D* creeppos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.creeppos_);
  }
  _impl_.creeppos_ = creeppos;
  if (creeppos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfCreepDied.CreepPos)
}
inline ::msg::PositionInt2D* CSNtfCreepDied::release_creeppos() {
  
  ::msg::PositionInt2D* temp = _impl_.creeppos_;
  _impl_.creeppos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSNtfCreepDied::unsafe_arena_release_creeppos() {
  // @@protoc_insertion_point(field_release:msg.CSNtfCreepDied.CreepPos)
  
  ::msg::PositionInt2D* temp = _impl_.creeppos_;
  _impl_.creeppos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSNtfCreepDied::_internal_mutable_creeppos() {
  
  if (_impl_.creeppos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.creeppos_ = p;
  }
  return _impl_.creeppos_;
}
inline ::msg::PositionInt2D* CSNtfCreepDied::mutable_creeppos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_creeppos();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfCreepDied.CreepPos)
  return _msg;
}
inline void CSNtfCreepDied::set_allocated_creeppos(::msg::PositionInt2D* creeppos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.creeppos_;
  }
  if (creeppos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(creeppos);
    if (message_arena != submessage_arena) {
      creeppos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, creeppos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.creeppos_ = creeppos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfCreepDied.CreepPos)
}

// -------------------------------------------------------------------

// CSNtfUpdateHp

// int32 PlayerIdx = 1;
inline void CSNtfUpdateHp::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfUpdateHp::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfUpdateHp::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfUpdateHp.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfUpdateHp::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfUpdateHp::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfUpdateHp.PlayerIdx)
}

// int32 Hp = 2;
inline void CSNtfUpdateHp::clear_hp() {
  _impl_.hp_ = 0;
}
inline int32_t CSNtfUpdateHp::_internal_hp() const {
  return _impl_.hp_;
}
inline int32_t CSNtfUpdateHp::hp() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfUpdateHp.Hp)
  return _internal_hp();
}
inline void CSNtfUpdateHp::_internal_set_hp(int32_t value) {
  
  _impl_.hp_ = value;
}
inline void CSNtfUpdateHp::set_hp(int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfUpdateHp.Hp)
}

// -------------------------------------------------------------------

// CSNtfPickupEquipment

// int32 PlayerIdx = 1;
inline void CSNtfPickupEquipment::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfPickupEquipment::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfPickupEquipment::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPickupEquipment.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfPickupEquipment::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfPickupEquipment::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPickupEquipment.PlayerIdx)
}

// int32 EquipNetId = 2;
inline void CSNtfPickupEquipment::clear_equipnetid() {
  _impl_.equipnetid_ = 0;
}
inline int32_t CSNtfPickupEquipment::_internal_equipnetid() const {
  return _impl_.equipnetid_;
}
inline int32_t CSNtfPickupEquipment::equipnetid() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPickupEquipment.EquipNetId)
  return _internal_equipnetid();
}
inline void CSNtfPickupEquipment::_internal_set_equipnetid(int32_t value) {
  
  _impl_.equipnetid_ = value;
}
inline void CSNtfPickupEquipment::set_equipnetid(int32_t value) {
  _internal_set_equipnetid(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPickupEquipment.EquipNetId)
}

// int32 BagIdx = 3;
inline void CSNtfPickupEquipment::clear_bagidx() {
  _impl_.bagidx_ = 0;
}
inline int32_t CSNtfPickupEquipment::_internal_bagidx() const {
  return _impl_.bagidx_;
}
inline int32_t CSNtfPickupEquipment::bagidx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPickupEquipment.BagIdx)
  return _internal_bagidx();
}
inline void CSNtfPickupEquipment::_internal_set_bagidx(int32_t value) {
  
  _impl_.bagidx_ = value;
}
inline void CSNtfPickupEquipment::set_bagidx(int32_t value) {
  _internal_set_bagidx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPickupEquipment.BagIdx)
}

// -------------------------------------------------------------------

// CSNtfUseEquipment

// int32 NetId = 1;
inline void CSNtfUseEquipment::clear_netid() {
  _impl_.netid_ = 0;
}
inline int32_t CSNtfUseEquipment::_internal_netid() const {
  return _impl_.netid_;
}
inline int32_t CSNtfUseEquipment::netid() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfUseEquipment.NetId)
  return _internal_netid();
}
inline void CSNtfUseEquipment::_internal_set_netid(int32_t value) {
  
  _impl_.netid_ = value;
}
inline void CSNtfUseEquipment::set_netid(int32_t value) {
  _internal_set_netid(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfUseEquipment.NetId)
}

// bool IsChessInBag = 2;
inline void CSNtfUseEquipment::clear_ischessinbag() {
  _impl_.ischessinbag_ = false;
}
inline bool CSNtfUseEquipment::_internal_ischessinbag() const {
  return _impl_.ischessinbag_;
}
inline bool CSNtfUseEquipment::ischessinbag() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfUseEquipment.IsChessInBag)
  return _internal_ischessinbag();
}
inline void CSNtfUseEquipment::_internal_set_ischessinbag(bool value) {
  
  _impl_.ischessinbag_ = value;
}
inline void CSNtfUseEquipment::set_ischessinbag(bool value) {
  _internal_set_ischessinbag(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfUseEquipment.IsChessInBag)
}

// int32 BagIndex = 3;
inline void CSNtfUseEquipment::clear_bagindex() {
  _impl_.bagindex_ = 0;
}
inline int32_t CSNtfUseEquipment::_internal_bagindex() const {
  return _impl_.bagindex_;
}
inline int32_t CSNtfUseEquipment::bagindex() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfUseEquipment.BagIndex)
  return _internal_bagindex();
}
inline void CSNtfUseEquipment::_internal_set_bagindex(int32_t value) {
  
  _impl_.bagindex_ = value;
}
inline void CSNtfUseEquipment::set_bagindex(int32_t value) {
  _internal_set_bagindex(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfUseEquipment.BagIndex)
}

// int32 PlayerIdx = 4;
inline void CSNtfUseEquipment::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfUseEquipment::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfUseEquipment::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfUseEquipment.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfUseEquipment::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfUseEquipment::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfUseEquipment.PlayerIdx)
}

// .msg.PositionInt2D Pos = 5;
inline bool CSNtfUseEquipment::_internal_has_pos() const {
  return this != internal_default_instance() && _impl_.pos_ != nullptr;
}
inline bool CSNtfUseEquipment::has_pos() const {
  return _internal_has_pos();
}
inline void CSNtfUseEquipment::clear_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSNtfUseEquipment::_internal_pos() const {
  const ::msg::PositionInt2D* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSNtfUseEquipment::pos() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfUseEquipment.Pos)
  return _internal_pos();
}
inline void CSNtfUseEquipment::unsafe_arena_set_allocated_pos(
    ::msg::PositionInt2D* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfUseEquipment.Pos)
}
inline ::msg::PositionInt2D* CSNtfUseEquipment::release_pos() {
  
  ::msg::PositionInt2D* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSNtfUseEquipment::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:msg.CSNtfUseEquipment.Pos)
  
  ::msg::PositionInt2D* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSNtfUseEquipment::_internal_mutable_pos() {
  
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::msg::PositionInt2D* CSNtfUseEquipment::mutable_pos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfUseEquipment.Pos)
  return _msg;
}
inline void CSNtfUseEquipment::set_allocated_pos(::msg::PositionInt2D* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfUseEquipment.Pos)
}

// int32 EquipBagIndex = 6;
inline void CSNtfUseEquipment::clear_equipbagindex() {
  _impl_.equipbagindex_ = 0;
}
inline int32_t CSNtfUseEquipment::_internal_equipbagindex() const {
  return _impl_.equipbagindex_;
}
inline int32_t CSNtfUseEquipment::equipbagindex() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfUseEquipment.EquipBagIndex)
  return _internal_equipbagindex();
}
inline void CSNtfUseEquipment::_internal_set_equipbagindex(int32_t value) {
  
  _impl_.equipbagindex_ = value;
}
inline void CSNtfUseEquipment::set_equipbagindex(int32_t value) {
  _internal_set_equipbagindex(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfUseEquipment.EquipBagIndex)
}

// bool IsOnBattle = 7;
inline void CSNtfUseEquipment::clear_isonbattle() {
  _impl_.isonbattle_ = false;
}
inline bool CSNtfUseEquipment::_internal_isonbattle() const {
  return _impl_.isonbattle_;
}
inline bool CSNtfUseEquipment::isonbattle() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfUseEquipment.IsOnBattle)
  return _internal_isonbattle();
}
inline void CSNtfUseEquipment::_internal_set_isonbattle(bool value) {
  
  _impl_.isonbattle_ = value;
}
inline void CSNtfUseEquipment::set_isonbattle(bool value) {
  _internal_set_isonbattle(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfUseEquipment.IsOnBattle)
}

// -------------------------------------------------------------------

// CSNtfOperateEquipInBag

// int32 NetId = 1;
inline void CSNtfOperateEquipInBag::clear_netid() {
  _impl_.netid_ = 0;
}
inline int32_t CSNtfOperateEquipInBag::_internal_netid() const {
  return _impl_.netid_;
}
inline int32_t CSNtfOperateEquipInBag::netid() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfOperateEquipInBag.NetId)
  return _internal_netid();
}
inline void CSNtfOperateEquipInBag::_internal_set_netid(int32_t value) {
  
  _impl_.netid_ = value;
}
inline void CSNtfOperateEquipInBag::set_netid(int32_t value) {
  _internal_set_netid(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfOperateEquipInBag.NetId)
}

// int32 EquipmentId = 2;
inline void CSNtfOperateEquipInBag::clear_equipmentid() {
  _impl_.equipmentid_ = 0;
}
inline int32_t CSNtfOperateEquipInBag::_internal_equipmentid() const {
  return _impl_.equipmentid_;
}
inline int32_t CSNtfOperateEquipInBag::equipmentid() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfOperateEquipInBag.EquipmentId)
  return _internal_equipmentid();
}
inline void CSNtfOperateEquipInBag::_internal_set_equipmentid(int32_t value) {
  
  _impl_.equipmentid_ = value;
}
inline void CSNtfOperateEquipInBag::set_equipmentid(int32_t value) {
  _internal_set_equipmentid(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfOperateEquipInBag.EquipmentId)
}

// int32 BagIdx = 3;
inline void CSNtfOperateEquipInBag::clear_bagidx() {
  _impl_.bagidx_ = 0;
}
inline int32_t CSNtfOperateEquipInBag::_internal_bagidx() const {
  return _impl_.bagidx_;
}
inline int32_t CSNtfOperateEquipInBag::bagidx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfOperateEquipInBag.BagIdx)
  return _internal_bagidx();
}
inline void CSNtfOperateEquipInBag::_internal_set_bagidx(int32_t value) {
  
  _impl_.bagidx_ = value;
}
inline void CSNtfOperateEquipInBag::set_bagidx(int32_t value) {
  _internal_set_bagidx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfOperateEquipInBag.BagIdx)
}

// int32 PlayerIdx = 4;
inline void CSNtfOperateEquipInBag::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfOperateEquipInBag::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfOperateEquipInBag::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfOperateEquipInBag.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfOperateEquipInBag::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfOperateEquipInBag::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfOperateEquipInBag.PlayerIdx)
}

// bool IsRemoved = 5;
inline void CSNtfOperateEquipInBag::clear_isremoved() {
  _impl_.isremoved_ = false;
}
inline bool CSNtfOperateEquipInBag::_internal_isremoved() const {
  return _impl_.isremoved_;
}
inline bool CSNtfOperateEquipInBag::isremoved() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfOperateEquipInBag.IsRemoved)
  return _internal_isremoved();
}
inline void CSNtfOperateEquipInBag::_internal_set_isremoved(bool value) {
  
  _impl_.isremoved_ = value;
}
inline void CSNtfOperateEquipInBag::set_isremoved(bool value) {
  _internal_set_isremoved(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfOperateEquipInBag.IsRemoved)
}

// -------------------------------------------------------------------

// CSNtfOperateEquipOnChess

// int32 NetId = 1;
inline void CSNtfOperateEquipOnChess::clear_netid() {
  _impl_.netid_ = 0;
}
inline int32_t CSNtfOperateEquipOnChess::_internal_netid() const {
  return _impl_.netid_;
}
inline int32_t CSNtfOperateEquipOnChess::netid() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfOperateEquipOnChess.NetId)
  return _internal_netid();
}
inline void CSNtfOperateEquipOnChess::_internal_set_netid(int32_t value) {
  
  _impl_.netid_ = value;
}
inline void CSNtfOperateEquipOnChess::set_netid(int32_t value) {
  _internal_set_netid(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfOperateEquipOnChess.NetId)
}

// int32 PlayerIdx = 2;
inline void CSNtfOperateEquipOnChess::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfOperateEquipOnChess::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfOperateEquipOnChess::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfOperateEquipOnChess.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfOperateEquipOnChess::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfOperateEquipOnChess::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfOperateEquipOnChess.PlayerIdx)
}

// bool IsRemoved = 3;
inline void CSNtfOperateEquipOnChess::clear_isremoved() {
  _impl_.isremoved_ = false;
}
inline bool CSNtfOperateEquipOnChess::_internal_isremoved() const {
  return _impl_.isremoved_;
}
inline bool CSNtfOperateEquipOnChess::isremoved() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfOperateEquipOnChess.IsRemoved)
  return _internal_isremoved();
}
inline void CSNtfOperateEquipOnChess::_internal_set_isremoved(bool value) {
  
  _impl_.isremoved_ = value;
}
inline void CSNtfOperateEquipOnChess::set_isremoved(bool value) {
  _internal_set_isremoved(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfOperateEquipOnChess.IsRemoved)
}

// bool IsChessOnBoard = 4;
inline void CSNtfOperateEquipOnChess::clear_ischessonboard() {
  _impl_.ischessonboard_ = false;
}
inline bool CSNtfOperateEquipOnChess::_internal_ischessonboard() const {
  return _impl_.ischessonboard_;
}
inline bool CSNtfOperateEquipOnChess::ischessonboard() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfOperateEquipOnChess.IsChessOnBoard)
  return _internal_ischessonboard();
}
inline void CSNtfOperateEquipOnChess::_internal_set_ischessonboard(bool value) {
  
  _impl_.ischessonboard_ = value;
}
inline void CSNtfOperateEquipOnChess::set_ischessonboard(bool value) {
  _internal_set_ischessonboard(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfOperateEquipOnChess.IsChessOnBoard)
}

// int32 ChessBagIndex = 5;
inline void CSNtfOperateEquipOnChess::clear_chessbagindex() {
  _impl_.chessbagindex_ = 0;
}
inline int32_t CSNtfOperateEquipOnChess::_internal_chessbagindex() const {
  return _impl_.chessbagindex_;
}
inline int32_t CSNtfOperateEquipOnChess::chessbagindex() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfOperateEquipOnChess.ChessBagIndex)
  return _internal_chessbagindex();
}
inline void CSNtfOperateEquipOnChess::_internal_set_chessbagindex(int32_t value) {
  
  _impl_.chessbagindex_ = value;
}
inline void CSNtfOperateEquipOnChess::set_chessbagindex(int32_t value) {
  _internal_set_chessbagindex(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfOperateEquipOnChess.ChessBagIndex)
}

// .msg.PositionInt2D ChessTilePos = 6;
inline bool CSNtfOperateEquipOnChess::_internal_has_chesstilepos() const {
  return this != internal_default_instance() && _impl_.chesstilepos_ != nullptr;
}
inline bool CSNtfOperateEquipOnChess::has_chesstilepos() const {
  return _internal_has_chesstilepos();
}
inline void CSNtfOperateEquipOnChess::clear_chesstilepos() {
  if (GetArenaForAllocation() == nullptr && _impl_.chesstilepos_ != nullptr) {
    delete _impl_.chesstilepos_;
  }
  _impl_.chesstilepos_ = nullptr;
}
inline const ::msg::PositionInt2D& CSNtfOperateEquipOnChess::_internal_chesstilepos() const {
  const ::msg::PositionInt2D* p = _impl_.chesstilepos_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg::PositionInt2D&>(
      ::msg::_PositionInt2D_default_instance_);
}
inline const ::msg::PositionInt2D& CSNtfOperateEquipOnChess::chesstilepos() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfOperateEquipOnChess.ChessTilePos)
  return _internal_chesstilepos();
}
inline void CSNtfOperateEquipOnChess::unsafe_arena_set_allocated_chesstilepos(
    ::msg::PositionInt2D* chesstilepos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chesstilepos_);
  }
  _impl_.chesstilepos_ = chesstilepos;
  if (chesstilepos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg.CSNtfOperateEquipOnChess.ChessTilePos)
}
inline ::msg::PositionInt2D* CSNtfOperateEquipOnChess::release_chesstilepos() {
  
  ::msg::PositionInt2D* temp = _impl_.chesstilepos_;
  _impl_.chesstilepos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::msg::PositionInt2D* CSNtfOperateEquipOnChess::unsafe_arena_release_chesstilepos() {
  // @@protoc_insertion_point(field_release:msg.CSNtfOperateEquipOnChess.ChessTilePos)
  
  ::msg::PositionInt2D* temp = _impl_.chesstilepos_;
  _impl_.chesstilepos_ = nullptr;
  return temp;
}
inline ::msg::PositionInt2D* CSNtfOperateEquipOnChess::_internal_mutable_chesstilepos() {
  
  if (_impl_.chesstilepos_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg::PositionInt2D>(GetArenaForAllocation());
    _impl_.chesstilepos_ = p;
  }
  return _impl_.chesstilepos_;
}
inline ::msg::PositionInt2D* CSNtfOperateEquipOnChess::mutable_chesstilepos() {
  ::msg::PositionInt2D* _msg = _internal_mutable_chesstilepos();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfOperateEquipOnChess.ChessTilePos)
  return _msg;
}
inline void CSNtfOperateEquipOnChess::set_allocated_chesstilepos(::msg::PositionInt2D* chesstilepos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chesstilepos_;
  }
  if (chesstilepos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chesstilepos);
    if (message_arena != submessage_arena) {
      chesstilepos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chesstilepos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chesstilepos_ = chesstilepos;
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfOperateEquipOnChess.ChessTilePos)
}

// int32 EquipmentId = 7;
inline void CSNtfOperateEquipOnChess::clear_equipmentid() {
  _impl_.equipmentid_ = 0;
}
inline int32_t CSNtfOperateEquipOnChess::_internal_equipmentid() const {
  return _impl_.equipmentid_;
}
inline int32_t CSNtfOperateEquipOnChess::equipmentid() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfOperateEquipOnChess.EquipmentId)
  return _internal_equipmentid();
}
inline void CSNtfOperateEquipOnChess::_internal_set_equipmentid(int32_t value) {
  
  _impl_.equipmentid_ = value;
}
inline void CSNtfOperateEquipOnChess::set_equipmentid(int32_t value) {
  _internal_set_equipmentid(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfOperateEquipOnChess.EquipmentId)
}

// int32 ChessSlotIndex = 8;
inline void CSNtfOperateEquipOnChess::clear_chessslotindex() {
  _impl_.chessslotindex_ = 0;
}
inline int32_t CSNtfOperateEquipOnChess::_internal_chessslotindex() const {
  return _impl_.chessslotindex_;
}
inline int32_t CSNtfOperateEquipOnChess::chessslotindex() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfOperateEquipOnChess.ChessSlotIndex)
  return _internal_chessslotindex();
}
inline void CSNtfOperateEquipOnChess::_internal_set_chessslotindex(int32_t value) {
  
  _impl_.chessslotindex_ = value;
}
inline void CSNtfOperateEquipOnChess::set_chessslotindex(int32_t value) {
  _internal_set_chessslotindex(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfOperateEquipOnChess.ChessSlotIndex)
}

// bool IsOnBattle = 9;
inline void CSNtfOperateEquipOnChess::clear_isonbattle() {
  _impl_.isonbattle_ = false;
}
inline bool CSNtfOperateEquipOnChess::_internal_isonbattle() const {
  return _impl_.isonbattle_;
}
inline bool CSNtfOperateEquipOnChess::isonbattle() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfOperateEquipOnChess.IsOnBattle)
  return _internal_isonbattle();
}
inline void CSNtfOperateEquipOnChess::_internal_set_isonbattle(bool value) {
  
  _impl_.isonbattle_ = value;
}
inline void CSNtfOperateEquipOnChess::set_isonbattle(bool value) {
  _internal_set_isonbattle(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfOperateEquipOnChess.IsOnBattle)
}

// -------------------------------------------------------------------

// CSNtfAntiAddictionTime

// int32 TotalOnlineDuration = 1;
inline void CSNtfAntiAddictionTime::clear_totalonlineduration() {
  _impl_.totalonlineduration_ = 0;
}
inline int32_t CSNtfAntiAddictionTime::_internal_totalonlineduration() const {
  return _impl_.totalonlineduration_;
}
inline int32_t CSNtfAntiAddictionTime::totalonlineduration() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfAntiAddictionTime.TotalOnlineDuration)
  return _internal_totalonlineduration();
}
inline void CSNtfAntiAddictionTime::_internal_set_totalonlineduration(int32_t value) {
  
  _impl_.totalonlineduration_ = value;
}
inline void CSNtfAntiAddictionTime::set_totalonlineduration(int32_t value) {
  _internal_set_totalonlineduration(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfAntiAddictionTime.TotalOnlineDuration)
}

// int32 TotalOfflineDuration = 2;
inline void CSNtfAntiAddictionTime::clear_totalofflineduration() {
  _impl_.totalofflineduration_ = 0;
}
inline int32_t CSNtfAntiAddictionTime::_internal_totalofflineduration() const {
  return _impl_.totalofflineduration_;
}
inline int32_t CSNtfAntiAddictionTime::totalofflineduration() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfAntiAddictionTime.TotalOfflineDuration)
  return _internal_totalofflineduration();
}
inline void CSNtfAntiAddictionTime::_internal_set_totalofflineduration(int32_t value) {
  
  _impl_.totalofflineduration_ = value;
}
inline void CSNtfAntiAddictionTime::set_totalofflineduration(int32_t value) {
  _internal_set_totalofflineduration(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfAntiAddictionTime.TotalOfflineDuration)
}

// -------------------------------------------------------------------

// CSNtfAntiAddictionTriggered

// -------------------------------------------------------------------

// CSNtfAntiAddictionRemoved

// -------------------------------------------------------------------

// CSNtfUnsuggestedPhase

// -------------------------------------------------------------------

// CSNtfGameEnd

// -------------------------------------------------------------------

// CSNtfCandyReward

// int32 CandyCnt = 1;
inline void CSNtfCandyReward::clear_candycnt() {
  _impl_.candycnt_ = 0;
}
inline int32_t CSNtfCandyReward::_internal_candycnt() const {
  return _impl_.candycnt_;
}
inline int32_t CSNtfCandyReward::candycnt() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfCandyReward.CandyCnt)
  return _internal_candycnt();
}
inline void CSNtfCandyReward::_internal_set_candycnt(int32_t value) {
  
  _impl_.candycnt_ = value;
}
inline void CSNtfCandyReward::set_candycnt(int32_t value) {
  _internal_set_candycnt(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfCandyReward.CandyCnt)
}

// int32 PlayerIdx = 2;
inline void CSNtfCandyReward::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfCandyReward::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfCandyReward::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfCandyReward.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfCandyReward::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfCandyReward::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfCandyReward.PlayerIdx)
}

// -------------------------------------------------------------------

// CSNtfWinStreak

// int32 WinStreak = 1;
inline void CSNtfWinStreak::clear_winstreak() {
  _impl_.winstreak_ = 0;
}
inline int32_t CSNtfWinStreak::_internal_winstreak() const {
  return _impl_.winstreak_;
}
inline int32_t CSNtfWinStreak::winstreak() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfWinStreak.WinStreak)
  return _internal_winstreak();
}
inline void CSNtfWinStreak::_internal_set_winstreak(int32_t value) {
  
  _impl_.winstreak_ = value;
}
inline void CSNtfWinStreak::set_winstreak(int32_t value) {
  _internal_set_winstreak(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfWinStreak.WinStreak)
}

// int32 PlayerIdx = 2;
inline void CSNtfWinStreak::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfWinStreak::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfWinStreak::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfWinStreak.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfWinStreak::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfWinStreak::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfWinStreak.PlayerIdx)
}

// -------------------------------------------------------------------

// CSNtfPvpState

// int32 PvpID = 1;
inline void CSNtfPvpState::clear_pvpid() {
  _impl_.pvpid_ = 0;
}
inline int32_t CSNtfPvpState::_internal_pvpid() const {
  return _impl_.pvpid_;
}
inline int32_t CSNtfPvpState::pvpid() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpState.PvpID)
  return _internal_pvpid();
}
inline void CSNtfPvpState::_internal_set_pvpid(int32_t value) {
  
  _impl_.pvpid_ = value;
}
inline void CSNtfPvpState::set_pvpid(int32_t value) {
  _internal_set_pvpid(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpState.PvpID)
}

// int32 GameID = 2;
inline void CSNtfPvpState::clear_gameid() {
  _impl_.gameid_ = 0;
}
inline int32_t CSNtfPvpState::_internal_gameid() const {
  return _impl_.gameid_;
}
inline int32_t CSNtfPvpState::gameid() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpState.GameID)
  return _internal_gameid();
}
inline void CSNtfPvpState::_internal_set_gameid(int32_t value) {
  
  _impl_.gameid_ = value;
}
inline void CSNtfPvpState::set_gameid(int32_t value) {
  _internal_set_gameid(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpState.GameID)
}

// string PvpTCPAddr = 3;
inline void CSNtfPvpState::clear_pvptcpaddr() {
  _impl_.pvptcpaddr_.ClearToEmpty();
}
inline const std::string& CSNtfPvpState::pvptcpaddr() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpState.PvpTCPAddr)
  return _internal_pvptcpaddr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSNtfPvpState::set_pvptcpaddr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pvptcpaddr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpState.PvpTCPAddr)
}
inline std::string* CSNtfPvpState::mutable_pvptcpaddr() {
  std::string* _s = _internal_mutable_pvptcpaddr();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfPvpState.PvpTCPAddr)
  return _s;
}
inline const std::string& CSNtfPvpState::_internal_pvptcpaddr() const {
  return _impl_.pvptcpaddr_.Get();
}
inline void CSNtfPvpState::_internal_set_pvptcpaddr(const std::string& value) {
  
  _impl_.pvptcpaddr_.Set(value, GetArenaForAllocation());
}
inline std::string* CSNtfPvpState::_internal_mutable_pvptcpaddr() {
  
  return _impl_.pvptcpaddr_.Mutable(GetArenaForAllocation());
}
inline std::string* CSNtfPvpState::release_pvptcpaddr() {
  // @@protoc_insertion_point(field_release:msg.CSNtfPvpState.PvpTCPAddr)
  return _impl_.pvptcpaddr_.Release();
}
inline void CSNtfPvpState::set_allocated_pvptcpaddr(std::string* pvptcpaddr) {
  if (pvptcpaddr != nullptr) {
    
  } else {
    
  }
  _impl_.pvptcpaddr_.SetAllocated(pvptcpaddr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pvptcpaddr_.IsDefault()) {
    _impl_.pvptcpaddr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfPvpState.PvpTCPAddr)
}

// -------------------------------------------------------------------

// CSNtfSetAutoUpgradeCharacter

// int32 PlayerIdx = 1;
inline void CSNtfSetAutoUpgradeCharacter::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfSetAutoUpgradeCharacter::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfSetAutoUpgradeCharacter::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfSetAutoUpgradeCharacter.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfSetAutoUpgradeCharacter::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfSetAutoUpgradeCharacter::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfSetAutoUpgradeCharacter.PlayerIdx)
}

// bool SwitchOn = 2;
inline void CSNtfSetAutoUpgradeCharacter::clear_switchon() {
  _impl_.switchon_ = false;
}
inline bool CSNtfSetAutoUpgradeCharacter::_internal_switchon() const {
  return _impl_.switchon_;
}
inline bool CSNtfSetAutoUpgradeCharacter::switchon() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfSetAutoUpgradeCharacter.SwitchOn)
  return _internal_switchon();
}
inline void CSNtfSetAutoUpgradeCharacter::_internal_set_switchon(bool value) {
  
  _impl_.switchon_ = value;
}
inline void CSNtfSetAutoUpgradeCharacter::set_switchon(bool value) {
  _internal_set_switchon(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfSetAutoUpgradeCharacter.SwitchOn)
}

// -------------------------------------------------------------------

// CSNtfManuallyUpgradeCharacter

// int32 PlayerIdx = 1;
inline void CSNtfManuallyUpgradeCharacter::clear_playeridx() {
  _impl_.playeridx_ = 0;
}
inline int32_t CSNtfManuallyUpgradeCharacter::_internal_playeridx() const {
  return _impl_.playeridx_;
}
inline int32_t CSNtfManuallyUpgradeCharacter::playeridx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfManuallyUpgradeCharacter.PlayerIdx)
  return _internal_playeridx();
}
inline void CSNtfManuallyUpgradeCharacter::_internal_set_playeridx(int32_t value) {
  
  _impl_.playeridx_ = value;
}
inline void CSNtfManuallyUpgradeCharacter::set_playeridx(int32_t value) {
  _internal_set_playeridx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfManuallyUpgradeCharacter.PlayerIdx)
}

// int32 BagIndex = 2;
inline void CSNtfManuallyUpgradeCharacter::clear_bagindex() {
  _impl_.bagindex_ = 0;
}
inline int32_t CSNtfManuallyUpgradeCharacter::_internal_bagindex() const {
  return _impl_.bagindex_;
}
inline int32_t CSNtfManuallyUpgradeCharacter::bagindex() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfManuallyUpgradeCharacter.BagIndex)
  return _internal_bagindex();
}
inline void CSNtfManuallyUpgradeCharacter::_internal_set_bagindex(int32_t value) {
  
  _impl_.bagindex_ = value;
}
inline void CSNtfManuallyUpgradeCharacter::set_bagindex(int32_t value) {
  _internal_set_bagindex(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfManuallyUpgradeCharacter.BagIndex)
}

// int32 Tx = 3;
inline void CSNtfManuallyUpgradeCharacter::clear_tx() {
  _impl_.tx_ = 0;
}
inline int32_t CSNtfManuallyUpgradeCharacter::_internal_tx() const {
  return _impl_.tx_;
}
inline int32_t CSNtfManuallyUpgradeCharacter::tx() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfManuallyUpgradeCharacter.Tx)
  return _internal_tx();
}
inline void CSNtfManuallyUpgradeCharacter::_internal_set_tx(int32_t value) {
  
  _impl_.tx_ = value;
}
inline void CSNtfManuallyUpgradeCharacter::set_tx(int32_t value) {
  _internal_set_tx(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfManuallyUpgradeCharacter.Tx)
}

// int32 Ty = 4;
inline void CSNtfManuallyUpgradeCharacter::clear_ty() {
  _impl_.ty_ = 0;
}
inline int32_t CSNtfManuallyUpgradeCharacter::_internal_ty() const {
  return _impl_.ty_;
}
inline int32_t CSNtfManuallyUpgradeCharacter::ty() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfManuallyUpgradeCharacter.Ty)
  return _internal_ty();
}
inline void CSNtfManuallyUpgradeCharacter::_internal_set_ty(int32_t value) {
  
  _impl_.ty_ = value;
}
inline void CSNtfManuallyUpgradeCharacter::set_ty(int32_t value) {
  _internal_set_ty(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfManuallyUpgradeCharacter.Ty)
}

// bool IsInBag = 5;
inline void CSNtfManuallyUpgradeCharacter::clear_isinbag() {
  _impl_.isinbag_ = false;
}
inline bool CSNtfManuallyUpgradeCharacter::_internal_isinbag() const {
  return _impl_.isinbag_;
}
inline bool CSNtfManuallyUpgradeCharacter::isinbag() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfManuallyUpgradeCharacter.IsInBag)
  return _internal_isinbag();
}
inline void CSNtfManuallyUpgradeCharacter::_internal_set_isinbag(bool value) {
  
  _impl_.isinbag_ = value;
}
inline void CSNtfManuallyUpgradeCharacter::set_isinbag(bool value) {
  _internal_set_isinbag(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfManuallyUpgradeCharacter.IsInBag)
}

// -------------------------------------------------------------------

// CSNtfQuitBattle

// int32 PlayerIndex = 1;
inline void CSNtfQuitBattle::clear_playerindex() {
  _impl_.playerindex_ = 0;
}
inline int32_t CSNtfQuitBattle::_internal_playerindex() const {
  return _impl_.playerindex_;
}
inline int32_t CSNtfQuitBattle::playerindex() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfQuitBattle.PlayerIndex)
  return _internal_playerindex();
}
inline void CSNtfQuitBattle::_internal_set_playerindex(int32_t value) {
  
  _impl_.playerindex_ = value;
}
inline void CSNtfQuitBattle::set_playerindex(int32_t value) {
  _internal_set_playerindex(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfQuitBattle.PlayerIndex)
}

// -------------------------------------------------------------------

// CSNtfRoundResult

// .msg.WINTYPE Result = 1;
inline void CSNtfRoundResult::clear_result() {
  _impl_.result_ = 0;
}
inline ::msg::WINTYPE CSNtfRoundResult::_internal_result() const {
  return static_cast< ::msg::WINTYPE >(_impl_.result_);
}
inline ::msg::WINTYPE CSNtfRoundResult::result() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfRoundResult.Result)
  return _internal_result();
}
inline void CSNtfRoundResult::_internal_set_result(::msg::WINTYPE value) {
  
  _impl_.result_ = value;
}
inline void CSNtfRoundResult::set_result(::msg::WINTYPE value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfRoundResult.Result)
}

// int32 LeftFriendCount = 2;
inline void CSNtfRoundResult::clear_leftfriendcount() {
  _impl_.leftfriendcount_ = 0;
}
inline int32_t CSNtfRoundResult::_internal_leftfriendcount() const {
  return _impl_.leftfriendcount_;
}
inline int32_t CSNtfRoundResult::leftfriendcount() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfRoundResult.LeftFriendCount)
  return _internal_leftfriendcount();
}
inline void CSNtfRoundResult::_internal_set_leftfriendcount(int32_t value) {
  
  _impl_.leftfriendcount_ = value;
}
inline void CSNtfRoundResult::set_leftfriendcount(int32_t value) {
  _internal_set_leftfriendcount(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfRoundResult.LeftFriendCount)
}

// int32 Damage = 3;
inline void CSNtfRoundResult::clear_damage() {
  _impl_.damage_ = 0;
}
inline int32_t CSNtfRoundResult::_internal_damage() const {
  return _impl_.damage_;
}
inline int32_t CSNtfRoundResult::damage() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfRoundResult.Damage)
  return _internal_damage();
}
inline void CSNtfRoundResult::_internal_set_damage(int32_t value) {
  
  _impl_.damage_ = value;
}
inline void CSNtfRoundResult::set_damage(int32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfRoundResult.Damage)
}

// -------------------------------------------------------------------

// CSNtfSuspendGame

// bool susPend = 1;
inline void CSNtfSuspendGame::clear_suspend() {
  _impl_.suspend_ = false;
}
inline bool CSNtfSuspendGame::_internal_suspend() const {
  return _impl_.suspend_;
}
inline bool CSNtfSuspendGame::suspend() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfSuspendGame.susPend)
  return _internal_suspend();
}
inline void CSNtfSuspendGame::_internal_set_suspend(bool value) {
  
  _impl_.suspend_ = value;
}
inline void CSNtfSuspendGame::set_suspend(bool value) {
  _internal_set_suspend(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfSuspendGame.susPend)
}

// string pid = 2;
inline void CSNtfSuspendGame::clear_pid() {
  _impl_.pid_.ClearToEmpty();
}
inline const std::string& CSNtfSuspendGame::pid() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfSuspendGame.pid)
  return _internal_pid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSNtfSuspendGame::set_pid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSNtfSuspendGame.pid)
}
inline std::string* CSNtfSuspendGame::mutable_pid() {
  std::string* _s = _internal_mutable_pid();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfSuspendGame.pid)
  return _s;
}
inline const std::string& CSNtfSuspendGame::_internal_pid() const {
  return _impl_.pid_.Get();
}
inline void CSNtfSuspendGame::_internal_set_pid(const std::string& value) {
  
  _impl_.pid_.Set(value, GetArenaForAllocation());
}
inline std::string* CSNtfSuspendGame::_internal_mutable_pid() {
  
  return _impl_.pid_.Mutable(GetArenaForAllocation());
}
inline std::string* CSNtfSuspendGame::release_pid() {
  // @@protoc_insertion_point(field_release:msg.CSNtfSuspendGame.pid)
  return _impl_.pid_.Release();
}
inline void CSNtfSuspendGame::set_allocated_pid(std::string* pid) {
  if (pid != nullptr) {
    
  } else {
    
  }
  _impl_.pid_.SetAllocated(pid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pid_.IsDefault()) {
    _impl_.pid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfSuspendGame.pid)
}

// int32 resumeTime = 3;
inline void CSNtfSuspendGame::clear_resumetime() {
  _impl_.resumetime_ = 0;
}
inline int32_t CSNtfSuspendGame::_internal_resumetime() const {
  return _impl_.resumetime_;
}
inline int32_t CSNtfSuspendGame::resumetime() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfSuspendGame.resumeTime)
  return _internal_resumetime();
}
inline void CSNtfSuspendGame::_internal_set_resumetime(int32_t value) {
  
  _impl_.resumetime_ = value;
}
inline void CSNtfSuspendGame::set_resumetime(int32_t value) {
  _internal_set_resumetime(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfSuspendGame.resumeTime)
}

// -------------------------------------------------------------------

// CSNtfPassThrough

// bytes data = 1;
inline void CSNtfPassThrough::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& CSNtfPassThrough::data() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPassThrough.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSNtfPassThrough::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.CSNtfPassThrough.data)
}
inline std::string* CSNtfPassThrough::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:msg.CSNtfPassThrough.data)
  return _s;
}
inline const std::string& CSNtfPassThrough::_internal_data() const {
  return _impl_.data_.Get();
}
inline void CSNtfPassThrough::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* CSNtfPassThrough::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* CSNtfPassThrough::release_data() {
  // @@protoc_insertion_point(field_release:msg.CSNtfPassThrough.data)
  return _impl_.data_.Release();
}
inline void CSNtfPassThrough::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.CSNtfPassThrough.data)
}

// -------------------------------------------------------------------

// CSNtfUpdateBattleResult

// repeated .msg.CSDTCampData Camp = 1;
inline int CSNtfUpdateBattleResult::_internal_camp_size() const {
  return _impl_.camp_.size();
}
inline int CSNtfUpdateBattleResult::camp_size() const {
  return _internal_camp_size();
}
inline ::msg::CSDTCampData* CSNtfUpdateBattleResult::mutable_camp(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSNtfUpdateBattleResult.Camp)
  return _impl_.camp_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTCampData >*
CSNtfUpdateBattleResult::mutable_camp() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSNtfUpdateBattleResult.Camp)
  return &_impl_.camp_;
}
inline const ::msg::CSDTCampData& CSNtfUpdateBattleResult::_internal_camp(int index) const {
  return _impl_.camp_.Get(index);
}
inline const ::msg::CSDTCampData& CSNtfUpdateBattleResult::camp(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSNtfUpdateBattleResult.Camp)
  return _internal_camp(index);
}
inline ::msg::CSDTCampData* CSNtfUpdateBattleResult::_internal_add_camp() {
  return _impl_.camp_.Add();
}
inline ::msg::CSDTCampData* CSNtfUpdateBattleResult::add_camp() {
  ::msg::CSDTCampData* _add = _internal_add_camp();
  // @@protoc_insertion_point(field_add:msg.CSNtfUpdateBattleResult.Camp)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::CSDTCampData >&
CSNtfUpdateBattleResult::camp() const {
  // @@protoc_insertion_point(field_list:msg.CSNtfUpdateBattleResult.Camp)
  return _impl_.camp_;
}

// -------------------------------------------------------------------

// CSNtfAA

// .msg.AddictionState State = 1;
inline void CSNtfAA::clear_state() {
  _impl_.state_ = 0;
}
inline ::msg::AddictionState CSNtfAA::_internal_state() const {
  return static_cast< ::msg::AddictionState >(_impl_.state_);
}
inline ::msg::AddictionState CSNtfAA::state() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfAA.State)
  return _internal_state();
}
inline void CSNtfAA::_internal_set_state(::msg::AddictionState value) {
  
  _impl_.state_ = value;
}
inline void CSNtfAA::set_state(::msg::AddictionState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfAA.State)
}

// int64 TotalOnlineDuration = 2;
inline void CSNtfAA::clear_totalonlineduration() {
  _impl_.totalonlineduration_ = int64_t{0};
}
inline int64_t CSNtfAA::_internal_totalonlineduration() const {
  return _impl_.totalonlineduration_;
}
inline int64_t CSNtfAA::totalonlineduration() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfAA.TotalOnlineDuration)
  return _internal_totalonlineduration();
}
inline void CSNtfAA::_internal_set_totalonlineduration(int64_t value) {
  
  _impl_.totalonlineduration_ = value;
}
inline void CSNtfAA::set_totalonlineduration(int64_t value) {
  _internal_set_totalonlineduration(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfAA.TotalOnlineDuration)
}

// int64 TotalOfflineDuration = 3;
inline void CSNtfAA::clear_totalofflineduration() {
  _impl_.totalofflineduration_ = int64_t{0};
}
inline int64_t CSNtfAA::_internal_totalofflineduration() const {
  return _impl_.totalofflineduration_;
}
inline int64_t CSNtfAA::totalofflineduration() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfAA.TotalOfflineDuration)
  return _internal_totalofflineduration();
}
inline void CSNtfAA::_internal_set_totalofflineduration(int64_t value) {
  
  _impl_.totalofflineduration_ = value;
}
inline void CSNtfAA::set_totalofflineduration(int64_t value) {
  _internal_set_totalofflineduration(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfAA.TotalOfflineDuration)
}

// -------------------------------------------------------------------

// Division

// int32 NetID = 1;
inline void Division::clear_netid() {
  _impl_.netid_ = 0;
}
inline int32_t Division::_internal_netid() const {
  return _impl_.netid_;
}
inline int32_t Division::netid() const {
  // @@protoc_insertion_point(field_get:msg.Division.NetID)
  return _internal_netid();
}
inline void Division::_internal_set_netid(int32_t value) {
  
  _impl_.netid_ = value;
}
inline void Division::set_netid(int32_t value) {
  _internal_set_netid(value);
  // @@protoc_insertion_point(field_set:msg.Division.NetID)
}

// int32 EquipID = 2;
inline void Division::clear_equipid() {
  _impl_.equipid_ = 0;
}
inline int32_t Division::_internal_equipid() const {
  return _impl_.equipid_;
}
inline int32_t Division::equipid() const {
  // @@protoc_insertion_point(field_get:msg.Division.EquipID)
  return _internal_equipid();
}
inline void Division::_internal_set_equipid(int32_t value) {
  
  _impl_.equipid_ = value;
}
inline void Division::set_equipid(int32_t value) {
  _internal_set_equipid(value);
  // @@protoc_insertion_point(field_set:msg.Division.EquipID)
}

// int32 DestPlayerIndex = 3;
inline void Division::clear_destplayerindex() {
  _impl_.destplayerindex_ = 0;
}
inline int32_t Division::_internal_destplayerindex() const {
  return _impl_.destplayerindex_;
}
inline int32_t Division::destplayerindex() const {
  // @@protoc_insertion_point(field_get:msg.Division.DestPlayerIndex)
  return _internal_destplayerindex();
}
inline void Division::_internal_set_destplayerindex(int32_t value) {
  
  _impl_.destplayerindex_ = value;
}
inline void Division::set_destplayerindex(int32_t value) {
  _internal_set_destplayerindex(value);
  // @@protoc_insertion_point(field_set:msg.Division.DestPlayerIndex)
}

// int32 TX = 4;
inline void Division::clear_tx() {
  _impl_.tx_ = 0;
}
inline int32_t Division::_internal_tx() const {
  return _impl_.tx_;
}
inline int32_t Division::tx() const {
  // @@protoc_insertion_point(field_get:msg.Division.TX)
  return _internal_tx();
}
inline void Division::_internal_set_tx(int32_t value) {
  
  _impl_.tx_ = value;
}
inline void Division::set_tx(int32_t value) {
  _internal_set_tx(value);
  // @@protoc_insertion_point(field_set:msg.Division.TX)
}

// int32 TY = 5;
inline void Division::clear_ty() {
  _impl_.ty_ = 0;
}
inline int32_t Division::_internal_ty() const {
  return _impl_.ty_;
}
inline int32_t Division::ty() const {
  // @@protoc_insertion_point(field_get:msg.Division.TY)
  return _internal_ty();
}
inline void Division::_internal_set_ty(int32_t value) {
  
  _impl_.ty_ = value;
}
inline void Division::set_ty(int32_t value) {
  _internal_set_ty(value);
  // @@protoc_insertion_point(field_set:msg.Division.TY)
}

// -------------------------------------------------------------------

// CSNtfEquipDivision

// int32 SrcPlayerIndex = 1;
inline void CSNtfEquipDivision::clear_srcplayerindex() {
  _impl_.srcplayerindex_ = 0;
}
inline int32_t CSNtfEquipDivision::_internal_srcplayerindex() const {
  return _impl_.srcplayerindex_;
}
inline int32_t CSNtfEquipDivision::srcplayerindex() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfEquipDivision.SrcPlayerIndex)
  return _internal_srcplayerindex();
}
inline void CSNtfEquipDivision::_internal_set_srcplayerindex(int32_t value) {
  
  _impl_.srcplayerindex_ = value;
}
inline void CSNtfEquipDivision::set_srcplayerindex(int32_t value) {
  _internal_set_srcplayerindex(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfEquipDivision.SrcPlayerIndex)
}

// repeated .msg.Division Divisions = 2;
inline int CSNtfEquipDivision::_internal_divisions_size() const {
  return _impl_.divisions_.size();
}
inline int CSNtfEquipDivision::divisions_size() const {
  return _internal_divisions_size();
}
inline void CSNtfEquipDivision::clear_divisions() {
  _impl_.divisions_.Clear();
}
inline ::msg::Division* CSNtfEquipDivision::mutable_divisions(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSNtfEquipDivision.Divisions)
  return _impl_.divisions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Division >*
CSNtfEquipDivision::mutable_divisions() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSNtfEquipDivision.Divisions)
  return &_impl_.divisions_;
}
inline const ::msg::Division& CSNtfEquipDivision::_internal_divisions(int index) const {
  return _impl_.divisions_.Get(index);
}
inline const ::msg::Division& CSNtfEquipDivision::divisions(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSNtfEquipDivision.Divisions)
  return _internal_divisions(index);
}
inline ::msg::Division* CSNtfEquipDivision::_internal_add_divisions() {
  return _impl_.divisions_.Add();
}
inline ::msg::Division* CSNtfEquipDivision::add_divisions() {
  ::msg::Division* _add = _internal_add_divisions();
  // @@protoc_insertion_point(field_add:msg.CSNtfEquipDivision.Divisions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::Division >&
CSNtfEquipDivision::divisions() const {
  // @@protoc_insertion_point(field_list:msg.CSNtfEquipDivision.Divisions)
  return _impl_.divisions_;
}

// -------------------------------------------------------------------

// CSNtfVisitPlayer

// int32 SrcPlayerIndex = 1;
inline void CSNtfVisitPlayer::clear_srcplayerindex() {
  _impl_.srcplayerindex_ = 0;
}
inline int32_t CSNtfVisitPlayer::_internal_srcplayerindex() const {
  return _impl_.srcplayerindex_;
}
inline int32_t CSNtfVisitPlayer::srcplayerindex() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfVisitPlayer.SrcPlayerIndex)
  return _internal_srcplayerindex();
}
inline void CSNtfVisitPlayer::_internal_set_srcplayerindex(int32_t value) {
  
  _impl_.srcplayerindex_ = value;
}
inline void CSNtfVisitPlayer::set_srcplayerindex(int32_t value) {
  _internal_set_srcplayerindex(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfVisitPlayer.SrcPlayerIndex)
}

// int32 DestPlayerIndex = 2;
inline void CSNtfVisitPlayer::clear_destplayerindex() {
  _impl_.destplayerindex_ = 0;
}
inline int32_t CSNtfVisitPlayer::_internal_destplayerindex() const {
  return _impl_.destplayerindex_;
}
inline int32_t CSNtfVisitPlayer::destplayerindex() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfVisitPlayer.DestPlayerIndex)
  return _internal_destplayerindex();
}
inline void CSNtfVisitPlayer::_internal_set_destplayerindex(int32_t value) {
  
  _impl_.destplayerindex_ = value;
}
inline void CSNtfVisitPlayer::set_destplayerindex(int32_t value) {
  _internal_set_destplayerindex(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfVisitPlayer.DestPlayerIndex)
}

// -------------------------------------------------------------------

// CSNtfLeaveGameEarly

// uint32 PlayerIndex = 1;
inline void CSNtfLeaveGameEarly::clear_playerindex() {
  _impl_.playerindex_ = 0u;
}
inline uint32_t CSNtfLeaveGameEarly::_internal_playerindex() const {
  return _impl_.playerindex_;
}
inline uint32_t CSNtfLeaveGameEarly::playerindex() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfLeaveGameEarly.PlayerIndex)
  return _internal_playerindex();
}
inline void CSNtfLeaveGameEarly::_internal_set_playerindex(uint32_t value) {
  
  _impl_.playerindex_ = value;
}
inline void CSNtfLeaveGameEarly::set_playerindex(uint32_t value) {
  _internal_set_playerindex(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfLeaveGameEarly.PlayerIndex)
}

// -------------------------------------------------------------------

// CSNtfPvpAffixTrigger

// uint32 PlayerIndex = 1;
inline void CSNtfPvpAffixTrigger::clear_playerindex() {
  _impl_.playerindex_ = 0u;
}
inline uint32_t CSNtfPvpAffixTrigger::_internal_playerindex() const {
  return _impl_.playerindex_;
}
inline uint32_t CSNtfPvpAffixTrigger::playerindex() const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpAffixTrigger.PlayerIndex)
  return _internal_playerindex();
}
inline void CSNtfPvpAffixTrigger::_internal_set_playerindex(uint32_t value) {
  
  _impl_.playerindex_ = value;
}
inline void CSNtfPvpAffixTrigger::set_playerindex(uint32_t value) {
  _internal_set_playerindex(value);
  // @@protoc_insertion_point(field_set:msg.CSNtfPvpAffixTrigger.PlayerIndex)
}

// repeated .msg.AffixTriggerInfo Affix = 3;
inline int CSNtfPvpAffixTrigger::_internal_affix_size() const {
  return _impl_.affix_.size();
}
inline int CSNtfPvpAffixTrigger::affix_size() const {
  return _internal_affix_size();
}
inline void CSNtfPvpAffixTrigger::clear_affix() {
  _impl_.affix_.Clear();
}
inline ::msg::AffixTriggerInfo* CSNtfPvpAffixTrigger::mutable_affix(int index) {
  // @@protoc_insertion_point(field_mutable:msg.CSNtfPvpAffixTrigger.Affix)
  return _impl_.affix_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::AffixTriggerInfo >*
CSNtfPvpAffixTrigger::mutable_affix() {
  // @@protoc_insertion_point(field_mutable_list:msg.CSNtfPvpAffixTrigger.Affix)
  return &_impl_.affix_;
}
inline const ::msg::AffixTriggerInfo& CSNtfPvpAffixTrigger::_internal_affix(int index) const {
  return _impl_.affix_.Get(index);
}
inline const ::msg::AffixTriggerInfo& CSNtfPvpAffixTrigger::affix(int index) const {
  // @@protoc_insertion_point(field_get:msg.CSNtfPvpAffixTrigger.Affix)
  return _internal_affix(index);
}
inline ::msg::AffixTriggerInfo* CSNtfPvpAffixTrigger::_internal_add_affix() {
  return _impl_.affix_.Add();
}
inline ::msg::AffixTriggerInfo* CSNtfPvpAffixTrigger::add_affix() {
  ::msg::AffixTriggerInfo* _add = _internal_add_affix();
  // @@protoc_insertion_point(field_add:msg.CSNtfPvpAffixTrigger.Affix)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::AffixTriggerInfo >&
CSNtfPvpAffixTrigger::affix() const {
  // @@protoc_insertion_point(field_list:msg.CSNtfPvpAffixTrigger.Affix)
  return _impl_.affix_;
}

// -------------------------------------------------------------------

// AffixTriggerInfo

// uint32 AffixId = 1;
inline void AffixTriggerInfo::clear_affixid() {
  _impl_.affixid_ = 0u;
}
inline uint32_t AffixTriggerInfo::_internal_affixid() const {
  return _impl_.affixid_;
}
inline uint32_t AffixTriggerInfo::affixid() const {
  // @@protoc_insertion_point(field_get:msg.AffixTriggerInfo.AffixId)
  return _internal_affixid();
}
inline void AffixTriggerInfo::_internal_set_affixid(uint32_t value) {
  
  _impl_.affixid_ = value;
}
inline void AffixTriggerInfo::set_affixid(uint32_t value) {
  _internal_set_affixid(value);
  // @@protoc_insertion_point(field_set:msg.AffixTriggerInfo.AffixId)
}

// float Value = 2;
inline void AffixTriggerInfo::clear_value() {
  _impl_.value_ = 0;
}
inline float AffixTriggerInfo::_internal_value() const {
  return _impl_.value_;
}
inline float AffixTriggerInfo::value() const {
  // @@protoc_insertion_point(field_get:msg.AffixTriggerInfo.Value)
  return _internal_value();
}
inline void AffixTriggerInfo::_internal_set_value(float value) {
  
  _impl_.value_ = value;
}
inline void AffixTriggerInfo::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:msg.AffixTriggerInfo.Value)
}

// uint32 ChessHandle = 3;
inline void AffixTriggerInfo::clear_chesshandle() {
  _impl_.chesshandle_ = 0u;
}
inline uint32_t AffixTriggerInfo::_internal_chesshandle() const {
  return _impl_.chesshandle_;
}
inline uint32_t AffixTriggerInfo::chesshandle() const {
  // @@protoc_insertion_point(field_get:msg.AffixTriggerInfo.ChessHandle)
  return _internal_chesshandle();
}
inline void AffixTriggerInfo::_internal_set_chesshandle(uint32_t value) {
  
  _impl_.chesshandle_ = value;
}
inline void AffixTriggerInfo::set_chesshandle(uint32_t value) {
  _internal_set_chesshandle(value);
  // @@protoc_insertion_point(field_set:msg.AffixTriggerInfo.ChessHandle)
}

// uint32 ChessId = 4;
inline void AffixTriggerInfo::clear_chessid() {
  _impl_.chessid_ = 0u;
}
inline uint32_t AffixTriggerInfo::_internal_chessid() const {
  return _impl_.chessid_;
}
inline uint32_t AffixTriggerInfo::chessid() const {
  // @@protoc_insertion_point(field_get:msg.AffixTriggerInfo.ChessId)
  return _internal_chessid();
}
inline void AffixTriggerInfo::_internal_set_chessid(uint32_t value) {
  
  _impl_.chessid_ = value;
}
inline void AffixTriggerInfo::set_chessid(uint32_t value) {
  _internal_set_chessid(value);
  // @@protoc_insertion_point(field_set:msg.AffixTriggerInfo.ChessId)
}

// uint32 FrameIdx = 5;
inline void AffixTriggerInfo::clear_frameidx() {
  _impl_.frameidx_ = 0u;
}
inline uint32_t AffixTriggerInfo::_internal_frameidx() const {
  return _impl_.frameidx_;
}
inline uint32_t AffixTriggerInfo::frameidx() const {
  // @@protoc_insertion_point(field_get:msg.AffixTriggerInfo.FrameIdx)
  return _internal_frameidx();
}
inline void AffixTriggerInfo::_internal_set_frameidx(uint32_t value) {
  
  _impl_.frameidx_ = value;
}
inline void AffixTriggerInfo::set_frameidx(uint32_t value) {
  _internal_set_frameidx(value);
  // @@protoc_insertion_point(field_set:msg.AffixTriggerInfo.FrameIdx)
}

// bool IsOnlyTrigger = 6;
inline void AffixTriggerInfo::clear_isonlytrigger() {
  _impl_.isonlytrigger_ = false;
}
inline bool AffixTriggerInfo::_internal_isonlytrigger() const {
  return _impl_.isonlytrigger_;
}
inline bool AffixTriggerInfo::isonlytrigger() const {
  // @@protoc_insertion_point(field_get:msg.AffixTriggerInfo.IsOnlyTrigger)
  return _internal_isonlytrigger();
}
inline void AffixTriggerInfo::_internal_set_isonlytrigger(bool value) {
  
  _impl_.isonlytrigger_ = value;
}
inline void AffixTriggerInfo::set_isonlytrigger(bool value) {
  _internal_set_isonlytrigger(value);
  // @@protoc_insertion_point(field_set:msg.AffixTriggerInfo.IsOnlyTrigger)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::GameStage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::GameStage>() {
  return ::msg::GameStage_descriptor();
}
template <> struct is_proto_enum< ::msg::GamePhase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::GamePhase>() {
  return ::msg::GamePhase_descriptor();
}
template <> struct is_proto_enum< ::msg::AddictionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::AddictionState>() {
  return ::msg::AddictionState_descriptor();
}
template <> struct is_proto_enum< ::msg::MessengerMoveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::MessengerMoveType>() {
  return ::msg::MessengerMoveType_descriptor();
}
template <> struct is_proto_enum< ::msg::PvpOfflineType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::PvpOfflineType>() {
  return ::msg::PvpOfflineType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_battle_2eproto
